
ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08009c64  08009c64  0000ac64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d4c  08009d4c  0000b070  2**0
                  CONTENTS
  4 .ARM          00000008  08009d4c  08009d4c  0000ad4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d54  08009d54  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d54  08009d54  0000ad54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d58  08009d58  0000ad58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08009d5c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e00  20000070  08009dcc  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e70  08009dcc  0000be70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205c7  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fea  00000000  00000000  0002b667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c98  00000000  00000000  0002f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000163a  00000000  00000000  000312f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005963  00000000  00000000  0003292a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ffac  00000000  00000000  0003828d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a968  00000000  00000000  00058239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172ba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008234  00000000  00000000  00172be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0017ae18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c4c 	.word	0x08009c4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009c4c 	.word	0x08009c4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__NVIC_SetVector>:
           VTOR must been relocated to SRAM before.
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <__NVIC_SetVector+0x34>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	60fb      	str	r3, [r7, #12]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	3310      	adds	r3, #16
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	461a      	mov	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4413      	add	r3, r2
 8000580:	461a      	mov	r2, r3
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	6013      	str	r3, [r2, #0]
  /* ARM Application Note 321 states that the M4 does not require the architectural barrier */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005a6:	2201      	movs	r2, #1
 80005a8:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <__io_putchar+0x20>)
 80005aa:	f004 fbc5 	bl	8004d38 <HAL_UART_Transmit>
	return ch;
 80005ae:	687b      	ldr	r3, [r7, #4]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2000008c 	.word	0x2000008c

080005bc <HAL_ADC_MspInit>:


void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <HAL_ADC_MspInit+0x38>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d10b      	bne.n	80005e6 <HAL_ADC_MspInit+0x2a>
    {
        /* Peripheral clock enable */
        __HAL_RCC_ADC_CLK_ENABLE();
 80005ce:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a09      	ldr	r2, [pc, #36]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    }

}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	50040000 	.word	0x50040000
 80005f8:	40021000 	.word	0x40021000

080005fc <ADC1_Init>:
    }

}

void ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
    hadc1.Instance = ADC1;
 800061e:	4b35      	ldr	r3, [pc, #212]	@ (80006f4 <ADC1_Init+0xf8>)
 8000620:	4a35      	ldr	r2, [pc, #212]	@ (80006f8 <ADC1_Init+0xfc>)
 8000622:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;//ADC_CLOCK_ASYNC_DIV1;
 8000624:	4b33      	ldr	r3, [pc, #204]	@ (80006f4 <ADC1_Init+0xf8>)
 8000626:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800062a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b31      	ldr	r3, [pc, #196]	@ (80006f4 <ADC1_Init+0xf8>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b30      	ldr	r3, [pc, #192]	@ (80006f4 <ADC1_Init+0xf8>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000638:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <ADC1_Init+0xf8>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <ADC1_Init+0xf8>)
 8000640:	2204      	movs	r2, #4
 8000642:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <ADC1_Init+0xf8>)
 8000646:	2200      	movs	r2, #0
 8000648:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 800064a:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <ADC1_Init+0xf8>)
 800064c:	2200      	movs	r2, #0
 800064e:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <ADC1_Init+0xf8>)
 8000652:	2201      	movs	r2, #1
 8000654:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000656:	4b27      	ldr	r3, [pc, #156]	@ (80006f4 <ADC1_Init+0xf8>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800065e:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <ADC1_Init+0xf8>)
 8000660:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000664:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000666:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <ADC1_Init+0xf8>)
 8000668:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <ADC1_Init+0xf8>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <ADC1_Init+0xf8>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <ADC1_Init+0xf8>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	481b      	ldr	r0, [pc, #108]	@ (80006f4 <ADC1_Init+0xf8>)
 8000686:	f000 feb3 	bl	80013f0 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <ADC1_Init+0x98>
    {
        Error_Handler();
 8000690:	f000 fa3c 	bl	8000b0c <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000694:	217f      	movs	r1, #127	@ 0x7f
 8000696:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <ADC1_Init+0xf8>)
 8000698:	f001 fe7e 	bl	8002398 <HAL_ADCEx_Calibration_Start>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <ADC1_Init+0xaa>
    {
        Error_Handler();
 80006a2:	f000 fa33 	bl	8000b0c <Error_Handler>
    }

  /** Configure the ADC multi-mode
  */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	4810      	ldr	r0, [pc, #64]	@ (80006f4 <ADC1_Init+0xf8>)
 80006b2:	f001 fed1 	bl	8002458 <HAL_ADCEx_MultiModeConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <ADC1_Init+0xc4>
    {
        Error_Handler();
 80006bc:	f000 fa26 	bl	8000b0c <Error_Handler>
    }

  /** Configure Regular Channel
  */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <ADC1_Init+0x100>)
 80006c2:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c4:	2306      	movs	r3, #6
 80006c6:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;//ADC_SAMPLETIME_247CYCLES_5;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006cc:	237f      	movs	r3, #127	@ 0x7f
 80006ce:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d0:	2304      	movs	r3, #4
 80006d2:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <ADC1_Init+0xf8>)
 80006de:	f001 f89d 	bl	800181c <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <ADC1_Init+0xf0>
    {
        Error_Handler();
 80006e8:	f000 fa10 	bl	8000b0c <Error_Handler>
    }

}
 80006ec:	bf00      	nop
 80006ee:	3728      	adds	r7, #40	@ 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000168 	.word	0x20000168
 80006f8:	50040000 	.word	0x50040000
 80006fc:	c7520000 	.word	0xc7520000

08000700 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	//to do: inform RTOS task to print out sensor data
	//printf("123\n");
	half = 0;
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <HAL_ADC_ConvCpltCallback+0x20>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
	osSemaphoreRelease(DMAprintHandle);
 800070e:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <HAL_ADC_ConvCpltCallback+0x24>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f005 fa5a 	bl	8005bcc <osSemaphoreRelease>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000000 	.word	0x20000000
 8000724:	20000118 	.word	0x20000118

08000728 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    //to do: inform RTOS task to print out sensor data
	//printf("456\n");
	half = 1;
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
	osSemaphoreRelease(DMAprintHandle);
 8000736:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f005 fa46 	bl	8005bcc <osSemaphoreRelease>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000
 800074c:	20000118 	.word	0x20000118

08000750 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    SET_BIT(hadc1.Instance->CFGR, ADC_CFGR_DMACFG);
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <DMA1_Channel1_IRQHandler+0x20>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	68da      	ldr	r2, [r3, #12]
 800075a:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <DMA1_Channel1_IRQHandler+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0202 	orr.w	r2, r2, #2
 8000762:	60da      	str	r2, [r3, #12]
    HAL_DMA_IRQHandler(&hdma1);
 8000764:	4803      	ldr	r0, [pc, #12]	@ (8000774 <DMA1_Channel1_IRQHandler+0x24>)
 8000766:	f002 f951 	bl	8002a0c <HAL_DMA_IRQHandler>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000168 	.word	0x20000168
 8000774:	200001cc 	.word	0x200001cc

08000778 <ADC1_DMA1CH1_init>:

void ADC1_DMA1CH1_init()
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 800077e:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <ADC1_DMA1CH1_init+0x98>)
 8000780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000782:	4a23      	ldr	r2, [pc, #140]	@ (8000810 <ADC1_DMA1CH1_init+0x98>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6493      	str	r3, [r2, #72]	@ 0x48
 800078a:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <ADC1_DMA1CH1_init+0x98>)
 800078c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

    hdma1.Instance = DMA1_Channel1;
 8000796:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <ADC1_DMA1CH1_init+0x9c>)
 8000798:	4a1f      	ldr	r2, [pc, #124]	@ (8000818 <ADC1_DMA1CH1_init+0xa0>)
 800079a:	601a      	str	r2, [r3, #0]
    hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079c:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <ADC1_DMA1CH1_init+0x9c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
    hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <ADC1_DMA1CH1_init+0x9c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
    hdma1.Init.MemInc = DMA_MINC_ENABLE;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <ADC1_DMA1CH1_init+0x9c>)
 80007aa:	2280      	movs	r2, #128	@ 0x80
 80007ac:	611a      	str	r2, [r3, #16]
    hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007ae:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <ADC1_DMA1CH1_init+0x9c>)
 80007b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007b4:	615a      	str	r2, [r3, #20]
    hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <ADC1_DMA1CH1_init+0x9c>)
 80007b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007bc:	619a      	str	r2, [r3, #24]
    hdma1.Init.Mode = DMA_CIRCULAR;
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <ADC1_DMA1CH1_init+0x9c>)
 80007c0:	2220      	movs	r2, #32
 80007c2:	61da      	str	r2, [r3, #28]
    hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <ADC1_DMA1CH1_init+0x9c>)
 80007c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007ca:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma1) != HAL_OK)
 80007cc:	4811      	ldr	r0, [pc, #68]	@ (8000814 <ADC1_DMA1CH1_init+0x9c>)
 80007ce:	f002 f805 	bl	80027dc <HAL_DMA_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <ADC1_DMA1CH1_init+0x64>
    {
        Error_Handler();
 80007d8:	f000 f998 	bl	8000b0c <Error_Handler>
    }

    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <ADC1_DMA1CH1_init+0xa4>)
 80007de:	4a0d      	ldr	r2, [pc, #52]	@ (8000814 <ADC1_DMA1CH1_init+0x9c>)
 80007e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <ADC1_DMA1CH1_init+0x9c>)
 80007e4:	4a0d      	ldr	r2, [pc, #52]	@ (800081c <ADC1_DMA1CH1_init+0xa4>)
 80007e6:	629a      	str	r2, [r3, #40]	@ 0x28

    ADC1_Init();
 80007e8:	f7ff ff08 	bl	80005fc <ADC1_Init>

    NVIC_SetVector(DMA1_Channel1_IRQn, (uint32_t)&DMA1_Channel1_IRQHandler);
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <ADC1_DMA1CH1_init+0xa8>)
 80007ee:	4619      	mov	r1, r3
 80007f0:	200b      	movs	r0, #11
 80007f2:	f7ff feb5 	bl	8000560 <__NVIC_SetVector>
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2105      	movs	r1, #5
 80007fa:	200b      	movs	r0, #11
 80007fc:	f001 ffb7 	bl	800276e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000800:	200b      	movs	r0, #11
 8000802:	f001 ffd0 	bl	80027a6 <HAL_NVIC_EnableIRQ>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000
 8000814:	200001cc 	.word	0x200001cc
 8000818:	40020008 	.word	0x40020008
 800081c:	20000168 	.word	0x20000168
 8000820:	08000751 	.word	0x08000751

08000824 <HAL_TIM_Base_MspInit>:



void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance == TIM1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <HAL_TIM_Base_MspInit+0x38>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d10b      	bne.n	800084e <HAL_TIM_Base_MspInit+0x2a>
    {
        __HAL_RCC_TIM1_CLK_ENABLE();
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <HAL_TIM_Base_MspInit+0x3c>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083a:	4a09      	ldr	r2, [pc, #36]	@ (8000860 <HAL_TIM_Base_MspInit+0x3c>)
 800083c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000840:	6613      	str	r3, [r2, #96]	@ 0x60
 8000842:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <HAL_TIM_Base_MspInit+0x3c>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000846:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    }
}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40012c00 	.word	0x40012c00
 8000860:	40021000 	.word	0x40021000

08000864 <TIM1_Init>:
    }
}


static void TIM1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 8000882:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <TIM1_Init+0x98>)
 8000884:	4a1e      	ldr	r2, [pc, #120]	@ (8000900 <TIM1_Init+0x9c>)
 8000886:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 4000 - 1;
 8000888:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <TIM1_Init+0x98>)
 800088a:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800088e:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <TIM1_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 1000 - 1;
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <TIM1_Init+0x98>)
 8000898:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800089c:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <TIM1_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <TIM1_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008aa:	4814      	ldr	r0, [pc, #80]	@ (80008fc <TIM1_Init+0x98>)
 80008ac:	f003 fe9c 	bl	80045e8 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <TIM1_Init+0x56>
    {
        Error_Handler();
 80008b6:	f000 f929 	bl	8000b0c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008be:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	@ (80008fc <TIM1_Init+0x98>)
 80008c8:	f003 ff56 	bl	8004778 <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <TIM1_Init+0x72>
    {
        Error_Handler();
 80008d2:	f000 f91b 	bl	8000b0c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008d6:	2320      	movs	r3, #32
 80008d8:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	@ (80008fc <TIM1_Init+0x98>)
 80008e4:	f004 f952 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <TIM1_Init+0x8e>
    {
        Error_Handler();
 80008ee:	f000 f90d 	bl	8000b0c <Error_Handler>
    }
}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000011c 	.word	0x2000011c
 8000900:	40012c00 	.word	0x40012c00

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f000 fb01 	bl	8000f0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f836 	bl	800097c <SystemClock_Config>
  //MX_GPIO_Init();
  //MX_DFSDM1_Init();
  //MX_I2C2_Init();
  //MX_QUADSPI_Init();
  //MX_SPI3_Init();
  MX_USART1_UART_Init();
 8000910:	f000 f896 	bl	8000a40 <MX_USART1_UART_Init>
  //MX_USART3_UART_Init();
  //MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */

  TIM1_Init();
 8000914:	f7ff ffa6 	bl	8000864 <TIM1_Init>
  ADC1_DMA1CH1_init();
 8000918:	f7ff ff2e 	bl	8000778 <ADC1_DMA1CH1_init>


  HAL_ADC_Start_DMA(&hadc1,(uint32_t *) &sample_buffer[0], SAMPLE_BUFFER_SIZE);
 800091c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000920:	490e      	ldr	r1, [pc, #56]	@ (800095c <main+0x58>)
 8000922:	480f      	ldr	r0, [pc, #60]	@ (8000960 <main+0x5c>)
 8000924:	f000 feb4 	bl	8001690 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim1);
 8000928:	480e      	ldr	r0, [pc, #56]	@ (8000964 <main+0x60>)
 800092a:	f003 feb5 	bl	8004698 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800092e:	f004 ff95 	bl	800585c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of DMAprint */
  DMAprintHandle = osSemaphoreNew(1, 0, &DMAprint_attributes);
 8000932:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <main+0x64>)
 8000934:	2100      	movs	r1, #0
 8000936:	2001      	movs	r0, #1
 8000938:	f005 f86c 	bl	8005a14 <osSemaphoreNew>
 800093c:	4603      	mov	r3, r0
 800093e:	4a0b      	ldr	r2, [pc, #44]	@ (800096c <main+0x68>)
 8000940:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000942:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <main+0x6c>)
 8000944:	2100      	movs	r1, #0
 8000946:	480b      	ldr	r0, [pc, #44]	@ (8000974 <main+0x70>)
 8000948:	f004 ffd2 	bl	80058f0 <osThreadNew>
 800094c:	4603      	mov	r3, r0
 800094e:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <main+0x74>)
 8000950:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000952:	f004 ffa7 	bl	80058a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000956:	bf00      	nop
 8000958:	e7fd      	b.n	8000956 <main+0x52>
 800095a:	bf00      	nop
 800095c:	20000214 	.word	0x20000214
 8000960:	20000168 	.word	0x20000168
 8000964:	2000011c 	.word	0x2000011c
 8000968:	08009cc0 	.word	0x08009cc0
 800096c:	20000118 	.word	0x20000118
 8000970:	08009c9c 	.word	0x08009c9c
 8000974:	08000aa1 	.word	0x08000aa1
 8000978:	20000114 	.word	0x20000114

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b096      	sub	sp, #88	@ 0x58
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2244      	movs	r2, #68	@ 0x44
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f008 fb03 	bl	8008f96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	463b      	mov	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800099e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009a2:	f002 faff 	bl	8002fa4 <HAL_PWREx_ControlVoltageScaling>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009ac:	f000 f8ae 	bl	8000b0c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009b0:	f002 fada 	bl	8002f68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009b4:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <SystemClock_Config+0xc0>)
 80009b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009ba:	4a20      	ldr	r2, [pc, #128]	@ (8000a3c <SystemClock_Config+0xc0>)
 80009bc:	f023 0318 	bic.w	r3, r3, #24
 80009c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009c4:	2314      	movs	r3, #20
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009cc:	2301      	movs	r3, #1
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009d4:	2360      	movs	r3, #96	@ 0x60
 80009d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009dc:	2301      	movs	r3, #1
 80009de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009e4:	2328      	movs	r3, #40	@ 0x28
 80009e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009e8:	2307      	movs	r3, #7
 80009ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fb29 	bl	8003050 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a04:	f000 f882 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2104      	movs	r1, #4
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 fef1 	bl	8003808 <HAL_RCC_ClockConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a2c:	f000 f86e 	bl	8000b0c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a30:	f003 fbf8 	bl	8004224 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a34:	bf00      	nop
 8000a36:	3758      	adds	r7, #88	@ 0x58
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40021000 	.word	0x40021000

08000a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a44:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a46:	4a15      	ldr	r2, [pc, #84]	@ (8000a9c <MX_USART1_UART_Init+0x5c>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a84:	f004 f90a 	bl	8004c9c <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a8e:	f000 f83d 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000008c 	.word	0x2000008c
 8000a9c:	40013800 	.word	0x40013800

08000aa0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(DMAprintHandle,osWaitForever);
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <StartDefaultTask+0x5c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f005 f839 	bl	8005b28 <osSemaphoreAcquire>
	  int offset = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
	  if(half == 1) offset = 0;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <StartDefaultTask+0x60>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d102      	bne.n	8000ac8 <StartDefaultTask+0x28>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	e001      	b.n	8000acc <StartDefaultTask+0x2c>
	  else 			offset = SAMPLE_BUFFER_SIZE/2;
 8000ac8:	2380      	movs	r3, #128	@ 0x80
 8000aca:	60fb      	str	r3, [r7, #12]
	  for(int i=0; i<SAMPLE_BUFFER_SIZE/2; i=i+1){
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	e00c      	b.n	8000aec <StartDefaultTask+0x4c>
		  printf("%d  ",sample_buffer[i+offset]);
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <StartDefaultTask+0x64>)
 8000ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4809      	ldr	r0, [pc, #36]	@ (8000b08 <StartDefaultTask+0x68>)
 8000ae2:	f008 f9fb 	bl	8008edc <iprintf>
	  for(int i=0; i<SAMPLE_BUFFER_SIZE/2; i=i+1){
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000af0:	ddef      	ble.n	8000ad2 <StartDefaultTask+0x32>
	  }
	  printf("\n");
 8000af2:	200a      	movs	r0, #10
 8000af4:	f008 fa04 	bl	8008f00 <putchar>
  {
 8000af8:	e7d6      	b.n	8000aa8 <StartDefaultTask+0x8>
 8000afa:	bf00      	nop
 8000afc:	20000118 	.word	0x20000118
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000214 	.word	0x20000214
 8000b08:	08009c7c 	.word	0x08009c7c

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <Error_Handler+0x8>

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b22:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	210f      	movs	r1, #15
 8000b52:	f06f 0001 	mvn.w	r0, #1
 8000b56:	f001 fe0a 	bl	800276e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000

08000b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	2288      	movs	r2, #136	@ 0x88
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f008 fa04 	bl	8008f96 <memset>
  if(huart->Instance==USART1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a42      	ldr	r2, [pc, #264]	@ (8000c9c <HAL_UART_MspInit+0x134>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d13b      	bne.n	8000c10 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 f853 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bb0:	f7ff ffac 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca0 <HAL_UART_MspInit+0x138>)
 8000bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb8:	4a39      	ldr	r2, [pc, #228]	@ (8000ca0 <HAL_UART_MspInit+0x138>)
 8000bba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bc0:	4b37      	ldr	r3, [pc, #220]	@ (8000ca0 <HAL_UART_MspInit+0x138>)
 8000bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	4b34      	ldr	r3, [pc, #208]	@ (8000ca0 <HAL_UART_MspInit+0x138>)
 8000bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd0:	4a33      	ldr	r2, [pc, #204]	@ (8000ca0 <HAL_UART_MspInit+0x138>)
 8000bd2:	f043 0302 	orr.w	r3, r3, #2
 8000bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ca0 <HAL_UART_MspInit+0x138>)
 8000bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000be4:	23c0      	movs	r3, #192	@ 0xc0
 8000be6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c06:	4619      	mov	r1, r3
 8000c08:	4826      	ldr	r0, [pc, #152]	@ (8000ca4 <HAL_UART_MspInit+0x13c>)
 8000c0a:	f001 ffdf 	bl	8002bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c0e:	e040      	b.n	8000c92 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a24      	ldr	r2, [pc, #144]	@ (8000ca8 <HAL_UART_MspInit+0x140>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d13b      	bne.n	8000c92 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 f812 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000c32:	f7ff ff6b 	bl	8000b0c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <HAL_UART_MspInit+0x138>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3a:	4a19      	ldr	r2, [pc, #100]	@ (8000ca0 <HAL_UART_MspInit+0x138>)
 8000c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <HAL_UART_MspInit+0x138>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <HAL_UART_MspInit+0x138>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	4a13      	ldr	r2, [pc, #76]	@ (8000ca0 <HAL_UART_MspInit+0x138>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <HAL_UART_MspInit+0x138>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000c66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c80:	2307      	movs	r3, #7
 8000c82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c86:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4807      	ldr	r0, [pc, #28]	@ (8000cac <HAL_UART_MspInit+0x144>)
 8000c8e:	f001 ff9d 	bl	8002bcc <HAL_GPIO_Init>
}
 8000c92:	bf00      	nop
 8000c94:	37b8      	adds	r7, #184	@ 0xb8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40013800 	.word	0x40013800
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	40004800 	.word	0x40004800
 8000cac:	48000c00 	.word	0x48000c00

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cea:	f000 f965 	bl	8000fb8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cee:	f006 feb9 	bl	8007a64 <xTaskGetSchedulerState>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d001      	beq.n	8000cfc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cf8:	f007 fdae 	bl	8008858 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8000d04:	2020      	movs	r0, #32
 8000d06:	f002 f90b 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8000d0a:	2040      	movs	r0, #64	@ 0x40
 8000d0c:	f002 f908 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8000d10:	2080      	movs	r0, #128	@ 0x80
 8000d12:	f002 f905 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8000d16:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000d1a:	f002 f901 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8000d26:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000d2a:	f002 f8f9 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000d2e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000d32:	f002 f8f5 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8000d36:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d3a:	f002 f8f1 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8000d3e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d42:	f002 f8ed 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8000d46:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000d4a:	f002 f8e9 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e00a      	b.n	8000d7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d64:	f3af 8000 	nop.w
 8000d68:	4601      	mov	r1, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	60ba      	str	r2, [r7, #8]
 8000d70:	b2ca      	uxtb	r2, r1
 8000d72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	dbf0      	blt.n	8000d64 <_read+0x12>
  }

  return len;
 8000d82:	687b      	ldr	r3, [r7, #4]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	e009      	b.n	8000db2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	60ba      	str	r2, [r7, #8]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fbf6 	bl	8000598 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	dbf1      	blt.n	8000d9e <_write+0x12>
  }
  return len;
 8000dba:	687b      	ldr	r3, [r7, #4]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_close>:

int _close(int file)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dec:	605a      	str	r2, [r3, #4]
  return 0;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_isatty>:

int _isatty(int file)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e04:	2301      	movs	r3, #1
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f008 f8ea 	bl	8009034 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20018000 	.word	0x20018000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	20000414 	.word	0x20000414
 8000e94:	20001e70 	.word	0x20001e70

08000e98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec0:	f7ff ffea 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	@ (8000efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <LoopForever+0xe>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f08 <LoopForever+0x16>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eea:	f008 f8a9 	bl	8009040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eee:	f7ff fd09 	bl	8000904 <main>

08000ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef2:	e7fe      	b.n	8000ef2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f00:	08009d5c 	.word	0x08009d5c
  ldr r2, =_sbss
 8000f04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f08:	20001e70 	.word	0x20001e70

08000f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC1_2_IRQHandler>

08000f0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f001 fc1d 	bl	8002758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f000 f80e 	bl	8000f40 <HAL_InitTick>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	71fb      	strb	r3, [r7, #7]
 8000f2e:	e001      	b.n	8000f34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f30:	f7ff fdf2 	bl	8000b18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f34:	79fb      	ldrb	r3, [r7, #7]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f4c:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <HAL_InitTick+0x6c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d023      	beq.n	8000f9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f54:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <HAL_InitTick+0x70>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <HAL_InitTick+0x6c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 fc29 	bl	80027c2 <HAL_SYSTICK_Config>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10f      	bne.n	8000f96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d809      	bhi.n	8000f90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f001 fbf3 	bl	800276e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f88:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <HAL_InitTick+0x74>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e007      	b.n	8000fa0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e004      	b.n	8000fa0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e001      	b.n	8000fa0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000000c 	.word	0x2000000c
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2000000c 	.word	0x2000000c
 8000fdc:	20000418 	.word	0x20000418

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000418 	.word	0x20000418

08000ff8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	431a      	orrs	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	609a      	str	r2, [r3, #8]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	609a      	str	r2, [r3, #8]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	3360      	adds	r3, #96	@ 0x60
 8001072:	461a      	mov	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <LL_ADC_SetOffset+0x44>)
 8001082:	4013      	ands	r3, r2
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	4313      	orrs	r3, r2
 8001090:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001098:	bf00      	nop
 800109a:	371c      	adds	r7, #28
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	03fff000 	.word	0x03fff000

080010a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3360      	adds	r3, #96	@ 0x60
 80010b6:	461a      	mov	r2, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3360      	adds	r3, #96	@ 0x60
 80010e4:	461a      	mov	r2, r3
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	431a      	orrs	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010fe:	bf00      	nop
 8001100:	371c      	adds	r7, #28
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3330      	adds	r3, #48	@ 0x30
 8001140:	461a      	mov	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	4413      	add	r3, r2
 800114e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	211f      	movs	r1, #31
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	401a      	ands	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	0e9b      	lsrs	r3, r3, #26
 8001168:	f003 011f 	and.w	r1, r3, #31
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f003 031f 	and.w	r3, r3, #31
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	431a      	orrs	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3314      	adds	r3, #20
 8001198:	461a      	mov	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	0e5b      	lsrs	r3, r3, #25
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	4413      	add	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	0d1b      	lsrs	r3, r3, #20
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	2107      	movs	r1, #7
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	401a      	ands	r2, r3
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	0d1b      	lsrs	r3, r3, #20
 80011c2:	f003 031f 	and.w	r3, r3, #31
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	fa01 f303 	lsl.w	r3, r1, r3
 80011cc:	431a      	orrs	r2, r3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011d2:	bf00      	nop
 80011d4:	371c      	adds	r7, #28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011f8:	43db      	mvns	r3, r3
 80011fa:	401a      	ands	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0318 	and.w	r3, r3, #24
 8001202:	4908      	ldr	r1, [pc, #32]	@ (8001224 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001204:	40d9      	lsrs	r1, r3
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	400b      	ands	r3, r1
 800120a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800120e:	431a      	orrs	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	0007ffff 	.word	0x0007ffff

08001228 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 031f 	and.w	r3, r3, #31
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6093      	str	r3, [r2, #8]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800127c:	d101      	bne.n	8001282 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80012a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80012cc:	d101      	bne.n	80012d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012f4:	f043 0201 	orr.w	r2, r3, #1
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001318:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800131c:	f043 0202 	orr.w	r2, r3, #2
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b01      	cmp	r3, #1
 8001342:	d101      	bne.n	8001348 <LL_ADC_IsEnabled+0x18>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <LL_ADC_IsEnabled+0x1a>
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b02      	cmp	r3, #2
 8001368:	d101      	bne.n	800136e <LL_ADC_IsDisableOngoing+0x18>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <LL_ADC_IsDisableOngoing+0x1a>
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800138c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001390:	f043 0204 	orr.w	r2, r3, #4
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d101      	bne.n	80013bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d101      	bne.n	80013e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b089      	sub	sp, #36	@ 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e130      	b.n	800166c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001414:	2b00      	cmp	r3, #0
 8001416:	d109      	bne.n	800142c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff f8cf 	bl	80005bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff19 	bl	8001268 <LL_ADC_IsDeepPowerDownEnabled>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d004      	beq.n	8001446 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff feff 	bl	8001244 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff34 	bl	80012b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d115      	bne.n	8001482 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff18 	bl	8001290 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001460:	4b84      	ldr	r3, [pc, #528]	@ (8001674 <HAL_ADC_Init+0x284>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	099b      	lsrs	r3, r3, #6
 8001466:	4a84      	ldr	r2, [pc, #528]	@ (8001678 <HAL_ADC_Init+0x288>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	099b      	lsrs	r3, r3, #6
 800146e:	3301      	adds	r3, #1
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001474:	e002      	b.n	800147c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3b01      	subs	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f9      	bne.n	8001476 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff16 	bl	80012b8 <LL_ADC_IsInternalRegulatorEnabled>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001496:	f043 0210 	orr.w	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a2:	f043 0201 	orr.w	r2, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff76 	bl	80013a4 <LL_ADC_REG_IsConversionOngoing>
 80014b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 80c9 	bne.w	800165a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f040 80c5 	bne.w	800165a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014d8:	f043 0202 	orr.w	r2, r3, #2
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff23 	bl	8001330 <LL_ADC_IsEnabled>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d115      	bne.n	800151c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014f0:	4862      	ldr	r0, [pc, #392]	@ (800167c <HAL_ADC_Init+0x28c>)
 80014f2:	f7ff ff1d 	bl	8001330 <LL_ADC_IsEnabled>
 80014f6:	4604      	mov	r4, r0
 80014f8:	4861      	ldr	r0, [pc, #388]	@ (8001680 <HAL_ADC_Init+0x290>)
 80014fa:	f7ff ff19 	bl	8001330 <LL_ADC_IsEnabled>
 80014fe:	4603      	mov	r3, r0
 8001500:	431c      	orrs	r4, r3
 8001502:	4860      	ldr	r0, [pc, #384]	@ (8001684 <HAL_ADC_Init+0x294>)
 8001504:	f7ff ff14 	bl	8001330 <LL_ADC_IsEnabled>
 8001508:	4603      	mov	r3, r0
 800150a:	4323      	orrs	r3, r4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d105      	bne.n	800151c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4619      	mov	r1, r3
 8001516:	485c      	ldr	r0, [pc, #368]	@ (8001688 <HAL_ADC_Init+0x298>)
 8001518:	f7ff fd6e 	bl	8000ff8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7e5b      	ldrb	r3, [r3, #25]
 8001520:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001526:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800152c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001532:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d106      	bne.n	8001558 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154e:	3b01      	subs	r3, #1
 8001550:	045b      	lsls	r3, r3, #17
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155c:	2b00      	cmp	r3, #0
 800155e:	d009      	beq.n	8001574 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	4b44      	ldr	r3, [pc, #272]	@ (800168c <HAL_ADC_Init+0x29c>)
 800157c:	4013      	ands	r3, r2
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	69b9      	ldr	r1, [r7, #24]
 8001584:	430b      	orrs	r3, r1
 8001586:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff1c 	bl	80013ca <LL_ADC_INJ_IsConversionOngoing>
 8001592:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d13d      	bne.n	8001616 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d13a      	bne.n	8001616 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015a4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015ac:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80015bc:	f023 0302 	bic.w	r3, r3, #2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	69b9      	ldr	r1, [r7, #24]
 80015c6:	430b      	orrs	r3, r1
 80015c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d118      	bne.n	8001606 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80015de:	f023 0304 	bic.w	r3, r3, #4
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015ea:	4311      	orrs	r1, r2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80015f0:	4311      	orrs	r1, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80015f6:	430a      	orrs	r2, r1
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	e007      	b.n	8001616 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0201 	bic.w	r2, r2, #1
 8001614:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d10c      	bne.n	8001638 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001624:	f023 010f 	bic.w	r1, r3, #15
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	1e5a      	subs	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	631a      	str	r2, [r3, #48]	@ 0x30
 8001636:	e007      	b.n	8001648 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 020f 	bic.w	r2, r2, #15
 8001646:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164c:	f023 0303 	bic.w	r3, r3, #3
 8001650:	f043 0201 	orr.w	r2, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	655a      	str	r2, [r3, #84]	@ 0x54
 8001658:	e007      	b.n	800166a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800165e:	f043 0210 	orr.w	r2, r3, #16
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800166a:	7ffb      	ldrb	r3, [r7, #31]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3724      	adds	r7, #36	@ 0x24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd90      	pop	{r4, r7, pc}
 8001674:	20000004 	.word	0x20000004
 8001678:	053e2d63 	.word	0x053e2d63
 800167c:	50040000 	.word	0x50040000
 8001680:	50040100 	.word	0x50040100
 8001684:	50040200 	.word	0x50040200
 8001688:	50040300 	.word	0x50040300
 800168c:	fff0c007 	.word	0xfff0c007

08001690 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800169c:	4853      	ldr	r0, [pc, #332]	@ (80017ec <HAL_ADC_Start_DMA+0x15c>)
 800169e:	f7ff fdc3 	bl	8001228 <LL_ADC_GetMultimode>
 80016a2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fe7b 	bl	80013a4 <LL_ADC_REG_IsConversionOngoing>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f040 8093 	bne.w	80017dc <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_Start_DMA+0x34>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e08e      	b.n	80017e2 <HAL_ADC_Start_DMA+0x152>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a47      	ldr	r2, [pc, #284]	@ (80017f0 <HAL_ADC_Start_DMA+0x160>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d008      	beq.n	80016e8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d002      	beq.n	80016e8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b09      	cmp	r3, #9
 80016e6:	d172      	bne.n	80017ce <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 fc89 	bl	8002000 <ADC_Enable>
 80016ee:	4603      	mov	r3, r0
 80016f0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d165      	bne.n	80017c4 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a38      	ldr	r2, [pc, #224]	@ (80017f4 <HAL_ADC_Start_DMA+0x164>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d002      	beq.n	800171c <HAL_ADC_Start_DMA+0x8c>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	e000      	b.n	800171e <HAL_ADC_Start_DMA+0x8e>
 800171c:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <HAL_ADC_Start_DMA+0x168>)
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	4293      	cmp	r3, r2
 8001724:	d002      	beq.n	800172c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d105      	bne.n	8001738 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001730:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800173c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001748:	f023 0206 	bic.w	r2, r3, #6
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001750:	e002      	b.n	8001758 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175c:	4a27      	ldr	r2, [pc, #156]	@ (80017fc <HAL_ADC_Start_DMA+0x16c>)
 800175e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001764:	4a26      	ldr	r2, [pc, #152]	@ (8001800 <HAL_ADC_Start_DMA+0x170>)
 8001766:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176c:	4a25      	ldr	r2, [pc, #148]	@ (8001804 <HAL_ADC_Start_DMA+0x174>)
 800176e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	221c      	movs	r2, #28
 8001776:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0210 	orr.w	r2, r2, #16
 800178e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3340      	adds	r3, #64	@ 0x40
 80017aa:	4619      	mov	r1, r3
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f001 f8cc 	bl	800294c <HAL_DMA_Start_IT>
 80017b4:	4603      	mov	r3, r0
 80017b6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fddd 	bl	800137c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80017c2:	e00d      	b.n	80017e0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80017cc:	e008      	b.n	80017e0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80017da:	e001      	b.n	80017e0 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
 80017de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	50040300 	.word	0x50040300
 80017f0:	50040200 	.word	0x50040200
 80017f4:	50040100 	.word	0x50040100
 80017f8:	50040000 	.word	0x50040000
 80017fc:	080021cb 	.word	0x080021cb
 8001800:	080022a3 	.word	0x080022a3
 8001804:	080022bf 	.word	0x080022bf

08001808 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b0b6      	sub	sp, #216	@ 0xd8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_ADC_ConfigChannel+0x22>
 800183a:	2302      	movs	r3, #2
 800183c:	e3c9      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x7b6>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fdaa 	bl	80013a4 <LL_ADC_REG_IsConversionOngoing>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 83aa 	bne.w	8001fac <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b05      	cmp	r3, #5
 8001866:	d824      	bhi.n	80018b2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	3b02      	subs	r3, #2
 800186e:	2b03      	cmp	r3, #3
 8001870:	d81b      	bhi.n	80018aa <HAL_ADC_ConfigChannel+0x8e>
 8001872:	a201      	add	r2, pc, #4	@ (adr r2, 8001878 <HAL_ADC_ConfigChannel+0x5c>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	08001889 	.word	0x08001889
 800187c:	08001891 	.word	0x08001891
 8001880:	08001899 	.word	0x08001899
 8001884:	080018a1 	.word	0x080018a1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001888:	230c      	movs	r3, #12
 800188a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800188e:	e010      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001890:	2312      	movs	r3, #18
 8001892:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001896:	e00c      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001898:	2318      	movs	r3, #24
 800189a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800189e:	e008      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80018a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018a8:	e003      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80018aa:	2306      	movs	r3, #6
 80018ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018b0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80018c0:	f7ff fc36 	bl	8001130 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fd6b 	bl	80013a4 <LL_ADC_REG_IsConversionOngoing>
 80018ce:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fd77 	bl	80013ca <LL_ADC_INJ_IsConversionOngoing>
 80018dc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f040 81a4 	bne.w	8001c32 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 819f 	bne.w	8001c32 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	461a      	mov	r2, r3
 8001902:	f7ff fc41 	bl	8001188 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	08db      	lsrs	r3, r3, #3
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	2b04      	cmp	r3, #4
 8001926:	d00a      	beq.n	800193e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6919      	ldr	r1, [r3, #16]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001938:	f7ff fb92 	bl	8001060 <LL_ADC_SetOffset>
 800193c:	e179      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fbaf 	bl	80010a8 <LL_ADC_GetOffsetChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10a      	bne.n	800196a <HAL_ADC_ConfigChannel+0x14e>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fba4 	bl	80010a8 <LL_ADC_GetOffsetChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	0e9b      	lsrs	r3, r3, #26
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	e01e      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x18c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fb99 	bl	80010a8 <LL_ADC_GetOffsetChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001980:	fa93 f3a3 	rbit	r3, r3
 8001984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800198c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001990:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001998:	2320      	movs	r3, #32
 800199a:	e004      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800199c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d105      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x1a4>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0e9b      	lsrs	r3, r3, #26
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	e018      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x1d6>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80019d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80019dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80019e4:	2320      	movs	r3, #32
 80019e6:	e004      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80019e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d106      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fb68 	bl	80010d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2101      	movs	r1, #1
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fb4c 	bl	80010a8 <LL_ADC_GetOffsetChannel>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10a      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x214>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fb41 	bl	80010a8 <LL_ADC_GetOffsetChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	0e9b      	lsrs	r3, r3, #26
 8001a2a:	f003 021f 	and.w	r2, r3, #31
 8001a2e:	e01e      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x252>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fb36 	bl	80010a8 <LL_ADC_GetOffsetChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001a4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001a56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001a5e:	2320      	movs	r3, #32
 8001a60:	e004      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d105      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x26a>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0e9b      	lsrs	r3, r3, #26
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	e018      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x29c>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001aa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	e004      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001aae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d106      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fb05 	bl	80010d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2102      	movs	r1, #2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fae9 	bl	80010a8 <LL_ADC_GetOffsetChannel>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x2da>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fade 	bl	80010a8 <LL_ADC_GetOffsetChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	0e9b      	lsrs	r3, r3, #26
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	e01e      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x318>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2102      	movs	r1, #2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fad3 	bl	80010a8 <LL_ADC_GetOffsetChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001b24:	2320      	movs	r3, #32
 8001b26:	e004      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d105      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x330>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0e9b      	lsrs	r3, r3, #26
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	e014      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x35a>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001b5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001b60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001b68:	2320      	movs	r3, #32
 8001b6a:	e004      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d106      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2102      	movs	r1, #2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff faa6 	bl	80010d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2103      	movs	r1, #3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fa8a 	bl	80010a8 <LL_ADC_GetOffsetChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x398>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2103      	movs	r1, #3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fa7f 	bl	80010a8 <LL_ADC_GetOffsetChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	0e9b      	lsrs	r3, r3, #26
 8001bae:	f003 021f 	and.w	r2, r3, #31
 8001bb2:	e017      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x3c8>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2103      	movs	r1, #3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fa74 	bl	80010a8 <LL_ADC_GetOffsetChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bce:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001bd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001bd6:	2320      	movs	r3, #32
 8001bd8:	e003      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x3e0>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0e9b      	lsrs	r3, r3, #26
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	e011      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x404>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001c0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001c0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001c14:	2320      	movs	r3, #32
 8001c16:	e003      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001c18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d106      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fa51 	bl	80010d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fb7a 	bl	8001330 <LL_ADC_IsEnabled>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 8140 	bne.w	8001ec4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6819      	ldr	r1, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	461a      	mov	r2, r3
 8001c52:	f7ff fac5 	bl	80011e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	4a8f      	ldr	r2, [pc, #572]	@ (8001e98 <HAL_ADC_ConfigChannel+0x67c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	f040 8131 	bne.w	8001ec4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10b      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x46e>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	0e9b      	lsrs	r3, r3, #26
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	2b09      	cmp	r3, #9
 8001c80:	bf94      	ite	ls
 8001c82:	2301      	movls	r3, #1
 8001c84:	2300      	movhi	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	e019      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x4a2>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	e003      	b.n	8001cae <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001ca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2b09      	cmp	r3, #9
 8001cb6:	bf94      	ite	ls
 8001cb8:	2301      	movls	r3, #1
 8001cba:	2300      	movhi	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d079      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d107      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x4c2>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	0e9b      	lsrs	r3, r3, #26
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	069b      	lsls	r3, r3, #26
 8001cd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cdc:	e015      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x4ee>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cee:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001cf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	e003      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	069b      	lsls	r3, r3, #26
 8001d06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x50e>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0e9b      	lsrs	r3, r3, #26
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2101      	movs	r1, #1
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	e017      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x53e>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d3a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001d42:	2320      	movs	r3, #32
 8001d44:	e003      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	ea42 0103 	orr.w	r1, r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10a      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x564>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	3301      	adds	r3, #1
 8001d72:	f003 021f 	and.w	r2, r3, #31
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	051b      	lsls	r3, r3, #20
 8001d7e:	e018      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x596>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d90:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	e003      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	3301      	adds	r3, #1
 8001da6:	f003 021f 	and.w	r2, r3, #31
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001db2:	430b      	orrs	r3, r1
 8001db4:	e081      	b.n	8001eba <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d107      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x5b6>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0e9b      	lsrs	r3, r3, #26
 8001dc8:	3301      	adds	r3, #1
 8001dca:	069b      	lsls	r3, r3, #26
 8001dcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dd0:	e015      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x5e2>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001dea:	2320      	movs	r3, #32
 8001dec:	e003      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	069b      	lsls	r3, r3, #26
 8001dfa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x602>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0e9b      	lsrs	r3, r3, #26
 8001e10:	3301      	adds	r3, #1
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	2101      	movs	r1, #1
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	e017      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x632>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	61bb      	str	r3, [r7, #24]
  return result;
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001e36:	2320      	movs	r3, #32
 8001e38:	e003      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2101      	movs	r1, #1
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	ea42 0103 	orr.w	r1, r2, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10d      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x65e>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0e9b      	lsrs	r3, r3, #26
 8001e64:	3301      	adds	r3, #1
 8001e66:	f003 021f 	and.w	r2, r3, #31
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b1e      	subs	r3, #30
 8001e72:	051b      	lsls	r3, r3, #20
 8001e74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e78:	e01e      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x69c>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	60fb      	str	r3, [r7, #12]
  return result;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d104      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001e92:	2320      	movs	r3, #32
 8001e94:	e006      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x688>
 8001e96:	bf00      	nop
 8001e98:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f003 021f 	and.w	r2, r3, #31
 8001eaa:	4613      	mov	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b1e      	subs	r3, #30
 8001eb2:	051b      	lsls	r3, r3, #20
 8001eb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7ff f962 	bl	8001188 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b44      	ldr	r3, [pc, #272]	@ (8001fdc <HAL_ADC_ConfigChannel+0x7c0>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d07a      	beq.n	8001fc6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ed0:	4843      	ldr	r0, [pc, #268]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ed2:	f7ff f8b7 	bl	8001044 <LL_ADC_GetCommonPathInternalCh>
 8001ed6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a41      	ldr	r2, [pc, #260]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d12c      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ee4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ee8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d126      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a3c      	ldr	r2, [pc, #240]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d004      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x6e8>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a3b      	ldr	r2, [pc, #236]	@ (8001fec <HAL_ADC_ConfigChannel+0x7d0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d15d      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4834      	ldr	r0, [pc, #208]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f10:	f7ff f885 	bl	800101e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f14:	4b36      	ldr	r3, [pc, #216]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	099b      	lsrs	r3, r3, #6
 8001f1a:	4a36      	ldr	r2, [pc, #216]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f2e:	e002      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f9      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f3c:	e040      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d118      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d112      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a23      	ldr	r2, [pc, #140]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_ADC_ConfigChannel+0x74c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a22      	ldr	r2, [pc, #136]	@ (8001fec <HAL_ADC_ConfigChannel+0x7d0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d12d      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f70:	4619      	mov	r1, r3
 8001f72:	481b      	ldr	r0, [pc, #108]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f74:	f7ff f853 	bl	800101e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f78:	e024      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8001ffc <HAL_ADC_ConfigChannel+0x7e0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d120      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d11a      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a14      	ldr	r2, [pc, #80]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d115      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480e      	ldr	r0, [pc, #56]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001fa6:	f7ff f83a 	bl	800101e <LL_ADC_SetCommonPathInternalCh>
 8001faa:	e00c      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb0:	f043 0220 	orr.w	r2, r3, #32
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001fbe:	e002      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fc0:	bf00      	nop
 8001fc2:	e000      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fce:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	37d8      	adds	r7, #216	@ 0xd8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	80080000 	.word	0x80080000
 8001fe0:	50040300 	.word	0x50040300
 8001fe4:	c7520000 	.word	0xc7520000
 8001fe8:	50040000 	.word	0x50040000
 8001fec:	50040200 	.word	0x50040200
 8001ff0:	20000004 	.word	0x20000004
 8001ff4:	053e2d63 	.word	0x053e2d63
 8001ff8:	cb840000 	.word	0xcb840000
 8001ffc:	80000001 	.word	0x80000001

08002000 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f98d 	bl	8001330 <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d169      	bne.n	80020f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	4b36      	ldr	r3, [pc, #216]	@ (80020fc <ADC_Enable+0xfc>)
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00d      	beq.n	8002046 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202e:	f043 0210 	orr.w	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e055      	b.n	80020f2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff f948 	bl	80012e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002050:	482b      	ldr	r0, [pc, #172]	@ (8002100 <ADC_Enable+0x100>)
 8002052:	f7fe fff7 	bl	8001044 <LL_ADC_GetCommonPathInternalCh>
 8002056:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002058:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800205c:	2b00      	cmp	r3, #0
 800205e:	d013      	beq.n	8002088 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002060:	4b28      	ldr	r3, [pc, #160]	@ (8002104 <ADC_Enable+0x104>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	099b      	lsrs	r3, r3, #6
 8002066:	4a28      	ldr	r2, [pc, #160]	@ (8002108 <ADC_Enable+0x108>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	099b      	lsrs	r3, r3, #6
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800207a:	e002      	b.n	8002082 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	3b01      	subs	r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002088:	f7fe ffaa 	bl	8000fe0 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800208e:	e028      	b.n	80020e2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff f94b 	bl	8001330 <LL_ADC_IsEnabled>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d104      	bne.n	80020aa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff f91b 	bl	80012e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020aa:	f7fe ff99 	bl	8000fe0 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d914      	bls.n	80020e2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d00d      	beq.n	80020e2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ca:	f043 0210 	orr.w	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	f043 0201 	orr.w	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e007      	b.n	80020f2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d1cf      	bne.n	8002090 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	8000003f 	.word	0x8000003f
 8002100:	50040300 	.word	0x50040300
 8002104:	20000004 	.word	0x20000004
 8002108:	053e2d63 	.word	0x053e2d63

0800210c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff f91c 	bl	8001356 <LL_ADC_IsDisableOngoing>
 800211e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f903 	bl	8001330 <LL_ADC_IsEnabled>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d047      	beq.n	80021c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d144      	bne.n	80021c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 030d 	and.w	r3, r3, #13
 8002140:	2b01      	cmp	r3, #1
 8002142:	d10c      	bne.n	800215e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f8dd 	bl	8001308 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2203      	movs	r2, #3
 8002154:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002156:	f7fe ff43 	bl	8000fe0 <HAL_GetTick>
 800215a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800215c:	e029      	b.n	80021b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002162:	f043 0210 	orr.w	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e023      	b.n	80021c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800217a:	f7fe ff31 	bl	8000fe0 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d914      	bls.n	80021b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00d      	beq.n	80021b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219a:	f043 0210 	orr.w	r2, r3, #16
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	f043 0201 	orr.w	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e007      	b.n	80021c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1dc      	bne.n	800217a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d14b      	bne.n	800227c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d021      	beq.n	8002242 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe ff81 	bl	800110a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d032      	beq.n	8002274 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d12b      	bne.n	8002274 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002220:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d11f      	bne.n	8002274 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002240:	e018      	b.n	8002274 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d111      	bne.n	8002274 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002254:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7fe fa43 	bl	8000700 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800227a:	e00e      	b.n	800229a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7ff fabd 	bl	8001808 <HAL_ADC_ErrorCallback>
}
 800228e:	e004      	b.n	800229a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7fe fa39 	bl	8000728 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022dc:	f043 0204 	orr.w	r2, r3, #4
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7ff fa8f 	bl	8001808 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <LL_ADC_IsEnabled>:
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <LL_ADC_IsEnabled+0x18>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <LL_ADC_IsEnabled+0x1a>
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_StartCalibration>:
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800232a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002334:	4313      	orrs	r3, r2
 8002336:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	609a      	str	r2, [r3, #8]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <LL_ADC_IsCalibrationOnGoing>:
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800235a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800235e:	d101      	bne.n	8002364 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_ADC_REG_IsConversionOngoing>:
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b04      	cmp	r3, #4
 8002384:	d101      	bne.n	800238a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e04d      	b.n	8002450 <HAL_ADCEx_Calibration_Start+0xb8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff fea5 	bl	800210c <ADC_Disable>
 80023c2:	4603      	mov	r3, r0
 80023c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d136      	bne.n	800243a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023d4:	f023 0302 	bic.w	r3, r3, #2
 80023d8:	f043 0202 	orr.w	r2, r3, #2
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6839      	ldr	r1, [r7, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff ff96 	bl	8002318 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80023ec:	e014      	b.n	8002418 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	3301      	adds	r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80023fa:	d30d      	bcc.n	8002418 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002400:	f023 0312 	bic.w	r3, r3, #18
 8002404:	f043 0210 	orr.w	r2, r3, #16
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e01b      	b.n	8002450 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff94 	bl	800234a <LL_ADC_IsCalibrationOnGoing>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1e2      	bne.n	80023ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242c:	f023 0303 	bic.w	r3, r3, #3
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	@ 0x54
 8002438:	e005      	b.n	8002446 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243e:	f043 0210 	orr.w	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b09f      	sub	sp, #124	@ 0x7c
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002472:	2302      	movs	r3, #2
 8002474:	e093      	b.n	800259e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800247e:	2300      	movs	r3, #0
 8002480:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002482:	2300      	movs	r3, #0
 8002484:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a47      	ldr	r2, [pc, #284]	@ (80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d102      	bne.n	8002496 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002490:	4b46      	ldr	r3, [pc, #280]	@ (80025ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	e001      	b.n	800249a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10b      	bne.n	80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e072      	b.n	800259e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff59 	bl	8002372 <LL_ADC_REG_IsConversionOngoing>
 80024c0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff53 	bl	8002372 <LL_ADC_REG_IsConversionOngoing>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d154      	bne.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80024d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d151      	bne.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024d8:	4b35      	ldr	r3, [pc, #212]	@ (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80024da:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d02c      	beq.n	800253e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80024e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024f6:	035b      	lsls	r3, r3, #13
 80024f8:	430b      	orrs	r3, r1
 80024fa:	431a      	orrs	r2, r3
 80024fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002500:	4829      	ldr	r0, [pc, #164]	@ (80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002502:	f7ff fef6 	bl	80022f2 <LL_ADC_IsEnabled>
 8002506:	4604      	mov	r4, r0
 8002508:	4828      	ldr	r0, [pc, #160]	@ (80025ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800250a:	f7ff fef2 	bl	80022f2 <LL_ADC_IsEnabled>
 800250e:	4603      	mov	r3, r0
 8002510:	431c      	orrs	r4, r3
 8002512:	4828      	ldr	r0, [pc, #160]	@ (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002514:	f7ff feed 	bl	80022f2 <LL_ADC_IsEnabled>
 8002518:	4603      	mov	r3, r0
 800251a:	4323      	orrs	r3, r4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d137      	bne.n	8002590 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002528:	f023 030f 	bic.w	r3, r3, #15
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	6811      	ldr	r1, [r2, #0]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	6892      	ldr	r2, [r2, #8]
 8002534:	430a      	orrs	r2, r1
 8002536:	431a      	orrs	r2, r3
 8002538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800253a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800253c:	e028      	b.n	8002590 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800253e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002548:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800254a:	4817      	ldr	r0, [pc, #92]	@ (80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800254c:	f7ff fed1 	bl	80022f2 <LL_ADC_IsEnabled>
 8002550:	4604      	mov	r4, r0
 8002552:	4816      	ldr	r0, [pc, #88]	@ (80025ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002554:	f7ff fecd 	bl	80022f2 <LL_ADC_IsEnabled>
 8002558:	4603      	mov	r3, r0
 800255a:	431c      	orrs	r4, r3
 800255c:	4815      	ldr	r0, [pc, #84]	@ (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800255e:	f7ff fec8 	bl	80022f2 <LL_ADC_IsEnabled>
 8002562:	4603      	mov	r3, r0
 8002564:	4323      	orrs	r3, r4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d112      	bne.n	8002590 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800256a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002572:	f023 030f 	bic.w	r3, r3, #15
 8002576:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002578:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800257a:	e009      	b.n	8002590 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002580:	f043 0220 	orr.w	r2, r3, #32
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800258e:	e000      	b.n	8002592 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002590:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800259a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800259e:	4618      	mov	r0, r3
 80025a0:	377c      	adds	r7, #124	@ 0x7c
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd90      	pop	{r4, r7, pc}
 80025a6:	bf00      	nop
 80025a8:	50040000 	.word	0x50040000
 80025ac:	50040100 	.word	0x50040100
 80025b0:	50040300 	.word	0x50040300
 80025b4:	50040200 	.word	0x50040200

080025b8 <__NVIC_SetPriorityGrouping>:
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c8:	4b0c      	ldr	r3, [pc, #48]	@ (80025fc <__NVIC_SetPriorityGrouping+0x44>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025d4:	4013      	ands	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ea:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <__NVIC_SetPriorityGrouping+0x44>)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	60d3      	str	r3, [r2, #12]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_GetPriorityGrouping>:
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002604:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <__NVIC_GetPriorityGrouping+0x18>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	f003 0307 	and.w	r3, r3, #7
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_EnableIRQ>:
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	2b00      	cmp	r3, #0
 800262c:	db0b      	blt.n	8002646 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	4907      	ldr	r1, [pc, #28]	@ (8002654 <__NVIC_EnableIRQ+0x38>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2001      	movs	r0, #1
 800263e:	fa00 f202 	lsl.w	r2, r0, r2
 8002642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	e000e100 	.word	0xe000e100

08002658 <__NVIC_SetPriority>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	6039      	str	r1, [r7, #0]
 8002662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	2b00      	cmp	r3, #0
 800266a:	db0a      	blt.n	8002682 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	b2da      	uxtb	r2, r3
 8002670:	490c      	ldr	r1, [pc, #48]	@ (80026a4 <__NVIC_SetPriority+0x4c>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	0112      	lsls	r2, r2, #4
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	440b      	add	r3, r1
 800267c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002680:	e00a      	b.n	8002698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4908      	ldr	r1, [pc, #32]	@ (80026a8 <__NVIC_SetPriority+0x50>)
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	3b04      	subs	r3, #4
 8002690:	0112      	lsls	r2, r2, #4
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	440b      	add	r3, r1
 8002696:	761a      	strb	r2, [r3, #24]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000e100 	.word	0xe000e100
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <NVIC_EncodePriority>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	@ 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f1c3 0307 	rsb	r3, r3, #7
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	bf28      	it	cs
 80026ca:	2304      	movcs	r3, #4
 80026cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d902      	bls.n	80026dc <NVIC_EncodePriority+0x30>
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3b03      	subs	r3, #3
 80026da:	e000      	b.n	80026de <NVIC_EncodePriority+0x32>
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	f04f 32ff 	mov.w	r2, #4294967295
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	401a      	ands	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f4:	f04f 31ff 	mov.w	r1, #4294967295
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	43d9      	mvns	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002704:	4313      	orrs	r3, r2
}
 8002706:	4618      	mov	r0, r3
 8002708:	3724      	adds	r7, #36	@ 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002724:	d301      	bcc.n	800272a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002726:	2301      	movs	r3, #1
 8002728:	e00f      	b.n	800274a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272a:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <SysTick_Config+0x40>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002732:	210f      	movs	r1, #15
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	f7ff ff8e 	bl	8002658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800273c:	4b05      	ldr	r3, [pc, #20]	@ (8002754 <SysTick_Config+0x40>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002742:	4b04      	ldr	r3, [pc, #16]	@ (8002754 <SysTick_Config+0x40>)
 8002744:	2207      	movs	r2, #7
 8002746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	e000e010 	.word	0xe000e010

08002758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ff29 	bl	80025b8 <__NVIC_SetPriorityGrouping>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b086      	sub	sp, #24
 8002772:	af00      	add	r7, sp, #0
 8002774:	4603      	mov	r3, r0
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002780:	f7ff ff3e 	bl	8002600 <__NVIC_GetPriorityGrouping>
 8002784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	6978      	ldr	r0, [r7, #20]
 800278c:	f7ff ff8e 	bl	80026ac <NVIC_EncodePriority>
 8002790:	4602      	mov	r2, r0
 8002792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff5d 	bl	8002658 <__NVIC_SetPriority>
}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff31 	bl	800261c <__NVIC_EnableIRQ>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ffa2 	bl	8002714 <SysTick_Config>
 80027d0:	4603      	mov	r3, r0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e098      	b.n	8002920 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b4d      	ldr	r3, [pc, #308]	@ (800292c <HAL_DMA_Init+0x150>)
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d80f      	bhi.n	800281a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	4b4b      	ldr	r3, [pc, #300]	@ (8002930 <HAL_DMA_Init+0x154>)
 8002802:	4413      	add	r3, r2
 8002804:	4a4b      	ldr	r2, [pc, #300]	@ (8002934 <HAL_DMA_Init+0x158>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	009a      	lsls	r2, r3, #2
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a48      	ldr	r2, [pc, #288]	@ (8002938 <HAL_DMA_Init+0x15c>)
 8002816:	641a      	str	r2, [r3, #64]	@ 0x40
 8002818:	e00e      	b.n	8002838 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	4b46      	ldr	r3, [pc, #280]	@ (800293c <HAL_DMA_Init+0x160>)
 8002822:	4413      	add	r3, r2
 8002824:	4a43      	ldr	r2, [pc, #268]	@ (8002934 <HAL_DMA_Init+0x158>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	009a      	lsls	r2, r3, #2
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a42      	ldr	r2, [pc, #264]	@ (8002940 <HAL_DMA_Init+0x164>)
 8002836:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800284e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002852:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800285c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002892:	d039      	beq.n	8002908 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	4a27      	ldr	r2, [pc, #156]	@ (8002938 <HAL_DMA_Init+0x15c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d11a      	bne.n	80028d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800289e:	4b29      	ldr	r3, [pc, #164]	@ (8002944 <HAL_DMA_Init+0x168>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a6:	f003 031c 	and.w	r3, r3, #28
 80028aa:	210f      	movs	r1, #15
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	4924      	ldr	r1, [pc, #144]	@ (8002944 <HAL_DMA_Init+0x168>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028b8:	4b22      	ldr	r3, [pc, #136]	@ (8002944 <HAL_DMA_Init+0x168>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c4:	f003 031c 	and.w	r3, r3, #28
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	491d      	ldr	r1, [pc, #116]	@ (8002944 <HAL_DMA_Init+0x168>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
 80028d2:	e019      	b.n	8002908 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002948 <HAL_DMA_Init+0x16c>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028dc:	f003 031c 	and.w	r3, r3, #28
 80028e0:	210f      	movs	r1, #15
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	4917      	ldr	r1, [pc, #92]	@ (8002948 <HAL_DMA_Init+0x16c>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028ee:	4b16      	ldr	r3, [pc, #88]	@ (8002948 <HAL_DMA_Init+0x16c>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	f003 031c 	and.w	r3, r3, #28
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	4911      	ldr	r1, [pc, #68]	@ (8002948 <HAL_DMA_Init+0x16c>)
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40020407 	.word	0x40020407
 8002930:	bffdfff8 	.word	0xbffdfff8
 8002934:	cccccccd 	.word	0xcccccccd
 8002938:	40020000 	.word	0x40020000
 800293c:	bffdfbf8 	.word	0xbffdfbf8
 8002940:	40020400 	.word	0x40020400
 8002944:	400200a8 	.word	0x400200a8
 8002948:	400204a8 	.word	0x400204a8

0800294c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_DMA_Start_IT+0x20>
 8002968:	2302      	movs	r3, #2
 800296a:	e04b      	b.n	8002a04 <HAL_DMA_Start_IT+0xb8>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d13a      	bne.n	80029f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f8e0 	bl	8002b6a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 020e 	orr.w	r2, r2, #14
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	e00f      	b.n	80029e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0204 	bic.w	r2, r2, #4
 80029d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 020a 	orr.w	r2, r2, #10
 80029e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e005      	b.n	8002a02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
 8002a00:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a28:	f003 031c 	and.w	r3, r3, #28
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d026      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x7a>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d021      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d107      	bne.n	8002a60 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0204 	bic.w	r2, r2, #4
 8002a5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a64:	f003 021c 	and.w	r2, r3, #28
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6c:	2104      	movs	r1, #4
 8002a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a72:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d071      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a84:	e06c      	b.n	8002b60 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	f003 031c 	and.w	r3, r3, #28
 8002a8e:	2202      	movs	r2, #2
 8002a90:	409a      	lsls	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d02e      	beq.n	8002af8 <HAL_DMA_IRQHandler+0xec>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d029      	beq.n	8002af8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10b      	bne.n	8002aca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 020a 	bic.w	r2, r2, #10
 8002ac0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	f003 021c 	and.w	r2, r3, #28
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8002adc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d038      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002af6:	e033      	b.n	8002b60 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afc:	f003 031c 	and.w	r3, r3, #28
 8002b00:	2208      	movs	r2, #8
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d02a      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x156>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d025      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 020e 	bic.w	r2, r2, #14
 8002b24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	f003 021c 	and.w	r2, r3, #28
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	2101      	movs	r1, #1
 8002b34:	fa01 f202 	lsl.w	r2, r1, r2
 8002b38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d004      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
}
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7c:	f003 021c 	and.w	r2, r3, #28
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	2101      	movs	r1, #1
 8002b86:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d108      	bne.n	8002bae <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bac:	e007      	b.n	8002bbe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	60da      	str	r2, [r3, #12]
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bda:	e17f      	b.n	8002edc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2101      	movs	r1, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fa01 f303 	lsl.w	r3, r1, r3
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8171 	beq.w	8002ed6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d005      	beq.n	8002c0c <HAL_GPIO_Init+0x40>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d130      	bne.n	8002c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c42:	2201      	movs	r2, #1
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 0201 	and.w	r2, r3, #1
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d118      	bne.n	8002cac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c80:	2201      	movs	r2, #1
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	08db      	lsrs	r3, r3, #3
 8002c96:	f003 0201 	and.w	r2, r3, #1
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d017      	beq.n	8002ce8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d123      	bne.n	8002d3c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	08da      	lsrs	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3208      	adds	r2, #8
 8002cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	08da      	lsrs	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3208      	adds	r2, #8
 8002d36:	6939      	ldr	r1, [r7, #16]
 8002d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0203 	and.w	r2, r3, #3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80ac 	beq.w	8002ed6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8002efc <HAL_GPIO_Init+0x330>)
 8002d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d82:	4a5e      	ldr	r2, [pc, #376]	@ (8002efc <HAL_GPIO_Init+0x330>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d8a:	4b5c      	ldr	r3, [pc, #368]	@ (8002efc <HAL_GPIO_Init+0x330>)
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d96:	4a5a      	ldr	r2, [pc, #360]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	220f      	movs	r2, #15
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dc0:	d025      	beq.n	8002e0e <HAL_GPIO_Init+0x242>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4f      	ldr	r2, [pc, #316]	@ (8002f04 <HAL_GPIO_Init+0x338>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d01f      	beq.n	8002e0a <HAL_GPIO_Init+0x23e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4e      	ldr	r2, [pc, #312]	@ (8002f08 <HAL_GPIO_Init+0x33c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d019      	beq.n	8002e06 <HAL_GPIO_Init+0x23a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4d      	ldr	r2, [pc, #308]	@ (8002f0c <HAL_GPIO_Init+0x340>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_GPIO_Init+0x236>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a4c      	ldr	r2, [pc, #304]	@ (8002f10 <HAL_GPIO_Init+0x344>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00d      	beq.n	8002dfe <HAL_GPIO_Init+0x232>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4b      	ldr	r2, [pc, #300]	@ (8002f14 <HAL_GPIO_Init+0x348>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <HAL_GPIO_Init+0x22e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a4a      	ldr	r2, [pc, #296]	@ (8002f18 <HAL_GPIO_Init+0x34c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d101      	bne.n	8002df6 <HAL_GPIO_Init+0x22a>
 8002df2:	2306      	movs	r3, #6
 8002df4:	e00c      	b.n	8002e10 <HAL_GPIO_Init+0x244>
 8002df6:	2307      	movs	r3, #7
 8002df8:	e00a      	b.n	8002e10 <HAL_GPIO_Init+0x244>
 8002dfa:	2305      	movs	r3, #5
 8002dfc:	e008      	b.n	8002e10 <HAL_GPIO_Init+0x244>
 8002dfe:	2304      	movs	r3, #4
 8002e00:	e006      	b.n	8002e10 <HAL_GPIO_Init+0x244>
 8002e02:	2303      	movs	r3, #3
 8002e04:	e004      	b.n	8002e10 <HAL_GPIO_Init+0x244>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e002      	b.n	8002e10 <HAL_GPIO_Init+0x244>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_GPIO_Init+0x244>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	f002 0203 	and.w	r2, r2, #3
 8002e16:	0092      	lsls	r2, r2, #2
 8002e18:	4093      	lsls	r3, r2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e20:	4937      	ldr	r1, [pc, #220]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	3302      	adds	r3, #2
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f1c <HAL_GPIO_Init+0x350>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e52:	4a32      	ldr	r2, [pc, #200]	@ (8002f1c <HAL_GPIO_Init+0x350>)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e58:	4b30      	ldr	r3, [pc, #192]	@ (8002f1c <HAL_GPIO_Init+0x350>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e7c:	4a27      	ldr	r2, [pc, #156]	@ (8002f1c <HAL_GPIO_Init+0x350>)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e82:	4b26      	ldr	r3, [pc, #152]	@ (8002f1c <HAL_GPIO_Init+0x350>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f1c <HAL_GPIO_Init+0x350>)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002eac:	4b1b      	ldr	r3, [pc, #108]	@ (8002f1c <HAL_GPIO_Init+0x350>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ed0:	4a12      	ldr	r2, [pc, #72]	@ (8002f1c <HAL_GPIO_Init+0x350>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f47f ae78 	bne.w	8002bdc <HAL_GPIO_Init+0x10>
  }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010000 	.word	0x40010000
 8002f04:	48000400 	.word	0x48000400
 8002f08:	48000800 	.word	0x48000800
 8002f0c:	48000c00 	.word	0x48000c00
 8002f10:	48001000 	.word	0x48001000
 8002f14:	48001400 	.word	0x48001400
 8002f18:	48001800 	.word	0x48001800
 8002f1c:	40010400 	.word	0x40010400

08002f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f2a:	4b08      	ldr	r3, [pc, #32]	@ (8002f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d006      	beq.n	8002f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f36:	4a05      	ldr	r2, [pc, #20]	@ (8002f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f806 	bl	8002f50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40010400 	.word	0x40010400

08002f50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f6c:	4b05      	ldr	r3, [pc, #20]	@ (8002f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a04      	ldr	r2, [pc, #16]	@ (8002f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f76:	6013      	str	r3, [r2, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40007000 	.word	0x40007000

08002f88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f8c:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40007000 	.word	0x40007000

08002fa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb2:	d130      	bne.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb4:	4b23      	ldr	r3, [pc, #140]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc0:	d038      	beq.n	8003034 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc2:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fca:	4a1e      	ldr	r2, [pc, #120]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8003048 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2232      	movs	r2, #50	@ 0x32
 8002fd8:	fb02 f303 	mul.w	r3, r2, r3
 8002fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800304c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	0c9b      	lsrs	r3, r3, #18
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe8:	e002      	b.n	8002ff0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ff0:	4b14      	ldr	r3, [pc, #80]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffc:	d102      	bne.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f2      	bne.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003004:	4b0f      	ldr	r3, [pc, #60]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003010:	d110      	bne.n	8003034 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e00f      	b.n	8003036 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003016:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003022:	d007      	beq.n	8003034 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003024:	4b07      	ldr	r3, [pc, #28]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800302c:	4a05      	ldr	r2, [pc, #20]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800302e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003032:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40007000 	.word	0x40007000
 8003048:	20000004 	.word	0x20000004
 800304c:	431bde83 	.word	0x431bde83

08003050 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e3ca      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003062:	4b97      	ldr	r3, [pc, #604]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800306c:	4b94      	ldr	r3, [pc, #592]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80e4 	beq.w	800324c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_RCC_OscConfig+0x4a>
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b0c      	cmp	r3, #12
 800308e:	f040 808b 	bne.w	80031a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b01      	cmp	r3, #1
 8003096:	f040 8087 	bne.w	80031a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800309a:	4b89      	ldr	r3, [pc, #548]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d005      	beq.n	80030b2 <HAL_RCC_OscConfig+0x62>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e3a2      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1a      	ldr	r2, [r3, #32]
 80030b6:	4b82      	ldr	r3, [pc, #520]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d004      	beq.n	80030cc <HAL_RCC_OscConfig+0x7c>
 80030c2:	4b7f      	ldr	r3, [pc, #508]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ca:	e005      	b.n	80030d8 <HAL_RCC_OscConfig+0x88>
 80030cc:	4b7c      	ldr	r3, [pc, #496]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030d8:	4293      	cmp	r3, r2
 80030da:	d223      	bcs.n	8003124 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fd55 	bl	8003b90 <RCC_SetFlashLatencyFromMSIRange>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e383      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f0:	4b73      	ldr	r3, [pc, #460]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a72      	ldr	r2, [pc, #456]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030f6:	f043 0308 	orr.w	r3, r3, #8
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b70      	ldr	r3, [pc, #448]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	496d      	ldr	r1, [pc, #436]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800310e:	4b6c      	ldr	r3, [pc, #432]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	4968      	ldr	r1, [pc, #416]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
 8003122:	e025      	b.n	8003170 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003124:	4b66      	ldr	r3, [pc, #408]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a65      	ldr	r2, [pc, #404]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800312a:	f043 0308 	orr.w	r3, r3, #8
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b63      	ldr	r3, [pc, #396]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	4960      	ldr	r1, [pc, #384]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003142:	4b5f      	ldr	r3, [pc, #380]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	495b      	ldr	r1, [pc, #364]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d109      	bne.n	8003170 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fd15 	bl	8003b90 <RCC_SetFlashLatencyFromMSIRange>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e343      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003170:	f000 fc4a 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b52      	ldr	r3, [pc, #328]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	4950      	ldr	r1, [pc, #320]	@ (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003182:	5ccb      	ldrb	r3, [r1, r3]
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
 800318c:	4a4e      	ldr	r2, [pc, #312]	@ (80032c8 <HAL_RCC_OscConfig+0x278>)
 800318e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003190:	4b4e      	ldr	r3, [pc, #312]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd fed3 	bl	8000f40 <HAL_InitTick>
 800319a:	4603      	mov	r3, r0
 800319c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d052      	beq.n	800324a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	e327      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d032      	beq.n	8003216 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031b0:	4b43      	ldr	r3, [pc, #268]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a42      	ldr	r2, [pc, #264]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031bc:	f7fd ff10 	bl	8000fe0 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031c4:	f7fd ff0c 	bl	8000fe0 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e310      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031d6:	4b3a      	ldr	r3, [pc, #232]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e2:	4b37      	ldr	r3, [pc, #220]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a36      	ldr	r2, [pc, #216]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031e8:	f043 0308 	orr.w	r3, r3, #8
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4b34      	ldr	r3, [pc, #208]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4931      	ldr	r1, [pc, #196]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003200:	4b2f      	ldr	r3, [pc, #188]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	492c      	ldr	r1, [pc, #176]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
 8003214:	e01a      	b.n	800324c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003216:	4b2a      	ldr	r3, [pc, #168]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a29      	ldr	r2, [pc, #164]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003222:	f7fd fedd 	bl	8000fe0 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800322a:	f7fd fed9 	bl	8000fe0 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e2dd      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800323c:	4b20      	ldr	r3, [pc, #128]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f0      	bne.n	800322a <HAL_RCC_OscConfig+0x1da>
 8003248:	e000      	b.n	800324c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800324a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d074      	beq.n	8003342 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b08      	cmp	r3, #8
 800325c:	d005      	beq.n	800326a <HAL_RCC_OscConfig+0x21a>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d10e      	bne.n	8003282 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d10b      	bne.n	8003282 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326a:	4b15      	ldr	r3, [pc, #84]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d064      	beq.n	8003340 <HAL_RCC_OscConfig+0x2f0>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d160      	bne.n	8003340 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e2ba      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800328a:	d106      	bne.n	800329a <HAL_RCC_OscConfig+0x24a>
 800328c:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0b      	ldr	r2, [pc, #44]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	e026      	b.n	80032e8 <HAL_RCC_OscConfig+0x298>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032a2:	d115      	bne.n	80032d0 <HAL_RCC_OscConfig+0x280>
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a05      	ldr	r2, [pc, #20]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80032aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b03      	ldr	r3, [pc, #12]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a02      	ldr	r2, [pc, #8]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80032b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	e014      	b.n	80032e8 <HAL_RCC_OscConfig+0x298>
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08009cd0 	.word	0x08009cd0
 80032c8:	20000004 	.word	0x20000004
 80032cc:	20000008 	.word	0x20000008
 80032d0:	4ba0      	ldr	r3, [pc, #640]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a9f      	ldr	r2, [pc, #636]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80032d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b9d      	ldr	r3, [pc, #628]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a9c      	ldr	r2, [pc, #624]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80032e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d013      	beq.n	8003318 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fd fe76 	bl	8000fe0 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f8:	f7fd fe72 	bl	8000fe0 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	@ 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e276      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800330a:	4b92      	ldr	r3, [pc, #584]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x2a8>
 8003316:	e014      	b.n	8003342 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fd fe62 	bl	8000fe0 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003320:	f7fd fe5e 	bl	8000fe0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	@ 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e262      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003332:	4b88      	ldr	r3, [pc, #544]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x2d0>
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d060      	beq.n	8003410 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d005      	beq.n	8003360 <HAL_RCC_OscConfig+0x310>
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d119      	bne.n	800338e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d116      	bne.n	800338e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003360:	4b7c      	ldr	r3, [pc, #496]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_OscConfig+0x328>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e23f      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003378:	4b76      	ldr	r3, [pc, #472]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	061b      	lsls	r3, r3, #24
 8003386:	4973      	ldr	r1, [pc, #460]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800338c:	e040      	b.n	8003410 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d023      	beq.n	80033de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003396:	4b6f      	ldr	r3, [pc, #444]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6e      	ldr	r2, [pc, #440]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 800339c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7fd fe1d 	bl	8000fe0 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033aa:	f7fd fe19 	bl	8000fe0 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e21d      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033bc:	4b65      	ldr	r3, [pc, #404]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b62      	ldr	r3, [pc, #392]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	495f      	ldr	r1, [pc, #380]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
 80033dc:	e018      	b.n	8003410 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033de:	4b5d      	ldr	r3, [pc, #372]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80033e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fd fdf9 	bl	8000fe0 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f2:	f7fd fdf5 	bl	8000fe0 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e1f9      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003404:	4b53      	ldr	r3, [pc, #332]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f0      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d03c      	beq.n	8003496 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01c      	beq.n	800345e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003424:	4b4b      	ldr	r3, [pc, #300]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800342a:	4a4a      	ldr	r2, [pc, #296]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fd fdd4 	bl	8000fe0 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800343c:	f7fd fdd0 	bl	8000fe0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1d4      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800344e:	4b41      	ldr	r3, [pc, #260]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0ef      	beq.n	800343c <HAL_RCC_OscConfig+0x3ec>
 800345c:	e01b      	b.n	8003496 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345e:	4b3d      	ldr	r3, [pc, #244]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003460:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003464:	4a3b      	ldr	r2, [pc, #236]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003466:	f023 0301 	bic.w	r3, r3, #1
 800346a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346e:	f7fd fdb7 	bl	8000fe0 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003476:	f7fd fdb3 	bl	8000fe0 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e1b7      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003488:	4b32      	ldr	r3, [pc, #200]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 800348a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1ef      	bne.n	8003476 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80a6 	beq.w	80035f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a4:	2300      	movs	r3, #0
 80034a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10d      	bne.n	80034d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b4:	4b27      	ldr	r3, [pc, #156]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b8:	4a26      	ldr	r2, [pc, #152]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	@ 0x58
 80034c0:	4b24      	ldr	r3, [pc, #144]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034cc:	2301      	movs	r3, #1
 80034ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d0:	4b21      	ldr	r3, [pc, #132]	@ (8003558 <HAL_RCC_OscConfig+0x508>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d118      	bne.n	800350e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003558 <HAL_RCC_OscConfig+0x508>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003558 <HAL_RCC_OscConfig+0x508>)
 80034e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e8:	f7fd fd7a 	bl	8000fe0 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f0:	f7fd fd76 	bl	8000fe0 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e17a      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003502:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <HAL_RCC_OscConfig+0x508>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d108      	bne.n	8003528 <HAL_RCC_OscConfig+0x4d8>
 8003516:	4b0f      	ldr	r3, [pc, #60]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351c:	4a0d      	ldr	r2, [pc, #52]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003526:	e029      	b.n	800357c <HAL_RCC_OscConfig+0x52c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b05      	cmp	r3, #5
 800352e:	d115      	bne.n	800355c <HAL_RCC_OscConfig+0x50c>
 8003530:	4b08      	ldr	r3, [pc, #32]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	4a07      	ldr	r2, [pc, #28]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003538:	f043 0304 	orr.w	r3, r3, #4
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003540:	4b04      	ldr	r3, [pc, #16]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003546:	4a03      	ldr	r2, [pc, #12]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003550:	e014      	b.n	800357c <HAL_RCC_OscConfig+0x52c>
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	40007000 	.word	0x40007000
 800355c:	4b9c      	ldr	r3, [pc, #624]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003562:	4a9b      	ldr	r2, [pc, #620]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800356c:	4b98      	ldr	r3, [pc, #608]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003572:	4a97      	ldr	r2, [pc, #604]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003574:	f023 0304 	bic.w	r3, r3, #4
 8003578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d016      	beq.n	80035b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fd fd2c 	bl	8000fe0 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7fd fd28 	bl	8000fe0 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e12a      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a2:	4b8b      	ldr	r3, [pc, #556]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ed      	beq.n	800358c <HAL_RCC_OscConfig+0x53c>
 80035b0:	e015      	b.n	80035de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b2:	f7fd fd15 	bl	8000fe0 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fd fd11 	bl	8000fe0 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e113      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d0:	4b7f      	ldr	r3, [pc, #508]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1ed      	bne.n	80035ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035de:	7ffb      	ldrb	r3, [r7, #31]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d105      	bne.n	80035f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e4:	4b7a      	ldr	r3, [pc, #488]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e8:	4a79      	ldr	r2, [pc, #484]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80035ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80fe 	beq.w	80037f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	2b02      	cmp	r3, #2
 8003600:	f040 80d0 	bne.w	80037a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003604:	4b72      	ldr	r3, [pc, #456]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0203 	and.w	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003614:	429a      	cmp	r2, r3
 8003616:	d130      	bne.n	800367a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	3b01      	subs	r3, #1
 8003624:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d127      	bne.n	800367a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003634:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d11f      	bne.n	800367a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003644:	2a07      	cmp	r2, #7
 8003646:	bf14      	ite	ne
 8003648:	2201      	movne	r2, #1
 800364a:	2200      	moveq	r2, #0
 800364c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800364e:	4293      	cmp	r3, r2
 8003650:	d113      	bne.n	800367a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	3b01      	subs	r3, #1
 8003660:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d109      	bne.n	800367a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	3b01      	subs	r3, #1
 8003674:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d06e      	beq.n	8003758 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b0c      	cmp	r3, #12
 800367e:	d069      	beq.n	8003754 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003680:	4b53      	ldr	r3, [pc, #332]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800368c:	4b50      	ldr	r3, [pc, #320]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0ad      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800369c:	4b4c      	ldr	r3, [pc, #304]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a4b      	ldr	r2, [pc, #300]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036a8:	f7fd fc9a 	bl	8000fe0 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b0:	f7fd fc96 	bl	8000fe0 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e09a      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c2:	4b43      	ldr	r3, [pc, #268]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ce:	4b40      	ldr	r3, [pc, #256]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	4b40      	ldr	r3, [pc, #256]	@ (80037d4 <HAL_RCC_OscConfig+0x784>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036de:	3a01      	subs	r2, #1
 80036e0:	0112      	lsls	r2, r2, #4
 80036e2:	4311      	orrs	r1, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036e8:	0212      	lsls	r2, r2, #8
 80036ea:	4311      	orrs	r1, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036f0:	0852      	lsrs	r2, r2, #1
 80036f2:	3a01      	subs	r2, #1
 80036f4:	0552      	lsls	r2, r2, #21
 80036f6:	4311      	orrs	r1, r2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80036fc:	0852      	lsrs	r2, r2, #1
 80036fe:	3a01      	subs	r2, #1
 8003700:	0652      	lsls	r2, r2, #25
 8003702:	4311      	orrs	r1, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003708:	0912      	lsrs	r2, r2, #4
 800370a:	0452      	lsls	r2, r2, #17
 800370c:	430a      	orrs	r2, r1
 800370e:	4930      	ldr	r1, [pc, #192]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003710:	4313      	orrs	r3, r2
 8003712:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003714:	4b2e      	ldr	r3, [pc, #184]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2d      	ldr	r2, [pc, #180]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800371a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800371e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003720:	4b2b      	ldr	r3, [pc, #172]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a2a      	ldr	r2, [pc, #168]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800372a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800372c:	f7fd fc58 	bl	8000fe0 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fd fc54 	bl	8000fe0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e058      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	4b22      	ldr	r3, [pc, #136]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003752:	e050      	b.n	80037f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e04f      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003758:	4b1d      	ldr	r3, [pc, #116]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d148      	bne.n	80037f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003764:	4b1a      	ldr	r3, [pc, #104]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a19      	ldr	r2, [pc, #100]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800376a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800376e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003770:	4b17      	ldr	r3, [pc, #92]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a16      	ldr	r2, [pc, #88]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003776:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800377a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800377c:	f7fd fc30 	bl	8000fe0 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003784:	f7fd fc2c 	bl	8000fe0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e030      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003796:	4b0e      	ldr	r3, [pc, #56]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x734>
 80037a2:	e028      	b.n	80037f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	d023      	beq.n	80037f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a08      	ldr	r2, [pc, #32]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80037b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7fd fc13 	bl	8000fe0 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037bc:	e00c      	b.n	80037d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037be:	f7fd fc0f 	bl	8000fe0 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d905      	bls.n	80037d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e013      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
 80037d0:	40021000 	.word	0x40021000
 80037d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d8:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <HAL_RCC_OscConfig+0x7b0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1ec      	bne.n	80037be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037e4:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <HAL_RCC_OscConfig+0x7b0>)
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	4905      	ldr	r1, [pc, #20]	@ (8003800 <HAL_RCC_OscConfig+0x7b0>)
 80037ea:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <HAL_RCC_OscConfig+0x7b4>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	60cb      	str	r3, [r1, #12]
 80037f0:	e001      	b.n	80037f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000
 8003804:	feeefffc 	.word	0xfeeefffc

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0e7      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800381c:	4b75      	ldr	r3, [pc, #468]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d910      	bls.n	800384c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b72      	ldr	r3, [pc, #456]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 0207 	bic.w	r2, r3, #7
 8003832:	4970      	ldr	r1, [pc, #448]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b6e      	ldr	r3, [pc, #440]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0cf      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d010      	beq.n	800387a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	4b66      	ldr	r3, [pc, #408]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003864:	429a      	cmp	r2, r3
 8003866:	d908      	bls.n	800387a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b63      	ldr	r3, [pc, #396]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4960      	ldr	r1, [pc, #384]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d04c      	beq.n	8003920 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388e:	4b5a      	ldr	r3, [pc, #360]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d121      	bne.n	80038de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0a6      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a6:	4b54      	ldr	r3, [pc, #336]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d115      	bne.n	80038de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e09a      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038be:	4b4e      	ldr	r3, [pc, #312]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e08e      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ce:	4b4a      	ldr	r3, [pc, #296]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e086      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038de:	4b46      	ldr	r3, [pc, #280]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f023 0203 	bic.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4943      	ldr	r1, [pc, #268]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f0:	f7fd fb76 	bl	8000fe0 <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	e00a      	b.n	800390e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f8:	f7fd fb72 	bl	8000fe0 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e06e      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	4b3a      	ldr	r3, [pc, #232]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 020c 	and.w	r2, r3, #12
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	429a      	cmp	r2, r3
 800391e:	d1eb      	bne.n	80038f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d010      	beq.n	800394e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003938:	429a      	cmp	r2, r3
 800393a:	d208      	bcs.n	800394e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800393c:	4b2e      	ldr	r3, [pc, #184]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	492b      	ldr	r1, [pc, #172]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800394e:	4b29      	ldr	r3, [pc, #164]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d210      	bcs.n	800397e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395c:	4b25      	ldr	r3, [pc, #148]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 0207 	bic.w	r2, r3, #7
 8003964:	4923      	ldr	r1, [pc, #140]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396c:	4b21      	ldr	r3, [pc, #132]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d001      	beq.n	800397e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e036      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800398a:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	4918      	ldr	r1, [pc, #96]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003998:	4313      	orrs	r3, r2
 800399a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a8:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4910      	ldr	r1, [pc, #64]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039bc:	f000 f824 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b0d      	ldr	r3, [pc, #52]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	490b      	ldr	r1, [pc, #44]	@ (80039fc <HAL_RCC_ClockConfig+0x1f4>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
 80039d8:	4a09      	ldr	r2, [pc, #36]	@ (8003a00 <HAL_RCC_ClockConfig+0x1f8>)
 80039da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039dc:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <HAL_RCC_ClockConfig+0x1fc>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd faad 	bl	8000f40 <HAL_InitTick>
 80039e6:	4603      	mov	r3, r0
 80039e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80039ea:	7afb      	ldrb	r3, [r7, #11]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40022000 	.word	0x40022000
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08009cd0 	.word	0x08009cd0
 8003a00:	20000004 	.word	0x20000004
 8003a04:	20000008 	.word	0x20000008

08003a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b089      	sub	sp, #36	@ 0x24
 8003a0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a16:	4b3e      	ldr	r3, [pc, #248]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a20:	4b3b      	ldr	r3, [pc, #236]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x34>
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d121      	bne.n	8003a7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d11e      	bne.n	8003a7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a3c:	4b34      	ldr	r3, [pc, #208]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a48:	4b31      	ldr	r3, [pc, #196]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	e005      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a58:	4b2d      	ldr	r3, [pc, #180]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a64:	4a2b      	ldr	r2, [pc, #172]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10d      	bne.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a78:	e00a      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d102      	bne.n	8003a86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a80:	4b25      	ldr	r3, [pc, #148]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	e004      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a8c:	4b23      	ldr	r3, [pc, #140]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003a8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d134      	bne.n	8003b00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a96:	4b1e      	ldr	r3, [pc, #120]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d003      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0xa6>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d003      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0xac>
 8003aac:	e005      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003aae:	4b1a      	ldr	r3, [pc, #104]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ab0:	617b      	str	r3, [r7, #20]
      break;
 8003ab2:	e005      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ab4:	4b19      	ldr	r3, [pc, #100]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ab6:	617b      	str	r3, [r7, #20]
      break;
 8003ab8:	e002      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	617b      	str	r3, [r7, #20]
      break;
 8003abe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ac0:	4b13      	ldr	r3, [pc, #76]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	3301      	adds	r3, #1
 8003acc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ace:	4b10      	ldr	r3, [pc, #64]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	fb03 f202 	mul.w	r2, r3, r2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	0e5b      	lsrs	r3, r3, #25
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	3301      	adds	r3, #1
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b00:	69bb      	ldr	r3, [r7, #24]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3724      	adds	r7, #36	@ 0x24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40021000 	.word	0x40021000
 8003b14:	08009ce8 	.word	0x08009ce8
 8003b18:	00f42400 	.word	0x00f42400
 8003b1c:	007a1200 	.word	0x007a1200

08003b20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b03      	ldr	r3, [pc, #12]	@ (8003b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000004 	.word	0x20000004

08003b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b3c:	f7ff fff0 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4904      	ldr	r1, [pc, #16]	@ (8003b60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	08009ce0 	.word	0x08009ce0

08003b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b68:	f7ff ffda 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	0adb      	lsrs	r3, r3, #11
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4904      	ldr	r1, [pc, #16]	@ (8003b8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	08009ce0 	.word	0x08009ce0

08003b90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ba8:	f7ff f9ee 	bl	8002f88 <HAL_PWREx_GetVoltageRange>
 8003bac:	6178      	str	r0, [r7, #20]
 8003bae:	e014      	b.n	8003bda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bb0:	4b25      	ldr	r3, [pc, #148]	@ (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	4a24      	ldr	r2, [pc, #144]	@ (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bbc:	4b22      	ldr	r3, [pc, #136]	@ (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bc8:	f7ff f9de 	bl	8002f88 <HAL_PWREx_GetVoltageRange>
 8003bcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bce:	4b1e      	ldr	r3, [pc, #120]	@ (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be0:	d10b      	bne.n	8003bfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b80      	cmp	r3, #128	@ 0x80
 8003be6:	d919      	bls.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bec:	d902      	bls.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bee:	2302      	movs	r3, #2
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	e013      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	e010      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b80      	cmp	r3, #128	@ 0x80
 8003bfe:	d902      	bls.n	8003c06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c00:	2303      	movs	r3, #3
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	e00a      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b80      	cmp	r3, #128	@ 0x80
 8003c0a:	d102      	bne.n	8003c12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	e004      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b70      	cmp	r3, #112	@ 0x70
 8003c16:	d101      	bne.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c18:	2301      	movs	r3, #1
 8003c1a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 0207 	bic.w	r2, r3, #7
 8003c24:	4909      	ldr	r1, [pc, #36]	@ (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c2c:	4b07      	ldr	r3, [pc, #28]	@ (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d001      	beq.n	8003c3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40022000 	.word	0x40022000

08003c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c58:	2300      	movs	r3, #0
 8003c5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d041      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c74:	d02a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c7a:	d824      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c80:	d008      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c86:	d81e      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c90:	d010      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c92:	e018      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c94:	4b86      	ldr	r3, [pc, #536]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4a85      	ldr	r2, [pc, #532]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca0:	e015      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 facb 	bl	8004244 <RCCEx_PLLSAI1_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cb2:	e00c      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3320      	adds	r3, #32
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fbb6 	bl	800442c <RCCEx_PLLSAI2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	74fb      	strb	r3, [r7, #19]
      break;
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cd4:	4b76      	ldr	r3, [pc, #472]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ce2:	4973      	ldr	r1, [pc, #460]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cea:	e001      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d041      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d04:	d02a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d0a:	d824      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d10:	d008      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d16:	d81e      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d20:	d010      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d22:	e018      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d24:	4b62      	ldr	r3, [pc, #392]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a61      	ldr	r2, [pc, #388]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d30:	e015      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fa83 	bl	8004244 <RCCEx_PLLSAI1_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d42:	e00c      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3320      	adds	r3, #32
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fb6e 	bl	800442c <RCCEx_PLLSAI2_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d54:	e003      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	74fb      	strb	r3, [r7, #19]
      break;
 8003d5a:	e000      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5e:	7cfb      	ldrb	r3, [r7, #19]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10b      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d64:	4b52      	ldr	r3, [pc, #328]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d72:	494f      	ldr	r1, [pc, #316]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d7a:	e001      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80a0 	beq.w	8003ece <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d92:	4b47      	ldr	r3, [pc, #284]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003da2:	2300      	movs	r3, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da8:	4b41      	ldr	r3, [pc, #260]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dac:	4a40      	ldr	r2, [pc, #256]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003db4:	4b3e      	ldr	r3, [pc, #248]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dd0:	f7fd f906 	bl	8000fe0 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dd6:	e009      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd8:	f7fd f902 	bl	8000fe0 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d902      	bls.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	74fb      	strb	r3, [r7, #19]
        break;
 8003dea:	e005      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dec:	4b31      	ldr	r3, [pc, #196]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ef      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d15c      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01f      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d019      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e1c:	4b24      	ldr	r3, [pc, #144]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e28:	4b21      	ldr	r3, [pc, #132]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2e:	4a20      	ldr	r2, [pc, #128]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e38:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e48:	4a19      	ldr	r2, [pc, #100]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d016      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5a:	f7fd f8c1 	bl	8000fe0 <HAL_GetTick>
 8003e5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e60:	e00b      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fd f8bd 	bl	8000fe0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d902      	bls.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	74fb      	strb	r3, [r7, #19]
            break;
 8003e78:	e006      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ec      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e88:	7cfb      	ldrb	r3, [r7, #19]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e8e:	4b08      	ldr	r3, [pc, #32]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e9e:	4904      	ldr	r1, [pc, #16]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ea6:	e009      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
 8003eac:	e006      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ebc:	7c7b      	ldrb	r3, [r7, #17]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d105      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec2:	4b9e      	ldr	r3, [pc, #632]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec6:	4a9d      	ldr	r2, [pc, #628]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ecc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eda:	4b98      	ldr	r3, [pc, #608]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee0:	f023 0203 	bic.w	r2, r3, #3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee8:	4994      	ldr	r1, [pc, #592]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003efc:	4b8f      	ldr	r3, [pc, #572]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f02:	f023 020c 	bic.w	r2, r3, #12
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	498c      	ldr	r1, [pc, #560]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f1e:	4b87      	ldr	r3, [pc, #540]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	4983      	ldr	r1, [pc, #524]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f40:	4b7e      	ldr	r3, [pc, #504]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	497b      	ldr	r1, [pc, #492]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f62:	4b76      	ldr	r3, [pc, #472]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f70:	4972      	ldr	r1, [pc, #456]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f84:	4b6d      	ldr	r3, [pc, #436]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f92:	496a      	ldr	r1, [pc, #424]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fa6:	4b65      	ldr	r3, [pc, #404]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb4:	4961      	ldr	r1, [pc, #388]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd6:	4959      	ldr	r1, [pc, #356]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fea:	4b54      	ldr	r3, [pc, #336]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff8:	4950      	ldr	r1, [pc, #320]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800400c:	4b4b      	ldr	r3, [pc, #300]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004012:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401a:	4948      	ldr	r1, [pc, #288]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800402e:	4b43      	ldr	r3, [pc, #268]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004034:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403c:	493f      	ldr	r1, [pc, #252]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d028      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004050:	4b3a      	ldr	r3, [pc, #232]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004056:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800405e:	4937      	ldr	r1, [pc, #220]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800406a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800406e:	d106      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004070:	4b32      	ldr	r3, [pc, #200]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a31      	ldr	r2, [pc, #196]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800407a:	60d3      	str	r3, [r2, #12]
 800407c:	e011      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004082:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004086:	d10c      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	2101      	movs	r1, #1
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f8d8 	bl	8004244 <RCCEx_PLLSAI1_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d028      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040ae:	4b23      	ldr	r3, [pc, #140]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040bc:	491f      	ldr	r1, [pc, #124]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040cc:	d106      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ce:	4b1b      	ldr	r3, [pc, #108]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	4a1a      	ldr	r2, [pc, #104]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040d8:	60d3      	str	r3, [r2, #12]
 80040da:	e011      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3304      	adds	r3, #4
 80040ea:	2101      	movs	r1, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 f8a9 	bl	8004244 <RCCEx_PLLSAI1_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d02b      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800410c:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800411a:	4908      	ldr	r1, [pc, #32]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800412a:	d109      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800412c:	4b03      	ldr	r3, [pc, #12]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a02      	ldr	r2, [pc, #8]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004136:	60d3      	str	r3, [r2, #12]
 8004138:	e014      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004144:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004148:	d10c      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f877 	bl	8004244 <RCCEx_PLLSAI1_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d02f      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004170:	4b2b      	ldr	r3, [pc, #172]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004176:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800417e:	4928      	ldr	r1, [pc, #160]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800418a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800418e:	d10d      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	2102      	movs	r1, #2
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f854 	bl	8004244 <RCCEx_PLLSAI1_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d014      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	74bb      	strb	r3, [r7, #18]
 80041aa:	e011      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041b4:	d10c      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3320      	adds	r3, #32
 80041ba:	2102      	movs	r1, #2
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 f935 	bl	800442c <RCCEx_PLLSAI2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041c6:	7cfb      	ldrb	r3, [r7, #19]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041dc:	4b10      	ldr	r3, [pc, #64]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041ea:	490d      	ldr	r1, [pc, #52]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041fe:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004204:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800420e:	4904      	ldr	r1, [pc, #16]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004216:	7cbb      	ldrb	r3, [r7, #18]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000

08004224 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004228:	4b05      	ldr	r3, [pc, #20]	@ (8004240 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a04      	ldr	r2, [pc, #16]	@ (8004240 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800422e:	f043 0304 	orr.w	r3, r3, #4
 8004232:	6013      	str	r3, [r2, #0]
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000

08004244 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004252:	4b75      	ldr	r3, [pc, #468]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d018      	beq.n	8004290 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800425e:	4b72      	ldr	r3, [pc, #456]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0203 	and.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d10d      	bne.n	800428a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
       ||
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004276:	4b6c      	ldr	r3, [pc, #432]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	091b      	lsrs	r3, r3, #4
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
       ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d047      	beq.n	800431a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
 800428e:	e044      	b.n	800431a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d018      	beq.n	80042ca <RCCEx_PLLSAI1_Config+0x86>
 8004298:	2b03      	cmp	r3, #3
 800429a:	d825      	bhi.n	80042e8 <RCCEx_PLLSAI1_Config+0xa4>
 800429c:	2b01      	cmp	r3, #1
 800429e:	d002      	beq.n	80042a6 <RCCEx_PLLSAI1_Config+0x62>
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d009      	beq.n	80042b8 <RCCEx_PLLSAI1_Config+0x74>
 80042a4:	e020      	b.n	80042e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042a6:	4b60      	ldr	r3, [pc, #384]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d11d      	bne.n	80042ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b6:	e01a      	b.n	80042ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d116      	bne.n	80042f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c8:	e013      	b.n	80042f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042ca:	4b57      	ldr	r3, [pc, #348]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10f      	bne.n	80042f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042d6:	4b54      	ldr	r3, [pc, #336]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042e6:	e006      	b.n	80042f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
      break;
 80042ec:	e004      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ee:	bf00      	nop
 80042f0:	e002      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10d      	bne.n	800431a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6819      	ldr	r1, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	3b01      	subs	r3, #1
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	430b      	orrs	r3, r1
 8004314:	4944      	ldr	r1, [pc, #272]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004316:	4313      	orrs	r3, r2
 8004318:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d17d      	bne.n	800441c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004320:	4b41      	ldr	r3, [pc, #260]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a40      	ldr	r2, [pc, #256]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004326:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800432a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800432c:	f7fc fe58 	bl	8000fe0 <HAL_GetTick>
 8004330:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004332:	e009      	b.n	8004348 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004334:	f7fc fe54 	bl	8000fe0 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d902      	bls.n	8004348 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	73fb      	strb	r3, [r7, #15]
        break;
 8004346:	e005      	b.n	8004354 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004348:	4b37      	ldr	r3, [pc, #220]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1ef      	bne.n	8004334 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d160      	bne.n	800441c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d111      	bne.n	8004384 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004360:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004368:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6892      	ldr	r2, [r2, #8]
 8004370:	0211      	lsls	r1, r2, #8
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68d2      	ldr	r2, [r2, #12]
 8004376:	0912      	lsrs	r2, r2, #4
 8004378:	0452      	lsls	r2, r2, #17
 800437a:	430a      	orrs	r2, r1
 800437c:	492a      	ldr	r1, [pc, #168]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437e:	4313      	orrs	r3, r2
 8004380:	610b      	str	r3, [r1, #16]
 8004382:	e027      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d112      	bne.n	80043b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800438a:	4b27      	ldr	r3, [pc, #156]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004392:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6892      	ldr	r2, [r2, #8]
 800439a:	0211      	lsls	r1, r2, #8
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6912      	ldr	r2, [r2, #16]
 80043a0:	0852      	lsrs	r2, r2, #1
 80043a2:	3a01      	subs	r2, #1
 80043a4:	0552      	lsls	r2, r2, #21
 80043a6:	430a      	orrs	r2, r1
 80043a8:	491f      	ldr	r1, [pc, #124]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	610b      	str	r3, [r1, #16]
 80043ae:	e011      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80043b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6892      	ldr	r2, [r2, #8]
 80043c0:	0211      	lsls	r1, r2, #8
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6952      	ldr	r2, [r2, #20]
 80043c6:	0852      	lsrs	r2, r2, #1
 80043c8:	3a01      	subs	r2, #1
 80043ca:	0652      	lsls	r2, r2, #25
 80043cc:	430a      	orrs	r2, r1
 80043ce:	4916      	ldr	r1, [pc, #88]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043d4:	4b14      	ldr	r3, [pc, #80]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a13      	ldr	r2, [pc, #76]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fc fdfe 	bl	8000fe0 <HAL_GetTick>
 80043e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043e6:	e009      	b.n	80043fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043e8:	f7fc fdfa 	bl	8000fe0 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d902      	bls.n	80043fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	73fb      	strb	r3, [r7, #15]
          break;
 80043fa:	e005      	b.n	8004408 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ef      	beq.n	80043e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	4904      	ldr	r1, [pc, #16]	@ (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004418:	4313      	orrs	r3, r2
 800441a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000

0800442c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800443a:	4b6a      	ldr	r3, [pc, #424]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d018      	beq.n	8004478 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004446:	4b67      	ldr	r3, [pc, #412]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0203 	and.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d10d      	bne.n	8004472 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
       ||
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800445e:	4b61      	ldr	r3, [pc, #388]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	091b      	lsrs	r3, r3, #4
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
       ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d047      	beq.n	8004502 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
 8004476:	e044      	b.n	8004502 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d018      	beq.n	80044b2 <RCCEx_PLLSAI2_Config+0x86>
 8004480:	2b03      	cmp	r3, #3
 8004482:	d825      	bhi.n	80044d0 <RCCEx_PLLSAI2_Config+0xa4>
 8004484:	2b01      	cmp	r3, #1
 8004486:	d002      	beq.n	800448e <RCCEx_PLLSAI2_Config+0x62>
 8004488:	2b02      	cmp	r3, #2
 800448a:	d009      	beq.n	80044a0 <RCCEx_PLLSAI2_Config+0x74>
 800448c:	e020      	b.n	80044d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800448e:	4b55      	ldr	r3, [pc, #340]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11d      	bne.n	80044d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800449e:	e01a      	b.n	80044d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044a0:	4b50      	ldr	r3, [pc, #320]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d116      	bne.n	80044da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b0:	e013      	b.n	80044da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044b2:	4b4c      	ldr	r3, [pc, #304]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10f      	bne.n	80044de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044be:	4b49      	ldr	r3, [pc, #292]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ce:	e006      	b.n	80044de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      break;
 80044d4:	e004      	b.n	80044e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044de:	bf00      	nop
    }

    if(status == HAL_OK)
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10d      	bne.n	8004502 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044e6:	4b3f      	ldr	r3, [pc, #252]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6819      	ldr	r1, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	430b      	orrs	r3, r1
 80044fc:	4939      	ldr	r1, [pc, #228]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d167      	bne.n	80045d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004508:	4b36      	ldr	r3, [pc, #216]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a35      	ldr	r2, [pc, #212]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004514:	f7fc fd64 	bl	8000fe0 <HAL_GetTick>
 8004518:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800451a:	e009      	b.n	8004530 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800451c:	f7fc fd60 	bl	8000fe0 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d902      	bls.n	8004530 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	73fb      	strb	r3, [r7, #15]
        break;
 800452e:	e005      	b.n	800453c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004530:	4b2c      	ldr	r3, [pc, #176]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1ef      	bne.n	800451c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d14a      	bne.n	80045d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d111      	bne.n	800456c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004548:	4b26      	ldr	r3, [pc, #152]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6892      	ldr	r2, [r2, #8]
 8004558:	0211      	lsls	r1, r2, #8
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68d2      	ldr	r2, [r2, #12]
 800455e:	0912      	lsrs	r2, r2, #4
 8004560:	0452      	lsls	r2, r2, #17
 8004562:	430a      	orrs	r2, r1
 8004564:	491f      	ldr	r1, [pc, #124]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004566:	4313      	orrs	r3, r2
 8004568:	614b      	str	r3, [r1, #20]
 800456a:	e011      	b.n	8004590 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800456c:	4b1d      	ldr	r3, [pc, #116]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004574:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6892      	ldr	r2, [r2, #8]
 800457c:	0211      	lsls	r1, r2, #8
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6912      	ldr	r2, [r2, #16]
 8004582:	0852      	lsrs	r2, r2, #1
 8004584:	3a01      	subs	r2, #1
 8004586:	0652      	lsls	r2, r2, #25
 8004588:	430a      	orrs	r2, r1
 800458a:	4916      	ldr	r1, [pc, #88]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458c:	4313      	orrs	r3, r2
 800458e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004590:	4b14      	ldr	r3, [pc, #80]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a13      	ldr	r2, [pc, #76]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800459a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fc fd20 	bl	8000fe0 <HAL_GetTick>
 80045a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045a2:	e009      	b.n	80045b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045a4:	f7fc fd1c 	bl	8000fe0 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d902      	bls.n	80045b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	73fb      	strb	r3, [r7, #15]
          break;
 80045b6:	e005      	b.n	80045c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045b8:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ef      	beq.n	80045a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045ca:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	4904      	ldr	r1, [pc, #16]	@ (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000

080045e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e049      	b.n	800468e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc f908 	bl	8000824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 f970 	bl	800490c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e04f      	b.n	8004750 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a23      	ldr	r2, [pc, #140]	@ (800475c <HAL_TIM_Base_Start_IT+0xc4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d01d      	beq.n	800470e <HAL_TIM_Base_Start_IT+0x76>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046da:	d018      	beq.n	800470e <HAL_TIM_Base_Start_IT+0x76>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004760 <HAL_TIM_Base_Start_IT+0xc8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <HAL_TIM_Base_Start_IT+0x76>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004764 <HAL_TIM_Base_Start_IT+0xcc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00e      	beq.n	800470e <HAL_TIM_Base_Start_IT+0x76>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004768 <HAL_TIM_Base_Start_IT+0xd0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d009      	beq.n	800470e <HAL_TIM_Base_Start_IT+0x76>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1b      	ldr	r2, [pc, #108]	@ (800476c <HAL_TIM_Base_Start_IT+0xd4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d004      	beq.n	800470e <HAL_TIM_Base_Start_IT+0x76>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a19      	ldr	r2, [pc, #100]	@ (8004770 <HAL_TIM_Base_Start_IT+0xd8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d115      	bne.n	800473a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	4b17      	ldr	r3, [pc, #92]	@ (8004774 <HAL_TIM_Base_Start_IT+0xdc>)
 8004716:	4013      	ands	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b06      	cmp	r3, #6
 800471e:	d015      	beq.n	800474c <HAL_TIM_Base_Start_IT+0xb4>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004726:	d011      	beq.n	800474c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004738:	e008      	b.n	800474c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e000      	b.n	800474e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40000c00 	.word	0x40000c00
 800476c:	40013400 	.word	0x40013400
 8004770:	40014000 	.word	0x40014000
 8004774:	00010007 	.word	0x00010007

08004778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_TIM_ConfigClockSource+0x1c>
 8004790:	2302      	movs	r3, #2
 8004792:	e0b6      	b.n	8004902 <HAL_TIM_ConfigClockSource+0x18a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047d0:	d03e      	beq.n	8004850 <HAL_TIM_ConfigClockSource+0xd8>
 80047d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047d6:	f200 8087 	bhi.w	80048e8 <HAL_TIM_ConfigClockSource+0x170>
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047de:	f000 8086 	beq.w	80048ee <HAL_TIM_ConfigClockSource+0x176>
 80047e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047e6:	d87f      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x170>
 80047e8:	2b70      	cmp	r3, #112	@ 0x70
 80047ea:	d01a      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0xaa>
 80047ec:	2b70      	cmp	r3, #112	@ 0x70
 80047ee:	d87b      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x170>
 80047f0:	2b60      	cmp	r3, #96	@ 0x60
 80047f2:	d050      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0x11e>
 80047f4:	2b60      	cmp	r3, #96	@ 0x60
 80047f6:	d877      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x170>
 80047f8:	2b50      	cmp	r3, #80	@ 0x50
 80047fa:	d03c      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0xfe>
 80047fc:	2b50      	cmp	r3, #80	@ 0x50
 80047fe:	d873      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x170>
 8004800:	2b40      	cmp	r3, #64	@ 0x40
 8004802:	d058      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x13e>
 8004804:	2b40      	cmp	r3, #64	@ 0x40
 8004806:	d86f      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x170>
 8004808:	2b30      	cmp	r3, #48	@ 0x30
 800480a:	d064      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x15e>
 800480c:	2b30      	cmp	r3, #48	@ 0x30
 800480e:	d86b      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x170>
 8004810:	2b20      	cmp	r3, #32
 8004812:	d060      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x15e>
 8004814:	2b20      	cmp	r3, #32
 8004816:	d867      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x170>
 8004818:	2b00      	cmp	r3, #0
 800481a:	d05c      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x15e>
 800481c:	2b10      	cmp	r3, #16
 800481e:	d05a      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x15e>
 8004820:	e062      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004832:	f000 f98b 	bl	8004b4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	609a      	str	r2, [r3, #8]
      break;
 800484e:	e04f      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004860:	f000 f974 	bl	8004b4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004872:	609a      	str	r2, [r3, #8]
      break;
 8004874:	e03c      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004882:	461a      	mov	r2, r3
 8004884:	f000 f8e8 	bl	8004a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2150      	movs	r1, #80	@ 0x50
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f941 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 8004894:	e02c      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048a2:	461a      	mov	r2, r3
 80048a4:	f000 f907 	bl	8004ab6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2160      	movs	r1, #96	@ 0x60
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f931 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 80048b4:	e01c      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c2:	461a      	mov	r2, r3
 80048c4:	f000 f8c8 	bl	8004a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2140      	movs	r1, #64	@ 0x40
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f921 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 80048d4:	e00c      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f000 f918 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 80048e6:	e003      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	73fb      	strb	r3, [r7, #15]
      break;
 80048ec:	e000      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80048ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004900:	7bfb      	ldrb	r3, [r7, #15]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a46      	ldr	r2, [pc, #280]	@ (8004a38 <TIM_Base_SetConfig+0x12c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492a:	d00f      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a43      	ldr	r2, [pc, #268]	@ (8004a3c <TIM_Base_SetConfig+0x130>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00b      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a42      	ldr	r2, [pc, #264]	@ (8004a40 <TIM_Base_SetConfig+0x134>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d007      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a41      	ldr	r2, [pc, #260]	@ (8004a44 <TIM_Base_SetConfig+0x138>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a40      	ldr	r2, [pc, #256]	@ (8004a48 <TIM_Base_SetConfig+0x13c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d108      	bne.n	800495e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a35      	ldr	r2, [pc, #212]	@ (8004a38 <TIM_Base_SetConfig+0x12c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01f      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800496c:	d01b      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a32      	ldr	r2, [pc, #200]	@ (8004a3c <TIM_Base_SetConfig+0x130>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d017      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a31      	ldr	r2, [pc, #196]	@ (8004a40 <TIM_Base_SetConfig+0x134>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a30      	ldr	r2, [pc, #192]	@ (8004a44 <TIM_Base_SetConfig+0x138>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00f      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2f      	ldr	r2, [pc, #188]	@ (8004a48 <TIM_Base_SetConfig+0x13c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00b      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2e      	ldr	r2, [pc, #184]	@ (8004a4c <TIM_Base_SetConfig+0x140>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d007      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2d      	ldr	r2, [pc, #180]	@ (8004a50 <TIM_Base_SetConfig+0x144>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d003      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004a54 <TIM_Base_SetConfig+0x148>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d108      	bne.n	80049b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a16      	ldr	r2, [pc, #88]	@ (8004a38 <TIM_Base_SetConfig+0x12c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00f      	beq.n	8004a04 <TIM_Base_SetConfig+0xf8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a18      	ldr	r2, [pc, #96]	@ (8004a48 <TIM_Base_SetConfig+0x13c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00b      	beq.n	8004a04 <TIM_Base_SetConfig+0xf8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a17      	ldr	r2, [pc, #92]	@ (8004a4c <TIM_Base_SetConfig+0x140>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d007      	beq.n	8004a04 <TIM_Base_SetConfig+0xf8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a16      	ldr	r2, [pc, #88]	@ (8004a50 <TIM_Base_SetConfig+0x144>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_Base_SetConfig+0xf8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a15      	ldr	r2, [pc, #84]	@ (8004a54 <TIM_Base_SetConfig+0x148>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d103      	bne.n	8004a0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d105      	bne.n	8004a2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f023 0201 	bic.w	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	611a      	str	r2, [r3, #16]
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40000800 	.word	0x40000800
 8004a44:	40000c00 	.word	0x40000c00
 8004a48:	40013400 	.word	0x40013400
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800

08004a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f023 0201 	bic.w	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f023 030a 	bic.w	r3, r3, #10
 8004a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b087      	sub	sp, #28
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f023 0210 	bic.w	r2, r3, #16
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	031b      	lsls	r3, r3, #12
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004af2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	621a      	str	r2, [r3, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f043 0307 	orr.w	r3, r3, #7
 8004b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	609a      	str	r2, [r3, #8]
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	021a      	lsls	r2, r3, #8
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	609a      	str	r2, [r3, #8]
}
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e068      	b.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a2e      	ldr	r2, [pc, #184]	@ (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d108      	bne.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004bde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1e      	ldr	r2, [pc, #120]	@ (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d01d      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c16:	d018      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d013      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a1a      	ldr	r2, [pc, #104]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00e      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a18      	ldr	r2, [pc, #96]	@ (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d009      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a13      	ldr	r2, [pc, #76]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d004      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a14      	ldr	r2, [pc, #80]	@ (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d10c      	bne.n	8004c64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	40013400 	.word	0x40013400
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40000c00 	.word	0x40000c00
 8004c98:	40014000 	.word	0x40014000

08004c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e040      	b.n	8004d30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fb ff52 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2224      	movs	r2, #36	@ 0x24
 8004cc8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fb6a 	bl	80053bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f8af 	bl	8004e4c <UART_SetConfig>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e01b      	b.n	8004d30 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fbe9 	bl	8005500 <UART_CheckIdleState>
 8004d2e:	4603      	mov	r3, r0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	@ 0x28
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d177      	bne.n	8004e40 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_UART_Transmit+0x24>
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e070      	b.n	8004e42 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2221      	movs	r2, #33	@ 0x21
 8004d6c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d6e:	f7fc f937 	bl	8000fe0 <HAL_GetTick>
 8004d72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	88fa      	ldrh	r2, [r7, #6]
 8004d78:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	88fa      	ldrh	r2, [r7, #6]
 8004d80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d8c:	d108      	bne.n	8004da0 <HAL_UART_Transmit+0x68>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d104      	bne.n	8004da0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	e003      	b.n	8004da8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004da8:	e02f      	b.n	8004e0a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2180      	movs	r1, #128	@ 0x80
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fc4b 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d004      	beq.n	8004dca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e03b      	b.n	8004e42 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10b      	bne.n	8004de8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	881a      	ldrh	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ddc:	b292      	uxth	r2, r2
 8004dde:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	3302      	adds	r3, #2
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	e007      	b.n	8004df8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	781a      	ldrb	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	3301      	adds	r3, #1
 8004df6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1c9      	bne.n	8004daa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2140      	movs	r1, #64	@ 0x40
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fc15 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e005      	b.n	8004e42 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e000      	b.n	8004e42 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e40:	2302      	movs	r3, #2
  }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e50:	b08a      	sub	sp, #40	@ 0x28
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4ba4      	ldr	r3, [pc, #656]	@ (800510c <UART_SetConfig+0x2c0>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a99      	ldr	r2, [pc, #612]	@ (8005110 <UART_SetConfig+0x2c4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a90      	ldr	r2, [pc, #576]	@ (8005114 <UART_SetConfig+0x2c8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d126      	bne.n	8004f24 <UART_SetConfig+0xd8>
 8004ed6:	4b90      	ldr	r3, [pc, #576]	@ (8005118 <UART_SetConfig+0x2cc>)
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d81b      	bhi.n	8004f1c <UART_SetConfig+0xd0>
 8004ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8004eec <UART_SetConfig+0xa0>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004efd 	.word	0x08004efd
 8004ef0:	08004f0d 	.word	0x08004f0d
 8004ef4:	08004f05 	.word	0x08004f05
 8004ef8:	08004f15 	.word	0x08004f15
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f02:	e116      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004f04:	2302      	movs	r3, #2
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0a:	e112      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f12:	e10e      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004f14:	2308      	movs	r3, #8
 8004f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1a:	e10a      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004f1c:	2310      	movs	r3, #16
 8004f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f22:	e106      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a7c      	ldr	r2, [pc, #496]	@ (800511c <UART_SetConfig+0x2d0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d138      	bne.n	8004fa0 <UART_SetConfig+0x154>
 8004f2e:	4b7a      	ldr	r3, [pc, #488]	@ (8005118 <UART_SetConfig+0x2cc>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f34:	f003 030c 	and.w	r3, r3, #12
 8004f38:	2b0c      	cmp	r3, #12
 8004f3a:	d82d      	bhi.n	8004f98 <UART_SetConfig+0x14c>
 8004f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f44 <UART_SetConfig+0xf8>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f79 	.word	0x08004f79
 8004f48:	08004f99 	.word	0x08004f99
 8004f4c:	08004f99 	.word	0x08004f99
 8004f50:	08004f99 	.word	0x08004f99
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	08004f99 	.word	0x08004f99
 8004f5c:	08004f99 	.word	0x08004f99
 8004f60:	08004f99 	.word	0x08004f99
 8004f64:	08004f81 	.word	0x08004f81
 8004f68:	08004f99 	.word	0x08004f99
 8004f6c:	08004f99 	.word	0x08004f99
 8004f70:	08004f99 	.word	0x08004f99
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7e:	e0d8      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004f80:	2302      	movs	r3, #2
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f86:	e0d4      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8e:	e0d0      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004f90:	2308      	movs	r3, #8
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f96:	e0cc      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9e:	e0c8      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a5e      	ldr	r2, [pc, #376]	@ (8005120 <UART_SetConfig+0x2d4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d125      	bne.n	8004ff6 <UART_SetConfig+0x1aa>
 8004faa:	4b5b      	ldr	r3, [pc, #364]	@ (8005118 <UART_SetConfig+0x2cc>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fb4:	2b30      	cmp	r3, #48	@ 0x30
 8004fb6:	d016      	beq.n	8004fe6 <UART_SetConfig+0x19a>
 8004fb8:	2b30      	cmp	r3, #48	@ 0x30
 8004fba:	d818      	bhi.n	8004fee <UART_SetConfig+0x1a2>
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d00a      	beq.n	8004fd6 <UART_SetConfig+0x18a>
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d814      	bhi.n	8004fee <UART_SetConfig+0x1a2>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <UART_SetConfig+0x182>
 8004fc8:	2b10      	cmp	r3, #16
 8004fca:	d008      	beq.n	8004fde <UART_SetConfig+0x192>
 8004fcc:	e00f      	b.n	8004fee <UART_SetConfig+0x1a2>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd4:	e0ad      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fdc:	e0a9      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004fde:	2304      	movs	r3, #4
 8004fe0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe4:	e0a5      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fec:	e0a1      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004fee:	2310      	movs	r3, #16
 8004ff0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff4:	e09d      	b.n	8005132 <UART_SetConfig+0x2e6>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a4a      	ldr	r2, [pc, #296]	@ (8005124 <UART_SetConfig+0x2d8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d125      	bne.n	800504c <UART_SetConfig+0x200>
 8005000:	4b45      	ldr	r3, [pc, #276]	@ (8005118 <UART_SetConfig+0x2cc>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005006:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800500a:	2bc0      	cmp	r3, #192	@ 0xc0
 800500c:	d016      	beq.n	800503c <UART_SetConfig+0x1f0>
 800500e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005010:	d818      	bhi.n	8005044 <UART_SetConfig+0x1f8>
 8005012:	2b80      	cmp	r3, #128	@ 0x80
 8005014:	d00a      	beq.n	800502c <UART_SetConfig+0x1e0>
 8005016:	2b80      	cmp	r3, #128	@ 0x80
 8005018:	d814      	bhi.n	8005044 <UART_SetConfig+0x1f8>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <UART_SetConfig+0x1d8>
 800501e:	2b40      	cmp	r3, #64	@ 0x40
 8005020:	d008      	beq.n	8005034 <UART_SetConfig+0x1e8>
 8005022:	e00f      	b.n	8005044 <UART_SetConfig+0x1f8>
 8005024:	2300      	movs	r3, #0
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502a:	e082      	b.n	8005132 <UART_SetConfig+0x2e6>
 800502c:	2302      	movs	r3, #2
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005032:	e07e      	b.n	8005132 <UART_SetConfig+0x2e6>
 8005034:	2304      	movs	r3, #4
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503a:	e07a      	b.n	8005132 <UART_SetConfig+0x2e6>
 800503c:	2308      	movs	r3, #8
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005042:	e076      	b.n	8005132 <UART_SetConfig+0x2e6>
 8005044:	2310      	movs	r3, #16
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800504a:	e072      	b.n	8005132 <UART_SetConfig+0x2e6>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a35      	ldr	r2, [pc, #212]	@ (8005128 <UART_SetConfig+0x2dc>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d12a      	bne.n	80050ac <UART_SetConfig+0x260>
 8005056:	4b30      	ldr	r3, [pc, #192]	@ (8005118 <UART_SetConfig+0x2cc>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005060:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005064:	d01a      	beq.n	800509c <UART_SetConfig+0x250>
 8005066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800506a:	d81b      	bhi.n	80050a4 <UART_SetConfig+0x258>
 800506c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005070:	d00c      	beq.n	800508c <UART_SetConfig+0x240>
 8005072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005076:	d815      	bhi.n	80050a4 <UART_SetConfig+0x258>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <UART_SetConfig+0x238>
 800507c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005080:	d008      	beq.n	8005094 <UART_SetConfig+0x248>
 8005082:	e00f      	b.n	80050a4 <UART_SetConfig+0x258>
 8005084:	2300      	movs	r3, #0
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508a:	e052      	b.n	8005132 <UART_SetConfig+0x2e6>
 800508c:	2302      	movs	r3, #2
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005092:	e04e      	b.n	8005132 <UART_SetConfig+0x2e6>
 8005094:	2304      	movs	r3, #4
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509a:	e04a      	b.n	8005132 <UART_SetConfig+0x2e6>
 800509c:	2308      	movs	r3, #8
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a2:	e046      	b.n	8005132 <UART_SetConfig+0x2e6>
 80050a4:	2310      	movs	r3, #16
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050aa:	e042      	b.n	8005132 <UART_SetConfig+0x2e6>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a17      	ldr	r2, [pc, #92]	@ (8005110 <UART_SetConfig+0x2c4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d13a      	bne.n	800512c <UART_SetConfig+0x2e0>
 80050b6:	4b18      	ldr	r3, [pc, #96]	@ (8005118 <UART_SetConfig+0x2cc>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050c4:	d01a      	beq.n	80050fc <UART_SetConfig+0x2b0>
 80050c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050ca:	d81b      	bhi.n	8005104 <UART_SetConfig+0x2b8>
 80050cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050d0:	d00c      	beq.n	80050ec <UART_SetConfig+0x2a0>
 80050d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050d6:	d815      	bhi.n	8005104 <UART_SetConfig+0x2b8>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <UART_SetConfig+0x298>
 80050dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e0:	d008      	beq.n	80050f4 <UART_SetConfig+0x2a8>
 80050e2:	e00f      	b.n	8005104 <UART_SetConfig+0x2b8>
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ea:	e022      	b.n	8005132 <UART_SetConfig+0x2e6>
 80050ec:	2302      	movs	r3, #2
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050f2:	e01e      	b.n	8005132 <UART_SetConfig+0x2e6>
 80050f4:	2304      	movs	r3, #4
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050fa:	e01a      	b.n	8005132 <UART_SetConfig+0x2e6>
 80050fc:	2308      	movs	r3, #8
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005102:	e016      	b.n	8005132 <UART_SetConfig+0x2e6>
 8005104:	2310      	movs	r3, #16
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800510a:	e012      	b.n	8005132 <UART_SetConfig+0x2e6>
 800510c:	efff69f3 	.word	0xefff69f3
 8005110:	40008000 	.word	0x40008000
 8005114:	40013800 	.word	0x40013800
 8005118:	40021000 	.word	0x40021000
 800511c:	40004400 	.word	0x40004400
 8005120:	40004800 	.word	0x40004800
 8005124:	40004c00 	.word	0x40004c00
 8005128:	40005000 	.word	0x40005000
 800512c:	2310      	movs	r3, #16
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a9f      	ldr	r2, [pc, #636]	@ (80053b4 <UART_SetConfig+0x568>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d17a      	bne.n	8005232 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800513c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005140:	2b08      	cmp	r3, #8
 8005142:	d824      	bhi.n	800518e <UART_SetConfig+0x342>
 8005144:	a201      	add	r2, pc, #4	@ (adr r2, 800514c <UART_SetConfig+0x300>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	08005171 	.word	0x08005171
 8005150:	0800518f 	.word	0x0800518f
 8005154:	08005179 	.word	0x08005179
 8005158:	0800518f 	.word	0x0800518f
 800515c:	0800517f 	.word	0x0800517f
 8005160:	0800518f 	.word	0x0800518f
 8005164:	0800518f 	.word	0x0800518f
 8005168:	0800518f 	.word	0x0800518f
 800516c:	08005187 	.word	0x08005187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005170:	f7fe fce2 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8005174:	61f8      	str	r0, [r7, #28]
        break;
 8005176:	e010      	b.n	800519a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005178:	4b8f      	ldr	r3, [pc, #572]	@ (80053b8 <UART_SetConfig+0x56c>)
 800517a:	61fb      	str	r3, [r7, #28]
        break;
 800517c:	e00d      	b.n	800519a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517e:	f7fe fc43 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8005182:	61f8      	str	r0, [r7, #28]
        break;
 8005184:	e009      	b.n	800519a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800518a:	61fb      	str	r3, [r7, #28]
        break;
 800518c:	e005      	b.n	800519a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005198:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80fb 	beq.w	8005398 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d305      	bcc.n	80051be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d903      	bls.n	80051c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051c4:	e0e8      	b.n	8005398 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	2200      	movs	r2, #0
 80051ca:	461c      	mov	r4, r3
 80051cc:	4615      	mov	r5, r2
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	022b      	lsls	r3, r5, #8
 80051d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051dc:	0222      	lsls	r2, r4, #8
 80051de:	68f9      	ldr	r1, [r7, #12]
 80051e0:	6849      	ldr	r1, [r1, #4]
 80051e2:	0849      	lsrs	r1, r1, #1
 80051e4:	2000      	movs	r0, #0
 80051e6:	4688      	mov	r8, r1
 80051e8:	4681      	mov	r9, r0
 80051ea:	eb12 0a08 	adds.w	sl, r2, r8
 80051ee:	eb43 0b09 	adc.w	fp, r3, r9
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005200:	4650      	mov	r0, sl
 8005202:	4659      	mov	r1, fp
 8005204:	f7fb f834 	bl	8000270 <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4613      	mov	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005216:	d308      	bcc.n	800522a <UART_SetConfig+0x3de>
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800521e:	d204      	bcs.n	800522a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	60da      	str	r2, [r3, #12]
 8005228:	e0b6      	b.n	8005398 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005230:	e0b2      	b.n	8005398 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800523a:	d15e      	bne.n	80052fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800523c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005240:	2b08      	cmp	r3, #8
 8005242:	d828      	bhi.n	8005296 <UART_SetConfig+0x44a>
 8005244:	a201      	add	r2, pc, #4	@ (adr r2, 800524c <UART_SetConfig+0x400>)
 8005246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524a:	bf00      	nop
 800524c:	08005271 	.word	0x08005271
 8005250:	08005279 	.word	0x08005279
 8005254:	08005281 	.word	0x08005281
 8005258:	08005297 	.word	0x08005297
 800525c:	08005287 	.word	0x08005287
 8005260:	08005297 	.word	0x08005297
 8005264:	08005297 	.word	0x08005297
 8005268:	08005297 	.word	0x08005297
 800526c:	0800528f 	.word	0x0800528f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005270:	f7fe fc62 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8005274:	61f8      	str	r0, [r7, #28]
        break;
 8005276:	e014      	b.n	80052a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005278:	f7fe fc74 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 800527c:	61f8      	str	r0, [r7, #28]
        break;
 800527e:	e010      	b.n	80052a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005280:	4b4d      	ldr	r3, [pc, #308]	@ (80053b8 <UART_SetConfig+0x56c>)
 8005282:	61fb      	str	r3, [r7, #28]
        break;
 8005284:	e00d      	b.n	80052a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005286:	f7fe fbbf 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 800528a:	61f8      	str	r0, [r7, #28]
        break;
 800528c:	e009      	b.n	80052a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800528e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005292:	61fb      	str	r3, [r7, #28]
        break;
 8005294:	e005      	b.n	80052a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d077      	beq.n	8005398 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	005a      	lsls	r2, r3, #1
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	085b      	lsrs	r3, r3, #1
 80052b2:	441a      	add	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b0f      	cmp	r3, #15
 80052c2:	d916      	bls.n	80052f2 <UART_SetConfig+0x4a6>
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ca:	d212      	bcs.n	80052f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f023 030f 	bic.w	r3, r3, #15
 80052d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	085b      	lsrs	r3, r3, #1
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	8afb      	ldrh	r3, [r7, #22]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	8afa      	ldrh	r2, [r7, #22]
 80052ee:	60da      	str	r2, [r3, #12]
 80052f0:	e052      	b.n	8005398 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052f8:	e04e      	b.n	8005398 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d827      	bhi.n	8005352 <UART_SetConfig+0x506>
 8005302:	a201      	add	r2, pc, #4	@ (adr r2, 8005308 <UART_SetConfig+0x4bc>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	0800532d 	.word	0x0800532d
 800530c:	08005335 	.word	0x08005335
 8005310:	0800533d 	.word	0x0800533d
 8005314:	08005353 	.word	0x08005353
 8005318:	08005343 	.word	0x08005343
 800531c:	08005353 	.word	0x08005353
 8005320:	08005353 	.word	0x08005353
 8005324:	08005353 	.word	0x08005353
 8005328:	0800534b 	.word	0x0800534b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7fe fc04 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8005330:	61f8      	str	r0, [r7, #28]
        break;
 8005332:	e014      	b.n	800535e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005334:	f7fe fc16 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 8005338:	61f8      	str	r0, [r7, #28]
        break;
 800533a:	e010      	b.n	800535e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800533c:	4b1e      	ldr	r3, [pc, #120]	@ (80053b8 <UART_SetConfig+0x56c>)
 800533e:	61fb      	str	r3, [r7, #28]
        break;
 8005340:	e00d      	b.n	800535e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005342:	f7fe fb61 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8005346:	61f8      	str	r0, [r7, #28]
        break;
 8005348:	e009      	b.n	800535e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800534a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800534e:	61fb      	str	r3, [r7, #28]
        break;
 8005350:	e005      	b.n	800535e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800535c:	bf00      	nop
    }

    if (pclk != 0U)
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d019      	beq.n	8005398 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	085a      	lsrs	r2, r3, #1
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	441a      	add	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	fbb2 f3f3 	udiv	r3, r2, r3
 8005376:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b0f      	cmp	r3, #15
 800537c:	d909      	bls.n	8005392 <UART_SetConfig+0x546>
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005384:	d205      	bcs.n	8005392 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60da      	str	r2, [r3, #12]
 8005390:	e002      	b.n	8005398 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053a4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3728      	adds	r7, #40	@ 0x28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053b2:	bf00      	nop
 80053b4:	40008000 	.word	0x40008000
 80053b8:	00f42400 	.word	0x00f42400

080053bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01a      	beq.n	80054d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ba:	d10a      	bne.n	80054d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b098      	sub	sp, #96	@ 0x60
 8005504:	af02      	add	r7, sp, #8
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005510:	f7fb fd66 	bl	8000fe0 <HAL_GetTick>
 8005514:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b08      	cmp	r3, #8
 8005522:	d12e      	bne.n	8005582 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005524:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800552c:	2200      	movs	r2, #0
 800552e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f88c 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d021      	beq.n	8005582 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800554c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800554e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005552:	653b      	str	r3, [r7, #80]	@ 0x50
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800555c:	647b      	str	r3, [r7, #68]	@ 0x44
 800555e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800556a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e6      	bne.n	800553e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e062      	b.n	8005648 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b04      	cmp	r3, #4
 800558e:	d149      	bne.n	8005624 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005590:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005598:	2200      	movs	r2, #0
 800559a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f856 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d03c      	beq.n	8005624 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	623b      	str	r3, [r7, #32]
   return(result);
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e6      	bne.n	80055aa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3308      	adds	r3, #8
 80055e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3308      	adds	r3, #8
 80055fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055fc:	61fa      	str	r2, [r7, #28]
 80055fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	69b9      	ldr	r1, [r7, #24]
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	617b      	str	r3, [r7, #20]
   return(result);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e5      	bne.n	80055dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e011      	b.n	8005648 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3758      	adds	r7, #88	@ 0x58
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005660:	e04f      	b.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d04b      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566a:	f7fb fcb9 	bl	8000fe0 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	429a      	cmp	r2, r3
 8005678:	d302      	bcc.n	8005680 <UART_WaitOnFlagUntilTimeout+0x30>
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e04e      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d037      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b80      	cmp	r3, #128	@ 0x80
 8005696:	d034      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b40      	cmp	r3, #64	@ 0x40
 800569c:	d031      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d110      	bne.n	80056ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2208      	movs	r2, #8
 80056b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f838 	bl	800572a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2208      	movs	r2, #8
 80056be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e029      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056dc:	d111      	bne.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f81e 	bl	800572a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e00f      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69da      	ldr	r2, [r3, #28]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4013      	ands	r3, r2
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	429a      	cmp	r2, r3
 8005710:	bf0c      	ite	eq
 8005712:	2301      	moveq	r3, #1
 8005714:	2300      	movne	r3, #0
 8005716:	b2db      	uxtb	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	429a      	cmp	r2, r3
 800571e:	d0a0      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800572a:	b480      	push	{r7}
 800572c:	b095      	sub	sp, #84	@ 0x54
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005742:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	461a      	mov	r2, r3
 800574e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005750:	643b      	str	r3, [r7, #64]	@ 0x40
 8005752:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005756:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800575e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e6      	bne.n	8005732 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3308      	adds	r3, #8
 800576a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	61fb      	str	r3, [r7, #28]
   return(result);
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f023 0301 	bic.w	r3, r3, #1
 800577a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3308      	adds	r3, #8
 8005782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800578a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e5      	bne.n	8005764 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800579c:	2b01      	cmp	r3, #1
 800579e:	d118      	bne.n	80057d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f023 0310 	bic.w	r3, r3, #16
 80057b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6979      	ldr	r1, [r7, #20]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	613b      	str	r3, [r7, #16]
   return(result);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e6      	bne.n	80057a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057e6:	bf00      	nop
 80057e8:	3754      	adds	r7, #84	@ 0x54
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
	...

080057f4 <__NVIC_SetPriority>:
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	6039      	str	r1, [r7, #0]
 80057fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005804:	2b00      	cmp	r3, #0
 8005806:	db0a      	blt.n	800581e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	b2da      	uxtb	r2, r3
 800580c:	490c      	ldr	r1, [pc, #48]	@ (8005840 <__NVIC_SetPriority+0x4c>)
 800580e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005812:	0112      	lsls	r2, r2, #4
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	440b      	add	r3, r1
 8005818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800581c:	e00a      	b.n	8005834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	4908      	ldr	r1, [pc, #32]	@ (8005844 <__NVIC_SetPriority+0x50>)
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	3b04      	subs	r3, #4
 800582c:	0112      	lsls	r2, r2, #4
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	440b      	add	r3, r1
 8005832:	761a      	strb	r2, [r3, #24]
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	e000e100 	.word	0xe000e100
 8005844:	e000ed00 	.word	0xe000ed00

08005848 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800584c:	2100      	movs	r1, #0
 800584e:	f06f 0004 	mvn.w	r0, #4
 8005852:	f7ff ffcf 	bl	80057f4 <__NVIC_SetPriority>
#endif
}
 8005856:	bf00      	nop
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005862:	f3ef 8305 	mrs	r3, IPSR
 8005866:	603b      	str	r3, [r7, #0]
  return(result);
 8005868:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800586e:	f06f 0305 	mvn.w	r3, #5
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	e00c      	b.n	8005890 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005876:	4b0a      	ldr	r3, [pc, #40]	@ (80058a0 <osKernelInitialize+0x44>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d105      	bne.n	800588a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800587e:	4b08      	ldr	r3, [pc, #32]	@ (80058a0 <osKernelInitialize+0x44>)
 8005880:	2201      	movs	r2, #1
 8005882:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005884:	2300      	movs	r3, #0
 8005886:	607b      	str	r3, [r7, #4]
 8005888:	e002      	b.n	8005890 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800588a:	f04f 33ff 	mov.w	r3, #4294967295
 800588e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005890:	687b      	ldr	r3, [r7, #4]
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	2000041c 	.word	0x2000041c

080058a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058aa:	f3ef 8305 	mrs	r3, IPSR
 80058ae:	603b      	str	r3, [r7, #0]
  return(result);
 80058b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <osKernelStart+0x1a>
    stat = osErrorISR;
 80058b6:	f06f 0305 	mvn.w	r3, #5
 80058ba:	607b      	str	r3, [r7, #4]
 80058bc:	e010      	b.n	80058e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80058be:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <osKernelStart+0x48>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d109      	bne.n	80058da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80058c6:	f7ff ffbf 	bl	8005848 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80058ca:	4b08      	ldr	r3, [pc, #32]	@ (80058ec <osKernelStart+0x48>)
 80058cc:	2202      	movs	r2, #2
 80058ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80058d0:	f001 fc7a 	bl	80071c8 <vTaskStartScheduler>
      stat = osOK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	607b      	str	r3, [r7, #4]
 80058d8:	e002      	b.n	80058e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80058da:	f04f 33ff 	mov.w	r3, #4294967295
 80058de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058e0:	687b      	ldr	r3, [r7, #4]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	2000041c 	.word	0x2000041c

080058f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08e      	sub	sp, #56	@ 0x38
 80058f4:	af04      	add	r7, sp, #16
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005900:	f3ef 8305 	mrs	r3, IPSR
 8005904:	617b      	str	r3, [r7, #20]
  return(result);
 8005906:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005908:	2b00      	cmp	r3, #0
 800590a:	d17e      	bne.n	8005a0a <osThreadNew+0x11a>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d07b      	beq.n	8005a0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005912:	2380      	movs	r3, #128	@ 0x80
 8005914:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005916:	2318      	movs	r3, #24
 8005918:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800591a:	2300      	movs	r3, #0
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d045      	beq.n	80059b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <osThreadNew+0x48>
        name = attr->name;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <osThreadNew+0x6e>
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	2b38      	cmp	r3, #56	@ 0x38
 8005950:	d805      	bhi.n	800595e <osThreadNew+0x6e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <osThreadNew+0x72>
        return (NULL);
 800595e:	2300      	movs	r3, #0
 8005960:	e054      	b.n	8005a0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	089b      	lsrs	r3, r3, #2
 8005970:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00e      	beq.n	8005998 <osThreadNew+0xa8>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005980:	d90a      	bls.n	8005998 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005986:	2b00      	cmp	r3, #0
 8005988:	d006      	beq.n	8005998 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <osThreadNew+0xa8>
        mem = 1;
 8005992:	2301      	movs	r3, #1
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	e010      	b.n	80059ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10c      	bne.n	80059ba <osThreadNew+0xca>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d108      	bne.n	80059ba <osThreadNew+0xca>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d104      	bne.n	80059ba <osThreadNew+0xca>
          mem = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	e001      	b.n	80059ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d110      	bne.n	80059e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059c8:	9202      	str	r2, [sp, #8]
 80059ca:	9301      	str	r3, [sp, #4]
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6a3a      	ldr	r2, [r7, #32]
 80059d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f001 fa50 	bl	8006e7c <xTaskCreateStatic>
 80059dc:	4603      	mov	r3, r0
 80059de:	613b      	str	r3, [r7, #16]
 80059e0:	e013      	b.n	8005a0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d110      	bne.n	8005a0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	f107 0310 	add.w	r3, r7, #16
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f001 fa9e 	bl	8006f3c <xTaskCreate>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d001      	beq.n	8005a0a <osThreadNew+0x11a>
            hTask = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a0a:	693b      	ldr	r3, [r7, #16]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3728      	adds	r7, #40	@ 0x28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08a      	sub	sp, #40	@ 0x28
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a24:	f3ef 8305 	mrs	r3, IPSR
 8005a28:	613b      	str	r3, [r7, #16]
  return(result);
 8005a2a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d175      	bne.n	8005b1c <osSemaphoreNew+0x108>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d072      	beq.n	8005b1c <osSemaphoreNew+0x108>
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d86e      	bhi.n	8005b1c <osSemaphoreNew+0x108>
    mem = -1;
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d015      	beq.n	8005a76 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d006      	beq.n	8005a60 <osSemaphoreNew+0x4c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	2b4f      	cmp	r3, #79	@ 0x4f
 8005a58:	d902      	bls.n	8005a60 <osSemaphoreNew+0x4c>
        mem = 1;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	e00c      	b.n	8005a7a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d108      	bne.n	8005a7a <osSemaphoreNew+0x66>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d104      	bne.n	8005a7a <osSemaphoreNew+0x66>
          mem = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	61bb      	str	r3, [r7, #24]
 8005a74:	e001      	b.n	8005a7a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a80:	d04c      	beq.n	8005b1c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d128      	bne.n	8005ada <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d10a      	bne.n	8005aa4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2203      	movs	r2, #3
 8005a94:	9200      	str	r2, [sp, #0]
 8005a96:	2200      	movs	r2, #0
 8005a98:	2100      	movs	r1, #0
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	f000 fa2c 	bl	8005ef8 <xQueueGenericCreateStatic>
 8005aa0:	61f8      	str	r0, [r7, #28]
 8005aa2:	e005      	b.n	8005ab0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005aa4:	2203      	movs	r2, #3
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	f000 faa2 	bl	8005ff2 <xQueueGenericCreate>
 8005aae:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d022      	beq.n	8005afc <osSemaphoreNew+0xe8>
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01f      	beq.n	8005afc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005abc:	2300      	movs	r3, #0
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	69f8      	ldr	r0, [r7, #28]
 8005ac4:	f000 fb62 	bl	800618c <xQueueGenericSend>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d016      	beq.n	8005afc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005ace:	69f8      	ldr	r0, [r7, #28]
 8005ad0:	f001 f800 	bl	8006ad4 <vQueueDelete>
            hSemaphore = NULL;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	e010      	b.n	8005afc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d108      	bne.n	8005af2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fae0 	bl	80060ae <xQueueCreateCountingSemaphoreStatic>
 8005aee:	61f8      	str	r0, [r7, #28]
 8005af0:	e004      	b.n	8005afc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 fb13 	bl	8006120 <xQueueCreateCountingSemaphore>
 8005afa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00c      	beq.n	8005b1c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	e001      	b.n	8005b14 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005b14:	6979      	ldr	r1, [r7, #20]
 8005b16:	69f8      	ldr	r0, [r7, #28]
 8005b18:	f001 f928 	bl	8006d6c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005b1c:	69fb      	ldr	r3, [r7, #28]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3720      	adds	r7, #32
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d103      	bne.n	8005b48 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005b40:	f06f 0303 	mvn.w	r3, #3
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	e039      	b.n	8005bbc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b48:	f3ef 8305 	mrs	r3, IPSR
 8005b4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d022      	beq.n	8005b9a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005b5a:	f06f 0303 	mvn.w	r3, #3
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e02c      	b.n	8005bbc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005b66:	f107 0308 	add.w	r3, r7, #8
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	6938      	ldr	r0, [r7, #16]
 8005b70:	f000 ff2e 	bl	80069d0 <xQueueReceiveFromISR>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d003      	beq.n	8005b82 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005b7a:	f06f 0302 	mvn.w	r3, #2
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e01c      	b.n	8005bbc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d019      	beq.n	8005bbc <osSemaphoreAcquire+0x94>
 8005b88:	4b0f      	ldr	r3, [pc, #60]	@ (8005bc8 <osSemaphoreAcquire+0xa0>)
 8005b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	e010      	b.n	8005bbc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005b9a:	6839      	ldr	r1, [r7, #0]
 8005b9c:	6938      	ldr	r0, [r7, #16]
 8005b9e:	f000 fe07 	bl	80067b0 <xQueueSemaphoreTake>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d009      	beq.n	8005bbc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005bae:	f06f 0301 	mvn.w	r3, #1
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	e002      	b.n	8005bbc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005bb6:	f06f 0302 	mvn.w	r3, #2
 8005bba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005bbc:	697b      	ldr	r3, [r7, #20]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005be2:	f06f 0303 	mvn.w	r3, #3
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	e02c      	b.n	8005c44 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bea:	f3ef 8305 	mrs	r3, IPSR
 8005bee:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01a      	beq.n	8005c2c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005bfa:	f107 0308 	add.w	r3, r7, #8
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6938      	ldr	r0, [r7, #16]
 8005c02:	f000 fc63 	bl	80064cc <xQueueGiveFromISR>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d003      	beq.n	8005c14 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005c0c:	f06f 0302 	mvn.w	r3, #2
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	e017      	b.n	8005c44 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d014      	beq.n	8005c44 <osSemaphoreRelease+0x78>
 8005c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c50 <osSemaphoreRelease+0x84>)
 8005c1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	e00b      	b.n	8005c44 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2100      	movs	r1, #0
 8005c32:	6938      	ldr	r0, [r7, #16]
 8005c34:	f000 faaa 	bl	800618c <xQueueGenericSend>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d002      	beq.n	8005c44 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005c3e:	f06f 0302 	mvn.w	r3, #2
 8005c42:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005c44:	697b      	ldr	r3, [r7, #20]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	e000ed04 	.word	0xe000ed04

08005c54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a07      	ldr	r2, [pc, #28]	@ (8005c80 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	4a06      	ldr	r2, [pc, #24]	@ (8005c84 <vApplicationGetIdleTaskMemory+0x30>)
 8005c6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2280      	movs	r2, #128	@ 0x80
 8005c70:	601a      	str	r2, [r3, #0]
}
 8005c72:	bf00      	nop
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000420 	.word	0x20000420
 8005c84:	2000047c 	.word	0x2000047c

08005c88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4a07      	ldr	r2, [pc, #28]	@ (8005cb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	4a06      	ldr	r2, [pc, #24]	@ (8005cb8 <vApplicationGetTimerTaskMemory+0x30>)
 8005c9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ca6:	601a      	str	r2, [r3, #0]
}
 8005ca8:	bf00      	nop
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	2000067c 	.word	0x2000067c
 8005cb8:	200006d8 	.word	0x200006d8

08005cbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f103 0208 	add.w	r2, r3, #8
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f103 0208 	add.w	r2, r3, #8
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f103 0208 	add.w	r2, r3, #8
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	601a      	str	r2, [r3, #0]
}
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b085      	sub	sp, #20
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d103      	bne.n	8005d7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	e00c      	b.n	8005d98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3308      	adds	r3, #8
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e002      	b.n	8005d8c <vListInsert+0x2e>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d2f6      	bcs.n	8005d86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6892      	ldr	r2, [r2, #8]
 8005de6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6852      	ldr	r2, [r2, #4]
 8005df0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d103      	bne.n	8005e04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	1e5a      	subs	r2, r3, #1
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10b      	bne.n	8005e50 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e4a:	bf00      	nop
 8005e4c:	bf00      	nop
 8005e4e:	e7fd      	b.n	8005e4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e50:	f002 fc72 	bl	8008738 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e5c:	68f9      	ldr	r1, [r7, #12]
 8005e5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	441a      	add	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e80:	3b01      	subs	r3, #1
 8005e82:	68f9      	ldr	r1, [r7, #12]
 8005e84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e86:	fb01 f303 	mul.w	r3, r1, r3
 8005e8a:	441a      	add	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	22ff      	movs	r2, #255	@ 0xff
 8005e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	22ff      	movs	r2, #255	@ 0xff
 8005e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d114      	bne.n	8005ed0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d01a      	beq.n	8005ee4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3310      	adds	r3, #16
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 fc16 	bl	80076e4 <xTaskRemoveFromEventList>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d012      	beq.n	8005ee4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef4 <xQueueGenericReset+0xd0>)
 8005ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	e009      	b.n	8005ee4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3310      	adds	r3, #16
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fef1 	bl	8005cbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3324      	adds	r3, #36	@ 0x24
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff feec 	bl	8005cbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ee4:	f002 fc5a 	bl	800879c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ee8:	2301      	movs	r3, #1
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	e000ed04 	.word	0xe000ed04

08005ef8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08e      	sub	sp, #56	@ 0x38
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10b      	bne.n	8005f24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f1e:	bf00      	nop
 8005f20:	bf00      	nop
 8005f22:	e7fd      	b.n	8005f20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10b      	bne.n	8005f42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	e7fd      	b.n	8005f3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <xQueueGenericCreateStatic+0x56>
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <xQueueGenericCreateStatic+0x5a>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <xQueueGenericCreateStatic+0x5c>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10b      	bne.n	8005f70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	623b      	str	r3, [r7, #32]
}
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	e7fd      	b.n	8005f6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <xQueueGenericCreateStatic+0x84>
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <xQueueGenericCreateStatic+0x88>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e000      	b.n	8005f82 <xQueueGenericCreateStatic+0x8a>
 8005f80:	2300      	movs	r3, #0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10b      	bne.n	8005f9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	61fb      	str	r3, [r7, #28]
}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	e7fd      	b.n	8005f9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f9e:	2350      	movs	r3, #80	@ 0x50
 8005fa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b50      	cmp	r3, #80	@ 0x50
 8005fa6:	d00b      	beq.n	8005fc0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	61bb      	str	r3, [r7, #24]
}
 8005fba:	bf00      	nop
 8005fbc:	bf00      	nop
 8005fbe:	e7fd      	b.n	8005fbc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00d      	beq.n	8005fe8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fd4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	68b9      	ldr	r1, [r7, #8]
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f840 	bl	8006068 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3730      	adds	r7, #48	@ 0x30
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b08a      	sub	sp, #40	@ 0x28
 8005ff6:	af02      	add	r7, sp, #8
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10b      	bne.n	800601e <xQueueGenericCreate+0x2c>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	613b      	str	r3, [r7, #16]
}
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	e7fd      	b.n	800601a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	3350      	adds	r3, #80	@ 0x50
 800602c:	4618      	mov	r0, r3
 800602e:	f002 fca5 	bl	800897c <pvPortMalloc>
 8006032:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d011      	beq.n	800605e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	3350      	adds	r3, #80	@ 0x50
 8006042:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800604c:	79fa      	ldrb	r2, [r7, #7]
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	4613      	mov	r3, r2
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f805 	bl	8006068 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800605e:	69bb      	ldr	r3, [r7, #24]
	}
 8006060:	4618      	mov	r0, r3
 8006062:	3720      	adds	r7, #32
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	e002      	b.n	800608a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006096:	2101      	movs	r1, #1
 8006098:	69b8      	ldr	r0, [r7, #24]
 800609a:	f7ff fec3 	bl	8005e24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060a6:	bf00      	nop
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b08a      	sub	sp, #40	@ 0x28
 80060b2:	af02      	add	r7, sp, #8
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10b      	bne.n	80060d8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	61bb      	str	r3, [r7, #24]
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d90b      	bls.n	80060f8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	617b      	str	r3, [r7, #20]
}
 80060f2:	bf00      	nop
 80060f4:	bf00      	nop
 80060f6:	e7fd      	b.n	80060f4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80060f8:	2302      	movs	r3, #2
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	2100      	movs	r1, #0
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7ff fef8 	bl	8005ef8 <xQueueGenericCreateStatic>
 8006108:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006116:	69fb      	ldr	r3, [r7, #28]
	}
 8006118:	4618      	mov	r0, r3
 800611a:	3720      	adds	r7, #32
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10b      	bne.n	8006148 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	613b      	str	r3, [r7, #16]
}
 8006142:	bf00      	nop
 8006144:	bf00      	nop
 8006146:	e7fd      	b.n	8006144 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	429a      	cmp	r2, r3
 800614e:	d90b      	bls.n	8006168 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	60fb      	str	r3, [r7, #12]
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006168:	2202      	movs	r2, #2
 800616a:	2100      	movs	r1, #0
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff ff40 	bl	8005ff2 <xQueueGenericCreate>
 8006172:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006180:	697b      	ldr	r3, [r7, #20]
	}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08e      	sub	sp, #56	@ 0x38
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800619a:	2300      	movs	r3, #0
 800619c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10b      	bne.n	80061c0 <xQueueGenericSend+0x34>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	e7fd      	b.n	80061bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d103      	bne.n	80061ce <xQueueGenericSend+0x42>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <xQueueGenericSend+0x46>
 80061ce:	2301      	movs	r3, #1
 80061d0:	e000      	b.n	80061d4 <xQueueGenericSend+0x48>
 80061d2:	2300      	movs	r3, #0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10b      	bne.n	80061f0 <xQueueGenericSend+0x64>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061ea:	bf00      	nop
 80061ec:	bf00      	nop
 80061ee:	e7fd      	b.n	80061ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d103      	bne.n	80061fe <xQueueGenericSend+0x72>
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <xQueueGenericSend+0x76>
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <xQueueGenericSend+0x78>
 8006202:	2300      	movs	r3, #0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10b      	bne.n	8006220 <xQueueGenericSend+0x94>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	623b      	str	r3, [r7, #32]
}
 800621a:	bf00      	nop
 800621c:	bf00      	nop
 800621e:	e7fd      	b.n	800621c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006220:	f001 fc20 	bl	8007a64 <xTaskGetSchedulerState>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d102      	bne.n	8006230 <xQueueGenericSend+0xa4>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <xQueueGenericSend+0xa8>
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <xQueueGenericSend+0xaa>
 8006234:	2300      	movs	r3, #0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10b      	bne.n	8006252 <xQueueGenericSend+0xc6>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	61fb      	str	r3, [r7, #28]
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	e7fd      	b.n	800624e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006252:	f002 fa71 	bl	8008738 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625e:	429a      	cmp	r2, r3
 8006260:	d302      	bcc.n	8006268 <xQueueGenericSend+0xdc>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d129      	bne.n	80062bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800626e:	f000 fc6d 	bl	8006b4c <prvCopyDataToQueue>
 8006272:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006278:	2b00      	cmp	r3, #0
 800627a:	d010      	beq.n	800629e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800627c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627e:	3324      	adds	r3, #36	@ 0x24
 8006280:	4618      	mov	r0, r3
 8006282:	f001 fa2f 	bl	80076e4 <xTaskRemoveFromEventList>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d013      	beq.n	80062b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800628c:	4b3f      	ldr	r3, [pc, #252]	@ (800638c <xQueueGenericSend+0x200>)
 800628e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	e00a      	b.n	80062b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800629e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d007      	beq.n	80062b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062a4:	4b39      	ldr	r3, [pc, #228]	@ (800638c <xQueueGenericSend+0x200>)
 80062a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062b4:	f002 fa72 	bl	800879c <vPortExitCritical>
				return pdPASS;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e063      	b.n	8006384 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d103      	bne.n	80062ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062c2:	f002 fa6b 	bl	800879c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e05c      	b.n	8006384 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062d0:	f107 0314 	add.w	r3, r7, #20
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 fa69 	bl	80077ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062da:	2301      	movs	r3, #1
 80062dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062de:	f002 fa5d 	bl	800879c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062e2:	f000 ffd9 	bl	8007298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062e6:	f002 fa27 	bl	8008738 <vPortEnterCritical>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062f0:	b25b      	sxtb	r3, r3
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d103      	bne.n	8006300 <xQueueGenericSend+0x174>
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006306:	b25b      	sxtb	r3, r3
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d103      	bne.n	8006316 <xQueueGenericSend+0x18a>
 800630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006316:	f002 fa41 	bl	800879c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800631a:	1d3a      	adds	r2, r7, #4
 800631c:	f107 0314 	add.w	r3, r7, #20
 8006320:	4611      	mov	r1, r2
 8006322:	4618      	mov	r0, r3
 8006324:	f001 fa58 	bl	80077d8 <xTaskCheckForTimeOut>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d124      	bne.n	8006378 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800632e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006330:	f000 fd04 	bl	8006d3c <prvIsQueueFull>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d018      	beq.n	800636c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633c:	3310      	adds	r3, #16
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	4611      	mov	r1, r2
 8006342:	4618      	mov	r0, r3
 8006344:	f001 f97c 	bl	8007640 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006348:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800634a:	f000 fc8f 	bl	8006c6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800634e:	f000 ffb1 	bl	80072b4 <xTaskResumeAll>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	f47f af7c 	bne.w	8006252 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800635a:	4b0c      	ldr	r3, [pc, #48]	@ (800638c <xQueueGenericSend+0x200>)
 800635c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	e772      	b.n	8006252 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800636c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800636e:	f000 fc7d 	bl	8006c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006372:	f000 ff9f 	bl	80072b4 <xTaskResumeAll>
 8006376:	e76c      	b.n	8006252 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800637a:	f000 fc77 	bl	8006c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800637e:	f000 ff99 	bl	80072b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006382:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006384:	4618      	mov	r0, r3
 8006386:	3738      	adds	r7, #56	@ 0x38
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	e000ed04 	.word	0xe000ed04

08006390 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b090      	sub	sp, #64	@ 0x40
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80063a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10b      	bne.n	80063c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	e7fd      	b.n	80063bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <xQueueGenericSendFromISR+0x3e>
 80063c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <xQueueGenericSendFromISR+0x42>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <xQueueGenericSendFromISR+0x44>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10b      	bne.n	80063f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063ea:	bf00      	nop
 80063ec:	bf00      	nop
 80063ee:	e7fd      	b.n	80063ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d103      	bne.n	80063fe <xQueueGenericSendFromISR+0x6e>
 80063f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <xQueueGenericSendFromISR+0x72>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <xQueueGenericSendFromISR+0x74>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10b      	bne.n	8006420 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	623b      	str	r3, [r7, #32]
}
 800641a:	bf00      	nop
 800641c:	bf00      	nop
 800641e:	e7fd      	b.n	800641c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006420:	f002 fa6a 	bl	80088f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006424:	f3ef 8211 	mrs	r2, BASEPRI
 8006428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	61fa      	str	r2, [r7, #28]
 800643a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800643c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800643e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006448:	429a      	cmp	r2, r3
 800644a:	d302      	bcc.n	8006452 <xQueueGenericSendFromISR+0xc2>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d12f      	bne.n	80064b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006454:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006458:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800645c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006460:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006468:	f000 fb70 	bl	8006b4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800646c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006474:	d112      	bne.n	800649c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	d016      	beq.n	80064ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	3324      	adds	r3, #36	@ 0x24
 8006482:	4618      	mov	r0, r3
 8006484:	f001 f92e 	bl	80076e4 <xTaskRemoveFromEventList>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00e      	beq.n	80064ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00b      	beq.n	80064ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	e007      	b.n	80064ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800649c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80064a0:	3301      	adds	r3, #1
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	b25a      	sxtb	r2, r3
 80064a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80064ac:	2301      	movs	r3, #1
 80064ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80064b0:	e001      	b.n	80064b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3740      	adds	r7, #64	@ 0x40
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08e      	sub	sp, #56	@ 0x38
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10b      	bne.n	80064f8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	623b      	str	r3, [r7, #32]
}
 80064f2:	bf00      	nop
 80064f4:	bf00      	nop
 80064f6:	e7fd      	b.n	80064f4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	61fb      	str	r3, [r7, #28]
}
 8006512:	bf00      	nop
 8006514:	bf00      	nop
 8006516:	e7fd      	b.n	8006514 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d103      	bne.n	8006528 <xQueueGiveFromISR+0x5c>
 8006520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <xQueueGiveFromISR+0x60>
 8006528:	2301      	movs	r3, #1
 800652a:	e000      	b.n	800652e <xQueueGiveFromISR+0x62>
 800652c:	2300      	movs	r3, #0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10b      	bne.n	800654a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	61bb      	str	r3, [r7, #24]
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
 8006548:	e7fd      	b.n	8006546 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800654a:	f002 f9d5 	bl	80088f8 <vPortValidateInterruptPriority>
	__asm volatile
 800654e:	f3ef 8211 	mrs	r2, BASEPRI
 8006552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	617a      	str	r2, [r7, #20]
 8006564:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006566:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006568:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006576:	429a      	cmp	r2, r3
 8006578:	d22b      	bcs.n	80065d2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800658c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006594:	d112      	bne.n	80065bc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659a:	2b00      	cmp	r3, #0
 800659c:	d016      	beq.n	80065cc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a0:	3324      	adds	r3, #36	@ 0x24
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 f89e 	bl	80076e4 <xTaskRemoveFromEventList>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00e      	beq.n	80065cc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00b      	beq.n	80065cc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2201      	movs	r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	e007      	b.n	80065cc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80065bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065c0:	3301      	adds	r3, #1
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	b25a      	sxtb	r2, r3
 80065c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80065cc:	2301      	movs	r3, #1
 80065ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d0:	e001      	b.n	80065d6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f383 8811 	msr	BASEPRI, r3
}
 80065e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3738      	adds	r7, #56	@ 0x38
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08c      	sub	sp, #48	@ 0x30
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065f8:	2300      	movs	r3, #0
 80065fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10b      	bne.n	800661e <xQueueReceive+0x32>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	623b      	str	r3, [r7, #32]
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	e7fd      	b.n	800661a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d103      	bne.n	800662c <xQueueReceive+0x40>
 8006624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <xQueueReceive+0x44>
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <xQueueReceive+0x46>
 8006630:	2300      	movs	r3, #0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10b      	bne.n	800664e <xQueueReceive+0x62>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	61fb      	str	r3, [r7, #28]
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	e7fd      	b.n	800664a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800664e:	f001 fa09 	bl	8007a64 <xTaskGetSchedulerState>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d102      	bne.n	800665e <xQueueReceive+0x72>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <xQueueReceive+0x76>
 800665e:	2301      	movs	r3, #1
 8006660:	e000      	b.n	8006664 <xQueueReceive+0x78>
 8006662:	2300      	movs	r3, #0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10b      	bne.n	8006680 <xQueueReceive+0x94>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	61bb      	str	r3, [r7, #24]
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006680:	f002 f85a 	bl	8008738 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006688:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01f      	beq.n	80066d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006694:	f000 fac4 	bl	8006c20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669a:	1e5a      	subs	r2, r3, #1
 800669c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00f      	beq.n	80066c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066aa:	3310      	adds	r3, #16
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 f819 	bl	80076e4 <xTaskRemoveFromEventList>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066b8:	4b3c      	ldr	r3, [pc, #240]	@ (80067ac <xQueueReceive+0x1c0>)
 80066ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066c8:	f002 f868 	bl	800879c <vPortExitCritical>
				return pdPASS;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e069      	b.n	80067a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066d6:	f002 f861 	bl	800879c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066da:	2300      	movs	r3, #0
 80066dc:	e062      	b.n	80067a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d106      	bne.n	80066f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066e4:	f107 0310 	add.w	r3, r7, #16
 80066e8:	4618      	mov	r0, r3
 80066ea:	f001 f85f 	bl	80077ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066ee:	2301      	movs	r3, #1
 80066f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066f2:	f002 f853 	bl	800879c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066f6:	f000 fdcf 	bl	8007298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066fa:	f002 f81d 	bl	8008738 <vPortEnterCritical>
 80066fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006700:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006704:	b25b      	sxtb	r3, r3
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d103      	bne.n	8006714 <xQueueReceive+0x128>
 800670c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006716:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800671a:	b25b      	sxtb	r3, r3
 800671c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006720:	d103      	bne.n	800672a <xQueueReceive+0x13e>
 8006722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800672a:	f002 f837 	bl	800879c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800672e:	1d3a      	adds	r2, r7, #4
 8006730:	f107 0310 	add.w	r3, r7, #16
 8006734:	4611      	mov	r1, r2
 8006736:	4618      	mov	r0, r3
 8006738:	f001 f84e 	bl	80077d8 <xTaskCheckForTimeOut>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d123      	bne.n	800678a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006744:	f000 fae4 	bl	8006d10 <prvIsQueueEmpty>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d017      	beq.n	800677e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800674e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006750:	3324      	adds	r3, #36	@ 0x24
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	4611      	mov	r1, r2
 8006756:	4618      	mov	r0, r3
 8006758:	f000 ff72 	bl	8007640 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800675c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800675e:	f000 fa85 	bl	8006c6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006762:	f000 fda7 	bl	80072b4 <xTaskResumeAll>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d189      	bne.n	8006680 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800676c:	4b0f      	ldr	r3, [pc, #60]	@ (80067ac <xQueueReceive+0x1c0>)
 800676e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	e780      	b.n	8006680 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800677e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006780:	f000 fa74 	bl	8006c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006784:	f000 fd96 	bl	80072b4 <xTaskResumeAll>
 8006788:	e77a      	b.n	8006680 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800678a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800678c:	f000 fa6e 	bl	8006c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006790:	f000 fd90 	bl	80072b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006794:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006796:	f000 fabb 	bl	8006d10 <prvIsQueueEmpty>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	f43f af6f 	beq.w	8006680 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3730      	adds	r7, #48	@ 0x30
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	e000ed04 	.word	0xe000ed04

080067b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08e      	sub	sp, #56	@ 0x38
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80067ba:	2300      	movs	r3, #0
 80067bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80067c2:	2300      	movs	r3, #0
 80067c4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10b      	bne.n	80067e4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	623b      	str	r3, [r7, #32]
}
 80067de:	bf00      	nop
 80067e0:	bf00      	nop
 80067e2:	e7fd      	b.n	80067e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80067e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00b      	beq.n	8006804 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	61fb      	str	r3, [r7, #28]
}
 80067fe:	bf00      	nop
 8006800:	bf00      	nop
 8006802:	e7fd      	b.n	8006800 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006804:	f001 f92e 	bl	8007a64 <xTaskGetSchedulerState>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d102      	bne.n	8006814 <xQueueSemaphoreTake+0x64>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <xQueueSemaphoreTake+0x68>
 8006814:	2301      	movs	r3, #1
 8006816:	e000      	b.n	800681a <xQueueSemaphoreTake+0x6a>
 8006818:	2300      	movs	r3, #0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10b      	bne.n	8006836 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	61bb      	str	r3, [r7, #24]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006836:	f001 ff7f 	bl	8008738 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800683a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006842:	2b00      	cmp	r3, #0
 8006844:	d024      	beq.n	8006890 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006848:	1e5a      	subs	r2, r3, #1
 800684a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800684e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d104      	bne.n	8006860 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006856:	f001 fa7f 	bl	8007d58 <pvTaskIncrementMutexHeldCount>
 800685a:	4602      	mov	r2, r0
 800685c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00f      	beq.n	8006888 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686a:	3310      	adds	r3, #16
 800686c:	4618      	mov	r0, r3
 800686e:	f000 ff39 	bl	80076e4 <xTaskRemoveFromEventList>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006878:	4b54      	ldr	r3, [pc, #336]	@ (80069cc <xQueueSemaphoreTake+0x21c>)
 800687a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006888:	f001 ff88 	bl	800879c <vPortExitCritical>
				return pdPASS;
 800688c:	2301      	movs	r3, #1
 800688e:	e098      	b.n	80069c2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d112      	bne.n	80068bc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00b      	beq.n	80068b4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	617b      	str	r3, [r7, #20]
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	e7fd      	b.n	80068b0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80068b4:	f001 ff72 	bl	800879c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e082      	b.n	80069c2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068c2:	f107 030c 	add.w	r3, r7, #12
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 ff70 	bl	80077ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068cc:	2301      	movs	r3, #1
 80068ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068d0:	f001 ff64 	bl	800879c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068d4:	f000 fce0 	bl	8007298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068d8:	f001 ff2e 	bl	8008738 <vPortEnterCritical>
 80068dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068e2:	b25b      	sxtb	r3, r3
 80068e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e8:	d103      	bne.n	80068f2 <xQueueSemaphoreTake+0x142>
 80068ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068f8:	b25b      	sxtb	r3, r3
 80068fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fe:	d103      	bne.n	8006908 <xQueueSemaphoreTake+0x158>
 8006900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006908:	f001 ff48 	bl	800879c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800690c:	463a      	mov	r2, r7
 800690e:	f107 030c 	add.w	r3, r7, #12
 8006912:	4611      	mov	r1, r2
 8006914:	4618      	mov	r0, r3
 8006916:	f000 ff5f 	bl	80077d8 <xTaskCheckForTimeOut>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d132      	bne.n	8006986 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006920:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006922:	f000 f9f5 	bl	8006d10 <prvIsQueueEmpty>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d026      	beq.n	800697a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800692c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d109      	bne.n	8006948 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006934:	f001 ff00 	bl	8008738 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	4618      	mov	r0, r3
 800693e:	f001 f8af 	bl	8007aa0 <xTaskPriorityInherit>
 8006942:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006944:	f001 ff2a 	bl	800879c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694a:	3324      	adds	r3, #36	@ 0x24
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	4611      	mov	r1, r2
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fe75 	bl	8007640 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006956:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006958:	f000 f988 	bl	8006c6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800695c:	f000 fcaa 	bl	80072b4 <xTaskResumeAll>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	f47f af67 	bne.w	8006836 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006968:	4b18      	ldr	r3, [pc, #96]	@ (80069cc <xQueueSemaphoreTake+0x21c>)
 800696a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	e75d      	b.n	8006836 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800697a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800697c:	f000 f976 	bl	8006c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006980:	f000 fc98 	bl	80072b4 <xTaskResumeAll>
 8006984:	e757      	b.n	8006836 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006986:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006988:	f000 f970 	bl	8006c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800698c:	f000 fc92 	bl	80072b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006990:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006992:	f000 f9bd 	bl	8006d10 <prvIsQueueEmpty>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	f43f af4c 	beq.w	8006836 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800699e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00d      	beq.n	80069c0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80069a4:	f001 fec8 	bl	8008738 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80069a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80069aa:	f000 f8b7 	bl	8006b1c <prvGetDisinheritPriorityAfterTimeout>
 80069ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80069b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 f94a 	bl	8007c50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80069bc:	f001 feee 	bl	800879c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3738      	adds	r7, #56	@ 0x38
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	e000ed04 	.word	0xe000ed04

080069d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08e      	sub	sp, #56	@ 0x38
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10b      	bne.n	80069fe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	623b      	str	r3, [r7, #32]
}
 80069f8:	bf00      	nop
 80069fa:	bf00      	nop
 80069fc:	e7fd      	b.n	80069fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d103      	bne.n	8006a0c <xQueueReceiveFromISR+0x3c>
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <xQueueReceiveFromISR+0x40>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <xQueueReceiveFromISR+0x42>
 8006a10:	2300      	movs	r3, #0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10b      	bne.n	8006a2e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	61fb      	str	r3, [r7, #28]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a2e:	f001 ff63 	bl	80088f8 <vPortValidateInterruptPriority>
	__asm volatile
 8006a32:	f3ef 8211 	mrs	r2, BASEPRI
 8006a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	61ba      	str	r2, [r7, #24]
 8006a48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006a4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a52:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d02f      	beq.n	8006aba <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a68:	f000 f8da 	bl	8006c20 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6e:	1e5a      	subs	r2, r3, #1
 8006a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a72:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7c:	d112      	bne.n	8006aa4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d016      	beq.n	8006ab4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a88:	3310      	adds	r3, #16
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fe2a 	bl	80076e4 <xTaskRemoveFromEventList>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00e      	beq.n	8006ab4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00b      	beq.n	8006ab4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	e007      	b.n	8006ab4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	b25a      	sxtb	r2, r3
 8006aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab8:	e001      	b.n	8006abe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f383 8811 	msr	BASEPRI, r3
}
 8006ac8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3738      	adds	r7, #56	@ 0x38
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <vQueueDelete+0x2a>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	60bb      	str	r3, [r7, #8]
}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	e7fd      	b.n	8006afa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 f95e 	bl	8006dc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d102      	bne.n	8006b14 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f002 f802 	bl	8008b18 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006b14:	bf00      	nop
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d006      	beq.n	8006b3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e001      	b.n	8006b3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
	}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10d      	bne.n	8006b86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d14d      	bne.n	8006c0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fffa 	bl	8007b70 <xTaskPriorityDisinherit>
 8006b7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	609a      	str	r2, [r3, #8]
 8006b84:	e043      	b.n	8006c0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d119      	bne.n	8006bc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6858      	ldr	r0, [r3, #4]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b94:	461a      	mov	r2, r3
 8006b96:	68b9      	ldr	r1, [r7, #8]
 8006b98:	f002 fa79 	bl	800908e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d32b      	bcc.n	8006c0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	605a      	str	r2, [r3, #4]
 8006bbe:	e026      	b.n	8006c0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	68d8      	ldr	r0, [r3, #12]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc8:	461a      	mov	r2, r3
 8006bca:	68b9      	ldr	r1, [r7, #8]
 8006bcc:	f002 fa5f 	bl	800908e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd8:	425b      	negs	r3, r3
 8006bda:	441a      	add	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d207      	bcs.n	8006bfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf4:	425b      	negs	r3, r3
 8006bf6:	441a      	add	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d105      	bne.n	8006c0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006c16:	697b      	ldr	r3, [r7, #20]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d018      	beq.n	8006c64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3a:	441a      	add	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d303      	bcc.n	8006c54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68d9      	ldr	r1, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6838      	ldr	r0, [r7, #0]
 8006c60:	f002 fa15 	bl	800908e <memcpy>
	}
}
 8006c64:	bf00      	nop
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c74:	f001 fd60 	bl	8008738 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c80:	e011      	b.n	8006ca6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d012      	beq.n	8006cb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	3324      	adds	r3, #36	@ 0x24
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fd28 	bl	80076e4 <xTaskRemoveFromEventList>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c9a:	f000 fe01 	bl	80078a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	dce9      	bgt.n	8006c82 <prvUnlockQueue+0x16>
 8006cae:	e000      	b.n	8006cb2 <prvUnlockQueue+0x46>
					break;
 8006cb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	22ff      	movs	r2, #255	@ 0xff
 8006cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006cba:	f001 fd6f 	bl	800879c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006cbe:	f001 fd3b 	bl	8008738 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cca:	e011      	b.n	8006cf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d012      	beq.n	8006cfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3310      	adds	r3, #16
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fd03 	bl	80076e4 <xTaskRemoveFromEventList>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ce4:	f000 fddc 	bl	80078a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	dce9      	bgt.n	8006ccc <prvUnlockQueue+0x60>
 8006cf8:	e000      	b.n	8006cfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	22ff      	movs	r2, #255	@ 0xff
 8006d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006d04:	f001 fd4a 	bl	800879c <vPortExitCritical>
}
 8006d08:	bf00      	nop
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d18:	f001 fd0e 	bl	8008738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d24:	2301      	movs	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	e001      	b.n	8006d2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d2e:	f001 fd35 	bl	800879c <vPortExitCritical>

	return xReturn;
 8006d32:	68fb      	ldr	r3, [r7, #12]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d44:	f001 fcf8 	bl	8008738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d102      	bne.n	8006d5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d54:	2301      	movs	r3, #1
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	e001      	b.n	8006d5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d5e:	f001 fd1d 	bl	800879c <vPortExitCritical>

	return xReturn;
 8006d62:	68fb      	ldr	r3, [r7, #12]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	e014      	b.n	8006da6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d7c:	4a0f      	ldr	r2, [pc, #60]	@ (8006dbc <vQueueAddToRegistry+0x50>)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10b      	bne.n	8006da0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d88:	490c      	ldr	r1, [pc, #48]	@ (8006dbc <vQueueAddToRegistry+0x50>)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d92:	4a0a      	ldr	r2, [pc, #40]	@ (8006dbc <vQueueAddToRegistry+0x50>)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	4413      	add	r3, r2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d9e:	e006      	b.n	8006dae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3301      	adds	r3, #1
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b07      	cmp	r3, #7
 8006daa:	d9e7      	bls.n	8006d7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006dac:	bf00      	nop
 8006dae:	bf00      	nop
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	20000ad8 	.word	0x20000ad8

08006dc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	e016      	b.n	8006dfc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006dce:	4a10      	ldr	r2, [pc, #64]	@ (8006e10 <vQueueUnregisterQueue+0x50>)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	4413      	add	r3, r2
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d10b      	bne.n	8006df6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006dde:	4a0c      	ldr	r2, [pc, #48]	@ (8006e10 <vQueueUnregisterQueue+0x50>)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2100      	movs	r1, #0
 8006de4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006de8:	4a09      	ldr	r2, [pc, #36]	@ (8006e10 <vQueueUnregisterQueue+0x50>)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	4413      	add	r3, r2
 8006df0:	2200      	movs	r2, #0
 8006df2:	605a      	str	r2, [r3, #4]
				break;
 8006df4:	e006      	b.n	8006e04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b07      	cmp	r3, #7
 8006e00:	d9e5      	bls.n	8006dce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006e02:	bf00      	nop
 8006e04:	bf00      	nop
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	20000ad8 	.word	0x20000ad8

08006e14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e24:	f001 fc88 	bl	8008738 <vPortEnterCritical>
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e2e:	b25b      	sxtb	r3, r3
 8006e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e34:	d103      	bne.n	8006e3e <vQueueWaitForMessageRestricted+0x2a>
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e44:	b25b      	sxtb	r3, r3
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	d103      	bne.n	8006e54 <vQueueWaitForMessageRestricted+0x40>
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e54:	f001 fca2 	bl	800879c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d106      	bne.n	8006e6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	3324      	adds	r3, #36	@ 0x24
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	68b9      	ldr	r1, [r7, #8]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 fc0f 	bl	800768c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e6e:	6978      	ldr	r0, [r7, #20]
 8006e70:	f7ff fefc 	bl	8006c6c <prvUnlockQueue>
	}
 8006e74:	bf00      	nop
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08e      	sub	sp, #56	@ 0x38
 8006e80:	af04      	add	r7, sp, #16
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10b      	bne.n	8006ea8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	623b      	str	r3, [r7, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	e7fd      	b.n	8006ea4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10b      	bne.n	8006ec6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	61fb      	str	r3, [r7, #28]
}
 8006ec0:	bf00      	nop
 8006ec2:	bf00      	nop
 8006ec4:	e7fd      	b.n	8006ec2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ec6:	235c      	movs	r3, #92	@ 0x5c
 8006ec8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ece:	d00b      	beq.n	8006ee8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	61bb      	str	r3, [r7, #24]
}
 8006ee2:	bf00      	nop
 8006ee4:	bf00      	nop
 8006ee6:	e7fd      	b.n	8006ee4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ee8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01e      	beq.n	8006f2e <xTaskCreateStatic+0xb2>
 8006ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d01b      	beq.n	8006f2e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006efe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f08:	2300      	movs	r3, #0
 8006f0a:	9303      	str	r3, [sp, #12]
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	9302      	str	r3, [sp, #8]
 8006f10:	f107 0314 	add.w	r3, r7, #20
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f850 	bl	8006fc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f28:	f000 f8de 	bl	80070e8 <prvAddNewTaskToReadyList>
 8006f2c:	e001      	b.n	8006f32 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f32:	697b      	ldr	r3, [r7, #20]
	}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3728      	adds	r7, #40	@ 0x28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08c      	sub	sp, #48	@ 0x30
 8006f40:	af04      	add	r7, sp, #16
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f4c:	88fb      	ldrh	r3, [r7, #6]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f001 fd13 	bl	800897c <pvPortMalloc>
 8006f56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00e      	beq.n	8006f7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f5e:	205c      	movs	r0, #92	@ 0x5c
 8006f60:	f001 fd0c 	bl	800897c <pvPortMalloc>
 8006f64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f72:	e005      	b.n	8006f80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f74:	6978      	ldr	r0, [r7, #20]
 8006f76:	f001 fdcf 	bl	8008b18 <vPortFree>
 8006f7a:	e001      	b.n	8006f80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d017      	beq.n	8006fb6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f8e:	88fa      	ldrh	r2, [r7, #6]
 8006f90:	2300      	movs	r3, #0
 8006f92:	9303      	str	r3, [sp, #12]
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	9302      	str	r3, [sp, #8]
 8006f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9a:	9301      	str	r3, [sp, #4]
 8006f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f80e 	bl	8006fc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006faa:	69f8      	ldr	r0, [r7, #28]
 8006fac:	f000 f89c 	bl	80070e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	61bb      	str	r3, [r7, #24]
 8006fb4:	e002      	b.n	8006fbc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fbc:	69bb      	ldr	r3, [r7, #24]
	}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3720      	adds	r7, #32
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b088      	sub	sp, #32
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	60f8      	str	r0, [r7, #12]
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	607a      	str	r2, [r7, #4]
 8006fd2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	461a      	mov	r2, r3
 8006fde:	21a5      	movs	r1, #165	@ 0xa5
 8006fe0:	f001 ffd9 	bl	8008f96 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	f023 0307 	bic.w	r3, r3, #7
 8006ffc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00b      	beq.n	8007020 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	617b      	str	r3, [r7, #20]
}
 800701a:	bf00      	nop
 800701c:	bf00      	nop
 800701e:	e7fd      	b.n	800701c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01f      	beq.n	8007066 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
 800702a:	e012      	b.n	8007052 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	7819      	ldrb	r1, [r3, #0]
 8007034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	3334      	adds	r3, #52	@ 0x34
 800703c:	460a      	mov	r2, r1
 800703e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	4413      	add	r3, r2
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	3301      	adds	r3, #1
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b0f      	cmp	r3, #15
 8007056:	d9e9      	bls.n	800702c <prvInitialiseNewTask+0x66>
 8007058:	e000      	b.n	800705c <prvInitialiseNewTask+0x96>
			{
				break;
 800705a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007064:	e003      	b.n	800706e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007070:	2b37      	cmp	r3, #55	@ 0x37
 8007072:	d901      	bls.n	8007078 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007074:	2337      	movs	r3, #55	@ 0x37
 8007076:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800707c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007082:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	2200      	movs	r2, #0
 8007088:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708c:	3304      	adds	r3, #4
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe fe34 	bl	8005cfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007096:	3318      	adds	r3, #24
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe fe2f 	bl	8005cfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80070aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070b2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	2200      	movs	r2, #0
 80070b8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	68f9      	ldr	r1, [r7, #12]
 80070c6:	69b8      	ldr	r0, [r7, #24]
 80070c8:	f001 fa08 	bl	80084dc <pxPortInitialiseStack>
 80070cc:	4602      	mov	r2, r0
 80070ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070de:	bf00      	nop
 80070e0:	3720      	adds	r7, #32
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070f0:	f001 fb22 	bl	8008738 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070f4:	4b2d      	ldr	r3, [pc, #180]	@ (80071ac <prvAddNewTaskToReadyList+0xc4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3301      	adds	r3, #1
 80070fa:	4a2c      	ldr	r2, [pc, #176]	@ (80071ac <prvAddNewTaskToReadyList+0xc4>)
 80070fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070fe:	4b2c      	ldr	r3, [pc, #176]	@ (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007106:	4a2a      	ldr	r2, [pc, #168]	@ (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800710c:	4b27      	ldr	r3, [pc, #156]	@ (80071ac <prvAddNewTaskToReadyList+0xc4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d110      	bne.n	8007136 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007114:	f000 fbe8 	bl	80078e8 <prvInitialiseTaskLists>
 8007118:	e00d      	b.n	8007136 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800711a:	4b26      	ldr	r3, [pc, #152]	@ (80071b4 <prvAddNewTaskToReadyList+0xcc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007122:	4b23      	ldr	r3, [pc, #140]	@ (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	429a      	cmp	r2, r3
 800712e:	d802      	bhi.n	8007136 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007130:	4a1f      	ldr	r2, [pc, #124]	@ (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007136:	4b20      	ldr	r3, [pc, #128]	@ (80071b8 <prvAddNewTaskToReadyList+0xd0>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3301      	adds	r3, #1
 800713c:	4a1e      	ldr	r2, [pc, #120]	@ (80071b8 <prvAddNewTaskToReadyList+0xd0>)
 800713e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007140:	4b1d      	ldr	r3, [pc, #116]	@ (80071b8 <prvAddNewTaskToReadyList+0xd0>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714c:	4b1b      	ldr	r3, [pc, #108]	@ (80071bc <prvAddNewTaskToReadyList+0xd4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d903      	bls.n	800715c <prvAddNewTaskToReadyList+0x74>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007158:	4a18      	ldr	r2, [pc, #96]	@ (80071bc <prvAddNewTaskToReadyList+0xd4>)
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007160:	4613      	mov	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4a15      	ldr	r2, [pc, #84]	@ (80071c0 <prvAddNewTaskToReadyList+0xd8>)
 800716a:	441a      	add	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3304      	adds	r3, #4
 8007170:	4619      	mov	r1, r3
 8007172:	4610      	mov	r0, r2
 8007174:	f7fe fdcf 	bl	8005d16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007178:	f001 fb10 	bl	800879c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800717c:	4b0d      	ldr	r3, [pc, #52]	@ (80071b4 <prvAddNewTaskToReadyList+0xcc>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00e      	beq.n	80071a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007184:	4b0a      	ldr	r3, [pc, #40]	@ (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718e:	429a      	cmp	r2, r3
 8007190:	d207      	bcs.n	80071a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007192:	4b0c      	ldr	r3, [pc, #48]	@ (80071c4 <prvAddNewTaskToReadyList+0xdc>)
 8007194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000fec 	.word	0x20000fec
 80071b0:	20000b18 	.word	0x20000b18
 80071b4:	20000ff8 	.word	0x20000ff8
 80071b8:	20001008 	.word	0x20001008
 80071bc:	20000ff4 	.word	0x20000ff4
 80071c0:	20000b1c 	.word	0x20000b1c
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	@ 0x28
 80071cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071d6:	463a      	mov	r2, r7
 80071d8:	1d39      	adds	r1, r7, #4
 80071da:	f107 0308 	add.w	r3, r7, #8
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fd38 	bl	8005c54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	9202      	str	r2, [sp, #8]
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	2300      	movs	r3, #0
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	2300      	movs	r3, #0
 80071f4:	460a      	mov	r2, r1
 80071f6:	4922      	ldr	r1, [pc, #136]	@ (8007280 <vTaskStartScheduler+0xb8>)
 80071f8:	4822      	ldr	r0, [pc, #136]	@ (8007284 <vTaskStartScheduler+0xbc>)
 80071fa:	f7ff fe3f 	bl	8006e7c <xTaskCreateStatic>
 80071fe:	4603      	mov	r3, r0
 8007200:	4a21      	ldr	r2, [pc, #132]	@ (8007288 <vTaskStartScheduler+0xc0>)
 8007202:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007204:	4b20      	ldr	r3, [pc, #128]	@ (8007288 <vTaskStartScheduler+0xc0>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800720c:	2301      	movs	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	e001      	b.n	8007216 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d102      	bne.n	8007222 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800721c:	f000 fe04 	bl	8007e28 <xTimerCreateTimerTask>
 8007220:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d116      	bne.n	8007256 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	613b      	str	r3, [r7, #16]
}
 800723a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800723c:	4b13      	ldr	r3, [pc, #76]	@ (800728c <vTaskStartScheduler+0xc4>)
 800723e:	f04f 32ff 	mov.w	r2, #4294967295
 8007242:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007244:	4b12      	ldr	r3, [pc, #72]	@ (8007290 <vTaskStartScheduler+0xc8>)
 8007246:	2201      	movs	r2, #1
 8007248:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800724a:	4b12      	ldr	r3, [pc, #72]	@ (8007294 <vTaskStartScheduler+0xcc>)
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007250:	f001 f9ce 	bl	80085f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007254:	e00f      	b.n	8007276 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725c:	d10b      	bne.n	8007276 <vTaskStartScheduler+0xae>
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	60fb      	str	r3, [r7, #12]
}
 8007270:	bf00      	nop
 8007272:	bf00      	nop
 8007274:	e7fd      	b.n	8007272 <vTaskStartScheduler+0xaa>
}
 8007276:	bf00      	nop
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	08009c84 	.word	0x08009c84
 8007284:	080078b9 	.word	0x080078b9
 8007288:	20001010 	.word	0x20001010
 800728c:	2000100c 	.word	0x2000100c
 8007290:	20000ff8 	.word	0x20000ff8
 8007294:	20000ff0 	.word	0x20000ff0

08007298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800729c:	4b04      	ldr	r3, [pc, #16]	@ (80072b0 <vTaskSuspendAll+0x18>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3301      	adds	r3, #1
 80072a2:	4a03      	ldr	r2, [pc, #12]	@ (80072b0 <vTaskSuspendAll+0x18>)
 80072a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80072a6:	bf00      	nop
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	20001014 	.word	0x20001014

080072b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072c2:	4b42      	ldr	r3, [pc, #264]	@ (80073cc <xTaskResumeAll+0x118>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10b      	bne.n	80072e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	603b      	str	r3, [r7, #0]
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	e7fd      	b.n	80072de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072e2:	f001 fa29 	bl	8008738 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072e6:	4b39      	ldr	r3, [pc, #228]	@ (80073cc <xTaskResumeAll+0x118>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	4a37      	ldr	r2, [pc, #220]	@ (80073cc <xTaskResumeAll+0x118>)
 80072ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072f0:	4b36      	ldr	r3, [pc, #216]	@ (80073cc <xTaskResumeAll+0x118>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d162      	bne.n	80073be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072f8:	4b35      	ldr	r3, [pc, #212]	@ (80073d0 <xTaskResumeAll+0x11c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d05e      	beq.n	80073be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007300:	e02f      	b.n	8007362 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007302:	4b34      	ldr	r3, [pc, #208]	@ (80073d4 <xTaskResumeAll+0x120>)
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3318      	adds	r3, #24
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fd5e 	bl	8005dd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3304      	adds	r3, #4
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe fd59 	bl	8005dd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007322:	4b2d      	ldr	r3, [pc, #180]	@ (80073d8 <xTaskResumeAll+0x124>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	429a      	cmp	r2, r3
 8007328:	d903      	bls.n	8007332 <xTaskResumeAll+0x7e>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732e:	4a2a      	ldr	r2, [pc, #168]	@ (80073d8 <xTaskResumeAll+0x124>)
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007336:	4613      	mov	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4a27      	ldr	r2, [pc, #156]	@ (80073dc <xTaskResumeAll+0x128>)
 8007340:	441a      	add	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3304      	adds	r3, #4
 8007346:	4619      	mov	r1, r3
 8007348:	4610      	mov	r0, r2
 800734a:	f7fe fce4 	bl	8005d16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007352:	4b23      	ldr	r3, [pc, #140]	@ (80073e0 <xTaskResumeAll+0x12c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007358:	429a      	cmp	r2, r3
 800735a:	d302      	bcc.n	8007362 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800735c:	4b21      	ldr	r3, [pc, #132]	@ (80073e4 <xTaskResumeAll+0x130>)
 800735e:	2201      	movs	r2, #1
 8007360:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007362:	4b1c      	ldr	r3, [pc, #112]	@ (80073d4 <xTaskResumeAll+0x120>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1cb      	bne.n	8007302 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007370:	f000 fb58 	bl	8007a24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007374:	4b1c      	ldr	r3, [pc, #112]	@ (80073e8 <xTaskResumeAll+0x134>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d010      	beq.n	80073a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007380:	f000 f846 	bl	8007410 <xTaskIncrementTick>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800738a:	4b16      	ldr	r3, [pc, #88]	@ (80073e4 <xTaskResumeAll+0x130>)
 800738c:	2201      	movs	r2, #1
 800738e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3b01      	subs	r3, #1
 8007394:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1f1      	bne.n	8007380 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800739c:	4b12      	ldr	r3, [pc, #72]	@ (80073e8 <xTaskResumeAll+0x134>)
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073a2:	4b10      	ldr	r3, [pc, #64]	@ (80073e4 <xTaskResumeAll+0x130>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073aa:	2301      	movs	r3, #1
 80073ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073ae:	4b0f      	ldr	r3, [pc, #60]	@ (80073ec <xTaskResumeAll+0x138>)
 80073b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073be:	f001 f9ed 	bl	800879c <vPortExitCritical>

	return xAlreadyYielded;
 80073c2:	68bb      	ldr	r3, [r7, #8]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	20001014 	.word	0x20001014
 80073d0:	20000fec 	.word	0x20000fec
 80073d4:	20000fac 	.word	0x20000fac
 80073d8:	20000ff4 	.word	0x20000ff4
 80073dc:	20000b1c 	.word	0x20000b1c
 80073e0:	20000b18 	.word	0x20000b18
 80073e4:	20001000 	.word	0x20001000
 80073e8:	20000ffc 	.word	0x20000ffc
 80073ec:	e000ed04 	.word	0xe000ed04

080073f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80073f6:	4b05      	ldr	r3, [pc, #20]	@ (800740c <xTaskGetTickCount+0x1c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80073fc:	687b      	ldr	r3, [r7, #4]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	20000ff0 	.word	0x20000ff0

08007410 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800741a:	4b4f      	ldr	r3, [pc, #316]	@ (8007558 <xTaskIncrementTick+0x148>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f040 8090 	bne.w	8007544 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007424:	4b4d      	ldr	r3, [pc, #308]	@ (800755c <xTaskIncrementTick+0x14c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3301      	adds	r3, #1
 800742a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800742c:	4a4b      	ldr	r2, [pc, #300]	@ (800755c <xTaskIncrementTick+0x14c>)
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d121      	bne.n	800747c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007438:	4b49      	ldr	r3, [pc, #292]	@ (8007560 <xTaskIncrementTick+0x150>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00b      	beq.n	800745a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	603b      	str	r3, [r7, #0]
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop
 8007458:	e7fd      	b.n	8007456 <xTaskIncrementTick+0x46>
 800745a:	4b41      	ldr	r3, [pc, #260]	@ (8007560 <xTaskIncrementTick+0x150>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	4b40      	ldr	r3, [pc, #256]	@ (8007564 <xTaskIncrementTick+0x154>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a3e      	ldr	r2, [pc, #248]	@ (8007560 <xTaskIncrementTick+0x150>)
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	4a3e      	ldr	r2, [pc, #248]	@ (8007564 <xTaskIncrementTick+0x154>)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	4b3e      	ldr	r3, [pc, #248]	@ (8007568 <xTaskIncrementTick+0x158>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3301      	adds	r3, #1
 8007474:	4a3c      	ldr	r2, [pc, #240]	@ (8007568 <xTaskIncrementTick+0x158>)
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	f000 fad4 	bl	8007a24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800747c:	4b3b      	ldr	r3, [pc, #236]	@ (800756c <xTaskIncrementTick+0x15c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	429a      	cmp	r2, r3
 8007484:	d349      	bcc.n	800751a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007486:	4b36      	ldr	r3, [pc, #216]	@ (8007560 <xTaskIncrementTick+0x150>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d104      	bne.n	800749a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007490:	4b36      	ldr	r3, [pc, #216]	@ (800756c <xTaskIncrementTick+0x15c>)
 8007492:	f04f 32ff 	mov.w	r2, #4294967295
 8007496:	601a      	str	r2, [r3, #0]
					break;
 8007498:	e03f      	b.n	800751a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800749a:	4b31      	ldr	r3, [pc, #196]	@ (8007560 <xTaskIncrementTick+0x150>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d203      	bcs.n	80074ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80074b2:	4a2e      	ldr	r2, [pc, #184]	@ (800756c <xTaskIncrementTick+0x15c>)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80074b8:	e02f      	b.n	800751a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	3304      	adds	r3, #4
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fe fc86 	bl	8005dd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d004      	beq.n	80074d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	3318      	adds	r3, #24
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe fc7d 	bl	8005dd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074da:	4b25      	ldr	r3, [pc, #148]	@ (8007570 <xTaskIncrementTick+0x160>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d903      	bls.n	80074ea <xTaskIncrementTick+0xda>
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e6:	4a22      	ldr	r2, [pc, #136]	@ (8007570 <xTaskIncrementTick+0x160>)
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007574 <xTaskIncrementTick+0x164>)
 80074f8:	441a      	add	r2, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	3304      	adds	r3, #4
 80074fe:	4619      	mov	r1, r3
 8007500:	4610      	mov	r0, r2
 8007502:	f7fe fc08 	bl	8005d16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800750a:	4b1b      	ldr	r3, [pc, #108]	@ (8007578 <xTaskIncrementTick+0x168>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007510:	429a      	cmp	r2, r3
 8007512:	d3b8      	bcc.n	8007486 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007514:	2301      	movs	r3, #1
 8007516:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007518:	e7b5      	b.n	8007486 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800751a:	4b17      	ldr	r3, [pc, #92]	@ (8007578 <xTaskIncrementTick+0x168>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007520:	4914      	ldr	r1, [pc, #80]	@ (8007574 <xTaskIncrementTick+0x164>)
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d901      	bls.n	8007536 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007532:	2301      	movs	r3, #1
 8007534:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007536:	4b11      	ldr	r3, [pc, #68]	@ (800757c <xTaskIncrementTick+0x16c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d007      	beq.n	800754e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800753e:	2301      	movs	r3, #1
 8007540:	617b      	str	r3, [r7, #20]
 8007542:	e004      	b.n	800754e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007544:	4b0e      	ldr	r3, [pc, #56]	@ (8007580 <xTaskIncrementTick+0x170>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3301      	adds	r3, #1
 800754a:	4a0d      	ldr	r2, [pc, #52]	@ (8007580 <xTaskIncrementTick+0x170>)
 800754c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800754e:	697b      	ldr	r3, [r7, #20]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20001014 	.word	0x20001014
 800755c:	20000ff0 	.word	0x20000ff0
 8007560:	20000fa4 	.word	0x20000fa4
 8007564:	20000fa8 	.word	0x20000fa8
 8007568:	20001004 	.word	0x20001004
 800756c:	2000100c 	.word	0x2000100c
 8007570:	20000ff4 	.word	0x20000ff4
 8007574:	20000b1c 	.word	0x20000b1c
 8007578:	20000b18 	.word	0x20000b18
 800757c:	20001000 	.word	0x20001000
 8007580:	20000ffc 	.word	0x20000ffc

08007584 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800758a:	4b28      	ldr	r3, [pc, #160]	@ (800762c <vTaskSwitchContext+0xa8>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007592:	4b27      	ldr	r3, [pc, #156]	@ (8007630 <vTaskSwitchContext+0xac>)
 8007594:	2201      	movs	r2, #1
 8007596:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007598:	e042      	b.n	8007620 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800759a:	4b25      	ldr	r3, [pc, #148]	@ (8007630 <vTaskSwitchContext+0xac>)
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a0:	4b24      	ldr	r3, [pc, #144]	@ (8007634 <vTaskSwitchContext+0xb0>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	e011      	b.n	80075cc <vTaskSwitchContext+0x48>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10b      	bne.n	80075c6 <vTaskSwitchContext+0x42>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	607b      	str	r3, [r7, #4]
}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	e7fd      	b.n	80075c2 <vTaskSwitchContext+0x3e>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3b01      	subs	r3, #1
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	491a      	ldr	r1, [pc, #104]	@ (8007638 <vTaskSwitchContext+0xb4>)
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0e3      	beq.n	80075a8 <vTaskSwitchContext+0x24>
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4613      	mov	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4a13      	ldr	r2, [pc, #76]	@ (8007638 <vTaskSwitchContext+0xb4>)
 80075ec:	4413      	add	r3, r2
 80075ee:	60bb      	str	r3, [r7, #8]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	605a      	str	r2, [r3, #4]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	3308      	adds	r3, #8
 8007602:	429a      	cmp	r2, r3
 8007604:	d104      	bne.n	8007610 <vTaskSwitchContext+0x8c>
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	605a      	str	r2, [r3, #4]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	4a09      	ldr	r2, [pc, #36]	@ (800763c <vTaskSwitchContext+0xb8>)
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	4a06      	ldr	r2, [pc, #24]	@ (8007634 <vTaskSwitchContext+0xb0>)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6013      	str	r3, [r2, #0]
}
 8007620:	bf00      	nop
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	20001014 	.word	0x20001014
 8007630:	20001000 	.word	0x20001000
 8007634:	20000ff4 	.word	0x20000ff4
 8007638:	20000b1c 	.word	0x20000b1c
 800763c:	20000b18 	.word	0x20000b18

08007640 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10b      	bne.n	8007668 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	60fb      	str	r3, [r7, #12]
}
 8007662:	bf00      	nop
 8007664:	bf00      	nop
 8007666:	e7fd      	b.n	8007664 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007668:	4b07      	ldr	r3, [pc, #28]	@ (8007688 <vTaskPlaceOnEventList+0x48>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3318      	adds	r3, #24
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7fe fb74 	bl	8005d5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007676:	2101      	movs	r1, #1
 8007678:	6838      	ldr	r0, [r7, #0]
 800767a:	f000 fb81 	bl	8007d80 <prvAddCurrentTaskToDelayedList>
}
 800767e:	bf00      	nop
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20000b18 	.word	0x20000b18

0800768c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10b      	bne.n	80076b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	617b      	str	r3, [r7, #20]
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	e7fd      	b.n	80076b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076b6:	4b0a      	ldr	r3, [pc, #40]	@ (80076e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3318      	adds	r3, #24
 80076bc:	4619      	mov	r1, r3
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7fe fb29 	bl	8005d16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80076ca:	f04f 33ff 	mov.w	r3, #4294967295
 80076ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80076d0:	6879      	ldr	r1, [r7, #4]
 80076d2:	68b8      	ldr	r0, [r7, #8]
 80076d4:	f000 fb54 	bl	8007d80 <prvAddCurrentTaskToDelayedList>
	}
 80076d8:	bf00      	nop
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	20000b18 	.word	0x20000b18

080076e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10b      	bne.n	8007712 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	60fb      	str	r3, [r7, #12]
}
 800770c:	bf00      	nop
 800770e:	bf00      	nop
 8007710:	e7fd      	b.n	800770e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	3318      	adds	r3, #24
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fb5a 	bl	8005dd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800771c:	4b1d      	ldr	r3, [pc, #116]	@ (8007794 <xTaskRemoveFromEventList+0xb0>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d11d      	bne.n	8007760 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	3304      	adds	r3, #4
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fb51 	bl	8005dd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007732:	4b19      	ldr	r3, [pc, #100]	@ (8007798 <xTaskRemoveFromEventList+0xb4>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d903      	bls.n	8007742 <xTaskRemoveFromEventList+0x5e>
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773e:	4a16      	ldr	r2, [pc, #88]	@ (8007798 <xTaskRemoveFromEventList+0xb4>)
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007746:	4613      	mov	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4a13      	ldr	r2, [pc, #76]	@ (800779c <xTaskRemoveFromEventList+0xb8>)
 8007750:	441a      	add	r2, r3
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	3304      	adds	r3, #4
 8007756:	4619      	mov	r1, r3
 8007758:	4610      	mov	r0, r2
 800775a:	f7fe fadc 	bl	8005d16 <vListInsertEnd>
 800775e:	e005      	b.n	800776c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	3318      	adds	r3, #24
 8007764:	4619      	mov	r1, r3
 8007766:	480e      	ldr	r0, [pc, #56]	@ (80077a0 <xTaskRemoveFromEventList+0xbc>)
 8007768:	f7fe fad5 	bl	8005d16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007770:	4b0c      	ldr	r3, [pc, #48]	@ (80077a4 <xTaskRemoveFromEventList+0xc0>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	429a      	cmp	r2, r3
 8007778:	d905      	bls.n	8007786 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800777a:	2301      	movs	r3, #1
 800777c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800777e:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <xTaskRemoveFromEventList+0xc4>)
 8007780:	2201      	movs	r2, #1
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	e001      	b.n	800778a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007786:	2300      	movs	r3, #0
 8007788:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800778a:	697b      	ldr	r3, [r7, #20]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20001014 	.word	0x20001014
 8007798:	20000ff4 	.word	0x20000ff4
 800779c:	20000b1c 	.word	0x20000b1c
 80077a0:	20000fac 	.word	0x20000fac
 80077a4:	20000b18 	.word	0x20000b18
 80077a8:	20001000 	.word	0x20001000

080077ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077b4:	4b06      	ldr	r3, [pc, #24]	@ (80077d0 <vTaskInternalSetTimeOutState+0x24>)
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80077bc:	4b05      	ldr	r3, [pc, #20]	@ (80077d4 <vTaskInternalSetTimeOutState+0x28>)
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	605a      	str	r2, [r3, #4]
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	20001004 	.word	0x20001004
 80077d4:	20000ff0 	.word	0x20000ff0

080077d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10b      	bne.n	8007800 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	613b      	str	r3, [r7, #16]
}
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	e7fd      	b.n	80077fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10b      	bne.n	800781e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	60fb      	str	r3, [r7, #12]
}
 8007818:	bf00      	nop
 800781a:	bf00      	nop
 800781c:	e7fd      	b.n	800781a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800781e:	f000 ff8b 	bl	8008738 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007822:	4b1d      	ldr	r3, [pc, #116]	@ (8007898 <xTaskCheckForTimeOut+0xc0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783a:	d102      	bne.n	8007842 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800783c:	2300      	movs	r3, #0
 800783e:	61fb      	str	r3, [r7, #28]
 8007840:	e023      	b.n	800788a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b15      	ldr	r3, [pc, #84]	@ (800789c <xTaskCheckForTimeOut+0xc4>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d007      	beq.n	800785e <xTaskCheckForTimeOut+0x86>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	429a      	cmp	r2, r3
 8007856:	d302      	bcc.n	800785e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007858:	2301      	movs	r3, #1
 800785a:	61fb      	str	r3, [r7, #28]
 800785c:	e015      	b.n	800788a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	429a      	cmp	r2, r3
 8007866:	d20b      	bcs.n	8007880 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff ff99 	bl	80077ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800787a:	2300      	movs	r3, #0
 800787c:	61fb      	str	r3, [r7, #28]
 800787e:	e004      	b.n	800788a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007886:	2301      	movs	r3, #1
 8007888:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800788a:	f000 ff87 	bl	800879c <vPortExitCritical>

	return xReturn;
 800788e:	69fb      	ldr	r3, [r7, #28]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3720      	adds	r7, #32
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	20000ff0 	.word	0x20000ff0
 800789c:	20001004 	.word	0x20001004

080078a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80078a4:	4b03      	ldr	r3, [pc, #12]	@ (80078b4 <vTaskMissedYield+0x14>)
 80078a6:	2201      	movs	r2, #1
 80078a8:	601a      	str	r2, [r3, #0]
}
 80078aa:	bf00      	nop
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	20001000 	.word	0x20001000

080078b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80078c0:	f000 f852 	bl	8007968 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078c4:	4b06      	ldr	r3, [pc, #24]	@ (80078e0 <prvIdleTask+0x28>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d9f9      	bls.n	80078c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80078cc:	4b05      	ldr	r3, [pc, #20]	@ (80078e4 <prvIdleTask+0x2c>)
 80078ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80078dc:	e7f0      	b.n	80078c0 <prvIdleTask+0x8>
 80078de:	bf00      	nop
 80078e0:	20000b1c 	.word	0x20000b1c
 80078e4:	e000ed04 	.word	0xe000ed04

080078e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078ee:	2300      	movs	r3, #0
 80078f0:	607b      	str	r3, [r7, #4]
 80078f2:	e00c      	b.n	800790e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	4613      	mov	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4a12      	ldr	r2, [pc, #72]	@ (8007948 <prvInitialiseTaskLists+0x60>)
 8007900:	4413      	add	r3, r2
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe f9da 	bl	8005cbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3301      	adds	r3, #1
 800790c:	607b      	str	r3, [r7, #4]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b37      	cmp	r3, #55	@ 0x37
 8007912:	d9ef      	bls.n	80078f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007914:	480d      	ldr	r0, [pc, #52]	@ (800794c <prvInitialiseTaskLists+0x64>)
 8007916:	f7fe f9d1 	bl	8005cbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800791a:	480d      	ldr	r0, [pc, #52]	@ (8007950 <prvInitialiseTaskLists+0x68>)
 800791c:	f7fe f9ce 	bl	8005cbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007920:	480c      	ldr	r0, [pc, #48]	@ (8007954 <prvInitialiseTaskLists+0x6c>)
 8007922:	f7fe f9cb 	bl	8005cbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007926:	480c      	ldr	r0, [pc, #48]	@ (8007958 <prvInitialiseTaskLists+0x70>)
 8007928:	f7fe f9c8 	bl	8005cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800792c:	480b      	ldr	r0, [pc, #44]	@ (800795c <prvInitialiseTaskLists+0x74>)
 800792e:	f7fe f9c5 	bl	8005cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007932:	4b0b      	ldr	r3, [pc, #44]	@ (8007960 <prvInitialiseTaskLists+0x78>)
 8007934:	4a05      	ldr	r2, [pc, #20]	@ (800794c <prvInitialiseTaskLists+0x64>)
 8007936:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007938:	4b0a      	ldr	r3, [pc, #40]	@ (8007964 <prvInitialiseTaskLists+0x7c>)
 800793a:	4a05      	ldr	r2, [pc, #20]	@ (8007950 <prvInitialiseTaskLists+0x68>)
 800793c:	601a      	str	r2, [r3, #0]
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20000b1c 	.word	0x20000b1c
 800794c:	20000f7c 	.word	0x20000f7c
 8007950:	20000f90 	.word	0x20000f90
 8007954:	20000fac 	.word	0x20000fac
 8007958:	20000fc0 	.word	0x20000fc0
 800795c:	20000fd8 	.word	0x20000fd8
 8007960:	20000fa4 	.word	0x20000fa4
 8007964:	20000fa8 	.word	0x20000fa8

08007968 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800796e:	e019      	b.n	80079a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007970:	f000 fee2 	bl	8008738 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007974:	4b10      	ldr	r3, [pc, #64]	@ (80079b8 <prvCheckTasksWaitingTermination+0x50>)
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3304      	adds	r3, #4
 8007980:	4618      	mov	r0, r3
 8007982:	f7fe fa25 	bl	8005dd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007986:	4b0d      	ldr	r3, [pc, #52]	@ (80079bc <prvCheckTasksWaitingTermination+0x54>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3b01      	subs	r3, #1
 800798c:	4a0b      	ldr	r2, [pc, #44]	@ (80079bc <prvCheckTasksWaitingTermination+0x54>)
 800798e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007990:	4b0b      	ldr	r3, [pc, #44]	@ (80079c0 <prvCheckTasksWaitingTermination+0x58>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3b01      	subs	r3, #1
 8007996:	4a0a      	ldr	r2, [pc, #40]	@ (80079c0 <prvCheckTasksWaitingTermination+0x58>)
 8007998:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800799a:	f000 feff 	bl	800879c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f810 	bl	80079c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079a4:	4b06      	ldr	r3, [pc, #24]	@ (80079c0 <prvCheckTasksWaitingTermination+0x58>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e1      	bne.n	8007970 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000fc0 	.word	0x20000fc0
 80079bc:	20000fec 	.word	0x20000fec
 80079c0:	20000fd4 	.word	0x20000fd4

080079c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d108      	bne.n	80079e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079da:	4618      	mov	r0, r3
 80079dc:	f001 f89c 	bl	8008b18 <vPortFree>
				vPortFree( pxTCB );
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 f899 	bl	8008b18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079e6:	e019      	b.n	8007a1c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d103      	bne.n	80079fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 f890 	bl	8008b18 <vPortFree>
	}
 80079f8:	e010      	b.n	8007a1c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d00b      	beq.n	8007a1c <prvDeleteTCB+0x58>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	60fb      	str	r3, [r7, #12]
}
 8007a16:	bf00      	nop
 8007a18:	bf00      	nop
 8007a1a:	e7fd      	b.n	8007a18 <prvDeleteTCB+0x54>
	}
 8007a1c:	bf00      	nop
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a5c <prvResetNextTaskUnblockTime+0x38>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d104      	bne.n	8007a3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a34:	4b0a      	ldr	r3, [pc, #40]	@ (8007a60 <prvResetNextTaskUnblockTime+0x3c>)
 8007a36:	f04f 32ff 	mov.w	r2, #4294967295
 8007a3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a3c:	e008      	b.n	8007a50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a3e:	4b07      	ldr	r3, [pc, #28]	@ (8007a5c <prvResetNextTaskUnblockTime+0x38>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	4a04      	ldr	r2, [pc, #16]	@ (8007a60 <prvResetNextTaskUnblockTime+0x3c>)
 8007a4e:	6013      	str	r3, [r2, #0]
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	20000fa4 	.word	0x20000fa4
 8007a60:	2000100c 	.word	0x2000100c

08007a64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a98 <xTaskGetSchedulerState+0x34>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d102      	bne.n	8007a78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a72:	2301      	movs	r3, #1
 8007a74:	607b      	str	r3, [r7, #4]
 8007a76:	e008      	b.n	8007a8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a78:	4b08      	ldr	r3, [pc, #32]	@ (8007a9c <xTaskGetSchedulerState+0x38>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a80:	2302      	movs	r3, #2
 8007a82:	607b      	str	r3, [r7, #4]
 8007a84:	e001      	b.n	8007a8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a86:	2300      	movs	r3, #0
 8007a88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a8a:	687b      	ldr	r3, [r7, #4]
	}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	20000ff8 	.word	0x20000ff8
 8007a9c:	20001014 	.word	0x20001014

08007aa0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d051      	beq.n	8007b5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aba:	4b2a      	ldr	r3, [pc, #168]	@ (8007b64 <xTaskPriorityInherit+0xc4>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d241      	bcs.n	8007b48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	db06      	blt.n	8007ada <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007acc:	4b25      	ldr	r3, [pc, #148]	@ (8007b64 <xTaskPriorityInherit+0xc4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	6959      	ldr	r1, [r3, #20]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4a1f      	ldr	r2, [pc, #124]	@ (8007b68 <xTaskPriorityInherit+0xc8>)
 8007aec:	4413      	add	r3, r2
 8007aee:	4299      	cmp	r1, r3
 8007af0:	d122      	bne.n	8007b38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	3304      	adds	r3, #4
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe f96a 	bl	8005dd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007afc:	4b19      	ldr	r3, [pc, #100]	@ (8007b64 <xTaskPriorityInherit+0xc4>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b0a:	4b18      	ldr	r3, [pc, #96]	@ (8007b6c <xTaskPriorityInherit+0xcc>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d903      	bls.n	8007b1a <xTaskPriorityInherit+0x7a>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b16:	4a15      	ldr	r2, [pc, #84]	@ (8007b6c <xTaskPriorityInherit+0xcc>)
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4a10      	ldr	r2, [pc, #64]	@ (8007b68 <xTaskPriorityInherit+0xc8>)
 8007b28:	441a      	add	r2, r3
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4610      	mov	r0, r2
 8007b32:	f7fe f8f0 	bl	8005d16 <vListInsertEnd>
 8007b36:	e004      	b.n	8007b42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b38:	4b0a      	ldr	r3, [pc, #40]	@ (8007b64 <xTaskPriorityInherit+0xc4>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007b42:	2301      	movs	r3, #1
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	e008      	b.n	8007b5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b4c:	4b05      	ldr	r3, [pc, #20]	@ (8007b64 <xTaskPriorityInherit+0xc4>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d201      	bcs.n	8007b5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007b56:	2301      	movs	r3, #1
 8007b58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
	}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20000b18 	.word	0x20000b18
 8007b68:	20000b1c 	.word	0x20000b1c
 8007b6c:	20000ff4 	.word	0x20000ff4

08007b70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d058      	beq.n	8007c38 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b86:	4b2f      	ldr	r3, [pc, #188]	@ (8007c44 <xTaskPriorityDisinherit+0xd4>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d00b      	beq.n	8007ba8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	60fb      	str	r3, [r7, #12]
}
 8007ba2:	bf00      	nop
 8007ba4:	bf00      	nop
 8007ba6:	e7fd      	b.n	8007ba4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10b      	bne.n	8007bc8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	60bb      	str	r3, [r7, #8]
}
 8007bc2:	bf00      	nop
 8007bc4:	bf00      	nop
 8007bc6:	e7fd      	b.n	8007bc4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bcc:	1e5a      	subs	r2, r3, #1
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d02c      	beq.n	8007c38 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d128      	bne.n	8007c38 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	3304      	adds	r3, #4
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe f8f0 	bl	8005dd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c08:	4b0f      	ldr	r3, [pc, #60]	@ (8007c48 <xTaskPriorityDisinherit+0xd8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d903      	bls.n	8007c18 <xTaskPriorityDisinherit+0xa8>
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c14:	4a0c      	ldr	r2, [pc, #48]	@ (8007c48 <xTaskPriorityDisinherit+0xd8>)
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4a09      	ldr	r2, [pc, #36]	@ (8007c4c <xTaskPriorityDisinherit+0xdc>)
 8007c26:	441a      	add	r2, r3
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4610      	mov	r0, r2
 8007c30:	f7fe f871 	bl	8005d16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c34:	2301      	movs	r3, #1
 8007c36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c38:	697b      	ldr	r3, [r7, #20]
	}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20000b18 	.word	0x20000b18
 8007c48:	20000ff4 	.word	0x20000ff4
 8007c4c:	20000b1c 	.word	0x20000b1c

08007c50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d06c      	beq.n	8007d42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10b      	bne.n	8007c88 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	60fb      	str	r3, [r7, #12]
}
 8007c82:	bf00      	nop
 8007c84:	bf00      	nop
 8007c86:	e7fd      	b.n	8007c84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d902      	bls.n	8007c98 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	61fb      	str	r3, [r7, #28]
 8007c96:	e002      	b.n	8007c9e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c9c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca2:	69fa      	ldr	r2, [r7, #28]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d04c      	beq.n	8007d42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d147      	bne.n	8007d42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007cb2:	4b26      	ldr	r3, [pc, #152]	@ (8007d4c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d10b      	bne.n	8007cd4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	60bb      	str	r3, [r7, #8]
}
 8007cce:	bf00      	nop
 8007cd0:	bf00      	nop
 8007cd2:	e7fd      	b.n	8007cd0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	69fa      	ldr	r2, [r7, #28]
 8007cde:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	db04      	blt.n	8007cf2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	6959      	ldr	r1, [r3, #20]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4a13      	ldr	r2, [pc, #76]	@ (8007d50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007d02:	4413      	add	r3, r2
 8007d04:	4299      	cmp	r1, r3
 8007d06:	d11c      	bne.n	8007d42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe f85f 	bl	8005dd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d16:	4b0f      	ldr	r3, [pc, #60]	@ (8007d54 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d903      	bls.n	8007d26 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d22:	4a0c      	ldr	r2, [pc, #48]	@ (8007d54 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4a07      	ldr	r2, [pc, #28]	@ (8007d50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007d34:	441a      	add	r2, r3
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	3304      	adds	r3, #4
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	f7fd ffea 	bl	8005d16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d42:	bf00      	nop
 8007d44:	3720      	adds	r7, #32
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20000b18 	.word	0x20000b18
 8007d50:	20000b1c 	.word	0x20000b1c
 8007d54:	20000ff4 	.word	0x20000ff4

08007d58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d5c:	4b07      	ldr	r3, [pc, #28]	@ (8007d7c <pvTaskIncrementMutexHeldCount+0x24>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d64:	4b05      	ldr	r3, [pc, #20]	@ (8007d7c <pvTaskIncrementMutexHeldCount+0x24>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d6a:	3201      	adds	r2, #1
 8007d6c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007d6e:	4b03      	ldr	r3, [pc, #12]	@ (8007d7c <pvTaskIncrementMutexHeldCount+0x24>)
 8007d70:	681b      	ldr	r3, [r3, #0]
	}
 8007d72:	4618      	mov	r0, r3
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	20000b18 	.word	0x20000b18

08007d80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d8a:	4b21      	ldr	r3, [pc, #132]	@ (8007e10 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d90:	4b20      	ldr	r3, [pc, #128]	@ (8007e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3304      	adds	r3, #4
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe f81a 	bl	8005dd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da2:	d10a      	bne.n	8007dba <prvAddCurrentTaskToDelayedList+0x3a>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d007      	beq.n	8007dba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007daa:	4b1a      	ldr	r3, [pc, #104]	@ (8007e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3304      	adds	r3, #4
 8007db0:	4619      	mov	r1, r3
 8007db2:	4819      	ldr	r0, [pc, #100]	@ (8007e18 <prvAddCurrentTaskToDelayedList+0x98>)
 8007db4:	f7fd ffaf 	bl	8005d16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007db8:	e026      	b.n	8007e08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dc2:	4b14      	ldr	r3, [pc, #80]	@ (8007e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d209      	bcs.n	8007de6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dd2:	4b12      	ldr	r3, [pc, #72]	@ (8007e1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4610      	mov	r0, r2
 8007de0:	f7fd ffbd 	bl	8005d5e <vListInsert>
}
 8007de4:	e010      	b.n	8007e08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007de6:	4b0e      	ldr	r3, [pc, #56]	@ (8007e20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	4b0a      	ldr	r3, [pc, #40]	@ (8007e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3304      	adds	r3, #4
 8007df0:	4619      	mov	r1, r3
 8007df2:	4610      	mov	r0, r2
 8007df4:	f7fd ffb3 	bl	8005d5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007df8:	4b0a      	ldr	r3, [pc, #40]	@ (8007e24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d202      	bcs.n	8007e08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e02:	4a08      	ldr	r2, [pc, #32]	@ (8007e24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	6013      	str	r3, [r2, #0]
}
 8007e08:	bf00      	nop
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20000ff0 	.word	0x20000ff0
 8007e14:	20000b18 	.word	0x20000b18
 8007e18:	20000fd8 	.word	0x20000fd8
 8007e1c:	20000fa8 	.word	0x20000fa8
 8007e20:	20000fa4 	.word	0x20000fa4
 8007e24:	2000100c 	.word	0x2000100c

08007e28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b08a      	sub	sp, #40	@ 0x28
 8007e2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e32:	f000 fb13 	bl	800845c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e36:	4b1d      	ldr	r3, [pc, #116]	@ (8007eac <xTimerCreateTimerTask+0x84>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d021      	beq.n	8007e82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e46:	1d3a      	adds	r2, r7, #4
 8007e48:	f107 0108 	add.w	r1, r7, #8
 8007e4c:	f107 030c 	add.w	r3, r7, #12
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fd ff19 	bl	8005c88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	9202      	str	r2, [sp, #8]
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	2302      	movs	r3, #2
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	2300      	movs	r3, #0
 8007e66:	460a      	mov	r2, r1
 8007e68:	4911      	ldr	r1, [pc, #68]	@ (8007eb0 <xTimerCreateTimerTask+0x88>)
 8007e6a:	4812      	ldr	r0, [pc, #72]	@ (8007eb4 <xTimerCreateTimerTask+0x8c>)
 8007e6c:	f7ff f806 	bl	8006e7c <xTaskCreateStatic>
 8007e70:	4603      	mov	r3, r0
 8007e72:	4a11      	ldr	r2, [pc, #68]	@ (8007eb8 <xTimerCreateTimerTask+0x90>)
 8007e74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e76:	4b10      	ldr	r3, [pc, #64]	@ (8007eb8 <xTimerCreateTimerTask+0x90>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10b      	bne.n	8007ea0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	613b      	str	r3, [r7, #16]
}
 8007e9a:	bf00      	nop
 8007e9c:	bf00      	nop
 8007e9e:	e7fd      	b.n	8007e9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ea0:	697b      	ldr	r3, [r7, #20]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20001048 	.word	0x20001048
 8007eb0:	08009c8c 	.word	0x08009c8c
 8007eb4:	08007ff5 	.word	0x08007ff5
 8007eb8:	2000104c 	.word	0x2000104c

08007ebc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08a      	sub	sp, #40	@ 0x28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10b      	bne.n	8007eec <xTimerGenericCommand+0x30>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	623b      	str	r3, [r7, #32]
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	e7fd      	b.n	8007ee8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007eec:	4b19      	ldr	r3, [pc, #100]	@ (8007f54 <xTimerGenericCommand+0x98>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d02a      	beq.n	8007f4a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	dc18      	bgt.n	8007f38 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f06:	f7ff fdad 	bl	8007a64 <xTaskGetSchedulerState>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d109      	bne.n	8007f24 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f10:	4b10      	ldr	r3, [pc, #64]	@ (8007f54 <xTimerGenericCommand+0x98>)
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	f107 0110 	add.w	r1, r7, #16
 8007f18:	2300      	movs	r3, #0
 8007f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f1c:	f7fe f936 	bl	800618c <xQueueGenericSend>
 8007f20:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f22:	e012      	b.n	8007f4a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f24:	4b0b      	ldr	r3, [pc, #44]	@ (8007f54 <xTimerGenericCommand+0x98>)
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	f107 0110 	add.w	r1, r7, #16
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f7fe f92c 	bl	800618c <xQueueGenericSend>
 8007f34:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f36:	e008      	b.n	8007f4a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f38:	4b06      	ldr	r3, [pc, #24]	@ (8007f54 <xTimerGenericCommand+0x98>)
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	f107 0110 	add.w	r1, r7, #16
 8007f40:	2300      	movs	r3, #0
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	f7fe fa24 	bl	8006390 <xQueueGenericSendFromISR>
 8007f48:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3728      	adds	r7, #40	@ 0x28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20001048 	.word	0x20001048

08007f58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b088      	sub	sp, #32
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f62:	4b23      	ldr	r3, [pc, #140]	@ (8007ff0 <prvProcessExpiredTimer+0x98>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fd ff2d 	bl	8005dd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d023      	beq.n	8007fcc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	699a      	ldr	r2, [r3, #24]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	18d1      	adds	r1, r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	6978      	ldr	r0, [r7, #20]
 8007f92:	f000 f8d5 	bl	8008140 <prvInsertTimerInActiveList>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d020      	beq.n	8007fde <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	6978      	ldr	r0, [r7, #20]
 8007fa8:	f7ff ff88 	bl	8007ebc <xTimerGenericCommand>
 8007fac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d114      	bne.n	8007fde <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	60fb      	str	r3, [r7, #12]
}
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	e7fd      	b.n	8007fc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fd2:	f023 0301 	bic.w	r3, r3, #1
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	6978      	ldr	r0, [r7, #20]
 8007fe4:	4798      	blx	r3
}
 8007fe6:	bf00      	nop
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20001040 	.word	0x20001040

08007ff4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ffc:	f107 0308 	add.w	r3, r7, #8
 8008000:	4618      	mov	r0, r3
 8008002:	f000 f859 	bl	80080b8 <prvGetNextExpireTime>
 8008006:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	4619      	mov	r1, r3
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 f805 	bl	800801c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008012:	f000 f8d7 	bl	80081c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008016:	bf00      	nop
 8008018:	e7f0      	b.n	8007ffc <prvTimerTask+0x8>
	...

0800801c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008026:	f7ff f937 	bl	8007298 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800802a:	f107 0308 	add.w	r3, r7, #8
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f866 	bl	8008100 <prvSampleTimeNow>
 8008034:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d130      	bne.n	800809e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10a      	bne.n	8008058 <prvProcessTimerOrBlockTask+0x3c>
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	429a      	cmp	r2, r3
 8008048:	d806      	bhi.n	8008058 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800804a:	f7ff f933 	bl	80072b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800804e:	68f9      	ldr	r1, [r7, #12]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff ff81 	bl	8007f58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008056:	e024      	b.n	80080a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d008      	beq.n	8008070 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800805e:	4b13      	ldr	r3, [pc, #76]	@ (80080ac <prvProcessTimerOrBlockTask+0x90>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <prvProcessTimerOrBlockTask+0x50>
 8008068:	2301      	movs	r3, #1
 800806a:	e000      	b.n	800806e <prvProcessTimerOrBlockTask+0x52>
 800806c:	2300      	movs	r3, #0
 800806e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008070:	4b0f      	ldr	r3, [pc, #60]	@ (80080b0 <prvProcessTimerOrBlockTask+0x94>)
 8008072:	6818      	ldr	r0, [r3, #0]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	4619      	mov	r1, r3
 800807e:	f7fe fec9 	bl	8006e14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008082:	f7ff f917 	bl	80072b4 <xTaskResumeAll>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10a      	bne.n	80080a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800808c:	4b09      	ldr	r3, [pc, #36]	@ (80080b4 <prvProcessTimerOrBlockTask+0x98>)
 800808e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	f3bf 8f6f 	isb	sy
}
 800809c:	e001      	b.n	80080a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800809e:	f7ff f909 	bl	80072b4 <xTaskResumeAll>
}
 80080a2:	bf00      	nop
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20001044 	.word	0x20001044
 80080b0:	20001048 	.word	0x20001048
 80080b4:	e000ed04 	.word	0xe000ed04

080080b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080c0:	4b0e      	ldr	r3, [pc, #56]	@ (80080fc <prvGetNextExpireTime+0x44>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <prvGetNextExpireTime+0x16>
 80080ca:	2201      	movs	r2, #1
 80080cc:	e000      	b.n	80080d0 <prvGetNextExpireTime+0x18>
 80080ce:	2200      	movs	r2, #0
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d105      	bne.n	80080e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080dc:	4b07      	ldr	r3, [pc, #28]	@ (80080fc <prvGetNextExpireTime+0x44>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	e001      	b.n	80080ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080ec:	68fb      	ldr	r3, [r7, #12]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	20001040 	.word	0x20001040

08008100 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008108:	f7ff f972 	bl	80073f0 <xTaskGetTickCount>
 800810c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800810e:	4b0b      	ldr	r3, [pc, #44]	@ (800813c <prvSampleTimeNow+0x3c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	429a      	cmp	r2, r3
 8008116:	d205      	bcs.n	8008124 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008118:	f000 f93a 	bl	8008390 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	e002      	b.n	800812a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800812a:	4a04      	ldr	r2, [pc, #16]	@ (800813c <prvSampleTimeNow+0x3c>)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008130:	68fb      	ldr	r3, [r7, #12]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20001050 	.word	0x20001050

08008140 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800814e:	2300      	movs	r3, #0
 8008150:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	d812      	bhi.n	800818c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	1ad2      	subs	r2, r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	429a      	cmp	r2, r3
 8008172:	d302      	bcc.n	800817a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008174:	2301      	movs	r3, #1
 8008176:	617b      	str	r3, [r7, #20]
 8008178:	e01b      	b.n	80081b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800817a:	4b10      	ldr	r3, [pc, #64]	@ (80081bc <prvInsertTimerInActiveList+0x7c>)
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3304      	adds	r3, #4
 8008182:	4619      	mov	r1, r3
 8008184:	4610      	mov	r0, r2
 8008186:	f7fd fdea 	bl	8005d5e <vListInsert>
 800818a:	e012      	b.n	80081b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	429a      	cmp	r2, r3
 8008192:	d206      	bcs.n	80081a2 <prvInsertTimerInActiveList+0x62>
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	429a      	cmp	r2, r3
 800819a:	d302      	bcc.n	80081a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800819c:	2301      	movs	r3, #1
 800819e:	617b      	str	r3, [r7, #20]
 80081a0:	e007      	b.n	80081b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081a2:	4b07      	ldr	r3, [pc, #28]	@ (80081c0 <prvInsertTimerInActiveList+0x80>)
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f7fd fdd6 	bl	8005d5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081b2:	697b      	ldr	r3, [r7, #20]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20001044 	.word	0x20001044
 80081c0:	20001040 	.word	0x20001040

080081c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08e      	sub	sp, #56	@ 0x38
 80081c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081ca:	e0ce      	b.n	800836a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	da19      	bge.n	8008206 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081d2:	1d3b      	adds	r3, r7, #4
 80081d4:	3304      	adds	r3, #4
 80081d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10b      	bne.n	80081f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	61fb      	str	r3, [r7, #28]
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	e7fd      	b.n	80081f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80081f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081fc:	6850      	ldr	r0, [r2, #4]
 80081fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008200:	6892      	ldr	r2, [r2, #8]
 8008202:	4611      	mov	r1, r2
 8008204:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	f2c0 80ae 	blt.w	800836a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800821a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821c:	3304      	adds	r3, #4
 800821e:	4618      	mov	r0, r3
 8008220:	f7fd fdd6 	bl	8005dd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008224:	463b      	mov	r3, r7
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff ff6a 	bl	8008100 <prvSampleTimeNow>
 800822c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b09      	cmp	r3, #9
 8008232:	f200 8097 	bhi.w	8008364 <prvProcessReceivedCommands+0x1a0>
 8008236:	a201      	add	r2, pc, #4	@ (adr r2, 800823c <prvProcessReceivedCommands+0x78>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	08008265 	.word	0x08008265
 8008240:	08008265 	.word	0x08008265
 8008244:	08008265 	.word	0x08008265
 8008248:	080082db 	.word	0x080082db
 800824c:	080082ef 	.word	0x080082ef
 8008250:	0800833b 	.word	0x0800833b
 8008254:	08008265 	.word	0x08008265
 8008258:	08008265 	.word	0x08008265
 800825c:	080082db 	.word	0x080082db
 8008260:	080082ef 	.word	0x080082ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008266:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800826a:	f043 0301 	orr.w	r3, r3, #1
 800826e:	b2da      	uxtb	r2, r3
 8008270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008272:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	18d1      	adds	r1, r2, r3
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008282:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008284:	f7ff ff5c 	bl	8008140 <prvInsertTimerInActiveList>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d06c      	beq.n	8008368 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800828e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008294:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d061      	beq.n	8008368 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	441a      	add	r2, r3
 80082ac:	2300      	movs	r3, #0
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	2300      	movs	r3, #0
 80082b2:	2100      	movs	r1, #0
 80082b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082b6:	f7ff fe01 	bl	8007ebc <xTimerGenericCommand>
 80082ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d152      	bne.n	8008368 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	61bb      	str	r3, [r7, #24]
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop
 80082d8:	e7fd      	b.n	80082d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082e0:	f023 0301 	bic.w	r3, r3, #1
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80082ec:	e03d      	b.n	800836a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082f4:	f043 0301 	orr.w	r3, r3, #1
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008304:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10b      	bne.n	8008326 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	617b      	str	r3, [r7, #20]
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	e7fd      	b.n	8008322 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008328:	699a      	ldr	r2, [r3, #24]
 800832a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832c:	18d1      	adds	r1, r2, r3
 800832e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008332:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008334:	f7ff ff04 	bl	8008140 <prvInsertTimerInActiveList>
					break;
 8008338:	e017      	b.n	800836a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800833a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d103      	bne.n	8008350 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008348:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800834a:	f000 fbe5 	bl	8008b18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800834e:	e00c      	b.n	800836a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008352:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008356:	f023 0301 	bic.w	r3, r3, #1
 800835a:	b2da      	uxtb	r2, r3
 800835c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008362:	e002      	b.n	800836a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008364:	bf00      	nop
 8008366:	e000      	b.n	800836a <prvProcessReceivedCommands+0x1a6>
					break;
 8008368:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800836a:	4b08      	ldr	r3, [pc, #32]	@ (800838c <prvProcessReceivedCommands+0x1c8>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	1d39      	adds	r1, r7, #4
 8008370:	2200      	movs	r2, #0
 8008372:	4618      	mov	r0, r3
 8008374:	f7fe f93a 	bl	80065ec <xQueueReceive>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	f47f af26 	bne.w	80081cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008380:	bf00      	nop
 8008382:	bf00      	nop
 8008384:	3730      	adds	r7, #48	@ 0x30
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	20001048 	.word	0x20001048

08008390 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008396:	e049      	b.n	800842c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008398:	4b2e      	ldr	r3, [pc, #184]	@ (8008454 <prvSwitchTimerLists+0xc4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a2:	4b2c      	ldr	r3, [pc, #176]	@ (8008454 <prvSwitchTimerLists+0xc4>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fd fd0d 	bl	8005dd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d02f      	beq.n	800842c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4413      	add	r3, r2
 80083d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d90e      	bls.n	80083fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008454 <prvSwitchTimerLists+0xc4>)
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3304      	adds	r3, #4
 80083f2:	4619      	mov	r1, r3
 80083f4:	4610      	mov	r0, r2
 80083f6:	f7fd fcb2 	bl	8005d5e <vListInsert>
 80083fa:	e017      	b.n	800842c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083fc:	2300      	movs	r3, #0
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	2300      	movs	r3, #0
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	2100      	movs	r1, #0
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f7ff fd58 	bl	8007ebc <xTimerGenericCommand>
 800840c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10b      	bne.n	800842c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	603b      	str	r3, [r7, #0]
}
 8008426:	bf00      	nop
 8008428:	bf00      	nop
 800842a:	e7fd      	b.n	8008428 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800842c:	4b09      	ldr	r3, [pc, #36]	@ (8008454 <prvSwitchTimerLists+0xc4>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1b0      	bne.n	8008398 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008436:	4b07      	ldr	r3, [pc, #28]	@ (8008454 <prvSwitchTimerLists+0xc4>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800843c:	4b06      	ldr	r3, [pc, #24]	@ (8008458 <prvSwitchTimerLists+0xc8>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a04      	ldr	r2, [pc, #16]	@ (8008454 <prvSwitchTimerLists+0xc4>)
 8008442:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008444:	4a04      	ldr	r2, [pc, #16]	@ (8008458 <prvSwitchTimerLists+0xc8>)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	6013      	str	r3, [r2, #0]
}
 800844a:	bf00      	nop
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20001040 	.word	0x20001040
 8008458:	20001044 	.word	0x20001044

0800845c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008462:	f000 f969 	bl	8008738 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008466:	4b15      	ldr	r3, [pc, #84]	@ (80084bc <prvCheckForValidListAndQueue+0x60>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d120      	bne.n	80084b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800846e:	4814      	ldr	r0, [pc, #80]	@ (80084c0 <prvCheckForValidListAndQueue+0x64>)
 8008470:	f7fd fc24 	bl	8005cbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008474:	4813      	ldr	r0, [pc, #76]	@ (80084c4 <prvCheckForValidListAndQueue+0x68>)
 8008476:	f7fd fc21 	bl	8005cbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800847a:	4b13      	ldr	r3, [pc, #76]	@ (80084c8 <prvCheckForValidListAndQueue+0x6c>)
 800847c:	4a10      	ldr	r2, [pc, #64]	@ (80084c0 <prvCheckForValidListAndQueue+0x64>)
 800847e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008480:	4b12      	ldr	r3, [pc, #72]	@ (80084cc <prvCheckForValidListAndQueue+0x70>)
 8008482:	4a10      	ldr	r2, [pc, #64]	@ (80084c4 <prvCheckForValidListAndQueue+0x68>)
 8008484:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008486:	2300      	movs	r3, #0
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	4b11      	ldr	r3, [pc, #68]	@ (80084d0 <prvCheckForValidListAndQueue+0x74>)
 800848c:	4a11      	ldr	r2, [pc, #68]	@ (80084d4 <prvCheckForValidListAndQueue+0x78>)
 800848e:	2110      	movs	r1, #16
 8008490:	200a      	movs	r0, #10
 8008492:	f7fd fd31 	bl	8005ef8 <xQueueGenericCreateStatic>
 8008496:	4603      	mov	r3, r0
 8008498:	4a08      	ldr	r2, [pc, #32]	@ (80084bc <prvCheckForValidListAndQueue+0x60>)
 800849a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800849c:	4b07      	ldr	r3, [pc, #28]	@ (80084bc <prvCheckForValidListAndQueue+0x60>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084a4:	4b05      	ldr	r3, [pc, #20]	@ (80084bc <prvCheckForValidListAndQueue+0x60>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	490b      	ldr	r1, [pc, #44]	@ (80084d8 <prvCheckForValidListAndQueue+0x7c>)
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe fc5e 	bl	8006d6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084b0:	f000 f974 	bl	800879c <vPortExitCritical>
}
 80084b4:	bf00      	nop
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20001048 	.word	0x20001048
 80084c0:	20001018 	.word	0x20001018
 80084c4:	2000102c 	.word	0x2000102c
 80084c8:	20001040 	.word	0x20001040
 80084cc:	20001044 	.word	0x20001044
 80084d0:	200010f4 	.word	0x200010f4
 80084d4:	20001054 	.word	0x20001054
 80084d8:	08009c94 	.word	0x08009c94

080084dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	3b04      	subs	r3, #4
 80084ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80084f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3b04      	subs	r3, #4
 80084fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f023 0201 	bic.w	r2, r3, #1
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3b04      	subs	r3, #4
 800850a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800850c:	4a0c      	ldr	r2, [pc, #48]	@ (8008540 <pxPortInitialiseStack+0x64>)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3b14      	subs	r3, #20
 8008516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3b04      	subs	r3, #4
 8008522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f06f 0202 	mvn.w	r2, #2
 800852a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3b20      	subs	r3, #32
 8008530:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008532:	68fb      	ldr	r3, [r7, #12]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	08008545 	.word	0x08008545

08008544 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800854e:	4b13      	ldr	r3, [pc, #76]	@ (800859c <prvTaskExitError+0x58>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008556:	d00b      	beq.n	8008570 <prvTaskExitError+0x2c>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	60fb      	str	r3, [r7, #12]
}
 800856a:	bf00      	nop
 800856c:	bf00      	nop
 800856e:	e7fd      	b.n	800856c <prvTaskExitError+0x28>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	60bb      	str	r3, [r7, #8]
}
 8008582:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008584:	bf00      	nop
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0fc      	beq.n	8008586 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	20000010 	.word	0x20000010

080085a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085a0:	4b07      	ldr	r3, [pc, #28]	@ (80085c0 <pxCurrentTCBConst2>)
 80085a2:	6819      	ldr	r1, [r3, #0]
 80085a4:	6808      	ldr	r0, [r1, #0]
 80085a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085aa:	f380 8809 	msr	PSP, r0
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f04f 0000 	mov.w	r0, #0
 80085b6:	f380 8811 	msr	BASEPRI, r0
 80085ba:	4770      	bx	lr
 80085bc:	f3af 8000 	nop.w

080085c0 <pxCurrentTCBConst2>:
 80085c0:	20000b18 	.word	0x20000b18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop

080085c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085c8:	4808      	ldr	r0, [pc, #32]	@ (80085ec <prvPortStartFirstTask+0x24>)
 80085ca:	6800      	ldr	r0, [r0, #0]
 80085cc:	6800      	ldr	r0, [r0, #0]
 80085ce:	f380 8808 	msr	MSP, r0
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f380 8814 	msr	CONTROL, r0
 80085da:	b662      	cpsie	i
 80085dc:	b661      	cpsie	f
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	df00      	svc	0
 80085e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085ea:	bf00      	nop
 80085ec:	e000ed08 	.word	0xe000ed08

080085f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085f6:	4b47      	ldr	r3, [pc, #284]	@ (8008714 <xPortStartScheduler+0x124>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a47      	ldr	r2, [pc, #284]	@ (8008718 <xPortStartScheduler+0x128>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d10b      	bne.n	8008618 <xPortStartScheduler+0x28>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	613b      	str	r3, [r7, #16]
}
 8008612:	bf00      	nop
 8008614:	bf00      	nop
 8008616:	e7fd      	b.n	8008614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008618:	4b3e      	ldr	r3, [pc, #248]	@ (8008714 <xPortStartScheduler+0x124>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a3f      	ldr	r2, [pc, #252]	@ (800871c <xPortStartScheduler+0x12c>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d10b      	bne.n	800863a <xPortStartScheduler+0x4a>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	60fb      	str	r3, [r7, #12]
}
 8008634:	bf00      	nop
 8008636:	bf00      	nop
 8008638:	e7fd      	b.n	8008636 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800863a:	4b39      	ldr	r3, [pc, #228]	@ (8008720 <xPortStartScheduler+0x130>)
 800863c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	22ff      	movs	r2, #255	@ 0xff
 800864a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	b2db      	uxtb	r3, r3
 8008658:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800865c:	b2da      	uxtb	r2, r3
 800865e:	4b31      	ldr	r3, [pc, #196]	@ (8008724 <xPortStartScheduler+0x134>)
 8008660:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008662:	4b31      	ldr	r3, [pc, #196]	@ (8008728 <xPortStartScheduler+0x138>)
 8008664:	2207      	movs	r2, #7
 8008666:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008668:	e009      	b.n	800867e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800866a:	4b2f      	ldr	r3, [pc, #188]	@ (8008728 <xPortStartScheduler+0x138>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3b01      	subs	r3, #1
 8008670:	4a2d      	ldr	r2, [pc, #180]	@ (8008728 <xPortStartScheduler+0x138>)
 8008672:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	b2db      	uxtb	r3, r3
 800867c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800867e:	78fb      	ldrb	r3, [r7, #3]
 8008680:	b2db      	uxtb	r3, r3
 8008682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008686:	2b80      	cmp	r3, #128	@ 0x80
 8008688:	d0ef      	beq.n	800866a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800868a:	4b27      	ldr	r3, [pc, #156]	@ (8008728 <xPortStartScheduler+0x138>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f1c3 0307 	rsb	r3, r3, #7
 8008692:	2b04      	cmp	r3, #4
 8008694:	d00b      	beq.n	80086ae <xPortStartScheduler+0xbe>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	60bb      	str	r3, [r7, #8]
}
 80086a8:	bf00      	nop
 80086aa:	bf00      	nop
 80086ac:	e7fd      	b.n	80086aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008728 <xPortStartScheduler+0x138>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	021b      	lsls	r3, r3, #8
 80086b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008728 <xPortStartScheduler+0x138>)
 80086b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008728 <xPortStartScheduler+0x138>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80086c0:	4a19      	ldr	r2, [pc, #100]	@ (8008728 <xPortStartScheduler+0x138>)
 80086c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086cc:	4b17      	ldr	r3, [pc, #92]	@ (800872c <xPortStartScheduler+0x13c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a16      	ldr	r2, [pc, #88]	@ (800872c <xPortStartScheduler+0x13c>)
 80086d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086d8:	4b14      	ldr	r3, [pc, #80]	@ (800872c <xPortStartScheduler+0x13c>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a13      	ldr	r2, [pc, #76]	@ (800872c <xPortStartScheduler+0x13c>)
 80086de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80086e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086e4:	f000 f8da 	bl	800889c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086e8:	4b11      	ldr	r3, [pc, #68]	@ (8008730 <xPortStartScheduler+0x140>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086ee:	f000 f8f9 	bl	80088e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086f2:	4b10      	ldr	r3, [pc, #64]	@ (8008734 <xPortStartScheduler+0x144>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a0f      	ldr	r2, [pc, #60]	@ (8008734 <xPortStartScheduler+0x144>)
 80086f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80086fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086fe:	f7ff ff63 	bl	80085c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008702:	f7fe ff3f 	bl	8007584 <vTaskSwitchContext>
	prvTaskExitError();
 8008706:	f7ff ff1d 	bl	8008544 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	e000ed00 	.word	0xe000ed00
 8008718:	410fc271 	.word	0x410fc271
 800871c:	410fc270 	.word	0x410fc270
 8008720:	e000e400 	.word	0xe000e400
 8008724:	20001144 	.word	0x20001144
 8008728:	20001148 	.word	0x20001148
 800872c:	e000ed20 	.word	0xe000ed20
 8008730:	20000010 	.word	0x20000010
 8008734:	e000ef34 	.word	0xe000ef34

08008738 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	607b      	str	r3, [r7, #4]
}
 8008750:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008752:	4b10      	ldr	r3, [pc, #64]	@ (8008794 <vPortEnterCritical+0x5c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3301      	adds	r3, #1
 8008758:	4a0e      	ldr	r2, [pc, #56]	@ (8008794 <vPortEnterCritical+0x5c>)
 800875a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800875c:	4b0d      	ldr	r3, [pc, #52]	@ (8008794 <vPortEnterCritical+0x5c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d110      	bne.n	8008786 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008764:	4b0c      	ldr	r3, [pc, #48]	@ (8008798 <vPortEnterCritical+0x60>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00b      	beq.n	8008786 <vPortEnterCritical+0x4e>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	603b      	str	r3, [r7, #0]
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	e7fd      	b.n	8008782 <vPortEnterCritical+0x4a>
	}
}
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	20000010 	.word	0x20000010
 8008798:	e000ed04 	.word	0xe000ed04

0800879c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087a2:	4b12      	ldr	r3, [pc, #72]	@ (80087ec <vPortExitCritical+0x50>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10b      	bne.n	80087c2 <vPortExitCritical+0x26>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	607b      	str	r3, [r7, #4]
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	e7fd      	b.n	80087be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087c2:	4b0a      	ldr	r3, [pc, #40]	@ (80087ec <vPortExitCritical+0x50>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	4a08      	ldr	r2, [pc, #32]	@ (80087ec <vPortExitCritical+0x50>)
 80087ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087cc:	4b07      	ldr	r3, [pc, #28]	@ (80087ec <vPortExitCritical+0x50>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d105      	bne.n	80087e0 <vPortExitCritical+0x44>
 80087d4:	2300      	movs	r3, #0
 80087d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	f383 8811 	msr	BASEPRI, r3
}
 80087de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	20000010 	.word	0x20000010

080087f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087f0:	f3ef 8009 	mrs	r0, PSP
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	4b15      	ldr	r3, [pc, #84]	@ (8008850 <pxCurrentTCBConst>)
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	f01e 0f10 	tst.w	lr, #16
 8008800:	bf08      	it	eq
 8008802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880a:	6010      	str	r0, [r2, #0]
 800880c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008810:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008814:	f380 8811 	msr	BASEPRI, r0
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f7fe feb0 	bl	8007584 <vTaskSwitchContext>
 8008824:	f04f 0000 	mov.w	r0, #0
 8008828:	f380 8811 	msr	BASEPRI, r0
 800882c:	bc09      	pop	{r0, r3}
 800882e:	6819      	ldr	r1, [r3, #0]
 8008830:	6808      	ldr	r0, [r1, #0]
 8008832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008836:	f01e 0f10 	tst.w	lr, #16
 800883a:	bf08      	it	eq
 800883c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008840:	f380 8809 	msr	PSP, r0
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	f3af 8000 	nop.w

08008850 <pxCurrentTCBConst>:
 8008850:	20000b18 	.word	0x20000b18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop

08008858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	607b      	str	r3, [r7, #4]
}
 8008870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008872:	f7fe fdcd 	bl	8007410 <xTaskIncrementTick>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800887c:	4b06      	ldr	r3, [pc, #24]	@ (8008898 <xPortSysTickHandler+0x40>)
 800887e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	2300      	movs	r3, #0
 8008886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	f383 8811 	msr	BASEPRI, r3
}
 800888e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088a0:	4b0b      	ldr	r3, [pc, #44]	@ (80088d0 <vPortSetupTimerInterrupt+0x34>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088a6:	4b0b      	ldr	r3, [pc, #44]	@ (80088d4 <vPortSetupTimerInterrupt+0x38>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088ac:	4b0a      	ldr	r3, [pc, #40]	@ (80088d8 <vPortSetupTimerInterrupt+0x3c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a0a      	ldr	r2, [pc, #40]	@ (80088dc <vPortSetupTimerInterrupt+0x40>)
 80088b2:	fba2 2303 	umull	r2, r3, r2, r3
 80088b6:	099b      	lsrs	r3, r3, #6
 80088b8:	4a09      	ldr	r2, [pc, #36]	@ (80088e0 <vPortSetupTimerInterrupt+0x44>)
 80088ba:	3b01      	subs	r3, #1
 80088bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088be:	4b04      	ldr	r3, [pc, #16]	@ (80088d0 <vPortSetupTimerInterrupt+0x34>)
 80088c0:	2207      	movs	r2, #7
 80088c2:	601a      	str	r2, [r3, #0]
}
 80088c4:	bf00      	nop
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	e000e010 	.word	0xe000e010
 80088d4:	e000e018 	.word	0xe000e018
 80088d8:	20000004 	.word	0x20000004
 80088dc:	10624dd3 	.word	0x10624dd3
 80088e0:	e000e014 	.word	0xe000e014

080088e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80088f4 <vPortEnableVFP+0x10>
 80088e8:	6801      	ldr	r1, [r0, #0]
 80088ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80088ee:	6001      	str	r1, [r0, #0]
 80088f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088f2:	bf00      	nop
 80088f4:	e000ed88 	.word	0xe000ed88

080088f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088fe:	f3ef 8305 	mrs	r3, IPSR
 8008902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b0f      	cmp	r3, #15
 8008908:	d915      	bls.n	8008936 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800890a:	4a18      	ldr	r2, [pc, #96]	@ (800896c <vPortValidateInterruptPriority+0x74>)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4413      	add	r3, r2
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008914:	4b16      	ldr	r3, [pc, #88]	@ (8008970 <vPortValidateInterruptPriority+0x78>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	7afa      	ldrb	r2, [r7, #11]
 800891a:	429a      	cmp	r2, r3
 800891c:	d20b      	bcs.n	8008936 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	607b      	str	r3, [r7, #4]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008936:	4b0f      	ldr	r3, [pc, #60]	@ (8008974 <vPortValidateInterruptPriority+0x7c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800893e:	4b0e      	ldr	r3, [pc, #56]	@ (8008978 <vPortValidateInterruptPriority+0x80>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	429a      	cmp	r2, r3
 8008944:	d90b      	bls.n	800895e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	603b      	str	r3, [r7, #0]
}
 8008958:	bf00      	nop
 800895a:	bf00      	nop
 800895c:	e7fd      	b.n	800895a <vPortValidateInterruptPriority+0x62>
	}
 800895e:	bf00      	nop
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	e000e3f0 	.word	0xe000e3f0
 8008970:	20001144 	.word	0x20001144
 8008974:	e000ed0c 	.word	0xe000ed0c
 8008978:	20001148 	.word	0x20001148

0800897c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08a      	sub	sp, #40	@ 0x28
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008984:	2300      	movs	r3, #0
 8008986:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008988:	f7fe fc86 	bl	8007298 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800898c:	4b5c      	ldr	r3, [pc, #368]	@ (8008b00 <pvPortMalloc+0x184>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008994:	f000 f924 	bl	8008be0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008998:	4b5a      	ldr	r3, [pc, #360]	@ (8008b04 <pvPortMalloc+0x188>)
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4013      	ands	r3, r2
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f040 8095 	bne.w	8008ad0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01e      	beq.n	80089ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80089ac:	2208      	movs	r2, #8
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4413      	add	r3, r2
 80089b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d015      	beq.n	80089ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f023 0307 	bic.w	r3, r3, #7
 80089c4:	3308      	adds	r3, #8
 80089c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f003 0307 	and.w	r3, r3, #7
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00b      	beq.n	80089ea <pvPortMalloc+0x6e>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	617b      	str	r3, [r7, #20]
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	e7fd      	b.n	80089e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d06f      	beq.n	8008ad0 <pvPortMalloc+0x154>
 80089f0:	4b45      	ldr	r3, [pc, #276]	@ (8008b08 <pvPortMalloc+0x18c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d86a      	bhi.n	8008ad0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089fa:	4b44      	ldr	r3, [pc, #272]	@ (8008b0c <pvPortMalloc+0x190>)
 80089fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089fe:	4b43      	ldr	r3, [pc, #268]	@ (8008b0c <pvPortMalloc+0x190>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a04:	e004      	b.n	8008a10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d903      	bls.n	8008a22 <pvPortMalloc+0xa6>
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1f1      	bne.n	8008a06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a22:	4b37      	ldr	r3, [pc, #220]	@ (8008b00 <pvPortMalloc+0x184>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d051      	beq.n	8008ad0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2208      	movs	r2, #8
 8008a32:	4413      	add	r3, r2
 8008a34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	1ad2      	subs	r2, r2, r3
 8008a46:	2308      	movs	r3, #8
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d920      	bls.n	8008a90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4413      	add	r3, r2
 8008a54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00b      	beq.n	8008a78 <pvPortMalloc+0xfc>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	613b      	str	r3, [r7, #16]
}
 8008a72:	bf00      	nop
 8008a74:	bf00      	nop
 8008a76:	e7fd      	b.n	8008a74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	1ad2      	subs	r2, r2, r3
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a8a:	69b8      	ldr	r0, [r7, #24]
 8008a8c:	f000 f90a 	bl	8008ca4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a90:	4b1d      	ldr	r3, [pc, #116]	@ (8008b08 <pvPortMalloc+0x18c>)
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8008b08 <pvPortMalloc+0x18c>)
 8008a9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8008b08 <pvPortMalloc+0x18c>)
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b10 <pvPortMalloc+0x194>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d203      	bcs.n	8008ab2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008aaa:	4b17      	ldr	r3, [pc, #92]	@ (8008b08 <pvPortMalloc+0x18c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a18      	ldr	r2, [pc, #96]	@ (8008b10 <pvPortMalloc+0x194>)
 8008ab0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	4b13      	ldr	r3, [pc, #76]	@ (8008b04 <pvPortMalloc+0x188>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ac6:	4b13      	ldr	r3, [pc, #76]	@ (8008b14 <pvPortMalloc+0x198>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3301      	adds	r3, #1
 8008acc:	4a11      	ldr	r2, [pc, #68]	@ (8008b14 <pvPortMalloc+0x198>)
 8008ace:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ad0:	f7fe fbf0 	bl	80072b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00b      	beq.n	8008af6 <pvPortMalloc+0x17a>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	60fb      	str	r3, [r7, #12]
}
 8008af0:	bf00      	nop
 8008af2:	bf00      	nop
 8008af4:	e7fd      	b.n	8008af2 <pvPortMalloc+0x176>
	return pvReturn;
 8008af6:	69fb      	ldr	r3, [r7, #28]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3728      	adds	r7, #40	@ 0x28
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20001d0c 	.word	0x20001d0c
 8008b04:	20001d20 	.word	0x20001d20
 8008b08:	20001d10 	.word	0x20001d10
 8008b0c:	20001d04 	.word	0x20001d04
 8008b10:	20001d14 	.word	0x20001d14
 8008b14:	20001d18 	.word	0x20001d18

08008b18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d04f      	beq.n	8008bca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	425b      	negs	r3, r3
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	4413      	add	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	4b25      	ldr	r3, [pc, #148]	@ (8008bd4 <vPortFree+0xbc>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4013      	ands	r3, r2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10b      	bne.n	8008b5e <vPortFree+0x46>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	60fb      	str	r3, [r7, #12]
}
 8008b58:	bf00      	nop
 8008b5a:	bf00      	nop
 8008b5c:	e7fd      	b.n	8008b5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00b      	beq.n	8008b7e <vPortFree+0x66>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	60bb      	str	r3, [r7, #8]
}
 8008b78:	bf00      	nop
 8008b7a:	bf00      	nop
 8008b7c:	e7fd      	b.n	8008b7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	4b14      	ldr	r3, [pc, #80]	@ (8008bd4 <vPortFree+0xbc>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4013      	ands	r3, r2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01e      	beq.n	8008bca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d11a      	bne.n	8008bca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd4 <vPortFree+0xbc>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	43db      	mvns	r3, r3
 8008b9e:	401a      	ands	r2, r3
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ba4:	f7fe fb78 	bl	8007298 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd8 <vPortFree+0xc0>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	4a09      	ldr	r2, [pc, #36]	@ (8008bd8 <vPortFree+0xc0>)
 8008bb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bb6:	6938      	ldr	r0, [r7, #16]
 8008bb8:	f000 f874 	bl	8008ca4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008bbc:	4b07      	ldr	r3, [pc, #28]	@ (8008bdc <vPortFree+0xc4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	4a06      	ldr	r2, [pc, #24]	@ (8008bdc <vPortFree+0xc4>)
 8008bc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008bc6:	f7fe fb75 	bl	80072b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008bca:	bf00      	nop
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20001d20 	.word	0x20001d20
 8008bd8:	20001d10 	.word	0x20001d10
 8008bdc:	20001d1c 	.word	0x20001d1c

08008be0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008be6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008bea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008bec:	4b27      	ldr	r3, [pc, #156]	@ (8008c8c <prvHeapInit+0xac>)
 8008bee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00c      	beq.n	8008c14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3307      	adds	r3, #7
 8008bfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f023 0307 	bic.w	r3, r3, #7
 8008c06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8008c8c <prvHeapInit+0xac>)
 8008c10:	4413      	add	r3, r2
 8008c12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c18:	4a1d      	ldr	r2, [pc, #116]	@ (8008c90 <prvHeapInit+0xb0>)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8008c90 <prvHeapInit+0xb0>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	4413      	add	r3, r2
 8008c2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c2c:	2208      	movs	r2, #8
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	1a9b      	subs	r3, r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 0307 	bic.w	r3, r3, #7
 8008c3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	4a15      	ldr	r2, [pc, #84]	@ (8008c94 <prvHeapInit+0xb4>)
 8008c40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c42:	4b14      	ldr	r3, [pc, #80]	@ (8008c94 <prvHeapInit+0xb4>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2200      	movs	r2, #0
 8008c48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c4a:	4b12      	ldr	r3, [pc, #72]	@ (8008c94 <prvHeapInit+0xb4>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	1ad2      	subs	r2, r2, r3
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c60:	4b0c      	ldr	r3, [pc, #48]	@ (8008c94 <prvHeapInit+0xb4>)
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8008c98 <prvHeapInit+0xb8>)
 8008c6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	4a09      	ldr	r2, [pc, #36]	@ (8008c9c <prvHeapInit+0xbc>)
 8008c76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c78:	4b09      	ldr	r3, [pc, #36]	@ (8008ca0 <prvHeapInit+0xc0>)
 8008c7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c7e:	601a      	str	r2, [r3, #0]
}
 8008c80:	bf00      	nop
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	2000114c 	.word	0x2000114c
 8008c90:	20001d04 	.word	0x20001d04
 8008c94:	20001d0c 	.word	0x20001d0c
 8008c98:	20001d14 	.word	0x20001d14
 8008c9c:	20001d10 	.word	0x20001d10
 8008ca0:	20001d20 	.word	0x20001d20

08008ca4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008cac:	4b28      	ldr	r3, [pc, #160]	@ (8008d50 <prvInsertBlockIntoFreeList+0xac>)
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	e002      	b.n	8008cb8 <prvInsertBlockIntoFreeList+0x14>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d8f7      	bhi.n	8008cb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	4413      	add	r3, r2
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d108      	bne.n	8008ce6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	441a      	add	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	441a      	add	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d118      	bne.n	8008d2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	4b15      	ldr	r3, [pc, #84]	@ (8008d54 <prvInsertBlockIntoFreeList+0xb0>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d00d      	beq.n	8008d22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	441a      	add	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	e008      	b.n	8008d34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d22:	4b0c      	ldr	r3, [pc, #48]	@ (8008d54 <prvInsertBlockIntoFreeList+0xb0>)
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	601a      	str	r2, [r3, #0]
 8008d2a:	e003      	b.n	8008d34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d002      	beq.n	8008d42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d42:	bf00      	nop
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	20001d04 	.word	0x20001d04
 8008d54:	20001d0c 	.word	0x20001d0c

08008d58 <std>:
 8008d58:	2300      	movs	r3, #0
 8008d5a:	b510      	push	{r4, lr}
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d66:	6083      	str	r3, [r0, #8]
 8008d68:	8181      	strh	r1, [r0, #12]
 8008d6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d6c:	81c2      	strh	r2, [r0, #14]
 8008d6e:	6183      	str	r3, [r0, #24]
 8008d70:	4619      	mov	r1, r3
 8008d72:	2208      	movs	r2, #8
 8008d74:	305c      	adds	r0, #92	@ 0x5c
 8008d76:	f000 f90e 	bl	8008f96 <memset>
 8008d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008db0 <std+0x58>)
 8008d7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008db4 <std+0x5c>)
 8008d80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d82:	4b0d      	ldr	r3, [pc, #52]	@ (8008db8 <std+0x60>)
 8008d84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d86:	4b0d      	ldr	r3, [pc, #52]	@ (8008dbc <std+0x64>)
 8008d88:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc0 <std+0x68>)
 8008d8c:	6224      	str	r4, [r4, #32]
 8008d8e:	429c      	cmp	r4, r3
 8008d90:	d006      	beq.n	8008da0 <std+0x48>
 8008d92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d96:	4294      	cmp	r4, r2
 8008d98:	d002      	beq.n	8008da0 <std+0x48>
 8008d9a:	33d0      	adds	r3, #208	@ 0xd0
 8008d9c:	429c      	cmp	r4, r3
 8008d9e:	d105      	bne.n	8008dac <std+0x54>
 8008da0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da8:	f000 b96e 	b.w	8009088 <__retarget_lock_init_recursive>
 8008dac:	bd10      	pop	{r4, pc}
 8008dae:	bf00      	nop
 8008db0:	08008f11 	.word	0x08008f11
 8008db4:	08008f33 	.word	0x08008f33
 8008db8:	08008f6b 	.word	0x08008f6b
 8008dbc:	08008f8f 	.word	0x08008f8f
 8008dc0:	20001d24 	.word	0x20001d24

08008dc4 <stdio_exit_handler>:
 8008dc4:	4a02      	ldr	r2, [pc, #8]	@ (8008dd0 <stdio_exit_handler+0xc>)
 8008dc6:	4903      	ldr	r1, [pc, #12]	@ (8008dd4 <stdio_exit_handler+0x10>)
 8008dc8:	4803      	ldr	r0, [pc, #12]	@ (8008dd8 <stdio_exit_handler+0x14>)
 8008dca:	f000 b869 	b.w	8008ea0 <_fwalk_sglue>
 8008dce:	bf00      	nop
 8008dd0:	20000014 	.word	0x20000014
 8008dd4:	08009945 	.word	0x08009945
 8008dd8:	20000024 	.word	0x20000024

08008ddc <cleanup_stdio>:
 8008ddc:	6841      	ldr	r1, [r0, #4]
 8008dde:	4b0c      	ldr	r3, [pc, #48]	@ (8008e10 <cleanup_stdio+0x34>)
 8008de0:	4299      	cmp	r1, r3
 8008de2:	b510      	push	{r4, lr}
 8008de4:	4604      	mov	r4, r0
 8008de6:	d001      	beq.n	8008dec <cleanup_stdio+0x10>
 8008de8:	f000 fdac 	bl	8009944 <_fflush_r>
 8008dec:	68a1      	ldr	r1, [r4, #8]
 8008dee:	4b09      	ldr	r3, [pc, #36]	@ (8008e14 <cleanup_stdio+0x38>)
 8008df0:	4299      	cmp	r1, r3
 8008df2:	d002      	beq.n	8008dfa <cleanup_stdio+0x1e>
 8008df4:	4620      	mov	r0, r4
 8008df6:	f000 fda5 	bl	8009944 <_fflush_r>
 8008dfa:	68e1      	ldr	r1, [r4, #12]
 8008dfc:	4b06      	ldr	r3, [pc, #24]	@ (8008e18 <cleanup_stdio+0x3c>)
 8008dfe:	4299      	cmp	r1, r3
 8008e00:	d004      	beq.n	8008e0c <cleanup_stdio+0x30>
 8008e02:	4620      	mov	r0, r4
 8008e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e08:	f000 bd9c 	b.w	8009944 <_fflush_r>
 8008e0c:	bd10      	pop	{r4, pc}
 8008e0e:	bf00      	nop
 8008e10:	20001d24 	.word	0x20001d24
 8008e14:	20001d8c 	.word	0x20001d8c
 8008e18:	20001df4 	.word	0x20001df4

08008e1c <global_stdio_init.part.0>:
 8008e1c:	b510      	push	{r4, lr}
 8008e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e4c <global_stdio_init.part.0+0x30>)
 8008e20:	4c0b      	ldr	r4, [pc, #44]	@ (8008e50 <global_stdio_init.part.0+0x34>)
 8008e22:	4a0c      	ldr	r2, [pc, #48]	@ (8008e54 <global_stdio_init.part.0+0x38>)
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	4620      	mov	r0, r4
 8008e28:	2200      	movs	r2, #0
 8008e2a:	2104      	movs	r1, #4
 8008e2c:	f7ff ff94 	bl	8008d58 <std>
 8008e30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e34:	2201      	movs	r2, #1
 8008e36:	2109      	movs	r1, #9
 8008e38:	f7ff ff8e 	bl	8008d58 <std>
 8008e3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e40:	2202      	movs	r2, #2
 8008e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e46:	2112      	movs	r1, #18
 8008e48:	f7ff bf86 	b.w	8008d58 <std>
 8008e4c:	20001e5c 	.word	0x20001e5c
 8008e50:	20001d24 	.word	0x20001d24
 8008e54:	08008dc5 	.word	0x08008dc5

08008e58 <__sfp_lock_acquire>:
 8008e58:	4801      	ldr	r0, [pc, #4]	@ (8008e60 <__sfp_lock_acquire+0x8>)
 8008e5a:	f000 b916 	b.w	800908a <__retarget_lock_acquire_recursive>
 8008e5e:	bf00      	nop
 8008e60:	20001e65 	.word	0x20001e65

08008e64 <__sfp_lock_release>:
 8008e64:	4801      	ldr	r0, [pc, #4]	@ (8008e6c <__sfp_lock_release+0x8>)
 8008e66:	f000 b911 	b.w	800908c <__retarget_lock_release_recursive>
 8008e6a:	bf00      	nop
 8008e6c:	20001e65 	.word	0x20001e65

08008e70 <__sinit>:
 8008e70:	b510      	push	{r4, lr}
 8008e72:	4604      	mov	r4, r0
 8008e74:	f7ff fff0 	bl	8008e58 <__sfp_lock_acquire>
 8008e78:	6a23      	ldr	r3, [r4, #32]
 8008e7a:	b11b      	cbz	r3, 8008e84 <__sinit+0x14>
 8008e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e80:	f7ff bff0 	b.w	8008e64 <__sfp_lock_release>
 8008e84:	4b04      	ldr	r3, [pc, #16]	@ (8008e98 <__sinit+0x28>)
 8008e86:	6223      	str	r3, [r4, #32]
 8008e88:	4b04      	ldr	r3, [pc, #16]	@ (8008e9c <__sinit+0x2c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1f5      	bne.n	8008e7c <__sinit+0xc>
 8008e90:	f7ff ffc4 	bl	8008e1c <global_stdio_init.part.0>
 8008e94:	e7f2      	b.n	8008e7c <__sinit+0xc>
 8008e96:	bf00      	nop
 8008e98:	08008ddd 	.word	0x08008ddd
 8008e9c:	20001e5c 	.word	0x20001e5c

08008ea0 <_fwalk_sglue>:
 8008ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	4688      	mov	r8, r1
 8008ea8:	4614      	mov	r4, r2
 8008eaa:	2600      	movs	r6, #0
 8008eac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008eb0:	f1b9 0901 	subs.w	r9, r9, #1
 8008eb4:	d505      	bpl.n	8008ec2 <_fwalk_sglue+0x22>
 8008eb6:	6824      	ldr	r4, [r4, #0]
 8008eb8:	2c00      	cmp	r4, #0
 8008eba:	d1f7      	bne.n	8008eac <_fwalk_sglue+0xc>
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec2:	89ab      	ldrh	r3, [r5, #12]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d907      	bls.n	8008ed8 <_fwalk_sglue+0x38>
 8008ec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	d003      	beq.n	8008ed8 <_fwalk_sglue+0x38>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	47c0      	blx	r8
 8008ed6:	4306      	orrs	r6, r0
 8008ed8:	3568      	adds	r5, #104	@ 0x68
 8008eda:	e7e9      	b.n	8008eb0 <_fwalk_sglue+0x10>

08008edc <iprintf>:
 8008edc:	b40f      	push	{r0, r1, r2, r3}
 8008ede:	b507      	push	{r0, r1, r2, lr}
 8008ee0:	4906      	ldr	r1, [pc, #24]	@ (8008efc <iprintf+0x20>)
 8008ee2:	ab04      	add	r3, sp, #16
 8008ee4:	6808      	ldr	r0, [r1, #0]
 8008ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eea:	6881      	ldr	r1, [r0, #8]
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	f000 f9ff 	bl	80092f0 <_vfiprintf_r>
 8008ef2:	b003      	add	sp, #12
 8008ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ef8:	b004      	add	sp, #16
 8008efa:	4770      	bx	lr
 8008efc:	20000020 	.word	0x20000020

08008f00 <putchar>:
 8008f00:	4b02      	ldr	r3, [pc, #8]	@ (8008f0c <putchar+0xc>)
 8008f02:	4601      	mov	r1, r0
 8008f04:	6818      	ldr	r0, [r3, #0]
 8008f06:	6882      	ldr	r2, [r0, #8]
 8008f08:	f000 bd44 	b.w	8009994 <_putc_r>
 8008f0c:	20000020 	.word	0x20000020

08008f10 <__sread>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	460c      	mov	r4, r1
 8008f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f18:	f000 f868 	bl	8008fec <_read_r>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	bfab      	itete	ge
 8008f20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f22:	89a3      	ldrhlt	r3, [r4, #12]
 8008f24:	181b      	addge	r3, r3, r0
 8008f26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f2a:	bfac      	ite	ge
 8008f2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f2e:	81a3      	strhlt	r3, [r4, #12]
 8008f30:	bd10      	pop	{r4, pc}

08008f32 <__swrite>:
 8008f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f36:	461f      	mov	r7, r3
 8008f38:	898b      	ldrh	r3, [r1, #12]
 8008f3a:	05db      	lsls	r3, r3, #23
 8008f3c:	4605      	mov	r5, r0
 8008f3e:	460c      	mov	r4, r1
 8008f40:	4616      	mov	r6, r2
 8008f42:	d505      	bpl.n	8008f50 <__swrite+0x1e>
 8008f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f48:	2302      	movs	r3, #2
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f000 f83c 	bl	8008fc8 <_lseek_r>
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f5a:	81a3      	strh	r3, [r4, #12]
 8008f5c:	4632      	mov	r2, r6
 8008f5e:	463b      	mov	r3, r7
 8008f60:	4628      	mov	r0, r5
 8008f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f66:	f000 b853 	b.w	8009010 <_write_r>

08008f6a <__sseek>:
 8008f6a:	b510      	push	{r4, lr}
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f72:	f000 f829 	bl	8008fc8 <_lseek_r>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	bf15      	itete	ne
 8008f7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f86:	81a3      	strheq	r3, [r4, #12]
 8008f88:	bf18      	it	ne
 8008f8a:	81a3      	strhne	r3, [r4, #12]
 8008f8c:	bd10      	pop	{r4, pc}

08008f8e <__sclose>:
 8008f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f92:	f000 b809 	b.w	8008fa8 <_close_r>

08008f96 <memset>:
 8008f96:	4402      	add	r2, r0
 8008f98:	4603      	mov	r3, r0
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d100      	bne.n	8008fa0 <memset+0xa>
 8008f9e:	4770      	bx	lr
 8008fa0:	f803 1b01 	strb.w	r1, [r3], #1
 8008fa4:	e7f9      	b.n	8008f9a <memset+0x4>
	...

08008fa8 <_close_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	4d06      	ldr	r5, [pc, #24]	@ (8008fc4 <_close_r+0x1c>)
 8008fac:	2300      	movs	r3, #0
 8008fae:	4604      	mov	r4, r0
 8008fb0:	4608      	mov	r0, r1
 8008fb2:	602b      	str	r3, [r5, #0]
 8008fb4:	f7f7 ff06 	bl	8000dc4 <_close>
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	d102      	bne.n	8008fc2 <_close_r+0x1a>
 8008fbc:	682b      	ldr	r3, [r5, #0]
 8008fbe:	b103      	cbz	r3, 8008fc2 <_close_r+0x1a>
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	bd38      	pop	{r3, r4, r5, pc}
 8008fc4:	20001e60 	.word	0x20001e60

08008fc8 <_lseek_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4d07      	ldr	r5, [pc, #28]	@ (8008fe8 <_lseek_r+0x20>)
 8008fcc:	4604      	mov	r4, r0
 8008fce:	4608      	mov	r0, r1
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	602a      	str	r2, [r5, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f7f7 ff1b 	bl	8000e12 <_lseek>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d102      	bne.n	8008fe6 <_lseek_r+0x1e>
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	b103      	cbz	r3, 8008fe6 <_lseek_r+0x1e>
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	20001e60 	.word	0x20001e60

08008fec <_read_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	4d07      	ldr	r5, [pc, #28]	@ (800900c <_read_r+0x20>)
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	4608      	mov	r0, r1
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	602a      	str	r2, [r5, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f7f7 fea9 	bl	8000d52 <_read>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d102      	bne.n	800900a <_read_r+0x1e>
 8009004:	682b      	ldr	r3, [r5, #0]
 8009006:	b103      	cbz	r3, 800900a <_read_r+0x1e>
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	20001e60 	.word	0x20001e60

08009010 <_write_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	4d07      	ldr	r5, [pc, #28]	@ (8009030 <_write_r+0x20>)
 8009014:	4604      	mov	r4, r0
 8009016:	4608      	mov	r0, r1
 8009018:	4611      	mov	r1, r2
 800901a:	2200      	movs	r2, #0
 800901c:	602a      	str	r2, [r5, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	f7f7 feb4 	bl	8000d8c <_write>
 8009024:	1c43      	adds	r3, r0, #1
 8009026:	d102      	bne.n	800902e <_write_r+0x1e>
 8009028:	682b      	ldr	r3, [r5, #0]
 800902a:	b103      	cbz	r3, 800902e <_write_r+0x1e>
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	20001e60 	.word	0x20001e60

08009034 <__errno>:
 8009034:	4b01      	ldr	r3, [pc, #4]	@ (800903c <__errno+0x8>)
 8009036:	6818      	ldr	r0, [r3, #0]
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	20000020 	.word	0x20000020

08009040 <__libc_init_array>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	4d0d      	ldr	r5, [pc, #52]	@ (8009078 <__libc_init_array+0x38>)
 8009044:	4c0d      	ldr	r4, [pc, #52]	@ (800907c <__libc_init_array+0x3c>)
 8009046:	1b64      	subs	r4, r4, r5
 8009048:	10a4      	asrs	r4, r4, #2
 800904a:	2600      	movs	r6, #0
 800904c:	42a6      	cmp	r6, r4
 800904e:	d109      	bne.n	8009064 <__libc_init_array+0x24>
 8009050:	4d0b      	ldr	r5, [pc, #44]	@ (8009080 <__libc_init_array+0x40>)
 8009052:	4c0c      	ldr	r4, [pc, #48]	@ (8009084 <__libc_init_array+0x44>)
 8009054:	f000 fdfa 	bl	8009c4c <_init>
 8009058:	1b64      	subs	r4, r4, r5
 800905a:	10a4      	asrs	r4, r4, #2
 800905c:	2600      	movs	r6, #0
 800905e:	42a6      	cmp	r6, r4
 8009060:	d105      	bne.n	800906e <__libc_init_array+0x2e>
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	f855 3b04 	ldr.w	r3, [r5], #4
 8009068:	4798      	blx	r3
 800906a:	3601      	adds	r6, #1
 800906c:	e7ee      	b.n	800904c <__libc_init_array+0xc>
 800906e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009072:	4798      	blx	r3
 8009074:	3601      	adds	r6, #1
 8009076:	e7f2      	b.n	800905e <__libc_init_array+0x1e>
 8009078:	08009d54 	.word	0x08009d54
 800907c:	08009d54 	.word	0x08009d54
 8009080:	08009d54 	.word	0x08009d54
 8009084:	08009d58 	.word	0x08009d58

08009088 <__retarget_lock_init_recursive>:
 8009088:	4770      	bx	lr

0800908a <__retarget_lock_acquire_recursive>:
 800908a:	4770      	bx	lr

0800908c <__retarget_lock_release_recursive>:
 800908c:	4770      	bx	lr

0800908e <memcpy>:
 800908e:	440a      	add	r2, r1
 8009090:	4291      	cmp	r1, r2
 8009092:	f100 33ff 	add.w	r3, r0, #4294967295
 8009096:	d100      	bne.n	800909a <memcpy+0xc>
 8009098:	4770      	bx	lr
 800909a:	b510      	push	{r4, lr}
 800909c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090a4:	4291      	cmp	r1, r2
 80090a6:	d1f9      	bne.n	800909c <memcpy+0xe>
 80090a8:	bd10      	pop	{r4, pc}
	...

080090ac <_free_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4605      	mov	r5, r0
 80090b0:	2900      	cmp	r1, #0
 80090b2:	d041      	beq.n	8009138 <_free_r+0x8c>
 80090b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b8:	1f0c      	subs	r4, r1, #4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	bfb8      	it	lt
 80090be:	18e4      	addlt	r4, r4, r3
 80090c0:	f000 f8e0 	bl	8009284 <__malloc_lock>
 80090c4:	4a1d      	ldr	r2, [pc, #116]	@ (800913c <_free_r+0x90>)
 80090c6:	6813      	ldr	r3, [r2, #0]
 80090c8:	b933      	cbnz	r3, 80090d8 <_free_r+0x2c>
 80090ca:	6063      	str	r3, [r4, #4]
 80090cc:	6014      	str	r4, [r2, #0]
 80090ce:	4628      	mov	r0, r5
 80090d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090d4:	f000 b8dc 	b.w	8009290 <__malloc_unlock>
 80090d8:	42a3      	cmp	r3, r4
 80090da:	d908      	bls.n	80090ee <_free_r+0x42>
 80090dc:	6820      	ldr	r0, [r4, #0]
 80090de:	1821      	adds	r1, r4, r0
 80090e0:	428b      	cmp	r3, r1
 80090e2:	bf01      	itttt	eq
 80090e4:	6819      	ldreq	r1, [r3, #0]
 80090e6:	685b      	ldreq	r3, [r3, #4]
 80090e8:	1809      	addeq	r1, r1, r0
 80090ea:	6021      	streq	r1, [r4, #0]
 80090ec:	e7ed      	b.n	80090ca <_free_r+0x1e>
 80090ee:	461a      	mov	r2, r3
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	b10b      	cbz	r3, 80090f8 <_free_r+0x4c>
 80090f4:	42a3      	cmp	r3, r4
 80090f6:	d9fa      	bls.n	80090ee <_free_r+0x42>
 80090f8:	6811      	ldr	r1, [r2, #0]
 80090fa:	1850      	adds	r0, r2, r1
 80090fc:	42a0      	cmp	r0, r4
 80090fe:	d10b      	bne.n	8009118 <_free_r+0x6c>
 8009100:	6820      	ldr	r0, [r4, #0]
 8009102:	4401      	add	r1, r0
 8009104:	1850      	adds	r0, r2, r1
 8009106:	4283      	cmp	r3, r0
 8009108:	6011      	str	r1, [r2, #0]
 800910a:	d1e0      	bne.n	80090ce <_free_r+0x22>
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	6053      	str	r3, [r2, #4]
 8009112:	4408      	add	r0, r1
 8009114:	6010      	str	r0, [r2, #0]
 8009116:	e7da      	b.n	80090ce <_free_r+0x22>
 8009118:	d902      	bls.n	8009120 <_free_r+0x74>
 800911a:	230c      	movs	r3, #12
 800911c:	602b      	str	r3, [r5, #0]
 800911e:	e7d6      	b.n	80090ce <_free_r+0x22>
 8009120:	6820      	ldr	r0, [r4, #0]
 8009122:	1821      	adds	r1, r4, r0
 8009124:	428b      	cmp	r3, r1
 8009126:	bf04      	itt	eq
 8009128:	6819      	ldreq	r1, [r3, #0]
 800912a:	685b      	ldreq	r3, [r3, #4]
 800912c:	6063      	str	r3, [r4, #4]
 800912e:	bf04      	itt	eq
 8009130:	1809      	addeq	r1, r1, r0
 8009132:	6021      	streq	r1, [r4, #0]
 8009134:	6054      	str	r4, [r2, #4]
 8009136:	e7ca      	b.n	80090ce <_free_r+0x22>
 8009138:	bd38      	pop	{r3, r4, r5, pc}
 800913a:	bf00      	nop
 800913c:	20001e6c 	.word	0x20001e6c

08009140 <sbrk_aligned>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	4e0f      	ldr	r6, [pc, #60]	@ (8009180 <sbrk_aligned+0x40>)
 8009144:	460c      	mov	r4, r1
 8009146:	6831      	ldr	r1, [r6, #0]
 8009148:	4605      	mov	r5, r0
 800914a:	b911      	cbnz	r1, 8009152 <sbrk_aligned+0x12>
 800914c:	f000 fcea 	bl	8009b24 <_sbrk_r>
 8009150:	6030      	str	r0, [r6, #0]
 8009152:	4621      	mov	r1, r4
 8009154:	4628      	mov	r0, r5
 8009156:	f000 fce5 	bl	8009b24 <_sbrk_r>
 800915a:	1c43      	adds	r3, r0, #1
 800915c:	d103      	bne.n	8009166 <sbrk_aligned+0x26>
 800915e:	f04f 34ff 	mov.w	r4, #4294967295
 8009162:	4620      	mov	r0, r4
 8009164:	bd70      	pop	{r4, r5, r6, pc}
 8009166:	1cc4      	adds	r4, r0, #3
 8009168:	f024 0403 	bic.w	r4, r4, #3
 800916c:	42a0      	cmp	r0, r4
 800916e:	d0f8      	beq.n	8009162 <sbrk_aligned+0x22>
 8009170:	1a21      	subs	r1, r4, r0
 8009172:	4628      	mov	r0, r5
 8009174:	f000 fcd6 	bl	8009b24 <_sbrk_r>
 8009178:	3001      	adds	r0, #1
 800917a:	d1f2      	bne.n	8009162 <sbrk_aligned+0x22>
 800917c:	e7ef      	b.n	800915e <sbrk_aligned+0x1e>
 800917e:	bf00      	nop
 8009180:	20001e68 	.word	0x20001e68

08009184 <_malloc_r>:
 8009184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009188:	1ccd      	adds	r5, r1, #3
 800918a:	f025 0503 	bic.w	r5, r5, #3
 800918e:	3508      	adds	r5, #8
 8009190:	2d0c      	cmp	r5, #12
 8009192:	bf38      	it	cc
 8009194:	250c      	movcc	r5, #12
 8009196:	2d00      	cmp	r5, #0
 8009198:	4606      	mov	r6, r0
 800919a:	db01      	blt.n	80091a0 <_malloc_r+0x1c>
 800919c:	42a9      	cmp	r1, r5
 800919e:	d904      	bls.n	80091aa <_malloc_r+0x26>
 80091a0:	230c      	movs	r3, #12
 80091a2:	6033      	str	r3, [r6, #0]
 80091a4:	2000      	movs	r0, #0
 80091a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009280 <_malloc_r+0xfc>
 80091ae:	f000 f869 	bl	8009284 <__malloc_lock>
 80091b2:	f8d8 3000 	ldr.w	r3, [r8]
 80091b6:	461c      	mov	r4, r3
 80091b8:	bb44      	cbnz	r4, 800920c <_malloc_r+0x88>
 80091ba:	4629      	mov	r1, r5
 80091bc:	4630      	mov	r0, r6
 80091be:	f7ff ffbf 	bl	8009140 <sbrk_aligned>
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	4604      	mov	r4, r0
 80091c6:	d158      	bne.n	800927a <_malloc_r+0xf6>
 80091c8:	f8d8 4000 	ldr.w	r4, [r8]
 80091cc:	4627      	mov	r7, r4
 80091ce:	2f00      	cmp	r7, #0
 80091d0:	d143      	bne.n	800925a <_malloc_r+0xd6>
 80091d2:	2c00      	cmp	r4, #0
 80091d4:	d04b      	beq.n	800926e <_malloc_r+0xea>
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	4639      	mov	r1, r7
 80091da:	4630      	mov	r0, r6
 80091dc:	eb04 0903 	add.w	r9, r4, r3
 80091e0:	f000 fca0 	bl	8009b24 <_sbrk_r>
 80091e4:	4581      	cmp	r9, r0
 80091e6:	d142      	bne.n	800926e <_malloc_r+0xea>
 80091e8:	6821      	ldr	r1, [r4, #0]
 80091ea:	1a6d      	subs	r5, r5, r1
 80091ec:	4629      	mov	r1, r5
 80091ee:	4630      	mov	r0, r6
 80091f0:	f7ff ffa6 	bl	8009140 <sbrk_aligned>
 80091f4:	3001      	adds	r0, #1
 80091f6:	d03a      	beq.n	800926e <_malloc_r+0xea>
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	442b      	add	r3, r5
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	bb62      	cbnz	r2, 8009260 <_malloc_r+0xdc>
 8009206:	f8c8 7000 	str.w	r7, [r8]
 800920a:	e00f      	b.n	800922c <_malloc_r+0xa8>
 800920c:	6822      	ldr	r2, [r4, #0]
 800920e:	1b52      	subs	r2, r2, r5
 8009210:	d420      	bmi.n	8009254 <_malloc_r+0xd0>
 8009212:	2a0b      	cmp	r2, #11
 8009214:	d917      	bls.n	8009246 <_malloc_r+0xc2>
 8009216:	1961      	adds	r1, r4, r5
 8009218:	42a3      	cmp	r3, r4
 800921a:	6025      	str	r5, [r4, #0]
 800921c:	bf18      	it	ne
 800921e:	6059      	strne	r1, [r3, #4]
 8009220:	6863      	ldr	r3, [r4, #4]
 8009222:	bf08      	it	eq
 8009224:	f8c8 1000 	streq.w	r1, [r8]
 8009228:	5162      	str	r2, [r4, r5]
 800922a:	604b      	str	r3, [r1, #4]
 800922c:	4630      	mov	r0, r6
 800922e:	f000 f82f 	bl	8009290 <__malloc_unlock>
 8009232:	f104 000b 	add.w	r0, r4, #11
 8009236:	1d23      	adds	r3, r4, #4
 8009238:	f020 0007 	bic.w	r0, r0, #7
 800923c:	1ac2      	subs	r2, r0, r3
 800923e:	bf1c      	itt	ne
 8009240:	1a1b      	subne	r3, r3, r0
 8009242:	50a3      	strne	r3, [r4, r2]
 8009244:	e7af      	b.n	80091a6 <_malloc_r+0x22>
 8009246:	6862      	ldr	r2, [r4, #4]
 8009248:	42a3      	cmp	r3, r4
 800924a:	bf0c      	ite	eq
 800924c:	f8c8 2000 	streq.w	r2, [r8]
 8009250:	605a      	strne	r2, [r3, #4]
 8009252:	e7eb      	b.n	800922c <_malloc_r+0xa8>
 8009254:	4623      	mov	r3, r4
 8009256:	6864      	ldr	r4, [r4, #4]
 8009258:	e7ae      	b.n	80091b8 <_malloc_r+0x34>
 800925a:	463c      	mov	r4, r7
 800925c:	687f      	ldr	r7, [r7, #4]
 800925e:	e7b6      	b.n	80091ce <_malloc_r+0x4a>
 8009260:	461a      	mov	r2, r3
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	42a3      	cmp	r3, r4
 8009266:	d1fb      	bne.n	8009260 <_malloc_r+0xdc>
 8009268:	2300      	movs	r3, #0
 800926a:	6053      	str	r3, [r2, #4]
 800926c:	e7de      	b.n	800922c <_malloc_r+0xa8>
 800926e:	230c      	movs	r3, #12
 8009270:	6033      	str	r3, [r6, #0]
 8009272:	4630      	mov	r0, r6
 8009274:	f000 f80c 	bl	8009290 <__malloc_unlock>
 8009278:	e794      	b.n	80091a4 <_malloc_r+0x20>
 800927a:	6005      	str	r5, [r0, #0]
 800927c:	e7d6      	b.n	800922c <_malloc_r+0xa8>
 800927e:	bf00      	nop
 8009280:	20001e6c 	.word	0x20001e6c

08009284 <__malloc_lock>:
 8009284:	4801      	ldr	r0, [pc, #4]	@ (800928c <__malloc_lock+0x8>)
 8009286:	f7ff bf00 	b.w	800908a <__retarget_lock_acquire_recursive>
 800928a:	bf00      	nop
 800928c:	20001e64 	.word	0x20001e64

08009290 <__malloc_unlock>:
 8009290:	4801      	ldr	r0, [pc, #4]	@ (8009298 <__malloc_unlock+0x8>)
 8009292:	f7ff befb 	b.w	800908c <__retarget_lock_release_recursive>
 8009296:	bf00      	nop
 8009298:	20001e64 	.word	0x20001e64

0800929c <__sfputc_r>:
 800929c:	6893      	ldr	r3, [r2, #8]
 800929e:	3b01      	subs	r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	b410      	push	{r4}
 80092a4:	6093      	str	r3, [r2, #8]
 80092a6:	da08      	bge.n	80092ba <__sfputc_r+0x1e>
 80092a8:	6994      	ldr	r4, [r2, #24]
 80092aa:	42a3      	cmp	r3, r4
 80092ac:	db01      	blt.n	80092b2 <__sfputc_r+0x16>
 80092ae:	290a      	cmp	r1, #10
 80092b0:	d103      	bne.n	80092ba <__sfputc_r+0x1e>
 80092b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092b6:	f000 bba1 	b.w	80099fc <__swbuf_r>
 80092ba:	6813      	ldr	r3, [r2, #0]
 80092bc:	1c58      	adds	r0, r3, #1
 80092be:	6010      	str	r0, [r2, #0]
 80092c0:	7019      	strb	r1, [r3, #0]
 80092c2:	4608      	mov	r0, r1
 80092c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <__sfputs_r>:
 80092ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092cc:	4606      	mov	r6, r0
 80092ce:	460f      	mov	r7, r1
 80092d0:	4614      	mov	r4, r2
 80092d2:	18d5      	adds	r5, r2, r3
 80092d4:	42ac      	cmp	r4, r5
 80092d6:	d101      	bne.n	80092dc <__sfputs_r+0x12>
 80092d8:	2000      	movs	r0, #0
 80092da:	e007      	b.n	80092ec <__sfputs_r+0x22>
 80092dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e0:	463a      	mov	r2, r7
 80092e2:	4630      	mov	r0, r6
 80092e4:	f7ff ffda 	bl	800929c <__sfputc_r>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d1f3      	bne.n	80092d4 <__sfputs_r+0xa>
 80092ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092f0 <_vfiprintf_r>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	460d      	mov	r5, r1
 80092f6:	b09d      	sub	sp, #116	@ 0x74
 80092f8:	4614      	mov	r4, r2
 80092fa:	4698      	mov	r8, r3
 80092fc:	4606      	mov	r6, r0
 80092fe:	b118      	cbz	r0, 8009308 <_vfiprintf_r+0x18>
 8009300:	6a03      	ldr	r3, [r0, #32]
 8009302:	b90b      	cbnz	r3, 8009308 <_vfiprintf_r+0x18>
 8009304:	f7ff fdb4 	bl	8008e70 <__sinit>
 8009308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800930a:	07d9      	lsls	r1, r3, #31
 800930c:	d405      	bmi.n	800931a <_vfiprintf_r+0x2a>
 800930e:	89ab      	ldrh	r3, [r5, #12]
 8009310:	059a      	lsls	r2, r3, #22
 8009312:	d402      	bmi.n	800931a <_vfiprintf_r+0x2a>
 8009314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009316:	f7ff feb8 	bl	800908a <__retarget_lock_acquire_recursive>
 800931a:	89ab      	ldrh	r3, [r5, #12]
 800931c:	071b      	lsls	r3, r3, #28
 800931e:	d501      	bpl.n	8009324 <_vfiprintf_r+0x34>
 8009320:	692b      	ldr	r3, [r5, #16]
 8009322:	b99b      	cbnz	r3, 800934c <_vfiprintf_r+0x5c>
 8009324:	4629      	mov	r1, r5
 8009326:	4630      	mov	r0, r6
 8009328:	f000 fba6 	bl	8009a78 <__swsetup_r>
 800932c:	b170      	cbz	r0, 800934c <_vfiprintf_r+0x5c>
 800932e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009330:	07dc      	lsls	r4, r3, #31
 8009332:	d504      	bpl.n	800933e <_vfiprintf_r+0x4e>
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	b01d      	add	sp, #116	@ 0x74
 800933a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933e:	89ab      	ldrh	r3, [r5, #12]
 8009340:	0598      	lsls	r0, r3, #22
 8009342:	d4f7      	bmi.n	8009334 <_vfiprintf_r+0x44>
 8009344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009346:	f7ff fea1 	bl	800908c <__retarget_lock_release_recursive>
 800934a:	e7f3      	b.n	8009334 <_vfiprintf_r+0x44>
 800934c:	2300      	movs	r3, #0
 800934e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009350:	2320      	movs	r3, #32
 8009352:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009356:	f8cd 800c 	str.w	r8, [sp, #12]
 800935a:	2330      	movs	r3, #48	@ 0x30
 800935c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800950c <_vfiprintf_r+0x21c>
 8009360:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009364:	f04f 0901 	mov.w	r9, #1
 8009368:	4623      	mov	r3, r4
 800936a:	469a      	mov	sl, r3
 800936c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009370:	b10a      	cbz	r2, 8009376 <_vfiprintf_r+0x86>
 8009372:	2a25      	cmp	r2, #37	@ 0x25
 8009374:	d1f9      	bne.n	800936a <_vfiprintf_r+0x7a>
 8009376:	ebba 0b04 	subs.w	fp, sl, r4
 800937a:	d00b      	beq.n	8009394 <_vfiprintf_r+0xa4>
 800937c:	465b      	mov	r3, fp
 800937e:	4622      	mov	r2, r4
 8009380:	4629      	mov	r1, r5
 8009382:	4630      	mov	r0, r6
 8009384:	f7ff ffa1 	bl	80092ca <__sfputs_r>
 8009388:	3001      	adds	r0, #1
 800938a:	f000 80a7 	beq.w	80094dc <_vfiprintf_r+0x1ec>
 800938e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009390:	445a      	add	r2, fp
 8009392:	9209      	str	r2, [sp, #36]	@ 0x24
 8009394:	f89a 3000 	ldrb.w	r3, [sl]
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 809f 	beq.w	80094dc <_vfiprintf_r+0x1ec>
 800939e:	2300      	movs	r3, #0
 80093a0:	f04f 32ff 	mov.w	r2, #4294967295
 80093a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093a8:	f10a 0a01 	add.w	sl, sl, #1
 80093ac:	9304      	str	r3, [sp, #16]
 80093ae:	9307      	str	r3, [sp, #28]
 80093b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80093b6:	4654      	mov	r4, sl
 80093b8:	2205      	movs	r2, #5
 80093ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093be:	4853      	ldr	r0, [pc, #332]	@ (800950c <_vfiprintf_r+0x21c>)
 80093c0:	f7f6 ff06 	bl	80001d0 <memchr>
 80093c4:	9a04      	ldr	r2, [sp, #16]
 80093c6:	b9d8      	cbnz	r0, 8009400 <_vfiprintf_r+0x110>
 80093c8:	06d1      	lsls	r1, r2, #27
 80093ca:	bf44      	itt	mi
 80093cc:	2320      	movmi	r3, #32
 80093ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093d2:	0713      	lsls	r3, r2, #28
 80093d4:	bf44      	itt	mi
 80093d6:	232b      	movmi	r3, #43	@ 0x2b
 80093d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093dc:	f89a 3000 	ldrb.w	r3, [sl]
 80093e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80093e2:	d015      	beq.n	8009410 <_vfiprintf_r+0x120>
 80093e4:	9a07      	ldr	r2, [sp, #28]
 80093e6:	4654      	mov	r4, sl
 80093e8:	2000      	movs	r0, #0
 80093ea:	f04f 0c0a 	mov.w	ip, #10
 80093ee:	4621      	mov	r1, r4
 80093f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093f4:	3b30      	subs	r3, #48	@ 0x30
 80093f6:	2b09      	cmp	r3, #9
 80093f8:	d94b      	bls.n	8009492 <_vfiprintf_r+0x1a2>
 80093fa:	b1b0      	cbz	r0, 800942a <_vfiprintf_r+0x13a>
 80093fc:	9207      	str	r2, [sp, #28]
 80093fe:	e014      	b.n	800942a <_vfiprintf_r+0x13a>
 8009400:	eba0 0308 	sub.w	r3, r0, r8
 8009404:	fa09 f303 	lsl.w	r3, r9, r3
 8009408:	4313      	orrs	r3, r2
 800940a:	9304      	str	r3, [sp, #16]
 800940c:	46a2      	mov	sl, r4
 800940e:	e7d2      	b.n	80093b6 <_vfiprintf_r+0xc6>
 8009410:	9b03      	ldr	r3, [sp, #12]
 8009412:	1d19      	adds	r1, r3, #4
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	9103      	str	r1, [sp, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	bfbb      	ittet	lt
 800941c:	425b      	neglt	r3, r3
 800941e:	f042 0202 	orrlt.w	r2, r2, #2
 8009422:	9307      	strge	r3, [sp, #28]
 8009424:	9307      	strlt	r3, [sp, #28]
 8009426:	bfb8      	it	lt
 8009428:	9204      	strlt	r2, [sp, #16]
 800942a:	7823      	ldrb	r3, [r4, #0]
 800942c:	2b2e      	cmp	r3, #46	@ 0x2e
 800942e:	d10a      	bne.n	8009446 <_vfiprintf_r+0x156>
 8009430:	7863      	ldrb	r3, [r4, #1]
 8009432:	2b2a      	cmp	r3, #42	@ 0x2a
 8009434:	d132      	bne.n	800949c <_vfiprintf_r+0x1ac>
 8009436:	9b03      	ldr	r3, [sp, #12]
 8009438:	1d1a      	adds	r2, r3, #4
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	9203      	str	r2, [sp, #12]
 800943e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009442:	3402      	adds	r4, #2
 8009444:	9305      	str	r3, [sp, #20]
 8009446:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800951c <_vfiprintf_r+0x22c>
 800944a:	7821      	ldrb	r1, [r4, #0]
 800944c:	2203      	movs	r2, #3
 800944e:	4650      	mov	r0, sl
 8009450:	f7f6 febe 	bl	80001d0 <memchr>
 8009454:	b138      	cbz	r0, 8009466 <_vfiprintf_r+0x176>
 8009456:	9b04      	ldr	r3, [sp, #16]
 8009458:	eba0 000a 	sub.w	r0, r0, sl
 800945c:	2240      	movs	r2, #64	@ 0x40
 800945e:	4082      	lsls	r2, r0
 8009460:	4313      	orrs	r3, r2
 8009462:	3401      	adds	r4, #1
 8009464:	9304      	str	r3, [sp, #16]
 8009466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800946a:	4829      	ldr	r0, [pc, #164]	@ (8009510 <_vfiprintf_r+0x220>)
 800946c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009470:	2206      	movs	r2, #6
 8009472:	f7f6 fead 	bl	80001d0 <memchr>
 8009476:	2800      	cmp	r0, #0
 8009478:	d03f      	beq.n	80094fa <_vfiprintf_r+0x20a>
 800947a:	4b26      	ldr	r3, [pc, #152]	@ (8009514 <_vfiprintf_r+0x224>)
 800947c:	bb1b      	cbnz	r3, 80094c6 <_vfiprintf_r+0x1d6>
 800947e:	9b03      	ldr	r3, [sp, #12]
 8009480:	3307      	adds	r3, #7
 8009482:	f023 0307 	bic.w	r3, r3, #7
 8009486:	3308      	adds	r3, #8
 8009488:	9303      	str	r3, [sp, #12]
 800948a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800948c:	443b      	add	r3, r7
 800948e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009490:	e76a      	b.n	8009368 <_vfiprintf_r+0x78>
 8009492:	fb0c 3202 	mla	r2, ip, r2, r3
 8009496:	460c      	mov	r4, r1
 8009498:	2001      	movs	r0, #1
 800949a:	e7a8      	b.n	80093ee <_vfiprintf_r+0xfe>
 800949c:	2300      	movs	r3, #0
 800949e:	3401      	adds	r4, #1
 80094a0:	9305      	str	r3, [sp, #20]
 80094a2:	4619      	mov	r1, r3
 80094a4:	f04f 0c0a 	mov.w	ip, #10
 80094a8:	4620      	mov	r0, r4
 80094aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ae:	3a30      	subs	r2, #48	@ 0x30
 80094b0:	2a09      	cmp	r2, #9
 80094b2:	d903      	bls.n	80094bc <_vfiprintf_r+0x1cc>
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d0c6      	beq.n	8009446 <_vfiprintf_r+0x156>
 80094b8:	9105      	str	r1, [sp, #20]
 80094ba:	e7c4      	b.n	8009446 <_vfiprintf_r+0x156>
 80094bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80094c0:	4604      	mov	r4, r0
 80094c2:	2301      	movs	r3, #1
 80094c4:	e7f0      	b.n	80094a8 <_vfiprintf_r+0x1b8>
 80094c6:	ab03      	add	r3, sp, #12
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	462a      	mov	r2, r5
 80094cc:	4b12      	ldr	r3, [pc, #72]	@ (8009518 <_vfiprintf_r+0x228>)
 80094ce:	a904      	add	r1, sp, #16
 80094d0:	4630      	mov	r0, r6
 80094d2:	f3af 8000 	nop.w
 80094d6:	4607      	mov	r7, r0
 80094d8:	1c78      	adds	r0, r7, #1
 80094da:	d1d6      	bne.n	800948a <_vfiprintf_r+0x19a>
 80094dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094de:	07d9      	lsls	r1, r3, #31
 80094e0:	d405      	bmi.n	80094ee <_vfiprintf_r+0x1fe>
 80094e2:	89ab      	ldrh	r3, [r5, #12]
 80094e4:	059a      	lsls	r2, r3, #22
 80094e6:	d402      	bmi.n	80094ee <_vfiprintf_r+0x1fe>
 80094e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094ea:	f7ff fdcf 	bl	800908c <__retarget_lock_release_recursive>
 80094ee:	89ab      	ldrh	r3, [r5, #12]
 80094f0:	065b      	lsls	r3, r3, #25
 80094f2:	f53f af1f 	bmi.w	8009334 <_vfiprintf_r+0x44>
 80094f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094f8:	e71e      	b.n	8009338 <_vfiprintf_r+0x48>
 80094fa:	ab03      	add	r3, sp, #12
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	462a      	mov	r2, r5
 8009500:	4b05      	ldr	r3, [pc, #20]	@ (8009518 <_vfiprintf_r+0x228>)
 8009502:	a904      	add	r1, sp, #16
 8009504:	4630      	mov	r0, r6
 8009506:	f000 f879 	bl	80095fc <_printf_i>
 800950a:	e7e4      	b.n	80094d6 <_vfiprintf_r+0x1e6>
 800950c:	08009d18 	.word	0x08009d18
 8009510:	08009d22 	.word	0x08009d22
 8009514:	00000000 	.word	0x00000000
 8009518:	080092cb 	.word	0x080092cb
 800951c:	08009d1e 	.word	0x08009d1e

08009520 <_printf_common>:
 8009520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009524:	4616      	mov	r6, r2
 8009526:	4698      	mov	r8, r3
 8009528:	688a      	ldr	r2, [r1, #8]
 800952a:	690b      	ldr	r3, [r1, #16]
 800952c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009530:	4293      	cmp	r3, r2
 8009532:	bfb8      	it	lt
 8009534:	4613      	movlt	r3, r2
 8009536:	6033      	str	r3, [r6, #0]
 8009538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800953c:	4607      	mov	r7, r0
 800953e:	460c      	mov	r4, r1
 8009540:	b10a      	cbz	r2, 8009546 <_printf_common+0x26>
 8009542:	3301      	adds	r3, #1
 8009544:	6033      	str	r3, [r6, #0]
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	0699      	lsls	r1, r3, #26
 800954a:	bf42      	ittt	mi
 800954c:	6833      	ldrmi	r3, [r6, #0]
 800954e:	3302      	addmi	r3, #2
 8009550:	6033      	strmi	r3, [r6, #0]
 8009552:	6825      	ldr	r5, [r4, #0]
 8009554:	f015 0506 	ands.w	r5, r5, #6
 8009558:	d106      	bne.n	8009568 <_printf_common+0x48>
 800955a:	f104 0a19 	add.w	sl, r4, #25
 800955e:	68e3      	ldr	r3, [r4, #12]
 8009560:	6832      	ldr	r2, [r6, #0]
 8009562:	1a9b      	subs	r3, r3, r2
 8009564:	42ab      	cmp	r3, r5
 8009566:	dc26      	bgt.n	80095b6 <_printf_common+0x96>
 8009568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800956c:	6822      	ldr	r2, [r4, #0]
 800956e:	3b00      	subs	r3, #0
 8009570:	bf18      	it	ne
 8009572:	2301      	movne	r3, #1
 8009574:	0692      	lsls	r2, r2, #26
 8009576:	d42b      	bmi.n	80095d0 <_printf_common+0xb0>
 8009578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800957c:	4641      	mov	r1, r8
 800957e:	4638      	mov	r0, r7
 8009580:	47c8      	blx	r9
 8009582:	3001      	adds	r0, #1
 8009584:	d01e      	beq.n	80095c4 <_printf_common+0xa4>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	6922      	ldr	r2, [r4, #16]
 800958a:	f003 0306 	and.w	r3, r3, #6
 800958e:	2b04      	cmp	r3, #4
 8009590:	bf02      	ittt	eq
 8009592:	68e5      	ldreq	r5, [r4, #12]
 8009594:	6833      	ldreq	r3, [r6, #0]
 8009596:	1aed      	subeq	r5, r5, r3
 8009598:	68a3      	ldr	r3, [r4, #8]
 800959a:	bf0c      	ite	eq
 800959c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095a0:	2500      	movne	r5, #0
 80095a2:	4293      	cmp	r3, r2
 80095a4:	bfc4      	itt	gt
 80095a6:	1a9b      	subgt	r3, r3, r2
 80095a8:	18ed      	addgt	r5, r5, r3
 80095aa:	2600      	movs	r6, #0
 80095ac:	341a      	adds	r4, #26
 80095ae:	42b5      	cmp	r5, r6
 80095b0:	d11a      	bne.n	80095e8 <_printf_common+0xc8>
 80095b2:	2000      	movs	r0, #0
 80095b4:	e008      	b.n	80095c8 <_printf_common+0xa8>
 80095b6:	2301      	movs	r3, #1
 80095b8:	4652      	mov	r2, sl
 80095ba:	4641      	mov	r1, r8
 80095bc:	4638      	mov	r0, r7
 80095be:	47c8      	blx	r9
 80095c0:	3001      	adds	r0, #1
 80095c2:	d103      	bne.n	80095cc <_printf_common+0xac>
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095cc:	3501      	adds	r5, #1
 80095ce:	e7c6      	b.n	800955e <_printf_common+0x3e>
 80095d0:	18e1      	adds	r1, r4, r3
 80095d2:	1c5a      	adds	r2, r3, #1
 80095d4:	2030      	movs	r0, #48	@ 0x30
 80095d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095da:	4422      	add	r2, r4
 80095dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095e4:	3302      	adds	r3, #2
 80095e6:	e7c7      	b.n	8009578 <_printf_common+0x58>
 80095e8:	2301      	movs	r3, #1
 80095ea:	4622      	mov	r2, r4
 80095ec:	4641      	mov	r1, r8
 80095ee:	4638      	mov	r0, r7
 80095f0:	47c8      	blx	r9
 80095f2:	3001      	adds	r0, #1
 80095f4:	d0e6      	beq.n	80095c4 <_printf_common+0xa4>
 80095f6:	3601      	adds	r6, #1
 80095f8:	e7d9      	b.n	80095ae <_printf_common+0x8e>
	...

080095fc <_printf_i>:
 80095fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009600:	7e0f      	ldrb	r7, [r1, #24]
 8009602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009604:	2f78      	cmp	r7, #120	@ 0x78
 8009606:	4691      	mov	r9, r2
 8009608:	4680      	mov	r8, r0
 800960a:	460c      	mov	r4, r1
 800960c:	469a      	mov	sl, r3
 800960e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009612:	d807      	bhi.n	8009624 <_printf_i+0x28>
 8009614:	2f62      	cmp	r7, #98	@ 0x62
 8009616:	d80a      	bhi.n	800962e <_printf_i+0x32>
 8009618:	2f00      	cmp	r7, #0
 800961a:	f000 80d2 	beq.w	80097c2 <_printf_i+0x1c6>
 800961e:	2f58      	cmp	r7, #88	@ 0x58
 8009620:	f000 80b9 	beq.w	8009796 <_printf_i+0x19a>
 8009624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800962c:	e03a      	b.n	80096a4 <_printf_i+0xa8>
 800962e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009632:	2b15      	cmp	r3, #21
 8009634:	d8f6      	bhi.n	8009624 <_printf_i+0x28>
 8009636:	a101      	add	r1, pc, #4	@ (adr r1, 800963c <_printf_i+0x40>)
 8009638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800963c:	08009695 	.word	0x08009695
 8009640:	080096a9 	.word	0x080096a9
 8009644:	08009625 	.word	0x08009625
 8009648:	08009625 	.word	0x08009625
 800964c:	08009625 	.word	0x08009625
 8009650:	08009625 	.word	0x08009625
 8009654:	080096a9 	.word	0x080096a9
 8009658:	08009625 	.word	0x08009625
 800965c:	08009625 	.word	0x08009625
 8009660:	08009625 	.word	0x08009625
 8009664:	08009625 	.word	0x08009625
 8009668:	080097a9 	.word	0x080097a9
 800966c:	080096d3 	.word	0x080096d3
 8009670:	08009763 	.word	0x08009763
 8009674:	08009625 	.word	0x08009625
 8009678:	08009625 	.word	0x08009625
 800967c:	080097cb 	.word	0x080097cb
 8009680:	08009625 	.word	0x08009625
 8009684:	080096d3 	.word	0x080096d3
 8009688:	08009625 	.word	0x08009625
 800968c:	08009625 	.word	0x08009625
 8009690:	0800976b 	.word	0x0800976b
 8009694:	6833      	ldr	r3, [r6, #0]
 8009696:	1d1a      	adds	r2, r3, #4
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6032      	str	r2, [r6, #0]
 800969c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096a4:	2301      	movs	r3, #1
 80096a6:	e09d      	b.n	80097e4 <_printf_i+0x1e8>
 80096a8:	6833      	ldr	r3, [r6, #0]
 80096aa:	6820      	ldr	r0, [r4, #0]
 80096ac:	1d19      	adds	r1, r3, #4
 80096ae:	6031      	str	r1, [r6, #0]
 80096b0:	0606      	lsls	r6, r0, #24
 80096b2:	d501      	bpl.n	80096b8 <_printf_i+0xbc>
 80096b4:	681d      	ldr	r5, [r3, #0]
 80096b6:	e003      	b.n	80096c0 <_printf_i+0xc4>
 80096b8:	0645      	lsls	r5, r0, #25
 80096ba:	d5fb      	bpl.n	80096b4 <_printf_i+0xb8>
 80096bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096c0:	2d00      	cmp	r5, #0
 80096c2:	da03      	bge.n	80096cc <_printf_i+0xd0>
 80096c4:	232d      	movs	r3, #45	@ 0x2d
 80096c6:	426d      	negs	r5, r5
 80096c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096cc:	4859      	ldr	r0, [pc, #356]	@ (8009834 <_printf_i+0x238>)
 80096ce:	230a      	movs	r3, #10
 80096d0:	e011      	b.n	80096f6 <_printf_i+0xfa>
 80096d2:	6821      	ldr	r1, [r4, #0]
 80096d4:	6833      	ldr	r3, [r6, #0]
 80096d6:	0608      	lsls	r0, r1, #24
 80096d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80096dc:	d402      	bmi.n	80096e4 <_printf_i+0xe8>
 80096de:	0649      	lsls	r1, r1, #25
 80096e0:	bf48      	it	mi
 80096e2:	b2ad      	uxthmi	r5, r5
 80096e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80096e6:	4853      	ldr	r0, [pc, #332]	@ (8009834 <_printf_i+0x238>)
 80096e8:	6033      	str	r3, [r6, #0]
 80096ea:	bf14      	ite	ne
 80096ec:	230a      	movne	r3, #10
 80096ee:	2308      	moveq	r3, #8
 80096f0:	2100      	movs	r1, #0
 80096f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096f6:	6866      	ldr	r6, [r4, #4]
 80096f8:	60a6      	str	r6, [r4, #8]
 80096fa:	2e00      	cmp	r6, #0
 80096fc:	bfa2      	ittt	ge
 80096fe:	6821      	ldrge	r1, [r4, #0]
 8009700:	f021 0104 	bicge.w	r1, r1, #4
 8009704:	6021      	strge	r1, [r4, #0]
 8009706:	b90d      	cbnz	r5, 800970c <_printf_i+0x110>
 8009708:	2e00      	cmp	r6, #0
 800970a:	d04b      	beq.n	80097a4 <_printf_i+0x1a8>
 800970c:	4616      	mov	r6, r2
 800970e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009712:	fb03 5711 	mls	r7, r3, r1, r5
 8009716:	5dc7      	ldrb	r7, [r0, r7]
 8009718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800971c:	462f      	mov	r7, r5
 800971e:	42bb      	cmp	r3, r7
 8009720:	460d      	mov	r5, r1
 8009722:	d9f4      	bls.n	800970e <_printf_i+0x112>
 8009724:	2b08      	cmp	r3, #8
 8009726:	d10b      	bne.n	8009740 <_printf_i+0x144>
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	07df      	lsls	r7, r3, #31
 800972c:	d508      	bpl.n	8009740 <_printf_i+0x144>
 800972e:	6923      	ldr	r3, [r4, #16]
 8009730:	6861      	ldr	r1, [r4, #4]
 8009732:	4299      	cmp	r1, r3
 8009734:	bfde      	ittt	le
 8009736:	2330      	movle	r3, #48	@ 0x30
 8009738:	f806 3c01 	strble.w	r3, [r6, #-1]
 800973c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009740:	1b92      	subs	r2, r2, r6
 8009742:	6122      	str	r2, [r4, #16]
 8009744:	f8cd a000 	str.w	sl, [sp]
 8009748:	464b      	mov	r3, r9
 800974a:	aa03      	add	r2, sp, #12
 800974c:	4621      	mov	r1, r4
 800974e:	4640      	mov	r0, r8
 8009750:	f7ff fee6 	bl	8009520 <_printf_common>
 8009754:	3001      	adds	r0, #1
 8009756:	d14a      	bne.n	80097ee <_printf_i+0x1f2>
 8009758:	f04f 30ff 	mov.w	r0, #4294967295
 800975c:	b004      	add	sp, #16
 800975e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	f043 0320 	orr.w	r3, r3, #32
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	4833      	ldr	r0, [pc, #204]	@ (8009838 <_printf_i+0x23c>)
 800976c:	2778      	movs	r7, #120	@ 0x78
 800976e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	6831      	ldr	r1, [r6, #0]
 8009776:	061f      	lsls	r7, r3, #24
 8009778:	f851 5b04 	ldr.w	r5, [r1], #4
 800977c:	d402      	bmi.n	8009784 <_printf_i+0x188>
 800977e:	065f      	lsls	r7, r3, #25
 8009780:	bf48      	it	mi
 8009782:	b2ad      	uxthmi	r5, r5
 8009784:	6031      	str	r1, [r6, #0]
 8009786:	07d9      	lsls	r1, r3, #31
 8009788:	bf44      	itt	mi
 800978a:	f043 0320 	orrmi.w	r3, r3, #32
 800978e:	6023      	strmi	r3, [r4, #0]
 8009790:	b11d      	cbz	r5, 800979a <_printf_i+0x19e>
 8009792:	2310      	movs	r3, #16
 8009794:	e7ac      	b.n	80096f0 <_printf_i+0xf4>
 8009796:	4827      	ldr	r0, [pc, #156]	@ (8009834 <_printf_i+0x238>)
 8009798:	e7e9      	b.n	800976e <_printf_i+0x172>
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	f023 0320 	bic.w	r3, r3, #32
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	e7f6      	b.n	8009792 <_printf_i+0x196>
 80097a4:	4616      	mov	r6, r2
 80097a6:	e7bd      	b.n	8009724 <_printf_i+0x128>
 80097a8:	6833      	ldr	r3, [r6, #0]
 80097aa:	6825      	ldr	r5, [r4, #0]
 80097ac:	6961      	ldr	r1, [r4, #20]
 80097ae:	1d18      	adds	r0, r3, #4
 80097b0:	6030      	str	r0, [r6, #0]
 80097b2:	062e      	lsls	r6, r5, #24
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	d501      	bpl.n	80097bc <_printf_i+0x1c0>
 80097b8:	6019      	str	r1, [r3, #0]
 80097ba:	e002      	b.n	80097c2 <_printf_i+0x1c6>
 80097bc:	0668      	lsls	r0, r5, #25
 80097be:	d5fb      	bpl.n	80097b8 <_printf_i+0x1bc>
 80097c0:	8019      	strh	r1, [r3, #0]
 80097c2:	2300      	movs	r3, #0
 80097c4:	6123      	str	r3, [r4, #16]
 80097c6:	4616      	mov	r6, r2
 80097c8:	e7bc      	b.n	8009744 <_printf_i+0x148>
 80097ca:	6833      	ldr	r3, [r6, #0]
 80097cc:	1d1a      	adds	r2, r3, #4
 80097ce:	6032      	str	r2, [r6, #0]
 80097d0:	681e      	ldr	r6, [r3, #0]
 80097d2:	6862      	ldr	r2, [r4, #4]
 80097d4:	2100      	movs	r1, #0
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7f6 fcfa 	bl	80001d0 <memchr>
 80097dc:	b108      	cbz	r0, 80097e2 <_printf_i+0x1e6>
 80097de:	1b80      	subs	r0, r0, r6
 80097e0:	6060      	str	r0, [r4, #4]
 80097e2:	6863      	ldr	r3, [r4, #4]
 80097e4:	6123      	str	r3, [r4, #16]
 80097e6:	2300      	movs	r3, #0
 80097e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097ec:	e7aa      	b.n	8009744 <_printf_i+0x148>
 80097ee:	6923      	ldr	r3, [r4, #16]
 80097f0:	4632      	mov	r2, r6
 80097f2:	4649      	mov	r1, r9
 80097f4:	4640      	mov	r0, r8
 80097f6:	47d0      	blx	sl
 80097f8:	3001      	adds	r0, #1
 80097fa:	d0ad      	beq.n	8009758 <_printf_i+0x15c>
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	079b      	lsls	r3, r3, #30
 8009800:	d413      	bmi.n	800982a <_printf_i+0x22e>
 8009802:	68e0      	ldr	r0, [r4, #12]
 8009804:	9b03      	ldr	r3, [sp, #12]
 8009806:	4298      	cmp	r0, r3
 8009808:	bfb8      	it	lt
 800980a:	4618      	movlt	r0, r3
 800980c:	e7a6      	b.n	800975c <_printf_i+0x160>
 800980e:	2301      	movs	r3, #1
 8009810:	4632      	mov	r2, r6
 8009812:	4649      	mov	r1, r9
 8009814:	4640      	mov	r0, r8
 8009816:	47d0      	blx	sl
 8009818:	3001      	adds	r0, #1
 800981a:	d09d      	beq.n	8009758 <_printf_i+0x15c>
 800981c:	3501      	adds	r5, #1
 800981e:	68e3      	ldr	r3, [r4, #12]
 8009820:	9903      	ldr	r1, [sp, #12]
 8009822:	1a5b      	subs	r3, r3, r1
 8009824:	42ab      	cmp	r3, r5
 8009826:	dcf2      	bgt.n	800980e <_printf_i+0x212>
 8009828:	e7eb      	b.n	8009802 <_printf_i+0x206>
 800982a:	2500      	movs	r5, #0
 800982c:	f104 0619 	add.w	r6, r4, #25
 8009830:	e7f5      	b.n	800981e <_printf_i+0x222>
 8009832:	bf00      	nop
 8009834:	08009d29 	.word	0x08009d29
 8009838:	08009d3a 	.word	0x08009d3a

0800983c <__sflush_r>:
 800983c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009844:	0716      	lsls	r6, r2, #28
 8009846:	4605      	mov	r5, r0
 8009848:	460c      	mov	r4, r1
 800984a:	d454      	bmi.n	80098f6 <__sflush_r+0xba>
 800984c:	684b      	ldr	r3, [r1, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	dc02      	bgt.n	8009858 <__sflush_r+0x1c>
 8009852:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009854:	2b00      	cmp	r3, #0
 8009856:	dd48      	ble.n	80098ea <__sflush_r+0xae>
 8009858:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800985a:	2e00      	cmp	r6, #0
 800985c:	d045      	beq.n	80098ea <__sflush_r+0xae>
 800985e:	2300      	movs	r3, #0
 8009860:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009864:	682f      	ldr	r7, [r5, #0]
 8009866:	6a21      	ldr	r1, [r4, #32]
 8009868:	602b      	str	r3, [r5, #0]
 800986a:	d030      	beq.n	80098ce <__sflush_r+0x92>
 800986c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800986e:	89a3      	ldrh	r3, [r4, #12]
 8009870:	0759      	lsls	r1, r3, #29
 8009872:	d505      	bpl.n	8009880 <__sflush_r+0x44>
 8009874:	6863      	ldr	r3, [r4, #4]
 8009876:	1ad2      	subs	r2, r2, r3
 8009878:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800987a:	b10b      	cbz	r3, 8009880 <__sflush_r+0x44>
 800987c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800987e:	1ad2      	subs	r2, r2, r3
 8009880:	2300      	movs	r3, #0
 8009882:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009884:	6a21      	ldr	r1, [r4, #32]
 8009886:	4628      	mov	r0, r5
 8009888:	47b0      	blx	r6
 800988a:	1c43      	adds	r3, r0, #1
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	d106      	bne.n	800989e <__sflush_r+0x62>
 8009890:	6829      	ldr	r1, [r5, #0]
 8009892:	291d      	cmp	r1, #29
 8009894:	d82b      	bhi.n	80098ee <__sflush_r+0xb2>
 8009896:	4a2a      	ldr	r2, [pc, #168]	@ (8009940 <__sflush_r+0x104>)
 8009898:	410a      	asrs	r2, r1
 800989a:	07d6      	lsls	r6, r2, #31
 800989c:	d427      	bmi.n	80098ee <__sflush_r+0xb2>
 800989e:	2200      	movs	r2, #0
 80098a0:	6062      	str	r2, [r4, #4]
 80098a2:	04d9      	lsls	r1, r3, #19
 80098a4:	6922      	ldr	r2, [r4, #16]
 80098a6:	6022      	str	r2, [r4, #0]
 80098a8:	d504      	bpl.n	80098b4 <__sflush_r+0x78>
 80098aa:	1c42      	adds	r2, r0, #1
 80098ac:	d101      	bne.n	80098b2 <__sflush_r+0x76>
 80098ae:	682b      	ldr	r3, [r5, #0]
 80098b0:	b903      	cbnz	r3, 80098b4 <__sflush_r+0x78>
 80098b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80098b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098b6:	602f      	str	r7, [r5, #0]
 80098b8:	b1b9      	cbz	r1, 80098ea <__sflush_r+0xae>
 80098ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098be:	4299      	cmp	r1, r3
 80098c0:	d002      	beq.n	80098c8 <__sflush_r+0x8c>
 80098c2:	4628      	mov	r0, r5
 80098c4:	f7ff fbf2 	bl	80090ac <_free_r>
 80098c8:	2300      	movs	r3, #0
 80098ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80098cc:	e00d      	b.n	80098ea <__sflush_r+0xae>
 80098ce:	2301      	movs	r3, #1
 80098d0:	4628      	mov	r0, r5
 80098d2:	47b0      	blx	r6
 80098d4:	4602      	mov	r2, r0
 80098d6:	1c50      	adds	r0, r2, #1
 80098d8:	d1c9      	bne.n	800986e <__sflush_r+0x32>
 80098da:	682b      	ldr	r3, [r5, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d0c6      	beq.n	800986e <__sflush_r+0x32>
 80098e0:	2b1d      	cmp	r3, #29
 80098e2:	d001      	beq.n	80098e8 <__sflush_r+0xac>
 80098e4:	2b16      	cmp	r3, #22
 80098e6:	d11e      	bne.n	8009926 <__sflush_r+0xea>
 80098e8:	602f      	str	r7, [r5, #0]
 80098ea:	2000      	movs	r0, #0
 80098ec:	e022      	b.n	8009934 <__sflush_r+0xf8>
 80098ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098f2:	b21b      	sxth	r3, r3
 80098f4:	e01b      	b.n	800992e <__sflush_r+0xf2>
 80098f6:	690f      	ldr	r7, [r1, #16]
 80098f8:	2f00      	cmp	r7, #0
 80098fa:	d0f6      	beq.n	80098ea <__sflush_r+0xae>
 80098fc:	0793      	lsls	r3, r2, #30
 80098fe:	680e      	ldr	r6, [r1, #0]
 8009900:	bf08      	it	eq
 8009902:	694b      	ldreq	r3, [r1, #20]
 8009904:	600f      	str	r7, [r1, #0]
 8009906:	bf18      	it	ne
 8009908:	2300      	movne	r3, #0
 800990a:	eba6 0807 	sub.w	r8, r6, r7
 800990e:	608b      	str	r3, [r1, #8]
 8009910:	f1b8 0f00 	cmp.w	r8, #0
 8009914:	dde9      	ble.n	80098ea <__sflush_r+0xae>
 8009916:	6a21      	ldr	r1, [r4, #32]
 8009918:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800991a:	4643      	mov	r3, r8
 800991c:	463a      	mov	r2, r7
 800991e:	4628      	mov	r0, r5
 8009920:	47b0      	blx	r6
 8009922:	2800      	cmp	r0, #0
 8009924:	dc08      	bgt.n	8009938 <__sflush_r+0xfc>
 8009926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800992a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800992e:	81a3      	strh	r3, [r4, #12]
 8009930:	f04f 30ff 	mov.w	r0, #4294967295
 8009934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009938:	4407      	add	r7, r0
 800993a:	eba8 0800 	sub.w	r8, r8, r0
 800993e:	e7e7      	b.n	8009910 <__sflush_r+0xd4>
 8009940:	dfbffffe 	.word	0xdfbffffe

08009944 <_fflush_r>:
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	690b      	ldr	r3, [r1, #16]
 8009948:	4605      	mov	r5, r0
 800994a:	460c      	mov	r4, r1
 800994c:	b913      	cbnz	r3, 8009954 <_fflush_r+0x10>
 800994e:	2500      	movs	r5, #0
 8009950:	4628      	mov	r0, r5
 8009952:	bd38      	pop	{r3, r4, r5, pc}
 8009954:	b118      	cbz	r0, 800995e <_fflush_r+0x1a>
 8009956:	6a03      	ldr	r3, [r0, #32]
 8009958:	b90b      	cbnz	r3, 800995e <_fflush_r+0x1a>
 800995a:	f7ff fa89 	bl	8008e70 <__sinit>
 800995e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0f3      	beq.n	800994e <_fflush_r+0xa>
 8009966:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009968:	07d0      	lsls	r0, r2, #31
 800996a:	d404      	bmi.n	8009976 <_fflush_r+0x32>
 800996c:	0599      	lsls	r1, r3, #22
 800996e:	d402      	bmi.n	8009976 <_fflush_r+0x32>
 8009970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009972:	f7ff fb8a 	bl	800908a <__retarget_lock_acquire_recursive>
 8009976:	4628      	mov	r0, r5
 8009978:	4621      	mov	r1, r4
 800997a:	f7ff ff5f 	bl	800983c <__sflush_r>
 800997e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009980:	07da      	lsls	r2, r3, #31
 8009982:	4605      	mov	r5, r0
 8009984:	d4e4      	bmi.n	8009950 <_fflush_r+0xc>
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	059b      	lsls	r3, r3, #22
 800998a:	d4e1      	bmi.n	8009950 <_fflush_r+0xc>
 800998c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800998e:	f7ff fb7d 	bl	800908c <__retarget_lock_release_recursive>
 8009992:	e7dd      	b.n	8009950 <_fflush_r+0xc>

08009994 <_putc_r>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	460d      	mov	r5, r1
 8009998:	4614      	mov	r4, r2
 800999a:	4606      	mov	r6, r0
 800999c:	b118      	cbz	r0, 80099a6 <_putc_r+0x12>
 800999e:	6a03      	ldr	r3, [r0, #32]
 80099a0:	b90b      	cbnz	r3, 80099a6 <_putc_r+0x12>
 80099a2:	f7ff fa65 	bl	8008e70 <__sinit>
 80099a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099a8:	07d8      	lsls	r0, r3, #31
 80099aa:	d405      	bmi.n	80099b8 <_putc_r+0x24>
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	0599      	lsls	r1, r3, #22
 80099b0:	d402      	bmi.n	80099b8 <_putc_r+0x24>
 80099b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099b4:	f7ff fb69 	bl	800908a <__retarget_lock_acquire_recursive>
 80099b8:	68a3      	ldr	r3, [r4, #8]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	60a3      	str	r3, [r4, #8]
 80099c0:	da05      	bge.n	80099ce <_putc_r+0x3a>
 80099c2:	69a2      	ldr	r2, [r4, #24]
 80099c4:	4293      	cmp	r3, r2
 80099c6:	db12      	blt.n	80099ee <_putc_r+0x5a>
 80099c8:	b2eb      	uxtb	r3, r5
 80099ca:	2b0a      	cmp	r3, #10
 80099cc:	d00f      	beq.n	80099ee <_putc_r+0x5a>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	1c5a      	adds	r2, r3, #1
 80099d2:	6022      	str	r2, [r4, #0]
 80099d4:	701d      	strb	r5, [r3, #0]
 80099d6:	b2ed      	uxtb	r5, r5
 80099d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099da:	07da      	lsls	r2, r3, #31
 80099dc:	d405      	bmi.n	80099ea <_putc_r+0x56>
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	059b      	lsls	r3, r3, #22
 80099e2:	d402      	bmi.n	80099ea <_putc_r+0x56>
 80099e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099e6:	f7ff fb51 	bl	800908c <__retarget_lock_release_recursive>
 80099ea:	4628      	mov	r0, r5
 80099ec:	bd70      	pop	{r4, r5, r6, pc}
 80099ee:	4629      	mov	r1, r5
 80099f0:	4622      	mov	r2, r4
 80099f2:	4630      	mov	r0, r6
 80099f4:	f000 f802 	bl	80099fc <__swbuf_r>
 80099f8:	4605      	mov	r5, r0
 80099fa:	e7ed      	b.n	80099d8 <_putc_r+0x44>

080099fc <__swbuf_r>:
 80099fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fe:	460e      	mov	r6, r1
 8009a00:	4614      	mov	r4, r2
 8009a02:	4605      	mov	r5, r0
 8009a04:	b118      	cbz	r0, 8009a0e <__swbuf_r+0x12>
 8009a06:	6a03      	ldr	r3, [r0, #32]
 8009a08:	b90b      	cbnz	r3, 8009a0e <__swbuf_r+0x12>
 8009a0a:	f7ff fa31 	bl	8008e70 <__sinit>
 8009a0e:	69a3      	ldr	r3, [r4, #24]
 8009a10:	60a3      	str	r3, [r4, #8]
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	071a      	lsls	r2, r3, #28
 8009a16:	d501      	bpl.n	8009a1c <__swbuf_r+0x20>
 8009a18:	6923      	ldr	r3, [r4, #16]
 8009a1a:	b943      	cbnz	r3, 8009a2e <__swbuf_r+0x32>
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f000 f82a 	bl	8009a78 <__swsetup_r>
 8009a24:	b118      	cbz	r0, 8009a2e <__swbuf_r+0x32>
 8009a26:	f04f 37ff 	mov.w	r7, #4294967295
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	6922      	ldr	r2, [r4, #16]
 8009a32:	1a98      	subs	r0, r3, r2
 8009a34:	6963      	ldr	r3, [r4, #20]
 8009a36:	b2f6      	uxtb	r6, r6
 8009a38:	4283      	cmp	r3, r0
 8009a3a:	4637      	mov	r7, r6
 8009a3c:	dc05      	bgt.n	8009a4a <__swbuf_r+0x4e>
 8009a3e:	4621      	mov	r1, r4
 8009a40:	4628      	mov	r0, r5
 8009a42:	f7ff ff7f 	bl	8009944 <_fflush_r>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d1ed      	bne.n	8009a26 <__swbuf_r+0x2a>
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	60a3      	str	r3, [r4, #8]
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	6022      	str	r2, [r4, #0]
 8009a56:	701e      	strb	r6, [r3, #0]
 8009a58:	6962      	ldr	r2, [r4, #20]
 8009a5a:	1c43      	adds	r3, r0, #1
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d004      	beq.n	8009a6a <__swbuf_r+0x6e>
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	07db      	lsls	r3, r3, #31
 8009a64:	d5e1      	bpl.n	8009a2a <__swbuf_r+0x2e>
 8009a66:	2e0a      	cmp	r6, #10
 8009a68:	d1df      	bne.n	8009a2a <__swbuf_r+0x2e>
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	f7ff ff69 	bl	8009944 <_fflush_r>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d0d9      	beq.n	8009a2a <__swbuf_r+0x2e>
 8009a76:	e7d6      	b.n	8009a26 <__swbuf_r+0x2a>

08009a78 <__swsetup_r>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	4b29      	ldr	r3, [pc, #164]	@ (8009b20 <__swsetup_r+0xa8>)
 8009a7c:	4605      	mov	r5, r0
 8009a7e:	6818      	ldr	r0, [r3, #0]
 8009a80:	460c      	mov	r4, r1
 8009a82:	b118      	cbz	r0, 8009a8c <__swsetup_r+0x14>
 8009a84:	6a03      	ldr	r3, [r0, #32]
 8009a86:	b90b      	cbnz	r3, 8009a8c <__swsetup_r+0x14>
 8009a88:	f7ff f9f2 	bl	8008e70 <__sinit>
 8009a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a90:	0719      	lsls	r1, r3, #28
 8009a92:	d422      	bmi.n	8009ada <__swsetup_r+0x62>
 8009a94:	06da      	lsls	r2, r3, #27
 8009a96:	d407      	bmi.n	8009aa8 <__swsetup_r+0x30>
 8009a98:	2209      	movs	r2, #9
 8009a9a:	602a      	str	r2, [r5, #0]
 8009a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aa0:	81a3      	strh	r3, [r4, #12]
 8009aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa6:	e033      	b.n	8009b10 <__swsetup_r+0x98>
 8009aa8:	0758      	lsls	r0, r3, #29
 8009aaa:	d512      	bpl.n	8009ad2 <__swsetup_r+0x5a>
 8009aac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009aae:	b141      	cbz	r1, 8009ac2 <__swsetup_r+0x4a>
 8009ab0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ab4:	4299      	cmp	r1, r3
 8009ab6:	d002      	beq.n	8009abe <__swsetup_r+0x46>
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f7ff faf7 	bl	80090ac <_free_r>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ac2:	89a3      	ldrh	r3, [r4, #12]
 8009ac4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ac8:	81a3      	strh	r3, [r4, #12]
 8009aca:	2300      	movs	r3, #0
 8009acc:	6063      	str	r3, [r4, #4]
 8009ace:	6923      	ldr	r3, [r4, #16]
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	f043 0308 	orr.w	r3, r3, #8
 8009ad8:	81a3      	strh	r3, [r4, #12]
 8009ada:	6923      	ldr	r3, [r4, #16]
 8009adc:	b94b      	cbnz	r3, 8009af2 <__swsetup_r+0x7a>
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ae8:	d003      	beq.n	8009af2 <__swsetup_r+0x7a>
 8009aea:	4621      	mov	r1, r4
 8009aec:	4628      	mov	r0, r5
 8009aee:	f000 f84f 	bl	8009b90 <__smakebuf_r>
 8009af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009af6:	f013 0201 	ands.w	r2, r3, #1
 8009afa:	d00a      	beq.n	8009b12 <__swsetup_r+0x9a>
 8009afc:	2200      	movs	r2, #0
 8009afe:	60a2      	str	r2, [r4, #8]
 8009b00:	6962      	ldr	r2, [r4, #20]
 8009b02:	4252      	negs	r2, r2
 8009b04:	61a2      	str	r2, [r4, #24]
 8009b06:	6922      	ldr	r2, [r4, #16]
 8009b08:	b942      	cbnz	r2, 8009b1c <__swsetup_r+0xa4>
 8009b0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b0e:	d1c5      	bne.n	8009a9c <__swsetup_r+0x24>
 8009b10:	bd38      	pop	{r3, r4, r5, pc}
 8009b12:	0799      	lsls	r1, r3, #30
 8009b14:	bf58      	it	pl
 8009b16:	6962      	ldrpl	r2, [r4, #20]
 8009b18:	60a2      	str	r2, [r4, #8]
 8009b1a:	e7f4      	b.n	8009b06 <__swsetup_r+0x8e>
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	e7f7      	b.n	8009b10 <__swsetup_r+0x98>
 8009b20:	20000020 	.word	0x20000020

08009b24 <_sbrk_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4d06      	ldr	r5, [pc, #24]	@ (8009b40 <_sbrk_r+0x1c>)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	602b      	str	r3, [r5, #0]
 8009b30:	f7f7 f97c 	bl	8000e2c <_sbrk>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d102      	bne.n	8009b3e <_sbrk_r+0x1a>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	b103      	cbz	r3, 8009b3e <_sbrk_r+0x1a>
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	20001e60 	.word	0x20001e60

08009b44 <__swhatbuf_r>:
 8009b44:	b570      	push	{r4, r5, r6, lr}
 8009b46:	460c      	mov	r4, r1
 8009b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b4c:	2900      	cmp	r1, #0
 8009b4e:	b096      	sub	sp, #88	@ 0x58
 8009b50:	4615      	mov	r5, r2
 8009b52:	461e      	mov	r6, r3
 8009b54:	da0d      	bge.n	8009b72 <__swhatbuf_r+0x2e>
 8009b56:	89a3      	ldrh	r3, [r4, #12]
 8009b58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b5c:	f04f 0100 	mov.w	r1, #0
 8009b60:	bf14      	ite	ne
 8009b62:	2340      	movne	r3, #64	@ 0x40
 8009b64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b68:	2000      	movs	r0, #0
 8009b6a:	6031      	str	r1, [r6, #0]
 8009b6c:	602b      	str	r3, [r5, #0]
 8009b6e:	b016      	add	sp, #88	@ 0x58
 8009b70:	bd70      	pop	{r4, r5, r6, pc}
 8009b72:	466a      	mov	r2, sp
 8009b74:	f000 f848 	bl	8009c08 <_fstat_r>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	dbec      	blt.n	8009b56 <__swhatbuf_r+0x12>
 8009b7c:	9901      	ldr	r1, [sp, #4]
 8009b7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b86:	4259      	negs	r1, r3
 8009b88:	4159      	adcs	r1, r3
 8009b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b8e:	e7eb      	b.n	8009b68 <__swhatbuf_r+0x24>

08009b90 <__smakebuf_r>:
 8009b90:	898b      	ldrh	r3, [r1, #12]
 8009b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b94:	079d      	lsls	r5, r3, #30
 8009b96:	4606      	mov	r6, r0
 8009b98:	460c      	mov	r4, r1
 8009b9a:	d507      	bpl.n	8009bac <__smakebuf_r+0x1c>
 8009b9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	6123      	str	r3, [r4, #16]
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	6163      	str	r3, [r4, #20]
 8009ba8:	b003      	add	sp, #12
 8009baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bac:	ab01      	add	r3, sp, #4
 8009bae:	466a      	mov	r2, sp
 8009bb0:	f7ff ffc8 	bl	8009b44 <__swhatbuf_r>
 8009bb4:	9f00      	ldr	r7, [sp, #0]
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	4639      	mov	r1, r7
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7ff fae2 	bl	8009184 <_malloc_r>
 8009bc0:	b948      	cbnz	r0, 8009bd6 <__smakebuf_r+0x46>
 8009bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc6:	059a      	lsls	r2, r3, #22
 8009bc8:	d4ee      	bmi.n	8009ba8 <__smakebuf_r+0x18>
 8009bca:	f023 0303 	bic.w	r3, r3, #3
 8009bce:	f043 0302 	orr.w	r3, r3, #2
 8009bd2:	81a3      	strh	r3, [r4, #12]
 8009bd4:	e7e2      	b.n	8009b9c <__smakebuf_r+0xc>
 8009bd6:	89a3      	ldrh	r3, [r4, #12]
 8009bd8:	6020      	str	r0, [r4, #0]
 8009bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bde:	81a3      	strh	r3, [r4, #12]
 8009be0:	9b01      	ldr	r3, [sp, #4]
 8009be2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009be6:	b15b      	cbz	r3, 8009c00 <__smakebuf_r+0x70>
 8009be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bec:	4630      	mov	r0, r6
 8009bee:	f000 f81d 	bl	8009c2c <_isatty_r>
 8009bf2:	b128      	cbz	r0, 8009c00 <__smakebuf_r+0x70>
 8009bf4:	89a3      	ldrh	r3, [r4, #12]
 8009bf6:	f023 0303 	bic.w	r3, r3, #3
 8009bfa:	f043 0301 	orr.w	r3, r3, #1
 8009bfe:	81a3      	strh	r3, [r4, #12]
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	431d      	orrs	r5, r3
 8009c04:	81a5      	strh	r5, [r4, #12]
 8009c06:	e7cf      	b.n	8009ba8 <__smakebuf_r+0x18>

08009c08 <_fstat_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d07      	ldr	r5, [pc, #28]	@ (8009c28 <_fstat_r+0x20>)
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4604      	mov	r4, r0
 8009c10:	4608      	mov	r0, r1
 8009c12:	4611      	mov	r1, r2
 8009c14:	602b      	str	r3, [r5, #0]
 8009c16:	f7f7 f8e1 	bl	8000ddc <_fstat>
 8009c1a:	1c43      	adds	r3, r0, #1
 8009c1c:	d102      	bne.n	8009c24 <_fstat_r+0x1c>
 8009c1e:	682b      	ldr	r3, [r5, #0]
 8009c20:	b103      	cbz	r3, 8009c24 <_fstat_r+0x1c>
 8009c22:	6023      	str	r3, [r4, #0]
 8009c24:	bd38      	pop	{r3, r4, r5, pc}
 8009c26:	bf00      	nop
 8009c28:	20001e60 	.word	0x20001e60

08009c2c <_isatty_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4d06      	ldr	r5, [pc, #24]	@ (8009c48 <_isatty_r+0x1c>)
 8009c30:	2300      	movs	r3, #0
 8009c32:	4604      	mov	r4, r0
 8009c34:	4608      	mov	r0, r1
 8009c36:	602b      	str	r3, [r5, #0]
 8009c38:	f7f7 f8e0 	bl	8000dfc <_isatty>
 8009c3c:	1c43      	adds	r3, r0, #1
 8009c3e:	d102      	bne.n	8009c46 <_isatty_r+0x1a>
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	b103      	cbz	r3, 8009c46 <_isatty_r+0x1a>
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	bd38      	pop	{r3, r4, r5, pc}
 8009c48:	20001e60 	.word	0x20001e60

08009c4c <_init>:
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4e:	bf00      	nop
 8009c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c52:	bc08      	pop	{r3}
 8009c54:	469e      	mov	lr, r3
 8009c56:	4770      	bx	lr

08009c58 <_fini>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	bf00      	nop
 8009c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5e:	bc08      	pop	{r3}
 8009c60:	469e      	mov	lr, r3
 8009c62:	4770      	bx	lr
