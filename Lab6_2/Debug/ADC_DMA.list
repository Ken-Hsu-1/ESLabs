
ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008260  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080083f0  080083f0  000093f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084b4  080084b4  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  080084b4  080084b4  000094b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084bc  080084bc  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084bc  080084bc  000094bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084c0  080084c0  000094c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080084c4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001044  20000068  0800852c  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010ac  0800852c  0000a0ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002386d  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044df  00000000  00000000  0002d905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f0  00000000  00000000  00031de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b52  00000000  00000000  000340d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005e5a  00000000  00000000  00035c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028468  00000000  00000000  0003ba84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a98e  00000000  00000000  00063eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e87a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ff8  00000000  00000000  0017e8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001888b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083d8 	.word	0x080083d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080083d8 	.word	0x080083d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__NVIC_SetVector>:
           VTOR must been relocated to SRAM before.
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <__NVIC_SetVector+0x34>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	60fb      	str	r3, [r7, #12]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	3310      	adds	r3, #16
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	461a      	mov	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4413      	add	r3, r2
 8000580:	461a      	mov	r2, r3
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	6013      	str	r3, [r2, #0]
  /* ARM Application Note 321 states that the M4 does not require the architectural barrier */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005a6:	2201      	movs	r2, #1
 80005a8:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <__io_putchar+0x20>)
 80005aa:	f005 fd67 	bl	800607c <HAL_UART_Transmit>
	return ch;
 80005ae:	687b      	ldr	r3, [r7, #4]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200001b8 	.word	0x200001b8

080005bc <HAL_ADC_MspInit>:


void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <HAL_ADC_MspInit+0x38>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d10b      	bne.n	80005e6 <HAL_ADC_MspInit+0x2a>
    {
        /* Peripheral clock enable */
        __HAL_RCC_ADC_CLK_ENABLE();
 80005ce:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a09      	ldr	r2, [pc, #36]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    }

}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	50040000 	.word	0x50040000
 80005f8:	40021000 	.word	0x40021000

080005fc <ADC1_Init>:
    }

}

void ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
    hadc1.Instance = ADC1;
 800061e:	4b35      	ldr	r3, [pc, #212]	@ (80006f4 <ADC1_Init+0xf8>)
 8000620:	4a35      	ldr	r2, [pc, #212]	@ (80006f8 <ADC1_Init+0xfc>)
 8000622:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;//ADC_CLOCK_ASYNC_DIV1;
 8000624:	4b33      	ldr	r3, [pc, #204]	@ (80006f4 <ADC1_Init+0xf8>)
 8000626:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800062a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b31      	ldr	r3, [pc, #196]	@ (80006f4 <ADC1_Init+0xf8>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b30      	ldr	r3, [pc, #192]	@ (80006f4 <ADC1_Init+0xf8>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000638:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <ADC1_Init+0xf8>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <ADC1_Init+0xf8>)
 8000640:	2204      	movs	r2, #4
 8000642:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <ADC1_Init+0xf8>)
 8000646:	2200      	movs	r2, #0
 8000648:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 800064a:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <ADC1_Init+0xf8>)
 800064c:	2200      	movs	r2, #0
 800064e:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <ADC1_Init+0xf8>)
 8000652:	2201      	movs	r2, #1
 8000654:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000656:	4b27      	ldr	r3, [pc, #156]	@ (80006f4 <ADC1_Init+0xf8>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800065e:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <ADC1_Init+0xf8>)
 8000660:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000664:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000666:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <ADC1_Init+0xf8>)
 8000668:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <ADC1_Init+0xf8>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <ADC1_Init+0xf8>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <ADC1_Init+0xf8>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	481b      	ldr	r0, [pc, #108]	@ (80006f4 <ADC1_Init+0xf8>)
 8000686:	f001 fb5f 	bl	8001d48 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <ADC1_Init+0x98>
    {
        Error_Handler();
 8000690:	f000 fcde 	bl	8001050 <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000694:	217f      	movs	r1, #127	@ 0x7f
 8000696:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <ADC1_Init+0xf8>)
 8000698:	f002 fb2a 	bl	8002cf0 <HAL_ADCEx_Calibration_Start>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <ADC1_Init+0xaa>
    {
        Error_Handler();
 80006a2:	f000 fcd5 	bl	8001050 <Error_Handler>
    }

  /** Configure the ADC multi-mode
  */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	4810      	ldr	r0, [pc, #64]	@ (80006f4 <ADC1_Init+0xf8>)
 80006b2:	f002 fb7d 	bl	8002db0 <HAL_ADCEx_MultiModeConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <ADC1_Init+0xc4>
    {
        Error_Handler();
 80006bc:	f000 fcc8 	bl	8001050 <Error_Handler>
    }

  /** Configure Regular Channel
  */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <ADC1_Init+0x100>)
 80006c2:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c4:	2306      	movs	r3, #6
 80006c6:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;//ADC_SAMPLETIME_247CYCLES_5;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006cc:	237f      	movs	r3, #127	@ 0x7f
 80006ce:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d0:	2304      	movs	r3, #4
 80006d2:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <ADC1_Init+0xf8>)
 80006de:	f001 fd49 	bl	8002174 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <ADC1_Init+0xf0>
    {
        Error_Handler();
 80006e8:	f000 fcb2 	bl	8001050 <Error_Handler>
    }

}
 80006ec:	bf00      	nop
 80006ee:	3728      	adds	r7, #40	@ 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200007f8 	.word	0x200007f8
 80006f8:	50040000 	.word	0x50040000
 80006fc:	c7520000 	.word	0xc7520000

08000700 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	//to do: inform RTOS task to print out sensor data
	printf("123");
 8000708:	4803      	ldr	r0, [pc, #12]	@ (8000718 <HAL_ADC_ConvCpltCallback+0x18>)
 800070a:	f006 ff99 	bl	8007640 <iprintf>
	//half = 0;
	//osSemaphoreRelease(DMAprintHandle);
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	08008408 	.word	0x08008408

0800071c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    //to do: inform RTOS task to print out sensor data
	printf("456");
 8000724:	4803      	ldr	r0, [pc, #12]	@ (8000734 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8000726:	f006 ff8b 	bl	8007640 <iprintf>
	//half = 1;
	//osSemaphoreRelease(DMAprintHandle);
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	0800840c 	.word	0x0800840c

08000738 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    SET_BIT(hadc1.Instance->CFGR, ADC_CFGR_DMACFG);
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <DMA1_Channel1_IRQHandler+0x20>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	68da      	ldr	r2, [r3, #12]
 8000742:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <DMA1_Channel1_IRQHandler+0x20>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f042 0202 	orr.w	r2, r2, #2
 800074a:	60da      	str	r2, [r3, #12]
    HAL_DMA_IRQHandler(&hdma1);
 800074c:	4803      	ldr	r0, [pc, #12]	@ (800075c <DMA1_Channel1_IRQHandler+0x24>)
 800074e:	f002 ff15 	bl	800357c <HAL_DMA_IRQHandler>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200007f8 	.word	0x200007f8
 800075c:	2000085c 	.word	0x2000085c

08000760 <ADC1_DMA1CH1_init>:

void ADC1_DMA1CH1_init()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000766:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <ADC1_DMA1CH1_init+0x98>)
 8000768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800076a:	4a23      	ldr	r2, [pc, #140]	@ (80007f8 <ADC1_DMA1CH1_init+0x98>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6493      	str	r3, [r2, #72]	@ 0x48
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <ADC1_DMA1CH1_init+0x98>)
 8000774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

    hdma1.Instance = DMA1_Channel1;
 800077e:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <ADC1_DMA1CH1_init+0x9c>)
 8000780:	4a1f      	ldr	r2, [pc, #124]	@ (8000800 <ADC1_DMA1CH1_init+0xa0>)
 8000782:	601a      	str	r2, [r3, #0]
    hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000784:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <ADC1_DMA1CH1_init+0x9c>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
    hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <ADC1_DMA1CH1_init+0x9c>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
    hdma1.Init.MemInc = DMA_MINC_ENABLE;
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <ADC1_DMA1CH1_init+0x9c>)
 8000792:	2280      	movs	r2, #128	@ 0x80
 8000794:	611a      	str	r2, [r3, #16]
    hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <ADC1_DMA1CH1_init+0x9c>)
 8000798:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800079c:	615a      	str	r2, [r3, #20]
    hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800079e:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <ADC1_DMA1CH1_init+0x9c>)
 80007a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007a4:	619a      	str	r2, [r3, #24]
    hdma1.Init.Mode = DMA_CIRCULAR;
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <ADC1_DMA1CH1_init+0x9c>)
 80007a8:	2220      	movs	r2, #32
 80007aa:	61da      	str	r2, [r3, #28]
    hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 80007ac:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <ADC1_DMA1CH1_init+0x9c>)
 80007ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007b2:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma1) != HAL_OK)
 80007b4:	4811      	ldr	r0, [pc, #68]	@ (80007fc <ADC1_DMA1CH1_init+0x9c>)
 80007b6:	f002 fdc9 	bl	800334c <HAL_DMA_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <ADC1_DMA1CH1_init+0x64>
    {
        Error_Handler();
 80007c0:	f000 fc46 	bl	8001050 <Error_Handler>
    }

    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <ADC1_DMA1CH1_init+0xa4>)
 80007c6:	4a0d      	ldr	r2, [pc, #52]	@ (80007fc <ADC1_DMA1CH1_init+0x9c>)
 80007c8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <ADC1_DMA1CH1_init+0x9c>)
 80007cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000804 <ADC1_DMA1CH1_init+0xa4>)
 80007ce:	629a      	str	r2, [r3, #40]	@ 0x28

    ADC1_Init();
 80007d0:	f7ff ff14 	bl	80005fc <ADC1_Init>

    NVIC_SetVector(DMA1_Channel1_IRQn, (uint32_t)&DMA1_Channel1_IRQHandler);
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <ADC1_DMA1CH1_init+0xa8>)
 80007d6:	4619      	mov	r1, r3
 80007d8:	200b      	movs	r0, #11
 80007da:	f7ff fec1 	bl	8000560 <__NVIC_SetVector>
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	200b      	movs	r0, #11
 80007e4:	f002 fc6f 	bl	80030c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e8:	200b      	movs	r0, #11
 80007ea:	f002 fc88 	bl	80030fe <HAL_NVIC_EnableIRQ>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000
 80007fc:	2000085c 	.word	0x2000085c
 8000800:	40020008 	.word	0x40020008
 8000804:	200007f8 	.word	0x200007f8
 8000808:	08000739 	.word	0x08000739

0800080c <HAL_TIM_Base_MspInit>:



void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance == TIM1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <HAL_TIM_Base_MspInit+0x38>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d10b      	bne.n	8000836 <HAL_TIM_Base_MspInit+0x2a>
    {
        __HAL_RCC_TIM1_CLK_ENABLE();
 800081e:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <HAL_TIM_Base_MspInit+0x3c>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000822:	4a09      	ldr	r2, [pc, #36]	@ (8000848 <HAL_TIM_Base_MspInit+0x3c>)
 8000824:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000828:	6613      	str	r3, [r2, #96]	@ 0x60
 800082a:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <HAL_TIM_Base_MspInit+0x3c>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40012c00 	.word	0x40012c00
 8000848:	40021000 	.word	0x40021000

0800084c <TIM1_Init>:
    }
}


static void TIM1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 800086a:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <TIM1_Init+0x98>)
 800086c:	4a1e      	ldr	r2, [pc, #120]	@ (80008e8 <TIM1_Init+0x9c>)
 800086e:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 4000 - 1;
 8000870:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <TIM1_Init+0x98>)
 8000872:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000876:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <TIM1_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 1000 - 1;
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <TIM1_Init+0x98>)
 8000880:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000884:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <TIM1_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <TIM1_Init+0x98>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000892:	4814      	ldr	r0, [pc, #80]	@ (80008e4 <TIM1_Init+0x98>)
 8000894:	f005 f84b 	bl	800592e <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <TIM1_Init+0x56>
    {
        Error_Handler();
 800089e:	f000 fbd7 	bl	8001050 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a6:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <TIM1_Init+0x98>)
 80008b0:	f005 f904 	bl	8005abc <HAL_TIM_ConfigClockSource>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <TIM1_Init+0x72>
    {
        Error_Handler();
 80008ba:	f000 fbc9 	bl	8001050 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008be:	2320      	movs	r3, #32
 80008c0:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	@ (80008e4 <TIM1_Init+0x98>)
 80008cc:	f005 fb00 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <TIM1_Init+0x8e>
    {
        Error_Handler();
 80008d6:	f000 fbbb 	bl	8001050 <Error_Handler>
    }
}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200007ac 	.word	0x200007ac
 80008e8:	40012c00 	.word	0x40012c00

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f0:	f000 ff95 	bl	800181e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f830 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f000 f9f8 	bl	8000cec <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80008fc:	f000 f88e 	bl	8000a1c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000900:	f000 f8c4 	bl	8000a8c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000904:	f000 f900 	bl	8000b08 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000908:	f000 f924 	bl	8000b54 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800090c:	f000 f960 	bl	8000bd0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000910:	f000 f98e 	bl	8000c30 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000914:	f000 f9bc 	bl	8000c90 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  TIM1_Init();
 8000918:	f7ff ff98 	bl	800084c <TIM1_Init>
  ADC1_DMA1CH1_init();
 800091c:	f7ff ff20 	bl	8000760 <ADC1_DMA1CH1_init>

  printf("Init conplete\n");
 8000920:	4808      	ldr	r0, [pc, #32]	@ (8000944 <main+0x58>)
 8000922:	f006 fef5 	bl	8007710 <puts>

  HAL_ADC_Start_DMA(&hadc1,(uint32_t *) &sample_buffer[0], SAMPLE_BUFFER_SIZE);
 8000926:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800092a:	4907      	ldr	r1, [pc, #28]	@ (8000948 <main+0x5c>)
 800092c:	4807      	ldr	r0, [pc, #28]	@ (800094c <main+0x60>)
 800092e:	f001 fb5b 	bl	8001fe8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8000932:	4807      	ldr	r0, [pc, #28]	@ (8000950 <main+0x64>)
 8000934:	f005 f852 	bl	80059dc <HAL_TIM_Base_Start_IT>

  printf("Start conplete\n");
 8000938:	4806      	ldr	r0, [pc, #24]	@ (8000954 <main+0x68>)
 800093a:	f006 fee9 	bl	8007710 <puts>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800093e:	bf00      	nop
 8000940:	e7fd      	b.n	800093e <main+0x52>
 8000942:	bf00      	nop
 8000944:	08008410 	.word	0x08008410
 8000948:	200008a4 	.word	0x200008a4
 800094c:	200007f8 	.word	0x200007f8
 8000950:	200007ac 	.word	0x200007ac
 8000954:	08008420 	.word	0x08008420

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b096      	sub	sp, #88	@ 0x58
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2244      	movs	r2, #68	@ 0x44
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f006 ffb2 	bl	80078d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800097a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800097e:	f003 fb45 	bl	800400c <HAL_PWREx_ControlVoltageScaling>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000988:	f000 fb62 	bl	8001050 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800098c:	f003 fb20 	bl	8003fd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000990:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <SystemClock_Config+0xc0>)
 8000992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000996:	4a20      	ldr	r2, [pc, #128]	@ (8000a18 <SystemClock_Config+0xc0>)
 8000998:	f023 0318 	bic.w	r3, r3, #24
 800099c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009a0:	2314      	movs	r3, #20
 80009a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009b0:	2360      	movs	r3, #96	@ 0x60
 80009b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b4:	2302      	movs	r3, #2
 80009b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009b8:	2301      	movs	r3, #1
 80009ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009bc:	2301      	movs	r3, #1
 80009be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009c0:	2328      	movs	r3, #40	@ 0x28
 80009c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009c4:	2307      	movs	r3, #7
 80009c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 fc3b 	bl	8004250 <HAL_RCC_OscConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009e0:	f000 fb36 	bl	8001050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	2303      	movs	r3, #3
 80009ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	2104      	movs	r1, #4
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 f803 	bl	8004a08 <HAL_RCC_ClockConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a08:	f000 fb22 	bl	8001050 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a0c:	f004 fd0a 	bl	8005424 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a10:	bf00      	nop
 8000a12:	3758      	adds	r7, #88	@ 0x58
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000

08000a1c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a20:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a22:	4a19      	ldr	r2, [pc, #100]	@ (8000a88 <MX_DFSDM1_Init+0x6c>)
 8000a24:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000a26:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000a32:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a4a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a54:	2204      	movs	r2, #4
 8000a56:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000a64:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <MX_DFSDM1_Init+0x68>)
 8000a72:	f002 fb5f 	bl	8003134 <HAL_DFSDM_ChannelInit>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000a7c:	f000 fae8 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000084 	.word	0x20000084
 8000a88:	40016020 	.word	0x40016020

08000a8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000a92:	4a1c      	ldr	r2, [pc, #112]	@ (8000b04 <MX_I2C2_Init+0x78>)
 8000a94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000a98:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000a9c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000abc:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ac8:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000aca:	f003 f81c 	bl	8003b06 <HAL_I2C_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ad4:	f000 fabc 	bl	8001050 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4809      	ldr	r0, [pc, #36]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000adc:	f003 f8ae 	bl	8003c3c <HAL_I2CEx_ConfigAnalogFilter>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000ae6:	f000 fab3 	bl	8001050 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000aee:	f003 f8f0 	bl	8003cd2 <HAL_I2CEx_ConfigDigitalFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000af8:	f000 faaa 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000bc 	.word	0x200000bc
 8000b04:	40005800 	.word	0x40005800

08000b08 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_QUADSPI_Init+0x44>)
 8000b0e:	4a10      	ldr	r2, [pc, #64]	@ (8000b50 <MX_QUADSPI_Init+0x48>)
 8000b10:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_QUADSPI_Init+0x44>)
 8000b14:	2202      	movs	r2, #2
 8000b16:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_QUADSPI_Init+0x44>)
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_QUADSPI_Init+0x44>)
 8000b20:	2210      	movs	r2, #16
 8000b22:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_QUADSPI_Init+0x44>)
 8000b26:	2217      	movs	r2, #23
 8000b28:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_QUADSPI_Init+0x44>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_QUADSPI_Init+0x44>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_QUADSPI_Init+0x44>)
 8000b38:	f003 face 	bl	80040d8 <HAL_QSPI_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000b42:	f000 fa85 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000110 	.word	0x20000110
 8000b50:	a0001000 	.word	0xa0001000

08000b54 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bcc <MX_SPI3_Init+0x78>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000b60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b66:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000b6e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000b72:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b74:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b86:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000bae:	2208      	movs	r2, #8
 8000bb0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_SPI3_Init+0x74>)
 8000bb4:	f004 fe18 	bl	80057e8 <HAL_SPI_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f000 fa47 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000154 	.word	0x20000154
 8000bcc:	40003c00 	.word	0x40003c00

08000bd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bd6:	4a15      	ldr	r2, [pc, #84]	@ (8000c2c <MX_USART1_UART_Init+0x5c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bda:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c14:	f005 f9e4 	bl	8005fe0 <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 fa17 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200001b8 	.word	0x200001b8
 8000c2c:	40013800 	.word	0x40013800

08000c30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c36:	4a15      	ldr	r2, [pc, #84]	@ (8000c8c <MX_USART3_UART_Init+0x5c>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c74:	f005 f9b4 	bl	8005fe0 <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f000 f9e7 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000240 	.word	0x20000240
 8000c8c:	40004800 	.word	0x40004800

08000c90 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c94:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9e:	2206      	movs	r2, #6
 8000ca0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000caa:	2202      	movs	r2, #2
 8000cac:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd4:	f003 f849 	bl	8003d6a <HAL_PCD_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cde:	f000 f9b7 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200002c8 	.word	0x200002c8

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d02:	4bbd      	ldr	r3, [pc, #756]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	4abc      	ldr	r2, [pc, #752]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0e:	4bba      	ldr	r3, [pc, #744]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4bb7      	ldr	r3, [pc, #732]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	4ab6      	ldr	r2, [pc, #728]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d26:	4bb4      	ldr	r3, [pc, #720]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4bb1      	ldr	r3, [pc, #708]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d36:	4ab0      	ldr	r2, [pc, #704]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3e:	4bae      	ldr	r3, [pc, #696]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	4bab      	ldr	r3, [pc, #684]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	4aaa      	ldr	r2, [pc, #680]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d56:	4ba8      	ldr	r3, [pc, #672]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	4ba5      	ldr	r3, [pc, #660]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	4aa4      	ldr	r2, [pc, #656]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6e:	4ba2      	ldr	r3, [pc, #648]	@ (8000ff8 <MX_GPIO_Init+0x30c>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000d80:	489e      	ldr	r0, [pc, #632]	@ (8000ffc <MX_GPIO_Init+0x310>)
 8000d82:	f002 fe85 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d90:	f002 fe7e 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d94:	2200      	movs	r2, #0
 8000d96:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000d9a:	4899      	ldr	r0, [pc, #612]	@ (8001000 <MX_GPIO_Init+0x314>)
 8000d9c:	f002 fe78 	bl	8003a90 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000da6:	4897      	ldr	r0, [pc, #604]	@ (8001004 <MX_GPIO_Init+0x318>)
 8000da8:	f002 fe72 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000db2:	4894      	ldr	r0, [pc, #592]	@ (8001004 <MX_GPIO_Init+0x318>)
 8000db4:	f002 fe6c 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000dbe:	4892      	ldr	r0, [pc, #584]	@ (8001008 <MX_GPIO_Init+0x31c>)
 8000dc0:	f002 fe66 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2120      	movs	r1, #32
 8000dc8:	488d      	ldr	r0, [pc, #564]	@ (8001000 <MX_GPIO_Init+0x314>)
 8000dca:	f002 fe61 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	488a      	ldr	r0, [pc, #552]	@ (8000ffc <MX_GPIO_Init+0x310>)
 8000dd4:	f002 fe5c 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000dd8:	f240 1315 	movw	r3, #277	@ 0x115
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4882      	ldr	r0, [pc, #520]	@ (8000ffc <MX_GPIO_Init+0x310>)
 8000df2:	f002 fca3 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000df6:	236a      	movs	r3, #106	@ 0x6a
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	487c      	ldr	r0, [pc, #496]	@ (8000ffc <MX_GPIO_Init+0x310>)
 8000e0c:	f002 fc96 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000e10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e16:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4878      	ldr	r0, [pc, #480]	@ (8001008 <MX_GPIO_Init+0x31c>)
 8000e28:	f002 fc88 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000e2c:	233f      	movs	r3, #63	@ 0x3f
 8000e2e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e30:	230b      	movs	r3, #11
 8000e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4872      	ldr	r0, [pc, #456]	@ (8001008 <MX_GPIO_Init+0x31c>)
 8000e40:	f002 fc7c 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000e44:	2303      	movs	r3, #3
 8000e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e54:	2308      	movs	r3, #8
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e62:	f002 fc6b 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000e66:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e82:	f002 fc5b 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000e86:	2308      	movs	r3, #8
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e96:	2301      	movs	r3, #1
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f002 fc4a 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eac:	230b      	movs	r3, #11
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ebe:	f002 fc3d 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000ec2:	23e0      	movs	r3, #224	@ 0xe0
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee0:	f002 fc2c 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4841      	ldr	r0, [pc, #260]	@ (8001000 <MX_GPIO_Init+0x314>)
 8000efa:	f002 fc1f 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000efe:	2302      	movs	r3, #2
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f02:	230b      	movs	r3, #11
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	483b      	ldr	r0, [pc, #236]	@ (8001000 <MX_GPIO_Init+0x314>)
 8000f12:	f002 fc13 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f16:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000f1a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4834      	ldr	r0, [pc, #208]	@ (8001000 <MX_GPIO_Init+0x314>)
 8000f30:	f002 fc04 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000f34:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000f38:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	482e      	ldr	r0, [pc, #184]	@ (8001004 <MX_GPIO_Init+0x318>)
 8000f4c:	f002 fbf6 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000f50:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4826      	ldr	r0, [pc, #152]	@ (8001004 <MX_GPIO_Init+0x318>)
 8000f6a:	f002 fbe7 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f6e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4820      	ldr	r0, [pc, #128]	@ (8001008 <MX_GPIO_Init+0x31c>)
 8000f88:	f002 fbd8 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000f8c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4819      	ldr	r0, [pc, #100]	@ (8001008 <MX_GPIO_Init+0x31c>)
 8000fa4:	f002 fbca 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb8:	2305      	movs	r3, #5
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4810      	ldr	r0, [pc, #64]	@ (8001004 <MX_GPIO_Init+0x318>)
 8000fc4:	f002 fbba 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000fc8:	2378      	movs	r3, #120	@ 0x78
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4808      	ldr	r0, [pc, #32]	@ (8001004 <MX_GPIO_Init+0x318>)
 8000fe4:	f002 fbaa 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000fe8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fee:	2312      	movs	r3, #18
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e00a      	b.n	800100c <MX_GPIO_Init+0x320>
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48001000 	.word	0x48001000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000c00 	.word	0x48000c00
 8001008:	48000800 	.word	0x48000800
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001012:	2304      	movs	r3, #4
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	480b      	ldr	r0, [pc, #44]	@ (800104c <MX_GPIO_Init+0x360>)
 800101e:	f002 fb8d 	bl	800373c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2105      	movs	r1, #5
 8001026:	2017      	movs	r0, #23
 8001028:	f002 f84d 	bl	80030c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800102c:	2017      	movs	r0, #23
 800102e:	f002 f866 	bl	80030fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2105      	movs	r1, #5
 8001036:	2028      	movs	r0, #40	@ 0x28
 8001038:	f002 f845 	bl	80030c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800103c:	2028      	movs	r0, #40	@ 0x28
 800103e:	f002 f85e 	bl	80030fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	@ 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	48000400 	.word	0x48000400

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <Error_Handler+0x8>

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001066:	4a10      	ldr	r2, [pc, #64]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6613      	str	r3, [r2, #96]	@ 0x60
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <HAL_MspInit+0x4c>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001084:	6593      	str	r3, [r2, #88]	@ 0x58
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	210f      	movs	r1, #15
 8001096:	f06f 0001 	mvn.w	r0, #1
 800109a:	f002 f814 	bl	80030c6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0ac      	sub	sp, #176	@ 0xb0
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2288      	movs	r2, #136	@ 0x88
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f006 fbff 	bl	80078d0 <memset>
  if(DFSDM1_Init == 0)
 80010d2:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d142      	bne.n	8001160 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80010da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 feb0 	bl	8004e50 <HAL_RCCEx_PeriphCLKConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80010f6:	f7ff ffab 	bl	8001050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80010fa:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fe:	4a1b      	ldr	r2, [pc, #108]	@ (800116c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001100:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001104:	6613      	str	r3, [r2, #96]	@ 0x60
 8001106:	4b19      	ldr	r3, [pc, #100]	@ (800116c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800110a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001112:	4b16      	ldr	r3, [pc, #88]	@ (800116c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a15      	ldr	r2, [pc, #84]	@ (800116c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b13      	ldr	r3, [pc, #76]	@ (800116c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800112a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800112e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001144:	2306      	movs	r3, #6
 8001146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800114a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800114e:	4619      	mov	r1, r3
 8001150:	4807      	ldr	r0, [pc, #28]	@ (8001170 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001152:	f002 faf3 	bl	800373c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001156:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	4a02      	ldr	r2, [pc, #8]	@ (8001168 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800115e:	6013      	str	r3, [r2, #0]
  }

}
 8001160:	bf00      	nop
 8001162:	37b0      	adds	r7, #176	@ 0xb0
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000aa4 	.word	0x20000aa4
 800116c:	40021000 	.word	0x40021000
 8001170:	48001000 	.word	0x48001000

08001174 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0ac      	sub	sp, #176	@ 0xb0
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2288      	movs	r2, #136	@ 0x88
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f006 fb9b 	bl	80078d0 <memset>
  if(hi2c->Instance==I2C2)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a21      	ldr	r2, [pc, #132]	@ (8001224 <HAL_I2C_MspInit+0xb0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d13b      	bne.n	800121c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011a4:	2380      	movs	r3, #128	@ 0x80
 80011a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fe4d 	bl	8004e50 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011bc:	f7ff ff48 	bl	8001050 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <HAL_I2C_MspInit+0xb4>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c4:	4a18      	ldr	r2, [pc, #96]	@ (8001228 <HAL_I2C_MspInit+0xb4>)
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011cc:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <HAL_I2C_MspInit+0xb4>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e0:	2312      	movs	r3, #18
 80011e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011f2:	2304      	movs	r3, #4
 80011f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011fc:	4619      	mov	r1, r3
 80011fe:	480b      	ldr	r0, [pc, #44]	@ (800122c <HAL_I2C_MspInit+0xb8>)
 8001200:	f002 fa9c 	bl	800373c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <HAL_I2C_MspInit+0xb4>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001208:	4a07      	ldr	r2, [pc, #28]	@ (8001228 <HAL_I2C_MspInit+0xb4>)
 800120a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800120e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001210:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <HAL_I2C_MspInit+0xb4>)
 8001212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001214:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800121c:	bf00      	nop
 800121e:	37b0      	adds	r7, #176	@ 0xb0
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40005800 	.word	0x40005800
 8001228:	40021000 	.word	0x40021000
 800122c:	48000400 	.word	0x48000400

08001230 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <HAL_QSPI_MspInit+0x7c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d128      	bne.n	80012a4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001252:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <HAL_QSPI_MspInit+0x80>)
 8001254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001256:	4a16      	ldr	r2, [pc, #88]	@ (80012b0 <HAL_QSPI_MspInit+0x80>)
 8001258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800125c:	6513      	str	r3, [r2, #80]	@ 0x50
 800125e:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <HAL_QSPI_MspInit+0x80>)
 8001260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <HAL_QSPI_MspInit+0x80>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a10      	ldr	r2, [pc, #64]	@ (80012b0 <HAL_QSPI_MspInit+0x80>)
 8001270:	f043 0310 	orr.w	r3, r3, #16
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <HAL_QSPI_MspInit+0x80>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001282:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001286:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001294:	230a      	movs	r3, #10
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <HAL_QSPI_MspInit+0x84>)
 80012a0:	f002 fa4c 	bl	800373c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	@ 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	a0001000 	.word	0xa0001000
 80012b0:	40021000 	.word	0x40021000
 80012b4:	48001000 	.word	0x48001000

080012b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a17      	ldr	r2, [pc, #92]	@ (8001334 <HAL_SPI_MspInit+0x7c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d128      	bne.n	800132c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <HAL_SPI_MspInit+0x80>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012de:	4a16      	ldr	r2, [pc, #88]	@ (8001338 <HAL_SPI_MspInit+0x80>)
 80012e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <HAL_SPI_MspInit+0x80>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <HAL_SPI_MspInit+0x80>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	4a10      	ldr	r2, [pc, #64]	@ (8001338 <HAL_SPI_MspInit+0x80>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <HAL_SPI_MspInit+0x80>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800130a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800131c:	2306      	movs	r3, #6
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4805      	ldr	r0, [pc, #20]	@ (800133c <HAL_SPI_MspInit+0x84>)
 8001328:	f002 fa08 	bl	800373c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	@ 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40003c00 	.word	0x40003c00
 8001338:	40021000 	.word	0x40021000
 800133c:	48000800 	.word	0x48000800

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0ae      	sub	sp, #184	@ 0xb8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2288      	movs	r2, #136	@ 0x88
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f006 fab5 	bl	80078d0 <memset>
  if(huart->Instance==USART1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a42      	ldr	r2, [pc, #264]	@ (8001474 <HAL_UART_MspInit+0x134>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d13b      	bne.n	80013e8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001370:	2301      	movs	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001374:	2300      	movs	r3, #0
 8001376:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4618      	mov	r0, r3
 800137e:	f003 fd67 	bl	8004e50 <HAL_RCCEx_PeriphCLKConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001388:	f7ff fe62 	bl	8001050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800138c:	4b3a      	ldr	r3, [pc, #232]	@ (8001478 <HAL_UART_MspInit+0x138>)
 800138e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001390:	4a39      	ldr	r2, [pc, #228]	@ (8001478 <HAL_UART_MspInit+0x138>)
 8001392:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001396:	6613      	str	r3, [r2, #96]	@ 0x60
 8001398:	4b37      	ldr	r3, [pc, #220]	@ (8001478 <HAL_UART_MspInit+0x138>)
 800139a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800139c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b34      	ldr	r3, [pc, #208]	@ (8001478 <HAL_UART_MspInit+0x138>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	4a33      	ldr	r2, [pc, #204]	@ (8001478 <HAL_UART_MspInit+0x138>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b0:	4b31      	ldr	r3, [pc, #196]	@ (8001478 <HAL_UART_MspInit+0x138>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80013bc:	23c0      	movs	r3, #192	@ 0xc0
 80013be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013d4:	2307      	movs	r3, #7
 80013d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013de:	4619      	mov	r1, r3
 80013e0:	4826      	ldr	r0, [pc, #152]	@ (800147c <HAL_UART_MspInit+0x13c>)
 80013e2:	f002 f9ab 	bl	800373c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013e6:	e040      	b.n	800146a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a24      	ldr	r2, [pc, #144]	@ (8001480 <HAL_UART_MspInit+0x140>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d13b      	bne.n	800146a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013f2:	2304      	movs	r3, #4
 80013f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fd26 	bl	8004e50 <HAL_RCCEx_PeriphCLKConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800140a:	f7ff fe21 	bl	8001050 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <HAL_UART_MspInit+0x138>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	4a19      	ldr	r2, [pc, #100]	@ (8001478 <HAL_UART_MspInit+0x138>)
 8001414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001418:	6593      	str	r3, [r2, #88]	@ 0x58
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <HAL_UART_MspInit+0x138>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <HAL_UART_MspInit+0x138>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	4a13      	ldr	r2, [pc, #76]	@ (8001478 <HAL_UART_MspInit+0x138>)
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001432:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <HAL_UART_MspInit+0x138>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800143e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001442:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001458:	2307      	movs	r3, #7
 800145a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001462:	4619      	mov	r1, r3
 8001464:	4807      	ldr	r0, [pc, #28]	@ (8001484 <HAL_UART_MspInit+0x144>)
 8001466:	f002 f969 	bl	800373c <HAL_GPIO_Init>
}
 800146a:	bf00      	nop
 800146c:	37b8      	adds	r7, #184	@ 0xb8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40013800 	.word	0x40013800
 8001478:	40021000 	.word	0x40021000
 800147c:	48000400 	.word	0x48000400
 8001480:	40004800 	.word	0x40004800
 8001484:	48000c00 	.word	0x48000c00

08001488 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0ac      	sub	sp, #176	@ 0xb0
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2288      	movs	r2, #136	@ 0x88
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f006 fa11 	bl	80078d0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014b6:	d17c      	bne.n	80015b2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014be:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80014c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014ce:	2318      	movs	r3, #24
 80014d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014d2:	2307      	movs	r3, #7
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014da:	2302      	movs	r3, #2
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80014de:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014e2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fcb1 	bl	8004e50 <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80014f4:	f7ff fdac 	bl	8001050 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b30      	ldr	r3, [pc, #192]	@ (80015bc <HAL_PCD_MspInit+0x134>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fc:	4a2f      	ldr	r2, [pc, #188]	@ (80015bc <HAL_PCD_MspInit+0x134>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001504:	4b2d      	ldr	r3, [pc, #180]	@ (80015bc <HAL_PCD_MspInit+0x134>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001510:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001514:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001524:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152e:	f002 f905 	bl	800373c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001532:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001536:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800154c:	230a      	movs	r3, #10
 800154e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001556:	4619      	mov	r1, r3
 8001558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800155c:	f002 f8ee 	bl	800373c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001560:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <HAL_PCD_MspInit+0x134>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001564:	4a15      	ldr	r2, [pc, #84]	@ (80015bc <HAL_PCD_MspInit+0x134>)
 8001566:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800156a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156c:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <HAL_PCD_MspInit+0x134>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001570:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <HAL_PCD_MspInit+0x134>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d114      	bne.n	80015ae <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <HAL_PCD_MspInit+0x134>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <HAL_PCD_MspInit+0x134>)
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800158e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_PCD_MspInit+0x134>)
 8001592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800159c:	f002 fd8c 	bl	80040b8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_PCD_MspInit+0x134>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a4:	4a05      	ldr	r2, [pc, #20]	@ (80015bc <HAL_PCD_MspInit+0x134>)
 80015a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80015ac:	e001      	b.n	80015b2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80015ae:	f002 fd83 	bl	80040b8 <HAL_PWREx_EnableVddUSB>
}
 80015b2:	bf00      	nop
 80015b4:	37b0      	adds	r7, #176	@ 0xb0
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <NMI_Handler+0x4>

080015c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <MemManage_Handler+0x4>

080015d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fa:	f000 f965 	bl	80018c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015fe:	f005 fecd 	bl	800739c <xTaskGetSchedulerState>
 8001602:	4603      	mov	r3, r0
 8001604:	2b01      	cmp	r3, #1
 8001606:	d001      	beq.n	800160c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001608:	f005 ff36 	bl	8007478 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}

08001610 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001614:	2020      	movs	r0, #32
 8001616:	f002 fa53 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800161a:	2040      	movs	r0, #64	@ 0x40
 800161c:	f002 fa50 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001620:	2080      	movs	r0, #128	@ 0x80
 8001622:	f002 fa4d 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001626:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800162a:	f002 fa49 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}

08001632 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001636:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800163a:	f002 fa41 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800163e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001642:	f002 fa3d 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001646:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800164a:	f002 fa39 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800164e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001652:	f002 fa35 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001656:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800165a:	f002 fa31 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}

08001662 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e00a      	b.n	800168a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001674:	f3af 8000 	nop.w
 8001678:	4601      	mov	r1, r0
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	60ba      	str	r2, [r7, #8]
 8001680:	b2ca      	uxtb	r2, r1
 8001682:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3301      	adds	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbf0      	blt.n	8001674 <_read+0x12>
  }

  return len;
 8001692:	687b      	ldr	r3, [r7, #4]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e009      	b.n	80016c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	60ba      	str	r2, [r7, #8]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff6e 	bl	8000598 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	3301      	adds	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	dbf1      	blt.n	80016ae <_write+0x12>
  }
  return len;
 80016ca:	687b      	ldr	r3, [r7, #4]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_close>:

int _close(int file)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016fc:	605a      	str	r2, [r3, #4]
  return 0;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_isatty>:

int _isatty(int file)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001714:	2301      	movs	r3, #1
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001722:	b480      	push	{r7}
 8001724:	b085      	sub	sp, #20
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	@ (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f006 f8fe 	bl	800796c <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	@ (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20018000 	.word	0x20018000
 800179c:	00000400 	.word	0x00000400
 80017a0:	20000aa8 	.word	0x20000aa8
 80017a4:	200010b0 	.word	0x200010b0

080017a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <SystemInit+0x20>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017b2:	4a05      	ldr	r2, [pc, #20]	@ (80017c8 <SystemInit+0x20>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001804 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017d0:	f7ff ffea 	bl	80017a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d4:	480c      	ldr	r0, [pc, #48]	@ (8001808 <LoopForever+0x6>)
  ldr r1, =_edata
 80017d6:	490d      	ldr	r1, [pc, #52]	@ (800180c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <LoopForever+0xe>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001818 <LoopForever+0x16>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fa:	f006 f8bd 	bl	8007978 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017fe:	f7ff f875 	bl	80008ec <main>

08001802 <LoopForever>:

LoopForever:
    b LoopForever
 8001802:	e7fe      	b.n	8001802 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001804:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001810:	080084c4 	.word	0x080084c4
  ldr r2, =_sbss
 8001814:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001818:	200010ac 	.word	0x200010ac

0800181c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC1_2_IRQHandler>

0800181e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001828:	2003      	movs	r0, #3
 800182a:	f001 fc41 	bl	80030b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800182e:	200f      	movs	r0, #15
 8001830:	f000 f80e 	bl	8001850 <HAL_InitTick>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	71fb      	strb	r3, [r7, #7]
 800183e:	e001      	b.n	8001844 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001840:	f7ff fc0c 	bl	800105c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001844:	79fb      	ldrb	r3, [r7, #7]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800185c:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <HAL_InitTick+0x6c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d023      	beq.n	80018ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001864:	4b16      	ldr	r3, [pc, #88]	@ (80018c0 <HAL_InitTick+0x70>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <HAL_InitTick+0x6c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f001 fc4d 	bl	800311a <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10f      	bne.n	80018a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d809      	bhi.n	80018a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f001 fc17 	bl	80030c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001898:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <HAL_InitTick+0x74>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e007      	b.n	80018b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e004      	b.n	80018b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	e001      	b.n	80018b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000008 	.word	0x20000008
 80018c0:	20000000 	.word	0x20000000
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000aac 	.word	0x20000aac

080018f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	@ (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000aac 	.word	0x20000aac

08001908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff ffee 	bl	80018f0 <HAL_GetTick>
 8001914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d005      	beq.n	800192e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001922:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <HAL_Delay+0x44>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800192e:	bf00      	nop
 8001930:	f7ff ffde 	bl	80018f0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8f7      	bhi.n	8001930 <HAL_Delay+0x28>
  {
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008

08001950 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	609a      	str	r2, [r3, #8]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3360      	adds	r3, #96	@ 0x60
 80019ca:	461a      	mov	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <LL_ADC_SetOffset+0x44>)
 80019da:	4013      	ands	r3, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	4313      	orrs	r3, r2
 80019e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	03fff000 	.word	0x03fff000

08001a00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3360      	adds	r3, #96	@ 0x60
 8001a0e:	461a      	mov	r2, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3360      	adds	r3, #96	@ 0x60
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3330      	adds	r3, #48	@ 0x30
 8001a98:	461a      	mov	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	4413      	add	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	211f      	movs	r1, #31
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	401a      	ands	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	f003 011f 	and.w	r1, r3, #31
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ad4:	bf00      	nop
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3314      	adds	r3, #20
 8001af0:	461a      	mov	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	0e5b      	lsrs	r3, r3, #25
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	4413      	add	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	0d1b      	lsrs	r3, r3, #20
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	2107      	movs	r1, #7
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	401a      	ands	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	0d1b      	lsrs	r3, r3, #20
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	431a      	orrs	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b2a:	bf00      	nop
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0318 	and.w	r3, r3, #24
 8001b5a:	4908      	ldr	r1, [pc, #32]	@ (8001b7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b5c:	40d9      	lsrs	r1, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	400b      	ands	r3, r1
 8001b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b66:	431a      	orrs	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	0007ffff 	.word	0x0007ffff

08001b80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6093      	str	r3, [r2, #8]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bd4:	d101      	bne.n	8001bda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001bf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bfc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c24:	d101      	bne.n	8001c2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c4c:	f043 0201 	orr.w	r2, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c74:	f043 0202 	orr.w	r2, r3, #2
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <LL_ADC_IsEnabled+0x18>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <LL_ADC_IsEnabled+0x1a>
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d101      	bne.n	8001cc6 <LL_ADC_IsDisableOngoing+0x18>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <LL_ADC_IsDisableOngoing+0x1a>
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ce4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ce8:	f043 0204 	orr.w	r2, r3, #4
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d101      	bne.n	8001d14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d101      	bne.n	8001d3a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b089      	sub	sp, #36	@ 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e130      	b.n	8001fc4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d109      	bne.n	8001d84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7fe fc23 	bl	80005bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff19 	bl	8001bc0 <LL_ADC_IsDeepPowerDownEnabled>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d004      	beq.n	8001d9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff feff 	bl	8001b9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff34 	bl	8001c10 <LL_ADC_IsInternalRegulatorEnabled>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d115      	bne.n	8001dda <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff18 	bl	8001be8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001db8:	4b84      	ldr	r3, [pc, #528]	@ (8001fcc <HAL_ADC_Init+0x284>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	099b      	lsrs	r3, r3, #6
 8001dbe:	4a84      	ldr	r2, [pc, #528]	@ (8001fd0 <HAL_ADC_Init+0x288>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	099b      	lsrs	r3, r3, #6
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dcc:	e002      	b.n	8001dd4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f9      	bne.n	8001dce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff16 	bl	8001c10 <LL_ADC_IsInternalRegulatorEnabled>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10d      	bne.n	8001e06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dee:	f043 0210 	orr.w	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff76 	bl	8001cfc <LL_ADC_REG_IsConversionOngoing>
 8001e10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f040 80c9 	bne.w	8001fb2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 80c5 	bne.w	8001fb2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e30:	f043 0202 	orr.w	r2, r3, #2
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff23 	bl	8001c88 <LL_ADC_IsEnabled>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d115      	bne.n	8001e74 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e48:	4862      	ldr	r0, [pc, #392]	@ (8001fd4 <HAL_ADC_Init+0x28c>)
 8001e4a:	f7ff ff1d 	bl	8001c88 <LL_ADC_IsEnabled>
 8001e4e:	4604      	mov	r4, r0
 8001e50:	4861      	ldr	r0, [pc, #388]	@ (8001fd8 <HAL_ADC_Init+0x290>)
 8001e52:	f7ff ff19 	bl	8001c88 <LL_ADC_IsEnabled>
 8001e56:	4603      	mov	r3, r0
 8001e58:	431c      	orrs	r4, r3
 8001e5a:	4860      	ldr	r0, [pc, #384]	@ (8001fdc <HAL_ADC_Init+0x294>)
 8001e5c:	f7ff ff14 	bl	8001c88 <LL_ADC_IsEnabled>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4323      	orrs	r3, r4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d105      	bne.n	8001e74 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	485c      	ldr	r0, [pc, #368]	@ (8001fe0 <HAL_ADC_Init+0x298>)
 8001e70:	f7ff fd6e 	bl	8001950 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7e5b      	ldrb	r3, [r3, #25]
 8001e78:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e7e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e84:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e8a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e92:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d106      	bne.n	8001eb0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	045b      	lsls	r3, r3, #17
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d009      	beq.n	8001ecc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ebc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	4b44      	ldr	r3, [pc, #272]	@ (8001fe4 <HAL_ADC_Init+0x29c>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	69b9      	ldr	r1, [r7, #24]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff1c 	bl	8001d22 <LL_ADC_INJ_IsConversionOngoing>
 8001eea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d13d      	bne.n	8001f6e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d13a      	bne.n	8001f6e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001efc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f04:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f14:	f023 0302 	bic.w	r3, r3, #2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	69b9      	ldr	r1, [r7, #24]
 8001f1e:	430b      	orrs	r3, r1
 8001f20:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d118      	bne.n	8001f5e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f36:	f023 0304 	bic.w	r3, r3, #4
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f42:	4311      	orrs	r1, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	e007      	b.n	8001f6e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d10c      	bne.n	8001f90 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7c:	f023 010f 	bic.w	r1, r3, #15
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	1e5a      	subs	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f8e:	e007      	b.n	8001fa0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 020f 	bic.w	r2, r2, #15
 8001f9e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa4:	f023 0303 	bic.w	r3, r3, #3
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fb0:	e007      	b.n	8001fc2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb6:	f043 0210 	orr.w	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3724      	adds	r7, #36	@ 0x24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	053e2d63 	.word	0x053e2d63
 8001fd4:	50040000 	.word	0x50040000
 8001fd8:	50040100 	.word	0x50040100
 8001fdc:	50040200 	.word	0x50040200
 8001fe0:	50040300 	.word	0x50040300
 8001fe4:	fff0c007 	.word	0xfff0c007

08001fe8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ff4:	4853      	ldr	r0, [pc, #332]	@ (8002144 <HAL_ADC_Start_DMA+0x15c>)
 8001ff6:	f7ff fdc3 	bl	8001b80 <LL_ADC_GetMultimode>
 8001ffa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fe7b 	bl	8001cfc <LL_ADC_REG_IsConversionOngoing>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	f040 8093 	bne.w	8002134 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_ADC_Start_DMA+0x34>
 8002018:	2302      	movs	r3, #2
 800201a:	e08e      	b.n	800213a <HAL_ADC_Start_DMA+0x152>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a47      	ldr	r2, [pc, #284]	@ (8002148 <HAL_ADC_Start_DMA+0x160>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d008      	beq.n	8002040 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b05      	cmp	r3, #5
 8002038:	d002      	beq.n	8002040 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b09      	cmp	r3, #9
 800203e:	d172      	bne.n	8002126 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fc89 	bl	8002958 <ADC_Enable>
 8002046:	4603      	mov	r3, r0
 8002048:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d165      	bne.n	800211c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002054:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a38      	ldr	r2, [pc, #224]	@ (800214c <HAL_ADC_Start_DMA+0x164>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d002      	beq.n	8002074 <HAL_ADC_Start_DMA+0x8c>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	e000      	b.n	8002076 <HAL_ADC_Start_DMA+0x8e>
 8002074:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <HAL_ADC_Start_DMA+0x168>)
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	4293      	cmp	r3, r2
 800207c:	d002      	beq.n	8002084 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002088:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002094:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a0:	f023 0206 	bic.w	r2, r3, #6
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80020a8:	e002      	b.n	80020b0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b4:	4a27      	ldr	r2, [pc, #156]	@ (8002154 <HAL_ADC_Start_DMA+0x16c>)
 80020b6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020bc:	4a26      	ldr	r2, [pc, #152]	@ (8002158 <HAL_ADC_Start_DMA+0x170>)
 80020be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c4:	4a25      	ldr	r2, [pc, #148]	@ (800215c <HAL_ADC_Start_DMA+0x174>)
 80020c6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	221c      	movs	r2, #28
 80020ce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0210 	orr.w	r2, r2, #16
 80020e6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3340      	adds	r3, #64	@ 0x40
 8002102:	4619      	mov	r1, r3
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f001 f9d8 	bl	80034bc <HAL_DMA_Start_IT>
 800210c:	4603      	mov	r3, r0
 800210e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fddd 	bl	8001cd4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800211a:	e00d      	b.n	8002138 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002124:	e008      	b.n	8002138 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002132:	e001      	b.n	8002138 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002134:	2302      	movs	r3, #2
 8002136:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002138:	7dfb      	ldrb	r3, [r7, #23]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	50040300 	.word	0x50040300
 8002148:	50040200 	.word	0x50040200
 800214c:	50040100 	.word	0x50040100
 8002150:	50040000 	.word	0x50040000
 8002154:	08002b23 	.word	0x08002b23
 8002158:	08002bfb 	.word	0x08002bfb
 800215c:	08002c17 	.word	0x08002c17

08002160 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b0b6      	sub	sp, #216	@ 0xd8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x22>
 8002192:	2302      	movs	r3, #2
 8002194:	e3c9      	b.n	800292a <HAL_ADC_ConfigChannel+0x7b6>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fdaa 	bl	8001cfc <LL_ADC_REG_IsConversionOngoing>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 83aa 	bne.w	8002904 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b05      	cmp	r3, #5
 80021be:	d824      	bhi.n	800220a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	3b02      	subs	r3, #2
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d81b      	bhi.n	8002202 <HAL_ADC_ConfigChannel+0x8e>
 80021ca:	a201      	add	r2, pc, #4	@ (adr r2, 80021d0 <HAL_ADC_ConfigChannel+0x5c>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021e9 	.word	0x080021e9
 80021d8:	080021f1 	.word	0x080021f1
 80021dc:	080021f9 	.word	0x080021f9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80021e0:	230c      	movs	r3, #12
 80021e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80021e6:	e010      	b.n	800220a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80021e8:	2312      	movs	r3, #18
 80021ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80021ee:	e00c      	b.n	800220a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80021f0:	2318      	movs	r3, #24
 80021f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80021f6:	e008      	b.n	800220a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80021f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002200:	e003      	b.n	800220a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002202:	2306      	movs	r3, #6
 8002204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002208:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002218:	f7ff fc36 	bl	8001a88 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fd6b 	bl	8001cfc <LL_ADC_REG_IsConversionOngoing>
 8002226:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fd77 	bl	8001d22 <LL_ADC_INJ_IsConversionOngoing>
 8002234:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002238:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800223c:	2b00      	cmp	r3, #0
 800223e:	f040 81a4 	bne.w	800258a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002242:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 819f 	bne.w	800258a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	461a      	mov	r2, r3
 800225a:	f7ff fc41 	bl	8001ae0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b04      	cmp	r3, #4
 800227e:	d00a      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6919      	ldr	r1, [r3, #16]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002290:	f7ff fb92 	bl	80019b8 <LL_ADC_SetOffset>
 8002294:	e179      	b.n	800258a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fbaf 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x14e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fba4 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 80022b8:	4603      	mov	r3, r0
 80022ba:	0e9b      	lsrs	r3, r3, #26
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	e01e      	b.n	8002300 <HAL_ADC_ConfigChannel+0x18c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fb99 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e004      	b.n	80022fe <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80022f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1a4>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	e018      	b.n	800234a <HAL_ADC_ConfigChannel+0x1d6>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800232c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002330:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002334:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e004      	b.n	800234a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002340:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800234a:	429a      	cmp	r2, r3
 800234c:	d106      	bne.n	800235c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fb68 	bl	8001a2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2101      	movs	r1, #1
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fb4c 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10a      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x214>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2101      	movs	r1, #1
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fb41 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	0e9b      	lsrs	r3, r3, #26
 8002382:	f003 021f 	and.w	r2, r3, #31
 8002386:	e01e      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x252>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2101      	movs	r1, #1
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fb36 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80023a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80023ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80023b6:	2320      	movs	r3, #32
 80023b8:	e004      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80023ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <HAL_ADC_ConfigChannel+0x26a>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	0e9b      	lsrs	r3, r3, #26
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	e018      	b.n	8002410 <HAL_ADC_ConfigChannel+0x29c>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80023f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80023fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002402:	2320      	movs	r3, #32
 8002404:	e004      	b.n	8002410 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002406:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002410:	429a      	cmp	r2, r3
 8002412:	d106      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2200      	movs	r2, #0
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fb05 	bl	8001a2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2102      	movs	r1, #2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fae9 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 800242e:	4603      	mov	r3, r0
 8002430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10a      	bne.n	800244e <HAL_ADC_ConfigChannel+0x2da>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2102      	movs	r1, #2
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fade 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	0e9b      	lsrs	r3, r3, #26
 8002448:	f003 021f 	and.w	r2, r3, #31
 800244c:	e01e      	b.n	800248c <HAL_ADC_ConfigChannel+0x318>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2102      	movs	r1, #2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fad3 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 800245a:	4603      	mov	r3, r0
 800245c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800246c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002470:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800247c:	2320      	movs	r3, #32
 800247e:	e004      	b.n	800248a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002480:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x330>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0e9b      	lsrs	r3, r3, #26
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	e014      	b.n	80024ce <HAL_ADC_ConfigChannel+0x35a>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80024b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80024b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80024c0:	2320      	movs	r3, #32
 80024c2:	e004      	b.n	80024ce <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80024c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d106      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	2102      	movs	r1, #2
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff faa6 	bl	8001a2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2103      	movs	r1, #3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fa8a 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <HAL_ADC_ConfigChannel+0x398>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2103      	movs	r1, #3
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fa7f 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002502:	4603      	mov	r3, r0
 8002504:	0e9b      	lsrs	r3, r3, #26
 8002506:	f003 021f 	and.w	r2, r3, #31
 800250a:	e017      	b.n	800253c <HAL_ADC_ConfigChannel+0x3c8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2103      	movs	r1, #3
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fa74 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002526:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002528:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800252e:	2320      	movs	r3, #32
 8002530:	e003      	b.n	800253a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002532:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002534:	fab3 f383 	clz	r3, r3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x3e0>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	0e9b      	lsrs	r3, r3, #26
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	e011      	b.n	8002578 <HAL_ADC_ConfigChannel+0x404>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002562:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002564:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002566:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e003      	b.n	8002578 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002570:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002578:	429a      	cmp	r2, r3
 800257a:	d106      	bne.n	800258a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	2103      	movs	r1, #3
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fa51 	bl	8001a2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fb7a 	bl	8001c88 <LL_ADC_IsEnabled>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	f040 8140 	bne.w	800281c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	461a      	mov	r2, r3
 80025aa:	f7ff fac5 	bl	8001b38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	4a8f      	ldr	r2, [pc, #572]	@ (80027f0 <HAL_ADC_ConfigChannel+0x67c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	f040 8131 	bne.w	800281c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10b      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x46e>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	0e9b      	lsrs	r3, r3, #26
 80025d0:	3301      	adds	r3, #1
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2b09      	cmp	r3, #9
 80025d8:	bf94      	ite	ls
 80025da:	2301      	movls	r3, #1
 80025dc:	2300      	movhi	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	e019      	b.n	8002616 <HAL_ADC_ConfigChannel+0x4a2>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80025f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80025f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80025fa:	2320      	movs	r3, #32
 80025fc:	e003      	b.n	8002606 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80025fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	2b09      	cmp	r3, #9
 800260e:	bf94      	ite	ls
 8002610:	2301      	movls	r3, #1
 8002612:	2300      	movhi	r3, #0
 8002614:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002616:	2b00      	cmp	r3, #0
 8002618:	d079      	beq.n	800270e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002622:	2b00      	cmp	r3, #0
 8002624:	d107      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x4c2>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	0e9b      	lsrs	r3, r3, #26
 800262c:	3301      	adds	r3, #1
 800262e:	069b      	lsls	r3, r3, #26
 8002630:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002634:	e015      	b.n	8002662 <HAL_ADC_ConfigChannel+0x4ee>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002646:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800264e:	2320      	movs	r3, #32
 8002650:	e003      	b.n	800265a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	3301      	adds	r3, #1
 800265c:	069b      	lsls	r3, r3, #26
 800265e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x50e>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0e9b      	lsrs	r3, r3, #26
 8002674:	3301      	adds	r3, #1
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	2101      	movs	r1, #1
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	e017      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x53e>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002692:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e003      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800269e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	3301      	adds	r3, #1
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	2101      	movs	r1, #1
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	ea42 0103 	orr.w	r1, r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x564>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0e9b      	lsrs	r3, r3, #26
 80026c8:	3301      	adds	r3, #1
 80026ca:	f003 021f 	and.w	r2, r3, #31
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	051b      	lsls	r3, r3, #20
 80026d6:	e018      	b.n	800270a <HAL_ADC_ConfigChannel+0x596>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80026e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80026ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80026f0:	2320      	movs	r3, #32
 80026f2:	e003      	b.n	80026fc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80026f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 021f 	and.w	r2, r3, #31
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800270a:	430b      	orrs	r3, r1
 800270c:	e081      	b.n	8002812 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002716:	2b00      	cmp	r3, #0
 8002718:	d107      	bne.n	800272a <HAL_ADC_ConfigChannel+0x5b6>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0e9b      	lsrs	r3, r3, #26
 8002720:	3301      	adds	r3, #1
 8002722:	069b      	lsls	r3, r3, #26
 8002724:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002728:	e015      	b.n	8002756 <HAL_ADC_ConfigChannel+0x5e2>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800273c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e003      	b.n	800274e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002748:	fab3 f383 	clz	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	3301      	adds	r3, #1
 8002750:	069b      	lsls	r3, r3, #26
 8002752:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x602>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	0e9b      	lsrs	r3, r3, #26
 8002768:	3301      	adds	r3, #1
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	e017      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x632>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	61bb      	str	r3, [r7, #24]
  return result;
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800278e:	2320      	movs	r3, #32
 8002790:	e003      	b.n	800279a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	3301      	adds	r3, #1
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	2101      	movs	r1, #1
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	ea42 0103 	orr.w	r1, r2, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10d      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x65e>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0e9b      	lsrs	r3, r3, #26
 80027bc:	3301      	adds	r3, #1
 80027be:	f003 021f 	and.w	r2, r3, #31
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	3b1e      	subs	r3, #30
 80027ca:	051b      	lsls	r3, r3, #20
 80027cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027d0:	e01e      	b.n	8002810 <HAL_ADC_ConfigChannel+0x69c>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	60fb      	str	r3, [r7, #12]
  return result;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d104      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80027ea:	2320      	movs	r3, #32
 80027ec:	e006      	b.n	80027fc <HAL_ADC_ConfigChannel+0x688>
 80027ee:	bf00      	nop
 80027f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f003 021f 	and.w	r2, r3, #31
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	3b1e      	subs	r3, #30
 800280a:	051b      	lsls	r3, r3, #20
 800280c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002810:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002816:	4619      	mov	r1, r3
 8002818:	f7ff f962 	bl	8001ae0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b44      	ldr	r3, [pc, #272]	@ (8002934 <HAL_ADC_ConfigChannel+0x7c0>)
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d07a      	beq.n	800291e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002828:	4843      	ldr	r0, [pc, #268]	@ (8002938 <HAL_ADC_ConfigChannel+0x7c4>)
 800282a:	f7ff f8b7 	bl	800199c <LL_ADC_GetCommonPathInternalCh>
 800282e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a41      	ldr	r2, [pc, #260]	@ (800293c <HAL_ADC_ConfigChannel+0x7c8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d12c      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800283c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002840:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d126      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3c      	ldr	r2, [pc, #240]	@ (8002940 <HAL_ADC_ConfigChannel+0x7cc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d004      	beq.n	800285c <HAL_ADC_ConfigChannel+0x6e8>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a3b      	ldr	r2, [pc, #236]	@ (8002944 <HAL_ADC_ConfigChannel+0x7d0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d15d      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800285c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002860:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002864:	4619      	mov	r1, r3
 8002866:	4834      	ldr	r0, [pc, #208]	@ (8002938 <HAL_ADC_ConfigChannel+0x7c4>)
 8002868:	f7ff f885 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800286c:	4b36      	ldr	r3, [pc, #216]	@ (8002948 <HAL_ADC_ConfigChannel+0x7d4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	4a36      	ldr	r2, [pc, #216]	@ (800294c <HAL_ADC_ConfigChannel+0x7d8>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	099b      	lsrs	r3, r3, #6
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002886:	e002      	b.n	800288e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	3b01      	subs	r3, #1
 800288c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f9      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002894:	e040      	b.n	8002918 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2d      	ldr	r2, [pc, #180]	@ (8002950 <HAL_ADC_ConfigChannel+0x7dc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d118      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d112      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a23      	ldr	r2, [pc, #140]	@ (8002940 <HAL_ADC_ConfigChannel+0x7cc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d004      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0x74c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a22      	ldr	r2, [pc, #136]	@ (8002944 <HAL_ADC_ConfigChannel+0x7d0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d12d      	bne.n	800291c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028c8:	4619      	mov	r1, r3
 80028ca:	481b      	ldr	r0, [pc, #108]	@ (8002938 <HAL_ADC_ConfigChannel+0x7c4>)
 80028cc:	f7ff f853 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028d0:	e024      	b.n	800291c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002954 <HAL_ADC_ConfigChannel+0x7e0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d120      	bne.n	800291e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d11a      	bne.n	800291e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a14      	ldr	r2, [pc, #80]	@ (8002940 <HAL_ADC_ConfigChannel+0x7cc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d115      	bne.n	800291e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028fa:	4619      	mov	r1, r3
 80028fc:	480e      	ldr	r0, [pc, #56]	@ (8002938 <HAL_ADC_ConfigChannel+0x7c4>)
 80028fe:	f7ff f83a 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
 8002902:	e00c      	b.n	800291e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002908:	f043 0220 	orr.w	r2, r3, #32
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002916:	e002      	b.n	800291e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002918:	bf00      	nop
 800291a:	e000      	b.n	800291e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800291c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002926:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800292a:	4618      	mov	r0, r3
 800292c:	37d8      	adds	r7, #216	@ 0xd8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	80080000 	.word	0x80080000
 8002938:	50040300 	.word	0x50040300
 800293c:	c7520000 	.word	0xc7520000
 8002940:	50040000 	.word	0x50040000
 8002944:	50040200 	.word	0x50040200
 8002948:	20000000 	.word	0x20000000
 800294c:	053e2d63 	.word	0x053e2d63
 8002950:	cb840000 	.word	0xcb840000
 8002954:	80000001 	.word	0x80000001

08002958 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f98d 	bl	8001c88 <LL_ADC_IsEnabled>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d169      	bne.n	8002a48 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	4b36      	ldr	r3, [pc, #216]	@ (8002a54 <ADC_Enable+0xfc>)
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002986:	f043 0210 	orr.w	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e055      	b.n	8002a4a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f948 	bl	8001c38 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029a8:	482b      	ldr	r0, [pc, #172]	@ (8002a58 <ADC_Enable+0x100>)
 80029aa:	f7fe fff7 	bl	800199c <LL_ADC_GetCommonPathInternalCh>
 80029ae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d013      	beq.n	80029e0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029b8:	4b28      	ldr	r3, [pc, #160]	@ (8002a5c <ADC_Enable+0x104>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	099b      	lsrs	r3, r3, #6
 80029be:	4a28      	ldr	r2, [pc, #160]	@ (8002a60 <ADC_Enable+0x108>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	099b      	lsrs	r3, r3, #6
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029d2:	e002      	b.n	80029da <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f9      	bne.n	80029d4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029e0:	f7fe ff86 	bl	80018f0 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029e6:	e028      	b.n	8002a3a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f94b 	bl	8001c88 <LL_ADC_IsEnabled>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d104      	bne.n	8002a02 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff f91b 	bl	8001c38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a02:	f7fe ff75 	bl	80018f0 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d914      	bls.n	8002a3a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d00d      	beq.n	8002a3a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a22:	f043 0210 	orr.w	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2e:	f043 0201 	orr.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e007      	b.n	8002a4a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d1cf      	bne.n	80029e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	8000003f 	.word	0x8000003f
 8002a58:	50040300 	.word	0x50040300
 8002a5c:	20000000 	.word	0x20000000
 8002a60:	053e2d63 	.word	0x053e2d63

08002a64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff f91c 	bl	8001cae <LL_ADC_IsDisableOngoing>
 8002a76:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f903 	bl	8001c88 <LL_ADC_IsEnabled>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d047      	beq.n	8002b18 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d144      	bne.n	8002b18 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030d 	and.w	r3, r3, #13
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d10c      	bne.n	8002ab6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff f8dd 	bl	8001c60 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aae:	f7fe ff1f 	bl	80018f0 <HAL_GetTick>
 8002ab2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ab4:	e029      	b.n	8002b0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aba:	f043 0210 	orr.w	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e023      	b.n	8002b1a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ad2:	f7fe ff0d 	bl	80018f0 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d914      	bls.n	8002b0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00d      	beq.n	8002b0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af2:	f043 0210 	orr.w	r2, r3, #16
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afe:	f043 0201 	orr.w	r2, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e007      	b.n	8002b1a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1dc      	bne.n	8002ad2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d14b      	bne.n	8002bd4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d021      	beq.n	8002b9a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe ff81 	bl	8001a62 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d032      	beq.n	8002bcc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d12b      	bne.n	8002bcc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d11f      	bne.n	8002bcc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b98:	e018      	b.n	8002bcc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d111      	bne.n	8002bcc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc4:	f043 0201 	orr.w	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f7fd fd97 	bl	8000700 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bd2:	e00e      	b.n	8002bf2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f7ff fabd 	bl	8002160 <HAL_ADC_ErrorCallback>
}
 8002be6:	e004      	b.n	8002bf2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	4798      	blx	r3
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f7fd fd87 	bl	800071c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f7ff fa8f 	bl	8002160 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <LL_ADC_IsEnabled>:
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <LL_ADC_IsEnabled+0x18>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <LL_ADC_IsEnabled+0x1a>
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_ADC_StartCalibration>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002c82:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	609a      	str	r2, [r3, #8]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <LL_ADC_IsCalibrationOnGoing>:
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cb6:	d101      	bne.n	8002cbc <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <LL_ADC_REG_IsConversionOngoing>:
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d101      	bne.n	8002ce2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_ADCEx_Calibration_Start+0x1c>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e04d      	b.n	8002da8 <HAL_ADCEx_Calibration_Start+0xb8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff fea5 	bl	8002a64 <ADC_Disable>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d136      	bne.n	8002d92 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d2c:	f023 0302 	bic.w	r3, r3, #2
 8002d30:	f043 0202 	orr.w	r2, r3, #2
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6839      	ldr	r1, [r7, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff96 	bl	8002c70 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d44:	e014      	b.n	8002d70 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002d52:	d30d      	bcc.n	8002d70 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d58:	f023 0312 	bic.w	r3, r3, #18
 8002d5c:	f043 0210 	orr.w	r2, r3, #16
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e01b      	b.n	8002da8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff94 	bl	8002ca2 <LL_ADC_IsCalibrationOnGoing>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e2      	bne.n	8002d46 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d84:	f023 0303 	bic.w	r3, r3, #3
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d90:	e005      	b.n	8002d9e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d96:	f043 0210 	orr.w	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b09f      	sub	sp, #124	@ 0x7c
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e093      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a47      	ldr	r2, [pc, #284]	@ (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d102      	bne.n	8002dee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002de8:	4b46      	ldr	r3, [pc, #280]	@ (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	e001      	b.n	8002df2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002dee:	2300      	movs	r3, #0
 8002df0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10b      	bne.n	8002e10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e072      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ff59 	bl	8002cca <LL_ADC_REG_IsConversionOngoing>
 8002e18:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff53 	bl	8002cca <LL_ADC_REG_IsConversionOngoing>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d154      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d151      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e30:	4b35      	ldr	r3, [pc, #212]	@ (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002e32:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d02c      	beq.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e4e:	035b      	lsls	r3, r3, #13
 8002e50:	430b      	orrs	r3, r1
 8002e52:	431a      	orrs	r2, r3
 8002e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e58:	4829      	ldr	r0, [pc, #164]	@ (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e5a:	f7ff fef6 	bl	8002c4a <LL_ADC_IsEnabled>
 8002e5e:	4604      	mov	r4, r0
 8002e60:	4828      	ldr	r0, [pc, #160]	@ (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e62:	f7ff fef2 	bl	8002c4a <LL_ADC_IsEnabled>
 8002e66:	4603      	mov	r3, r0
 8002e68:	431c      	orrs	r4, r3
 8002e6a:	4828      	ldr	r0, [pc, #160]	@ (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e6c:	f7ff feed 	bl	8002c4a <LL_ADC_IsEnabled>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4323      	orrs	r3, r4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d137      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e80:	f023 030f 	bic.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	6811      	ldr	r1, [r2, #0]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	6892      	ldr	r2, [r2, #8]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e92:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e94:	e028      	b.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ea0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea2:	4817      	ldr	r0, [pc, #92]	@ (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ea4:	f7ff fed1 	bl	8002c4a <LL_ADC_IsEnabled>
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	4816      	ldr	r0, [pc, #88]	@ (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002eac:	f7ff fecd 	bl	8002c4a <LL_ADC_IsEnabled>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	431c      	orrs	r4, r3
 8002eb4:	4815      	ldr	r0, [pc, #84]	@ (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002eb6:	f7ff fec8 	bl	8002c4a <LL_ADC_IsEnabled>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4323      	orrs	r3, r4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d112      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002eca:	f023 030f 	bic.w	r3, r3, #15
 8002ece:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ed0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed2:	e009      	b.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002ee6:	e000      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ee8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ef2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	377c      	adds	r7, #124	@ 0x7c
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd90      	pop	{r4, r7, pc}
 8002efe:	bf00      	nop
 8002f00:	50040000 	.word	0x50040000
 8002f04:	50040100 	.word	0x50040100
 8002f08:	50040300 	.word	0x50040300
 8002f0c:	50040200 	.word	0x50040200

08002f10 <__NVIC_SetPriorityGrouping>:
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f20:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <__NVIC_SetPriorityGrouping+0x44>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f42:	4a04      	ldr	r2, [pc, #16]	@ (8002f54 <__NVIC_SetPriorityGrouping+0x44>)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	60d3      	str	r3, [r2, #12]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <__NVIC_GetPriorityGrouping>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f5c:	4b04      	ldr	r3, [pc, #16]	@ (8002f70 <__NVIC_GetPriorityGrouping+0x18>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	f003 0307 	and.w	r3, r3, #7
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_EnableIRQ>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	db0b      	blt.n	8002f9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	f003 021f 	and.w	r2, r3, #31
 8002f8c:	4907      	ldr	r1, [pc, #28]	@ (8002fac <__NVIC_EnableIRQ+0x38>)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2001      	movs	r0, #1
 8002f96:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000e100 	.word	0xe000e100

08002fb0 <__NVIC_SetPriority>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	6039      	str	r1, [r7, #0]
 8002fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	db0a      	blt.n	8002fda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	490c      	ldr	r1, [pc, #48]	@ (8002ffc <__NVIC_SetPriority+0x4c>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002fd8:	e00a      	b.n	8002ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4908      	ldr	r1, [pc, #32]	@ (8003000 <__NVIC_SetPriority+0x50>)
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	3b04      	subs	r3, #4
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	440b      	add	r3, r1
 8002fee:	761a      	strb	r2, [r3, #24]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	e000e100 	.word	0xe000e100
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <NVIC_EncodePriority>:
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	@ 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f1c3 0307 	rsb	r3, r3, #7
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf28      	it	cs
 8003022:	2304      	movcs	r3, #4
 8003024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3304      	adds	r3, #4
 800302a:	2b06      	cmp	r3, #6
 800302c:	d902      	bls.n	8003034 <NVIC_EncodePriority+0x30>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3b03      	subs	r3, #3
 8003032:	e000      	b.n	8003036 <NVIC_EncodePriority+0x32>
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43da      	mvns	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	401a      	ands	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800304c:	f04f 31ff 	mov.w	r1, #4294967295
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	43d9      	mvns	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800305c:	4313      	orrs	r3, r2
}
 800305e:	4618      	mov	r0, r3
 8003060:	3724      	adds	r7, #36	@ 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3b01      	subs	r3, #1
 8003078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800307c:	d301      	bcc.n	8003082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800307e:	2301      	movs	r3, #1
 8003080:	e00f      	b.n	80030a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003082:	4a0a      	ldr	r2, [pc, #40]	@ (80030ac <SysTick_Config+0x40>)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3b01      	subs	r3, #1
 8003088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800308a:	210f      	movs	r1, #15
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
 8003090:	f7ff ff8e 	bl	8002fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003094:	4b05      	ldr	r3, [pc, #20]	@ (80030ac <SysTick_Config+0x40>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309a:	4b04      	ldr	r3, [pc, #16]	@ (80030ac <SysTick_Config+0x40>)
 800309c:	2207      	movs	r2, #7
 800309e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	e000e010 	.word	0xe000e010

080030b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ff29 	bl	8002f10 <__NVIC_SetPriorityGrouping>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030d8:	f7ff ff3e 	bl	8002f58 <__NVIC_GetPriorityGrouping>
 80030dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	6978      	ldr	r0, [r7, #20]
 80030e4:	f7ff ff8e 	bl	8003004 <NVIC_EncodePriority>
 80030e8:	4602      	mov	r2, r0
 80030ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff5d 	bl	8002fb0 <__NVIC_SetPriority>
}
 80030f6:	bf00      	nop
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ff31 	bl	8002f74 <__NVIC_EnableIRQ>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ffa2 	bl	800306c <SysTick_Config>
 8003128:	4603      	mov	r3, r0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0ac      	b.n	80032a0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f8b2 	bl	80032b4 <DFSDM_GetChannelFromInstance>
 8003150:	4603      	mov	r3, r0
 8003152:	4a55      	ldr	r2, [pc, #340]	@ (80032a8 <HAL_DFSDM_ChannelInit+0x174>)
 8003154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e09f      	b.n	80032a0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7fd ffa3 	bl	80010ac <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003166:	4b51      	ldr	r3, [pc, #324]	@ (80032ac <HAL_DFSDM_ChannelInit+0x178>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3301      	adds	r3, #1
 800316c:	4a4f      	ldr	r2, [pc, #316]	@ (80032ac <HAL_DFSDM_ChannelInit+0x178>)
 800316e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003170:	4b4e      	ldr	r3, [pc, #312]	@ (80032ac <HAL_DFSDM_ChannelInit+0x178>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d125      	bne.n	80031c4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003178:	4b4d      	ldr	r3, [pc, #308]	@ (80032b0 <HAL_DFSDM_ChannelInit+0x17c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a4c      	ldr	r2, [pc, #304]	@ (80032b0 <HAL_DFSDM_ChannelInit+0x17c>)
 800317e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003182:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003184:	4b4a      	ldr	r3, [pc, #296]	@ (80032b0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4948      	ldr	r1, [pc, #288]	@ (80032b0 <HAL_DFSDM_ChannelInit+0x17c>)
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003192:	4b47      	ldr	r3, [pc, #284]	@ (80032b0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a46      	ldr	r2, [pc, #280]	@ (80032b0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003198:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800319c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	791b      	ldrb	r3, [r3, #4]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d108      	bne.n	80031b8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80031a6:	4b42      	ldr	r3, [pc, #264]	@ (80032b0 <HAL_DFSDM_ChannelInit+0x17c>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	041b      	lsls	r3, r3, #16
 80031b2:	493f      	ldr	r1, [pc, #252]	@ (80032b0 <HAL_DFSDM_ChannelInit+0x17c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80031b8:	4b3d      	ldr	r3, [pc, #244]	@ (80032b0 <HAL_DFSDM_ChannelInit+0x17c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3c      	ldr	r2, [pc, #240]	@ (80032b0 <HAL_DFSDM_ChannelInit+0x17c>)
 80031be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031c2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80031d2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6819      	ldr	r1, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80031e2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80031e8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 020f 	bic.w	r2, r2, #15
 8003200:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6819      	ldr	r1, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003228:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6899      	ldr	r1, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f002 0207 	and.w	r2, r2, #7
 8003254:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003280:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f810 	bl	80032b4 <DFSDM_GetChannelFromInstance>
 8003294:	4602      	mov	r2, r0
 8003296:	4904      	ldr	r1, [pc, #16]	@ (80032a8 <HAL_DFSDM_ChannelInit+0x174>)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000ab4 	.word	0x20000ab4
 80032ac:	20000ab0 	.word	0x20000ab0
 80032b0:	40016000 	.word	0x40016000

080032b4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a1c      	ldr	r2, [pc, #112]	@ (8003330 <DFSDM_GetChannelFromInstance+0x7c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d102      	bne.n	80032ca <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e02b      	b.n	8003322 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a19      	ldr	r2, [pc, #100]	@ (8003334 <DFSDM_GetChannelFromInstance+0x80>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d102      	bne.n	80032d8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80032d2:	2301      	movs	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e024      	b.n	8003322 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a17      	ldr	r2, [pc, #92]	@ (8003338 <DFSDM_GetChannelFromInstance+0x84>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d102      	bne.n	80032e6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80032e0:	2302      	movs	r3, #2
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e01d      	b.n	8003322 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a14      	ldr	r2, [pc, #80]	@ (800333c <DFSDM_GetChannelFromInstance+0x88>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d102      	bne.n	80032f4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80032ee:	2304      	movs	r3, #4
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	e016      	b.n	8003322 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a12      	ldr	r2, [pc, #72]	@ (8003340 <DFSDM_GetChannelFromInstance+0x8c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d102      	bne.n	8003302 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80032fc:	2305      	movs	r3, #5
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	e00f      	b.n	8003322 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a0f      	ldr	r2, [pc, #60]	@ (8003344 <DFSDM_GetChannelFromInstance+0x90>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d102      	bne.n	8003310 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800330a:	2306      	movs	r3, #6
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	e008      	b.n	8003322 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a0d      	ldr	r2, [pc, #52]	@ (8003348 <DFSDM_GetChannelFromInstance+0x94>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d102      	bne.n	800331e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003318:	2307      	movs	r3, #7
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e001      	b.n	8003322 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800331e:	2303      	movs	r3, #3
 8003320:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003322:	68fb      	ldr	r3, [r7, #12]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40016000 	.word	0x40016000
 8003334:	40016020 	.word	0x40016020
 8003338:	40016040 	.word	0x40016040
 800333c:	40016080 	.word	0x40016080
 8003340:	400160a0 	.word	0x400160a0
 8003344:	400160c0 	.word	0x400160c0
 8003348:	400160e0 	.word	0x400160e0

0800334c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e098      	b.n	8003490 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	4b4d      	ldr	r3, [pc, #308]	@ (800349c <HAL_DMA_Init+0x150>)
 8003366:	429a      	cmp	r2, r3
 8003368:	d80f      	bhi.n	800338a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	4b4b      	ldr	r3, [pc, #300]	@ (80034a0 <HAL_DMA_Init+0x154>)
 8003372:	4413      	add	r3, r2
 8003374:	4a4b      	ldr	r2, [pc, #300]	@ (80034a4 <HAL_DMA_Init+0x158>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	009a      	lsls	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a48      	ldr	r2, [pc, #288]	@ (80034a8 <HAL_DMA_Init+0x15c>)
 8003386:	641a      	str	r2, [r3, #64]	@ 0x40
 8003388:	e00e      	b.n	80033a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	4b46      	ldr	r3, [pc, #280]	@ (80034ac <HAL_DMA_Init+0x160>)
 8003392:	4413      	add	r3, r2
 8003394:	4a43      	ldr	r2, [pc, #268]	@ (80034a4 <HAL_DMA_Init+0x158>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	091b      	lsrs	r3, r3, #4
 800339c:	009a      	lsls	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a42      	ldr	r2, [pc, #264]	@ (80034b0 <HAL_DMA_Init+0x164>)
 80033a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80033be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003402:	d039      	beq.n	8003478 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	4a27      	ldr	r2, [pc, #156]	@ (80034a8 <HAL_DMA_Init+0x15c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d11a      	bne.n	8003444 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800340e:	4b29      	ldr	r3, [pc, #164]	@ (80034b4 <HAL_DMA_Init+0x168>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003416:	f003 031c 	and.w	r3, r3, #28
 800341a:	210f      	movs	r1, #15
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	4924      	ldr	r1, [pc, #144]	@ (80034b4 <HAL_DMA_Init+0x168>)
 8003424:	4013      	ands	r3, r2
 8003426:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003428:	4b22      	ldr	r3, [pc, #136]	@ (80034b4 <HAL_DMA_Init+0x168>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003434:	f003 031c 	and.w	r3, r3, #28
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	491d      	ldr	r1, [pc, #116]	@ (80034b4 <HAL_DMA_Init+0x168>)
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]
 8003442:	e019      	b.n	8003478 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003444:	4b1c      	ldr	r3, [pc, #112]	@ (80034b8 <HAL_DMA_Init+0x16c>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344c:	f003 031c 	and.w	r3, r3, #28
 8003450:	210f      	movs	r1, #15
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	4917      	ldr	r1, [pc, #92]	@ (80034b8 <HAL_DMA_Init+0x16c>)
 800345a:	4013      	ands	r3, r2
 800345c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800345e:	4b16      	ldr	r3, [pc, #88]	@ (80034b8 <HAL_DMA_Init+0x16c>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346a:	f003 031c 	and.w	r3, r3, #28
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	4911      	ldr	r1, [pc, #68]	@ (80034b8 <HAL_DMA_Init+0x16c>)
 8003474:	4313      	orrs	r3, r2
 8003476:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	40020407 	.word	0x40020407
 80034a0:	bffdfff8 	.word	0xbffdfff8
 80034a4:	cccccccd 	.word	0xcccccccd
 80034a8:	40020000 	.word	0x40020000
 80034ac:	bffdfbf8 	.word	0xbffdfbf8
 80034b0:	40020400 	.word	0x40020400
 80034b4:	400200a8 	.word	0x400200a8
 80034b8:	400204a8 	.word	0x400204a8

080034bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_DMA_Start_IT+0x20>
 80034d8:	2302      	movs	r3, #2
 80034da:	e04b      	b.n	8003574 <HAL_DMA_Start_IT+0xb8>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d13a      	bne.n	8003566 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f8e0 	bl	80036da <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 020e 	orr.w	r2, r2, #14
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e00f      	b.n	8003554 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0204 	bic.w	r2, r2, #4
 8003542:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 020a 	orr.w	r2, r2, #10
 8003552:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e005      	b.n	8003572 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800356e:	2302      	movs	r3, #2
 8003570:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003572:	7dfb      	ldrb	r3, [r7, #23]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003598:	f003 031c 	and.w	r3, r3, #28
 800359c:	2204      	movs	r2, #4
 800359e:	409a      	lsls	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d026      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x7a>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d021      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d107      	bne.n	80035d0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0204 	bic.w	r2, r2, #4
 80035ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d4:	f003 021c 	and.w	r2, r3, #28
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	2104      	movs	r1, #4
 80035de:	fa01 f202 	lsl.w	r2, r1, r2
 80035e2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d071      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035f4:	e06c      	b.n	80036d0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	f003 031c 	and.w	r3, r3, #28
 80035fe:	2202      	movs	r2, #2
 8003600:	409a      	lsls	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02e      	beq.n	8003668 <HAL_DMA_IRQHandler+0xec>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d029      	beq.n	8003668 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10b      	bne.n	800363a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 020a 	bic.w	r2, r2, #10
 8003630:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	f003 021c 	and.w	r2, r3, #28
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	2102      	movs	r1, #2
 8003648:	fa01 f202 	lsl.w	r2, r1, r2
 800364c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d038      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003666:	e033      	b.n	80036d0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366c:	f003 031c 	and.w	r3, r3, #28
 8003670:	2208      	movs	r2, #8
 8003672:	409a      	lsls	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d02a      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x156>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d025      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 020e 	bic.w	r2, r2, #14
 8003694:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369a:	f003 021c 	and.w	r2, r3, #28
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	2101      	movs	r1, #1
 80036a4:	fa01 f202 	lsl.w	r2, r1, r2
 80036a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
}
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ec:	f003 021c 	and.w	r2, r3, #28
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	2101      	movs	r1, #1
 80036f6:	fa01 f202 	lsl.w	r2, r1, r2
 80036fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b10      	cmp	r3, #16
 800370a:	d108      	bne.n	800371e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800371c:	e007      	b.n	800372e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	60da      	str	r2, [r3, #12]
}
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800374a:	e17f      	b.n	8003a4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2101      	movs	r1, #1
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	4013      	ands	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8171 	beq.w	8003a46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d005      	beq.n	800377c <HAL_GPIO_Init+0x40>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d130      	bne.n	80037de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037b2:	2201      	movs	r2, #1
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f003 0201 	and.w	r2, r3, #1
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d118      	bne.n	800381c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80037f0:	2201      	movs	r2, #1
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4013      	ands	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	08db      	lsrs	r3, r3, #3
 8003806:	f003 0201 	and.w	r2, r3, #1
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	2b03      	cmp	r3, #3
 8003826:	d017      	beq.n	8003858 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d123      	bne.n	80038ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	08da      	lsrs	r2, r3, #3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3208      	adds	r2, #8
 800386c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003870:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	220f      	movs	r2, #15
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	08da      	lsrs	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3208      	adds	r2, #8
 80038a6:	6939      	ldr	r1, [r7, #16]
 80038a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	2203      	movs	r2, #3
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4013      	ands	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0203 	and.w	r2, r3, #3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80ac 	beq.w	8003a46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ee:	4b5f      	ldr	r3, [pc, #380]	@ (8003a6c <HAL_GPIO_Init+0x330>)
 80038f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f2:	4a5e      	ldr	r2, [pc, #376]	@ (8003a6c <HAL_GPIO_Init+0x330>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80038fa:	4b5c      	ldr	r3, [pc, #368]	@ (8003a6c <HAL_GPIO_Init+0x330>)
 80038fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003906:	4a5a      	ldr	r2, [pc, #360]	@ (8003a70 <HAL_GPIO_Init+0x334>)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	3302      	adds	r3, #2
 800390e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003912:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	220f      	movs	r2, #15
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003930:	d025      	beq.n	800397e <HAL_GPIO_Init+0x242>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a4f      	ldr	r2, [pc, #316]	@ (8003a74 <HAL_GPIO_Init+0x338>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01f      	beq.n	800397a <HAL_GPIO_Init+0x23e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a4e      	ldr	r2, [pc, #312]	@ (8003a78 <HAL_GPIO_Init+0x33c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d019      	beq.n	8003976 <HAL_GPIO_Init+0x23a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a4d      	ldr	r2, [pc, #308]	@ (8003a7c <HAL_GPIO_Init+0x340>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d013      	beq.n	8003972 <HAL_GPIO_Init+0x236>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a4c      	ldr	r2, [pc, #304]	@ (8003a80 <HAL_GPIO_Init+0x344>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00d      	beq.n	800396e <HAL_GPIO_Init+0x232>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a4b      	ldr	r2, [pc, #300]	@ (8003a84 <HAL_GPIO_Init+0x348>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d007      	beq.n	800396a <HAL_GPIO_Init+0x22e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a4a      	ldr	r2, [pc, #296]	@ (8003a88 <HAL_GPIO_Init+0x34c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d101      	bne.n	8003966 <HAL_GPIO_Init+0x22a>
 8003962:	2306      	movs	r3, #6
 8003964:	e00c      	b.n	8003980 <HAL_GPIO_Init+0x244>
 8003966:	2307      	movs	r3, #7
 8003968:	e00a      	b.n	8003980 <HAL_GPIO_Init+0x244>
 800396a:	2305      	movs	r3, #5
 800396c:	e008      	b.n	8003980 <HAL_GPIO_Init+0x244>
 800396e:	2304      	movs	r3, #4
 8003970:	e006      	b.n	8003980 <HAL_GPIO_Init+0x244>
 8003972:	2303      	movs	r3, #3
 8003974:	e004      	b.n	8003980 <HAL_GPIO_Init+0x244>
 8003976:	2302      	movs	r3, #2
 8003978:	e002      	b.n	8003980 <HAL_GPIO_Init+0x244>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_GPIO_Init+0x244>
 800397e:	2300      	movs	r3, #0
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	f002 0203 	and.w	r2, r2, #3
 8003986:	0092      	lsls	r2, r2, #2
 8003988:	4093      	lsls	r3, r2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003990:	4937      	ldr	r1, [pc, #220]	@ (8003a70 <HAL_GPIO_Init+0x334>)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	089b      	lsrs	r3, r3, #2
 8003996:	3302      	adds	r3, #2
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800399e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a8c <HAL_GPIO_Init+0x350>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4013      	ands	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039c2:	4a32      	ldr	r2, [pc, #200]	@ (8003a8c <HAL_GPIO_Init+0x350>)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039c8:	4b30      	ldr	r3, [pc, #192]	@ (8003a8c <HAL_GPIO_Init+0x350>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039ec:	4a27      	ldr	r2, [pc, #156]	@ (8003a8c <HAL_GPIO_Init+0x350>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039f2:	4b26      	ldr	r3, [pc, #152]	@ (8003a8c <HAL_GPIO_Init+0x350>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a16:	4a1d      	ldr	r2, [pc, #116]	@ (8003a8c <HAL_GPIO_Init+0x350>)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <HAL_GPIO_Init+0x350>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a40:	4a12      	ldr	r2, [pc, #72]	@ (8003a8c <HAL_GPIO_Init+0x350>)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	fa22 f303 	lsr.w	r3, r2, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f47f ae78 	bne.w	800374c <HAL_GPIO_Init+0x10>
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40010000 	.word	0x40010000
 8003a74:	48000400 	.word	0x48000400
 8003a78:	48000800 	.word	0x48000800
 8003a7c:	48000c00 	.word	0x48000c00
 8003a80:	48001000 	.word	0x48001000
 8003a84:	48001400 	.word	0x48001400
 8003a88:	48001800 	.word	0x48001800
 8003a8c:	40010400 	.word	0x40010400

08003a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aa0:	787b      	ldrb	r3, [r7, #1]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003aca:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d006      	beq.n	8003ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ad6:	4a05      	ldr	r2, [pc, #20]	@ (8003aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003adc:	88fb      	ldrh	r3, [r7, #6]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f806 	bl	8003af0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40010400 	.word	0x40010400

08003af0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e08d      	b.n	8003c34 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7fd fb21 	bl	8001174 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2224      	movs	r2, #36	@ 0x24
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0201 	bic.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b7c:	609a      	str	r2, [r3, #8]
 8003b7e:	e006      	b.n	8003b8e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d108      	bne.n	8003ba8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	e007      	b.n	8003bb8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bb6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bda:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69d9      	ldr	r1, [r3, #28]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1a      	ldr	r2, [r3, #32]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d138      	bne.n	8003cc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e032      	b.n	8003cc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2224      	movs	r2, #36	@ 0x24
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e000      	b.n	8003cc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
  }
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d139      	bne.n	8003d5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e033      	b.n	8003d5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2224      	movs	r2, #36	@ 0x24
 8003d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0201 	bic.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e000      	b.n	8003d5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b086      	sub	sp, #24
 8003d6e:	af02      	add	r7, sp, #8
 8003d70:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e101      	b.n	8003f80 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d106      	bne.n	8003d96 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7fd fb79 	bl	8001488 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2203      	movs	r2, #3
 8003d9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f002 fef1 	bl	8006b90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7c1a      	ldrb	r2, [r3, #16]
 8003db6:	f88d 2000 	strb.w	r2, [sp]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dbe:	f002 feba 	bl	8006b36 <USB_CoreInit>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0d5      	b.n	8003f80 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f002 fee9 	bl	8006bb2 <USB_SetCurrentMode>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e0c6      	b.n	8003f80 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	73fb      	strb	r3, [r7, #15]
 8003df6:	e04a      	b.n	8003e8e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	3315      	adds	r3, #21
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	7bfa      	ldrb	r2, [r7, #15]
 8003e1e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e20:	7bfa      	ldrb	r2, [r7, #15]
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	b298      	uxth	r0, r3
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	332e      	adds	r3, #46	@ 0x2e
 8003e34:	4602      	mov	r2, r0
 8003e36:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	3318      	adds	r3, #24
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	331c      	adds	r3, #28
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e60:	7bfa      	ldrb	r2, [r7, #15]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	3320      	adds	r3, #32
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e74:	7bfa      	ldrb	r2, [r7, #15]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	3324      	adds	r3, #36	@ 0x24
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	791b      	ldrb	r3, [r3, #4]
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d3af      	bcc.n	8003df8 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]
 8003e9c:	e044      	b.n	8003f28 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003eb4:	7bfa      	ldrb	r2, [r7, #15]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003ec6:	7bfa      	ldrb	r2, [r7, #15]
 8003ec8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ef6:	7bfa      	ldrb	r2, [r7, #15]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	3301      	adds	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	791b      	ldrb	r3, [r3, #4]
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d3b5      	bcc.n	8003e9e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	7c1a      	ldrb	r2, [r3, #16]
 8003f3a:	f88d 2000 	strb.w	r2, [sp]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f42:	f002 fe83 	bl	8006c4c <USB_DevInit>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e013      	b.n	8003f80 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	7b1b      	ldrb	r3, [r3, #12]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d102      	bne.n	8003f74 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f80a 	bl	8003f88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f003 f828 	bl	8006fce <USB_DevDisconnect>

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fba:	f043 0303 	orr.w	r3, r3, #3
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fd4:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a04      	ldr	r2, [pc, #16]	@ (8003fec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fde:	6013      	str	r3, [r2, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40007000 	.word	0x40007000

08003ff0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ff4:	4b04      	ldr	r3, [pc, #16]	@ (8004008 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40007000 	.word	0x40007000

0800400c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800401a:	d130      	bne.n	800407e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800401c:	4b23      	ldr	r3, [pc, #140]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004028:	d038      	beq.n	800409c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800402a:	4b20      	ldr	r3, [pc, #128]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004032:	4a1e      	ldr	r2, [pc, #120]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004034:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004038:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800403a:	4b1d      	ldr	r3, [pc, #116]	@ (80040b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2232      	movs	r2, #50	@ 0x32
 8004040:	fb02 f303 	mul.w	r3, r2, r3
 8004044:	4a1b      	ldr	r2, [pc, #108]	@ (80040b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	0c9b      	lsrs	r3, r3, #18
 800404c:	3301      	adds	r3, #1
 800404e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004050:	e002      	b.n	8004058 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	3b01      	subs	r3, #1
 8004056:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004058:	4b14      	ldr	r3, [pc, #80]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004064:	d102      	bne.n	800406c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f2      	bne.n	8004052 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800406c:	4b0f      	ldr	r3, [pc, #60]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004078:	d110      	bne.n	800409c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e00f      	b.n	800409e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800407e:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800408a:	d007      	beq.n	800409c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800408c:	4b07      	ldr	r3, [pc, #28]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004094:	4a05      	ldr	r2, [pc, #20]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004096:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800409a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40007000 	.word	0x40007000
 80040b0:	20000000 	.word	0x20000000
 80040b4:	431bde83 	.word	0x431bde83

080040b8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80040bc:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4a04      	ldr	r2, [pc, #16]	@ (80040d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80040c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040c6:	6053      	str	r3, [r2, #4]
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40007000 	.word	0x40007000

080040d8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af02      	add	r7, sp, #8
 80040de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80040e0:	f7fd fc06 	bl	80018f0 <HAL_GetTick>
 80040e4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e063      	b.n	80041b8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7fd f893 	bl	8001230 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800410a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f858 	bl	80041c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	3b01      	subs	r3, #1
 8004124:	021a      	lsls	r2, r3, #8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	2120      	movs	r1, #32
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f850 	bl	80041e0 <QSPI_WaitFlagStateUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004144:	7afb      	ldrb	r3, [r7, #11]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d131      	bne.n	80041ae <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004154:	f023 0310 	bic.w	r3, r3, #16
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6852      	ldr	r2, [r2, #4]
 800415c:	0611      	lsls	r1, r2, #24
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68d2      	ldr	r2, [r2, #12]
 8004162:	4311      	orrs	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	430b      	orrs	r3, r1
 800416a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <HAL_QSPI_Init+0xe8>)
 8004174:	4013      	ands	r3, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6912      	ldr	r2, [r2, #16]
 800417a:	0411      	lsls	r1, r2, #16
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6952      	ldr	r2, [r2, #20]
 8004180:	4311      	orrs	r1, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6992      	ldr	r2, [r2, #24]
 8004186:	4311      	orrs	r1, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	430b      	orrs	r3, r1
 800418e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80041b6:	7afb      	ldrb	r3, [r7, #11]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	ffe0f8fe 	.word	0xffe0f8fe

080041c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041f0:	e01a      	b.n	8004228 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d016      	beq.n	8004228 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fd fb79 	bl	80018f0 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2204      	movs	r2, #4
 8004214:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421c:	f043 0201 	orr.w	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e00e      	b.n	8004246 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	bf14      	ite	ne
 8004236:	2301      	movne	r3, #1
 8004238:	2300      	moveq	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	429a      	cmp	r2, r3
 8004242:	d1d6      	bne.n	80041f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e3ca      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004262:	4b97      	ldr	r3, [pc, #604]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800426c:	4b94      	ldr	r3, [pc, #592]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 80e4 	beq.w	800444c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <HAL_RCC_OscConfig+0x4a>
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	f040 808b 	bne.w	80043a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b01      	cmp	r3, #1
 8004296:	f040 8087 	bne.w	80043a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800429a:	4b89      	ldr	r3, [pc, #548]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_RCC_OscConfig+0x62>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e3a2      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	4b82      	ldr	r3, [pc, #520]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d004      	beq.n	80042cc <HAL_RCC_OscConfig+0x7c>
 80042c2:	4b7f      	ldr	r3, [pc, #508]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042ca:	e005      	b.n	80042d8 <HAL_RCC_OscConfig+0x88>
 80042cc:	4b7c      	ldr	r3, [pc, #496]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80042ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042d8:	4293      	cmp	r3, r2
 80042da:	d223      	bcs.n	8004324 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fd55 	bl	8004d90 <RCC_SetFlashLatencyFromMSIRange>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e383      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f0:	4b73      	ldr	r3, [pc, #460]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a72      	ldr	r2, [pc, #456]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80042f6:	f043 0308 	orr.w	r3, r3, #8
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	4b70      	ldr	r3, [pc, #448]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	496d      	ldr	r1, [pc, #436]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800430e:	4b6c      	ldr	r3, [pc, #432]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	4968      	ldr	r1, [pc, #416]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 800431e:	4313      	orrs	r3, r2
 8004320:	604b      	str	r3, [r1, #4]
 8004322:	e025      	b.n	8004370 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004324:	4b66      	ldr	r3, [pc, #408]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a65      	ldr	r2, [pc, #404]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 800432a:	f043 0308 	orr.w	r3, r3, #8
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b63      	ldr	r3, [pc, #396]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	4960      	ldr	r1, [pc, #384]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004342:	4b5f      	ldr	r3, [pc, #380]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	495b      	ldr	r1, [pc, #364]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 8004352:	4313      	orrs	r3, r2
 8004354:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fd15 	bl	8004d90 <RCC_SetFlashLatencyFromMSIRange>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e343      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004370:	f000 fc4a 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004374:	4602      	mov	r2, r0
 8004376:	4b52      	ldr	r3, [pc, #328]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	4950      	ldr	r1, [pc, #320]	@ (80044c4 <HAL_RCC_OscConfig+0x274>)
 8004382:	5ccb      	ldrb	r3, [r1, r3]
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
 800438c:	4a4e      	ldr	r2, [pc, #312]	@ (80044c8 <HAL_RCC_OscConfig+0x278>)
 800438e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004390:	4b4e      	ldr	r3, [pc, #312]	@ (80044cc <HAL_RCC_OscConfig+0x27c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7fd fa5b 	bl	8001850 <HAL_InitTick>
 800439a:	4603      	mov	r3, r0
 800439c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d052      	beq.n	800444a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	e327      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d032      	beq.n	8004416 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043b0:	4b43      	ldr	r3, [pc, #268]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a42      	ldr	r2, [pc, #264]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043bc:	f7fd fa98 	bl	80018f0 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043c4:	f7fd fa94 	bl	80018f0 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e310      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043d6:	4b3a      	ldr	r3, [pc, #232]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e2:	4b37      	ldr	r3, [pc, #220]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a36      	ldr	r2, [pc, #216]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80043e8:	f043 0308 	orr.w	r3, r3, #8
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	4b34      	ldr	r3, [pc, #208]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	4931      	ldr	r1, [pc, #196]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004400:	4b2f      	ldr	r3, [pc, #188]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	492c      	ldr	r1, [pc, #176]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
 8004414:	e01a      	b.n	800444c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004416:	4b2a      	ldr	r3, [pc, #168]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a29      	ldr	r2, [pc, #164]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004422:	f7fd fa65 	bl	80018f0 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800442a:	f7fd fa61 	bl	80018f0 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e2dd      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800443c:	4b20      	ldr	r3, [pc, #128]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f0      	bne.n	800442a <HAL_RCC_OscConfig+0x1da>
 8004448:	e000      	b.n	800444c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800444a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d074      	beq.n	8004542 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	2b08      	cmp	r3, #8
 800445c:	d005      	beq.n	800446a <HAL_RCC_OscConfig+0x21a>
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b0c      	cmp	r3, #12
 8004462:	d10e      	bne.n	8004482 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2b03      	cmp	r3, #3
 8004468:	d10b      	bne.n	8004482 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446a:	4b15      	ldr	r3, [pc, #84]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d064      	beq.n	8004540 <HAL_RCC_OscConfig+0x2f0>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d160      	bne.n	8004540 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e2ba      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800448a:	d106      	bne.n	800449a <HAL_RCC_OscConfig+0x24a>
 800448c:	4b0c      	ldr	r3, [pc, #48]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0b      	ldr	r2, [pc, #44]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 8004492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	e026      	b.n	80044e8 <HAL_RCC_OscConfig+0x298>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044a2:	d115      	bne.n	80044d0 <HAL_RCC_OscConfig+0x280>
 80044a4:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a05      	ldr	r2, [pc, #20]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80044aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4b03      	ldr	r3, [pc, #12]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a02      	ldr	r2, [pc, #8]	@ (80044c0 <HAL_RCC_OscConfig+0x270>)
 80044b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	e014      	b.n	80044e8 <HAL_RCC_OscConfig+0x298>
 80044be:	bf00      	nop
 80044c0:	40021000 	.word	0x40021000
 80044c4:	08008438 	.word	0x08008438
 80044c8:	20000000 	.word	0x20000000
 80044cc:	20000004 	.word	0x20000004
 80044d0:	4ba0      	ldr	r3, [pc, #640]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a9f      	ldr	r2, [pc, #636]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 80044d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4b9d      	ldr	r3, [pc, #628]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a9c      	ldr	r2, [pc, #624]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 80044e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d013      	beq.n	8004518 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fd f9fe 	bl	80018f0 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f8:	f7fd f9fa 	bl	80018f0 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	@ 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e276      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450a:	4b92      	ldr	r3, [pc, #584]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0x2a8>
 8004516:	e014      	b.n	8004542 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fd f9ea 	bl	80018f0 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004520:	f7fd f9e6 	bl	80018f0 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	@ 0x64
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e262      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004532:	4b88      	ldr	r3, [pc, #544]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x2d0>
 800453e:	e000      	b.n	8004542 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d060      	beq.n	8004610 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b04      	cmp	r3, #4
 8004552:	d005      	beq.n	8004560 <HAL_RCC_OscConfig+0x310>
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b0c      	cmp	r3, #12
 8004558:	d119      	bne.n	800458e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d116      	bne.n	800458e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004560:	4b7c      	ldr	r3, [pc, #496]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_RCC_OscConfig+0x328>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e23f      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004578:	4b76      	ldr	r3, [pc, #472]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	061b      	lsls	r3, r3, #24
 8004586:	4973      	ldr	r1, [pc, #460]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004588:	4313      	orrs	r3, r2
 800458a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800458c:	e040      	b.n	8004610 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d023      	beq.n	80045de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004596:	4b6f      	ldr	r3, [pc, #444]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6e      	ldr	r2, [pc, #440]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 800459c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fd f9a5 	bl	80018f0 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fd f9a1 	bl	80018f0 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e21d      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045bc:	4b65      	ldr	r3, [pc, #404]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b62      	ldr	r3, [pc, #392]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	061b      	lsls	r3, r3, #24
 80045d6:	495f      	ldr	r1, [pc, #380]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	604b      	str	r3, [r1, #4]
 80045dc:	e018      	b.n	8004610 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045de:	4b5d      	ldr	r3, [pc, #372]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a5c      	ldr	r2, [pc, #368]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 80045e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fd f981 	bl	80018f0 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f2:	f7fd f97d 	bl	80018f0 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e1f9      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004604:	4b53      	ldr	r3, [pc, #332]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f0      	bne.n	80045f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d03c      	beq.n	8004696 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01c      	beq.n	800465e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004624:	4b4b      	ldr	r3, [pc, #300]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800462a:	4a4a      	ldr	r2, [pc, #296]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004634:	f7fd f95c 	bl	80018f0 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463c:	f7fd f958 	bl	80018f0 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e1d4      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800464e:	4b41      	ldr	r3, [pc, #260]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0ef      	beq.n	800463c <HAL_RCC_OscConfig+0x3ec>
 800465c:	e01b      	b.n	8004696 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465e:	4b3d      	ldr	r3, [pc, #244]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004660:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004664:	4a3b      	ldr	r2, [pc, #236]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466e:	f7fd f93f 	bl	80018f0 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004676:	f7fd f93b 	bl	80018f0 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e1b7      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004688:	4b32      	ldr	r3, [pc, #200]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 800468a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1ef      	bne.n	8004676 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80a6 	beq.w	80047f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a4:	2300      	movs	r3, #0
 80046a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 80046aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10d      	bne.n	80046d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b4:	4b27      	ldr	r3, [pc, #156]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 80046b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b8:	4a26      	ldr	r2, [pc, #152]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 80046ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046be:	6593      	str	r3, [r2, #88]	@ 0x58
 80046c0:	4b24      	ldr	r3, [pc, #144]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 80046c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046cc:	2301      	movs	r3, #1
 80046ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d0:	4b21      	ldr	r3, [pc, #132]	@ (8004758 <HAL_RCC_OscConfig+0x508>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d118      	bne.n	800470e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004758 <HAL_RCC_OscConfig+0x508>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004758 <HAL_RCC_OscConfig+0x508>)
 80046e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e8:	f7fd f902 	bl	80018f0 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f0:	f7fd f8fe 	bl	80018f0 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e17a      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004702:	4b15      	ldr	r3, [pc, #84]	@ (8004758 <HAL_RCC_OscConfig+0x508>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d108      	bne.n	8004728 <HAL_RCC_OscConfig+0x4d8>
 8004716:	4b0f      	ldr	r3, [pc, #60]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471c:	4a0d      	ldr	r2, [pc, #52]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004726:	e029      	b.n	800477c <HAL_RCC_OscConfig+0x52c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b05      	cmp	r3, #5
 800472e:	d115      	bne.n	800475c <HAL_RCC_OscConfig+0x50c>
 8004730:	4b08      	ldr	r3, [pc, #32]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004736:	4a07      	ldr	r2, [pc, #28]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004738:	f043 0304 	orr.w	r3, r3, #4
 800473c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004740:	4b04      	ldr	r3, [pc, #16]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004746:	4a03      	ldr	r2, [pc, #12]	@ (8004754 <HAL_RCC_OscConfig+0x504>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004750:	e014      	b.n	800477c <HAL_RCC_OscConfig+0x52c>
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	40007000 	.word	0x40007000
 800475c:	4b9c      	ldr	r3, [pc, #624]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004762:	4a9b      	ldr	r2, [pc, #620]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800476c:	4b98      	ldr	r3, [pc, #608]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004772:	4a97      	ldr	r2, [pc, #604]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 8004774:	f023 0304 	bic.w	r3, r3, #4
 8004778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d016      	beq.n	80047b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004784:	f7fd f8b4 	bl	80018f0 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478c:	f7fd f8b0 	bl	80018f0 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e12a      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a2:	4b8b      	ldr	r3, [pc, #556]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0ed      	beq.n	800478c <HAL_RCC_OscConfig+0x53c>
 80047b0:	e015      	b.n	80047de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b2:	f7fd f89d 	bl	80018f0 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047b8:	e00a      	b.n	80047d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ba:	f7fd f899 	bl	80018f0 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e113      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d0:	4b7f      	ldr	r3, [pc, #508]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1ed      	bne.n	80047ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047de:	7ffb      	ldrb	r3, [r7, #31]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d105      	bne.n	80047f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e4:	4b7a      	ldr	r3, [pc, #488]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 80047e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e8:	4a79      	ldr	r2, [pc, #484]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 80047ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80fe 	beq.w	80049f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fe:	2b02      	cmp	r3, #2
 8004800:	f040 80d0 	bne.w	80049a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004804:	4b72      	ldr	r3, [pc, #456]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004814:	429a      	cmp	r2, r3
 8004816:	d130      	bne.n	800487a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004822:	3b01      	subs	r3, #1
 8004824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d127      	bne.n	800487a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004834:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d11f      	bne.n	800487a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004844:	2a07      	cmp	r2, #7
 8004846:	bf14      	ite	ne
 8004848:	2201      	movne	r2, #1
 800484a:	2200      	moveq	r2, #0
 800484c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800484e:	4293      	cmp	r3, r2
 8004850:	d113      	bne.n	800487a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	3b01      	subs	r3, #1
 8004860:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004862:	429a      	cmp	r2, r3
 8004864:	d109      	bne.n	800487a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	3b01      	subs	r3, #1
 8004874:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004876:	429a      	cmp	r2, r3
 8004878:	d06e      	beq.n	8004958 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d069      	beq.n	8004954 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004880:	4b53      	ldr	r3, [pc, #332]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d105      	bne.n	8004898 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800488c:	4b50      	ldr	r3, [pc, #320]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0ad      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800489c:	4b4c      	ldr	r3, [pc, #304]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a4b      	ldr	r2, [pc, #300]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 80048a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048a8:	f7fd f822 	bl	80018f0 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fd f81e 	bl	80018f0 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e09a      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c2:	4b43      	ldr	r3, [pc, #268]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ce:	4b40      	ldr	r3, [pc, #256]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	4b40      	ldr	r3, [pc, #256]	@ (80049d4 <HAL_RCC_OscConfig+0x784>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048de:	3a01      	subs	r2, #1
 80048e0:	0112      	lsls	r2, r2, #4
 80048e2:	4311      	orrs	r1, r2
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048e8:	0212      	lsls	r2, r2, #8
 80048ea:	4311      	orrs	r1, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048f0:	0852      	lsrs	r2, r2, #1
 80048f2:	3a01      	subs	r2, #1
 80048f4:	0552      	lsls	r2, r2, #21
 80048f6:	4311      	orrs	r1, r2
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80048fc:	0852      	lsrs	r2, r2, #1
 80048fe:	3a01      	subs	r2, #1
 8004900:	0652      	lsls	r2, r2, #25
 8004902:	4311      	orrs	r1, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004908:	0912      	lsrs	r2, r2, #4
 800490a:	0452      	lsls	r2, r2, #17
 800490c:	430a      	orrs	r2, r1
 800490e:	4930      	ldr	r1, [pc, #192]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 8004910:	4313      	orrs	r3, r2
 8004912:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004914:	4b2e      	ldr	r3, [pc, #184]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a2d      	ldr	r2, [pc, #180]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 800491a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800491e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004920:	4b2b      	ldr	r3, [pc, #172]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4a2a      	ldr	r2, [pc, #168]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 8004926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800492a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800492c:	f7fc ffe0 	bl	80018f0 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004934:	f7fc ffdc 	bl	80018f0 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e058      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004946:	4b22      	ldr	r3, [pc, #136]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004952:	e050      	b.n	80049f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e04f      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004958:	4b1d      	ldr	r3, [pc, #116]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d148      	bne.n	80049f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004964:	4b1a      	ldr	r3, [pc, #104]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a19      	ldr	r2, [pc, #100]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 800496a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800496e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004970:	4b17      	ldr	r3, [pc, #92]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a16      	ldr	r2, [pc, #88]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 8004976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800497a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800497c:	f7fc ffb8 	bl	80018f0 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004984:	f7fc ffb4 	bl	80018f0 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e030      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004996:	4b0e      	ldr	r3, [pc, #56]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x734>
 80049a2:	e028      	b.n	80049f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b0c      	cmp	r3, #12
 80049a8:	d023      	beq.n	80049f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049aa:	4b09      	ldr	r3, [pc, #36]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a08      	ldr	r2, [pc, #32]	@ (80049d0 <HAL_RCC_OscConfig+0x780>)
 80049b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b6:	f7fc ff9b 	bl	80018f0 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049bc:	e00c      	b.n	80049d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049be:	f7fc ff97 	bl	80018f0 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d905      	bls.n	80049d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e013      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
 80049d0:	40021000 	.word	0x40021000
 80049d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d8:	4b09      	ldr	r3, [pc, #36]	@ (8004a00 <HAL_RCC_OscConfig+0x7b0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1ec      	bne.n	80049be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049e4:	4b06      	ldr	r3, [pc, #24]	@ (8004a00 <HAL_RCC_OscConfig+0x7b0>)
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	4905      	ldr	r1, [pc, #20]	@ (8004a00 <HAL_RCC_OscConfig+0x7b0>)
 80049ea:	4b06      	ldr	r3, [pc, #24]	@ (8004a04 <HAL_RCC_OscConfig+0x7b4>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	60cb      	str	r3, [r1, #12]
 80049f0:	e001      	b.n	80049f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40021000 	.word	0x40021000
 8004a04:	feeefffc 	.word	0xfeeefffc

08004a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0e7      	b.n	8004bec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a1c:	4b75      	ldr	r3, [pc, #468]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d910      	bls.n	8004a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2a:	4b72      	ldr	r3, [pc, #456]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 0207 	bic.w	r2, r3, #7
 8004a32:	4970      	ldr	r1, [pc, #448]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3a:	4b6e      	ldr	r3, [pc, #440]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d001      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0cf      	b.n	8004bec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d010      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	4b66      	ldr	r3, [pc, #408]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d908      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a68:	4b63      	ldr	r3, [pc, #396]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4960      	ldr	r1, [pc, #384]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d04c      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d107      	bne.n	8004a9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a8e:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d121      	bne.n	8004ade <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e0a6      	b.n	8004bec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d107      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa6:	4b54      	ldr	r3, [pc, #336]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d115      	bne.n	8004ade <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e09a      	b.n	8004bec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004abe:	4b4e      	ldr	r3, [pc, #312]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e08e      	b.n	8004bec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ace:	4b4a      	ldr	r3, [pc, #296]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e086      	b.n	8004bec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ade:	4b46      	ldr	r3, [pc, #280]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f023 0203 	bic.w	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4943      	ldr	r1, [pc, #268]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af0:	f7fc fefe 	bl	80018f0 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af6:	e00a      	b.n	8004b0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af8:	f7fc fefa 	bl	80018f0 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e06e      	b.n	8004bec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 020c 	and.w	r2, r3, #12
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d1eb      	bne.n	8004af8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d010      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	4b31      	ldr	r3, [pc, #196]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d208      	bcs.n	8004b4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	492b      	ldr	r1, [pc, #172]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b4e:	4b29      	ldr	r3, [pc, #164]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d210      	bcs.n	8004b7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5c:	4b25      	ldr	r3, [pc, #148]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f023 0207 	bic.w	r2, r3, #7
 8004b64:	4923      	ldr	r1, [pc, #140]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6c:	4b21      	ldr	r3, [pc, #132]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d001      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e036      	b.n	8004bec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d008      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	4918      	ldr	r1, [pc, #96]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d009      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ba8:	4b13      	ldr	r3, [pc, #76]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	4910      	ldr	r1, [pc, #64]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bbc:	f000 f824 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	091b      	lsrs	r3, r3, #4
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	490b      	ldr	r1, [pc, #44]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f4>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd8:	4a09      	ldr	r2, [pc, #36]	@ (8004c00 <HAL_RCC_ClockConfig+0x1f8>)
 8004bda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bdc:	4b09      	ldr	r3, [pc, #36]	@ (8004c04 <HAL_RCC_ClockConfig+0x1fc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fc fe35 	bl	8001850 <HAL_InitTick>
 8004be6:	4603      	mov	r3, r0
 8004be8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bea:	7afb      	ldrb	r3, [r7, #11]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40022000 	.word	0x40022000
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	08008438 	.word	0x08008438
 8004c00:	20000000 	.word	0x20000000
 8004c04:	20000004 	.word	0x20000004

08004c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b089      	sub	sp, #36	@ 0x24
 8004c0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c16:	4b3e      	ldr	r3, [pc, #248]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c20:	4b3b      	ldr	r3, [pc, #236]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0x34>
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b0c      	cmp	r3, #12
 8004c34:	d121      	bne.n	8004c7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d11e      	bne.n	8004c7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c3c:	4b34      	ldr	r3, [pc, #208]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d107      	bne.n	8004c58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c48:	4b31      	ldr	r3, [pc, #196]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c4e:	0a1b      	lsrs	r3, r3, #8
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	e005      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c58:	4b2d      	ldr	r3, [pc, #180]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	091b      	lsrs	r3, r3, #4
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c64:	4a2b      	ldr	r2, [pc, #172]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10d      	bne.n	8004c90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c78:	e00a      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d102      	bne.n	8004c86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c80:	4b25      	ldr	r3, [pc, #148]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	e004      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d101      	bne.n	8004c90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c8c:	4b23      	ldr	r3, [pc, #140]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8004c8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d134      	bne.n	8004d00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c96:	4b1e      	ldr	r3, [pc, #120]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d003      	beq.n	8004cae <HAL_RCC_GetSysClockFreq+0xa6>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d003      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0xac>
 8004cac:	e005      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cae:	4b1a      	ldr	r3, [pc, #104]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cb0:	617b      	str	r3, [r7, #20]
      break;
 8004cb2:	e005      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004cb4:	4b19      	ldr	r3, [pc, #100]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8004cb6:	617b      	str	r3, [r7, #20]
      break;
 8004cb8:	e002      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	617b      	str	r3, [r7, #20]
      break;
 8004cbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cc0:	4b13      	ldr	r3, [pc, #76]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	3301      	adds	r3, #1
 8004ccc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cce:	4b10      	ldr	r3, [pc, #64]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	0a1b      	lsrs	r3, r3, #8
 8004cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	fb03 f202 	mul.w	r2, r3, r2
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	0e5b      	lsrs	r3, r3, #25
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d00:	69bb      	ldr	r3, [r7, #24]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3724      	adds	r7, #36	@ 0x24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000
 8004d14:	08008450 	.word	0x08008450
 8004d18:	00f42400 	.word	0x00f42400
 8004d1c:	007a1200 	.word	0x007a1200

08004d20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d24:	4b03      	ldr	r3, [pc, #12]	@ (8004d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d26:	681b      	ldr	r3, [r3, #0]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20000000 	.word	0x20000000

08004d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d3c:	f7ff fff0 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	4904      	ldr	r1, [pc, #16]	@ (8004d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d4e:	5ccb      	ldrb	r3, [r1, r3]
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	08008448 	.word	0x08008448

08004d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d68:	f7ff ffda 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	0adb      	lsrs	r3, r3, #11
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	4904      	ldr	r1, [pc, #16]	@ (8004d8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	08008448 	.word	0x08008448

08004d90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004da8:	f7ff f922 	bl	8003ff0 <HAL_PWREx_GetVoltageRange>
 8004dac:	6178      	str	r0, [r7, #20]
 8004dae:	e014      	b.n	8004dda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004db0:	4b25      	ldr	r3, [pc, #148]	@ (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db4:	4a24      	ldr	r2, [pc, #144]	@ (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dba:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dbc:	4b22      	ldr	r3, [pc, #136]	@ (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004dc8:	f7ff f912 	bl	8003ff0 <HAL_PWREx_GetVoltageRange>
 8004dcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dce:	4b1e      	ldr	r3, [pc, #120]	@ (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de0:	d10b      	bne.n	8004dfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b80      	cmp	r3, #128	@ 0x80
 8004de6:	d919      	bls.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2ba0      	cmp	r3, #160	@ 0xa0
 8004dec:	d902      	bls.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dee:	2302      	movs	r3, #2
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	e013      	b.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004df4:	2301      	movs	r3, #1
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	e010      	b.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b80      	cmp	r3, #128	@ 0x80
 8004dfe:	d902      	bls.n	8004e06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e00:	2303      	movs	r3, #3
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	e00a      	b.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b80      	cmp	r3, #128	@ 0x80
 8004e0a:	d102      	bne.n	8004e12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	e004      	b.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b70      	cmp	r3, #112	@ 0x70
 8004e16:	d101      	bne.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e18:	2301      	movs	r3, #1
 8004e1a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f023 0207 	bic.w	r2, r3, #7
 8004e24:	4909      	ldr	r1, [pc, #36]	@ (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e2c:	4b07      	ldr	r3, [pc, #28]	@ (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d001      	beq.n	8004e3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	40022000 	.word	0x40022000

08004e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e58:	2300      	movs	r3, #0
 8004e5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d041      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e74:	d02a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e7a:	d824      	bhi.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e80:	d008      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e86:	d81e      	bhi.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e90:	d010      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e92:	e018      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e94:	4b86      	ldr	r3, [pc, #536]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4a85      	ldr	r2, [pc, #532]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ea0:	e015      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 facb 	bl	8005444 <RCCEx_PLLSAI1_Config>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eb2:	e00c      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3320      	adds	r3, #32
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fbb6 	bl	800562c <RCCEx_PLLSAI2_Config>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ec4:	e003      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	74fb      	strb	r3, [r7, #19]
      break;
 8004eca:	e000      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ece:	7cfb      	ldrb	r3, [r7, #19]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10b      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ed4:	4b76      	ldr	r3, [pc, #472]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ee2:	4973      	ldr	r1, [pc, #460]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004eea:	e001      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d041      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f04:	d02a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f0a:	d824      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f10:	d008      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f16:	d81e      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f20:	d010      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f22:	e018      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f24:	4b62      	ldr	r3, [pc, #392]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	4a61      	ldr	r2, [pc, #388]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f30:	e015      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3304      	adds	r3, #4
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fa83 	bl	8005444 <RCCEx_PLLSAI1_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f42:	e00c      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3320      	adds	r3, #32
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fb6e 	bl	800562c <RCCEx_PLLSAI2_Config>
 8004f50:	4603      	mov	r3, r0
 8004f52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f54:	e003      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	74fb      	strb	r3, [r7, #19]
      break;
 8004f5a:	e000      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f5e:	7cfb      	ldrb	r3, [r7, #19]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f64:	4b52      	ldr	r3, [pc, #328]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f72:	494f      	ldr	r1, [pc, #316]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f7a:	e001      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80a0 	beq.w	80050ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f92:	4b47      	ldr	r3, [pc, #284]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00d      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa8:	4b41      	ldr	r3, [pc, #260]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fac:	4a40      	ldr	r2, [pc, #256]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a3a      	ldr	r2, [pc, #232]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fd0:	f7fc fc8e 	bl	80018f0 <HAL_GetTick>
 8004fd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fd6:	e009      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd8:	f7fc fc8a 	bl	80018f0 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d902      	bls.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	74fb      	strb	r3, [r7, #19]
        break;
 8004fea:	e005      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fec:	4b31      	ldr	r3, [pc, #196]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0ef      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ff8:	7cfb      	ldrb	r3, [r7, #19]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d15c      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005008:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01f      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	429a      	cmp	r2, r3
 800501a:	d019      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800501c:	4b24      	ldr	r3, [pc, #144]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005026:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005028:	4b21      	ldr	r3, [pc, #132]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502e:	4a20      	ldr	r2, [pc, #128]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005038:	4b1d      	ldr	r3, [pc, #116]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503e:	4a1c      	ldr	r2, [pc, #112]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005048:	4a19      	ldr	r2, [pc, #100]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505a:	f7fc fc49 	bl	80018f0 <HAL_GetTick>
 800505e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005060:	e00b      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005062:	f7fc fc45 	bl	80018f0 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005070:	4293      	cmp	r3, r2
 8005072:	d902      	bls.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	74fb      	strb	r3, [r7, #19]
            break;
 8005078:	e006      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800507a:	4b0d      	ldr	r3, [pc, #52]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0ec      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10c      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800508e:	4b08      	ldr	r3, [pc, #32]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800509e:	4904      	ldr	r1, [pc, #16]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050a6:	e009      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050a8:	7cfb      	ldrb	r3, [r7, #19]
 80050aa:	74bb      	strb	r3, [r7, #18]
 80050ac:	e006      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b8:	7cfb      	ldrb	r3, [r7, #19]
 80050ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050bc:	7c7b      	ldrb	r3, [r7, #17]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d105      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c2:	4b9e      	ldr	r3, [pc, #632]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c6:	4a9d      	ldr	r2, [pc, #628]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050da:	4b98      	ldr	r3, [pc, #608]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e0:	f023 0203 	bic.w	r2, r3, #3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e8:	4994      	ldr	r1, [pc, #592]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050fc:	4b8f      	ldr	r3, [pc, #572]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005102:	f023 020c 	bic.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510a:	498c      	ldr	r1, [pc, #560]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800511e:	4b87      	ldr	r3, [pc, #540]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005124:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	4983      	ldr	r1, [pc, #524]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005140:	4b7e      	ldr	r3, [pc, #504]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005146:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514e:	497b      	ldr	r1, [pc, #492]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005162:	4b76      	ldr	r3, [pc, #472]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005168:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005170:	4972      	ldr	r1, [pc, #456]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005184:	4b6d      	ldr	r3, [pc, #436]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005192:	496a      	ldr	r1, [pc, #424]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051a6:	4b65      	ldr	r3, [pc, #404]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b4:	4961      	ldr	r1, [pc, #388]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051c8:	4b5c      	ldr	r3, [pc, #368]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d6:	4959      	ldr	r1, [pc, #356]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ea:	4b54      	ldr	r3, [pc, #336]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f8:	4950      	ldr	r1, [pc, #320]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800520c:	4b4b      	ldr	r3, [pc, #300]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005212:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521a:	4948      	ldr	r1, [pc, #288]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800522e:	4b43      	ldr	r3, [pc, #268]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005234:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523c:	493f      	ldr	r1, [pc, #252]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d028      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005250:	4b3a      	ldr	r3, [pc, #232]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005256:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800525e:	4937      	ldr	r1, [pc, #220]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800526a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800526e:	d106      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005270:	4b32      	ldr	r3, [pc, #200]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4a31      	ldr	r2, [pc, #196]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800527a:	60d3      	str	r3, [r2, #12]
 800527c:	e011      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005282:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005286:	d10c      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	2101      	movs	r1, #1
 800528e:	4618      	mov	r0, r3
 8005290:	f000 f8d8 	bl	8005444 <RCCEx_PLLSAI1_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005298:	7cfb      	ldrb	r3, [r7, #19]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d028      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052ae:	4b23      	ldr	r3, [pc, #140]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052bc:	491f      	ldr	r1, [pc, #124]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052cc:	d106      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ce:	4b1b      	ldr	r3, [pc, #108]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	4a1a      	ldr	r2, [pc, #104]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052d8:	60d3      	str	r3, [r2, #12]
 80052da:	e011      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052e4:	d10c      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	2101      	movs	r1, #1
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 f8a9 	bl	8005444 <RCCEx_PLLSAI1_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052f6:	7cfb      	ldrb	r3, [r7, #19]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d02b      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800530c:	4b0b      	ldr	r3, [pc, #44]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005312:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800531a:	4908      	ldr	r1, [pc, #32]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800532a:	d109      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800532c:	4b03      	ldr	r3, [pc, #12]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	4a02      	ldr	r2, [pc, #8]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005336:	60d3      	str	r3, [r2, #12]
 8005338:	e014      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800533a:	bf00      	nop
 800533c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005344:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005348:	d10c      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3304      	adds	r3, #4
 800534e:	2101      	movs	r1, #1
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f877 	bl	8005444 <RCCEx_PLLSAI1_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800535a:	7cfb      	ldrb	r3, [r7, #19]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d02f      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005370:	4b2b      	ldr	r3, [pc, #172]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005376:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800537e:	4928      	ldr	r1, [pc, #160]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800538a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800538e:	d10d      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3304      	adds	r3, #4
 8005394:	2102      	movs	r1, #2
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f854 	bl	8005444 <RCCEx_PLLSAI1_Config>
 800539c:	4603      	mov	r3, r0
 800539e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053a0:	7cfb      	ldrb	r3, [r7, #19]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d014      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053a6:	7cfb      	ldrb	r3, [r7, #19]
 80053a8:	74bb      	strb	r3, [r7, #18]
 80053aa:	e011      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3320      	adds	r3, #32
 80053ba:	2102      	movs	r1, #2
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 f935 	bl	800562c <RCCEx_PLLSAI2_Config>
 80053c2:	4603      	mov	r3, r0
 80053c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053c6:	7cfb      	ldrb	r3, [r7, #19]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053cc:	7cfb      	ldrb	r3, [r7, #19]
 80053ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053dc:	4b10      	ldr	r3, [pc, #64]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053ea:	490d      	ldr	r1, [pc, #52]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053fe:	4b08      	ldr	r3, [pc, #32]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005404:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800540e:	4904      	ldr	r1, [pc, #16]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005416:	7cbb      	ldrb	r3, [r7, #18]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40021000 	.word	0x40021000

08005424 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005428:	4b05      	ldr	r3, [pc, #20]	@ (8005440 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a04      	ldr	r2, [pc, #16]	@ (8005440 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800542e:	f043 0304 	orr.w	r3, r3, #4
 8005432:	6013      	str	r3, [r2, #0]
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40021000 	.word	0x40021000

08005444 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005452:	4b75      	ldr	r3, [pc, #468]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d018      	beq.n	8005490 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800545e:	4b72      	ldr	r3, [pc, #456]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0203 	and.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d10d      	bne.n	800548a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
       ||
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005476:	4b6c      	ldr	r3, [pc, #432]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	091b      	lsrs	r3, r3, #4
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
       ||
 8005486:	429a      	cmp	r2, r3
 8005488:	d047      	beq.n	800551a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	73fb      	strb	r3, [r7, #15]
 800548e:	e044      	b.n	800551a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b03      	cmp	r3, #3
 8005496:	d018      	beq.n	80054ca <RCCEx_PLLSAI1_Config+0x86>
 8005498:	2b03      	cmp	r3, #3
 800549a:	d825      	bhi.n	80054e8 <RCCEx_PLLSAI1_Config+0xa4>
 800549c:	2b01      	cmp	r3, #1
 800549e:	d002      	beq.n	80054a6 <RCCEx_PLLSAI1_Config+0x62>
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d009      	beq.n	80054b8 <RCCEx_PLLSAI1_Config+0x74>
 80054a4:	e020      	b.n	80054e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054a6:	4b60      	ldr	r3, [pc, #384]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d11d      	bne.n	80054ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054b6:	e01a      	b.n	80054ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054b8:	4b5b      	ldr	r3, [pc, #364]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d116      	bne.n	80054f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054c8:	e013      	b.n	80054f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054ca:	4b57      	ldr	r3, [pc, #348]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10f      	bne.n	80054f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054d6:	4b54      	ldr	r3, [pc, #336]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054e6:	e006      	b.n	80054f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      break;
 80054ec:	e004      	b.n	80054f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054ee:	bf00      	nop
 80054f0:	e002      	b.n	80054f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054f2:	bf00      	nop
 80054f4:	e000      	b.n	80054f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10d      	bne.n	800551a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6819      	ldr	r1, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	3b01      	subs	r3, #1
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	430b      	orrs	r3, r1
 8005514:	4944      	ldr	r1, [pc, #272]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005516:	4313      	orrs	r3, r2
 8005518:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d17d      	bne.n	800561c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005520:	4b41      	ldr	r3, [pc, #260]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a40      	ldr	r2, [pc, #256]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005526:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800552a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800552c:	f7fc f9e0 	bl	80018f0 <HAL_GetTick>
 8005530:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005532:	e009      	b.n	8005548 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005534:	f7fc f9dc 	bl	80018f0 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d902      	bls.n	8005548 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	73fb      	strb	r3, [r7, #15]
        break;
 8005546:	e005      	b.n	8005554 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005548:	4b37      	ldr	r3, [pc, #220]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1ef      	bne.n	8005534 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d160      	bne.n	800561c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d111      	bne.n	8005584 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005560:	4b31      	ldr	r3, [pc, #196]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6892      	ldr	r2, [r2, #8]
 8005570:	0211      	lsls	r1, r2, #8
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	68d2      	ldr	r2, [r2, #12]
 8005576:	0912      	lsrs	r2, r2, #4
 8005578:	0452      	lsls	r2, r2, #17
 800557a:	430a      	orrs	r2, r1
 800557c:	492a      	ldr	r1, [pc, #168]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 800557e:	4313      	orrs	r3, r2
 8005580:	610b      	str	r3, [r1, #16]
 8005582:	e027      	b.n	80055d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d112      	bne.n	80055b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800558a:	4b27      	ldr	r3, [pc, #156]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005592:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6892      	ldr	r2, [r2, #8]
 800559a:	0211      	lsls	r1, r2, #8
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6912      	ldr	r2, [r2, #16]
 80055a0:	0852      	lsrs	r2, r2, #1
 80055a2:	3a01      	subs	r2, #1
 80055a4:	0552      	lsls	r2, r2, #21
 80055a6:	430a      	orrs	r2, r1
 80055a8:	491f      	ldr	r1, [pc, #124]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	610b      	str	r3, [r1, #16]
 80055ae:	e011      	b.n	80055d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80055b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6892      	ldr	r2, [r2, #8]
 80055c0:	0211      	lsls	r1, r2, #8
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6952      	ldr	r2, [r2, #20]
 80055c6:	0852      	lsrs	r2, r2, #1
 80055c8:	3a01      	subs	r2, #1
 80055ca:	0652      	lsls	r2, r2, #25
 80055cc:	430a      	orrs	r2, r1
 80055ce:	4916      	ldr	r1, [pc, #88]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055d4:	4b14      	ldr	r3, [pc, #80]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a13      	ldr	r2, [pc, #76]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e0:	f7fc f986 	bl	80018f0 <HAL_GetTick>
 80055e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055e6:	e009      	b.n	80055fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055e8:	f7fc f982 	bl	80018f0 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d902      	bls.n	80055fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	73fb      	strb	r3, [r7, #15]
          break;
 80055fa:	e005      	b.n	8005608 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0ef      	beq.n	80055e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800560e:	4b06      	ldr	r3, [pc, #24]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	4904      	ldr	r1, [pc, #16]	@ (8005628 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005618:	4313      	orrs	r3, r2
 800561a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40021000 	.word	0x40021000

0800562c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800563a:	4b6a      	ldr	r3, [pc, #424]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d018      	beq.n	8005678 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005646:	4b67      	ldr	r3, [pc, #412]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0203 	and.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d10d      	bne.n	8005672 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
       ||
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800565e:	4b61      	ldr	r3, [pc, #388]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	091b      	lsrs	r3, r3, #4
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
       ||
 800566e:	429a      	cmp	r2, r3
 8005670:	d047      	beq.n	8005702 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
 8005676:	e044      	b.n	8005702 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d018      	beq.n	80056b2 <RCCEx_PLLSAI2_Config+0x86>
 8005680:	2b03      	cmp	r3, #3
 8005682:	d825      	bhi.n	80056d0 <RCCEx_PLLSAI2_Config+0xa4>
 8005684:	2b01      	cmp	r3, #1
 8005686:	d002      	beq.n	800568e <RCCEx_PLLSAI2_Config+0x62>
 8005688:	2b02      	cmp	r3, #2
 800568a:	d009      	beq.n	80056a0 <RCCEx_PLLSAI2_Config+0x74>
 800568c:	e020      	b.n	80056d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800568e:	4b55      	ldr	r3, [pc, #340]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d11d      	bne.n	80056d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800569e:	e01a      	b.n	80056d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056a0:	4b50      	ldr	r3, [pc, #320]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d116      	bne.n	80056da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b0:	e013      	b.n	80056da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056b2:	4b4c      	ldr	r3, [pc, #304]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10f      	bne.n	80056de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056be:	4b49      	ldr	r3, [pc, #292]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056ce:	e006      	b.n	80056de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
      break;
 80056d4:	e004      	b.n	80056e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056d6:	bf00      	nop
 80056d8:	e002      	b.n	80056e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056da:	bf00      	nop
 80056dc:	e000      	b.n	80056e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056de:	bf00      	nop
    }

    if(status == HAL_OK)
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10d      	bne.n	8005702 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056e6:	4b3f      	ldr	r3, [pc, #252]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6819      	ldr	r1, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	430b      	orrs	r3, r1
 80056fc:	4939      	ldr	r1, [pc, #228]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d167      	bne.n	80057d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005708:	4b36      	ldr	r3, [pc, #216]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a35      	ldr	r2, [pc, #212]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800570e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005714:	f7fc f8ec 	bl	80018f0 <HAL_GetTick>
 8005718:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800571a:	e009      	b.n	8005730 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800571c:	f7fc f8e8 	bl	80018f0 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d902      	bls.n	8005730 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	73fb      	strb	r3, [r7, #15]
        break;
 800572e:	e005      	b.n	800573c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005730:	4b2c      	ldr	r3, [pc, #176]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1ef      	bne.n	800571c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d14a      	bne.n	80057d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d111      	bne.n	800576c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005748:	4b26      	ldr	r3, [pc, #152]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6892      	ldr	r2, [r2, #8]
 8005758:	0211      	lsls	r1, r2, #8
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68d2      	ldr	r2, [r2, #12]
 800575e:	0912      	lsrs	r2, r2, #4
 8005760:	0452      	lsls	r2, r2, #17
 8005762:	430a      	orrs	r2, r1
 8005764:	491f      	ldr	r1, [pc, #124]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005766:	4313      	orrs	r3, r2
 8005768:	614b      	str	r3, [r1, #20]
 800576a:	e011      	b.n	8005790 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800576c:	4b1d      	ldr	r3, [pc, #116]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005774:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6892      	ldr	r2, [r2, #8]
 800577c:	0211      	lsls	r1, r2, #8
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6912      	ldr	r2, [r2, #16]
 8005782:	0852      	lsrs	r2, r2, #1
 8005784:	3a01      	subs	r2, #1
 8005786:	0652      	lsls	r2, r2, #25
 8005788:	430a      	orrs	r2, r1
 800578a:	4916      	ldr	r1, [pc, #88]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800578c:	4313      	orrs	r3, r2
 800578e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005790:	4b14      	ldr	r3, [pc, #80]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a13      	ldr	r2, [pc, #76]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800579a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579c:	f7fc f8a8 	bl	80018f0 <HAL_GetTick>
 80057a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057a2:	e009      	b.n	80057b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057a4:	f7fc f8a4 	bl	80018f0 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d902      	bls.n	80057b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	73fb      	strb	r3, [r7, #15]
          break;
 80057b6:	e005      	b.n	80057c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057b8:	4b0a      	ldr	r3, [pc, #40]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0ef      	beq.n	80057a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057ca:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057cc:	695a      	ldr	r2, [r3, #20]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	4904      	ldr	r1, [pc, #16]	@ (80057e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40021000 	.word	0x40021000

080057e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e095      	b.n	8005926 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d108      	bne.n	8005814 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800580a:	d009      	beq.n	8005820 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	61da      	str	r2, [r3, #28]
 8005812:	e005      	b.n	8005820 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fb fd3c 	bl	80012b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005856:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005860:	d902      	bls.n	8005868 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	e002      	b.n	800586e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800586c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005876:	d007      	beq.n	8005888 <HAL_SPI_Init+0xa0>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005880:	d002      	beq.n	8005888 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ca:	ea42 0103 	orr.w	r1, r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	0c1b      	lsrs	r3, r3, #16
 80058e4:	f003 0204 	and.w	r2, r3, #4
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005904:	ea42 0103 	orr.w	r1, r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e049      	b.n	80059d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fa ff59 	bl	800080c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3304      	adds	r3, #4
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f000 f96f 	bl	8005c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d001      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e04f      	b.n	8005a94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a23      	ldr	r2, [pc, #140]	@ (8005aa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01d      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a1e:	d018      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1c      	ldr	r2, [pc, #112]	@ (8005aac <HAL_TIM_Base_Start_IT+0xd0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a19      	ldr	r2, [pc, #100]	@ (8005ab4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d115      	bne.n	8005a7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	4b17      	ldr	r3, [pc, #92]	@ (8005ab8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b06      	cmp	r3, #6
 8005a62:	d015      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0xb4>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a6a:	d011      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7c:	e008      	b.n	8005a90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e000      	b.n	8005a92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	40012c00 	.word	0x40012c00
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00
 8005ab0:	40013400 	.word	0x40013400
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	00010007 	.word	0x00010007

08005abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e0b6      	b.n	8005c46 <HAL_TIM_ConfigClockSource+0x18a>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005af6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b14:	d03e      	beq.n	8005b94 <HAL_TIM_ConfigClockSource+0xd8>
 8005b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b1a:	f200 8087 	bhi.w	8005c2c <HAL_TIM_ConfigClockSource+0x170>
 8005b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b22:	f000 8086 	beq.w	8005c32 <HAL_TIM_ConfigClockSource+0x176>
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b2a:	d87f      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x170>
 8005b2c:	2b70      	cmp	r3, #112	@ 0x70
 8005b2e:	d01a      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0xaa>
 8005b30:	2b70      	cmp	r3, #112	@ 0x70
 8005b32:	d87b      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x170>
 8005b34:	2b60      	cmp	r3, #96	@ 0x60
 8005b36:	d050      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x11e>
 8005b38:	2b60      	cmp	r3, #96	@ 0x60
 8005b3a:	d877      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x170>
 8005b3c:	2b50      	cmp	r3, #80	@ 0x50
 8005b3e:	d03c      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0xfe>
 8005b40:	2b50      	cmp	r3, #80	@ 0x50
 8005b42:	d873      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x170>
 8005b44:	2b40      	cmp	r3, #64	@ 0x40
 8005b46:	d058      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x13e>
 8005b48:	2b40      	cmp	r3, #64	@ 0x40
 8005b4a:	d86f      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x170>
 8005b4c:	2b30      	cmp	r3, #48	@ 0x30
 8005b4e:	d064      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x15e>
 8005b50:	2b30      	cmp	r3, #48	@ 0x30
 8005b52:	d86b      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x170>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d060      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x15e>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d867      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x170>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d05c      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x15e>
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d05a      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x15e>
 8005b64:	e062      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b76:	f000 f98b 	bl	8005e90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	609a      	str	r2, [r3, #8]
      break;
 8005b92:	e04f      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ba4:	f000 f974 	bl	8005e90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bb6:	609a      	str	r2, [r3, #8]
      break;
 8005bb8:	e03c      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f000 f8e8 	bl	8005d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2150      	movs	r1, #80	@ 0x50
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 f941 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 8005bd8:	e02c      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be6:	461a      	mov	r2, r3
 8005be8:	f000 f907 	bl	8005dfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2160      	movs	r1, #96	@ 0x60
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f931 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 8005bf8:	e01c      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c06:	461a      	mov	r2, r3
 8005c08:	f000 f8c8 	bl	8005d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2140      	movs	r1, #64	@ 0x40
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 f921 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 8005c18:	e00c      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f000 f918 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 8005c2a:	e003      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c30:	e000      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a46      	ldr	r2, [pc, #280]	@ (8005d7c <TIM_Base_SetConfig+0x12c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d013      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c6e:	d00f      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a43      	ldr	r2, [pc, #268]	@ (8005d80 <TIM_Base_SetConfig+0x130>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00b      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a42      	ldr	r2, [pc, #264]	@ (8005d84 <TIM_Base_SetConfig+0x134>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d007      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a41      	ldr	r2, [pc, #260]	@ (8005d88 <TIM_Base_SetConfig+0x138>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a40      	ldr	r2, [pc, #256]	@ (8005d8c <TIM_Base_SetConfig+0x13c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d108      	bne.n	8005ca2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a35      	ldr	r2, [pc, #212]	@ (8005d7c <TIM_Base_SetConfig+0x12c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01f      	beq.n	8005cea <TIM_Base_SetConfig+0x9a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb0:	d01b      	beq.n	8005cea <TIM_Base_SetConfig+0x9a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a32      	ldr	r2, [pc, #200]	@ (8005d80 <TIM_Base_SetConfig+0x130>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d017      	beq.n	8005cea <TIM_Base_SetConfig+0x9a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a31      	ldr	r2, [pc, #196]	@ (8005d84 <TIM_Base_SetConfig+0x134>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d013      	beq.n	8005cea <TIM_Base_SetConfig+0x9a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a30      	ldr	r2, [pc, #192]	@ (8005d88 <TIM_Base_SetConfig+0x138>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00f      	beq.n	8005cea <TIM_Base_SetConfig+0x9a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2f      	ldr	r2, [pc, #188]	@ (8005d8c <TIM_Base_SetConfig+0x13c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00b      	beq.n	8005cea <TIM_Base_SetConfig+0x9a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8005d90 <TIM_Base_SetConfig+0x140>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d007      	beq.n	8005cea <TIM_Base_SetConfig+0x9a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8005d94 <TIM_Base_SetConfig+0x144>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d003      	beq.n	8005cea <TIM_Base_SetConfig+0x9a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8005d98 <TIM_Base_SetConfig+0x148>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d108      	bne.n	8005cfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a16      	ldr	r2, [pc, #88]	@ (8005d7c <TIM_Base_SetConfig+0x12c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00f      	beq.n	8005d48 <TIM_Base_SetConfig+0xf8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a18      	ldr	r2, [pc, #96]	@ (8005d8c <TIM_Base_SetConfig+0x13c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <TIM_Base_SetConfig+0xf8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a17      	ldr	r2, [pc, #92]	@ (8005d90 <TIM_Base_SetConfig+0x140>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d007      	beq.n	8005d48 <TIM_Base_SetConfig+0xf8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a16      	ldr	r2, [pc, #88]	@ (8005d94 <TIM_Base_SetConfig+0x144>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_Base_SetConfig+0xf8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a15      	ldr	r2, [pc, #84]	@ (8005d98 <TIM_Base_SetConfig+0x148>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d103      	bne.n	8005d50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d105      	bne.n	8005d6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f023 0201 	bic.w	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	611a      	str	r2, [r3, #16]
  }
}
 8005d6e:	bf00      	nop
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40012c00 	.word	0x40012c00
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40000c00 	.word	0x40000c00
 8005d8c:	40013400 	.word	0x40013400
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40014400 	.word	0x40014400
 8005d98:	40014800 	.word	0x40014800

08005d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f023 0201 	bic.w	r2, r3, #1
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f023 030a 	bic.w	r3, r3, #10
 8005dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b087      	sub	sp, #28
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	f023 0210 	bic.w	r2, r3, #16
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	031b      	lsls	r3, r3, #12
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f043 0307 	orr.w	r3, r3, #7
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	609a      	str	r2, [r3, #8]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	021a      	lsls	r2, r3, #8
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	609a      	str	r2, [r3, #8]
}
 8005ec4:	bf00      	nop
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e068      	b.n	8005fba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a2e      	ldr	r2, [pc, #184]	@ (8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d004      	beq.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a2d      	ldr	r2, [pc, #180]	@ (8005fcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d108      	bne.n	8005f2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d01d      	beq.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f5a:	d018      	beq.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d013      	beq.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00e      	beq.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a18      	ldr	r2, [pc, #96]	@ (8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d009      	beq.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a13      	ldr	r2, [pc, #76]	@ (8005fcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d004      	beq.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a14      	ldr	r2, [pc, #80]	@ (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d10c      	bne.n	8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	40012c00 	.word	0x40012c00
 8005fcc:	40013400 	.word	0x40013400
 8005fd0:	40000400 	.word	0x40000400
 8005fd4:	40000800 	.word	0x40000800
 8005fd8:	40000c00 	.word	0x40000c00
 8005fdc:	40014000 	.word	0x40014000

08005fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e040      	b.n	8006074 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fb f99c 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2224      	movs	r2, #36	@ 0x24
 800600c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0201 	bic.w	r2, r2, #1
 800601c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fb6a 	bl	8006700 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f8af 	bl	8006190 <UART_SetConfig>
 8006032:	4603      	mov	r3, r0
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e01b      	b.n	8006074 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800604a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800605a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fbe9 	bl	8006844 <UART_CheckIdleState>
 8006072:	4603      	mov	r3, r0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	@ 0x28
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006090:	2b20      	cmp	r3, #32
 8006092:	d177      	bne.n	8006184 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <HAL_UART_Transmit+0x24>
 800609a:	88fb      	ldrh	r3, [r7, #6]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e070      	b.n	8006186 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2221      	movs	r2, #33	@ 0x21
 80060b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060b2:	f7fb fc1d 	bl	80018f0 <HAL_GetTick>
 80060b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d0:	d108      	bne.n	80060e4 <HAL_UART_Transmit+0x68>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	e003      	b.n	80060ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060ec:	e02f      	b.n	800614e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2200      	movs	r2, #0
 80060f6:	2180      	movs	r1, #128	@ 0x80
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 fc4b 	bl	8006994 <UART_WaitOnFlagUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d004      	beq.n	800610e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e03b      	b.n	8006186 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10b      	bne.n	800612c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	881a      	ldrh	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006120:	b292      	uxth	r2, r2
 8006122:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	3302      	adds	r3, #2
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	e007      	b.n	800613c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	781a      	ldrb	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	3301      	adds	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1c9      	bne.n	80060ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2200      	movs	r2, #0
 8006162:	2140      	movs	r1, #64	@ 0x40
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 fc15 	bl	8006994 <UART_WaitOnFlagUntilTimeout>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d004      	beq.n	800617a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2220      	movs	r2, #32
 8006174:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e005      	b.n	8006186 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	e000      	b.n	8006186 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006184:	2302      	movs	r3, #2
  }
}
 8006186:	4618      	mov	r0, r3
 8006188:	3720      	adds	r7, #32
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006194:	b08a      	sub	sp, #40	@ 0x28
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	431a      	orrs	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4ba4      	ldr	r3, [pc, #656]	@ (8006450 <UART_SetConfig+0x2c0>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	6812      	ldr	r2, [r2, #0]
 80061c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061c8:	430b      	orrs	r3, r1
 80061ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a99      	ldr	r2, [pc, #612]	@ (8006454 <UART_SetConfig+0x2c4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d004      	beq.n	80061fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f8:	4313      	orrs	r3, r2
 80061fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800620c:	430a      	orrs	r2, r1
 800620e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a90      	ldr	r2, [pc, #576]	@ (8006458 <UART_SetConfig+0x2c8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d126      	bne.n	8006268 <UART_SetConfig+0xd8>
 800621a:	4b90      	ldr	r3, [pc, #576]	@ (800645c <UART_SetConfig+0x2cc>)
 800621c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	2b03      	cmp	r3, #3
 8006226:	d81b      	bhi.n	8006260 <UART_SetConfig+0xd0>
 8006228:	a201      	add	r2, pc, #4	@ (adr r2, 8006230 <UART_SetConfig+0xa0>)
 800622a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622e:	bf00      	nop
 8006230:	08006241 	.word	0x08006241
 8006234:	08006251 	.word	0x08006251
 8006238:	08006249 	.word	0x08006249
 800623c:	08006259 	.word	0x08006259
 8006240:	2301      	movs	r3, #1
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006246:	e116      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006248:	2302      	movs	r3, #2
 800624a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800624e:	e112      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006250:	2304      	movs	r3, #4
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006256:	e10e      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006258:	2308      	movs	r3, #8
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800625e:	e10a      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006260:	2310      	movs	r3, #16
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006266:	e106      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a7c      	ldr	r2, [pc, #496]	@ (8006460 <UART_SetConfig+0x2d0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d138      	bne.n	80062e4 <UART_SetConfig+0x154>
 8006272:	4b7a      	ldr	r3, [pc, #488]	@ (800645c <UART_SetConfig+0x2cc>)
 8006274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006278:	f003 030c 	and.w	r3, r3, #12
 800627c:	2b0c      	cmp	r3, #12
 800627e:	d82d      	bhi.n	80062dc <UART_SetConfig+0x14c>
 8006280:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <UART_SetConfig+0xf8>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	080062bd 	.word	0x080062bd
 800628c:	080062dd 	.word	0x080062dd
 8006290:	080062dd 	.word	0x080062dd
 8006294:	080062dd 	.word	0x080062dd
 8006298:	080062cd 	.word	0x080062cd
 800629c:	080062dd 	.word	0x080062dd
 80062a0:	080062dd 	.word	0x080062dd
 80062a4:	080062dd 	.word	0x080062dd
 80062a8:	080062c5 	.word	0x080062c5
 80062ac:	080062dd 	.word	0x080062dd
 80062b0:	080062dd 	.word	0x080062dd
 80062b4:	080062dd 	.word	0x080062dd
 80062b8:	080062d5 	.word	0x080062d5
 80062bc:	2300      	movs	r3, #0
 80062be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062c2:	e0d8      	b.n	8006476 <UART_SetConfig+0x2e6>
 80062c4:	2302      	movs	r3, #2
 80062c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ca:	e0d4      	b.n	8006476 <UART_SetConfig+0x2e6>
 80062cc:	2304      	movs	r3, #4
 80062ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062d2:	e0d0      	b.n	8006476 <UART_SetConfig+0x2e6>
 80062d4:	2308      	movs	r3, #8
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062da:	e0cc      	b.n	8006476 <UART_SetConfig+0x2e6>
 80062dc:	2310      	movs	r3, #16
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062e2:	e0c8      	b.n	8006476 <UART_SetConfig+0x2e6>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a5e      	ldr	r2, [pc, #376]	@ (8006464 <UART_SetConfig+0x2d4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d125      	bne.n	800633a <UART_SetConfig+0x1aa>
 80062ee:	4b5b      	ldr	r3, [pc, #364]	@ (800645c <UART_SetConfig+0x2cc>)
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80062f8:	2b30      	cmp	r3, #48	@ 0x30
 80062fa:	d016      	beq.n	800632a <UART_SetConfig+0x19a>
 80062fc:	2b30      	cmp	r3, #48	@ 0x30
 80062fe:	d818      	bhi.n	8006332 <UART_SetConfig+0x1a2>
 8006300:	2b20      	cmp	r3, #32
 8006302:	d00a      	beq.n	800631a <UART_SetConfig+0x18a>
 8006304:	2b20      	cmp	r3, #32
 8006306:	d814      	bhi.n	8006332 <UART_SetConfig+0x1a2>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <UART_SetConfig+0x182>
 800630c:	2b10      	cmp	r3, #16
 800630e:	d008      	beq.n	8006322 <UART_SetConfig+0x192>
 8006310:	e00f      	b.n	8006332 <UART_SetConfig+0x1a2>
 8006312:	2300      	movs	r3, #0
 8006314:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006318:	e0ad      	b.n	8006476 <UART_SetConfig+0x2e6>
 800631a:	2302      	movs	r3, #2
 800631c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006320:	e0a9      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006322:	2304      	movs	r3, #4
 8006324:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006328:	e0a5      	b.n	8006476 <UART_SetConfig+0x2e6>
 800632a:	2308      	movs	r3, #8
 800632c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006330:	e0a1      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006332:	2310      	movs	r3, #16
 8006334:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006338:	e09d      	b.n	8006476 <UART_SetConfig+0x2e6>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a4a      	ldr	r2, [pc, #296]	@ (8006468 <UART_SetConfig+0x2d8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d125      	bne.n	8006390 <UART_SetConfig+0x200>
 8006344:	4b45      	ldr	r3, [pc, #276]	@ (800645c <UART_SetConfig+0x2cc>)
 8006346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800634a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800634e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006350:	d016      	beq.n	8006380 <UART_SetConfig+0x1f0>
 8006352:	2bc0      	cmp	r3, #192	@ 0xc0
 8006354:	d818      	bhi.n	8006388 <UART_SetConfig+0x1f8>
 8006356:	2b80      	cmp	r3, #128	@ 0x80
 8006358:	d00a      	beq.n	8006370 <UART_SetConfig+0x1e0>
 800635a:	2b80      	cmp	r3, #128	@ 0x80
 800635c:	d814      	bhi.n	8006388 <UART_SetConfig+0x1f8>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <UART_SetConfig+0x1d8>
 8006362:	2b40      	cmp	r3, #64	@ 0x40
 8006364:	d008      	beq.n	8006378 <UART_SetConfig+0x1e8>
 8006366:	e00f      	b.n	8006388 <UART_SetConfig+0x1f8>
 8006368:	2300      	movs	r3, #0
 800636a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800636e:	e082      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006370:	2302      	movs	r3, #2
 8006372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006376:	e07e      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006378:	2304      	movs	r3, #4
 800637a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800637e:	e07a      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006380:	2308      	movs	r3, #8
 8006382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006386:	e076      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006388:	2310      	movs	r3, #16
 800638a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800638e:	e072      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a35      	ldr	r2, [pc, #212]	@ (800646c <UART_SetConfig+0x2dc>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d12a      	bne.n	80063f0 <UART_SetConfig+0x260>
 800639a:	4b30      	ldr	r3, [pc, #192]	@ (800645c <UART_SetConfig+0x2cc>)
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063a8:	d01a      	beq.n	80063e0 <UART_SetConfig+0x250>
 80063aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063ae:	d81b      	bhi.n	80063e8 <UART_SetConfig+0x258>
 80063b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063b4:	d00c      	beq.n	80063d0 <UART_SetConfig+0x240>
 80063b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ba:	d815      	bhi.n	80063e8 <UART_SetConfig+0x258>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <UART_SetConfig+0x238>
 80063c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c4:	d008      	beq.n	80063d8 <UART_SetConfig+0x248>
 80063c6:	e00f      	b.n	80063e8 <UART_SetConfig+0x258>
 80063c8:	2300      	movs	r3, #0
 80063ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ce:	e052      	b.n	8006476 <UART_SetConfig+0x2e6>
 80063d0:	2302      	movs	r3, #2
 80063d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063d6:	e04e      	b.n	8006476 <UART_SetConfig+0x2e6>
 80063d8:	2304      	movs	r3, #4
 80063da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063de:	e04a      	b.n	8006476 <UART_SetConfig+0x2e6>
 80063e0:	2308      	movs	r3, #8
 80063e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063e6:	e046      	b.n	8006476 <UART_SetConfig+0x2e6>
 80063e8:	2310      	movs	r3, #16
 80063ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ee:	e042      	b.n	8006476 <UART_SetConfig+0x2e6>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a17      	ldr	r2, [pc, #92]	@ (8006454 <UART_SetConfig+0x2c4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d13a      	bne.n	8006470 <UART_SetConfig+0x2e0>
 80063fa:	4b18      	ldr	r3, [pc, #96]	@ (800645c <UART_SetConfig+0x2cc>)
 80063fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006400:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006404:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006408:	d01a      	beq.n	8006440 <UART_SetConfig+0x2b0>
 800640a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800640e:	d81b      	bhi.n	8006448 <UART_SetConfig+0x2b8>
 8006410:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006414:	d00c      	beq.n	8006430 <UART_SetConfig+0x2a0>
 8006416:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800641a:	d815      	bhi.n	8006448 <UART_SetConfig+0x2b8>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <UART_SetConfig+0x298>
 8006420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006424:	d008      	beq.n	8006438 <UART_SetConfig+0x2a8>
 8006426:	e00f      	b.n	8006448 <UART_SetConfig+0x2b8>
 8006428:	2300      	movs	r3, #0
 800642a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800642e:	e022      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006430:	2302      	movs	r3, #2
 8006432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006436:	e01e      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006438:	2304      	movs	r3, #4
 800643a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800643e:	e01a      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006440:	2308      	movs	r3, #8
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006446:	e016      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006448:	2310      	movs	r3, #16
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800644e:	e012      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006450:	efff69f3 	.word	0xefff69f3
 8006454:	40008000 	.word	0x40008000
 8006458:	40013800 	.word	0x40013800
 800645c:	40021000 	.word	0x40021000
 8006460:	40004400 	.word	0x40004400
 8006464:	40004800 	.word	0x40004800
 8006468:	40004c00 	.word	0x40004c00
 800646c:	40005000 	.word	0x40005000
 8006470:	2310      	movs	r3, #16
 8006472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a9f      	ldr	r2, [pc, #636]	@ (80066f8 <UART_SetConfig+0x568>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d17a      	bne.n	8006576 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006480:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006484:	2b08      	cmp	r3, #8
 8006486:	d824      	bhi.n	80064d2 <UART_SetConfig+0x342>
 8006488:	a201      	add	r2, pc, #4	@ (adr r2, 8006490 <UART_SetConfig+0x300>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	080064b5 	.word	0x080064b5
 8006494:	080064d3 	.word	0x080064d3
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064d3 	.word	0x080064d3
 80064a0:	080064c3 	.word	0x080064c3
 80064a4:	080064d3 	.word	0x080064d3
 80064a8:	080064d3 	.word	0x080064d3
 80064ac:	080064d3 	.word	0x080064d3
 80064b0:	080064cb 	.word	0x080064cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b4:	f7fe fc40 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 80064b8:	61f8      	str	r0, [r7, #28]
        break;
 80064ba:	e010      	b.n	80064de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064bc:	4b8f      	ldr	r3, [pc, #572]	@ (80066fc <UART_SetConfig+0x56c>)
 80064be:	61fb      	str	r3, [r7, #28]
        break;
 80064c0:	e00d      	b.n	80064de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064c2:	f7fe fba1 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 80064c6:	61f8      	str	r0, [r7, #28]
        break;
 80064c8:	e009      	b.n	80064de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064ce:	61fb      	str	r3, [r7, #28]
        break;
 80064d0:	e005      	b.n	80064de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80064dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80fb 	beq.w	80066dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	4413      	add	r3, r2
 80064f0:	69fa      	ldr	r2, [r7, #28]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d305      	bcc.n	8006502 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d903      	bls.n	800650a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006508:	e0e8      	b.n	80066dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	2200      	movs	r2, #0
 800650e:	461c      	mov	r4, r3
 8006510:	4615      	mov	r5, r2
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	022b      	lsls	r3, r5, #8
 800651c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006520:	0222      	lsls	r2, r4, #8
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	6849      	ldr	r1, [r1, #4]
 8006526:	0849      	lsrs	r1, r1, #1
 8006528:	2000      	movs	r0, #0
 800652a:	4688      	mov	r8, r1
 800652c:	4681      	mov	r9, r0
 800652e:	eb12 0a08 	adds.w	sl, r2, r8
 8006532:	eb43 0b09 	adc.w	fp, r3, r9
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	603b      	str	r3, [r7, #0]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006544:	4650      	mov	r0, sl
 8006546:	4659      	mov	r1, fp
 8006548:	f7f9 fe92 	bl	8000270 <__aeabi_uldivmod>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4613      	mov	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800655a:	d308      	bcc.n	800656e <UART_SetConfig+0x3de>
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006562:	d204      	bcs.n	800656e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	60da      	str	r2, [r3, #12]
 800656c:	e0b6      	b.n	80066dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006574:	e0b2      	b.n	80066dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800657e:	d15e      	bne.n	800663e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006580:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006584:	2b08      	cmp	r3, #8
 8006586:	d828      	bhi.n	80065da <UART_SetConfig+0x44a>
 8006588:	a201      	add	r2, pc, #4	@ (adr r2, 8006590 <UART_SetConfig+0x400>)
 800658a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658e:	bf00      	nop
 8006590:	080065b5 	.word	0x080065b5
 8006594:	080065bd 	.word	0x080065bd
 8006598:	080065c5 	.word	0x080065c5
 800659c:	080065db 	.word	0x080065db
 80065a0:	080065cb 	.word	0x080065cb
 80065a4:	080065db 	.word	0x080065db
 80065a8:	080065db 	.word	0x080065db
 80065ac:	080065db 	.word	0x080065db
 80065b0:	080065d3 	.word	0x080065d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b4:	f7fe fbc0 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 80065b8:	61f8      	str	r0, [r7, #28]
        break;
 80065ba:	e014      	b.n	80065e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065bc:	f7fe fbd2 	bl	8004d64 <HAL_RCC_GetPCLK2Freq>
 80065c0:	61f8      	str	r0, [r7, #28]
        break;
 80065c2:	e010      	b.n	80065e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c4:	4b4d      	ldr	r3, [pc, #308]	@ (80066fc <UART_SetConfig+0x56c>)
 80065c6:	61fb      	str	r3, [r7, #28]
        break;
 80065c8:	e00d      	b.n	80065e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ca:	f7fe fb1d 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 80065ce:	61f8      	str	r0, [r7, #28]
        break;
 80065d0:	e009      	b.n	80065e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065d6:	61fb      	str	r3, [r7, #28]
        break;
 80065d8:	e005      	b.n	80065e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80065e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d077      	beq.n	80066dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	005a      	lsls	r2, r3, #1
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	441a      	add	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006600:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b0f      	cmp	r3, #15
 8006606:	d916      	bls.n	8006636 <UART_SetConfig+0x4a6>
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800660e:	d212      	bcs.n	8006636 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f023 030f 	bic.w	r3, r3, #15
 8006618:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	085b      	lsrs	r3, r3, #1
 800661e:	b29b      	uxth	r3, r3
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	b29a      	uxth	r2, r3
 8006626:	8afb      	ldrh	r3, [r7, #22]
 8006628:	4313      	orrs	r3, r2
 800662a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	8afa      	ldrh	r2, [r7, #22]
 8006632:	60da      	str	r2, [r3, #12]
 8006634:	e052      	b.n	80066dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800663c:	e04e      	b.n	80066dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800663e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006642:	2b08      	cmp	r3, #8
 8006644:	d827      	bhi.n	8006696 <UART_SetConfig+0x506>
 8006646:	a201      	add	r2, pc, #4	@ (adr r2, 800664c <UART_SetConfig+0x4bc>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	08006671 	.word	0x08006671
 8006650:	08006679 	.word	0x08006679
 8006654:	08006681 	.word	0x08006681
 8006658:	08006697 	.word	0x08006697
 800665c:	08006687 	.word	0x08006687
 8006660:	08006697 	.word	0x08006697
 8006664:	08006697 	.word	0x08006697
 8006668:	08006697 	.word	0x08006697
 800666c:	0800668f 	.word	0x0800668f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006670:	f7fe fb62 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 8006674:	61f8      	str	r0, [r7, #28]
        break;
 8006676:	e014      	b.n	80066a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006678:	f7fe fb74 	bl	8004d64 <HAL_RCC_GetPCLK2Freq>
 800667c:	61f8      	str	r0, [r7, #28]
        break;
 800667e:	e010      	b.n	80066a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006680:	4b1e      	ldr	r3, [pc, #120]	@ (80066fc <UART_SetConfig+0x56c>)
 8006682:	61fb      	str	r3, [r7, #28]
        break;
 8006684:	e00d      	b.n	80066a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006686:	f7fe fabf 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 800668a:	61f8      	str	r0, [r7, #28]
        break;
 800668c:	e009      	b.n	80066a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006692:	61fb      	str	r3, [r7, #28]
        break;
 8006694:	e005      	b.n	80066a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066a0:	bf00      	nop
    }

    if (pclk != 0U)
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d019      	beq.n	80066dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	085a      	lsrs	r2, r3, #1
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	441a      	add	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	2b0f      	cmp	r3, #15
 80066c0:	d909      	bls.n	80066d6 <UART_SetConfig+0x546>
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066c8:	d205      	bcs.n	80066d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60da      	str	r2, [r3, #12]
 80066d4:	e002      	b.n	80066dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80066e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3728      	adds	r7, #40	@ 0x28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066f6:	bf00      	nop
 80066f8:	40008000 	.word	0x40008000
 80066fc:	00f42400 	.word	0x00f42400

08006700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00a      	beq.n	800672a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b6:	f003 0320 	and.w	r3, r3, #32
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01a      	beq.n	8006816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067fe:	d10a      	bne.n	8006816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	605a      	str	r2, [r3, #4]
  }
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b098      	sub	sp, #96	@ 0x60
 8006848:	af02      	add	r7, sp, #8
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006854:	f7fb f84c 	bl	80018f0 <HAL_GetTick>
 8006858:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b08      	cmp	r3, #8
 8006866:	d12e      	bne.n	80068c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006868:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006870:	2200      	movs	r2, #0
 8006872:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f88c 	bl	8006994 <UART_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d021      	beq.n	80068c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688a:	e853 3f00 	ldrex	r3, [r3]
 800688e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006892:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006896:	653b      	str	r3, [r7, #80]	@ 0x50
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e6      	bne.n	8006882 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e062      	b.n	800698c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	d149      	bne.n	8006968 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068dc:	2200      	movs	r2, #0
 80068de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f856 	bl	8006994 <UART_WaitOnFlagUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d03c      	beq.n	8006968 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	623b      	str	r3, [r7, #32]
   return(result);
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800690c:	633b      	str	r3, [r7, #48]	@ 0x30
 800690e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800691a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e6      	bne.n	80068ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3308      	adds	r3, #8
 8006926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0301 	bic.w	r3, r3, #1
 8006936:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3308      	adds	r3, #8
 800693e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006940:	61fa      	str	r2, [r7, #28]
 8006942:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	69b9      	ldr	r1, [r7, #24]
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	617b      	str	r3, [r7, #20]
   return(result);
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e5      	bne.n	8006920 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e011      	b.n	800698c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2220      	movs	r2, #32
 8006972:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3758      	adds	r7, #88	@ 0x58
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	4613      	mov	r3, r2
 80069a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a4:	e04f      	b.n	8006a46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ac:	d04b      	beq.n	8006a46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ae:	f7fa ff9f 	bl	80018f0 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d302      	bcc.n	80069c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e04e      	b.n	8006a66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d037      	beq.n	8006a46 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b80      	cmp	r3, #128	@ 0x80
 80069da:	d034      	beq.n	8006a46 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	2b40      	cmp	r3, #64	@ 0x40
 80069e0:	d031      	beq.n	8006a46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d110      	bne.n	8006a12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2208      	movs	r2, #8
 80069f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f838 	bl	8006a6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2208      	movs	r2, #8
 8006a02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e029      	b.n	8006a66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a20:	d111      	bne.n	8006a46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f81e 	bl	8006a6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e00f      	b.n	8006a66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69da      	ldr	r2, [r3, #28]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	bf0c      	ite	eq
 8006a56:	2301      	moveq	r3, #1
 8006a58:	2300      	movne	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	79fb      	ldrb	r3, [r7, #7]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d0a0      	beq.n	80069a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b095      	sub	sp, #84	@ 0x54
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a94:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e6      	bne.n	8006a76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3308      	adds	r3, #8
 8006aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f023 0301 	bic.w	r3, r3, #1
 8006abe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e5      	bne.n	8006aa8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d118      	bne.n	8006b16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f023 0310 	bic.w	r3, r3, #16
 8006af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6979      	ldr	r1, [r7, #20]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e6      	bne.n	8006ae4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006b2a:	bf00      	nop
 8006b2c:	3754      	adds	r7, #84	@ 0x54
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b36:	b084      	sub	sp, #16
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	f107 001c 	add.w	r0, r7, #28
 8006b44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fa69 	bl	800702c <USB_CoreReset>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006b5e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d106      	bne.n	8006b74 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b72:	e005      	b.n	8006b80 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b8c:	b004      	add	sp, #16
 8006b8e:	4770      	bx	lr

08006b90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f023 0201 	bic.w	r2, r3, #1
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d115      	bne.n	8006c00 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006be0:	200a      	movs	r0, #10
 8006be2:	f7fa fe91 	bl	8001908 <HAL_Delay>
      ms += 10U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	330a      	adds	r3, #10
 8006bea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fa0f 	bl	8007010 <USB_GetMode>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d01e      	beq.n	8006c36 <USB_SetCurrentMode+0x84>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2bc7      	cmp	r3, #199	@ 0xc7
 8006bfc:	d9f0      	bls.n	8006be0 <USB_SetCurrentMode+0x2e>
 8006bfe:	e01a      	b.n	8006c36 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d115      	bne.n	8006c32 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c12:	200a      	movs	r0, #10
 8006c14:	f7fa fe78 	bl	8001908 <HAL_Delay>
      ms += 10U;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	330a      	adds	r3, #10
 8006c1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f9f6 	bl	8007010 <USB_GetMode>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <USB_SetCurrentMode+0x84>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c2e:	d9f0      	bls.n	8006c12 <USB_SetCurrentMode+0x60>
 8006c30:	e001      	b.n	8006c36 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e005      	b.n	8006c42 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2bc8      	cmp	r3, #200	@ 0xc8
 8006c3a:	d101      	bne.n	8006c40 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e000      	b.n	8006c42 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b086      	sub	sp, #24
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c66:	2300      	movs	r3, #0
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	e009      	b.n	8006c80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	3340      	adds	r3, #64	@ 0x40
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	2200      	movs	r2, #0
 8006c78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	613b      	str	r3, [r7, #16]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b0e      	cmp	r3, #14
 8006c84:	d9f2      	bls.n	8006c6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d11c      	bne.n	8006cc8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c9c:	f043 0302 	orr.w	r3, r3, #2
 8006ca0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	e005      	b.n	8006cd4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ccc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006cda:	461a      	mov	r2, r3
 8006cdc:	2300      	movs	r3, #0
 8006cde:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ce0:	2103      	movs	r1, #3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f95a 	bl	8006f9c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ce8:	2110      	movs	r1, #16
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f8f6 	bl	8006edc <USB_FlushTxFifo>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f920 	bl	8006f40 <USB_FlushRxFifo>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d10:	461a      	mov	r2, r3
 8006d12:	2300      	movs	r3, #0
 8006d14:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	2300      	movs	r3, #0
 8006d20:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d2e:	2300      	movs	r3, #0
 8006d30:	613b      	str	r3, [r7, #16]
 8006d32:	e043      	b.n	8006dbc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d4a:	d118      	bne.n	8006d7e <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10a      	bne.n	8006d68 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	e013      	b.n	8006d90 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d74:	461a      	mov	r2, r3
 8006d76:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	e008      	b.n	8006d90 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	2300      	movs	r3, #0
 8006da0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dae:	461a      	mov	r2, r3
 8006db0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006db4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	3301      	adds	r3, #1
 8006dba:	613b      	str	r3, [r7, #16]
 8006dbc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d3b5      	bcc.n	8006d34 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dc8:	2300      	movs	r3, #0
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	e043      	b.n	8006e56 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006de0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006de4:	d118      	bne.n	8006e18 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10a      	bne.n	8006e02 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	e013      	b.n	8006e2a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	e008      	b.n	8006e2a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e24:	461a      	mov	r2, r3
 8006e26:	2300      	movs	r3, #0
 8006e28:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e36:	461a      	mov	r2, r3
 8006e38:	2300      	movs	r3, #0
 8006e3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e48:	461a      	mov	r2, r3
 8006e4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	3301      	adds	r3, #1
 8006e54:	613b      	str	r3, [r7, #16]
 8006e56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d3b5      	bcc.n	8006dce <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e74:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006e82:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	f043 0210 	orr.w	r2, r3, #16
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	4b10      	ldr	r3, [pc, #64]	@ (8006ed8 <USB_DevInit+0x28c>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f043 0208 	orr.w	r2, r3, #8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006eb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d107      	bne.n	8006ec8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ec0:	f043 0304 	orr.w	r3, r3, #4
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ed4:	b004      	add	sp, #16
 8006ed6:	4770      	bx	lr
 8006ed8:	803c3800 	.word	0x803c3800

08006edc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3301      	adds	r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ef6:	d901      	bls.n	8006efc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e01b      	b.n	8006f34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	daf2      	bge.n	8006eea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	019b      	lsls	r3, r3, #6
 8006f0c:	f043 0220 	orr.w	r2, r3, #32
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3301      	adds	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f20:	d901      	bls.n	8006f26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e006      	b.n	8006f34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d0f0      	beq.n	8006f14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f58:	d901      	bls.n	8006f5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e018      	b.n	8006f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	daf2      	bge.n	8006f4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2210      	movs	r2, #16
 8006f6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f7c:	d901      	bls.n	8006f82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e006      	b.n	8006f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f003 0310 	and.w	r3, r3, #16
 8006f8a:	2b10      	cmp	r3, #16
 8006f8c:	d0f0      	beq.n	8006f70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	68f9      	ldr	r1, [r7, #12]
 8006fb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006fe8:	f023 0303 	bic.w	r3, r3, #3
 8006fec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ffc:	f043 0302 	orr.w	r3, r3, #2
 8007000:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	f003 0301 	and.w	r3, r3, #1
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3301      	adds	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007044:	d901      	bls.n	800704a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e01b      	b.n	8007082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	daf2      	bge.n	8007038 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f043 0201 	orr.w	r2, r3, #1
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800706e:	d901      	bls.n	8007074 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e006      	b.n	8007082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b01      	cmp	r3, #1
 800707e:	d0f0      	beq.n	8007062 <USB_CoreReset+0x36>

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800708e:	b480      	push	{r7}
 8007090:	b085      	sub	sp, #20
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	601a      	str	r2, [r3, #0]
}
 80070ca:	bf00      	nop
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80070d6:	b480      	push	{r7}
 80070d8:	b085      	sub	sp, #20
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6892      	ldr	r2, [r2, #8]
 80070ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6852      	ldr	r2, [r2, #4]
 80070f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d103      	bne.n	800710a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	1e5a      	subs	r2, r3, #1
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
	...

0800712c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007136:	4b4f      	ldr	r3, [pc, #316]	@ (8007274 <xTaskIncrementTick+0x148>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f040 8090 	bne.w	8007260 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007140:	4b4d      	ldr	r3, [pc, #308]	@ (8007278 <xTaskIncrementTick+0x14c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3301      	adds	r3, #1
 8007146:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007148:	4a4b      	ldr	r2, [pc, #300]	@ (8007278 <xTaskIncrementTick+0x14c>)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d121      	bne.n	8007198 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007154:	4b49      	ldr	r3, [pc, #292]	@ (800727c <xTaskIncrementTick+0x150>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007170:	bf00      	nop
 8007172:	bf00      	nop
 8007174:	e7fd      	b.n	8007172 <xTaskIncrementTick+0x46>
 8007176:	4b41      	ldr	r3, [pc, #260]	@ (800727c <xTaskIncrementTick+0x150>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	4b40      	ldr	r3, [pc, #256]	@ (8007280 <xTaskIncrementTick+0x154>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a3e      	ldr	r2, [pc, #248]	@ (800727c <xTaskIncrementTick+0x150>)
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	4a3e      	ldr	r2, [pc, #248]	@ (8007280 <xTaskIncrementTick+0x154>)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	4b3e      	ldr	r3, [pc, #248]	@ (8007284 <xTaskIncrementTick+0x158>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3301      	adds	r3, #1
 8007190:	4a3c      	ldr	r2, [pc, #240]	@ (8007284 <xTaskIncrementTick+0x158>)
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	f000 f8e2 	bl	800735c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007198:	4b3b      	ldr	r3, [pc, #236]	@ (8007288 <xTaskIncrementTick+0x15c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d349      	bcc.n	8007236 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071a2:	4b36      	ldr	r3, [pc, #216]	@ (800727c <xTaskIncrementTick+0x150>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d104      	bne.n	80071b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ac:	4b36      	ldr	r3, [pc, #216]	@ (8007288 <xTaskIncrementTick+0x15c>)
 80071ae:	f04f 32ff 	mov.w	r2, #4294967295
 80071b2:	601a      	str	r2, [r3, #0]
					break;
 80071b4:	e03f      	b.n	8007236 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b6:	4b31      	ldr	r3, [pc, #196]	@ (800727c <xTaskIncrementTick+0x150>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d203      	bcs.n	80071d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071ce:	4a2e      	ldr	r2, [pc, #184]	@ (8007288 <xTaskIncrementTick+0x15c>)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071d4:	e02f      	b.n	8007236 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	3304      	adds	r3, #4
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff ff7b 	bl	80070d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	3318      	adds	r3, #24
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff ff72 	bl	80070d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f6:	4b25      	ldr	r3, [pc, #148]	@ (800728c <xTaskIncrementTick+0x160>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d903      	bls.n	8007206 <xTaskIncrementTick+0xda>
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007202:	4a22      	ldr	r2, [pc, #136]	@ (800728c <xTaskIncrementTick+0x160>)
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4a1f      	ldr	r2, [pc, #124]	@ (8007290 <xTaskIncrementTick+0x164>)
 8007214:	441a      	add	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	3304      	adds	r3, #4
 800721a:	4619      	mov	r1, r3
 800721c:	4610      	mov	r0, r2
 800721e:	f7ff ff36 	bl	800708e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007226:	4b1b      	ldr	r3, [pc, #108]	@ (8007294 <xTaskIncrementTick+0x168>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722c:	429a      	cmp	r2, r3
 800722e:	d3b8      	bcc.n	80071a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007230:	2301      	movs	r3, #1
 8007232:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007234:	e7b5      	b.n	80071a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007236:	4b17      	ldr	r3, [pc, #92]	@ (8007294 <xTaskIncrementTick+0x168>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723c:	4914      	ldr	r1, [pc, #80]	@ (8007290 <xTaskIncrementTick+0x164>)
 800723e:	4613      	mov	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	440b      	add	r3, r1
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d901      	bls.n	8007252 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800724e:	2301      	movs	r3, #1
 8007250:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007252:	4b11      	ldr	r3, [pc, #68]	@ (8007298 <xTaskIncrementTick+0x16c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d007      	beq.n	800726a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800725a:	2301      	movs	r3, #1
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	e004      	b.n	800726a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007260:	4b0e      	ldr	r3, [pc, #56]	@ (800729c <xTaskIncrementTick+0x170>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	4a0d      	ldr	r2, [pc, #52]	@ (800729c <xTaskIncrementTick+0x170>)
 8007268:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800726a:	697b      	ldr	r3, [r7, #20]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000f5c 	.word	0x20000f5c
 8007278:	20000f40 	.word	0x20000f40
 800727c:	20000f38 	.word	0x20000f38
 8007280:	20000f3c 	.word	0x20000f3c
 8007284:	20000f54 	.word	0x20000f54
 8007288:	20000f58 	.word	0x20000f58
 800728c:	20000f44 	.word	0x20000f44
 8007290:	20000ad8 	.word	0x20000ad8
 8007294:	20000ad4 	.word	0x20000ad4
 8007298:	20000f50 	.word	0x20000f50
 800729c:	20000f4c 	.word	0x20000f4c

080072a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072a6:	4b28      	ldr	r3, [pc, #160]	@ (8007348 <vTaskSwitchContext+0xa8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072ae:	4b27      	ldr	r3, [pc, #156]	@ (800734c <vTaskSwitchContext+0xac>)
 80072b0:	2201      	movs	r2, #1
 80072b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072b4:	e042      	b.n	800733c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80072b6:	4b25      	ldr	r3, [pc, #148]	@ (800734c <vTaskSwitchContext+0xac>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072bc:	4b24      	ldr	r3, [pc, #144]	@ (8007350 <vTaskSwitchContext+0xb0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	e011      	b.n	80072e8 <vTaskSwitchContext+0x48>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10b      	bne.n	80072e2 <vTaskSwitchContext+0x42>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	607b      	str	r3, [r7, #4]
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	e7fd      	b.n	80072de <vTaskSwitchContext+0x3e>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	491a      	ldr	r1, [pc, #104]	@ (8007354 <vTaskSwitchContext+0xb4>)
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0e3      	beq.n	80072c4 <vTaskSwitchContext+0x24>
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	4613      	mov	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4413      	add	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4a13      	ldr	r2, [pc, #76]	@ (8007354 <vTaskSwitchContext+0xb4>)
 8007308:	4413      	add	r3, r2
 800730a:	60bb      	str	r3, [r7, #8]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	605a      	str	r2, [r3, #4]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	3308      	adds	r3, #8
 800731e:	429a      	cmp	r2, r3
 8007320:	d104      	bne.n	800732c <vTaskSwitchContext+0x8c>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	605a      	str	r2, [r3, #4]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	4a09      	ldr	r2, [pc, #36]	@ (8007358 <vTaskSwitchContext+0xb8>)
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	4a06      	ldr	r2, [pc, #24]	@ (8007350 <vTaskSwitchContext+0xb0>)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6013      	str	r3, [r2, #0]
}
 800733c:	bf00      	nop
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	20000f5c 	.word	0x20000f5c
 800734c:	20000f50 	.word	0x20000f50
 8007350:	20000f44 	.word	0x20000f44
 8007354:	20000ad8 	.word	0x20000ad8
 8007358:	20000ad4 	.word	0x20000ad4

0800735c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007362:	4b0c      	ldr	r3, [pc, #48]	@ (8007394 <prvResetNextTaskUnblockTime+0x38>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800736c:	4b0a      	ldr	r3, [pc, #40]	@ (8007398 <prvResetNextTaskUnblockTime+0x3c>)
 800736e:	f04f 32ff 	mov.w	r2, #4294967295
 8007372:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007374:	e008      	b.n	8007388 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007376:	4b07      	ldr	r3, [pc, #28]	@ (8007394 <prvResetNextTaskUnblockTime+0x38>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	4a04      	ldr	r2, [pc, #16]	@ (8007398 <prvResetNextTaskUnblockTime+0x3c>)
 8007386:	6013      	str	r3, [r2, #0]
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	20000f38 	.word	0x20000f38
 8007398:	20000f58 	.word	0x20000f58

0800739c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073a2:	4b0b      	ldr	r3, [pc, #44]	@ (80073d0 <xTaskGetSchedulerState+0x34>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d102      	bne.n	80073b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073aa:	2301      	movs	r3, #1
 80073ac:	607b      	str	r3, [r7, #4]
 80073ae:	e008      	b.n	80073c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073b0:	4b08      	ldr	r3, [pc, #32]	@ (80073d4 <xTaskGetSchedulerState+0x38>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d102      	bne.n	80073be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073b8:	2302      	movs	r3, #2
 80073ba:	607b      	str	r3, [r7, #4]
 80073bc:	e001      	b.n	80073c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073be:	2300      	movs	r3, #0
 80073c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073c2:	687b      	ldr	r3, [r7, #4]
	}
 80073c4:	4618      	mov	r0, r3
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	20000f48 	.word	0x20000f48
 80073d4:	20000f5c 	.word	0x20000f5c
	...

080073e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073e0:	4b07      	ldr	r3, [pc, #28]	@ (8007400 <pxCurrentTCBConst2>)
 80073e2:	6819      	ldr	r1, [r3, #0]
 80073e4:	6808      	ldr	r0, [r1, #0]
 80073e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ea:	f380 8809 	msr	PSP, r0
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f04f 0000 	mov.w	r0, #0
 80073f6:	f380 8811 	msr	BASEPRI, r0
 80073fa:	4770      	bx	lr
 80073fc:	f3af 8000 	nop.w

08007400 <pxCurrentTCBConst2>:
 8007400:	20000ad4 	.word	0x20000ad4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
	...

08007410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007410:	f3ef 8009 	mrs	r0, PSP
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	4b15      	ldr	r3, [pc, #84]	@ (8007470 <pxCurrentTCBConst>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	f01e 0f10 	tst.w	lr, #16
 8007420:	bf08      	it	eq
 8007422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742a:	6010      	str	r0, [r2, #0]
 800742c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007430:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007434:	f380 8811 	msr	BASEPRI, r0
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f7ff ff2e 	bl	80072a0 <vTaskSwitchContext>
 8007444:	f04f 0000 	mov.w	r0, #0
 8007448:	f380 8811 	msr	BASEPRI, r0
 800744c:	bc09      	pop	{r0, r3}
 800744e:	6819      	ldr	r1, [r3, #0]
 8007450:	6808      	ldr	r0, [r1, #0]
 8007452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007456:	f01e 0f10 	tst.w	lr, #16
 800745a:	bf08      	it	eq
 800745c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007460:	f380 8809 	msr	PSP, r0
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	f3af 8000 	nop.w

08007470 <pxCurrentTCBConst>:
 8007470:	20000ad4 	.word	0x20000ad4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop

08007478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	607b      	str	r3, [r7, #4]
}
 8007490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007492:	f7ff fe4b 	bl	800712c <xTaskIncrementTick>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800749c:	4b06      	ldr	r3, [pc, #24]	@ (80074b8 <xPortSysTickHandler+0x40>)
 800749e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	2300      	movs	r3, #0
 80074a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <std>:
 80074bc:	2300      	movs	r3, #0
 80074be:	b510      	push	{r4, lr}
 80074c0:	4604      	mov	r4, r0
 80074c2:	e9c0 3300 	strd	r3, r3, [r0]
 80074c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074ca:	6083      	str	r3, [r0, #8]
 80074cc:	8181      	strh	r1, [r0, #12]
 80074ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80074d0:	81c2      	strh	r2, [r0, #14]
 80074d2:	6183      	str	r3, [r0, #24]
 80074d4:	4619      	mov	r1, r3
 80074d6:	2208      	movs	r2, #8
 80074d8:	305c      	adds	r0, #92	@ 0x5c
 80074da:	f000 f9f9 	bl	80078d0 <memset>
 80074de:	4b0d      	ldr	r3, [pc, #52]	@ (8007514 <std+0x58>)
 80074e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80074e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007518 <std+0x5c>)
 80074e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074e6:	4b0d      	ldr	r3, [pc, #52]	@ (800751c <std+0x60>)
 80074e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007520 <std+0x64>)
 80074ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80074ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <std+0x68>)
 80074f0:	6224      	str	r4, [r4, #32]
 80074f2:	429c      	cmp	r4, r3
 80074f4:	d006      	beq.n	8007504 <std+0x48>
 80074f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074fa:	4294      	cmp	r4, r2
 80074fc:	d002      	beq.n	8007504 <std+0x48>
 80074fe:	33d0      	adds	r3, #208	@ 0xd0
 8007500:	429c      	cmp	r4, r3
 8007502:	d105      	bne.n	8007510 <std+0x54>
 8007504:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800750c:	f000 ba58 	b.w	80079c0 <__retarget_lock_init_recursive>
 8007510:	bd10      	pop	{r4, pc}
 8007512:	bf00      	nop
 8007514:	08007721 	.word	0x08007721
 8007518:	08007743 	.word	0x08007743
 800751c:	0800777b 	.word	0x0800777b
 8007520:	0800779f 	.word	0x0800779f
 8007524:	20000f60 	.word	0x20000f60

08007528 <stdio_exit_handler>:
 8007528:	4a02      	ldr	r2, [pc, #8]	@ (8007534 <stdio_exit_handler+0xc>)
 800752a:	4903      	ldr	r1, [pc, #12]	@ (8007538 <stdio_exit_handler+0x10>)
 800752c:	4803      	ldr	r0, [pc, #12]	@ (800753c <stdio_exit_handler+0x14>)
 800752e:	f000 b869 	b.w	8007604 <_fwalk_sglue>
 8007532:	bf00      	nop
 8007534:	2000000c 	.word	0x2000000c
 8007538:	08008261 	.word	0x08008261
 800753c:	2000001c 	.word	0x2000001c

08007540 <cleanup_stdio>:
 8007540:	6841      	ldr	r1, [r0, #4]
 8007542:	4b0c      	ldr	r3, [pc, #48]	@ (8007574 <cleanup_stdio+0x34>)
 8007544:	4299      	cmp	r1, r3
 8007546:	b510      	push	{r4, lr}
 8007548:	4604      	mov	r4, r0
 800754a:	d001      	beq.n	8007550 <cleanup_stdio+0x10>
 800754c:	f000 fe88 	bl	8008260 <_fflush_r>
 8007550:	68a1      	ldr	r1, [r4, #8]
 8007552:	4b09      	ldr	r3, [pc, #36]	@ (8007578 <cleanup_stdio+0x38>)
 8007554:	4299      	cmp	r1, r3
 8007556:	d002      	beq.n	800755e <cleanup_stdio+0x1e>
 8007558:	4620      	mov	r0, r4
 800755a:	f000 fe81 	bl	8008260 <_fflush_r>
 800755e:	68e1      	ldr	r1, [r4, #12]
 8007560:	4b06      	ldr	r3, [pc, #24]	@ (800757c <cleanup_stdio+0x3c>)
 8007562:	4299      	cmp	r1, r3
 8007564:	d004      	beq.n	8007570 <cleanup_stdio+0x30>
 8007566:	4620      	mov	r0, r4
 8007568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800756c:	f000 be78 	b.w	8008260 <_fflush_r>
 8007570:	bd10      	pop	{r4, pc}
 8007572:	bf00      	nop
 8007574:	20000f60 	.word	0x20000f60
 8007578:	20000fc8 	.word	0x20000fc8
 800757c:	20001030 	.word	0x20001030

08007580 <global_stdio_init.part.0>:
 8007580:	b510      	push	{r4, lr}
 8007582:	4b0b      	ldr	r3, [pc, #44]	@ (80075b0 <global_stdio_init.part.0+0x30>)
 8007584:	4c0b      	ldr	r4, [pc, #44]	@ (80075b4 <global_stdio_init.part.0+0x34>)
 8007586:	4a0c      	ldr	r2, [pc, #48]	@ (80075b8 <global_stdio_init.part.0+0x38>)
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	4620      	mov	r0, r4
 800758c:	2200      	movs	r2, #0
 800758e:	2104      	movs	r1, #4
 8007590:	f7ff ff94 	bl	80074bc <std>
 8007594:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007598:	2201      	movs	r2, #1
 800759a:	2109      	movs	r1, #9
 800759c:	f7ff ff8e 	bl	80074bc <std>
 80075a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075a4:	2202      	movs	r2, #2
 80075a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075aa:	2112      	movs	r1, #18
 80075ac:	f7ff bf86 	b.w	80074bc <std>
 80075b0:	20001098 	.word	0x20001098
 80075b4:	20000f60 	.word	0x20000f60
 80075b8:	08007529 	.word	0x08007529

080075bc <__sfp_lock_acquire>:
 80075bc:	4801      	ldr	r0, [pc, #4]	@ (80075c4 <__sfp_lock_acquire+0x8>)
 80075be:	f000 ba00 	b.w	80079c2 <__retarget_lock_acquire_recursive>
 80075c2:	bf00      	nop
 80075c4:	200010a1 	.word	0x200010a1

080075c8 <__sfp_lock_release>:
 80075c8:	4801      	ldr	r0, [pc, #4]	@ (80075d0 <__sfp_lock_release+0x8>)
 80075ca:	f000 b9fb 	b.w	80079c4 <__retarget_lock_release_recursive>
 80075ce:	bf00      	nop
 80075d0:	200010a1 	.word	0x200010a1

080075d4 <__sinit>:
 80075d4:	b510      	push	{r4, lr}
 80075d6:	4604      	mov	r4, r0
 80075d8:	f7ff fff0 	bl	80075bc <__sfp_lock_acquire>
 80075dc:	6a23      	ldr	r3, [r4, #32]
 80075de:	b11b      	cbz	r3, 80075e8 <__sinit+0x14>
 80075e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075e4:	f7ff bff0 	b.w	80075c8 <__sfp_lock_release>
 80075e8:	4b04      	ldr	r3, [pc, #16]	@ (80075fc <__sinit+0x28>)
 80075ea:	6223      	str	r3, [r4, #32]
 80075ec:	4b04      	ldr	r3, [pc, #16]	@ (8007600 <__sinit+0x2c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1f5      	bne.n	80075e0 <__sinit+0xc>
 80075f4:	f7ff ffc4 	bl	8007580 <global_stdio_init.part.0>
 80075f8:	e7f2      	b.n	80075e0 <__sinit+0xc>
 80075fa:	bf00      	nop
 80075fc:	08007541 	.word	0x08007541
 8007600:	20001098 	.word	0x20001098

08007604 <_fwalk_sglue>:
 8007604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007608:	4607      	mov	r7, r0
 800760a:	4688      	mov	r8, r1
 800760c:	4614      	mov	r4, r2
 800760e:	2600      	movs	r6, #0
 8007610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007614:	f1b9 0901 	subs.w	r9, r9, #1
 8007618:	d505      	bpl.n	8007626 <_fwalk_sglue+0x22>
 800761a:	6824      	ldr	r4, [r4, #0]
 800761c:	2c00      	cmp	r4, #0
 800761e:	d1f7      	bne.n	8007610 <_fwalk_sglue+0xc>
 8007620:	4630      	mov	r0, r6
 8007622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007626:	89ab      	ldrh	r3, [r5, #12]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d907      	bls.n	800763c <_fwalk_sglue+0x38>
 800762c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007630:	3301      	adds	r3, #1
 8007632:	d003      	beq.n	800763c <_fwalk_sglue+0x38>
 8007634:	4629      	mov	r1, r5
 8007636:	4638      	mov	r0, r7
 8007638:	47c0      	blx	r8
 800763a:	4306      	orrs	r6, r0
 800763c:	3568      	adds	r5, #104	@ 0x68
 800763e:	e7e9      	b.n	8007614 <_fwalk_sglue+0x10>

08007640 <iprintf>:
 8007640:	b40f      	push	{r0, r1, r2, r3}
 8007642:	b507      	push	{r0, r1, r2, lr}
 8007644:	4906      	ldr	r1, [pc, #24]	@ (8007660 <iprintf+0x20>)
 8007646:	ab04      	add	r3, sp, #16
 8007648:	6808      	ldr	r0, [r1, #0]
 800764a:	f853 2b04 	ldr.w	r2, [r3], #4
 800764e:	6881      	ldr	r1, [r0, #8]
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	f000 fadb 	bl	8007c0c <_vfiprintf_r>
 8007656:	b003      	add	sp, #12
 8007658:	f85d eb04 	ldr.w	lr, [sp], #4
 800765c:	b004      	add	sp, #16
 800765e:	4770      	bx	lr
 8007660:	20000018 	.word	0x20000018

08007664 <_puts_r>:
 8007664:	6a03      	ldr	r3, [r0, #32]
 8007666:	b570      	push	{r4, r5, r6, lr}
 8007668:	6884      	ldr	r4, [r0, #8]
 800766a:	4605      	mov	r5, r0
 800766c:	460e      	mov	r6, r1
 800766e:	b90b      	cbnz	r3, 8007674 <_puts_r+0x10>
 8007670:	f7ff ffb0 	bl	80075d4 <__sinit>
 8007674:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007676:	07db      	lsls	r3, r3, #31
 8007678:	d405      	bmi.n	8007686 <_puts_r+0x22>
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	0598      	lsls	r0, r3, #22
 800767e:	d402      	bmi.n	8007686 <_puts_r+0x22>
 8007680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007682:	f000 f99e 	bl	80079c2 <__retarget_lock_acquire_recursive>
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	0719      	lsls	r1, r3, #28
 800768a:	d502      	bpl.n	8007692 <_puts_r+0x2e>
 800768c:	6923      	ldr	r3, [r4, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d135      	bne.n	80076fe <_puts_r+0x9a>
 8007692:	4621      	mov	r1, r4
 8007694:	4628      	mov	r0, r5
 8007696:	f000 f8c5 	bl	8007824 <__swsetup_r>
 800769a:	b380      	cbz	r0, 80076fe <_puts_r+0x9a>
 800769c:	f04f 35ff 	mov.w	r5, #4294967295
 80076a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076a2:	07da      	lsls	r2, r3, #31
 80076a4:	d405      	bmi.n	80076b2 <_puts_r+0x4e>
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	059b      	lsls	r3, r3, #22
 80076aa:	d402      	bmi.n	80076b2 <_puts_r+0x4e>
 80076ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076ae:	f000 f989 	bl	80079c4 <__retarget_lock_release_recursive>
 80076b2:	4628      	mov	r0, r5
 80076b4:	bd70      	pop	{r4, r5, r6, pc}
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	da04      	bge.n	80076c4 <_puts_r+0x60>
 80076ba:	69a2      	ldr	r2, [r4, #24]
 80076bc:	429a      	cmp	r2, r3
 80076be:	dc17      	bgt.n	80076f0 <_puts_r+0x8c>
 80076c0:	290a      	cmp	r1, #10
 80076c2:	d015      	beq.n	80076f0 <_puts_r+0x8c>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	6022      	str	r2, [r4, #0]
 80076ca:	7019      	strb	r1, [r3, #0]
 80076cc:	68a3      	ldr	r3, [r4, #8]
 80076ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076d2:	3b01      	subs	r3, #1
 80076d4:	60a3      	str	r3, [r4, #8]
 80076d6:	2900      	cmp	r1, #0
 80076d8:	d1ed      	bne.n	80076b6 <_puts_r+0x52>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	da11      	bge.n	8007702 <_puts_r+0x9e>
 80076de:	4622      	mov	r2, r4
 80076e0:	210a      	movs	r1, #10
 80076e2:	4628      	mov	r0, r5
 80076e4:	f000 f85f 	bl	80077a6 <__swbuf_r>
 80076e8:	3001      	adds	r0, #1
 80076ea:	d0d7      	beq.n	800769c <_puts_r+0x38>
 80076ec:	250a      	movs	r5, #10
 80076ee:	e7d7      	b.n	80076a0 <_puts_r+0x3c>
 80076f0:	4622      	mov	r2, r4
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 f857 	bl	80077a6 <__swbuf_r>
 80076f8:	3001      	adds	r0, #1
 80076fa:	d1e7      	bne.n	80076cc <_puts_r+0x68>
 80076fc:	e7ce      	b.n	800769c <_puts_r+0x38>
 80076fe:	3e01      	subs	r6, #1
 8007700:	e7e4      	b.n	80076cc <_puts_r+0x68>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	6022      	str	r2, [r4, #0]
 8007708:	220a      	movs	r2, #10
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e7ee      	b.n	80076ec <_puts_r+0x88>
	...

08007710 <puts>:
 8007710:	4b02      	ldr	r3, [pc, #8]	@ (800771c <puts+0xc>)
 8007712:	4601      	mov	r1, r0
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	f7ff bfa5 	b.w	8007664 <_puts_r>
 800771a:	bf00      	nop
 800771c:	20000018 	.word	0x20000018

08007720 <__sread>:
 8007720:	b510      	push	{r4, lr}
 8007722:	460c      	mov	r4, r1
 8007724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007728:	f000 f8fc 	bl	8007924 <_read_r>
 800772c:	2800      	cmp	r0, #0
 800772e:	bfab      	itete	ge
 8007730:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007732:	89a3      	ldrhlt	r3, [r4, #12]
 8007734:	181b      	addge	r3, r3, r0
 8007736:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800773a:	bfac      	ite	ge
 800773c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800773e:	81a3      	strhlt	r3, [r4, #12]
 8007740:	bd10      	pop	{r4, pc}

08007742 <__swrite>:
 8007742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007746:	461f      	mov	r7, r3
 8007748:	898b      	ldrh	r3, [r1, #12]
 800774a:	05db      	lsls	r3, r3, #23
 800774c:	4605      	mov	r5, r0
 800774e:	460c      	mov	r4, r1
 8007750:	4616      	mov	r6, r2
 8007752:	d505      	bpl.n	8007760 <__swrite+0x1e>
 8007754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007758:	2302      	movs	r3, #2
 800775a:	2200      	movs	r2, #0
 800775c:	f000 f8d0 	bl	8007900 <_lseek_r>
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007766:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800776a:	81a3      	strh	r3, [r4, #12]
 800776c:	4632      	mov	r2, r6
 800776e:	463b      	mov	r3, r7
 8007770:	4628      	mov	r0, r5
 8007772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007776:	f000 b8e7 	b.w	8007948 <_write_r>

0800777a <__sseek>:
 800777a:	b510      	push	{r4, lr}
 800777c:	460c      	mov	r4, r1
 800777e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007782:	f000 f8bd 	bl	8007900 <_lseek_r>
 8007786:	1c43      	adds	r3, r0, #1
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	bf15      	itete	ne
 800778c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800778e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007792:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007796:	81a3      	strheq	r3, [r4, #12]
 8007798:	bf18      	it	ne
 800779a:	81a3      	strhne	r3, [r4, #12]
 800779c:	bd10      	pop	{r4, pc}

0800779e <__sclose>:
 800779e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a2:	f000 b89d 	b.w	80078e0 <_close_r>

080077a6 <__swbuf_r>:
 80077a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a8:	460e      	mov	r6, r1
 80077aa:	4614      	mov	r4, r2
 80077ac:	4605      	mov	r5, r0
 80077ae:	b118      	cbz	r0, 80077b8 <__swbuf_r+0x12>
 80077b0:	6a03      	ldr	r3, [r0, #32]
 80077b2:	b90b      	cbnz	r3, 80077b8 <__swbuf_r+0x12>
 80077b4:	f7ff ff0e 	bl	80075d4 <__sinit>
 80077b8:	69a3      	ldr	r3, [r4, #24]
 80077ba:	60a3      	str	r3, [r4, #8]
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	071a      	lsls	r2, r3, #28
 80077c0:	d501      	bpl.n	80077c6 <__swbuf_r+0x20>
 80077c2:	6923      	ldr	r3, [r4, #16]
 80077c4:	b943      	cbnz	r3, 80077d8 <__swbuf_r+0x32>
 80077c6:	4621      	mov	r1, r4
 80077c8:	4628      	mov	r0, r5
 80077ca:	f000 f82b 	bl	8007824 <__swsetup_r>
 80077ce:	b118      	cbz	r0, 80077d8 <__swbuf_r+0x32>
 80077d0:	f04f 37ff 	mov.w	r7, #4294967295
 80077d4:	4638      	mov	r0, r7
 80077d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	6922      	ldr	r2, [r4, #16]
 80077dc:	1a98      	subs	r0, r3, r2
 80077de:	6963      	ldr	r3, [r4, #20]
 80077e0:	b2f6      	uxtb	r6, r6
 80077e2:	4283      	cmp	r3, r0
 80077e4:	4637      	mov	r7, r6
 80077e6:	dc05      	bgt.n	80077f4 <__swbuf_r+0x4e>
 80077e8:	4621      	mov	r1, r4
 80077ea:	4628      	mov	r0, r5
 80077ec:	f000 fd38 	bl	8008260 <_fflush_r>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	d1ed      	bne.n	80077d0 <__swbuf_r+0x2a>
 80077f4:	68a3      	ldr	r3, [r4, #8]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	60a3      	str	r3, [r4, #8]
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	6022      	str	r2, [r4, #0]
 8007800:	701e      	strb	r6, [r3, #0]
 8007802:	6962      	ldr	r2, [r4, #20]
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	429a      	cmp	r2, r3
 8007808:	d004      	beq.n	8007814 <__swbuf_r+0x6e>
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	07db      	lsls	r3, r3, #31
 800780e:	d5e1      	bpl.n	80077d4 <__swbuf_r+0x2e>
 8007810:	2e0a      	cmp	r6, #10
 8007812:	d1df      	bne.n	80077d4 <__swbuf_r+0x2e>
 8007814:	4621      	mov	r1, r4
 8007816:	4628      	mov	r0, r5
 8007818:	f000 fd22 	bl	8008260 <_fflush_r>
 800781c:	2800      	cmp	r0, #0
 800781e:	d0d9      	beq.n	80077d4 <__swbuf_r+0x2e>
 8007820:	e7d6      	b.n	80077d0 <__swbuf_r+0x2a>
	...

08007824 <__swsetup_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4b29      	ldr	r3, [pc, #164]	@ (80078cc <__swsetup_r+0xa8>)
 8007828:	4605      	mov	r5, r0
 800782a:	6818      	ldr	r0, [r3, #0]
 800782c:	460c      	mov	r4, r1
 800782e:	b118      	cbz	r0, 8007838 <__swsetup_r+0x14>
 8007830:	6a03      	ldr	r3, [r0, #32]
 8007832:	b90b      	cbnz	r3, 8007838 <__swsetup_r+0x14>
 8007834:	f7ff fece 	bl	80075d4 <__sinit>
 8007838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800783c:	0719      	lsls	r1, r3, #28
 800783e:	d422      	bmi.n	8007886 <__swsetup_r+0x62>
 8007840:	06da      	lsls	r2, r3, #27
 8007842:	d407      	bmi.n	8007854 <__swsetup_r+0x30>
 8007844:	2209      	movs	r2, #9
 8007846:	602a      	str	r2, [r5, #0]
 8007848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	f04f 30ff 	mov.w	r0, #4294967295
 8007852:	e033      	b.n	80078bc <__swsetup_r+0x98>
 8007854:	0758      	lsls	r0, r3, #29
 8007856:	d512      	bpl.n	800787e <__swsetup_r+0x5a>
 8007858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800785a:	b141      	cbz	r1, 800786e <__swsetup_r+0x4a>
 800785c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007860:	4299      	cmp	r1, r3
 8007862:	d002      	beq.n	800786a <__swsetup_r+0x46>
 8007864:	4628      	mov	r0, r5
 8007866:	f000 f8af 	bl	80079c8 <_free_r>
 800786a:	2300      	movs	r3, #0
 800786c:	6363      	str	r3, [r4, #52]	@ 0x34
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007874:	81a3      	strh	r3, [r4, #12]
 8007876:	2300      	movs	r3, #0
 8007878:	6063      	str	r3, [r4, #4]
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	f043 0308 	orr.w	r3, r3, #8
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	6923      	ldr	r3, [r4, #16]
 8007888:	b94b      	cbnz	r3, 800789e <__swsetup_r+0x7a>
 800788a:	89a3      	ldrh	r3, [r4, #12]
 800788c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007894:	d003      	beq.n	800789e <__swsetup_r+0x7a>
 8007896:	4621      	mov	r1, r4
 8007898:	4628      	mov	r0, r5
 800789a:	f000 fd2f 	bl	80082fc <__smakebuf_r>
 800789e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a2:	f013 0201 	ands.w	r2, r3, #1
 80078a6:	d00a      	beq.n	80078be <__swsetup_r+0x9a>
 80078a8:	2200      	movs	r2, #0
 80078aa:	60a2      	str	r2, [r4, #8]
 80078ac:	6962      	ldr	r2, [r4, #20]
 80078ae:	4252      	negs	r2, r2
 80078b0:	61a2      	str	r2, [r4, #24]
 80078b2:	6922      	ldr	r2, [r4, #16]
 80078b4:	b942      	cbnz	r2, 80078c8 <__swsetup_r+0xa4>
 80078b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078ba:	d1c5      	bne.n	8007848 <__swsetup_r+0x24>
 80078bc:	bd38      	pop	{r3, r4, r5, pc}
 80078be:	0799      	lsls	r1, r3, #30
 80078c0:	bf58      	it	pl
 80078c2:	6962      	ldrpl	r2, [r4, #20]
 80078c4:	60a2      	str	r2, [r4, #8]
 80078c6:	e7f4      	b.n	80078b2 <__swsetup_r+0x8e>
 80078c8:	2000      	movs	r0, #0
 80078ca:	e7f7      	b.n	80078bc <__swsetup_r+0x98>
 80078cc:	20000018 	.word	0x20000018

080078d0 <memset>:
 80078d0:	4402      	add	r2, r0
 80078d2:	4603      	mov	r3, r0
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d100      	bne.n	80078da <memset+0xa>
 80078d8:	4770      	bx	lr
 80078da:	f803 1b01 	strb.w	r1, [r3], #1
 80078de:	e7f9      	b.n	80078d4 <memset+0x4>

080078e0 <_close_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d06      	ldr	r5, [pc, #24]	@ (80078fc <_close_r+0x1c>)
 80078e4:	2300      	movs	r3, #0
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7f9 fef2 	bl	80016d4 <_close>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_close_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_close_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	2000109c 	.word	0x2000109c

08007900 <_lseek_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4d07      	ldr	r5, [pc, #28]	@ (8007920 <_lseek_r+0x20>)
 8007904:	4604      	mov	r4, r0
 8007906:	4608      	mov	r0, r1
 8007908:	4611      	mov	r1, r2
 800790a:	2200      	movs	r2, #0
 800790c:	602a      	str	r2, [r5, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	f7f9 ff07 	bl	8001722 <_lseek>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_lseek_r+0x1e>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_lseek_r+0x1e>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	2000109c 	.word	0x2000109c

08007924 <_read_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4d07      	ldr	r5, [pc, #28]	@ (8007944 <_read_r+0x20>)
 8007928:	4604      	mov	r4, r0
 800792a:	4608      	mov	r0, r1
 800792c:	4611      	mov	r1, r2
 800792e:	2200      	movs	r2, #0
 8007930:	602a      	str	r2, [r5, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	f7f9 fe95 	bl	8001662 <_read>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d102      	bne.n	8007942 <_read_r+0x1e>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	b103      	cbz	r3, 8007942 <_read_r+0x1e>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	2000109c 	.word	0x2000109c

08007948 <_write_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4d07      	ldr	r5, [pc, #28]	@ (8007968 <_write_r+0x20>)
 800794c:	4604      	mov	r4, r0
 800794e:	4608      	mov	r0, r1
 8007950:	4611      	mov	r1, r2
 8007952:	2200      	movs	r2, #0
 8007954:	602a      	str	r2, [r5, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f7f9 fea0 	bl	800169c <_write>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_write_r+0x1e>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_write_r+0x1e>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	2000109c 	.word	0x2000109c

0800796c <__errno>:
 800796c:	4b01      	ldr	r3, [pc, #4]	@ (8007974 <__errno+0x8>)
 800796e:	6818      	ldr	r0, [r3, #0]
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	20000018 	.word	0x20000018

08007978 <__libc_init_array>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	4d0d      	ldr	r5, [pc, #52]	@ (80079b0 <__libc_init_array+0x38>)
 800797c:	4c0d      	ldr	r4, [pc, #52]	@ (80079b4 <__libc_init_array+0x3c>)
 800797e:	1b64      	subs	r4, r4, r5
 8007980:	10a4      	asrs	r4, r4, #2
 8007982:	2600      	movs	r6, #0
 8007984:	42a6      	cmp	r6, r4
 8007986:	d109      	bne.n	800799c <__libc_init_array+0x24>
 8007988:	4d0b      	ldr	r5, [pc, #44]	@ (80079b8 <__libc_init_array+0x40>)
 800798a:	4c0c      	ldr	r4, [pc, #48]	@ (80079bc <__libc_init_array+0x44>)
 800798c:	f000 fd24 	bl	80083d8 <_init>
 8007990:	1b64      	subs	r4, r4, r5
 8007992:	10a4      	asrs	r4, r4, #2
 8007994:	2600      	movs	r6, #0
 8007996:	42a6      	cmp	r6, r4
 8007998:	d105      	bne.n	80079a6 <__libc_init_array+0x2e>
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a0:	4798      	blx	r3
 80079a2:	3601      	adds	r6, #1
 80079a4:	e7ee      	b.n	8007984 <__libc_init_array+0xc>
 80079a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079aa:	4798      	blx	r3
 80079ac:	3601      	adds	r6, #1
 80079ae:	e7f2      	b.n	8007996 <__libc_init_array+0x1e>
 80079b0:	080084bc 	.word	0x080084bc
 80079b4:	080084bc 	.word	0x080084bc
 80079b8:	080084bc 	.word	0x080084bc
 80079bc:	080084c0 	.word	0x080084c0

080079c0 <__retarget_lock_init_recursive>:
 80079c0:	4770      	bx	lr

080079c2 <__retarget_lock_acquire_recursive>:
 80079c2:	4770      	bx	lr

080079c4 <__retarget_lock_release_recursive>:
 80079c4:	4770      	bx	lr
	...

080079c8 <_free_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4605      	mov	r5, r0
 80079cc:	2900      	cmp	r1, #0
 80079ce:	d041      	beq.n	8007a54 <_free_r+0x8c>
 80079d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079d4:	1f0c      	subs	r4, r1, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bfb8      	it	lt
 80079da:	18e4      	addlt	r4, r4, r3
 80079dc:	f000 f8e0 	bl	8007ba0 <__malloc_lock>
 80079e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a58 <_free_r+0x90>)
 80079e2:	6813      	ldr	r3, [r2, #0]
 80079e4:	b933      	cbnz	r3, 80079f4 <_free_r+0x2c>
 80079e6:	6063      	str	r3, [r4, #4]
 80079e8:	6014      	str	r4, [r2, #0]
 80079ea:	4628      	mov	r0, r5
 80079ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079f0:	f000 b8dc 	b.w	8007bac <__malloc_unlock>
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	d908      	bls.n	8007a0a <_free_r+0x42>
 80079f8:	6820      	ldr	r0, [r4, #0]
 80079fa:	1821      	adds	r1, r4, r0
 80079fc:	428b      	cmp	r3, r1
 80079fe:	bf01      	itttt	eq
 8007a00:	6819      	ldreq	r1, [r3, #0]
 8007a02:	685b      	ldreq	r3, [r3, #4]
 8007a04:	1809      	addeq	r1, r1, r0
 8007a06:	6021      	streq	r1, [r4, #0]
 8007a08:	e7ed      	b.n	80079e6 <_free_r+0x1e>
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	b10b      	cbz	r3, 8007a14 <_free_r+0x4c>
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	d9fa      	bls.n	8007a0a <_free_r+0x42>
 8007a14:	6811      	ldr	r1, [r2, #0]
 8007a16:	1850      	adds	r0, r2, r1
 8007a18:	42a0      	cmp	r0, r4
 8007a1a:	d10b      	bne.n	8007a34 <_free_r+0x6c>
 8007a1c:	6820      	ldr	r0, [r4, #0]
 8007a1e:	4401      	add	r1, r0
 8007a20:	1850      	adds	r0, r2, r1
 8007a22:	4283      	cmp	r3, r0
 8007a24:	6011      	str	r1, [r2, #0]
 8007a26:	d1e0      	bne.n	80079ea <_free_r+0x22>
 8007a28:	6818      	ldr	r0, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	6053      	str	r3, [r2, #4]
 8007a2e:	4408      	add	r0, r1
 8007a30:	6010      	str	r0, [r2, #0]
 8007a32:	e7da      	b.n	80079ea <_free_r+0x22>
 8007a34:	d902      	bls.n	8007a3c <_free_r+0x74>
 8007a36:	230c      	movs	r3, #12
 8007a38:	602b      	str	r3, [r5, #0]
 8007a3a:	e7d6      	b.n	80079ea <_free_r+0x22>
 8007a3c:	6820      	ldr	r0, [r4, #0]
 8007a3e:	1821      	adds	r1, r4, r0
 8007a40:	428b      	cmp	r3, r1
 8007a42:	bf04      	itt	eq
 8007a44:	6819      	ldreq	r1, [r3, #0]
 8007a46:	685b      	ldreq	r3, [r3, #4]
 8007a48:	6063      	str	r3, [r4, #4]
 8007a4a:	bf04      	itt	eq
 8007a4c:	1809      	addeq	r1, r1, r0
 8007a4e:	6021      	streq	r1, [r4, #0]
 8007a50:	6054      	str	r4, [r2, #4]
 8007a52:	e7ca      	b.n	80079ea <_free_r+0x22>
 8007a54:	bd38      	pop	{r3, r4, r5, pc}
 8007a56:	bf00      	nop
 8007a58:	200010a8 	.word	0x200010a8

08007a5c <sbrk_aligned>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	4e0f      	ldr	r6, [pc, #60]	@ (8007a9c <sbrk_aligned+0x40>)
 8007a60:	460c      	mov	r4, r1
 8007a62:	6831      	ldr	r1, [r6, #0]
 8007a64:	4605      	mov	r5, r0
 8007a66:	b911      	cbnz	r1, 8007a6e <sbrk_aligned+0x12>
 8007a68:	f000 fca6 	bl	80083b8 <_sbrk_r>
 8007a6c:	6030      	str	r0, [r6, #0]
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4628      	mov	r0, r5
 8007a72:	f000 fca1 	bl	80083b8 <_sbrk_r>
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	d103      	bne.n	8007a82 <sbrk_aligned+0x26>
 8007a7a:	f04f 34ff 	mov.w	r4, #4294967295
 8007a7e:	4620      	mov	r0, r4
 8007a80:	bd70      	pop	{r4, r5, r6, pc}
 8007a82:	1cc4      	adds	r4, r0, #3
 8007a84:	f024 0403 	bic.w	r4, r4, #3
 8007a88:	42a0      	cmp	r0, r4
 8007a8a:	d0f8      	beq.n	8007a7e <sbrk_aligned+0x22>
 8007a8c:	1a21      	subs	r1, r4, r0
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f000 fc92 	bl	80083b8 <_sbrk_r>
 8007a94:	3001      	adds	r0, #1
 8007a96:	d1f2      	bne.n	8007a7e <sbrk_aligned+0x22>
 8007a98:	e7ef      	b.n	8007a7a <sbrk_aligned+0x1e>
 8007a9a:	bf00      	nop
 8007a9c:	200010a4 	.word	0x200010a4

08007aa0 <_malloc_r>:
 8007aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa4:	1ccd      	adds	r5, r1, #3
 8007aa6:	f025 0503 	bic.w	r5, r5, #3
 8007aaa:	3508      	adds	r5, #8
 8007aac:	2d0c      	cmp	r5, #12
 8007aae:	bf38      	it	cc
 8007ab0:	250c      	movcc	r5, #12
 8007ab2:	2d00      	cmp	r5, #0
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	db01      	blt.n	8007abc <_malloc_r+0x1c>
 8007ab8:	42a9      	cmp	r1, r5
 8007aba:	d904      	bls.n	8007ac6 <_malloc_r+0x26>
 8007abc:	230c      	movs	r3, #12
 8007abe:	6033      	str	r3, [r6, #0]
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b9c <_malloc_r+0xfc>
 8007aca:	f000 f869 	bl	8007ba0 <__malloc_lock>
 8007ace:	f8d8 3000 	ldr.w	r3, [r8]
 8007ad2:	461c      	mov	r4, r3
 8007ad4:	bb44      	cbnz	r4, 8007b28 <_malloc_r+0x88>
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	4630      	mov	r0, r6
 8007ada:	f7ff ffbf 	bl	8007a5c <sbrk_aligned>
 8007ade:	1c43      	adds	r3, r0, #1
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	d158      	bne.n	8007b96 <_malloc_r+0xf6>
 8007ae4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ae8:	4627      	mov	r7, r4
 8007aea:	2f00      	cmp	r7, #0
 8007aec:	d143      	bne.n	8007b76 <_malloc_r+0xd6>
 8007aee:	2c00      	cmp	r4, #0
 8007af0:	d04b      	beq.n	8007b8a <_malloc_r+0xea>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	4639      	mov	r1, r7
 8007af6:	4630      	mov	r0, r6
 8007af8:	eb04 0903 	add.w	r9, r4, r3
 8007afc:	f000 fc5c 	bl	80083b8 <_sbrk_r>
 8007b00:	4581      	cmp	r9, r0
 8007b02:	d142      	bne.n	8007b8a <_malloc_r+0xea>
 8007b04:	6821      	ldr	r1, [r4, #0]
 8007b06:	1a6d      	subs	r5, r5, r1
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7ff ffa6 	bl	8007a5c <sbrk_aligned>
 8007b10:	3001      	adds	r0, #1
 8007b12:	d03a      	beq.n	8007b8a <_malloc_r+0xea>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	442b      	add	r3, r5
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	bb62      	cbnz	r2, 8007b7c <_malloc_r+0xdc>
 8007b22:	f8c8 7000 	str.w	r7, [r8]
 8007b26:	e00f      	b.n	8007b48 <_malloc_r+0xa8>
 8007b28:	6822      	ldr	r2, [r4, #0]
 8007b2a:	1b52      	subs	r2, r2, r5
 8007b2c:	d420      	bmi.n	8007b70 <_malloc_r+0xd0>
 8007b2e:	2a0b      	cmp	r2, #11
 8007b30:	d917      	bls.n	8007b62 <_malloc_r+0xc2>
 8007b32:	1961      	adds	r1, r4, r5
 8007b34:	42a3      	cmp	r3, r4
 8007b36:	6025      	str	r5, [r4, #0]
 8007b38:	bf18      	it	ne
 8007b3a:	6059      	strne	r1, [r3, #4]
 8007b3c:	6863      	ldr	r3, [r4, #4]
 8007b3e:	bf08      	it	eq
 8007b40:	f8c8 1000 	streq.w	r1, [r8]
 8007b44:	5162      	str	r2, [r4, r5]
 8007b46:	604b      	str	r3, [r1, #4]
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f000 f82f 	bl	8007bac <__malloc_unlock>
 8007b4e:	f104 000b 	add.w	r0, r4, #11
 8007b52:	1d23      	adds	r3, r4, #4
 8007b54:	f020 0007 	bic.w	r0, r0, #7
 8007b58:	1ac2      	subs	r2, r0, r3
 8007b5a:	bf1c      	itt	ne
 8007b5c:	1a1b      	subne	r3, r3, r0
 8007b5e:	50a3      	strne	r3, [r4, r2]
 8007b60:	e7af      	b.n	8007ac2 <_malloc_r+0x22>
 8007b62:	6862      	ldr	r2, [r4, #4]
 8007b64:	42a3      	cmp	r3, r4
 8007b66:	bf0c      	ite	eq
 8007b68:	f8c8 2000 	streq.w	r2, [r8]
 8007b6c:	605a      	strne	r2, [r3, #4]
 8007b6e:	e7eb      	b.n	8007b48 <_malloc_r+0xa8>
 8007b70:	4623      	mov	r3, r4
 8007b72:	6864      	ldr	r4, [r4, #4]
 8007b74:	e7ae      	b.n	8007ad4 <_malloc_r+0x34>
 8007b76:	463c      	mov	r4, r7
 8007b78:	687f      	ldr	r7, [r7, #4]
 8007b7a:	e7b6      	b.n	8007aea <_malloc_r+0x4a>
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	d1fb      	bne.n	8007b7c <_malloc_r+0xdc>
 8007b84:	2300      	movs	r3, #0
 8007b86:	6053      	str	r3, [r2, #4]
 8007b88:	e7de      	b.n	8007b48 <_malloc_r+0xa8>
 8007b8a:	230c      	movs	r3, #12
 8007b8c:	6033      	str	r3, [r6, #0]
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f000 f80c 	bl	8007bac <__malloc_unlock>
 8007b94:	e794      	b.n	8007ac0 <_malloc_r+0x20>
 8007b96:	6005      	str	r5, [r0, #0]
 8007b98:	e7d6      	b.n	8007b48 <_malloc_r+0xa8>
 8007b9a:	bf00      	nop
 8007b9c:	200010a8 	.word	0x200010a8

08007ba0 <__malloc_lock>:
 8007ba0:	4801      	ldr	r0, [pc, #4]	@ (8007ba8 <__malloc_lock+0x8>)
 8007ba2:	f7ff bf0e 	b.w	80079c2 <__retarget_lock_acquire_recursive>
 8007ba6:	bf00      	nop
 8007ba8:	200010a0 	.word	0x200010a0

08007bac <__malloc_unlock>:
 8007bac:	4801      	ldr	r0, [pc, #4]	@ (8007bb4 <__malloc_unlock+0x8>)
 8007bae:	f7ff bf09 	b.w	80079c4 <__retarget_lock_release_recursive>
 8007bb2:	bf00      	nop
 8007bb4:	200010a0 	.word	0x200010a0

08007bb8 <__sfputc_r>:
 8007bb8:	6893      	ldr	r3, [r2, #8]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	b410      	push	{r4}
 8007bc0:	6093      	str	r3, [r2, #8]
 8007bc2:	da08      	bge.n	8007bd6 <__sfputc_r+0x1e>
 8007bc4:	6994      	ldr	r4, [r2, #24]
 8007bc6:	42a3      	cmp	r3, r4
 8007bc8:	db01      	blt.n	8007bce <__sfputc_r+0x16>
 8007bca:	290a      	cmp	r1, #10
 8007bcc:	d103      	bne.n	8007bd6 <__sfputc_r+0x1e>
 8007bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bd2:	f7ff bde8 	b.w	80077a6 <__swbuf_r>
 8007bd6:	6813      	ldr	r3, [r2, #0]
 8007bd8:	1c58      	adds	r0, r3, #1
 8007bda:	6010      	str	r0, [r2, #0]
 8007bdc:	7019      	strb	r1, [r3, #0]
 8007bde:	4608      	mov	r0, r1
 8007be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <__sfputs_r>:
 8007be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be8:	4606      	mov	r6, r0
 8007bea:	460f      	mov	r7, r1
 8007bec:	4614      	mov	r4, r2
 8007bee:	18d5      	adds	r5, r2, r3
 8007bf0:	42ac      	cmp	r4, r5
 8007bf2:	d101      	bne.n	8007bf8 <__sfputs_r+0x12>
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	e007      	b.n	8007c08 <__sfputs_r+0x22>
 8007bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfc:	463a      	mov	r2, r7
 8007bfe:	4630      	mov	r0, r6
 8007c00:	f7ff ffda 	bl	8007bb8 <__sfputc_r>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d1f3      	bne.n	8007bf0 <__sfputs_r+0xa>
 8007c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c0c <_vfiprintf_r>:
 8007c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c10:	460d      	mov	r5, r1
 8007c12:	b09d      	sub	sp, #116	@ 0x74
 8007c14:	4614      	mov	r4, r2
 8007c16:	4698      	mov	r8, r3
 8007c18:	4606      	mov	r6, r0
 8007c1a:	b118      	cbz	r0, 8007c24 <_vfiprintf_r+0x18>
 8007c1c:	6a03      	ldr	r3, [r0, #32]
 8007c1e:	b90b      	cbnz	r3, 8007c24 <_vfiprintf_r+0x18>
 8007c20:	f7ff fcd8 	bl	80075d4 <__sinit>
 8007c24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c26:	07d9      	lsls	r1, r3, #31
 8007c28:	d405      	bmi.n	8007c36 <_vfiprintf_r+0x2a>
 8007c2a:	89ab      	ldrh	r3, [r5, #12]
 8007c2c:	059a      	lsls	r2, r3, #22
 8007c2e:	d402      	bmi.n	8007c36 <_vfiprintf_r+0x2a>
 8007c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c32:	f7ff fec6 	bl	80079c2 <__retarget_lock_acquire_recursive>
 8007c36:	89ab      	ldrh	r3, [r5, #12]
 8007c38:	071b      	lsls	r3, r3, #28
 8007c3a:	d501      	bpl.n	8007c40 <_vfiprintf_r+0x34>
 8007c3c:	692b      	ldr	r3, [r5, #16]
 8007c3e:	b99b      	cbnz	r3, 8007c68 <_vfiprintf_r+0x5c>
 8007c40:	4629      	mov	r1, r5
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7ff fdee 	bl	8007824 <__swsetup_r>
 8007c48:	b170      	cbz	r0, 8007c68 <_vfiprintf_r+0x5c>
 8007c4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c4c:	07dc      	lsls	r4, r3, #31
 8007c4e:	d504      	bpl.n	8007c5a <_vfiprintf_r+0x4e>
 8007c50:	f04f 30ff 	mov.w	r0, #4294967295
 8007c54:	b01d      	add	sp, #116	@ 0x74
 8007c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5a:	89ab      	ldrh	r3, [r5, #12]
 8007c5c:	0598      	lsls	r0, r3, #22
 8007c5e:	d4f7      	bmi.n	8007c50 <_vfiprintf_r+0x44>
 8007c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c62:	f7ff feaf 	bl	80079c4 <__retarget_lock_release_recursive>
 8007c66:	e7f3      	b.n	8007c50 <_vfiprintf_r+0x44>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c6c:	2320      	movs	r3, #32
 8007c6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c76:	2330      	movs	r3, #48	@ 0x30
 8007c78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e28 <_vfiprintf_r+0x21c>
 8007c7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c80:	f04f 0901 	mov.w	r9, #1
 8007c84:	4623      	mov	r3, r4
 8007c86:	469a      	mov	sl, r3
 8007c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c8c:	b10a      	cbz	r2, 8007c92 <_vfiprintf_r+0x86>
 8007c8e:	2a25      	cmp	r2, #37	@ 0x25
 8007c90:	d1f9      	bne.n	8007c86 <_vfiprintf_r+0x7a>
 8007c92:	ebba 0b04 	subs.w	fp, sl, r4
 8007c96:	d00b      	beq.n	8007cb0 <_vfiprintf_r+0xa4>
 8007c98:	465b      	mov	r3, fp
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	f7ff ffa1 	bl	8007be6 <__sfputs_r>
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	f000 80a7 	beq.w	8007df8 <_vfiprintf_r+0x1ec>
 8007caa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cac:	445a      	add	r2, fp
 8007cae:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 809f 	beq.w	8007df8 <_vfiprintf_r+0x1ec>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cc4:	f10a 0a01 	add.w	sl, sl, #1
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	9307      	str	r3, [sp, #28]
 8007ccc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cd2:	4654      	mov	r4, sl
 8007cd4:	2205      	movs	r2, #5
 8007cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cda:	4853      	ldr	r0, [pc, #332]	@ (8007e28 <_vfiprintf_r+0x21c>)
 8007cdc:	f7f8 fa78 	bl	80001d0 <memchr>
 8007ce0:	9a04      	ldr	r2, [sp, #16]
 8007ce2:	b9d8      	cbnz	r0, 8007d1c <_vfiprintf_r+0x110>
 8007ce4:	06d1      	lsls	r1, r2, #27
 8007ce6:	bf44      	itt	mi
 8007ce8:	2320      	movmi	r3, #32
 8007cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cee:	0713      	lsls	r3, r2, #28
 8007cf0:	bf44      	itt	mi
 8007cf2:	232b      	movmi	r3, #43	@ 0x2b
 8007cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cfe:	d015      	beq.n	8007d2c <_vfiprintf_r+0x120>
 8007d00:	9a07      	ldr	r2, [sp, #28]
 8007d02:	4654      	mov	r4, sl
 8007d04:	2000      	movs	r0, #0
 8007d06:	f04f 0c0a 	mov.w	ip, #10
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d10:	3b30      	subs	r3, #48	@ 0x30
 8007d12:	2b09      	cmp	r3, #9
 8007d14:	d94b      	bls.n	8007dae <_vfiprintf_r+0x1a2>
 8007d16:	b1b0      	cbz	r0, 8007d46 <_vfiprintf_r+0x13a>
 8007d18:	9207      	str	r2, [sp, #28]
 8007d1a:	e014      	b.n	8007d46 <_vfiprintf_r+0x13a>
 8007d1c:	eba0 0308 	sub.w	r3, r0, r8
 8007d20:	fa09 f303 	lsl.w	r3, r9, r3
 8007d24:	4313      	orrs	r3, r2
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	46a2      	mov	sl, r4
 8007d2a:	e7d2      	b.n	8007cd2 <_vfiprintf_r+0xc6>
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	1d19      	adds	r1, r3, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	9103      	str	r1, [sp, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bfbb      	ittet	lt
 8007d38:	425b      	neglt	r3, r3
 8007d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8007d3e:	9307      	strge	r3, [sp, #28]
 8007d40:	9307      	strlt	r3, [sp, #28]
 8007d42:	bfb8      	it	lt
 8007d44:	9204      	strlt	r2, [sp, #16]
 8007d46:	7823      	ldrb	r3, [r4, #0]
 8007d48:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d4a:	d10a      	bne.n	8007d62 <_vfiprintf_r+0x156>
 8007d4c:	7863      	ldrb	r3, [r4, #1]
 8007d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d50:	d132      	bne.n	8007db8 <_vfiprintf_r+0x1ac>
 8007d52:	9b03      	ldr	r3, [sp, #12]
 8007d54:	1d1a      	adds	r2, r3, #4
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	9203      	str	r2, [sp, #12]
 8007d5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d5e:	3402      	adds	r4, #2
 8007d60:	9305      	str	r3, [sp, #20]
 8007d62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e38 <_vfiprintf_r+0x22c>
 8007d66:	7821      	ldrb	r1, [r4, #0]
 8007d68:	2203      	movs	r2, #3
 8007d6a:	4650      	mov	r0, sl
 8007d6c:	f7f8 fa30 	bl	80001d0 <memchr>
 8007d70:	b138      	cbz	r0, 8007d82 <_vfiprintf_r+0x176>
 8007d72:	9b04      	ldr	r3, [sp, #16]
 8007d74:	eba0 000a 	sub.w	r0, r0, sl
 8007d78:	2240      	movs	r2, #64	@ 0x40
 8007d7a:	4082      	lsls	r2, r0
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	3401      	adds	r4, #1
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d86:	4829      	ldr	r0, [pc, #164]	@ (8007e2c <_vfiprintf_r+0x220>)
 8007d88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d8c:	2206      	movs	r2, #6
 8007d8e:	f7f8 fa1f 	bl	80001d0 <memchr>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d03f      	beq.n	8007e16 <_vfiprintf_r+0x20a>
 8007d96:	4b26      	ldr	r3, [pc, #152]	@ (8007e30 <_vfiprintf_r+0x224>)
 8007d98:	bb1b      	cbnz	r3, 8007de2 <_vfiprintf_r+0x1d6>
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	3307      	adds	r3, #7
 8007d9e:	f023 0307 	bic.w	r3, r3, #7
 8007da2:	3308      	adds	r3, #8
 8007da4:	9303      	str	r3, [sp, #12]
 8007da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da8:	443b      	add	r3, r7
 8007daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dac:	e76a      	b.n	8007c84 <_vfiprintf_r+0x78>
 8007dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8007db2:	460c      	mov	r4, r1
 8007db4:	2001      	movs	r0, #1
 8007db6:	e7a8      	b.n	8007d0a <_vfiprintf_r+0xfe>
 8007db8:	2300      	movs	r3, #0
 8007dba:	3401      	adds	r4, #1
 8007dbc:	9305      	str	r3, [sp, #20]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	f04f 0c0a 	mov.w	ip, #10
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dca:	3a30      	subs	r2, #48	@ 0x30
 8007dcc:	2a09      	cmp	r2, #9
 8007dce:	d903      	bls.n	8007dd8 <_vfiprintf_r+0x1cc>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d0c6      	beq.n	8007d62 <_vfiprintf_r+0x156>
 8007dd4:	9105      	str	r1, [sp, #20]
 8007dd6:	e7c4      	b.n	8007d62 <_vfiprintf_r+0x156>
 8007dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ddc:	4604      	mov	r4, r0
 8007dde:	2301      	movs	r3, #1
 8007de0:	e7f0      	b.n	8007dc4 <_vfiprintf_r+0x1b8>
 8007de2:	ab03      	add	r3, sp, #12
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	462a      	mov	r2, r5
 8007de8:	4b12      	ldr	r3, [pc, #72]	@ (8007e34 <_vfiprintf_r+0x228>)
 8007dea:	a904      	add	r1, sp, #16
 8007dec:	4630      	mov	r0, r6
 8007dee:	f3af 8000 	nop.w
 8007df2:	4607      	mov	r7, r0
 8007df4:	1c78      	adds	r0, r7, #1
 8007df6:	d1d6      	bne.n	8007da6 <_vfiprintf_r+0x19a>
 8007df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dfa:	07d9      	lsls	r1, r3, #31
 8007dfc:	d405      	bmi.n	8007e0a <_vfiprintf_r+0x1fe>
 8007dfe:	89ab      	ldrh	r3, [r5, #12]
 8007e00:	059a      	lsls	r2, r3, #22
 8007e02:	d402      	bmi.n	8007e0a <_vfiprintf_r+0x1fe>
 8007e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e06:	f7ff fddd 	bl	80079c4 <__retarget_lock_release_recursive>
 8007e0a:	89ab      	ldrh	r3, [r5, #12]
 8007e0c:	065b      	lsls	r3, r3, #25
 8007e0e:	f53f af1f 	bmi.w	8007c50 <_vfiprintf_r+0x44>
 8007e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e14:	e71e      	b.n	8007c54 <_vfiprintf_r+0x48>
 8007e16:	ab03      	add	r3, sp, #12
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	462a      	mov	r2, r5
 8007e1c:	4b05      	ldr	r3, [pc, #20]	@ (8007e34 <_vfiprintf_r+0x228>)
 8007e1e:	a904      	add	r1, sp, #16
 8007e20:	4630      	mov	r0, r6
 8007e22:	f000 f879 	bl	8007f18 <_printf_i>
 8007e26:	e7e4      	b.n	8007df2 <_vfiprintf_r+0x1e6>
 8007e28:	08008480 	.word	0x08008480
 8007e2c:	0800848a 	.word	0x0800848a
 8007e30:	00000000 	.word	0x00000000
 8007e34:	08007be7 	.word	0x08007be7
 8007e38:	08008486 	.word	0x08008486

08007e3c <_printf_common>:
 8007e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e40:	4616      	mov	r6, r2
 8007e42:	4698      	mov	r8, r3
 8007e44:	688a      	ldr	r2, [r1, #8]
 8007e46:	690b      	ldr	r3, [r1, #16]
 8007e48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	bfb8      	it	lt
 8007e50:	4613      	movlt	r3, r2
 8007e52:	6033      	str	r3, [r6, #0]
 8007e54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e58:	4607      	mov	r7, r0
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	b10a      	cbz	r2, 8007e62 <_printf_common+0x26>
 8007e5e:	3301      	adds	r3, #1
 8007e60:	6033      	str	r3, [r6, #0]
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	0699      	lsls	r1, r3, #26
 8007e66:	bf42      	ittt	mi
 8007e68:	6833      	ldrmi	r3, [r6, #0]
 8007e6a:	3302      	addmi	r3, #2
 8007e6c:	6033      	strmi	r3, [r6, #0]
 8007e6e:	6825      	ldr	r5, [r4, #0]
 8007e70:	f015 0506 	ands.w	r5, r5, #6
 8007e74:	d106      	bne.n	8007e84 <_printf_common+0x48>
 8007e76:	f104 0a19 	add.w	sl, r4, #25
 8007e7a:	68e3      	ldr	r3, [r4, #12]
 8007e7c:	6832      	ldr	r2, [r6, #0]
 8007e7e:	1a9b      	subs	r3, r3, r2
 8007e80:	42ab      	cmp	r3, r5
 8007e82:	dc26      	bgt.n	8007ed2 <_printf_common+0x96>
 8007e84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e88:	6822      	ldr	r2, [r4, #0]
 8007e8a:	3b00      	subs	r3, #0
 8007e8c:	bf18      	it	ne
 8007e8e:	2301      	movne	r3, #1
 8007e90:	0692      	lsls	r2, r2, #26
 8007e92:	d42b      	bmi.n	8007eec <_printf_common+0xb0>
 8007e94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e98:	4641      	mov	r1, r8
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	47c8      	blx	r9
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	d01e      	beq.n	8007ee0 <_printf_common+0xa4>
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	6922      	ldr	r2, [r4, #16]
 8007ea6:	f003 0306 	and.w	r3, r3, #6
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	bf02      	ittt	eq
 8007eae:	68e5      	ldreq	r5, [r4, #12]
 8007eb0:	6833      	ldreq	r3, [r6, #0]
 8007eb2:	1aed      	subeq	r5, r5, r3
 8007eb4:	68a3      	ldr	r3, [r4, #8]
 8007eb6:	bf0c      	ite	eq
 8007eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ebc:	2500      	movne	r5, #0
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	bfc4      	itt	gt
 8007ec2:	1a9b      	subgt	r3, r3, r2
 8007ec4:	18ed      	addgt	r5, r5, r3
 8007ec6:	2600      	movs	r6, #0
 8007ec8:	341a      	adds	r4, #26
 8007eca:	42b5      	cmp	r5, r6
 8007ecc:	d11a      	bne.n	8007f04 <_printf_common+0xc8>
 8007ece:	2000      	movs	r0, #0
 8007ed0:	e008      	b.n	8007ee4 <_printf_common+0xa8>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	4652      	mov	r2, sl
 8007ed6:	4641      	mov	r1, r8
 8007ed8:	4638      	mov	r0, r7
 8007eda:	47c8      	blx	r9
 8007edc:	3001      	adds	r0, #1
 8007ede:	d103      	bne.n	8007ee8 <_printf_common+0xac>
 8007ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee8:	3501      	adds	r5, #1
 8007eea:	e7c6      	b.n	8007e7a <_printf_common+0x3e>
 8007eec:	18e1      	adds	r1, r4, r3
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	2030      	movs	r0, #48	@ 0x30
 8007ef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ef6:	4422      	add	r2, r4
 8007ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007efc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f00:	3302      	adds	r3, #2
 8007f02:	e7c7      	b.n	8007e94 <_printf_common+0x58>
 8007f04:	2301      	movs	r3, #1
 8007f06:	4622      	mov	r2, r4
 8007f08:	4641      	mov	r1, r8
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	47c8      	blx	r9
 8007f0e:	3001      	adds	r0, #1
 8007f10:	d0e6      	beq.n	8007ee0 <_printf_common+0xa4>
 8007f12:	3601      	adds	r6, #1
 8007f14:	e7d9      	b.n	8007eca <_printf_common+0x8e>
	...

08007f18 <_printf_i>:
 8007f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f1c:	7e0f      	ldrb	r7, [r1, #24]
 8007f1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f20:	2f78      	cmp	r7, #120	@ 0x78
 8007f22:	4691      	mov	r9, r2
 8007f24:	4680      	mov	r8, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	469a      	mov	sl, r3
 8007f2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f2e:	d807      	bhi.n	8007f40 <_printf_i+0x28>
 8007f30:	2f62      	cmp	r7, #98	@ 0x62
 8007f32:	d80a      	bhi.n	8007f4a <_printf_i+0x32>
 8007f34:	2f00      	cmp	r7, #0
 8007f36:	f000 80d2 	beq.w	80080de <_printf_i+0x1c6>
 8007f3a:	2f58      	cmp	r7, #88	@ 0x58
 8007f3c:	f000 80b9 	beq.w	80080b2 <_printf_i+0x19a>
 8007f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f48:	e03a      	b.n	8007fc0 <_printf_i+0xa8>
 8007f4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f4e:	2b15      	cmp	r3, #21
 8007f50:	d8f6      	bhi.n	8007f40 <_printf_i+0x28>
 8007f52:	a101      	add	r1, pc, #4	@ (adr r1, 8007f58 <_printf_i+0x40>)
 8007f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f58:	08007fb1 	.word	0x08007fb1
 8007f5c:	08007fc5 	.word	0x08007fc5
 8007f60:	08007f41 	.word	0x08007f41
 8007f64:	08007f41 	.word	0x08007f41
 8007f68:	08007f41 	.word	0x08007f41
 8007f6c:	08007f41 	.word	0x08007f41
 8007f70:	08007fc5 	.word	0x08007fc5
 8007f74:	08007f41 	.word	0x08007f41
 8007f78:	08007f41 	.word	0x08007f41
 8007f7c:	08007f41 	.word	0x08007f41
 8007f80:	08007f41 	.word	0x08007f41
 8007f84:	080080c5 	.word	0x080080c5
 8007f88:	08007fef 	.word	0x08007fef
 8007f8c:	0800807f 	.word	0x0800807f
 8007f90:	08007f41 	.word	0x08007f41
 8007f94:	08007f41 	.word	0x08007f41
 8007f98:	080080e7 	.word	0x080080e7
 8007f9c:	08007f41 	.word	0x08007f41
 8007fa0:	08007fef 	.word	0x08007fef
 8007fa4:	08007f41 	.word	0x08007f41
 8007fa8:	08007f41 	.word	0x08007f41
 8007fac:	08008087 	.word	0x08008087
 8007fb0:	6833      	ldr	r3, [r6, #0]
 8007fb2:	1d1a      	adds	r2, r3, #4
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6032      	str	r2, [r6, #0]
 8007fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e09d      	b.n	8008100 <_printf_i+0x1e8>
 8007fc4:	6833      	ldr	r3, [r6, #0]
 8007fc6:	6820      	ldr	r0, [r4, #0]
 8007fc8:	1d19      	adds	r1, r3, #4
 8007fca:	6031      	str	r1, [r6, #0]
 8007fcc:	0606      	lsls	r6, r0, #24
 8007fce:	d501      	bpl.n	8007fd4 <_printf_i+0xbc>
 8007fd0:	681d      	ldr	r5, [r3, #0]
 8007fd2:	e003      	b.n	8007fdc <_printf_i+0xc4>
 8007fd4:	0645      	lsls	r5, r0, #25
 8007fd6:	d5fb      	bpl.n	8007fd0 <_printf_i+0xb8>
 8007fd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fdc:	2d00      	cmp	r5, #0
 8007fde:	da03      	bge.n	8007fe8 <_printf_i+0xd0>
 8007fe0:	232d      	movs	r3, #45	@ 0x2d
 8007fe2:	426d      	negs	r5, r5
 8007fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fe8:	4859      	ldr	r0, [pc, #356]	@ (8008150 <_printf_i+0x238>)
 8007fea:	230a      	movs	r3, #10
 8007fec:	e011      	b.n	8008012 <_printf_i+0xfa>
 8007fee:	6821      	ldr	r1, [r4, #0]
 8007ff0:	6833      	ldr	r3, [r6, #0]
 8007ff2:	0608      	lsls	r0, r1, #24
 8007ff4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ff8:	d402      	bmi.n	8008000 <_printf_i+0xe8>
 8007ffa:	0649      	lsls	r1, r1, #25
 8007ffc:	bf48      	it	mi
 8007ffe:	b2ad      	uxthmi	r5, r5
 8008000:	2f6f      	cmp	r7, #111	@ 0x6f
 8008002:	4853      	ldr	r0, [pc, #332]	@ (8008150 <_printf_i+0x238>)
 8008004:	6033      	str	r3, [r6, #0]
 8008006:	bf14      	ite	ne
 8008008:	230a      	movne	r3, #10
 800800a:	2308      	moveq	r3, #8
 800800c:	2100      	movs	r1, #0
 800800e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008012:	6866      	ldr	r6, [r4, #4]
 8008014:	60a6      	str	r6, [r4, #8]
 8008016:	2e00      	cmp	r6, #0
 8008018:	bfa2      	ittt	ge
 800801a:	6821      	ldrge	r1, [r4, #0]
 800801c:	f021 0104 	bicge.w	r1, r1, #4
 8008020:	6021      	strge	r1, [r4, #0]
 8008022:	b90d      	cbnz	r5, 8008028 <_printf_i+0x110>
 8008024:	2e00      	cmp	r6, #0
 8008026:	d04b      	beq.n	80080c0 <_printf_i+0x1a8>
 8008028:	4616      	mov	r6, r2
 800802a:	fbb5 f1f3 	udiv	r1, r5, r3
 800802e:	fb03 5711 	mls	r7, r3, r1, r5
 8008032:	5dc7      	ldrb	r7, [r0, r7]
 8008034:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008038:	462f      	mov	r7, r5
 800803a:	42bb      	cmp	r3, r7
 800803c:	460d      	mov	r5, r1
 800803e:	d9f4      	bls.n	800802a <_printf_i+0x112>
 8008040:	2b08      	cmp	r3, #8
 8008042:	d10b      	bne.n	800805c <_printf_i+0x144>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	07df      	lsls	r7, r3, #31
 8008048:	d508      	bpl.n	800805c <_printf_i+0x144>
 800804a:	6923      	ldr	r3, [r4, #16]
 800804c:	6861      	ldr	r1, [r4, #4]
 800804e:	4299      	cmp	r1, r3
 8008050:	bfde      	ittt	le
 8008052:	2330      	movle	r3, #48	@ 0x30
 8008054:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008058:	f106 36ff 	addle.w	r6, r6, #4294967295
 800805c:	1b92      	subs	r2, r2, r6
 800805e:	6122      	str	r2, [r4, #16]
 8008060:	f8cd a000 	str.w	sl, [sp]
 8008064:	464b      	mov	r3, r9
 8008066:	aa03      	add	r2, sp, #12
 8008068:	4621      	mov	r1, r4
 800806a:	4640      	mov	r0, r8
 800806c:	f7ff fee6 	bl	8007e3c <_printf_common>
 8008070:	3001      	adds	r0, #1
 8008072:	d14a      	bne.n	800810a <_printf_i+0x1f2>
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
 8008078:	b004      	add	sp, #16
 800807a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	f043 0320 	orr.w	r3, r3, #32
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	4833      	ldr	r0, [pc, #204]	@ (8008154 <_printf_i+0x23c>)
 8008088:	2778      	movs	r7, #120	@ 0x78
 800808a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	6831      	ldr	r1, [r6, #0]
 8008092:	061f      	lsls	r7, r3, #24
 8008094:	f851 5b04 	ldr.w	r5, [r1], #4
 8008098:	d402      	bmi.n	80080a0 <_printf_i+0x188>
 800809a:	065f      	lsls	r7, r3, #25
 800809c:	bf48      	it	mi
 800809e:	b2ad      	uxthmi	r5, r5
 80080a0:	6031      	str	r1, [r6, #0]
 80080a2:	07d9      	lsls	r1, r3, #31
 80080a4:	bf44      	itt	mi
 80080a6:	f043 0320 	orrmi.w	r3, r3, #32
 80080aa:	6023      	strmi	r3, [r4, #0]
 80080ac:	b11d      	cbz	r5, 80080b6 <_printf_i+0x19e>
 80080ae:	2310      	movs	r3, #16
 80080b0:	e7ac      	b.n	800800c <_printf_i+0xf4>
 80080b2:	4827      	ldr	r0, [pc, #156]	@ (8008150 <_printf_i+0x238>)
 80080b4:	e7e9      	b.n	800808a <_printf_i+0x172>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	f023 0320 	bic.w	r3, r3, #32
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	e7f6      	b.n	80080ae <_printf_i+0x196>
 80080c0:	4616      	mov	r6, r2
 80080c2:	e7bd      	b.n	8008040 <_printf_i+0x128>
 80080c4:	6833      	ldr	r3, [r6, #0]
 80080c6:	6825      	ldr	r5, [r4, #0]
 80080c8:	6961      	ldr	r1, [r4, #20]
 80080ca:	1d18      	adds	r0, r3, #4
 80080cc:	6030      	str	r0, [r6, #0]
 80080ce:	062e      	lsls	r6, r5, #24
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	d501      	bpl.n	80080d8 <_printf_i+0x1c0>
 80080d4:	6019      	str	r1, [r3, #0]
 80080d6:	e002      	b.n	80080de <_printf_i+0x1c6>
 80080d8:	0668      	lsls	r0, r5, #25
 80080da:	d5fb      	bpl.n	80080d4 <_printf_i+0x1bc>
 80080dc:	8019      	strh	r1, [r3, #0]
 80080de:	2300      	movs	r3, #0
 80080e0:	6123      	str	r3, [r4, #16]
 80080e2:	4616      	mov	r6, r2
 80080e4:	e7bc      	b.n	8008060 <_printf_i+0x148>
 80080e6:	6833      	ldr	r3, [r6, #0]
 80080e8:	1d1a      	adds	r2, r3, #4
 80080ea:	6032      	str	r2, [r6, #0]
 80080ec:	681e      	ldr	r6, [r3, #0]
 80080ee:	6862      	ldr	r2, [r4, #4]
 80080f0:	2100      	movs	r1, #0
 80080f2:	4630      	mov	r0, r6
 80080f4:	f7f8 f86c 	bl	80001d0 <memchr>
 80080f8:	b108      	cbz	r0, 80080fe <_printf_i+0x1e6>
 80080fa:	1b80      	subs	r0, r0, r6
 80080fc:	6060      	str	r0, [r4, #4]
 80080fe:	6863      	ldr	r3, [r4, #4]
 8008100:	6123      	str	r3, [r4, #16]
 8008102:	2300      	movs	r3, #0
 8008104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008108:	e7aa      	b.n	8008060 <_printf_i+0x148>
 800810a:	6923      	ldr	r3, [r4, #16]
 800810c:	4632      	mov	r2, r6
 800810e:	4649      	mov	r1, r9
 8008110:	4640      	mov	r0, r8
 8008112:	47d0      	blx	sl
 8008114:	3001      	adds	r0, #1
 8008116:	d0ad      	beq.n	8008074 <_printf_i+0x15c>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	079b      	lsls	r3, r3, #30
 800811c:	d413      	bmi.n	8008146 <_printf_i+0x22e>
 800811e:	68e0      	ldr	r0, [r4, #12]
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	4298      	cmp	r0, r3
 8008124:	bfb8      	it	lt
 8008126:	4618      	movlt	r0, r3
 8008128:	e7a6      	b.n	8008078 <_printf_i+0x160>
 800812a:	2301      	movs	r3, #1
 800812c:	4632      	mov	r2, r6
 800812e:	4649      	mov	r1, r9
 8008130:	4640      	mov	r0, r8
 8008132:	47d0      	blx	sl
 8008134:	3001      	adds	r0, #1
 8008136:	d09d      	beq.n	8008074 <_printf_i+0x15c>
 8008138:	3501      	adds	r5, #1
 800813a:	68e3      	ldr	r3, [r4, #12]
 800813c:	9903      	ldr	r1, [sp, #12]
 800813e:	1a5b      	subs	r3, r3, r1
 8008140:	42ab      	cmp	r3, r5
 8008142:	dcf2      	bgt.n	800812a <_printf_i+0x212>
 8008144:	e7eb      	b.n	800811e <_printf_i+0x206>
 8008146:	2500      	movs	r5, #0
 8008148:	f104 0619 	add.w	r6, r4, #25
 800814c:	e7f5      	b.n	800813a <_printf_i+0x222>
 800814e:	bf00      	nop
 8008150:	08008491 	.word	0x08008491
 8008154:	080084a2 	.word	0x080084a2

08008158 <__sflush_r>:
 8008158:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800815c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008160:	0716      	lsls	r6, r2, #28
 8008162:	4605      	mov	r5, r0
 8008164:	460c      	mov	r4, r1
 8008166:	d454      	bmi.n	8008212 <__sflush_r+0xba>
 8008168:	684b      	ldr	r3, [r1, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	dc02      	bgt.n	8008174 <__sflush_r+0x1c>
 800816e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	dd48      	ble.n	8008206 <__sflush_r+0xae>
 8008174:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008176:	2e00      	cmp	r6, #0
 8008178:	d045      	beq.n	8008206 <__sflush_r+0xae>
 800817a:	2300      	movs	r3, #0
 800817c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008180:	682f      	ldr	r7, [r5, #0]
 8008182:	6a21      	ldr	r1, [r4, #32]
 8008184:	602b      	str	r3, [r5, #0]
 8008186:	d030      	beq.n	80081ea <__sflush_r+0x92>
 8008188:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	0759      	lsls	r1, r3, #29
 800818e:	d505      	bpl.n	800819c <__sflush_r+0x44>
 8008190:	6863      	ldr	r3, [r4, #4]
 8008192:	1ad2      	subs	r2, r2, r3
 8008194:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008196:	b10b      	cbz	r3, 800819c <__sflush_r+0x44>
 8008198:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800819a:	1ad2      	subs	r2, r2, r3
 800819c:	2300      	movs	r3, #0
 800819e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081a0:	6a21      	ldr	r1, [r4, #32]
 80081a2:	4628      	mov	r0, r5
 80081a4:	47b0      	blx	r6
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	d106      	bne.n	80081ba <__sflush_r+0x62>
 80081ac:	6829      	ldr	r1, [r5, #0]
 80081ae:	291d      	cmp	r1, #29
 80081b0:	d82b      	bhi.n	800820a <__sflush_r+0xb2>
 80081b2:	4a2a      	ldr	r2, [pc, #168]	@ (800825c <__sflush_r+0x104>)
 80081b4:	410a      	asrs	r2, r1
 80081b6:	07d6      	lsls	r6, r2, #31
 80081b8:	d427      	bmi.n	800820a <__sflush_r+0xb2>
 80081ba:	2200      	movs	r2, #0
 80081bc:	6062      	str	r2, [r4, #4]
 80081be:	04d9      	lsls	r1, r3, #19
 80081c0:	6922      	ldr	r2, [r4, #16]
 80081c2:	6022      	str	r2, [r4, #0]
 80081c4:	d504      	bpl.n	80081d0 <__sflush_r+0x78>
 80081c6:	1c42      	adds	r2, r0, #1
 80081c8:	d101      	bne.n	80081ce <__sflush_r+0x76>
 80081ca:	682b      	ldr	r3, [r5, #0]
 80081cc:	b903      	cbnz	r3, 80081d0 <__sflush_r+0x78>
 80081ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80081d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081d2:	602f      	str	r7, [r5, #0]
 80081d4:	b1b9      	cbz	r1, 8008206 <__sflush_r+0xae>
 80081d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081da:	4299      	cmp	r1, r3
 80081dc:	d002      	beq.n	80081e4 <__sflush_r+0x8c>
 80081de:	4628      	mov	r0, r5
 80081e0:	f7ff fbf2 	bl	80079c8 <_free_r>
 80081e4:	2300      	movs	r3, #0
 80081e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80081e8:	e00d      	b.n	8008206 <__sflush_r+0xae>
 80081ea:	2301      	movs	r3, #1
 80081ec:	4628      	mov	r0, r5
 80081ee:	47b0      	blx	r6
 80081f0:	4602      	mov	r2, r0
 80081f2:	1c50      	adds	r0, r2, #1
 80081f4:	d1c9      	bne.n	800818a <__sflush_r+0x32>
 80081f6:	682b      	ldr	r3, [r5, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0c6      	beq.n	800818a <__sflush_r+0x32>
 80081fc:	2b1d      	cmp	r3, #29
 80081fe:	d001      	beq.n	8008204 <__sflush_r+0xac>
 8008200:	2b16      	cmp	r3, #22
 8008202:	d11e      	bne.n	8008242 <__sflush_r+0xea>
 8008204:	602f      	str	r7, [r5, #0]
 8008206:	2000      	movs	r0, #0
 8008208:	e022      	b.n	8008250 <__sflush_r+0xf8>
 800820a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800820e:	b21b      	sxth	r3, r3
 8008210:	e01b      	b.n	800824a <__sflush_r+0xf2>
 8008212:	690f      	ldr	r7, [r1, #16]
 8008214:	2f00      	cmp	r7, #0
 8008216:	d0f6      	beq.n	8008206 <__sflush_r+0xae>
 8008218:	0793      	lsls	r3, r2, #30
 800821a:	680e      	ldr	r6, [r1, #0]
 800821c:	bf08      	it	eq
 800821e:	694b      	ldreq	r3, [r1, #20]
 8008220:	600f      	str	r7, [r1, #0]
 8008222:	bf18      	it	ne
 8008224:	2300      	movne	r3, #0
 8008226:	eba6 0807 	sub.w	r8, r6, r7
 800822a:	608b      	str	r3, [r1, #8]
 800822c:	f1b8 0f00 	cmp.w	r8, #0
 8008230:	dde9      	ble.n	8008206 <__sflush_r+0xae>
 8008232:	6a21      	ldr	r1, [r4, #32]
 8008234:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008236:	4643      	mov	r3, r8
 8008238:	463a      	mov	r2, r7
 800823a:	4628      	mov	r0, r5
 800823c:	47b0      	blx	r6
 800823e:	2800      	cmp	r0, #0
 8008240:	dc08      	bgt.n	8008254 <__sflush_r+0xfc>
 8008242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800824a:	81a3      	strh	r3, [r4, #12]
 800824c:	f04f 30ff 	mov.w	r0, #4294967295
 8008250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008254:	4407      	add	r7, r0
 8008256:	eba8 0800 	sub.w	r8, r8, r0
 800825a:	e7e7      	b.n	800822c <__sflush_r+0xd4>
 800825c:	dfbffffe 	.word	0xdfbffffe

08008260 <_fflush_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	690b      	ldr	r3, [r1, #16]
 8008264:	4605      	mov	r5, r0
 8008266:	460c      	mov	r4, r1
 8008268:	b913      	cbnz	r3, 8008270 <_fflush_r+0x10>
 800826a:	2500      	movs	r5, #0
 800826c:	4628      	mov	r0, r5
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	b118      	cbz	r0, 800827a <_fflush_r+0x1a>
 8008272:	6a03      	ldr	r3, [r0, #32]
 8008274:	b90b      	cbnz	r3, 800827a <_fflush_r+0x1a>
 8008276:	f7ff f9ad 	bl	80075d4 <__sinit>
 800827a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0f3      	beq.n	800826a <_fflush_r+0xa>
 8008282:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008284:	07d0      	lsls	r0, r2, #31
 8008286:	d404      	bmi.n	8008292 <_fflush_r+0x32>
 8008288:	0599      	lsls	r1, r3, #22
 800828a:	d402      	bmi.n	8008292 <_fflush_r+0x32>
 800828c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800828e:	f7ff fb98 	bl	80079c2 <__retarget_lock_acquire_recursive>
 8008292:	4628      	mov	r0, r5
 8008294:	4621      	mov	r1, r4
 8008296:	f7ff ff5f 	bl	8008158 <__sflush_r>
 800829a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800829c:	07da      	lsls	r2, r3, #31
 800829e:	4605      	mov	r5, r0
 80082a0:	d4e4      	bmi.n	800826c <_fflush_r+0xc>
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	059b      	lsls	r3, r3, #22
 80082a6:	d4e1      	bmi.n	800826c <_fflush_r+0xc>
 80082a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082aa:	f7ff fb8b 	bl	80079c4 <__retarget_lock_release_recursive>
 80082ae:	e7dd      	b.n	800826c <_fflush_r+0xc>

080082b0 <__swhatbuf_r>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	460c      	mov	r4, r1
 80082b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b8:	2900      	cmp	r1, #0
 80082ba:	b096      	sub	sp, #88	@ 0x58
 80082bc:	4615      	mov	r5, r2
 80082be:	461e      	mov	r6, r3
 80082c0:	da0d      	bge.n	80082de <__swhatbuf_r+0x2e>
 80082c2:	89a3      	ldrh	r3, [r4, #12]
 80082c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082c8:	f04f 0100 	mov.w	r1, #0
 80082cc:	bf14      	ite	ne
 80082ce:	2340      	movne	r3, #64	@ 0x40
 80082d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082d4:	2000      	movs	r0, #0
 80082d6:	6031      	str	r1, [r6, #0]
 80082d8:	602b      	str	r3, [r5, #0]
 80082da:	b016      	add	sp, #88	@ 0x58
 80082dc:	bd70      	pop	{r4, r5, r6, pc}
 80082de:	466a      	mov	r2, sp
 80082e0:	f000 f848 	bl	8008374 <_fstat_r>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	dbec      	blt.n	80082c2 <__swhatbuf_r+0x12>
 80082e8:	9901      	ldr	r1, [sp, #4]
 80082ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082f2:	4259      	negs	r1, r3
 80082f4:	4159      	adcs	r1, r3
 80082f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082fa:	e7eb      	b.n	80082d4 <__swhatbuf_r+0x24>

080082fc <__smakebuf_r>:
 80082fc:	898b      	ldrh	r3, [r1, #12]
 80082fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008300:	079d      	lsls	r5, r3, #30
 8008302:	4606      	mov	r6, r0
 8008304:	460c      	mov	r4, r1
 8008306:	d507      	bpl.n	8008318 <__smakebuf_r+0x1c>
 8008308:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	6123      	str	r3, [r4, #16]
 8008310:	2301      	movs	r3, #1
 8008312:	6163      	str	r3, [r4, #20]
 8008314:	b003      	add	sp, #12
 8008316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008318:	ab01      	add	r3, sp, #4
 800831a:	466a      	mov	r2, sp
 800831c:	f7ff ffc8 	bl	80082b0 <__swhatbuf_r>
 8008320:	9f00      	ldr	r7, [sp, #0]
 8008322:	4605      	mov	r5, r0
 8008324:	4639      	mov	r1, r7
 8008326:	4630      	mov	r0, r6
 8008328:	f7ff fbba 	bl	8007aa0 <_malloc_r>
 800832c:	b948      	cbnz	r0, 8008342 <__smakebuf_r+0x46>
 800832e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008332:	059a      	lsls	r2, r3, #22
 8008334:	d4ee      	bmi.n	8008314 <__smakebuf_r+0x18>
 8008336:	f023 0303 	bic.w	r3, r3, #3
 800833a:	f043 0302 	orr.w	r3, r3, #2
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	e7e2      	b.n	8008308 <__smakebuf_r+0xc>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	6020      	str	r0, [r4, #0]
 8008346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800834a:	81a3      	strh	r3, [r4, #12]
 800834c:	9b01      	ldr	r3, [sp, #4]
 800834e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008352:	b15b      	cbz	r3, 800836c <__smakebuf_r+0x70>
 8008354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008358:	4630      	mov	r0, r6
 800835a:	f000 f81d 	bl	8008398 <_isatty_r>
 800835e:	b128      	cbz	r0, 800836c <__smakebuf_r+0x70>
 8008360:	89a3      	ldrh	r3, [r4, #12]
 8008362:	f023 0303 	bic.w	r3, r3, #3
 8008366:	f043 0301 	orr.w	r3, r3, #1
 800836a:	81a3      	strh	r3, [r4, #12]
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	431d      	orrs	r5, r3
 8008370:	81a5      	strh	r5, [r4, #12]
 8008372:	e7cf      	b.n	8008314 <__smakebuf_r+0x18>

08008374 <_fstat_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4d07      	ldr	r5, [pc, #28]	@ (8008394 <_fstat_r+0x20>)
 8008378:	2300      	movs	r3, #0
 800837a:	4604      	mov	r4, r0
 800837c:	4608      	mov	r0, r1
 800837e:	4611      	mov	r1, r2
 8008380:	602b      	str	r3, [r5, #0]
 8008382:	f7f9 f9b3 	bl	80016ec <_fstat>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	d102      	bne.n	8008390 <_fstat_r+0x1c>
 800838a:	682b      	ldr	r3, [r5, #0]
 800838c:	b103      	cbz	r3, 8008390 <_fstat_r+0x1c>
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	bd38      	pop	{r3, r4, r5, pc}
 8008392:	bf00      	nop
 8008394:	2000109c 	.word	0x2000109c

08008398 <_isatty_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4d06      	ldr	r5, [pc, #24]	@ (80083b4 <_isatty_r+0x1c>)
 800839c:	2300      	movs	r3, #0
 800839e:	4604      	mov	r4, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	602b      	str	r3, [r5, #0]
 80083a4:	f7f9 f9b2 	bl	800170c <_isatty>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_isatty_r+0x1a>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_isatty_r+0x1a>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	2000109c 	.word	0x2000109c

080083b8 <_sbrk_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d06      	ldr	r5, [pc, #24]	@ (80083d4 <_sbrk_r+0x1c>)
 80083bc:	2300      	movs	r3, #0
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7f9 f9ba 	bl	800173c <_sbrk>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_sbrk_r+0x1a>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_sbrk_r+0x1a>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	2000109c 	.word	0x2000109c

080083d8 <_init>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	bf00      	nop
 80083dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083de:	bc08      	pop	{r3}
 80083e0:	469e      	mov	lr, r3
 80083e2:	4770      	bx	lr

080083e4 <_fini>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	bf00      	nop
 80083e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ea:	bc08      	pop	{r3}
 80083ec:	469e      	mov	lr, r3
 80083ee:	4770      	bx	lr
