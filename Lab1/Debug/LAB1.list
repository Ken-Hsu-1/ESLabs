
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08007ea4  08007ea4  00008ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd4  08007fd4  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd4  08007fd4  00008fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fdc  08007fdc  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fdc  08007fdc  00008fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fe0  08007fe0  00008fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007fe4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020d8  20000010  08007ff4  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020e8  08007ff4  000090e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025a79  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004848  00000000  00000000  0002eab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f8  00000000  00000000  00033308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b53  00000000  00000000  00035600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049f2  00000000  00000000  00037153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000278bf  00000000  00000000  0003bb45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108222  00000000  00000000  00063404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b626  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097cc  00000000  00000000  0016b66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00174e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e8c 	.word	0x08007e8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007e8c 	.word	0x08007e8c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 ffa5 	bl	8001412 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f858 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fa5a 	bl	8000984 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d0:	f000 f8b6 	bl	8000640 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d4:	f000 f8ec 	bl	80006b0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f92a 	bl	8000730 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004dc:	f000 f94e 	bl	800077c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f9c2 	bl	8000868 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004e4:	f000 f9f0 	bl	80008c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004e8:	f000 fa1e 	bl	8000928 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 80004ec:	f000 f984 	bl	80007f8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f004 fcbc 	bl	8004e6c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of blinking */
  blinkingHandle = osMutexNew(&blinking_attributes);
 80004f4:	4814      	ldr	r0, [pc, #80]	@ (8000548 <main+0x88>)
 80004f6:	f004 fdb0 	bl	800505a <osMutexNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a13      	ldr	r2, [pc, #76]	@ (800054c <main+0x8c>)
 80004fe:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 0, &myCountingSem01_attributes);
 8000500:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <main+0x90>)
 8000502:	2100      	movs	r1, #0
 8000504:	2002      	movs	r0, #2
 8000506:	f004 fe2e 	bl	8005166 <osSemaphoreNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a11      	ldr	r2, [pc, #68]	@ (8000554 <main+0x94>)
 800050e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000510:	4a11      	ldr	r2, [pc, #68]	@ (8000558 <main+0x98>)
 8000512:	2100      	movs	r1, #0
 8000514:	4811      	ldr	r0, [pc, #68]	@ (800055c <main+0x9c>)
 8000516:	f004 fcf3 	bl	8004f00 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a10      	ldr	r2, [pc, #64]	@ (8000560 <main+0xa0>)
 800051e:	6013      	str	r3, [r2, #0]

  /* creation of timerBlink */
  timerBlinkHandle = osThreadNew(StartTimerBlink, NULL, &timerBlink_attributes);
 8000520:	4a10      	ldr	r2, [pc, #64]	@ (8000564 <main+0xa4>)
 8000522:	2100      	movs	r1, #0
 8000524:	4810      	ldr	r0, [pc, #64]	@ (8000568 <main+0xa8>)
 8000526:	f004 fceb 	bl	8004f00 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a0f      	ldr	r2, [pc, #60]	@ (800056c <main+0xac>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of shortPressBlink */
  shortPressBlinkHandle = osThreadNew(StartShortPressBlink, NULL, &shortPressBlink_attributes);
 8000530:	4a0f      	ldr	r2, [pc, #60]	@ (8000570 <main+0xb0>)
 8000532:	2100      	movs	r1, #0
 8000534:	480f      	ldr	r0, [pc, #60]	@ (8000574 <main+0xb4>)
 8000536:	f004 fce3 	bl	8004f00 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0e      	ldr	r2, [pc, #56]	@ (8000578 <main+0xb8>)
 800053e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f004 fcb8 	bl	8004eb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x84>
 8000548:	08007f6c 	.word	0x08007f6c
 800054c:	200007ac 	.word	0x200007ac
 8000550:	08007f7c 	.word	0x08007f7c
 8000554:	200007b0 	.word	0x200007b0
 8000558:	08007f00 	.word	0x08007f00
 800055c:	08000d19 	.word	0x08000d19
 8000560:	200007a0 	.word	0x200007a0
 8000564:	08007f24 	.word	0x08007f24
 8000568:	08000d29 	.word	0x08000d29
 800056c:	200007a4 	.word	0x200007a4
 8000570:	08007f48 	.word	0x08007f48
 8000574:	08000d39 	.word	0x08000d39
 8000578:	200007a8 	.word	0x200007a8

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b096      	sub	sp, #88	@ 0x58
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2244      	movs	r2, #68	@ 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f007 fc44 	bl	8007e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005a2:	f001 fe4b 	bl	800223c <HAL_PWREx_ControlVoltageScaling>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ac:	f000 fbcc 	bl	8000d48 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b0:	f001 fe26 	bl	8002200 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b4:	4b21      	ldr	r3, [pc, #132]	@ (800063c <SystemClock_Config+0xc0>)
 80005b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005ba:	4a20      	ldr	r2, [pc, #128]	@ (800063c <SystemClock_Config+0xc0>)
 80005bc:	f023 0318 	bic.w	r3, r3, #24
 80005c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005c4:	2314      	movs	r3, #20
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d4:	2360      	movs	r3, #96	@ 0x60
 80005d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005dc:	2301      	movs	r3, #1
 80005de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005e0:	2301      	movs	r3, #1
 80005e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005e4:	2328      	movs	r3, #40	@ 0x28
 80005e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 ff41 	bl	8002480 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000604:	f000 fba0 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2303      	movs	r3, #3
 800060e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	2104      	movs	r1, #4
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fb09 	bl	8002c38 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800062c:	f000 fb8c 	bl	8000d48 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000630:	f003 f810 	bl	8003654 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000634:	bf00      	nop
 8000636:	3758      	adds	r7, #88	@ 0x58
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000

08000640 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000644:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 8000646:	4a19      	ldr	r2, [pc, #100]	@ (80006ac <MX_DFSDM1_Init+0x6c>)
 8000648:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800064a:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 800064c:	2201      	movs	r2, #1
 800064e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000650:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000656:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 8000658:	2202      	movs	r2, #2
 800065a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 800066a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800066e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000670:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 8000678:	2204      	movs	r2, #4
 800067a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800067c:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 8000684:	2201      	movs	r2, #1
 8000686:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 800068a:	2200      	movs	r2, #0
 800068c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 8000690:	2200      	movs	r2, #0
 8000692:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000694:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <MX_DFSDM1_Init+0x68>)
 8000696:	f001 f867 	bl	8001768 <HAL_DFSDM_ChannelInit>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006a0:	f000 fb52 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000002c 	.word	0x2000002c
 80006ac:	40016020 	.word	0x40016020

080006b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000724 <MX_I2C2_Init+0x74>)
 80006b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000728 <MX_I2C2_Init+0x78>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <MX_I2C2_Init+0x74>)
 80006bc:	4a1b      	ldr	r2, [pc, #108]	@ (800072c <MX_I2C2_Init+0x7c>)
 80006be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_I2C2_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_I2C2_Init+0x74>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_I2C2_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_I2C2_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_I2C2_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_I2C2_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_I2C2_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006ea:	480e      	ldr	r0, [pc, #56]	@ (8000724 <MX_I2C2_Init+0x74>)
 80006ec:	f001 fb22 	bl	8001d34 <HAL_I2C_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006f6:	f000 fb27 	bl	8000d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006fa:	2100      	movs	r1, #0
 80006fc:	4809      	ldr	r0, [pc, #36]	@ (8000724 <MX_I2C2_Init+0x74>)
 80006fe:	f001 fbb4 	bl	8001e6a <HAL_I2CEx_ConfigAnalogFilter>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000708:	f000 fb1e 	bl	8000d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800070c:	2100      	movs	r1, #0
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_I2C2_Init+0x74>)
 8000710:	f001 fbf6 	bl	8001f00 <HAL_I2CEx_ConfigDigitalFilter>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800071a:	f000 fb15 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000064 	.word	0x20000064
 8000728:	40005800 	.word	0x40005800
 800072c:	10d19ce4 	.word	0x10d19ce4

08000730 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_QUADSPI_Init+0x44>)
 8000736:	4a10      	ldr	r2, [pc, #64]	@ (8000778 <MX_QUADSPI_Init+0x48>)
 8000738:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_QUADSPI_Init+0x44>)
 800073c:	2202      	movs	r2, #2
 800073e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_QUADSPI_Init+0x44>)
 8000742:	2204      	movs	r2, #4
 8000744:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_QUADSPI_Init+0x44>)
 8000748:	2210      	movs	r2, #16
 800074a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_QUADSPI_Init+0x44>)
 800074e:	2217      	movs	r2, #23
 8000750:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_QUADSPI_Init+0x44>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_QUADSPI_Init+0x44>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_QUADSPI_Init+0x44>)
 8000760:	f001 fdd2 	bl	8002308 <HAL_QSPI_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800076a:	f000 faed 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000b8 	.word	0x200000b8
 8000778:	a0001000 	.word	0xa0001000

0800077c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_SPI3_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <MX_SPI3_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_SPI3_Init+0x74>)
 8000788:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800078c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_SPI3_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000794:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_SPI3_Init+0x74>)
 8000796:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800079a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079c:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_SPI3_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a2:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <MX_SPI3_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_SPI3_Init+0x74>)
 80007aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_SPI3_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_SPI3_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_SPI3_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_SPI3_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_SPI3_Init+0x74>)
 80007ca:	2207      	movs	r2, #7
 80007cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_SPI3_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_SPI3_Init+0x74>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_SPI3_Init+0x74>)
 80007dc:	f003 f91c 	bl	8003a18 <HAL_SPI_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 faaf 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000fc 	.word	0x200000fc
 80007f4:	40003c00 	.word	0x40003c00

080007f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000808:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_TIM6_Init+0x68>)
 800080a:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <MX_TIM6_Init+0x6c>)
 800080c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4999;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_TIM6_Init+0x68>)
 8000810:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000814:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_TIM6_Init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 15999;
 800081c:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <MX_TIM6_Init+0x68>)
 800081e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000822:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000824:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_TIM6_Init+0x68>)
 8000826:	2280      	movs	r2, #128	@ 0x80
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800082a:	480d      	ldr	r0, [pc, #52]	@ (8000860 <MX_TIM6_Init+0x68>)
 800082c:	f003 f997 	bl	8003b5e <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000836:	f000 fa87 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	@ (8000860 <MX_TIM6_Init+0x68>)
 8000848:	f003 fa86 	bl	8003d58 <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000852:	f000 fa79 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000160 	.word	0x20000160
 8000864:	40001000 	.word	0x40001000

08000868 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800086c:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_USART1_UART_Init+0x58>)
 800086e:	4a15      	ldr	r2, [pc, #84]	@ (80008c4 <MX_USART1_UART_Init+0x5c>)
 8000870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000872:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <MX_USART1_UART_Init+0x58>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_USART1_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_USART1_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_USART1_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_USART1_UART_Init+0x58>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <MX_USART1_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_USART1_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <MX_USART1_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_USART1_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_USART1_UART_Init+0x58>)
 80008ac:	f003 fadc 	bl	8003e68 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 fa47 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200001ac 	.word	0x200001ac
 80008c4:	40013800 	.word	0x40013800

080008c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	@ (8000924 <MX_USART3_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 800090c:	f003 faac 	bl	8003e68 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 fa17 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000234 	.word	0x20000234
 8000924:	40004800 	.word	0x40004800

08000928 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000932:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2206      	movs	r2, #6
 8000938:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2202      	movs	r2, #2
 800093e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2202      	movs	r2, #2
 8000944:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096c:	f001 fb14 	bl	8001f98 <HAL_PCD_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 f9e7 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200002bc 	.word	0x200002bc

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099a:	4bbd      	ldr	r3, [pc, #756]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	4abc      	ldr	r2, [pc, #752]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a6:	4bba      	ldr	r3, [pc, #744]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4bb7      	ldr	r3, [pc, #732]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	4ab6      	ldr	r2, [pc, #728]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009be:	4bb4      	ldr	r3, [pc, #720]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4bb1      	ldr	r3, [pc, #708]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	4ab0      	ldr	r2, [pc, #704]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d6:	4bae      	ldr	r3, [pc, #696]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4bab      	ldr	r3, [pc, #684]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	4aaa      	ldr	r2, [pc, #680]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ee:	4ba8      	ldr	r3, [pc, #672]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	4ba5      	ldr	r3, [pc, #660]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	4aa4      	ldr	r2, [pc, #656]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a06:	4ba2      	ldr	r3, [pc, #648]	@ (8000c90 <MX_GPIO_Init+0x30c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000a18:	489e      	ldr	r0, [pc, #632]	@ (8000c94 <MX_GPIO_Init+0x310>)
 8000a1a:	f001 f95b 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a28:	f001 f954 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000a32:	4899      	ldr	r0, [pc, #612]	@ (8000c98 <MX_GPIO_Init+0x314>)
 8000a34:	f001 f94e 	bl	8001cd4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000a3e:	4897      	ldr	r0, [pc, #604]	@ (8000c9c <MX_GPIO_Init+0x318>)
 8000a40:	f001 f948 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a4a:	4894      	ldr	r0, [pc, #592]	@ (8000c9c <MX_GPIO_Init+0x318>)
 8000a4c:	f001 f942 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000a56:	4892      	ldr	r0, [pc, #584]	@ (8000ca0 <MX_GPIO_Init+0x31c>)
 8000a58:	f001 f93c 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2120      	movs	r1, #32
 8000a60:	488d      	ldr	r0, [pc, #564]	@ (8000c98 <MX_GPIO_Init+0x314>)
 8000a62:	f001 f937 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2101      	movs	r1, #1
 8000a6a:	488a      	ldr	r0, [pc, #552]	@ (8000c94 <MX_GPIO_Init+0x310>)
 8000a6c:	f001 f932 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a70:	f240 1315 	movw	r3, #277	@ 0x115
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4882      	ldr	r0, [pc, #520]	@ (8000c94 <MX_GPIO_Init+0x310>)
 8000a8a:	f000 ff79 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a8e:	236a      	movs	r3, #106	@ 0x6a
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	487c      	ldr	r0, [pc, #496]	@ (8000c94 <MX_GPIO_Init+0x310>)
 8000aa4:	f000 ff6c 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4878      	ldr	r0, [pc, #480]	@ (8000ca0 <MX_GPIO_Init+0x31c>)
 8000ac0:	f000 ff5e 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ac4:	233f      	movs	r3, #63	@ 0x3f
 8000ac6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ac8:	230b      	movs	r3, #11
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4872      	ldr	r0, [pc, #456]	@ (8000ca0 <MX_GPIO_Init+0x31c>)
 8000ad8:	f000 ff52 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000adc:	2303      	movs	r3, #3
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000aec:	2308      	movs	r3, #8
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000afa:	f000 ff41 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000afe:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1a:	f000 ff31 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3c:	f000 ff20 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b40:	2310      	movs	r3, #16
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b44:	230b      	movs	r3, #11
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b56:	f000 ff13 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b5a:	23e0      	movs	r3, #224	@ 0xe0
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f000 ff02 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4841      	ldr	r0, [pc, #260]	@ (8000c98 <MX_GPIO_Init+0x314>)
 8000b92:	f000 fef5 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b96:	2302      	movs	r3, #2
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b9a:	230b      	movs	r3, #11
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	483b      	ldr	r0, [pc, #236]	@ (8000c98 <MX_GPIO_Init+0x314>)
 8000baa:	f000 fee9 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bae:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000bb2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4834      	ldr	r0, [pc, #208]	@ (8000c98 <MX_GPIO_Init+0x314>)
 8000bc8:	f000 feda 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000bcc:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000bd0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	482e      	ldr	r0, [pc, #184]	@ (8000c9c <MX_GPIO_Init+0x318>)
 8000be4:	f000 fecc 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000be8:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4826      	ldr	r0, [pc, #152]	@ (8000c9c <MX_GPIO_Init+0x318>)
 8000c02:	f000 febd 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c06:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4820      	ldr	r0, [pc, #128]	@ (8000ca0 <MX_GPIO_Init+0x31c>)
 8000c20:	f000 feae 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c24:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4819      	ldr	r0, [pc, #100]	@ (8000ca0 <MX_GPIO_Init+0x31c>)
 8000c3c:	f000 fea0 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c40:	2302      	movs	r3, #2
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c50:	2305      	movs	r3, #5
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4810      	ldr	r0, [pc, #64]	@ (8000c9c <MX_GPIO_Init+0x318>)
 8000c5c:	f000 fe90 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c60:	2378      	movs	r3, #120	@ 0x78
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c70:	2307      	movs	r3, #7
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4808      	ldr	r0, [pc, #32]	@ (8000c9c <MX_GPIO_Init+0x318>)
 8000c7c:	f000 fe80 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c80:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c86:	2312      	movs	r3, #18
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e00a      	b.n	8000ca4 <MX_GPIO_Init+0x320>
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000
 8000c94:	48001000 	.word	0x48001000
 8000c98:	48000400 	.word	0x48000400
 8000c9c:	48000c00 	.word	0x48000c00
 8000ca0:	48000800 	.word	0x48000800
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000caa:	2304      	movs	r3, #4
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480b      	ldr	r0, [pc, #44]	@ (8000ce4 <MX_GPIO_Init+0x360>)
 8000cb6:	f000 fe63 	bl	8001980 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2017      	movs	r0, #23
 8000cc0:	f000 fd1b 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cc4:	2017      	movs	r0, #23
 8000cc6:	f000 fd34 	bl	8001732 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2105      	movs	r1, #5
 8000cce:	2028      	movs	r0, #40	@ 0x28
 8000cd0:	f000 fd13 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cd4:	2028      	movs	r0, #40	@ 0x28
 8000cd6:	f000 fd2c 	bl	8001732 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	@ 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	48000400 	.word	0x48000400

08000ce8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cf8:	d106      	bne.n	8000d08 <HAL_GPIO_EXTI_Callback+0x20>
  {
  case GPIO_PIN_13:
	  HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d00:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d02:	f000 ffe7 	bl	8001cd4 <HAL_GPIO_WritePin>
	  break;
 8000d06:	e000      	b.n	8000d0a <HAL_GPIO_EXTI_Callback+0x22>
  default:
	  break;
 8000d08:	bf00      	nop
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	48000400 	.word	0x48000400

08000d18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f004 f97f 	bl	8005024 <osDelay>
 8000d26:	e7fb      	b.n	8000d20 <StartDefaultTask+0x8>

08000d28 <StartTimerBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimerBlink */
void StartTimerBlink(void *argument)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimerBlink */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f004 f977 	bl	8005024 <osDelay>
 8000d36:	e7fb      	b.n	8000d30 <StartTimerBlink+0x8>

08000d38 <StartShortPressBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShortPressBlink */
void StartShortPressBlink(void *argument)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShortPressBlink */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f004 f96f 	bl	8005024 <osDelay>
 8000d46:	e7fb      	b.n	8000d40 <StartShortPressBlink+0x8>

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <Error_Handler+0x8>

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5e:	4a10      	ldr	r2, [pc, #64]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d76:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	f06f 0001 	mvn.w	r0, #1
 8000d92:	f000 fcb2 	bl	80016fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0ac      	sub	sp, #176	@ 0xb0
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2288      	movs	r2, #136	@ 0x88
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f007 f827 	bl	8007e18 <memset>
  if(DFSDM1_Init == 0)
 8000dca:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d142      	bne.n	8000e58 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000dd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 f94c 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000dee:	f7ff ffab 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000df2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000df6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000df8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000dfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dfe:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e0a:	4b16      	ldr	r3, [pc, #88]	@ (8000e64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	4a15      	ldr	r2, [pc, #84]	@ (8000e64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e22:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000e26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e3c:	2306      	movs	r3, #6
 8000e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e42:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e46:	4619      	mov	r1, r3
 8000e48:	4807      	ldr	r0, [pc, #28]	@ (8000e68 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000e4a:	f000 fd99 	bl	8001980 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000e4e:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a02      	ldr	r2, [pc, #8]	@ (8000e60 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e56:	6013      	str	r3, [r2, #0]
  }

}
 8000e58:	bf00      	nop
 8000e5a:	37b0      	adds	r7, #176	@ 0xb0
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200007b4 	.word	0x200007b4
 8000e64:	40021000 	.word	0x40021000
 8000e68:	48001000 	.word	0x48001000

08000e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0ac      	sub	sp, #176	@ 0xb0
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2288      	movs	r2, #136	@ 0x88
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f006 ffc3 	bl	8007e18 <memset>
  if(hi2c->Instance==I2C2)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a21      	ldr	r2, [pc, #132]	@ (8000f1c <HAL_I2C_MspInit+0xb0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d13b      	bne.n	8000f14 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e9c:	2380      	movs	r3, #128	@ 0x80
 8000e9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f002 f8e9 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000eb4:	f7ff ff48 	bl	8000d48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebc:	4a18      	ldr	r2, [pc, #96]	@ (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec4:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000ed0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ed4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed8:	2312      	movs	r3, #18
 8000eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000eea:	2304      	movs	r3, #4
 8000eec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <HAL_I2C_MspInit+0xb8>)
 8000ef8:	f000 fd42 	bl	8001980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f00:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000f02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f06:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000f14:	bf00      	nop
 8000f16:	37b0      	adds	r7, #176	@ 0xb0
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40005800 	.word	0x40005800
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000400 	.word	0x48000400

08000f28 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a17      	ldr	r2, [pc, #92]	@ (8000fa4 <HAL_QSPI_MspInit+0x7c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d128      	bne.n	8000f9c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f4a:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <HAL_QSPI_MspInit+0x80>)
 8000f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f4e:	4a16      	ldr	r2, [pc, #88]	@ (8000fa8 <HAL_QSPI_MspInit+0x80>)
 8000f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f54:	6513      	str	r3, [r2, #80]	@ 0x50
 8000f56:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <HAL_QSPI_MspInit+0x80>)
 8000f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_QSPI_MspInit+0x80>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	4a10      	ldr	r2, [pc, #64]	@ (8000fa8 <HAL_QSPI_MspInit+0x80>)
 8000f68:	f043 0310 	orr.w	r3, r3, #16
 8000f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_QSPI_MspInit+0x80>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f7a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000f7e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <HAL_QSPI_MspInit+0x84>)
 8000f98:	f000 fcf2 	bl	8001980 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	@ 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	a0001000 	.word	0xa0001000
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48001000 	.word	0x48001000

08000fb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	@ (800102c <HAL_SPI_MspInit+0x7c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d128      	bne.n	8001024 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fd2:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <HAL_SPI_MspInit+0x80>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd6:	4a16      	ldr	r2, [pc, #88]	@ (8001030 <HAL_SPI_MspInit+0x80>)
 8000fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fde:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <HAL_SPI_MspInit+0x80>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <HAL_SPI_MspInit+0x80>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <HAL_SPI_MspInit+0x80>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_SPI_MspInit+0x80>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001002:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001014:	2306      	movs	r3, #6
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <HAL_SPI_MspInit+0x84>)
 8001020:	f000 fcae 	bl	8001980 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	@ 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40003c00 	.word	0x40003c00
 8001030:	40021000 	.word	0x40021000
 8001034:	48000800 	.word	0x48000800

08001038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <HAL_TIM_Base_MspInit+0x38>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d10b      	bne.n	8001062 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_TIM_Base_MspInit+0x3c>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104e:	4a09      	ldr	r2, [pc, #36]	@ (8001074 <HAL_TIM_Base_MspInit+0x3c>)
 8001050:	f043 0310 	orr.w	r3, r3, #16
 8001054:	6593      	str	r3, [r2, #88]	@ 0x58
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <HAL_TIM_Base_MspInit+0x3c>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40001000 	.word	0x40001000
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0ae      	sub	sp, #184	@ 0xb8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	2288      	movs	r2, #136	@ 0x88
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f006 febd 	bl	8007e18 <memset>
  if(huart->Instance==USART1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a42      	ldr	r2, [pc, #264]	@ (80011ac <HAL_UART_MspInit+0x134>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d13b      	bne.n	8001120 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010ac:	2300      	movs	r3, #0
 80010ae:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 ffe3 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010c0:	f7ff fe42 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c4:	4b3a      	ldr	r3, [pc, #232]	@ (80011b0 <HAL_UART_MspInit+0x138>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c8:	4a39      	ldr	r2, [pc, #228]	@ (80011b0 <HAL_UART_MspInit+0x138>)
 80010ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80010d0:	4b37      	ldr	r3, [pc, #220]	@ (80011b0 <HAL_UART_MspInit+0x138>)
 80010d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <HAL_UART_MspInit+0x138>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e0:	4a33      	ldr	r2, [pc, #204]	@ (80011b0 <HAL_UART_MspInit+0x138>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e8:	4b31      	ldr	r3, [pc, #196]	@ (80011b0 <HAL_UART_MspInit+0x138>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80010f4:	23c0      	movs	r3, #192	@ 0xc0
 80010f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800110c:	2307      	movs	r3, #7
 800110e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001116:	4619      	mov	r1, r3
 8001118:	4826      	ldr	r0, [pc, #152]	@ (80011b4 <HAL_UART_MspInit+0x13c>)
 800111a:	f000 fc31 	bl	8001980 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800111e:	e040      	b.n	80011a2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a24      	ldr	r2, [pc, #144]	@ (80011b8 <HAL_UART_MspInit+0x140>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d13b      	bne.n	80011a2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800112a:	2304      	movs	r3, #4
 800112c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800112e:	2300      	movs	r3, #0
 8001130:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4618      	mov	r0, r3
 8001138:	f001 ffa2 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001142:	f7ff fe01 	bl	8000d48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001146:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <HAL_UART_MspInit+0x138>)
 8001148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114a:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <HAL_UART_MspInit+0x138>)
 800114c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001150:	6593      	str	r3, [r2, #88]	@ 0x58
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <HAL_UART_MspInit+0x138>)
 8001154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001156:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <HAL_UART_MspInit+0x138>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	4a13      	ldr	r2, [pc, #76]	@ (80011b0 <HAL_UART_MspInit+0x138>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <HAL_UART_MspInit+0x138>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001176:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800117a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001190:	2307      	movs	r3, #7
 8001192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001196:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800119a:	4619      	mov	r1, r3
 800119c:	4807      	ldr	r0, [pc, #28]	@ (80011bc <HAL_UART_MspInit+0x144>)
 800119e:	f000 fbef 	bl	8001980 <HAL_GPIO_Init>
}
 80011a2:	bf00      	nop
 80011a4:	37b8      	adds	r7, #184	@ 0xb8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40013800 	.word	0x40013800
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000400 	.word	0x48000400
 80011b8:	40004800 	.word	0x40004800
 80011bc:	48000c00 	.word	0x48000c00

080011c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0ac      	sub	sp, #176	@ 0xb0
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2288      	movs	r2, #136	@ 0x88
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 fe19 	bl	8007e18 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011ee:	d17c      	bne.n	80012ea <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80011f6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80011fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80011fe:	2301      	movs	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001202:	2301      	movs	r3, #1
 8001204:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001206:	2318      	movs	r3, #24
 8001208:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800120a:	2307      	movs	r3, #7
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800120e:	2302      	movs	r3, #2
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001216:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800121a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4618      	mov	r0, r3
 8001222:	f001 ff2d 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800122c:	f7ff fd8c 	bl	8000d48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b30      	ldr	r3, [pc, #192]	@ (80012f4 <HAL_PCD_MspInit+0x134>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001234:	4a2f      	ldr	r2, [pc, #188]	@ (80012f4 <HAL_PCD_MspInit+0x134>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <HAL_PCD_MspInit+0x134>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001248:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800124c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001266:	f000 fb8b 	bl	8001980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800126a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800126e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001284:	230a      	movs	r3, #10
 8001286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001294:	f000 fb74 	bl	8001980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <HAL_PCD_MspInit+0x134>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129c:	4a15      	ldr	r2, [pc, #84]	@ (80012f4 <HAL_PCD_MspInit+0x134>)
 800129e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <HAL_PCD_MspInit+0x134>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <HAL_PCD_MspInit+0x134>)
 80012b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d114      	bne.n	80012e6 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012bc:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <HAL_PCD_MspInit+0x134>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c0:	4a0c      	ldr	r2, [pc, #48]	@ (80012f4 <HAL_PCD_MspInit+0x134>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c8:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_PCD_MspInit+0x134>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80012d4:	f001 f808 	bl	80022e8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_PCD_MspInit+0x134>)
 80012da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012dc:	4a05      	ldr	r2, [pc, #20]	@ (80012f4 <HAL_PCD_MspInit+0x134>)
 80012de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80012e4:	e001      	b.n	80012ea <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80012e6:	f000 ffff 	bl	80022e8 <HAL_PWREx_EnableVddUSB>
}
 80012ea:	bf00      	nop
 80012ec:	37b0      	adds	r7, #176	@ 0xb0
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <NMI_Handler+0x4>

08001300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <MemManage_Handler+0x4>

08001310 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <UsageFault_Handler+0x4>

08001320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001332:	f000 f8c3 	bl	80014bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001336:	f005 fcef 	bl	8006d18 <xTaskGetSchedulerState>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d001      	beq.n	8001344 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001340:	f006 faea 	bl	8007918 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800134c:	2020      	movs	r0, #32
 800134e:	f000 fcd9 	bl	8001d04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001352:	2040      	movs	r0, #64	@ 0x40
 8001354:	f000 fcd6 	bl	8001d04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001358:	2080      	movs	r0, #128	@ 0x80
 800135a:	f000 fcd3 	bl	8001d04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800135e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001362:	f000 fccf 	bl	8001d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}

0800136a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800136e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001372:	f000 fcc7 	bl	8001d04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001376:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800137a:	f000 fcc3 	bl	8001d04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800137e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001382:	f000 fcbf 	bl	8001d04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001386:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800138a:	f000 fcbb 	bl	8001d04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800138e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001392:	f000 fcb7 	bl	8001d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <SystemInit+0x20>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a6:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <SystemInit+0x20>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c4:	f7ff ffea 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c8:	480c      	ldr	r0, [pc, #48]	@ (80013fc <LoopForever+0x6>)
  ldr r1, =_edata
 80013ca:	490d      	ldr	r1, [pc, #52]	@ (8001400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <LoopForever+0xe>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e0:	4c0a      	ldr	r4, [pc, #40]	@ (800140c <LoopForever+0x16>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ee:	f006 fd1b 	bl	8007e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013f2:	f7ff f865 	bl	80004c0 <main>

080013f6 <LoopForever>:

LoopForever:
    b LoopForever
 80013f6:	e7fe      	b.n	80013f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001404:	08007fe4 	.word	0x08007fe4
  ldr r2, =_sbss
 8001408:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800140c:	200020e8 	.word	0x200020e8

08001410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC1_2_IRQHandler>

08001412 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f961 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001422:	200f      	movs	r0, #15
 8001424:	f000 f80e 	bl	8001444 <HAL_InitTick>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	e001      	b.n	8001438 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001434:	f7ff fc8e 	bl	8000d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001438:	79fb      	ldrb	r3, [r7, #7]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001450:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <HAL_InitTick+0x6c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d023      	beq.n	80014a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001458:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <HAL_InitTick+0x70>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <HAL_InitTick+0x6c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f96d 	bl	800174e <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10f      	bne.n	800149a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d809      	bhi.n	8001494 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f937 	bl	80016fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800148c:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_InitTick+0x74>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e007      	b.n	80014a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e004      	b.n	80014a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e001      	b.n	80014a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000008 	.word	0x20000008
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000008 	.word	0x20000008
 80014e0:	200007b8 	.word	0x200007b8

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	200007b8 	.word	0x200007b8

080014fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff ffee 	bl	80014e4 <HAL_GetTick>
 8001508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001514:	d005      	beq.n	8001522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_Delay+0x44>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001522:	bf00      	nop
 8001524:	f7ff ffde 	bl	80014e4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	429a      	cmp	r2, r3
 8001532:	d8f7      	bhi.n	8001524 <HAL_Delay+0x28>
  {
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	@ (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	@ (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	@ (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	@ (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	@ 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	@ 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff8e 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff29 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff3e 	bl	800158c <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff8e 	bl	8001638 <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5d 	bl	80015e4 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff31 	bl	80015a8 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0ac      	b.n	80018d4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f8b2 	bl	80018e8 <DFSDM_GetChannelFromInstance>
 8001784:	4603      	mov	r3, r0
 8001786:	4a55      	ldr	r2, [pc, #340]	@ (80018dc <HAL_DFSDM_ChannelInit+0x174>)
 8001788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e09f      	b.n	80018d4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fb05 	bl	8000da4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800179a:	4b51      	ldr	r3, [pc, #324]	@ (80018e0 <HAL_DFSDM_ChannelInit+0x178>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a4f      	ldr	r2, [pc, #316]	@ (80018e0 <HAL_DFSDM_ChannelInit+0x178>)
 80017a2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80017a4:	4b4e      	ldr	r3, [pc, #312]	@ (80018e0 <HAL_DFSDM_ChannelInit+0x178>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d125      	bne.n	80017f8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80017ac:	4b4d      	ldr	r3, [pc, #308]	@ (80018e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a4c      	ldr	r2, [pc, #304]	@ (80018e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80017b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80017b6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80017b8:	4b4a      	ldr	r3, [pc, #296]	@ (80018e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4948      	ldr	r1, [pc, #288]	@ (80018e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80017c6:	4b47      	ldr	r3, [pc, #284]	@ (80018e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a46      	ldr	r2, [pc, #280]	@ (80018e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80017cc:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80017d0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	791b      	ldrb	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d108      	bne.n	80017ec <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80017da:	4b42      	ldr	r3, [pc, #264]	@ (80018e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	041b      	lsls	r3, r3, #16
 80017e6:	493f      	ldr	r1, [pc, #252]	@ (80018e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80017ec:	4b3d      	ldr	r3, [pc, #244]	@ (80018e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a3c      	ldr	r2, [pc, #240]	@ (80018e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80017f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80017f6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001806:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001816:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800181c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 020f 	bic.w	r2, r2, #15
 8001834:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6819      	ldr	r1, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800185c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6899      	ldr	r1, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186c:	3b01      	subs	r3, #1
 800186e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f002 0207 	and.w	r2, r2, #7
 8001888:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6859      	ldr	r1, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001894:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018b4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f810 	bl	80018e8 <DFSDM_GetChannelFromInstance>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4904      	ldr	r1, [pc, #16]	@ (80018dc <HAL_DFSDM_ChannelInit+0x174>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200007c0 	.word	0x200007c0
 80018e0:	200007bc 	.word	0x200007bc
 80018e4:	40016000 	.word	0x40016000

080018e8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001964 <DFSDM_GetChannelFromInstance+0x7c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d102      	bne.n	80018fe <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e02b      	b.n	8001956 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a19      	ldr	r2, [pc, #100]	@ (8001968 <DFSDM_GetChannelFromInstance+0x80>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d102      	bne.n	800190c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001906:	2301      	movs	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e024      	b.n	8001956 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a17      	ldr	r2, [pc, #92]	@ (800196c <DFSDM_GetChannelFromInstance+0x84>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d102      	bne.n	800191a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001914:	2302      	movs	r3, #2
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e01d      	b.n	8001956 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a14      	ldr	r2, [pc, #80]	@ (8001970 <DFSDM_GetChannelFromInstance+0x88>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d102      	bne.n	8001928 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001922:	2304      	movs	r3, #4
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e016      	b.n	8001956 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <DFSDM_GetChannelFromInstance+0x8c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d102      	bne.n	8001936 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001930:	2305      	movs	r3, #5
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e00f      	b.n	8001956 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a0f      	ldr	r2, [pc, #60]	@ (8001978 <DFSDM_GetChannelFromInstance+0x90>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d102      	bne.n	8001944 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800193e:	2306      	movs	r3, #6
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	e008      	b.n	8001956 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <DFSDM_GetChannelFromInstance+0x94>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d102      	bne.n	8001952 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800194c:	2307      	movs	r3, #7
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e001      	b.n	8001956 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001952:	2303      	movs	r3, #3
 8001954:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40016000 	.word	0x40016000
 8001968:	40016020 	.word	0x40016020
 800196c:	40016040 	.word	0x40016040
 8001970:	40016080 	.word	0x40016080
 8001974:	400160a0 	.word	0x400160a0
 8001978:	400160c0 	.word	0x400160c0
 800197c:	400160e0 	.word	0x400160e0

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198e:	e17f      	b.n	8001c90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2101      	movs	r1, #1
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8171 	beq.w	8001c8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d005      	beq.n	80019c0 <HAL_GPIO_Init+0x40>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d130      	bne.n	8001a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019f6:	2201      	movs	r2, #1
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	091b      	lsrs	r3, r3, #4
 8001a0c:	f003 0201 	and.w	r2, r3, #1
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d118      	bne.n	8001a60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a34:	2201      	movs	r2, #1
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	08db      	lsrs	r3, r3, #3
 8001a4a:	f003 0201 	and.w	r2, r3, #1
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d017      	beq.n	8001a9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d123      	bne.n	8001af0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	6939      	ldr	r1, [r7, #16]
 8001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0203 	and.w	r2, r3, #3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80ac 	beq.w	8001c8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	4b5f      	ldr	r3, [pc, #380]	@ (8001cb0 <HAL_GPIO_Init+0x330>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b36:	4a5e      	ldr	r2, [pc, #376]	@ (8001cb0 <HAL_GPIO_Init+0x330>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001cb0 <HAL_GPIO_Init+0x330>)
 8001b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b4a:	4a5a      	ldr	r2, [pc, #360]	@ (8001cb4 <HAL_GPIO_Init+0x334>)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b74:	d025      	beq.n	8001bc2 <HAL_GPIO_Init+0x242>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4f      	ldr	r2, [pc, #316]	@ (8001cb8 <HAL_GPIO_Init+0x338>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d01f      	beq.n	8001bbe <HAL_GPIO_Init+0x23e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4e      	ldr	r2, [pc, #312]	@ (8001cbc <HAL_GPIO_Init+0x33c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d019      	beq.n	8001bba <HAL_GPIO_Init+0x23a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4d      	ldr	r2, [pc, #308]	@ (8001cc0 <HAL_GPIO_Init+0x340>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_GPIO_Init+0x236>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4c      	ldr	r2, [pc, #304]	@ (8001cc4 <HAL_GPIO_Init+0x344>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00d      	beq.n	8001bb2 <HAL_GPIO_Init+0x232>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4b      	ldr	r2, [pc, #300]	@ (8001cc8 <HAL_GPIO_Init+0x348>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d007      	beq.n	8001bae <HAL_GPIO_Init+0x22e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8001ccc <HAL_GPIO_Init+0x34c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_GPIO_Init+0x22a>
 8001ba6:	2306      	movs	r3, #6
 8001ba8:	e00c      	b.n	8001bc4 <HAL_GPIO_Init+0x244>
 8001baa:	2307      	movs	r3, #7
 8001bac:	e00a      	b.n	8001bc4 <HAL_GPIO_Init+0x244>
 8001bae:	2305      	movs	r3, #5
 8001bb0:	e008      	b.n	8001bc4 <HAL_GPIO_Init+0x244>
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x244>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x244>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x244>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x244>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bd4:	4937      	ldr	r1, [pc, #220]	@ (8001cb4 <HAL_GPIO_Init+0x334>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd0 <HAL_GPIO_Init+0x350>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c06:	4a32      	ldr	r2, [pc, #200]	@ (8001cd0 <HAL_GPIO_Init+0x350>)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c0c:	4b30      	ldr	r3, [pc, #192]	@ (8001cd0 <HAL_GPIO_Init+0x350>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c30:	4a27      	ldr	r2, [pc, #156]	@ (8001cd0 <HAL_GPIO_Init+0x350>)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c36:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <HAL_GPIO_Init+0x350>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd0 <HAL_GPIO_Init+0x350>)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <HAL_GPIO_Init+0x350>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c84:	4a12      	ldr	r2, [pc, #72]	@ (8001cd0 <HAL_GPIO_Init+0x350>)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f47f ae78 	bne.w	8001990 <HAL_GPIO_Init+0x10>
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	48000400 	.word	0x48000400
 8001cbc:	48000800 	.word	0x48000800
 8001cc0:	48000c00 	.word	0x48000c00
 8001cc4:	48001000 	.word	0x48001000
 8001cc8:	48001400 	.word	0x48001400
 8001ccc:	48001800 	.word	0x48001800
 8001cd0:	40010400 	.word	0x40010400

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cf0:	e002      	b.n	8001cf8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d0e:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d1a:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe ffe0 	bl	8000ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40010400 	.word	0x40010400

08001d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e08d      	b.n	8001e62 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff f886 	bl	8000e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2224      	movs	r2, #36	@ 0x24
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	e006      	b.n	8001dbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001dba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d108      	bne.n	8001dd6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	e007      	b.n	8001de6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001de4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001df8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69d9      	ldr	r1, [r3, #28]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1a      	ldr	r2, [r3, #32]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d138      	bne.n	8001ef2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e032      	b.n	8001ef4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2224      	movs	r2, #36	@ 0x24
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ebc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
  }
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d139      	bne.n	8001f8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e033      	b.n	8001f8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2224      	movs	r2, #36	@ 0x24
 8001f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f8a:	2302      	movs	r3, #2
  }
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e101      	b.n	80021ae <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff f8fe 	bl	80011c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 fc94 	bl	8004904 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7c1a      	ldrb	r2, [r3, #16]
 8001fe4:	f88d 2000 	strb.w	r2, [sp]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fec:	f002 fc5d 	bl	80048aa <USB_CoreInit>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0d5      	b.n	80021ae <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fc8c 	bl	8004926 <USB_SetCurrentMode>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0c6      	b.n	80021ae <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e04a      	b.n	80020bc <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	3315      	adds	r3, #21
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3314      	adds	r3, #20
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	b298      	uxth	r0, r3
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	332e      	adds	r3, #46	@ 0x2e
 8002062:	4602      	mov	r2, r0
 8002064:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	3318      	adds	r3, #24
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	331c      	adds	r3, #28
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	3320      	adds	r3, #32
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	3324      	adds	r3, #36	@ 0x24
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	3301      	adds	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	791b      	ldrb	r3, [r3, #4]
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d3af      	bcc.n	8002026 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	e044      	b.n	8002156 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	3301      	adds	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	791b      	ldrb	r3, [r3, #4]
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	429a      	cmp	r2, r3
 800215e:	d3b5      	bcc.n	80020cc <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7c1a      	ldrb	r2, [r3, #16]
 8002168:	f88d 2000 	strb.w	r2, [sp]
 800216c:	3304      	adds	r3, #4
 800216e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002170:	f002 fc26 	bl	80049c0 <USB_DevInit>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e013      	b.n	80021ae <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7b1b      	ldrb	r3, [r3, #12]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d102      	bne.n	80021a2 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f80a 	bl	80021b6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f002 fdcb 	bl	8004d42 <USB_DevDisconnect>

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	f043 0303 	orr.w	r3, r3, #3
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a04      	ldr	r2, [pc, #16]	@ (800221c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800220a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40007000 	.word	0x40007000

08002220 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002224:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <HAL_PWREx_GetVoltageRange+0x18>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40007000 	.word	0x40007000

0800223c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800224a:	d130      	bne.n	80022ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800224c:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002258:	d038      	beq.n	80022cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800225a:	4b20      	ldr	r3, [pc, #128]	@ (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002262:	4a1e      	ldr	r2, [pc, #120]	@ (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002264:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002268:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800226a:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2232      	movs	r2, #50	@ 0x32
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	4a1b      	ldr	r2, [pc, #108]	@ (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0c9b      	lsrs	r3, r3, #18
 800227c:	3301      	adds	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002280:	e002      	b.n	8002288 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3b01      	subs	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002288:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002294:	d102      	bne.n	800229c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f2      	bne.n	8002282 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800229c:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a8:	d110      	bne.n	80022cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e00f      	b.n	80022ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ae:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ba:	d007      	beq.n	80022cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022bc:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022c4:	4a05      	ldr	r2, [pc, #20]	@ (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40007000 	.word	0x40007000
 80022e0:	20000000 	.word	0x20000000
 80022e4:	431bde83 	.word	0x431bde83

080022e8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80022ec:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022f6:	6053      	str	r3, [r2, #4]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40007000 	.word	0x40007000

08002308 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af02      	add	r7, sp, #8
 800230e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002310:	f7ff f8e8 	bl	80014e4 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e063      	b.n	80023e8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7fe fdf7 	bl	8000f28 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800233a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f858 	bl	80023f4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	3b01      	subs	r3, #1
 8002354:	021a      	lsls	r2, r3, #8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	2120      	movs	r1, #32
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f850 	bl	8002410 <QSPI_WaitFlagStateUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002374:	7afb      	ldrb	r3, [r7, #11]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d131      	bne.n	80023de <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002384:	f023 0310 	bic.w	r3, r3, #16
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6852      	ldr	r2, [r2, #4]
 800238c:	0611      	lsls	r1, r2, #24
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68d2      	ldr	r2, [r2, #12]
 8002392:	4311      	orrs	r1, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	430b      	orrs	r3, r1
 800239a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4b13      	ldr	r3, [pc, #76]	@ (80023f0 <HAL_QSPI_Init+0xe8>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6912      	ldr	r2, [r2, #16]
 80023aa:	0411      	lsls	r1, r2, #16
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6952      	ldr	r2, [r2, #20]
 80023b0:	4311      	orrs	r1, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6992      	ldr	r2, [r2, #24]
 80023b6:	4311      	orrs	r1, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	430b      	orrs	r3, r1
 80023be:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80023e6:	7afb      	ldrb	r3, [r7, #11]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	ffe0f8fe 	.word	0xffe0f8fe

080023f4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002420:	e01a      	b.n	8002458 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d016      	beq.n	8002458 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7ff f85b 	bl	80014e4 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2204      	movs	r2, #4
 8002444:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e00e      	b.n	8002476 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf14      	ite	ne
 8002466:	2301      	movne	r3, #1
 8002468:	2300      	moveq	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	429a      	cmp	r2, r3
 8002472:	d1d6      	bne.n	8002422 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e3ca      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002492:	4b97      	ldr	r3, [pc, #604]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800249c:	4b94      	ldr	r3, [pc, #592]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 80e4 	beq.w	800267c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_RCC_OscConfig+0x4a>
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2b0c      	cmp	r3, #12
 80024be:	f040 808b 	bne.w	80025d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	f040 8087 	bne.w	80025d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024ca:	4b89      	ldr	r3, [pc, #548]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_RCC_OscConfig+0x62>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e3a2      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	4b82      	ldr	r3, [pc, #520]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <HAL_RCC_OscConfig+0x7c>
 80024f2:	4b7f      	ldr	r3, [pc, #508]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024fa:	e005      	b.n	8002508 <HAL_RCC_OscConfig+0x88>
 80024fc:	4b7c      	ldr	r3, [pc, #496]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 80024fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002508:	4293      	cmp	r3, r2
 800250a:	d223      	bcs.n	8002554 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fd55 	bl	8002fc0 <RCC_SetFlashLatencyFromMSIRange>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e383      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002520:	4b73      	ldr	r3, [pc, #460]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a72      	ldr	r2, [pc, #456]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002526:	f043 0308 	orr.w	r3, r3, #8
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b70      	ldr	r3, [pc, #448]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	496d      	ldr	r1, [pc, #436]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800253e:	4b6c      	ldr	r3, [pc, #432]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	4968      	ldr	r1, [pc, #416]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
 8002552:	e025      	b.n	80025a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002554:	4b66      	ldr	r3, [pc, #408]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a65      	ldr	r2, [pc, #404]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 800255a:	f043 0308 	orr.w	r3, r3, #8
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b63      	ldr	r3, [pc, #396]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4960      	ldr	r1, [pc, #384]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002572:	4b5f      	ldr	r3, [pc, #380]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	495b      	ldr	r1, [pc, #364]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fd15 	bl	8002fc0 <RCC_SetFlashLatencyFromMSIRange>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e343      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025a0:	f000 fc4a 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b52      	ldr	r3, [pc, #328]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	4950      	ldr	r1, [pc, #320]	@ (80026f4 <HAL_RCC_OscConfig+0x274>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	4a4e      	ldr	r2, [pc, #312]	@ (80026f8 <HAL_RCC_OscConfig+0x278>)
 80025be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025c0:	4b4e      	ldr	r3, [pc, #312]	@ (80026fc <HAL_RCC_OscConfig+0x27c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe ff3d 	bl	8001444 <HAL_InitTick>
 80025ca:	4603      	mov	r3, r0
 80025cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d052      	beq.n	800267a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	e327      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d032      	beq.n	8002646 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025e0:	4b43      	ldr	r3, [pc, #268]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a42      	ldr	r2, [pc, #264]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ec:	f7fe ff7a 	bl	80014e4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f4:	f7fe ff76 	bl	80014e4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e310      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002606:	4b3a      	ldr	r3, [pc, #232]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002612:	4b37      	ldr	r3, [pc, #220]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a36      	ldr	r2, [pc, #216]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002618:	f043 0308 	orr.w	r3, r3, #8
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	4b34      	ldr	r3, [pc, #208]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4931      	ldr	r1, [pc, #196]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002630:	4b2f      	ldr	r3, [pc, #188]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	492c      	ldr	r1, [pc, #176]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
 8002644:	e01a      	b.n	800267c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002646:	4b2a      	ldr	r3, [pc, #168]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a29      	ldr	r2, [pc, #164]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002652:	f7fe ff47 	bl	80014e4 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800265a:	f7fe ff43 	bl	80014e4 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e2dd      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800266c:	4b20      	ldr	r3, [pc, #128]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <HAL_RCC_OscConfig+0x1da>
 8002678:	e000      	b.n	800267c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800267a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d074      	beq.n	8002772 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b08      	cmp	r3, #8
 800268c:	d005      	beq.n	800269a <HAL_RCC_OscConfig+0x21a>
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2b0c      	cmp	r3, #12
 8002692:	d10e      	bne.n	80026b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d10b      	bne.n	80026b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d064      	beq.n	8002770 <HAL_RCC_OscConfig+0x2f0>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d160      	bne.n	8002770 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e2ba      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x24a>
 80026bc:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0b      	ldr	r2, [pc, #44]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	e026      	b.n	8002718 <HAL_RCC_OscConfig+0x298>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026d2:	d115      	bne.n	8002700 <HAL_RCC_OscConfig+0x280>
 80026d4:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a05      	ldr	r2, [pc, #20]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 80026da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b03      	ldr	r3, [pc, #12]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a02      	ldr	r2, [pc, #8]	@ (80026f0 <HAL_RCC_OscConfig+0x270>)
 80026e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	e014      	b.n	8002718 <HAL_RCC_OscConfig+0x298>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08007f8c 	.word	0x08007f8c
 80026f8:	20000000 	.word	0x20000000
 80026fc:	20000004 	.word	0x20000004
 8002700:	4ba0      	ldr	r3, [pc, #640]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a9f      	ldr	r2, [pc, #636]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b9d      	ldr	r3, [pc, #628]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a9c      	ldr	r2, [pc, #624]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fee0 	bl	80014e4 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7fe fedc 	bl	80014e4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	@ 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e276      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273a:	4b92      	ldr	r3, [pc, #584]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x2a8>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fecc 	bl	80014e4 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7fe fec8 	bl	80014e4 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	@ 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e262      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002762:	4b88      	ldr	r3, [pc, #544]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x2d0>
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d060      	beq.n	8002840 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d005      	beq.n	8002790 <HAL_RCC_OscConfig+0x310>
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d119      	bne.n	80027be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d116      	bne.n	80027be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002790:	4b7c      	ldr	r3, [pc, #496]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x328>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e23f      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b76      	ldr	r3, [pc, #472]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	061b      	lsls	r3, r3, #24
 80027b6:	4973      	ldr	r1, [pc, #460]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027bc:	e040      	b.n	8002840 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d023      	beq.n	800280e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 80027cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe fe87 	bl	80014e4 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe fe83 	bl	80014e4 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e21d      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ec:	4b65      	ldr	r3, [pc, #404]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b62      	ldr	r3, [pc, #392]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	061b      	lsls	r3, r3, #24
 8002806:	495f      	ldr	r1, [pc, #380]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
 800280c:	e018      	b.n	8002840 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b5d      	ldr	r3, [pc, #372]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a5c      	ldr	r2, [pc, #368]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fe fe63 	bl	80014e4 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002822:	f7fe fe5f 	bl	80014e4 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1f9      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002834:	4b53      	ldr	r3, [pc, #332]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d03c      	beq.n	80028c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01c      	beq.n	800288e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002854:	4b4b      	ldr	r3, [pc, #300]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800285a:	4a4a      	ldr	r2, [pc, #296]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe fe3e 	bl	80014e4 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286c:	f7fe fe3a 	bl	80014e4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1d4      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800287e:	4b41      	ldr	r3, [pc, #260]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ef      	beq.n	800286c <HAL_RCC_OscConfig+0x3ec>
 800288c:	e01b      	b.n	80028c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288e:	4b3d      	ldr	r3, [pc, #244]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002894:	4a3b      	ldr	r2, [pc, #236]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289e:	f7fe fe21 	bl	80014e4 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a6:	f7fe fe1d 	bl	80014e4 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1b7      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b8:	4b32      	ldr	r3, [pc, #200]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1ef      	bne.n	80028a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80a6 	beq.w	8002a20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d4:	2300      	movs	r3, #0
 80028d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 80028da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10d      	bne.n	8002900 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e4:	4b27      	ldr	r3, [pc, #156]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e8:	4a26      	ldr	r2, [pc, #152]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80028f0:	4b24      	ldr	r3, [pc, #144]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fc:	2301      	movs	r3, #1
 80028fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002900:	4b21      	ldr	r3, [pc, #132]	@ (8002988 <HAL_RCC_OscConfig+0x508>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d118      	bne.n	800293e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800290c:	4b1e      	ldr	r3, [pc, #120]	@ (8002988 <HAL_RCC_OscConfig+0x508>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1d      	ldr	r2, [pc, #116]	@ (8002988 <HAL_RCC_OscConfig+0x508>)
 8002912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002916:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002918:	f7fe fde4 	bl	80014e4 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002920:	f7fe fde0 	bl	80014e4 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e17a      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002932:	4b15      	ldr	r3, [pc, #84]	@ (8002988 <HAL_RCC_OscConfig+0x508>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d108      	bne.n	8002958 <HAL_RCC_OscConfig+0x4d8>
 8002946:	4b0f      	ldr	r3, [pc, #60]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294c:	4a0d      	ldr	r2, [pc, #52]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002956:	e029      	b.n	80029ac <HAL_RCC_OscConfig+0x52c>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b05      	cmp	r3, #5
 800295e:	d115      	bne.n	800298c <HAL_RCC_OscConfig+0x50c>
 8002960:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002966:	4a07      	ldr	r2, [pc, #28]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002970:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002976:	4a03      	ldr	r2, [pc, #12]	@ (8002984 <HAL_RCC_OscConfig+0x504>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002980:	e014      	b.n	80029ac <HAL_RCC_OscConfig+0x52c>
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	40007000 	.word	0x40007000
 800298c:	4b9c      	ldr	r3, [pc, #624]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002992:	4a9b      	ldr	r2, [pc, #620]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800299c:	4b98      	ldr	r3, [pc, #608]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a2:	4a97      	ldr	r2, [pc, #604]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 80029a4:	f023 0304 	bic.w	r3, r3, #4
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d016      	beq.n	80029e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fd96 	bl	80014e4 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe fd92 	bl	80014e4 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e12a      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ed      	beq.n	80029bc <HAL_RCC_OscConfig+0x53c>
 80029e0:	e015      	b.n	8002a0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e2:	f7fe fd7f 	bl	80014e4 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe fd7b 	bl	80014e4 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e113      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a00:	4b7f      	ldr	r3, [pc, #508]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ed      	bne.n	80029ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a14:	4b7a      	ldr	r3, [pc, #488]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a18:	4a79      	ldr	r2, [pc, #484]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80fe 	beq.w	8002c26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	f040 80d0 	bne.w	8002bd4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a34:	4b72      	ldr	r3, [pc, #456]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f003 0203 	and.w	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d130      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a52:	3b01      	subs	r3, #1
 8002a54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d127      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d11f      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a74:	2a07      	cmp	r2, #7
 8002a76:	bf14      	ite	ne
 8002a78:	2201      	movne	r2, #1
 8002a7a:	2200      	moveq	r2, #0
 8002a7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d113      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8c:	085b      	lsrs	r3, r3, #1
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	085b      	lsrs	r3, r3, #1
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d06e      	beq.n	8002b88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b0c      	cmp	r3, #12
 8002aae:	d069      	beq.n	8002b84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ab0:	4b53      	ldr	r3, [pc, #332]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002abc:	4b50      	ldr	r3, [pc, #320]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0ad      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002acc:	4b4c      	ldr	r3, [pc, #304]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a4b      	ldr	r2, [pc, #300]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ad8:	f7fe fd04 	bl	80014e4 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe fd00 	bl	80014e4 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e09a      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af2:	4b43      	ldr	r3, [pc, #268]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002afe:	4b40      	ldr	r3, [pc, #256]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	4b40      	ldr	r3, [pc, #256]	@ (8002c04 <HAL_RCC_OscConfig+0x784>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b0e:	3a01      	subs	r2, #1
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	4311      	orrs	r1, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b18:	0212      	lsls	r2, r2, #8
 8002b1a:	4311      	orrs	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b20:	0852      	lsrs	r2, r2, #1
 8002b22:	3a01      	subs	r2, #1
 8002b24:	0552      	lsls	r2, r2, #21
 8002b26:	4311      	orrs	r1, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b2c:	0852      	lsrs	r2, r2, #1
 8002b2e:	3a01      	subs	r2, #1
 8002b30:	0652      	lsls	r2, r2, #25
 8002b32:	4311      	orrs	r1, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b38:	0912      	lsrs	r2, r2, #4
 8002b3a:	0452      	lsls	r2, r2, #17
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	4930      	ldr	r1, [pc, #192]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b44:	4b2e      	ldr	r3, [pc, #184]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a2d      	ldr	r2, [pc, #180]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b50:	4b2b      	ldr	r3, [pc, #172]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a2a      	ldr	r2, [pc, #168]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b5c:	f7fe fcc2 	bl	80014e4 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fcbe 	bl	80014e4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e058      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b76:	4b22      	ldr	r3, [pc, #136]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b82:	e050      	b.n	8002c26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e04f      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b88:	4b1d      	ldr	r3, [pc, #116]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d148      	bne.n	8002c26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b94:	4b1a      	ldr	r3, [pc, #104]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a19      	ldr	r2, [pc, #100]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba0:	4b17      	ldr	r3, [pc, #92]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4a16      	ldr	r2, [pc, #88]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002ba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002baa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bac:	f7fe fc9a 	bl	80014e4 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe fc96 	bl	80014e4 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e030      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x734>
 8002bd2:	e028      	b.n	8002c26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b0c      	cmp	r3, #12
 8002bd8:	d023      	beq.n	8002c22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a08      	ldr	r2, [pc, #32]	@ (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002be0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe fc7d 	bl	80014e4 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bec:	e00c      	b.n	8002c08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe fc79 	bl	80014e4 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d905      	bls.n	8002c08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e013      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
 8002c00:	40021000 	.word	0x40021000
 8002c04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c08:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <HAL_RCC_OscConfig+0x7b0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ec      	bne.n	8002bee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c14:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <HAL_RCC_OscConfig+0x7b0>)
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4905      	ldr	r1, [pc, #20]	@ (8002c30 <HAL_RCC_OscConfig+0x7b0>)
 8002c1a:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <HAL_RCC_OscConfig+0x7b4>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60cb      	str	r3, [r1, #12]
 8002c20:	e001      	b.n	8002c26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	feeefffc 	.word	0xfeeefffc

08002c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0e7      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b75      	ldr	r3, [pc, #468]	@ (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d910      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b72      	ldr	r3, [pc, #456]	@ (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 0207 	bic.w	r2, r3, #7
 8002c62:	4970      	ldr	r1, [pc, #448]	@ (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b6e      	ldr	r3, [pc, #440]	@ (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0cf      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d010      	beq.n	8002caa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	4b66      	ldr	r3, [pc, #408]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d908      	bls.n	8002caa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c98:	4b63      	ldr	r3, [pc, #396]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4960      	ldr	r1, [pc, #384]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d04c      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbe:	4b5a      	ldr	r3, [pc, #360]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d121      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0a6      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd6:	4b54      	ldr	r3, [pc, #336]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d115      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e09a      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cee:	4b4e      	ldr	r3, [pc, #312]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e08e      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e086      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d0e:	4b46      	ldr	r3, [pc, #280]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4943      	ldr	r1, [pc, #268]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d20:	f7fe fbe0 	bl	80014e4 <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d28:	f7fe fbdc 	bl	80014e4 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e06e      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 020c 	and.w	r2, r3, #12
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1eb      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	4b31      	ldr	r3, [pc, #196]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d208      	bcs.n	8002d7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	492b      	ldr	r1, [pc, #172]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7e:	4b29      	ldr	r3, [pc, #164]	@ (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d210      	bcs.n	8002dae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8c:	4b25      	ldr	r3, [pc, #148]	@ (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f023 0207 	bic.w	r2, r3, #7
 8002d94:	4923      	ldr	r1, [pc, #140]	@ (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9c:	4b21      	ldr	r3, [pc, #132]	@ (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d001      	beq.n	8002dae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e036      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dba:	4b1b      	ldr	r3, [pc, #108]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4918      	ldr	r1, [pc, #96]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d009      	beq.n	8002dec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd8:	4b13      	ldr	r3, [pc, #76]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4910      	ldr	r1, [pc, #64]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dec:	f000 f824 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	490b      	ldr	r1, [pc, #44]	@ (8002e2c <HAL_RCC_ClockConfig+0x1f4>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
 8002e08:	4a09      	ldr	r2, [pc, #36]	@ (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002e0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e0c:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <HAL_RCC_ClockConfig+0x1fc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe fb17 	bl	8001444 <HAL_InitTick>
 8002e16:	4603      	mov	r3, r0
 8002e18:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e1a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08007f8c 	.word	0x08007f8c
 8002e30:	20000000 	.word	0x20000000
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	@ 0x24
 8002e3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e46:	4b3e      	ldr	r3, [pc, #248]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e50:	4b3b      	ldr	r3, [pc, #236]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x34>
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d121      	bne.n	8002eaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d11e      	bne.n	8002eaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e6c:	4b34      	ldr	r3, [pc, #208]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e78:	4b31      	ldr	r3, [pc, #196]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	e005      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e88:	4b2d      	ldr	r3, [pc, #180]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e94:	4a2b      	ldr	r2, [pc, #172]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10d      	bne.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d102      	bne.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eb0:	4b25      	ldr	r3, [pc, #148]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	e004      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ebc:	4b23      	ldr	r3, [pc, #140]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ebe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d134      	bne.n	8002f30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d003      	beq.n	8002ede <HAL_RCC_GetSysClockFreq+0xa6>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d003      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xac>
 8002edc:	e005      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ede:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ee0:	617b      	str	r3, [r7, #20]
      break;
 8002ee2:	e005      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ee4:	4b19      	ldr	r3, [pc, #100]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ee6:	617b      	str	r3, [r7, #20]
      break;
 8002ee8:	e002      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	617b      	str	r3, [r7, #20]
      break;
 8002eee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ef0:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	3301      	adds	r3, #1
 8002efc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002efe:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	fb03 f202 	mul.w	r2, r3, r2
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f16:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	0e5b      	lsrs	r3, r3, #25
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	3301      	adds	r3, #1
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f30:	69bb      	ldr	r3, [r7, #24]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	@ 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	08007fa4 	.word	0x08007fa4
 8002f48:	00f42400 	.word	0x00f42400
 8002f4c:	007a1200 	.word	0x007a1200

08002f50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f54:	4b03      	ldr	r3, [pc, #12]	@ (8002f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000000 	.word	0x20000000

08002f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f6c:	f7ff fff0 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4904      	ldr	r1, [pc, #16]	@ (8002f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08007f9c 	.word	0x08007f9c

08002f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f98:	f7ff ffda 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0adb      	lsrs	r3, r3, #11
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4904      	ldr	r1, [pc, #16]	@ (8002fbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	08007f9c 	.word	0x08007f9c

08002fc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8003078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fd8:	f7ff f922 	bl	8002220 <HAL_PWREx_GetVoltageRange>
 8002fdc:	6178      	str	r0, [r7, #20]
 8002fde:	e014      	b.n	800300a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fe0:	4b25      	ldr	r3, [pc, #148]	@ (8003078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe4:	4a24      	ldr	r2, [pc, #144]	@ (8003078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fea:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fec:	4b22      	ldr	r3, [pc, #136]	@ (8003078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ff8:	f7ff f912 	bl	8002220 <HAL_PWREx_GetVoltageRange>
 8002ffc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8003078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003002:	4a1d      	ldr	r2, [pc, #116]	@ (8003078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003008:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003010:	d10b      	bne.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b80      	cmp	r3, #128	@ 0x80
 8003016:	d919      	bls.n	800304c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2ba0      	cmp	r3, #160	@ 0xa0
 800301c:	d902      	bls.n	8003024 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800301e:	2302      	movs	r3, #2
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	e013      	b.n	800304c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003024:	2301      	movs	r3, #1
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	e010      	b.n	800304c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b80      	cmp	r3, #128	@ 0x80
 800302e:	d902      	bls.n	8003036 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003030:	2303      	movs	r3, #3
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	e00a      	b.n	800304c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b80      	cmp	r3, #128	@ 0x80
 800303a:	d102      	bne.n	8003042 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800303c:	2302      	movs	r3, #2
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	e004      	b.n	800304c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b70      	cmp	r3, #112	@ 0x70
 8003046:	d101      	bne.n	800304c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003048:	2301      	movs	r3, #1
 800304a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800304c:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 0207 	bic.w	r2, r3, #7
 8003054:	4909      	ldr	r1, [pc, #36]	@ (800307c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800305c:	4b07      	ldr	r3, [pc, #28]	@ (800307c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	429a      	cmp	r2, r3
 8003068:	d001      	beq.n	800306e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000
 800307c:	40022000 	.word	0x40022000

08003080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003088:	2300      	movs	r3, #0
 800308a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800308c:	2300      	movs	r3, #0
 800308e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003098:	2b00      	cmp	r3, #0
 800309a:	d041      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030a4:	d02a      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030aa:	d824      	bhi.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030b0:	d008      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030b6:	d81e      	bhi.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030c0:	d010      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030c2:	e018      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030c4:	4b86      	ldr	r3, [pc, #536]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a85      	ldr	r2, [pc, #532]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030d0:	e015      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3304      	adds	r3, #4
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 facb 	bl	8003674 <RCCEx_PLLSAI1_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030e2:	e00c      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3320      	adds	r3, #32
 80030e8:	2100      	movs	r1, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fbb6 	bl	800385c <RCCEx_PLLSAI2_Config>
 80030f0:	4603      	mov	r3, r0
 80030f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030f4:	e003      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	74fb      	strb	r3, [r7, #19]
      break;
 80030fa:	e000      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10b      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003104:	4b76      	ldr	r3, [pc, #472]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003112:	4973      	ldr	r1, [pc, #460]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800311a:	e001      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311c:	7cfb      	ldrb	r3, [r7, #19]
 800311e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d041      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003130:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003134:	d02a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003136:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800313a:	d824      	bhi.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800313c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003140:	d008      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003142:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003146:	d81e      	bhi.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800314c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003150:	d010      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003152:	e018      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003154:	4b62      	ldr	r3, [pc, #392]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a61      	ldr	r2, [pc, #388]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800315e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003160:	e015      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3304      	adds	r3, #4
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fa83 	bl	8003674 <RCCEx_PLLSAI1_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003172:	e00c      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3320      	adds	r3, #32
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fb6e 	bl	800385c <RCCEx_PLLSAI2_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003184:	e003      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	74fb      	strb	r3, [r7, #19]
      break;
 800318a:	e000      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800318c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003194:	4b52      	ldr	r3, [pc, #328]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031a2:	494f      	ldr	r1, [pc, #316]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80031aa:	e001      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80a0 	beq.w	80032fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031be:	2300      	movs	r3, #0
 80031c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031c2:	4b47      	ldr	r3, [pc, #284]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031d2:	2300      	movs	r3, #0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00d      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d8:	4b41      	ldr	r3, [pc, #260]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031dc:	4a40      	ldr	r2, [pc, #256]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031e4:	4b3e      	ldr	r3, [pc, #248]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f0:	2301      	movs	r3, #1
 80031f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f4:	4b3b      	ldr	r3, [pc, #236]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a3a      	ldr	r2, [pc, #232]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003200:	f7fe f970 	bl	80014e4 <HAL_GetTick>
 8003204:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003206:	e009      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003208:	f7fe f96c 	bl	80014e4 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d902      	bls.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	74fb      	strb	r3, [r7, #19]
        break;
 800321a:	e005      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800321c:	4b31      	ldr	r3, [pc, #196]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ef      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d15c      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800322e:	4b2c      	ldr	r3, [pc, #176]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003234:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003238:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01f      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	429a      	cmp	r2, r3
 800324a:	d019      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800324c:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003256:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003258:	4b21      	ldr	r3, [pc, #132]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325e:	4a20      	ldr	r2, [pc, #128]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003268:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326e:	4a1c      	ldr	r2, [pc, #112]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003278:	4a19      	ldr	r2, [pc, #100]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fe f92b 	bl	80014e4 <HAL_GetTick>
 800328e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003290:	e00b      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fe f927 	bl	80014e4 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d902      	bls.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	74fb      	strb	r3, [r7, #19]
            break;
 80032a8:	e006      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032aa:	4b0d      	ldr	r3, [pc, #52]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ec      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032be:	4b08      	ldr	r3, [pc, #32]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ce:	4904      	ldr	r1, [pc, #16]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032d6:	e009      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	74bb      	strb	r3, [r7, #18]
 80032dc:	e006      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ec:	7c7b      	ldrb	r3, [r7, #17]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d105      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f2:	4b9e      	ldr	r3, [pc, #632]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f6:	4a9d      	ldr	r2, [pc, #628]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800330a:	4b98      	ldr	r3, [pc, #608]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003310:	f023 0203 	bic.w	r2, r3, #3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	4994      	ldr	r1, [pc, #592]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800332c:	4b8f      	ldr	r3, [pc, #572]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003332:	f023 020c 	bic.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333a:	498c      	ldr	r1, [pc, #560]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800334e:	4b87      	ldr	r3, [pc, #540]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003354:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	4983      	ldr	r1, [pc, #524]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003370:	4b7e      	ldr	r3, [pc, #504]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003376:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337e:	497b      	ldr	r1, [pc, #492]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003392:	4b76      	ldr	r3, [pc, #472]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003398:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a0:	4972      	ldr	r1, [pc, #456]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033b4:	4b6d      	ldr	r3, [pc, #436]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c2:	496a      	ldr	r1, [pc, #424]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033d6:	4b65      	ldr	r3, [pc, #404]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	4961      	ldr	r1, [pc, #388]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033f8:	4b5c      	ldr	r3, [pc, #368]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003406:	4959      	ldr	r1, [pc, #356]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800341a:	4b54      	ldr	r3, [pc, #336]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003420:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003428:	4950      	ldr	r1, [pc, #320]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800343c:	4b4b      	ldr	r3, [pc, #300]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003442:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344a:	4948      	ldr	r1, [pc, #288]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800345e:	4b43      	ldr	r3, [pc, #268]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003464:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346c:	493f      	ldr	r1, [pc, #252]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d028      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003480:	4b3a      	ldr	r3, [pc, #232]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003486:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800348e:	4937      	ldr	r1, [pc, #220]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800349a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800349e:	d106      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a0:	4b32      	ldr	r3, [pc, #200]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a31      	ldr	r2, [pc, #196]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034aa:	60d3      	str	r3, [r2, #12]
 80034ac:	e011      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034b6:	d10c      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3304      	adds	r3, #4
 80034bc:	2101      	movs	r1, #1
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f8d8 	bl	8003674 <RCCEx_PLLSAI1_Config>
 80034c4:	4603      	mov	r3, r0
 80034c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d028      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034de:	4b23      	ldr	r3, [pc, #140]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ec:	491f      	ldr	r1, [pc, #124]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034fc:	d106      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034fe:	4b1b      	ldr	r3, [pc, #108]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	4a1a      	ldr	r2, [pc, #104]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003508:	60d3      	str	r3, [r2, #12]
 800350a:	e011      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003510:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003514:	d10c      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	2101      	movs	r1, #1
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f8a9 	bl	8003674 <RCCEx_PLLSAI1_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003526:	7cfb      	ldrb	r3, [r7, #19]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d02b      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800353c:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003542:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800354a:	4908      	ldr	r1, [pc, #32]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003556:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800355a:	d109      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800355c:	4b03      	ldr	r3, [pc, #12]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a02      	ldr	r2, [pc, #8]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003566:	60d3      	str	r3, [r2, #12]
 8003568:	e014      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003574:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003578:	d10c      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3304      	adds	r3, #4
 800357e:	2101      	movs	r1, #1
 8003580:	4618      	mov	r0, r3
 8003582:	f000 f877 	bl	8003674 <RCCEx_PLLSAI1_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800358a:	7cfb      	ldrb	r3, [r7, #19]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d02f      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035ae:	4928      	ldr	r1, [pc, #160]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035be:	d10d      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	2102      	movs	r1, #2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f854 	bl	8003674 <RCCEx_PLLSAI1_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d014      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035d6:	7cfb      	ldrb	r3, [r7, #19]
 80035d8:	74bb      	strb	r3, [r7, #18]
 80035da:	e011      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035e4:	d10c      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3320      	adds	r3, #32
 80035ea:	2102      	movs	r1, #2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 f935 	bl	800385c <RCCEx_PLLSAI2_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035f6:	7cfb      	ldrb	r3, [r7, #19]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800360c:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800361a:	490d      	ldr	r1, [pc, #52]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800362e:	4b08      	ldr	r3, [pc, #32]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003634:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800363e:	4904      	ldr	r1, [pc, #16]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003646:	7cbb      	ldrb	r3, [r7, #18]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003658:	4b05      	ldr	r3, [pc, #20]	@ (8003670 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a04      	ldr	r2, [pc, #16]	@ (8003670 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800365e:	f043 0304 	orr.w	r3, r3, #4
 8003662:	6013      	str	r3, [r2, #0]
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000

08003674 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003682:	4b75      	ldr	r3, [pc, #468]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d018      	beq.n	80036c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800368e:	4b72      	ldr	r3, [pc, #456]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0203 	and.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d10d      	bne.n	80036ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
       ||
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
       ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d047      	beq.n	800374a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	e044      	b.n	800374a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d018      	beq.n	80036fa <RCCEx_PLLSAI1_Config+0x86>
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d825      	bhi.n	8003718 <RCCEx_PLLSAI1_Config+0xa4>
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d002      	beq.n	80036d6 <RCCEx_PLLSAI1_Config+0x62>
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d009      	beq.n	80036e8 <RCCEx_PLLSAI1_Config+0x74>
 80036d4:	e020      	b.n	8003718 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036d6:	4b60      	ldr	r3, [pc, #384]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11d      	bne.n	800371e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e6:	e01a      	b.n	800371e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036e8:	4b5b      	ldr	r3, [pc, #364]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d116      	bne.n	8003722 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f8:	e013      	b.n	8003722 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036fa:	4b57      	ldr	r3, [pc, #348]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003706:	4b54      	ldr	r3, [pc, #336]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003716:	e006      	b.n	8003726 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e004      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800371e:	bf00      	nop
 8003720:	e002      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003726:	bf00      	nop
    }

    if(status == HAL_OK)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10d      	bne.n	800374a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800372e:	4b4a      	ldr	r3, [pc, #296]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	430b      	orrs	r3, r1
 8003744:	4944      	ldr	r1, [pc, #272]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d17d      	bne.n	800384c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003750:	4b41      	ldr	r3, [pc, #260]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a40      	ldr	r2, [pc, #256]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003756:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800375a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375c:	f7fd fec2 	bl	80014e4 <HAL_GetTick>
 8003760:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003762:	e009      	b.n	8003778 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003764:	f7fd febe 	bl	80014e4 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d902      	bls.n	8003778 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	73fb      	strb	r3, [r7, #15]
        break;
 8003776:	e005      	b.n	8003784 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003778:	4b37      	ldr	r3, [pc, #220]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ef      	bne.n	8003764 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d160      	bne.n	800384c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d111      	bne.n	80037b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003790:	4b31      	ldr	r3, [pc, #196]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6892      	ldr	r2, [r2, #8]
 80037a0:	0211      	lsls	r1, r2, #8
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68d2      	ldr	r2, [r2, #12]
 80037a6:	0912      	lsrs	r2, r2, #4
 80037a8:	0452      	lsls	r2, r2, #17
 80037aa:	430a      	orrs	r2, r1
 80037ac:	492a      	ldr	r1, [pc, #168]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	610b      	str	r3, [r1, #16]
 80037b2:	e027      	b.n	8003804 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d112      	bne.n	80037e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ba:	4b27      	ldr	r3, [pc, #156]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80037c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6892      	ldr	r2, [r2, #8]
 80037ca:	0211      	lsls	r1, r2, #8
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6912      	ldr	r2, [r2, #16]
 80037d0:	0852      	lsrs	r2, r2, #1
 80037d2:	3a01      	subs	r2, #1
 80037d4:	0552      	lsls	r2, r2, #21
 80037d6:	430a      	orrs	r2, r1
 80037d8:	491f      	ldr	r1, [pc, #124]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	610b      	str	r3, [r1, #16]
 80037de:	e011      	b.n	8003804 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80037e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6892      	ldr	r2, [r2, #8]
 80037f0:	0211      	lsls	r1, r2, #8
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6952      	ldr	r2, [r2, #20]
 80037f6:	0852      	lsrs	r2, r2, #1
 80037f8:	3a01      	subs	r2, #1
 80037fa:	0652      	lsls	r2, r2, #25
 80037fc:	430a      	orrs	r2, r1
 80037fe:	4916      	ldr	r1, [pc, #88]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003804:	4b14      	ldr	r3, [pc, #80]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a13      	ldr	r2, [pc, #76]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800380e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fd fe68 	bl	80014e4 <HAL_GetTick>
 8003814:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003816:	e009      	b.n	800382c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003818:	f7fd fe64 	bl	80014e4 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d902      	bls.n	800382c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	73fb      	strb	r3, [r7, #15]
          break;
 800382a:	e005      	b.n	8003838 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800382c:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0ef      	beq.n	8003818 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800383e:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	4904      	ldr	r1, [pc, #16]	@ (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800384c:	7bfb      	ldrb	r3, [r7, #15]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000

0800385c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800386a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d018      	beq.n	80038a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003876:	4b67      	ldr	r3, [pc, #412]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0203 	and.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d10d      	bne.n	80038a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
       ||
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800388e:	4b61      	ldr	r3, [pc, #388]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
       ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d047      	beq.n	8003932 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
 80038a6:	e044      	b.n	8003932 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d018      	beq.n	80038e2 <RCCEx_PLLSAI2_Config+0x86>
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d825      	bhi.n	8003900 <RCCEx_PLLSAI2_Config+0xa4>
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d002      	beq.n	80038be <RCCEx_PLLSAI2_Config+0x62>
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d009      	beq.n	80038d0 <RCCEx_PLLSAI2_Config+0x74>
 80038bc:	e020      	b.n	8003900 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038be:	4b55      	ldr	r3, [pc, #340]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d11d      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ce:	e01a      	b.n	8003906 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038d0:	4b50      	ldr	r3, [pc, #320]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d116      	bne.n	800390a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e0:	e013      	b.n	800390a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10f      	bne.n	800390e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ee:	4b49      	ldr	r3, [pc, #292]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038fe:	e006      	b.n	800390e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      break;
 8003904:	e004      	b.n	8003910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003906:	bf00      	nop
 8003908:	e002      	b.n	8003910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800390e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10d      	bne.n	8003932 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003916:	4b3f      	ldr	r3, [pc, #252]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6819      	ldr	r1, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	430b      	orrs	r3, r1
 800392c:	4939      	ldr	r1, [pc, #228]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392e:	4313      	orrs	r3, r2
 8003930:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d167      	bne.n	8003a08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003938:	4b36      	ldr	r3, [pc, #216]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a35      	ldr	r2, [pc, #212]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003944:	f7fd fdce 	bl	80014e4 <HAL_GetTick>
 8003948:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800394a:	e009      	b.n	8003960 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800394c:	f7fd fdca 	bl	80014e4 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d902      	bls.n	8003960 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	73fb      	strb	r3, [r7, #15]
        break;
 800395e:	e005      	b.n	800396c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003960:	4b2c      	ldr	r3, [pc, #176]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ef      	bne.n	800394c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d14a      	bne.n	8003a08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d111      	bne.n	800399c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003978:	4b26      	ldr	r3, [pc, #152]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6892      	ldr	r2, [r2, #8]
 8003988:	0211      	lsls	r1, r2, #8
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68d2      	ldr	r2, [r2, #12]
 800398e:	0912      	lsrs	r2, r2, #4
 8003990:	0452      	lsls	r2, r2, #17
 8003992:	430a      	orrs	r2, r1
 8003994:	491f      	ldr	r1, [pc, #124]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	614b      	str	r3, [r1, #20]
 800399a:	e011      	b.n	80039c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800399c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6892      	ldr	r2, [r2, #8]
 80039ac:	0211      	lsls	r1, r2, #8
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6912      	ldr	r2, [r2, #16]
 80039b2:	0852      	lsrs	r2, r2, #1
 80039b4:	3a01      	subs	r2, #1
 80039b6:	0652      	lsls	r2, r2, #25
 80039b8:	430a      	orrs	r2, r1
 80039ba:	4916      	ldr	r1, [pc, #88]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039c0:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a13      	ldr	r2, [pc, #76]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fd fd8a 	bl	80014e4 <HAL_GetTick>
 80039d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039d2:	e009      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039d4:	f7fd fd86 	bl	80014e4 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	73fb      	strb	r3, [r7, #15]
          break;
 80039e6:	e005      	b.n	80039f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ef      	beq.n	80039d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039fa:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4904      	ldr	r1, [pc, #16]	@ (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000

08003a18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e095      	b.n	8003b56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d108      	bne.n	8003a44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a3a:	d009      	beq.n	8003a50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61da      	str	r2, [r3, #28]
 8003a42:	e005      	b.n	8003a50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd faa0 	bl	8000fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a90:	d902      	bls.n	8003a98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	e002      	b.n	8003a9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003aa6:	d007      	beq.n	8003ab8 <HAL_SPI_Init+0xa0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ab0:	d002      	beq.n	8003ab8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afa:	ea42 0103 	orr.w	r1, r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b02:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	0c1b      	lsrs	r3, r3, #16
 8003b14:	f003 0204 	and.w	r2, r3, #4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b34:	ea42 0103 	orr.w	r1, r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e049      	b.n	8003c04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7fd fa57 	bl	8001038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f000 f835 	bl	8003c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a46      	ldr	r2, [pc, #280]	@ (8003d38 <TIM_Base_SetConfig+0x12c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2a:	d00f      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a43      	ldr	r2, [pc, #268]	@ (8003d3c <TIM_Base_SetConfig+0x130>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00b      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a42      	ldr	r2, [pc, #264]	@ (8003d40 <TIM_Base_SetConfig+0x134>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d007      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a41      	ldr	r2, [pc, #260]	@ (8003d44 <TIM_Base_SetConfig+0x138>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d003      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a40      	ldr	r2, [pc, #256]	@ (8003d48 <TIM_Base_SetConfig+0x13c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d108      	bne.n	8003c5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a35      	ldr	r2, [pc, #212]	@ (8003d38 <TIM_Base_SetConfig+0x12c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01f      	beq.n	8003ca6 <TIM_Base_SetConfig+0x9a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c6c:	d01b      	beq.n	8003ca6 <TIM_Base_SetConfig+0x9a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a32      	ldr	r2, [pc, #200]	@ (8003d3c <TIM_Base_SetConfig+0x130>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d017      	beq.n	8003ca6 <TIM_Base_SetConfig+0x9a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a31      	ldr	r2, [pc, #196]	@ (8003d40 <TIM_Base_SetConfig+0x134>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d013      	beq.n	8003ca6 <TIM_Base_SetConfig+0x9a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a30      	ldr	r2, [pc, #192]	@ (8003d44 <TIM_Base_SetConfig+0x138>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00f      	beq.n	8003ca6 <TIM_Base_SetConfig+0x9a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a2f      	ldr	r2, [pc, #188]	@ (8003d48 <TIM_Base_SetConfig+0x13c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00b      	beq.n	8003ca6 <TIM_Base_SetConfig+0x9a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2e      	ldr	r2, [pc, #184]	@ (8003d4c <TIM_Base_SetConfig+0x140>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d007      	beq.n	8003ca6 <TIM_Base_SetConfig+0x9a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2d      	ldr	r2, [pc, #180]	@ (8003d50 <TIM_Base_SetConfig+0x144>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d003      	beq.n	8003ca6 <TIM_Base_SetConfig+0x9a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8003d54 <TIM_Base_SetConfig+0x148>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d108      	bne.n	8003cb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a16      	ldr	r2, [pc, #88]	@ (8003d38 <TIM_Base_SetConfig+0x12c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00f      	beq.n	8003d04 <TIM_Base_SetConfig+0xf8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a18      	ldr	r2, [pc, #96]	@ (8003d48 <TIM_Base_SetConfig+0x13c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <TIM_Base_SetConfig+0xf8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <TIM_Base_SetConfig+0x140>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d007      	beq.n	8003d04 <TIM_Base_SetConfig+0xf8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a16      	ldr	r2, [pc, #88]	@ (8003d50 <TIM_Base_SetConfig+0x144>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_Base_SetConfig+0xf8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a15      	ldr	r2, [pc, #84]	@ (8003d54 <TIM_Base_SetConfig+0x148>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d103      	bne.n	8003d0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d105      	bne.n	8003d2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f023 0201 	bic.w	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	611a      	str	r2, [r3, #16]
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800
 8003d44:	40000c00 	.word	0x40000c00
 8003d48:	40013400 	.word	0x40013400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40014400 	.word	0x40014400
 8003d54:	40014800 	.word	0x40014800

08003d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e068      	b.n	8003e42 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a2e      	ldr	r2, [pc, #184]	@ (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d108      	bne.n	8003db6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003daa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d01d      	beq.n	8003e16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de2:	d018      	beq.n	8003e16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a1b      	ldr	r2, [pc, #108]	@ (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d013      	beq.n	8003e16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00e      	beq.n	8003e16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a18      	ldr	r2, [pc, #96]	@ (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d009      	beq.n	8003e16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a13      	ldr	r2, [pc, #76]	@ (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d004      	beq.n	8003e16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a14      	ldr	r2, [pc, #80]	@ (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10c      	bne.n	8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40013400 	.word	0x40013400
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40014000 	.word	0x40014000

08003e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e040      	b.n	8003efc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd f8f4 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2224      	movs	r2, #36	@ 0x24
 8003e94:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fae0 	bl	8004474 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f825 	bl	8003f04 <UART_SetConfig>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e01b      	b.n	8003efc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fb5f 	bl	80045b8 <UART_CheckIdleState>
 8003efa:	4603      	mov	r3, r0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f08:	b08a      	sub	sp, #40	@ 0x28
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4ba4      	ldr	r3, [pc, #656]	@ (80041c4 <UART_SetConfig+0x2c0>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a99      	ldr	r2, [pc, #612]	@ (80041c8 <UART_SetConfig+0x2c4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d004      	beq.n	8003f70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f80:	430a      	orrs	r2, r1
 8003f82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a90      	ldr	r2, [pc, #576]	@ (80041cc <UART_SetConfig+0x2c8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d126      	bne.n	8003fdc <UART_SetConfig+0xd8>
 8003f8e:	4b90      	ldr	r3, [pc, #576]	@ (80041d0 <UART_SetConfig+0x2cc>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d81b      	bhi.n	8003fd4 <UART_SetConfig+0xd0>
 8003f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa4 <UART_SetConfig+0xa0>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fb5 	.word	0x08003fb5
 8003fa8:	08003fc5 	.word	0x08003fc5
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08003fcd 	.word	0x08003fcd
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fba:	e116      	b.n	80041ea <UART_SetConfig+0x2e6>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc2:	e112      	b.n	80041ea <UART_SetConfig+0x2e6>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fca:	e10e      	b.n	80041ea <UART_SetConfig+0x2e6>
 8003fcc:	2308      	movs	r3, #8
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd2:	e10a      	b.n	80041ea <UART_SetConfig+0x2e6>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fda:	e106      	b.n	80041ea <UART_SetConfig+0x2e6>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a7c      	ldr	r2, [pc, #496]	@ (80041d4 <UART_SetConfig+0x2d0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d138      	bne.n	8004058 <UART_SetConfig+0x154>
 8003fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80041d0 <UART_SetConfig+0x2cc>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fec:	f003 030c 	and.w	r3, r3, #12
 8003ff0:	2b0c      	cmp	r3, #12
 8003ff2:	d82d      	bhi.n	8004050 <UART_SetConfig+0x14c>
 8003ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ffc <UART_SetConfig+0xf8>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	08004031 	.word	0x08004031
 8004000:	08004051 	.word	0x08004051
 8004004:	08004051 	.word	0x08004051
 8004008:	08004051 	.word	0x08004051
 800400c:	08004041 	.word	0x08004041
 8004010:	08004051 	.word	0x08004051
 8004014:	08004051 	.word	0x08004051
 8004018:	08004051 	.word	0x08004051
 800401c:	08004039 	.word	0x08004039
 8004020:	08004051 	.word	0x08004051
 8004024:	08004051 	.word	0x08004051
 8004028:	08004051 	.word	0x08004051
 800402c:	08004049 	.word	0x08004049
 8004030:	2300      	movs	r3, #0
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004036:	e0d8      	b.n	80041ea <UART_SetConfig+0x2e6>
 8004038:	2302      	movs	r3, #2
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800403e:	e0d4      	b.n	80041ea <UART_SetConfig+0x2e6>
 8004040:	2304      	movs	r3, #4
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004046:	e0d0      	b.n	80041ea <UART_SetConfig+0x2e6>
 8004048:	2308      	movs	r3, #8
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800404e:	e0cc      	b.n	80041ea <UART_SetConfig+0x2e6>
 8004050:	2310      	movs	r3, #16
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004056:	e0c8      	b.n	80041ea <UART_SetConfig+0x2e6>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a5e      	ldr	r2, [pc, #376]	@ (80041d8 <UART_SetConfig+0x2d4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d125      	bne.n	80040ae <UART_SetConfig+0x1aa>
 8004062:	4b5b      	ldr	r3, [pc, #364]	@ (80041d0 <UART_SetConfig+0x2cc>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004068:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800406c:	2b30      	cmp	r3, #48	@ 0x30
 800406e:	d016      	beq.n	800409e <UART_SetConfig+0x19a>
 8004070:	2b30      	cmp	r3, #48	@ 0x30
 8004072:	d818      	bhi.n	80040a6 <UART_SetConfig+0x1a2>
 8004074:	2b20      	cmp	r3, #32
 8004076:	d00a      	beq.n	800408e <UART_SetConfig+0x18a>
 8004078:	2b20      	cmp	r3, #32
 800407a:	d814      	bhi.n	80040a6 <UART_SetConfig+0x1a2>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <UART_SetConfig+0x182>
 8004080:	2b10      	cmp	r3, #16
 8004082:	d008      	beq.n	8004096 <UART_SetConfig+0x192>
 8004084:	e00f      	b.n	80040a6 <UART_SetConfig+0x1a2>
 8004086:	2300      	movs	r3, #0
 8004088:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800408c:	e0ad      	b.n	80041ea <UART_SetConfig+0x2e6>
 800408e:	2302      	movs	r3, #2
 8004090:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004094:	e0a9      	b.n	80041ea <UART_SetConfig+0x2e6>
 8004096:	2304      	movs	r3, #4
 8004098:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800409c:	e0a5      	b.n	80041ea <UART_SetConfig+0x2e6>
 800409e:	2308      	movs	r3, #8
 80040a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a4:	e0a1      	b.n	80041ea <UART_SetConfig+0x2e6>
 80040a6:	2310      	movs	r3, #16
 80040a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ac:	e09d      	b.n	80041ea <UART_SetConfig+0x2e6>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a4a      	ldr	r2, [pc, #296]	@ (80041dc <UART_SetConfig+0x2d8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d125      	bne.n	8004104 <UART_SetConfig+0x200>
 80040b8:	4b45      	ldr	r3, [pc, #276]	@ (80041d0 <UART_SetConfig+0x2cc>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80040c4:	d016      	beq.n	80040f4 <UART_SetConfig+0x1f0>
 80040c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80040c8:	d818      	bhi.n	80040fc <UART_SetConfig+0x1f8>
 80040ca:	2b80      	cmp	r3, #128	@ 0x80
 80040cc:	d00a      	beq.n	80040e4 <UART_SetConfig+0x1e0>
 80040ce:	2b80      	cmp	r3, #128	@ 0x80
 80040d0:	d814      	bhi.n	80040fc <UART_SetConfig+0x1f8>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <UART_SetConfig+0x1d8>
 80040d6:	2b40      	cmp	r3, #64	@ 0x40
 80040d8:	d008      	beq.n	80040ec <UART_SetConfig+0x1e8>
 80040da:	e00f      	b.n	80040fc <UART_SetConfig+0x1f8>
 80040dc:	2300      	movs	r3, #0
 80040de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040e2:	e082      	b.n	80041ea <UART_SetConfig+0x2e6>
 80040e4:	2302      	movs	r3, #2
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ea:	e07e      	b.n	80041ea <UART_SetConfig+0x2e6>
 80040ec:	2304      	movs	r3, #4
 80040ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040f2:	e07a      	b.n	80041ea <UART_SetConfig+0x2e6>
 80040f4:	2308      	movs	r3, #8
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040fa:	e076      	b.n	80041ea <UART_SetConfig+0x2e6>
 80040fc:	2310      	movs	r3, #16
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004102:	e072      	b.n	80041ea <UART_SetConfig+0x2e6>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a35      	ldr	r2, [pc, #212]	@ (80041e0 <UART_SetConfig+0x2dc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d12a      	bne.n	8004164 <UART_SetConfig+0x260>
 800410e:	4b30      	ldr	r3, [pc, #192]	@ (80041d0 <UART_SetConfig+0x2cc>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004114:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004118:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800411c:	d01a      	beq.n	8004154 <UART_SetConfig+0x250>
 800411e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004122:	d81b      	bhi.n	800415c <UART_SetConfig+0x258>
 8004124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004128:	d00c      	beq.n	8004144 <UART_SetConfig+0x240>
 800412a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412e:	d815      	bhi.n	800415c <UART_SetConfig+0x258>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <UART_SetConfig+0x238>
 8004134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004138:	d008      	beq.n	800414c <UART_SetConfig+0x248>
 800413a:	e00f      	b.n	800415c <UART_SetConfig+0x258>
 800413c:	2300      	movs	r3, #0
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004142:	e052      	b.n	80041ea <UART_SetConfig+0x2e6>
 8004144:	2302      	movs	r3, #2
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800414a:	e04e      	b.n	80041ea <UART_SetConfig+0x2e6>
 800414c:	2304      	movs	r3, #4
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004152:	e04a      	b.n	80041ea <UART_SetConfig+0x2e6>
 8004154:	2308      	movs	r3, #8
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800415a:	e046      	b.n	80041ea <UART_SetConfig+0x2e6>
 800415c:	2310      	movs	r3, #16
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004162:	e042      	b.n	80041ea <UART_SetConfig+0x2e6>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a17      	ldr	r2, [pc, #92]	@ (80041c8 <UART_SetConfig+0x2c4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d13a      	bne.n	80041e4 <UART_SetConfig+0x2e0>
 800416e:	4b18      	ldr	r3, [pc, #96]	@ (80041d0 <UART_SetConfig+0x2cc>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004174:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004178:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800417c:	d01a      	beq.n	80041b4 <UART_SetConfig+0x2b0>
 800417e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004182:	d81b      	bhi.n	80041bc <UART_SetConfig+0x2b8>
 8004184:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004188:	d00c      	beq.n	80041a4 <UART_SetConfig+0x2a0>
 800418a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800418e:	d815      	bhi.n	80041bc <UART_SetConfig+0x2b8>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <UART_SetConfig+0x298>
 8004194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004198:	d008      	beq.n	80041ac <UART_SetConfig+0x2a8>
 800419a:	e00f      	b.n	80041bc <UART_SetConfig+0x2b8>
 800419c:	2300      	movs	r3, #0
 800419e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041a2:	e022      	b.n	80041ea <UART_SetConfig+0x2e6>
 80041a4:	2302      	movs	r3, #2
 80041a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041aa:	e01e      	b.n	80041ea <UART_SetConfig+0x2e6>
 80041ac:	2304      	movs	r3, #4
 80041ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041b2:	e01a      	b.n	80041ea <UART_SetConfig+0x2e6>
 80041b4:	2308      	movs	r3, #8
 80041b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ba:	e016      	b.n	80041ea <UART_SetConfig+0x2e6>
 80041bc:	2310      	movs	r3, #16
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041c2:	e012      	b.n	80041ea <UART_SetConfig+0x2e6>
 80041c4:	efff69f3 	.word	0xefff69f3
 80041c8:	40008000 	.word	0x40008000
 80041cc:	40013800 	.word	0x40013800
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40004400 	.word	0x40004400
 80041d8:	40004800 	.word	0x40004800
 80041dc:	40004c00 	.word	0x40004c00
 80041e0:	40005000 	.word	0x40005000
 80041e4:	2310      	movs	r3, #16
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a9f      	ldr	r2, [pc, #636]	@ (800446c <UART_SetConfig+0x568>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d17a      	bne.n	80042ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d824      	bhi.n	8004246 <UART_SetConfig+0x342>
 80041fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004204 <UART_SetConfig+0x300>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	08004229 	.word	0x08004229
 8004208:	08004247 	.word	0x08004247
 800420c:	08004231 	.word	0x08004231
 8004210:	08004247 	.word	0x08004247
 8004214:	08004237 	.word	0x08004237
 8004218:	08004247 	.word	0x08004247
 800421c:	08004247 	.word	0x08004247
 8004220:	08004247 	.word	0x08004247
 8004224:	0800423f 	.word	0x0800423f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004228:	f7fe fe9e 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 800422c:	61f8      	str	r0, [r7, #28]
        break;
 800422e:	e010      	b.n	8004252 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004230:	4b8f      	ldr	r3, [pc, #572]	@ (8004470 <UART_SetConfig+0x56c>)
 8004232:	61fb      	str	r3, [r7, #28]
        break;
 8004234:	e00d      	b.n	8004252 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004236:	f7fe fdff 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 800423a:	61f8      	str	r0, [r7, #28]
        break;
 800423c:	e009      	b.n	8004252 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800423e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004242:	61fb      	str	r3, [r7, #28]
        break;
 8004244:	e005      	b.n	8004252 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004250:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80fb 	beq.w	8004450 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	4413      	add	r3, r2
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	429a      	cmp	r2, r3
 8004268:	d305      	bcc.n	8004276 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	429a      	cmp	r2, r3
 8004274:	d903      	bls.n	800427e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800427c:	e0e8      	b.n	8004450 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	2200      	movs	r2, #0
 8004282:	461c      	mov	r4, r3
 8004284:	4615      	mov	r5, r2
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	022b      	lsls	r3, r5, #8
 8004290:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004294:	0222      	lsls	r2, r4, #8
 8004296:	68f9      	ldr	r1, [r7, #12]
 8004298:	6849      	ldr	r1, [r1, #4]
 800429a:	0849      	lsrs	r1, r1, #1
 800429c:	2000      	movs	r0, #0
 800429e:	4688      	mov	r8, r1
 80042a0:	4681      	mov	r9, r0
 80042a2:	eb12 0a08 	adds.w	sl, r2, r8
 80042a6:	eb43 0b09 	adc.w	fp, r3, r9
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	603b      	str	r3, [r7, #0]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b8:	4650      	mov	r0, sl
 80042ba:	4659      	mov	r1, fp
 80042bc:	f7fb ff88 	bl	80001d0 <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4613      	mov	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ce:	d308      	bcc.n	80042e2 <UART_SetConfig+0x3de>
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042d6:	d204      	bcs.n	80042e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	60da      	str	r2, [r3, #12]
 80042e0:	e0b6      	b.n	8004450 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042e8:	e0b2      	b.n	8004450 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042f2:	d15e      	bne.n	80043b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80042f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d828      	bhi.n	800434e <UART_SetConfig+0x44a>
 80042fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004304 <UART_SetConfig+0x400>)
 80042fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004302:	bf00      	nop
 8004304:	08004329 	.word	0x08004329
 8004308:	08004331 	.word	0x08004331
 800430c:	08004339 	.word	0x08004339
 8004310:	0800434f 	.word	0x0800434f
 8004314:	0800433f 	.word	0x0800433f
 8004318:	0800434f 	.word	0x0800434f
 800431c:	0800434f 	.word	0x0800434f
 8004320:	0800434f 	.word	0x0800434f
 8004324:	08004347 	.word	0x08004347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004328:	f7fe fe1e 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 800432c:	61f8      	str	r0, [r7, #28]
        break;
 800432e:	e014      	b.n	800435a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004330:	f7fe fe30 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 8004334:	61f8      	str	r0, [r7, #28]
        break;
 8004336:	e010      	b.n	800435a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004338:	4b4d      	ldr	r3, [pc, #308]	@ (8004470 <UART_SetConfig+0x56c>)
 800433a:	61fb      	str	r3, [r7, #28]
        break;
 800433c:	e00d      	b.n	800435a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800433e:	f7fe fd7b 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8004342:	61f8      	str	r0, [r7, #28]
        break;
 8004344:	e009      	b.n	800435a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800434a:	61fb      	str	r3, [r7, #28]
        break;
 800434c:	e005      	b.n	800435a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d077      	beq.n	8004450 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	005a      	lsls	r2, r3, #1
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	441a      	add	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b0f      	cmp	r3, #15
 800437a:	d916      	bls.n	80043aa <UART_SetConfig+0x4a6>
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004382:	d212      	bcs.n	80043aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	b29b      	uxth	r3, r3
 8004388:	f023 030f 	bic.w	r3, r3, #15
 800438c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	b29b      	uxth	r3, r3
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	b29a      	uxth	r2, r3
 800439a:	8afb      	ldrh	r3, [r7, #22]
 800439c:	4313      	orrs	r3, r2
 800439e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	8afa      	ldrh	r2, [r7, #22]
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	e052      	b.n	8004450 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80043b0:	e04e      	b.n	8004450 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d827      	bhi.n	800440a <UART_SetConfig+0x506>
 80043ba:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <UART_SetConfig+0x4bc>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	080043e5 	.word	0x080043e5
 80043c4:	080043ed 	.word	0x080043ed
 80043c8:	080043f5 	.word	0x080043f5
 80043cc:	0800440b 	.word	0x0800440b
 80043d0:	080043fb 	.word	0x080043fb
 80043d4:	0800440b 	.word	0x0800440b
 80043d8:	0800440b 	.word	0x0800440b
 80043dc:	0800440b 	.word	0x0800440b
 80043e0:	08004403 	.word	0x08004403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e4:	f7fe fdc0 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 80043e8:	61f8      	str	r0, [r7, #28]
        break;
 80043ea:	e014      	b.n	8004416 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043ec:	f7fe fdd2 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 80043f0:	61f8      	str	r0, [r7, #28]
        break;
 80043f2:	e010      	b.n	8004416 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004470 <UART_SetConfig+0x56c>)
 80043f6:	61fb      	str	r3, [r7, #28]
        break;
 80043f8:	e00d      	b.n	8004416 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043fa:	f7fe fd1d 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 80043fe:	61f8      	str	r0, [r7, #28]
        break;
 8004400:	e009      	b.n	8004416 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004406:	61fb      	str	r3, [r7, #28]
        break;
 8004408:	e005      	b.n	8004416 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004414:	bf00      	nop
    }

    if (pclk != 0U)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d019      	beq.n	8004450 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	085a      	lsrs	r2, r3, #1
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	441a      	add	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	fbb2 f3f3 	udiv	r3, r2, r3
 800442e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b0f      	cmp	r3, #15
 8004434:	d909      	bls.n	800444a <UART_SetConfig+0x546>
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800443c:	d205      	bcs.n	800444a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60da      	str	r2, [r3, #12]
 8004448:	e002      	b.n	8004450 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800445c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004460:	4618      	mov	r0, r3
 8004462:	3728      	adds	r7, #40	@ 0x28
 8004464:	46bd      	mov	sp, r7
 8004466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800446a:	bf00      	nop
 800446c:	40008000 	.word	0x40008000
 8004470:	00f42400 	.word	0x00f42400

08004474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01a      	beq.n	800458a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004572:	d10a      	bne.n	800458a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
  }
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b098      	sub	sp, #96	@ 0x60
 80045bc:	af02      	add	r7, sp, #8
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045c8:	f7fc ff8c 	bl	80014e4 <HAL_GetTick>
 80045cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d12e      	bne.n	800463a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045e4:	2200      	movs	r2, #0
 80045e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f88c 	bl	8004708 <UART_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d021      	beq.n	800463a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800460a:	653b      	str	r3, [r7, #80]	@ 0x50
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004614:	647b      	str	r3, [r7, #68]	@ 0x44
 8004616:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800461a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e6      	bne.n	80045f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e062      	b.n	8004700 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b04      	cmp	r3, #4
 8004646:	d149      	bne.n	80046dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004648:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004650:	2200      	movs	r2, #0
 8004652:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f856 	bl	8004708 <UART_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d03c      	beq.n	80046dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	623b      	str	r3, [r7, #32]
   return(result);
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004680:	633b      	str	r3, [r7, #48]	@ 0x30
 8004682:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800468e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e6      	bne.n	8004662 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3308      	adds	r3, #8
 800469a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3308      	adds	r3, #8
 80046b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046b4:	61fa      	str	r2, [r7, #28]
 80046b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	69b9      	ldr	r1, [r7, #24]
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	617b      	str	r3, [r7, #20]
   return(result);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e5      	bne.n	8004694 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e011      	b.n	8004700 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3758      	adds	r7, #88	@ 0x58
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004718:	e04f      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d04b      	beq.n	80047ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004722:	f7fc fedf 	bl	80014e4 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	429a      	cmp	r2, r3
 8004730:	d302      	bcc.n	8004738 <UART_WaitOnFlagUntilTimeout+0x30>
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e04e      	b.n	80047da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d037      	beq.n	80047ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b80      	cmp	r3, #128	@ 0x80
 800474e:	d034      	beq.n	80047ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b40      	cmp	r3, #64	@ 0x40
 8004754:	d031      	beq.n	80047ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b08      	cmp	r3, #8
 8004762:	d110      	bne.n	8004786 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2208      	movs	r2, #8
 800476a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f838 	bl	80047e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2208      	movs	r2, #8
 8004776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e029      	b.n	80047da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004794:	d111      	bne.n	80047ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800479e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f81e 	bl	80047e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e00f      	b.n	80047da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4013      	ands	r3, r2
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	bf0c      	ite	eq
 80047ca:	2301      	moveq	r3, #1
 80047cc:	2300      	movne	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d0a0      	beq.n	800471a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b095      	sub	sp, #84	@ 0x54
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004808:	643b      	str	r3, [r7, #64]	@ 0x40
 800480a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800480e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e6      	bne.n	80047ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3308      	adds	r3, #8
 8004822:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	61fb      	str	r3, [r7, #28]
   return(result);
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3308      	adds	r3, #8
 800483a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800483c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800483e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e5      	bne.n	800481c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004854:	2b01      	cmp	r3, #1
 8004856:	d118      	bne.n	800488a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	60bb      	str	r3, [r7, #8]
   return(result);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f023 0310 	bic.w	r3, r3, #16
 800486c:	647b      	str	r3, [r7, #68]	@ 0x44
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	6979      	ldr	r1, [r7, #20]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	613b      	str	r3, [r7, #16]
   return(result);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e6      	bne.n	8004858 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800489e:	bf00      	nop
 80048a0:	3754      	adds	r7, #84	@ 0x54
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048aa:	b084      	sub	sp, #16
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	f107 001c 	add.w	r0, r7, #28
 80048b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fa69 	bl	8004da0 <USB_CoreReset>
 80048ce:	4603      	mov	r3, r0
 80048d0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80048d2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80048e6:	e005      	b.n	80048f4 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004900:	b004      	add	sp, #16
 8004902:	4770      	bx	lr

08004904 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f023 0201 	bic.w	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	460b      	mov	r3, r1
 8004930:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d115      	bne.n	8004974 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004954:	200a      	movs	r0, #10
 8004956:	f7fc fdd1 	bl	80014fc <HAL_Delay>
      ms += 10U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	330a      	adds	r3, #10
 800495e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fa0f 	bl	8004d84 <USB_GetMode>
 8004966:	4603      	mov	r3, r0
 8004968:	2b01      	cmp	r3, #1
 800496a:	d01e      	beq.n	80049aa <USB_SetCurrentMode+0x84>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004970:	d9f0      	bls.n	8004954 <USB_SetCurrentMode+0x2e>
 8004972:	e01a      	b.n	80049aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d115      	bne.n	80049a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004986:	200a      	movs	r0, #10
 8004988:	f7fc fdb8 	bl	80014fc <HAL_Delay>
      ms += 10U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	330a      	adds	r3, #10
 8004990:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f9f6 	bl	8004d84 <USB_GetMode>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <USB_SetCurrentMode+0x84>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80049a2:	d9f0      	bls.n	8004986 <USB_SetCurrentMode+0x60>
 80049a4:	e001      	b.n	80049aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e005      	b.n	80049b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80049ae:	d101      	bne.n	80049b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049c0:	b084      	sub	sp, #16
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80049ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	e009      	b.n	80049f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	3340      	adds	r3, #64	@ 0x40
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	2200      	movs	r2, #0
 80049ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3301      	adds	r3, #1
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b0e      	cmp	r3, #14
 80049f8:	d9f2      	bls.n	80049e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d11c      	bne.n	8004a3c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a10:	f043 0302 	orr.w	r3, r3, #2
 8004a14:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e005      	b.n	8004a48 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a4e:	461a      	mov	r2, r3
 8004a50:	2300      	movs	r3, #0
 8004a52:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a54:	2103      	movs	r1, #3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f95a 	bl	8004d10 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a5c:	2110      	movs	r1, #16
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f8f6 	bl	8004c50 <USB_FlushTxFifo>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f920 	bl	8004cb4 <USB_FlushRxFifo>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a84:	461a      	mov	r2, r3
 8004a86:	2300      	movs	r3, #0
 8004a88:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a90:	461a      	mov	r2, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	e043      	b.n	8004b30 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004aba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004abe:	d118      	bne.n	8004af2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e013      	b.n	8004b04 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae8:	461a      	mov	r2, r3
 8004aea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	e008      	b.n	8004b04 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afe:	461a      	mov	r2, r3
 8004b00:	2300      	movs	r3, #0
 8004b02:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b10:	461a      	mov	r2, r3
 8004b12:	2300      	movs	r3, #0
 8004b14:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b22:	461a      	mov	r2, r3
 8004b24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b34:	461a      	mov	r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d3b5      	bcc.n	8004aa8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	e043      	b.n	8004bca <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b58:	d118      	bne.n	8004b8c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	e013      	b.n	8004b9e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b82:	461a      	mov	r2, r3
 8004b84:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e008      	b.n	8004b9e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004baa:	461a      	mov	r2, r3
 8004bac:	2300      	movs	r3, #0
 8004bae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004bc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004bce:	461a      	mov	r2, r3
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d3b5      	bcc.n	8004b42 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004be8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004bf6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	f043 0210 	orr.w	r2, r3, #16
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	4b10      	ldr	r3, [pc, #64]	@ (8004c4c <USB_DevInit+0x28c>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f043 0208 	orr.w	r2, r3, #8
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d107      	bne.n	8004c3c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c34:	f043 0304 	orr.w	r3, r3, #4
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c48:	b004      	add	sp, #16
 8004c4a:	4770      	bx	lr
 8004c4c:	803c3800 	.word	0x803c3800

08004c50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3301      	adds	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c6a:	d901      	bls.n	8004c70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e01b      	b.n	8004ca8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	daf2      	bge.n	8004c5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	019b      	lsls	r3, r3, #6
 8004c80:	f043 0220 	orr.w	r2, r3, #32
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c94:	d901      	bls.n	8004c9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e006      	b.n	8004ca8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d0f0      	beq.n	8004c88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ccc:	d901      	bls.n	8004cd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e018      	b.n	8004d04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	daf2      	bge.n	8004cc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2210      	movs	r2, #16
 8004ce2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cf0:	d901      	bls.n	8004cf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e006      	b.n	8004d04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	2b10      	cmp	r3, #16
 8004d00:	d0f0      	beq.n	8004ce4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	68f9      	ldr	r1, [r7, #12]
 8004d2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004d5c:	f023 0303 	bic.w	r3, r3, #3
 8004d60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d70:	f043 0302 	orr.w	r3, r3, #2
 8004d74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	f003 0301 	and.w	r3, r3, #1
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004db8:	d901      	bls.n	8004dbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e01b      	b.n	8004df6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	daf2      	bge.n	8004dac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f043 0201 	orr.w	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004de2:	d901      	bls.n	8004de8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e006      	b.n	8004df6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d0f0      	beq.n	8004dd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <__NVIC_SetPriority>:
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	6039      	str	r1, [r7, #0]
 8004e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	db0a      	blt.n	8004e2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	490c      	ldr	r1, [pc, #48]	@ (8004e50 <__NVIC_SetPriority+0x4c>)
 8004e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e22:	0112      	lsls	r2, r2, #4
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	440b      	add	r3, r1
 8004e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004e2c:	e00a      	b.n	8004e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	4908      	ldr	r1, [pc, #32]	@ (8004e54 <__NVIC_SetPriority+0x50>)
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	3b04      	subs	r3, #4
 8004e3c:	0112      	lsls	r2, r2, #4
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	440b      	add	r3, r1
 8004e42:	761a      	strb	r2, [r3, #24]
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	e000e100 	.word	0xe000e100
 8004e54:	e000ed00 	.word	0xe000ed00

08004e58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	f06f 0004 	mvn.w	r0, #4
 8004e62:	f7ff ffcf 	bl	8004e04 <__NVIC_SetPriority>
#endif
}
 8004e66:	bf00      	nop
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e72:	f3ef 8305 	mrs	r3, IPSR
 8004e76:	603b      	str	r3, [r7, #0]
  return(result);
 8004e78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e7e:	f06f 0305 	mvn.w	r3, #5
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	e00c      	b.n	8004ea0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e86:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <osKernelInitialize+0x44>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d105      	bne.n	8004e9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e8e:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <osKernelInitialize+0x44>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	e002      	b.n	8004ea0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ea0:	687b      	ldr	r3, [r7, #4]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	200007e0 	.word	0x200007e0

08004eb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eba:	f3ef 8305 	mrs	r3, IPSR
 8004ebe:	603b      	str	r3, [r7, #0]
  return(result);
 8004ec0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <osKernelStart+0x1a>
    stat = osErrorISR;
 8004ec6:	f06f 0305 	mvn.w	r3, #5
 8004eca:	607b      	str	r3, [r7, #4]
 8004ecc:	e010      	b.n	8004ef0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ece:	4b0b      	ldr	r3, [pc, #44]	@ (8004efc <osKernelStart+0x48>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d109      	bne.n	8004eea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ed6:	f7ff ffbf 	bl	8004e58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004eda:	4b08      	ldr	r3, [pc, #32]	@ (8004efc <osKernelStart+0x48>)
 8004edc:	2202      	movs	r2, #2
 8004ede:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ee0:	f001 facc 	bl	800647c <vTaskStartScheduler>
      stat = osOK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	e002      	b.n	8004ef0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004eea:	f04f 33ff 	mov.w	r3, #4294967295
 8004eee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ef0:	687b      	ldr	r3, [r7, #4]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	200007e0 	.word	0x200007e0

08004f00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08e      	sub	sp, #56	@ 0x38
 8004f04:	af04      	add	r7, sp, #16
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f10:	f3ef 8305 	mrs	r3, IPSR
 8004f14:	617b      	str	r3, [r7, #20]
  return(result);
 8004f16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d17e      	bne.n	800501a <osThreadNew+0x11a>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d07b      	beq.n	800501a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f22:	2380      	movs	r3, #128	@ 0x80
 8004f24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f26:	2318      	movs	r3, #24
 8004f28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d045      	beq.n	8004fc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <osThreadNew+0x48>
        name = attr->name;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <osThreadNew+0x6e>
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b38      	cmp	r3, #56	@ 0x38
 8004f60:	d805      	bhi.n	8004f6e <osThreadNew+0x6e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <osThreadNew+0x72>
        return (NULL);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	e054      	b.n	800501c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	089b      	lsrs	r3, r3, #2
 8004f80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00e      	beq.n	8004fa8 <osThreadNew+0xa8>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004f90:	d90a      	bls.n	8004fa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d006      	beq.n	8004fa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <osThreadNew+0xa8>
        mem = 1;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	e010      	b.n	8004fca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10c      	bne.n	8004fca <osThreadNew+0xca>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d108      	bne.n	8004fca <osThreadNew+0xca>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d104      	bne.n	8004fca <osThreadNew+0xca>
          mem = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61bb      	str	r3, [r7, #24]
 8004fc4:	e001      	b.n	8004fca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d110      	bne.n	8004ff2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fd8:	9202      	str	r2, [sp, #8]
 8004fda:	9301      	str	r3, [sp, #4]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	6a3a      	ldr	r2, [r7, #32]
 8004fe4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f001 f86c 	bl	80060c4 <xTaskCreateStatic>
 8004fec:	4603      	mov	r3, r0
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	e013      	b.n	800501a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d110      	bne.n	800501a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	f107 0310 	add.w	r3, r7, #16
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f001 f8ba 	bl	8006184 <xTaskCreate>
 8005010:	4603      	mov	r3, r0
 8005012:	2b01      	cmp	r3, #1
 8005014:	d001      	beq.n	800501a <osThreadNew+0x11a>
            hTask = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800501a:	693b      	ldr	r3, [r7, #16]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3728      	adds	r7, #40	@ 0x28
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800502c:	f3ef 8305 	mrs	r3, IPSR
 8005030:	60bb      	str	r3, [r7, #8]
  return(result);
 8005032:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <osDelay+0x1c>
    stat = osErrorISR;
 8005038:	f06f 0305 	mvn.w	r3, #5
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	e007      	b.n	8005050 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <osDelay+0x2c>
      vTaskDelay(ticks);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f001 f9e0 	bl	8006410 <vTaskDelay>
    }
  }

  return (stat);
 8005050:	68fb      	ldr	r3, [r7, #12]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800505a:	b580      	push	{r7, lr}
 800505c:	b088      	sub	sp, #32
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005066:	f3ef 8305 	mrs	r3, IPSR
 800506a:	60bb      	str	r3, [r7, #8]
  return(result);
 800506c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800506e:	2b00      	cmp	r3, #0
 8005070:	d174      	bne.n	800515c <osMutexNew+0x102>
    if (attr != NULL) {
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	e001      	b.n	8005084 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <osMutexNew+0x3a>
      rmtx = 1U;
 800508e:	2301      	movs	r3, #1
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	e001      	b.n	8005098 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d15c      	bne.n	800515c <osMutexNew+0x102>
      mem = -1;
 80050a2:	f04f 33ff 	mov.w	r3, #4294967295
 80050a6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d015      	beq.n	80050da <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d006      	beq.n	80050c4 <osMutexNew+0x6a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	2b4f      	cmp	r3, #79	@ 0x4f
 80050bc:	d902      	bls.n	80050c4 <osMutexNew+0x6a>
          mem = 1;
 80050be:	2301      	movs	r3, #1
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	e00c      	b.n	80050de <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d108      	bne.n	80050de <osMutexNew+0x84>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d104      	bne.n	80050de <osMutexNew+0x84>
            mem = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	e001      	b.n	80050de <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d112      	bne.n	800510a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	4619      	mov	r1, r3
 80050f0:	2004      	movs	r0, #4
 80050f2:	f000 fb20 	bl	8005736 <xQueueCreateMutexStatic>
 80050f6:	61f8      	str	r0, [r7, #28]
 80050f8:	e016      	b.n	8005128 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	4619      	mov	r1, r3
 8005100:	2001      	movs	r0, #1
 8005102:	f000 fb18 	bl	8005736 <xQueueCreateMutexStatic>
 8005106:	61f8      	str	r0, [r7, #28]
 8005108:	e00e      	b.n	8005128 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10b      	bne.n	8005128 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005116:	2004      	movs	r0, #4
 8005118:	f000 faf5 	bl	8005706 <xQueueCreateMutex>
 800511c:	61f8      	str	r0, [r7, #28]
 800511e:	e003      	b.n	8005128 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005120:	2001      	movs	r0, #1
 8005122:	f000 faf0 	bl	8005706 <xQueueCreateMutex>
 8005126:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00c      	beq.n	8005148 <osMutexNew+0xee>
        if (attr != NULL) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <osMutexNew+0xe2>
          name = attr->name;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	e001      	b.n	8005140 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005140:	68f9      	ldr	r1, [r7, #12]
 8005142:	69f8      	ldr	r0, [r7, #28]
 8005144:	f000 ff36 	bl	8005fb4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d006      	beq.n	800515c <osMutexNew+0x102>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800515c:	69fb      	ldr	r3, [r7, #28]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3720      	adds	r7, #32
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005166:	b580      	push	{r7, lr}
 8005168:	b08a      	sub	sp, #40	@ 0x28
 800516a:	af02      	add	r7, sp, #8
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005176:	f3ef 8305 	mrs	r3, IPSR
 800517a:	613b      	str	r3, [r7, #16]
  return(result);
 800517c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800517e:	2b00      	cmp	r3, #0
 8005180:	d175      	bne.n	800526e <osSemaphoreNew+0x108>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d072      	beq.n	800526e <osSemaphoreNew+0x108>
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	429a      	cmp	r2, r3
 800518e:	d86e      	bhi.n	800526e <osSemaphoreNew+0x108>
    mem = -1;
 8005190:	f04f 33ff 	mov.w	r3, #4294967295
 8005194:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d015      	beq.n	80051c8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d006      	beq.n	80051b2 <osSemaphoreNew+0x4c>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2b4f      	cmp	r3, #79	@ 0x4f
 80051aa:	d902      	bls.n	80051b2 <osSemaphoreNew+0x4c>
        mem = 1;
 80051ac:	2301      	movs	r3, #1
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	e00c      	b.n	80051cc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d108      	bne.n	80051cc <osSemaphoreNew+0x66>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d104      	bne.n	80051cc <osSemaphoreNew+0x66>
          mem = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	e001      	b.n	80051cc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d2:	d04c      	beq.n	800526e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d128      	bne.n	800522c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d10a      	bne.n	80051f6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2203      	movs	r2, #3
 80051e6:	9200      	str	r2, [sp, #0]
 80051e8:	2200      	movs	r2, #0
 80051ea:	2100      	movs	r1, #0
 80051ec:	2001      	movs	r0, #1
 80051ee:	f000 f995 	bl	800551c <xQueueGenericCreateStatic>
 80051f2:	61f8      	str	r0, [r7, #28]
 80051f4:	e005      	b.n	8005202 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80051f6:	2203      	movs	r2, #3
 80051f8:	2100      	movs	r1, #0
 80051fa:	2001      	movs	r0, #1
 80051fc:	f000 fa0b 	bl	8005616 <xQueueGenericCreate>
 8005200:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d022      	beq.n	800524e <osSemaphoreNew+0xe8>
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01f      	beq.n	800524e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800520e:	2300      	movs	r3, #0
 8005210:	2200      	movs	r2, #0
 8005212:	2100      	movs	r1, #0
 8005214:	69f8      	ldr	r0, [r7, #28]
 8005216:	f000 fb17 	bl	8005848 <xQueueGenericSend>
 800521a:	4603      	mov	r3, r0
 800521c:	2b01      	cmp	r3, #1
 800521e:	d016      	beq.n	800524e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005220:	69f8      	ldr	r0, [r7, #28]
 8005222:	f000 fd93 	bl	8005d4c <vQueueDelete>
            hSemaphore = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	e010      	b.n	800524e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d108      	bne.n	8005244 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	461a      	mov	r2, r3
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fa96 	bl	800576c <xQueueCreateCountingSemaphoreStatic>
 8005240:	61f8      	str	r0, [r7, #28]
 8005242:	e004      	b.n	800524e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 fac9 	bl	80057de <xQueueCreateCountingSemaphore>
 800524c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00c      	beq.n	800526e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <osSemaphoreNew+0xfc>
          name = attr->name;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	e001      	b.n	8005266 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005266:	6979      	ldr	r1, [r7, #20]
 8005268:	69f8      	ldr	r0, [r7, #28]
 800526a:	f000 fea3 	bl	8005fb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800526e:	69fb      	ldr	r3, [r7, #28]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4a07      	ldr	r2, [pc, #28]	@ (80052a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005288:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	4a06      	ldr	r2, [pc, #24]	@ (80052a8 <vApplicationGetIdleTaskMemory+0x30>)
 800528e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2280      	movs	r2, #128	@ 0x80
 8005294:	601a      	str	r2, [r3, #0]
}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	200007e4 	.word	0x200007e4
 80052a8:	20000840 	.word	0x20000840

080052ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4a07      	ldr	r2, [pc, #28]	@ (80052d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80052bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4a06      	ldr	r2, [pc, #24]	@ (80052dc <vApplicationGetTimerTaskMemory+0x30>)
 80052c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052ca:	601a      	str	r2, [r3, #0]
}
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	20000a40 	.word	0x20000a40
 80052dc:	20000a9c 	.word	0x20000a9c

080052e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f103 0208 	add.w	r2, r3, #8
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f04f 32ff 	mov.w	r2, #4294967295
 80052f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f103 0208 	add.w	r2, r3, #8
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f103 0208 	add.w	r2, r3, #8
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800533a:	b480      	push	{r7}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	601a      	str	r2, [r3, #0]
}
 8005376:	bf00      	nop
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005398:	d103      	bne.n	80053a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e00c      	b.n	80053bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3308      	adds	r3, #8
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e002      	b.n	80053b0 <vListInsert+0x2e>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d2f6      	bcs.n	80053aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	601a      	str	r2, [r3, #0]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6892      	ldr	r2, [r2, #8]
 800540a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6852      	ldr	r2, [r2, #4]
 8005414:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	429a      	cmp	r2, r3
 800541e:	d103      	bne.n	8005428 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	1e5a      	subs	r2, r3, #1
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10b      	bne.n	8005474 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	e7fd      	b.n	8005470 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005474:	f002 f9c0 	bl	80077f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005480:	68f9      	ldr	r1, [r7, #12]
 8005482:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005484:	fb01 f303 	mul.w	r3, r1, r3
 8005488:	441a      	add	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a4:	3b01      	subs	r3, #1
 80054a6:	68f9      	ldr	r1, [r7, #12]
 80054a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80054aa:	fb01 f303 	mul.w	r3, r1, r3
 80054ae:	441a      	add	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	22ff      	movs	r2, #255	@ 0xff
 80054b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	22ff      	movs	r2, #255	@ 0xff
 80054c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d114      	bne.n	80054f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d01a      	beq.n	8005508 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3310      	adds	r3, #16
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 fa5e 	bl	8006998 <xTaskRemoveFromEventList>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d012      	beq.n	8005508 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005518 <xQueueGenericReset+0xd0>)
 80054e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	e009      	b.n	8005508 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3310      	adds	r3, #16
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff fef1 	bl	80052e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3324      	adds	r3, #36	@ 0x24
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff feec 	bl	80052e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005508:	f002 f9a8 	bl	800785c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800550c:	2301      	movs	r3, #1
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08e      	sub	sp, #56	@ 0x38
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10b      	bne.n	8005548 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	e7fd      	b.n	8005544 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10b      	bne.n	8005566 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	e7fd      	b.n	8005562 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <xQueueGenericCreateStatic+0x56>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <xQueueGenericCreateStatic+0x5a>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <xQueueGenericCreateStatic+0x5c>
 8005576:	2300      	movs	r3, #0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10b      	bne.n	8005594 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	623b      	str	r3, [r7, #32]
}
 800558e:	bf00      	nop
 8005590:	bf00      	nop
 8005592:	e7fd      	b.n	8005590 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <xQueueGenericCreateStatic+0x84>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <xQueueGenericCreateStatic+0x88>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <xQueueGenericCreateStatic+0x8a>
 80055a4:	2300      	movs	r3, #0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	61fb      	str	r3, [r7, #28]
}
 80055bc:	bf00      	nop
 80055be:	bf00      	nop
 80055c0:	e7fd      	b.n	80055be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055c2:	2350      	movs	r3, #80	@ 0x50
 80055c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b50      	cmp	r3, #80	@ 0x50
 80055ca:	d00b      	beq.n	80055e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	61bb      	str	r3, [r7, #24]
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	e7fd      	b.n	80055e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80055ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00d      	beq.n	800560c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80055fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f840 	bl	800568c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800560c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800560e:	4618      	mov	r0, r3
 8005610:	3730      	adds	r7, #48	@ 0x30
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005616:	b580      	push	{r7, lr}
 8005618:	b08a      	sub	sp, #40	@ 0x28
 800561a:	af02      	add	r7, sp, #8
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	4613      	mov	r3, r2
 8005622:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10b      	bne.n	8005642 <xQueueGenericCreate+0x2c>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	613b      	str	r3, [r7, #16]
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	e7fd      	b.n	800563e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	3350      	adds	r3, #80	@ 0x50
 8005650:	4618      	mov	r0, r3
 8005652:	f002 f9f3 	bl	8007a3c <pvPortMalloc>
 8005656:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d011      	beq.n	8005682 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	3350      	adds	r3, #80	@ 0x50
 8005666:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005670:	79fa      	ldrb	r2, [r7, #7]
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	4613      	mov	r3, r2
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	68b9      	ldr	r1, [r7, #8]
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f805 	bl	800568c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005682:	69bb      	ldr	r3, [r7, #24]
	}
 8005684:	4618      	mov	r0, r3
 8005686:	3720      	adds	r7, #32
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d103      	bne.n	80056a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	e002      	b.n	80056ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056ba:	2101      	movs	r1, #1
 80056bc:	69b8      	ldr	r0, [r7, #24]
 80056be:	f7ff fec3 	bl	8005448 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056ca:	bf00      	nop
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00e      	beq.n	80056fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80056f2:	2300      	movs	r3, #0
 80056f4:	2200      	movs	r2, #0
 80056f6:	2100      	movs	r1, #0
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f8a5 	bl	8005848 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005706:	b580      	push	{r7, lr}
 8005708:	b086      	sub	sp, #24
 800570a:	af00      	add	r7, sp, #0
 800570c:	4603      	mov	r3, r0
 800570e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	461a      	mov	r2, r3
 800571c:	6939      	ldr	r1, [r7, #16]
 800571e:	6978      	ldr	r0, [r7, #20]
 8005720:	f7ff ff79 	bl	8005616 <xQueueGenericCreate>
 8005724:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7ff ffd3 	bl	80056d2 <prvInitialiseMutex>

		return xNewQueue;
 800572c:	68fb      	ldr	r3, [r7, #12]
	}
 800572e:	4618      	mov	r0, r3
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005736:	b580      	push	{r7, lr}
 8005738:	b088      	sub	sp, #32
 800573a:	af02      	add	r7, sp, #8
 800573c:	4603      	mov	r3, r0
 800573e:	6039      	str	r1, [r7, #0]
 8005740:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005742:	2301      	movs	r3, #1
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	2300      	movs	r3, #0
 8005748:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2200      	movs	r2, #0
 8005752:	6939      	ldr	r1, [r7, #16]
 8005754:	6978      	ldr	r0, [r7, #20]
 8005756:	f7ff fee1 	bl	800551c <xQueueGenericCreateStatic>
 800575a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f7ff ffb8 	bl	80056d2 <prvInitialiseMutex>

		return xNewQueue;
 8005762:	68fb      	ldr	r3, [r7, #12]
	}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08a      	sub	sp, #40	@ 0x28
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	61bb      	str	r3, [r7, #24]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	429a      	cmp	r2, r3
 800579c:	d90b      	bls.n	80057b6 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	617b      	str	r3, [r7, #20]
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	e7fd      	b.n	80057b2 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80057b6:	2302      	movs	r3, #2
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	2100      	movs	r1, #0
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7ff feab 	bl	800551c <xQueueGenericCreateStatic>
 80057c6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80057d4:	69fb      	ldr	r3, [r7, #28]
	}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b086      	sub	sp, #24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	613b      	str	r3, [r7, #16]
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	e7fd      	b.n	8005802 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d90b      	bls.n	8005826 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	60fb      	str	r3, [r7, #12]
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	e7fd      	b.n	8005822 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005826:	2202      	movs	r2, #2
 8005828:	2100      	movs	r1, #0
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff fef3 	bl	8005616 <xQueueGenericCreate>
 8005830:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800583e:	697b      	ldr	r3, [r7, #20]
	}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b08e      	sub	sp, #56	@ 0x38
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005856:	2300      	movs	r3, #0
 8005858:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xQueueGenericSend+0x34>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d103      	bne.n	800588a <xQueueGenericSend+0x42>
 8005882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <xQueueGenericSend+0x46>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueGenericSend+0x48>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <xQueueGenericSend+0x64>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d103      	bne.n	80058ba <xQueueGenericSend+0x72>
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <xQueueGenericSend+0x76>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueGenericSend+0x78>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10b      	bne.n	80058dc <xQueueGenericSend+0x94>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	623b      	str	r3, [r7, #32]
}
 80058d6:	bf00      	nop
 80058d8:	bf00      	nop
 80058da:	e7fd      	b.n	80058d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058dc:	f001 fa1c 	bl	8006d18 <xTaskGetSchedulerState>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <xQueueGenericSend+0xa4>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <xQueueGenericSend+0xa8>
 80058ec:	2301      	movs	r3, #1
 80058ee:	e000      	b.n	80058f2 <xQueueGenericSend+0xaa>
 80058f0:	2300      	movs	r3, #0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10b      	bne.n	800590e <xQueueGenericSend+0xc6>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	61fb      	str	r3, [r7, #28]
}
 8005908:	bf00      	nop
 800590a:	bf00      	nop
 800590c:	e7fd      	b.n	800590a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800590e:	f001 ff73 	bl	80077f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591a:	429a      	cmp	r2, r3
 800591c:	d302      	bcc.n	8005924 <xQueueGenericSend+0xdc>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b02      	cmp	r3, #2
 8005922:	d129      	bne.n	8005978 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800592a:	f000 fa33 	bl	8005d94 <prvCopyDataToQueue>
 800592e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005934:	2b00      	cmp	r3, #0
 8005936:	d010      	beq.n	800595a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593a:	3324      	adds	r3, #36	@ 0x24
 800593c:	4618      	mov	r0, r3
 800593e:	f001 f82b 	bl	8006998 <xTaskRemoveFromEventList>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d013      	beq.n	8005970 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005948:	4b3f      	ldr	r3, [pc, #252]	@ (8005a48 <xQueueGenericSend+0x200>)
 800594a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	e00a      	b.n	8005970 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800595a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d007      	beq.n	8005970 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005960:	4b39      	ldr	r3, [pc, #228]	@ (8005a48 <xQueueGenericSend+0x200>)
 8005962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005970:	f001 ff74 	bl	800785c <vPortExitCritical>
				return pdPASS;
 8005974:	2301      	movs	r3, #1
 8005976:	e063      	b.n	8005a40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d103      	bne.n	8005986 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800597e:	f001 ff6d 	bl	800785c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005982:	2300      	movs	r3, #0
 8005984:	e05c      	b.n	8005a40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005988:	2b00      	cmp	r3, #0
 800598a:	d106      	bne.n	800599a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800598c:	f107 0314 	add.w	r3, r7, #20
 8005990:	4618      	mov	r0, r3
 8005992:	f001 f865 	bl	8006a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005996:	2301      	movs	r3, #1
 8005998:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800599a:	f001 ff5f 	bl	800785c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800599e:	f000 fdd5 	bl	800654c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059a2:	f001 ff29 	bl	80077f8 <vPortEnterCritical>
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059ac:	b25b      	sxtb	r3, r3
 80059ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b2:	d103      	bne.n	80059bc <xQueueGenericSend+0x174>
 80059b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059c2:	b25b      	sxtb	r3, r3
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c8:	d103      	bne.n	80059d2 <xQueueGenericSend+0x18a>
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059d2:	f001 ff43 	bl	800785c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059d6:	1d3a      	adds	r2, r7, #4
 80059d8:	f107 0314 	add.w	r3, r7, #20
 80059dc:	4611      	mov	r1, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 f854 	bl	8006a8c <xTaskCheckForTimeOut>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d124      	bne.n	8005a34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059ec:	f000 faca 	bl	8005f84 <prvIsQueueFull>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d018      	beq.n	8005a28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	3310      	adds	r3, #16
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 ff78 	bl	80068f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a06:	f000 fa55 	bl	8005eb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a0a:	f000 fdad 	bl	8006568 <xTaskResumeAll>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f47f af7c 	bne.w	800590e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005a16:	4b0c      	ldr	r3, [pc, #48]	@ (8005a48 <xQueueGenericSend+0x200>)
 8005a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	e772      	b.n	800590e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a2a:	f000 fa43 	bl	8005eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a2e:	f000 fd9b 	bl	8006568 <xTaskResumeAll>
 8005a32:	e76c      	b.n	800590e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a36:	f000 fa3d 	bl	8005eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a3a:	f000 fd95 	bl	8006568 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3738      	adds	r7, #56	@ 0x38
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	e000ed04 	.word	0xe000ed04

08005a4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b090      	sub	sp, #64	@ 0x40
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a76:	bf00      	nop
 8005a78:	bf00      	nop
 8005a7a:	e7fd      	b.n	8005a78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d103      	bne.n	8005a8a <xQueueGenericSendFromISR+0x3e>
 8005a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <xQueueGenericSendFromISR+0x42>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <xQueueGenericSendFromISR+0x44>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10b      	bne.n	8005aac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	e7fd      	b.n	8005aa8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d103      	bne.n	8005aba <xQueueGenericSendFromISR+0x6e>
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d101      	bne.n	8005abe <xQueueGenericSendFromISR+0x72>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <xQueueGenericSendFromISR+0x74>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10b      	bne.n	8005adc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	623b      	str	r3, [r7, #32]
}
 8005ad6:	bf00      	nop
 8005ad8:	bf00      	nop
 8005ada:	e7fd      	b.n	8005ad8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005adc:	f001 ff6c 	bl	80079b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ae0:	f3ef 8211 	mrs	r2, BASEPRI
 8005ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	61fa      	str	r2, [r7, #28]
 8005af6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005af8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005afa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d302      	bcc.n	8005b0e <xQueueGenericSendFromISR+0xc2>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d12f      	bne.n	8005b6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005b24:	f000 f936 	bl	8005d94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d112      	bne.n	8005b58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d016      	beq.n	8005b68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	3324      	adds	r3, #36	@ 0x24
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 ff2a 	bl	8006998 <xTaskRemoveFromEventList>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00e      	beq.n	8005b68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00b      	beq.n	8005b68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	e007      	b.n	8005b68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	b25a      	sxtb	r2, r3
 8005b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005b6c:	e001      	b.n	8005b72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3740      	adds	r7, #64	@ 0x40
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08c      	sub	sp, #48	@ 0x30
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b94:	2300      	movs	r3, #0
 8005b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10b      	bne.n	8005bba <xQueueReceive+0x32>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	623b      	str	r3, [r7, #32]
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop
 8005bb8:	e7fd      	b.n	8005bb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <xQueueReceive+0x40>
 8005bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <xQueueReceive+0x44>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <xQueueReceive+0x46>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10b      	bne.n	8005bea <xQueueReceive+0x62>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	61fb      	str	r3, [r7, #28]
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	e7fd      	b.n	8005be6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bea:	f001 f895 	bl	8006d18 <xTaskGetSchedulerState>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d102      	bne.n	8005bfa <xQueueReceive+0x72>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <xQueueReceive+0x76>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <xQueueReceive+0x78>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10b      	bne.n	8005c1c <xQueueReceive+0x94>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	61bb      	str	r3, [r7, #24]
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	e7fd      	b.n	8005c18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c1c:	f001 fdec 	bl	80077f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01f      	beq.n	8005c6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c30:	f000 f91a 	bl	8005e68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	1e5a      	subs	r2, r3, #1
 8005c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00f      	beq.n	8005c64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	3310      	adds	r3, #16
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fea5 	bl	8006998 <xTaskRemoveFromEventList>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c54:	4b3c      	ldr	r3, [pc, #240]	@ (8005d48 <xQueueReceive+0x1c0>)
 8005c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c64:	f001 fdfa 	bl	800785c <vPortExitCritical>
				return pdPASS;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e069      	b.n	8005d40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c72:	f001 fdf3 	bl	800785c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e062      	b.n	8005d40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d106      	bne.n	8005c8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c80:	f107 0310 	add.w	r3, r7, #16
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 feeb 	bl	8006a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c8e:	f001 fde5 	bl	800785c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c92:	f000 fc5b 	bl	800654c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c96:	f001 fdaf 	bl	80077f8 <vPortEnterCritical>
 8005c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ca0:	b25b      	sxtb	r3, r3
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d103      	bne.n	8005cb0 <xQueueReceive+0x128>
 8005ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cb6:	b25b      	sxtb	r3, r3
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d103      	bne.n	8005cc6 <xQueueReceive+0x13e>
 8005cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cc6:	f001 fdc9 	bl	800785c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cca:	1d3a      	adds	r2, r7, #4
 8005ccc:	f107 0310 	add.w	r3, r7, #16
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 feda 	bl	8006a8c <xTaskCheckForTimeOut>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d123      	bne.n	8005d26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ce0:	f000 f93a 	bl	8005f58 <prvIsQueueEmpty>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d017      	beq.n	8005d1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cec:	3324      	adds	r3, #36	@ 0x24
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fdfe 	bl	80068f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cfa:	f000 f8db 	bl	8005eb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cfe:	f000 fc33 	bl	8006568 <xTaskResumeAll>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d189      	bne.n	8005c1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005d08:	4b0f      	ldr	r3, [pc, #60]	@ (8005d48 <xQueueReceive+0x1c0>)
 8005d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	e780      	b.n	8005c1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d1c:	f000 f8ca 	bl	8005eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d20:	f000 fc22 	bl	8006568 <xTaskResumeAll>
 8005d24:	e77a      	b.n	8005c1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d28:	f000 f8c4 	bl	8005eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d2c:	f000 fc1c 	bl	8006568 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d32:	f000 f911 	bl	8005f58 <prvIsQueueEmpty>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f43f af6f 	beq.w	8005c1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3730      	adds	r7, #48	@ 0x30
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <vQueueDelete+0x2a>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	60bb      	str	r3, [r7, #8]
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	e7fd      	b.n	8005d72 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f946 	bl	8006008 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d102      	bne.n	8005d8c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f001 ff26 	bl	8007bd8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10d      	bne.n	8005dce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d14d      	bne.n	8005e56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 ffc8 	bl	8006d54 <xTaskPriorityDisinherit>
 8005dc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	609a      	str	r2, [r3, #8]
 8005dcc:	e043      	b.n	8005e56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d119      	bne.n	8005e08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6858      	ldr	r0, [r3, #4]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ddc:	461a      	mov	r2, r3
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	f002 f846 	bl	8007e70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dec:	441a      	add	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d32b      	bcc.n	8005e56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	e026      	b.n	8005e56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	68d8      	ldr	r0, [r3, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e10:	461a      	mov	r2, r3
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	f002 f82c 	bl	8007e70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e20:	425b      	negs	r3, r3
 8005e22:	441a      	add	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d207      	bcs.n	8005e44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3c:	425b      	negs	r3, r3
 8005e3e:	441a      	add	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d105      	bne.n	8005e56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005e5e:	697b      	ldr	r3, [r7, #20]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d018      	beq.n	8005eac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e82:	441a      	add	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d303      	bcc.n	8005e9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68d9      	ldr	r1, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	6838      	ldr	r0, [r7, #0]
 8005ea8:	f001 ffe2 	bl	8007e70 <memcpy>
	}
}
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ebc:	f001 fc9c 	bl	80077f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ec6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ec8:	e011      	b.n	8005eee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d012      	beq.n	8005ef8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3324      	adds	r3, #36	@ 0x24
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fd5e 	bl	8006998 <xTaskRemoveFromEventList>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ee2:	f000 fe37 	bl	8006b54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	dce9      	bgt.n	8005eca <prvUnlockQueue+0x16>
 8005ef6:	e000      	b.n	8005efa <prvUnlockQueue+0x46>
					break;
 8005ef8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	22ff      	movs	r2, #255	@ 0xff
 8005efe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005f02:	f001 fcab 	bl	800785c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f06:	f001 fc77 	bl	80077f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f12:	e011      	b.n	8005f38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d012      	beq.n	8005f42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3310      	adds	r3, #16
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fd39 	bl	8006998 <xTaskRemoveFromEventList>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f2c:	f000 fe12 	bl	8006b54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f30:	7bbb      	ldrb	r3, [r7, #14]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dce9      	bgt.n	8005f14 <prvUnlockQueue+0x60>
 8005f40:	e000      	b.n	8005f44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	22ff      	movs	r2, #255	@ 0xff
 8005f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f4c:	f001 fc86 	bl	800785c <vPortExitCritical>
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f60:	f001 fc4a 	bl	80077f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e001      	b.n	8005f76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f76:	f001 fc71 	bl	800785c <vPortExitCritical>

	return xReturn;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f8c:	f001 fc34 	bl	80077f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d102      	bne.n	8005fa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	e001      	b.n	8005fa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fa6:	f001 fc59 	bl	800785c <vPortExitCritical>

	return xReturn;
 8005faa:	68fb      	ldr	r3, [r7, #12]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	e014      	b.n	8005fee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fc4:	4a0f      	ldr	r2, [pc, #60]	@ (8006004 <vQueueAddToRegistry+0x50>)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10b      	bne.n	8005fe8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fd0:	490c      	ldr	r1, [pc, #48]	@ (8006004 <vQueueAddToRegistry+0x50>)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fda:	4a0a      	ldr	r2, [pc, #40]	@ (8006004 <vQueueAddToRegistry+0x50>)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	4413      	add	r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fe6:	e006      	b.n	8005ff6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b07      	cmp	r3, #7
 8005ff2:	d9e7      	bls.n	8005fc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000e9c 	.word	0x20000e9c

08006008 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e016      	b.n	8006044 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006016:	4a10      	ldr	r2, [pc, #64]	@ (8006058 <vQueueUnregisterQueue+0x50>)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	4413      	add	r3, r2
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d10b      	bne.n	800603e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006026:	4a0c      	ldr	r2, [pc, #48]	@ (8006058 <vQueueUnregisterQueue+0x50>)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2100      	movs	r1, #0
 800602c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006030:	4a09      	ldr	r2, [pc, #36]	@ (8006058 <vQueueUnregisterQueue+0x50>)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	4413      	add	r3, r2
 8006038:	2200      	movs	r2, #0
 800603a:	605a      	str	r2, [r3, #4]
				break;
 800603c:	e006      	b.n	800604c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b07      	cmp	r3, #7
 8006048:	d9e5      	bls.n	8006016 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	20000e9c 	.word	0x20000e9c

0800605c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800606c:	f001 fbc4 	bl	80077f8 <vPortEnterCritical>
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006076:	b25b      	sxtb	r3, r3
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607c:	d103      	bne.n	8006086 <vQueueWaitForMessageRestricted+0x2a>
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800608c:	b25b      	sxtb	r3, r3
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d103      	bne.n	800609c <vQueueWaitForMessageRestricted+0x40>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800609c:	f001 fbde 	bl	800785c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	3324      	adds	r3, #36	@ 0x24
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fc45 	bl	8006940 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060b6:	6978      	ldr	r0, [r7, #20]
 80060b8:	f7ff fefc 	bl	8005eb4 <prvUnlockQueue>
	}
 80060bc:	bf00      	nop
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08e      	sub	sp, #56	@ 0x38
 80060c8:	af04      	add	r7, sp, #16
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10b      	bne.n	80060f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	623b      	str	r3, [r7, #32]
}
 80060ea:	bf00      	nop
 80060ec:	bf00      	nop
 80060ee:	e7fd      	b.n	80060ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <xTaskCreateStatic+0x4a>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	61fb      	str	r3, [r7, #28]
}
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	e7fd      	b.n	800610a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800610e:	235c      	movs	r3, #92	@ 0x5c
 8006110:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b5c      	cmp	r3, #92	@ 0x5c
 8006116:	d00b      	beq.n	8006130 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	61bb      	str	r3, [r7, #24]
}
 800612a:	bf00      	nop
 800612c:	bf00      	nop
 800612e:	e7fd      	b.n	800612c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006130:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01e      	beq.n	8006176 <xTaskCreateStatic+0xb2>
 8006138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01b      	beq.n	8006176 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800613e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006140:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006146:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006150:	2300      	movs	r3, #0
 8006152:	9303      	str	r3, [sp, #12]
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	9302      	str	r3, [sp, #8]
 8006158:	f107 0314 	add.w	r3, r7, #20
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 f850 	bl	800620e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800616e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006170:	f000 f8de 	bl	8006330 <prvAddNewTaskToReadyList>
 8006174:	e001      	b.n	800617a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800617a:	697b      	ldr	r3, [r7, #20]
	}
 800617c:	4618      	mov	r0, r3
 800617e:	3728      	adds	r7, #40	@ 0x28
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08c      	sub	sp, #48	@ 0x30
 8006188:	af04      	add	r7, sp, #16
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	4613      	mov	r3, r2
 8006192:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006194:	88fb      	ldrh	r3, [r7, #6]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4618      	mov	r0, r3
 800619a:	f001 fc4f 	bl	8007a3c <pvPortMalloc>
 800619e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00e      	beq.n	80061c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061a6:	205c      	movs	r0, #92	@ 0x5c
 80061a8:	f001 fc48 	bl	8007a3c <pvPortMalloc>
 80061ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80061ba:	e005      	b.n	80061c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061bc:	6978      	ldr	r0, [r7, #20]
 80061be:	f001 fd0b 	bl	8007bd8 <vPortFree>
 80061c2:	e001      	b.n	80061c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d017      	beq.n	80061fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061d6:	88fa      	ldrh	r2, [r7, #6]
 80061d8:	2300      	movs	r3, #0
 80061da:	9303      	str	r3, [sp, #12]
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	9302      	str	r3, [sp, #8]
 80061e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f80e 	bl	800620e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061f2:	69f8      	ldr	r0, [r7, #28]
 80061f4:	f000 f89c 	bl	8006330 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061f8:	2301      	movs	r3, #1
 80061fa:	61bb      	str	r3, [r7, #24]
 80061fc:	e002      	b.n	8006204 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006202:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006204:	69bb      	ldr	r3, [r7, #24]
	}
 8006206:	4618      	mov	r0, r3
 8006208:	3720      	adds	r7, #32
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b088      	sub	sp, #32
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
 800621a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800621c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	461a      	mov	r2, r3
 8006226:	21a5      	movs	r1, #165	@ 0xa5
 8006228:	f001 fdf6 	bl	8007e18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006236:	3b01      	subs	r3, #1
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	f023 0307 	bic.w	r3, r3, #7
 8006244:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	617b      	str	r3, [r7, #20]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01f      	beq.n	80062ae <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800626e:	2300      	movs	r3, #0
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	e012      	b.n	800629a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	7819      	ldrb	r1, [r3, #0]
 800627c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	4413      	add	r3, r2
 8006282:	3334      	adds	r3, #52	@ 0x34
 8006284:	460a      	mov	r2, r1
 8006286:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d006      	beq.n	80062a2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	3301      	adds	r3, #1
 8006298:	61fb      	str	r3, [r7, #28]
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	2b0f      	cmp	r3, #15
 800629e:	d9e9      	bls.n	8006274 <prvInitialiseNewTask+0x66>
 80062a0:	e000      	b.n	80062a4 <prvInitialiseNewTask+0x96>
			{
				break;
 80062a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062ac:	e003      	b.n	80062b6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b8:	2b37      	cmp	r3, #55	@ 0x37
 80062ba:	d901      	bls.n	80062c0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062bc:	2337      	movs	r3, #55	@ 0x37
 80062be:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062ca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ce:	2200      	movs	r2, #0
 80062d0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	3304      	adds	r3, #4
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff f822 	bl	8005320 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062de:	3318      	adds	r3, #24
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff f81d 	bl	8005320 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062fa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	2200      	movs	r2, #0
 8006300:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	68f9      	ldr	r1, [r7, #12]
 800630e:	69b8      	ldr	r0, [r7, #24]
 8006310:	f001 f93e 	bl	8007590 <pxPortInitialiseStack>
 8006314:	4602      	mov	r2, r0
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800631a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006326:	bf00      	nop
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006338:	f001 fa5e 	bl	80077f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800633c:	4b2d      	ldr	r3, [pc, #180]	@ (80063f4 <prvAddNewTaskToReadyList+0xc4>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	4a2c      	ldr	r2, [pc, #176]	@ (80063f4 <prvAddNewTaskToReadyList+0xc4>)
 8006344:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006346:	4b2c      	ldr	r3, [pc, #176]	@ (80063f8 <prvAddNewTaskToReadyList+0xc8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800634e:	4a2a      	ldr	r2, [pc, #168]	@ (80063f8 <prvAddNewTaskToReadyList+0xc8>)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006354:	4b27      	ldr	r3, [pc, #156]	@ (80063f4 <prvAddNewTaskToReadyList+0xc4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d110      	bne.n	800637e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800635c:	f000 fc1e 	bl	8006b9c <prvInitialiseTaskLists>
 8006360:	e00d      	b.n	800637e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006362:	4b26      	ldr	r3, [pc, #152]	@ (80063fc <prvAddNewTaskToReadyList+0xcc>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d109      	bne.n	800637e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800636a:	4b23      	ldr	r3, [pc, #140]	@ (80063f8 <prvAddNewTaskToReadyList+0xc8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006374:	429a      	cmp	r2, r3
 8006376:	d802      	bhi.n	800637e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006378:	4a1f      	ldr	r2, [pc, #124]	@ (80063f8 <prvAddNewTaskToReadyList+0xc8>)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800637e:	4b20      	ldr	r3, [pc, #128]	@ (8006400 <prvAddNewTaskToReadyList+0xd0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3301      	adds	r3, #1
 8006384:	4a1e      	ldr	r2, [pc, #120]	@ (8006400 <prvAddNewTaskToReadyList+0xd0>)
 8006386:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006388:	4b1d      	ldr	r3, [pc, #116]	@ (8006400 <prvAddNewTaskToReadyList+0xd0>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006394:	4b1b      	ldr	r3, [pc, #108]	@ (8006404 <prvAddNewTaskToReadyList+0xd4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d903      	bls.n	80063a4 <prvAddNewTaskToReadyList+0x74>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	4a18      	ldr	r2, [pc, #96]	@ (8006404 <prvAddNewTaskToReadyList+0xd4>)
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4a15      	ldr	r2, [pc, #84]	@ (8006408 <prvAddNewTaskToReadyList+0xd8>)
 80063b2:	441a      	add	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3304      	adds	r3, #4
 80063b8:	4619      	mov	r1, r3
 80063ba:	4610      	mov	r0, r2
 80063bc:	f7fe ffbd 	bl	800533a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063c0:	f001 fa4c 	bl	800785c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063c4:	4b0d      	ldr	r3, [pc, #52]	@ (80063fc <prvAddNewTaskToReadyList+0xcc>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00e      	beq.n	80063ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063cc:	4b0a      	ldr	r3, [pc, #40]	@ (80063f8 <prvAddNewTaskToReadyList+0xc8>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d207      	bcs.n	80063ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063da:	4b0c      	ldr	r3, [pc, #48]	@ (800640c <prvAddNewTaskToReadyList+0xdc>)
 80063dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063ea:	bf00      	nop
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	200013b0 	.word	0x200013b0
 80063f8:	20000edc 	.word	0x20000edc
 80063fc:	200013bc 	.word	0x200013bc
 8006400:	200013cc 	.word	0x200013cc
 8006404:	200013b8 	.word	0x200013b8
 8006408:	20000ee0 	.word	0x20000ee0
 800640c:	e000ed04 	.word	0xe000ed04

08006410 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d018      	beq.n	8006454 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006422:	4b14      	ldr	r3, [pc, #80]	@ (8006474 <vTaskDelay+0x64>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00b      	beq.n	8006442 <vTaskDelay+0x32>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	60bb      	str	r3, [r7, #8]
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	e7fd      	b.n	800643e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006442:	f000 f883 	bl	800654c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006446:	2100      	movs	r1, #0
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fcf3 	bl	8006e34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800644e:	f000 f88b 	bl	8006568 <xTaskResumeAll>
 8006452:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d107      	bne.n	800646a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800645a:	4b07      	ldr	r3, [pc, #28]	@ (8006478 <vTaskDelay+0x68>)
 800645c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800646a:	bf00      	nop
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	200013d8 	.word	0x200013d8
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	@ 0x28
 8006480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006482:	2300      	movs	r3, #0
 8006484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006486:	2300      	movs	r3, #0
 8006488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800648a:	463a      	mov	r2, r7
 800648c:	1d39      	adds	r1, r7, #4
 800648e:	f107 0308 	add.w	r3, r7, #8
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fef0 	bl	8005278 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	9202      	str	r2, [sp, #8]
 80064a0:	9301      	str	r3, [sp, #4]
 80064a2:	2300      	movs	r3, #0
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	2300      	movs	r3, #0
 80064a8:	460a      	mov	r2, r1
 80064aa:	4922      	ldr	r1, [pc, #136]	@ (8006534 <vTaskStartScheduler+0xb8>)
 80064ac:	4822      	ldr	r0, [pc, #136]	@ (8006538 <vTaskStartScheduler+0xbc>)
 80064ae:	f7ff fe09 	bl	80060c4 <xTaskCreateStatic>
 80064b2:	4603      	mov	r3, r0
 80064b4:	4a21      	ldr	r2, [pc, #132]	@ (800653c <vTaskStartScheduler+0xc0>)
 80064b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064b8:	4b20      	ldr	r3, [pc, #128]	@ (800653c <vTaskStartScheduler+0xc0>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064c0:	2301      	movs	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	e001      	b.n	80064ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d102      	bne.n	80064d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064d0:	f000 fd04 	bl	8006edc <xTimerCreateTimerTask>
 80064d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d116      	bne.n	800650a <vTaskStartScheduler+0x8e>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	613b      	str	r3, [r7, #16]
}
 80064ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064f0:	4b13      	ldr	r3, [pc, #76]	@ (8006540 <vTaskStartScheduler+0xc4>)
 80064f2:	f04f 32ff 	mov.w	r2, #4294967295
 80064f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064f8:	4b12      	ldr	r3, [pc, #72]	@ (8006544 <vTaskStartScheduler+0xc8>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064fe:	4b12      	ldr	r3, [pc, #72]	@ (8006548 <vTaskStartScheduler+0xcc>)
 8006500:	2200      	movs	r2, #0
 8006502:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006504:	f001 f8d4 	bl	80076b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006508:	e00f      	b.n	800652a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d10b      	bne.n	800652a <vTaskStartScheduler+0xae>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60fb      	str	r3, [r7, #12]
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	e7fd      	b.n	8006526 <vTaskStartScheduler+0xaa>
}
 800652a:	bf00      	nop
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	08007ee8 	.word	0x08007ee8
 8006538:	08006b6d 	.word	0x08006b6d
 800653c:	200013d4 	.word	0x200013d4
 8006540:	200013d0 	.word	0x200013d0
 8006544:	200013bc 	.word	0x200013bc
 8006548:	200013b4 	.word	0x200013b4

0800654c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006550:	4b04      	ldr	r3, [pc, #16]	@ (8006564 <vTaskSuspendAll+0x18>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	4a03      	ldr	r2, [pc, #12]	@ (8006564 <vTaskSuspendAll+0x18>)
 8006558:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800655a:	bf00      	nop
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	200013d8 	.word	0x200013d8

08006568 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006572:	2300      	movs	r3, #0
 8006574:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006576:	4b42      	ldr	r3, [pc, #264]	@ (8006680 <xTaskResumeAll+0x118>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10b      	bne.n	8006596 <xTaskResumeAll+0x2e>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	603b      	str	r3, [r7, #0]
}
 8006590:	bf00      	nop
 8006592:	bf00      	nop
 8006594:	e7fd      	b.n	8006592 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006596:	f001 f92f 	bl	80077f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800659a:	4b39      	ldr	r3, [pc, #228]	@ (8006680 <xTaskResumeAll+0x118>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3b01      	subs	r3, #1
 80065a0:	4a37      	ldr	r2, [pc, #220]	@ (8006680 <xTaskResumeAll+0x118>)
 80065a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065a4:	4b36      	ldr	r3, [pc, #216]	@ (8006680 <xTaskResumeAll+0x118>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d162      	bne.n	8006672 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065ac:	4b35      	ldr	r3, [pc, #212]	@ (8006684 <xTaskResumeAll+0x11c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d05e      	beq.n	8006672 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065b4:	e02f      	b.n	8006616 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b6:	4b34      	ldr	r3, [pc, #208]	@ (8006688 <xTaskResumeAll+0x120>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3318      	adds	r3, #24
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe ff16 	bl	80053f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fe ff11 	bl	80053f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d6:	4b2d      	ldr	r3, [pc, #180]	@ (800668c <xTaskResumeAll+0x124>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d903      	bls.n	80065e6 <xTaskResumeAll+0x7e>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e2:	4a2a      	ldr	r2, [pc, #168]	@ (800668c <xTaskResumeAll+0x124>)
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ea:	4613      	mov	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4a27      	ldr	r2, [pc, #156]	@ (8006690 <xTaskResumeAll+0x128>)
 80065f4:	441a      	add	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3304      	adds	r3, #4
 80065fa:	4619      	mov	r1, r3
 80065fc:	4610      	mov	r0, r2
 80065fe:	f7fe fe9c 	bl	800533a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006606:	4b23      	ldr	r3, [pc, #140]	@ (8006694 <xTaskResumeAll+0x12c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660c:	429a      	cmp	r2, r3
 800660e:	d302      	bcc.n	8006616 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006610:	4b21      	ldr	r3, [pc, #132]	@ (8006698 <xTaskResumeAll+0x130>)
 8006612:	2201      	movs	r2, #1
 8006614:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006616:	4b1c      	ldr	r3, [pc, #112]	@ (8006688 <xTaskResumeAll+0x120>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1cb      	bne.n	80065b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006624:	f000 fb58 	bl	8006cd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006628:	4b1c      	ldr	r3, [pc, #112]	@ (800669c <xTaskResumeAll+0x134>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d010      	beq.n	8006656 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006634:	f000 f846 	bl	80066c4 <xTaskIncrementTick>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800663e:	4b16      	ldr	r3, [pc, #88]	@ (8006698 <xTaskResumeAll+0x130>)
 8006640:	2201      	movs	r2, #1
 8006642:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3b01      	subs	r3, #1
 8006648:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f1      	bne.n	8006634 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006650:	4b12      	ldr	r3, [pc, #72]	@ (800669c <xTaskResumeAll+0x134>)
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006656:	4b10      	ldr	r3, [pc, #64]	@ (8006698 <xTaskResumeAll+0x130>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d009      	beq.n	8006672 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800665e:	2301      	movs	r3, #1
 8006660:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006662:	4b0f      	ldr	r3, [pc, #60]	@ (80066a0 <xTaskResumeAll+0x138>)
 8006664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006672:	f001 f8f3 	bl	800785c <vPortExitCritical>

	return xAlreadyYielded;
 8006676:	68bb      	ldr	r3, [r7, #8]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	200013d8 	.word	0x200013d8
 8006684:	200013b0 	.word	0x200013b0
 8006688:	20001370 	.word	0x20001370
 800668c:	200013b8 	.word	0x200013b8
 8006690:	20000ee0 	.word	0x20000ee0
 8006694:	20000edc 	.word	0x20000edc
 8006698:	200013c4 	.word	0x200013c4
 800669c:	200013c0 	.word	0x200013c0
 80066a0:	e000ed04 	.word	0xe000ed04

080066a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066aa:	4b05      	ldr	r3, [pc, #20]	@ (80066c0 <xTaskGetTickCount+0x1c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066b0:	687b      	ldr	r3, [r7, #4]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	200013b4 	.word	0x200013b4

080066c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066ce:	4b4f      	ldr	r3, [pc, #316]	@ (800680c <xTaskIncrementTick+0x148>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f040 8090 	bne.w	80067f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066d8:	4b4d      	ldr	r3, [pc, #308]	@ (8006810 <xTaskIncrementTick+0x14c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3301      	adds	r3, #1
 80066de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066e0:	4a4b      	ldr	r2, [pc, #300]	@ (8006810 <xTaskIncrementTick+0x14c>)
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d121      	bne.n	8006730 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80066ec:	4b49      	ldr	r3, [pc, #292]	@ (8006814 <xTaskIncrementTick+0x150>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00b      	beq.n	800670e <xTaskIncrementTick+0x4a>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	603b      	str	r3, [r7, #0]
}
 8006708:	bf00      	nop
 800670a:	bf00      	nop
 800670c:	e7fd      	b.n	800670a <xTaskIncrementTick+0x46>
 800670e:	4b41      	ldr	r3, [pc, #260]	@ (8006814 <xTaskIncrementTick+0x150>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	4b40      	ldr	r3, [pc, #256]	@ (8006818 <xTaskIncrementTick+0x154>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a3e      	ldr	r2, [pc, #248]	@ (8006814 <xTaskIncrementTick+0x150>)
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	4a3e      	ldr	r2, [pc, #248]	@ (8006818 <xTaskIncrementTick+0x154>)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	4b3e      	ldr	r3, [pc, #248]	@ (800681c <xTaskIncrementTick+0x158>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3301      	adds	r3, #1
 8006728:	4a3c      	ldr	r2, [pc, #240]	@ (800681c <xTaskIncrementTick+0x158>)
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	f000 fad4 	bl	8006cd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006730:	4b3b      	ldr	r3, [pc, #236]	@ (8006820 <xTaskIncrementTick+0x15c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	429a      	cmp	r2, r3
 8006738:	d349      	bcc.n	80067ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800673a:	4b36      	ldr	r3, [pc, #216]	@ (8006814 <xTaskIncrementTick+0x150>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d104      	bne.n	800674e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006744:	4b36      	ldr	r3, [pc, #216]	@ (8006820 <xTaskIncrementTick+0x15c>)
 8006746:	f04f 32ff 	mov.w	r2, #4294967295
 800674a:	601a      	str	r2, [r3, #0]
					break;
 800674c:	e03f      	b.n	80067ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800674e:	4b31      	ldr	r3, [pc, #196]	@ (8006814 <xTaskIncrementTick+0x150>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	429a      	cmp	r2, r3
 8006764:	d203      	bcs.n	800676e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006766:	4a2e      	ldr	r2, [pc, #184]	@ (8006820 <xTaskIncrementTick+0x15c>)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800676c:	e02f      	b.n	80067ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	3304      	adds	r3, #4
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe fe3e 	bl	80053f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	3318      	adds	r3, #24
 8006784:	4618      	mov	r0, r3
 8006786:	f7fe fe35 	bl	80053f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800678e:	4b25      	ldr	r3, [pc, #148]	@ (8006824 <xTaskIncrementTick+0x160>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d903      	bls.n	800679e <xTaskIncrementTick+0xda>
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679a:	4a22      	ldr	r2, [pc, #136]	@ (8006824 <xTaskIncrementTick+0x160>)
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006828 <xTaskIncrementTick+0x164>)
 80067ac:	441a      	add	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	3304      	adds	r3, #4
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f7fe fdc0 	bl	800533a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067be:	4b1b      	ldr	r3, [pc, #108]	@ (800682c <xTaskIncrementTick+0x168>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d3b8      	bcc.n	800673a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80067c8:	2301      	movs	r3, #1
 80067ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067cc:	e7b5      	b.n	800673a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067ce:	4b17      	ldr	r3, [pc, #92]	@ (800682c <xTaskIncrementTick+0x168>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d4:	4914      	ldr	r1, [pc, #80]	@ (8006828 <xTaskIncrementTick+0x164>)
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d901      	bls.n	80067ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80067e6:	2301      	movs	r3, #1
 80067e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067ea:	4b11      	ldr	r3, [pc, #68]	@ (8006830 <xTaskIncrementTick+0x16c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d007      	beq.n	8006802 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80067f2:	2301      	movs	r3, #1
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	e004      	b.n	8006802 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006834 <xTaskIncrementTick+0x170>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3301      	adds	r3, #1
 80067fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006834 <xTaskIncrementTick+0x170>)
 8006800:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006802:	697b      	ldr	r3, [r7, #20]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	200013d8 	.word	0x200013d8
 8006810:	200013b4 	.word	0x200013b4
 8006814:	20001368 	.word	0x20001368
 8006818:	2000136c 	.word	0x2000136c
 800681c:	200013c8 	.word	0x200013c8
 8006820:	200013d0 	.word	0x200013d0
 8006824:	200013b8 	.word	0x200013b8
 8006828:	20000ee0 	.word	0x20000ee0
 800682c:	20000edc 	.word	0x20000edc
 8006830:	200013c4 	.word	0x200013c4
 8006834:	200013c0 	.word	0x200013c0

08006838 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800683e:	4b28      	ldr	r3, [pc, #160]	@ (80068e0 <vTaskSwitchContext+0xa8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006846:	4b27      	ldr	r3, [pc, #156]	@ (80068e4 <vTaskSwitchContext+0xac>)
 8006848:	2201      	movs	r2, #1
 800684a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800684c:	e042      	b.n	80068d4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800684e:	4b25      	ldr	r3, [pc, #148]	@ (80068e4 <vTaskSwitchContext+0xac>)
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006854:	4b24      	ldr	r3, [pc, #144]	@ (80068e8 <vTaskSwitchContext+0xb0>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	e011      	b.n	8006880 <vTaskSwitchContext+0x48>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10b      	bne.n	800687a <vTaskSwitchContext+0x42>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	607b      	str	r3, [r7, #4]
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop
 8006878:	e7fd      	b.n	8006876 <vTaskSwitchContext+0x3e>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3b01      	subs	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	491a      	ldr	r1, [pc, #104]	@ (80068ec <vTaskSwitchContext+0xb4>)
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0e3      	beq.n	800685c <vTaskSwitchContext+0x24>
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4a13      	ldr	r2, [pc, #76]	@ (80068ec <vTaskSwitchContext+0xb4>)
 80068a0:	4413      	add	r3, r2
 80068a2:	60bb      	str	r3, [r7, #8]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	605a      	str	r2, [r3, #4]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	3308      	adds	r3, #8
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d104      	bne.n	80068c4 <vTaskSwitchContext+0x8c>
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	605a      	str	r2, [r3, #4]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	4a09      	ldr	r2, [pc, #36]	@ (80068f0 <vTaskSwitchContext+0xb8>)
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	4a06      	ldr	r2, [pc, #24]	@ (80068e8 <vTaskSwitchContext+0xb0>)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6013      	str	r3, [r2, #0]
}
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	200013d8 	.word	0x200013d8
 80068e4:	200013c4 	.word	0x200013c4
 80068e8:	200013b8 	.word	0x200013b8
 80068ec:	20000ee0 	.word	0x20000ee0
 80068f0:	20000edc 	.word	0x20000edc

080068f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10b      	bne.n	800691c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	60fb      	str	r3, [r7, #12]
}
 8006916:	bf00      	nop
 8006918:	bf00      	nop
 800691a:	e7fd      	b.n	8006918 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800691c:	4b07      	ldr	r3, [pc, #28]	@ (800693c <vTaskPlaceOnEventList+0x48>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3318      	adds	r3, #24
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7fe fd2c 	bl	8005382 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800692a:	2101      	movs	r1, #1
 800692c:	6838      	ldr	r0, [r7, #0]
 800692e:	f000 fa81 	bl	8006e34 <prvAddCurrentTaskToDelayedList>
}
 8006932:	bf00      	nop
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20000edc 	.word	0x20000edc

08006940 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10b      	bne.n	800696a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	617b      	str	r3, [r7, #20]
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop
 8006968:	e7fd      	b.n	8006966 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800696a:	4b0a      	ldr	r3, [pc, #40]	@ (8006994 <vTaskPlaceOnEventListRestricted+0x54>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3318      	adds	r3, #24
 8006970:	4619      	mov	r1, r3
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7fe fce1 	bl	800533a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800697e:	f04f 33ff 	mov.w	r3, #4294967295
 8006982:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	68b8      	ldr	r0, [r7, #8]
 8006988:	f000 fa54 	bl	8006e34 <prvAddCurrentTaskToDelayedList>
	}
 800698c:	bf00      	nop
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000edc 	.word	0x20000edc

08006998 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	60fb      	str	r3, [r7, #12]
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	e7fd      	b.n	80069c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	3318      	adds	r3, #24
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fe fd12 	bl	80053f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006a48 <xTaskRemoveFromEventList+0xb0>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11d      	bne.n	8006a14 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	3304      	adds	r3, #4
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fe fd09 	bl	80053f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e6:	4b19      	ldr	r3, [pc, #100]	@ (8006a4c <xTaskRemoveFromEventList+0xb4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d903      	bls.n	80069f6 <xTaskRemoveFromEventList+0x5e>
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f2:	4a16      	ldr	r2, [pc, #88]	@ (8006a4c <xTaskRemoveFromEventList+0xb4>)
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4a13      	ldr	r2, [pc, #76]	@ (8006a50 <xTaskRemoveFromEventList+0xb8>)
 8006a04:	441a      	add	r2, r3
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	f7fe fc94 	bl	800533a <vListInsertEnd>
 8006a12:	e005      	b.n	8006a20 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	3318      	adds	r3, #24
 8006a18:	4619      	mov	r1, r3
 8006a1a:	480e      	ldr	r0, [pc, #56]	@ (8006a54 <xTaskRemoveFromEventList+0xbc>)
 8006a1c:	f7fe fc8d 	bl	800533a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a24:	4b0c      	ldr	r3, [pc, #48]	@ (8006a58 <xTaskRemoveFromEventList+0xc0>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d905      	bls.n	8006a3a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a32:	4b0a      	ldr	r3, [pc, #40]	@ (8006a5c <xTaskRemoveFromEventList+0xc4>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	e001      	b.n	8006a3e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a3e:	697b      	ldr	r3, [r7, #20]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	200013d8 	.word	0x200013d8
 8006a4c:	200013b8 	.word	0x200013b8
 8006a50:	20000ee0 	.word	0x20000ee0
 8006a54:	20001370 	.word	0x20001370
 8006a58:	20000edc 	.word	0x20000edc
 8006a5c:	200013c4 	.word	0x200013c4

08006a60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a68:	4b06      	ldr	r3, [pc, #24]	@ (8006a84 <vTaskInternalSetTimeOutState+0x24>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a70:	4b05      	ldr	r3, [pc, #20]	@ (8006a88 <vTaskInternalSetTimeOutState+0x28>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	605a      	str	r2, [r3, #4]
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	200013c8 	.word	0x200013c8
 8006a88:	200013b4 	.word	0x200013b4

08006a8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10b      	bne.n	8006ab4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	613b      	str	r3, [r7, #16]
}
 8006aae:	bf00      	nop
 8006ab0:	bf00      	nop
 8006ab2:	e7fd      	b.n	8006ab0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10b      	bne.n	8006ad2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	60fb      	str	r3, [r7, #12]
}
 8006acc:	bf00      	nop
 8006ace:	bf00      	nop
 8006ad0:	e7fd      	b.n	8006ace <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006ad2:	f000 fe91 	bl	80077f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8006b4c <xTaskCheckForTimeOut+0xc0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aee:	d102      	bne.n	8006af6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61fb      	str	r3, [r7, #28]
 8006af4:	e023      	b.n	8006b3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b15      	ldr	r3, [pc, #84]	@ (8006b50 <xTaskCheckForTimeOut+0xc4>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d007      	beq.n	8006b12 <xTaskCheckForTimeOut+0x86>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d302      	bcc.n	8006b12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	e015      	b.n	8006b3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d20b      	bcs.n	8006b34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	1ad2      	subs	r2, r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff ff99 	bl	8006a60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61fb      	str	r3, [r7, #28]
 8006b32:	e004      	b.n	8006b3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2200      	movs	r2, #0
 8006b38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b3e:	f000 fe8d 	bl	800785c <vPortExitCritical>

	return xReturn;
 8006b42:	69fb      	ldr	r3, [r7, #28]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	200013b4 	.word	0x200013b4
 8006b50:	200013c8 	.word	0x200013c8

08006b54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b58:	4b03      	ldr	r3, [pc, #12]	@ (8006b68 <vTaskMissedYield+0x14>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
}
 8006b5e:	bf00      	nop
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	200013c4 	.word	0x200013c4

08006b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b74:	f000 f852 	bl	8006c1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b78:	4b06      	ldr	r3, [pc, #24]	@ (8006b94 <prvIdleTask+0x28>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d9f9      	bls.n	8006b74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b80:	4b05      	ldr	r3, [pc, #20]	@ (8006b98 <prvIdleTask+0x2c>)
 8006b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b90:	e7f0      	b.n	8006b74 <prvIdleTask+0x8>
 8006b92:	bf00      	nop
 8006b94:	20000ee0 	.word	0x20000ee0
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	607b      	str	r3, [r7, #4]
 8006ba6:	e00c      	b.n	8006bc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4a12      	ldr	r2, [pc, #72]	@ (8006bfc <prvInitialiseTaskLists+0x60>)
 8006bb4:	4413      	add	r3, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe fb92 	bl	80052e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	607b      	str	r3, [r7, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b37      	cmp	r3, #55	@ 0x37
 8006bc6:	d9ef      	bls.n	8006ba8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bc8:	480d      	ldr	r0, [pc, #52]	@ (8006c00 <prvInitialiseTaskLists+0x64>)
 8006bca:	f7fe fb89 	bl	80052e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bce:	480d      	ldr	r0, [pc, #52]	@ (8006c04 <prvInitialiseTaskLists+0x68>)
 8006bd0:	f7fe fb86 	bl	80052e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bd4:	480c      	ldr	r0, [pc, #48]	@ (8006c08 <prvInitialiseTaskLists+0x6c>)
 8006bd6:	f7fe fb83 	bl	80052e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bda:	480c      	ldr	r0, [pc, #48]	@ (8006c0c <prvInitialiseTaskLists+0x70>)
 8006bdc:	f7fe fb80 	bl	80052e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006be0:	480b      	ldr	r0, [pc, #44]	@ (8006c10 <prvInitialiseTaskLists+0x74>)
 8006be2:	f7fe fb7d 	bl	80052e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006be6:	4b0b      	ldr	r3, [pc, #44]	@ (8006c14 <prvInitialiseTaskLists+0x78>)
 8006be8:	4a05      	ldr	r2, [pc, #20]	@ (8006c00 <prvInitialiseTaskLists+0x64>)
 8006bea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bec:	4b0a      	ldr	r3, [pc, #40]	@ (8006c18 <prvInitialiseTaskLists+0x7c>)
 8006bee:	4a05      	ldr	r2, [pc, #20]	@ (8006c04 <prvInitialiseTaskLists+0x68>)
 8006bf0:	601a      	str	r2, [r3, #0]
}
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000ee0 	.word	0x20000ee0
 8006c00:	20001340 	.word	0x20001340
 8006c04:	20001354 	.word	0x20001354
 8006c08:	20001370 	.word	0x20001370
 8006c0c:	20001384 	.word	0x20001384
 8006c10:	2000139c 	.word	0x2000139c
 8006c14:	20001368 	.word	0x20001368
 8006c18:	2000136c 	.word	0x2000136c

08006c1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c22:	e019      	b.n	8006c58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c24:	f000 fde8 	bl	80077f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c28:	4b10      	ldr	r3, [pc, #64]	@ (8006c6c <prvCheckTasksWaitingTermination+0x50>)
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3304      	adds	r3, #4
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fe fbdd 	bl	80053f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c70 <prvCheckTasksWaitingTermination+0x54>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	4a0b      	ldr	r2, [pc, #44]	@ (8006c70 <prvCheckTasksWaitingTermination+0x54>)
 8006c42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c44:	4b0b      	ldr	r3, [pc, #44]	@ (8006c74 <prvCheckTasksWaitingTermination+0x58>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c74 <prvCheckTasksWaitingTermination+0x58>)
 8006c4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c4e:	f000 fe05 	bl	800785c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f810 	bl	8006c78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c58:	4b06      	ldr	r3, [pc, #24]	@ (8006c74 <prvCheckTasksWaitingTermination+0x58>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e1      	bne.n	8006c24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c60:	bf00      	nop
 8006c62:	bf00      	nop
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20001384 	.word	0x20001384
 8006c70:	200013b0 	.word	0x200013b0
 8006c74:	20001398 	.word	0x20001398

08006c78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d108      	bne.n	8006c9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 ffa2 	bl	8007bd8 <vPortFree>
				vPortFree( pxTCB );
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 ff9f 	bl	8007bd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c9a:	e019      	b.n	8006cd0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d103      	bne.n	8006cae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 ff96 	bl	8007bd8 <vPortFree>
	}
 8006cac:	e010      	b.n	8006cd0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d00b      	beq.n	8006cd0 <prvDeleteTCB+0x58>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	60fb      	str	r3, [r7, #12]
}
 8006cca:	bf00      	nop
 8006ccc:	bf00      	nop
 8006cce:	e7fd      	b.n	8006ccc <prvDeleteTCB+0x54>
	}
 8006cd0:	bf00      	nop
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cde:	4b0c      	ldr	r3, [pc, #48]	@ (8006d10 <prvResetNextTaskUnblockTime+0x38>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d104      	bne.n	8006cf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8006d14 <prvResetNextTaskUnblockTime+0x3c>)
 8006cea:	f04f 32ff 	mov.w	r2, #4294967295
 8006cee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cf0:	e008      	b.n	8006d04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cf2:	4b07      	ldr	r3, [pc, #28]	@ (8006d10 <prvResetNextTaskUnblockTime+0x38>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	4a04      	ldr	r2, [pc, #16]	@ (8006d14 <prvResetNextTaskUnblockTime+0x3c>)
 8006d02:	6013      	str	r3, [r2, #0]
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	20001368 	.word	0x20001368
 8006d14:	200013d0 	.word	0x200013d0

08006d18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d4c <xTaskGetSchedulerState+0x34>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d102      	bne.n	8006d2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d26:	2301      	movs	r3, #1
 8006d28:	607b      	str	r3, [r7, #4]
 8006d2a:	e008      	b.n	8006d3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d2c:	4b08      	ldr	r3, [pc, #32]	@ (8006d50 <xTaskGetSchedulerState+0x38>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d34:	2302      	movs	r3, #2
 8006d36:	607b      	str	r3, [r7, #4]
 8006d38:	e001      	b.n	8006d3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d3e:	687b      	ldr	r3, [r7, #4]
	}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	200013bc 	.word	0x200013bc
 8006d50:	200013d8 	.word	0x200013d8

08006d54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d60:	2300      	movs	r3, #0
 8006d62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d058      	beq.n	8006e1c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8006e28 <xTaskPriorityDisinherit+0xd4>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d00b      	beq.n	8006d8c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	60fb      	str	r3, [r7, #12]
}
 8006d86:	bf00      	nop
 8006d88:	bf00      	nop
 8006d8a:	e7fd      	b.n	8006d88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10b      	bne.n	8006dac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	60bb      	str	r3, [r7, #8]
}
 8006da6:	bf00      	nop
 8006da8:	bf00      	nop
 8006daa:	e7fd      	b.n	8006da8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db0:	1e5a      	subs	r2, r3, #1
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d02c      	beq.n	8006e1c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d128      	bne.n	8006e1c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe fb10 	bl	80053f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dec:	4b0f      	ldr	r3, [pc, #60]	@ (8006e2c <xTaskPriorityDisinherit+0xd8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d903      	bls.n	8006dfc <xTaskPriorityDisinherit+0xa8>
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df8:	4a0c      	ldr	r2, [pc, #48]	@ (8006e2c <xTaskPriorityDisinherit+0xd8>)
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4a09      	ldr	r2, [pc, #36]	@ (8006e30 <xTaskPriorityDisinherit+0xdc>)
 8006e0a:	441a      	add	r2, r3
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4619      	mov	r1, r3
 8006e12:	4610      	mov	r0, r2
 8006e14:	f7fe fa91 	bl	800533a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e1c:	697b      	ldr	r3, [r7, #20]
	}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000edc 	.word	0x20000edc
 8006e2c:	200013b8 	.word	0x200013b8
 8006e30:	20000ee0 	.word	0x20000ee0

08006e34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e3e:	4b21      	ldr	r3, [pc, #132]	@ (8006ec4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e44:	4b20      	ldr	r3, [pc, #128]	@ (8006ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fad2 	bl	80053f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d10a      	bne.n	8006e6e <prvAddCurrentTaskToDelayedList+0x3a>
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d007      	beq.n	8006e6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4619      	mov	r1, r3
 8006e66:	4819      	ldr	r0, [pc, #100]	@ (8006ecc <prvAddCurrentTaskToDelayedList+0x98>)
 8006e68:	f7fe fa67 	bl	800533a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e6c:	e026      	b.n	8006ebc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4413      	add	r3, r2
 8006e74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e76:	4b14      	ldr	r3, [pc, #80]	@ (8006ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d209      	bcs.n	8006e9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e86:	4b12      	ldr	r3, [pc, #72]	@ (8006ed0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	4619      	mov	r1, r3
 8006e92:	4610      	mov	r0, r2
 8006e94:	f7fe fa75 	bl	8005382 <vListInsert>
}
 8006e98:	e010      	b.n	8006ebc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ed4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	f7fe fa6b 	bl	8005382 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006eac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d202      	bcs.n	8006ebc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006eb6:	4a08      	ldr	r2, [pc, #32]	@ (8006ed8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	6013      	str	r3, [r2, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	200013b4 	.word	0x200013b4
 8006ec8:	20000edc 	.word	0x20000edc
 8006ecc:	2000139c 	.word	0x2000139c
 8006ed0:	2000136c 	.word	0x2000136c
 8006ed4:	20001368 	.word	0x20001368
 8006ed8:	200013d0 	.word	0x200013d0

08006edc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08a      	sub	sp, #40	@ 0x28
 8006ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ee6:	f000 fb13 	bl	8007510 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006eea:	4b1d      	ldr	r3, [pc, #116]	@ (8006f60 <xTimerCreateTimerTask+0x84>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d021      	beq.n	8006f36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006efa:	1d3a      	adds	r2, r7, #4
 8006efc:	f107 0108 	add.w	r1, r7, #8
 8006f00:	f107 030c 	add.w	r3, r7, #12
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe f9d1 	bl	80052ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	9202      	str	r2, [sp, #8]
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	2302      	movs	r3, #2
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	460a      	mov	r2, r1
 8006f1c:	4911      	ldr	r1, [pc, #68]	@ (8006f64 <xTimerCreateTimerTask+0x88>)
 8006f1e:	4812      	ldr	r0, [pc, #72]	@ (8006f68 <xTimerCreateTimerTask+0x8c>)
 8006f20:	f7ff f8d0 	bl	80060c4 <xTaskCreateStatic>
 8006f24:	4603      	mov	r3, r0
 8006f26:	4a11      	ldr	r2, [pc, #68]	@ (8006f6c <xTimerCreateTimerTask+0x90>)
 8006f28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f2a:	4b10      	ldr	r3, [pc, #64]	@ (8006f6c <xTimerCreateTimerTask+0x90>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f32:	2301      	movs	r3, #1
 8006f34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10b      	bne.n	8006f54 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	613b      	str	r3, [r7, #16]
}
 8006f4e:	bf00      	nop
 8006f50:	bf00      	nop
 8006f52:	e7fd      	b.n	8006f50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f54:	697b      	ldr	r3, [r7, #20]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	2000140c 	.word	0x2000140c
 8006f64:	08007ef0 	.word	0x08007ef0
 8006f68:	080070a9 	.word	0x080070a9
 8006f6c:	20001410 	.word	0x20001410

08006f70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08a      	sub	sp, #40	@ 0x28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10b      	bne.n	8006fa0 <xTimerGenericCommand+0x30>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	623b      	str	r3, [r7, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	bf00      	nop
 8006f9e:	e7fd      	b.n	8006f9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006fa0:	4b19      	ldr	r3, [pc, #100]	@ (8007008 <xTimerGenericCommand+0x98>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d02a      	beq.n	8006ffe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2b05      	cmp	r3, #5
 8006fb8:	dc18      	bgt.n	8006fec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fba:	f7ff fead 	bl	8006d18 <xTaskGetSchedulerState>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d109      	bne.n	8006fd8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fc4:	4b10      	ldr	r3, [pc, #64]	@ (8007008 <xTimerGenericCommand+0x98>)
 8006fc6:	6818      	ldr	r0, [r3, #0]
 8006fc8:	f107 0110 	add.w	r1, r7, #16
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fd0:	f7fe fc3a 	bl	8005848 <xQueueGenericSend>
 8006fd4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006fd6:	e012      	b.n	8006ffe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8007008 <xTimerGenericCommand+0x98>)
 8006fda:	6818      	ldr	r0, [r3, #0]
 8006fdc:	f107 0110 	add.w	r1, r7, #16
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f7fe fc30 	bl	8005848 <xQueueGenericSend>
 8006fe8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006fea:	e008      	b.n	8006ffe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006fec:	4b06      	ldr	r3, [pc, #24]	@ (8007008 <xTimerGenericCommand+0x98>)
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	f107 0110 	add.w	r1, r7, #16
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	f7fe fd28 	bl	8005a4c <xQueueGenericSendFromISR>
 8006ffc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007000:	4618      	mov	r0, r3
 8007002:	3728      	adds	r7, #40	@ 0x28
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	2000140c 	.word	0x2000140c

0800700c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af02      	add	r7, sp, #8
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007016:	4b23      	ldr	r3, [pc, #140]	@ (80070a4 <prvProcessExpiredTimer+0x98>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	3304      	adds	r3, #4
 8007024:	4618      	mov	r0, r3
 8007026:	f7fe f9e5 	bl	80053f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d023      	beq.n	8007080 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	699a      	ldr	r2, [r3, #24]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	18d1      	adds	r1, r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	6978      	ldr	r0, [r7, #20]
 8007046:	f000 f8d5 	bl	80071f4 <prvInsertTimerInActiveList>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d020      	beq.n	8007092 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007050:	2300      	movs	r3, #0
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	2300      	movs	r3, #0
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	2100      	movs	r1, #0
 800705a:	6978      	ldr	r0, [r7, #20]
 800705c:	f7ff ff88 	bl	8006f70 <xTimerGenericCommand>
 8007060:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d114      	bne.n	8007092 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	60fb      	str	r3, [r7, #12]
}
 800707a:	bf00      	nop
 800707c:	bf00      	nop
 800707e:	e7fd      	b.n	800707c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007086:	f023 0301 	bic.w	r3, r3, #1
 800708a:	b2da      	uxtb	r2, r3
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	6978      	ldr	r0, [r7, #20]
 8007098:	4798      	blx	r3
}
 800709a:	bf00      	nop
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20001404 	.word	0x20001404

080070a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070b0:	f107 0308 	add.w	r3, r7, #8
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 f859 	bl	800716c <prvGetNextExpireTime>
 80070ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4619      	mov	r1, r3
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f805 	bl	80070d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070c6:	f000 f8d7 	bl	8007278 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070ca:	bf00      	nop
 80070cc:	e7f0      	b.n	80070b0 <prvTimerTask+0x8>
	...

080070d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070da:	f7ff fa37 	bl	800654c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070de:	f107 0308 	add.w	r3, r7, #8
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 f866 	bl	80071b4 <prvSampleTimeNow>
 80070e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d130      	bne.n	8007152 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <prvProcessTimerOrBlockTask+0x3c>
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d806      	bhi.n	800710c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80070fe:	f7ff fa33 	bl	8006568 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007102:	68f9      	ldr	r1, [r7, #12]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff ff81 	bl	800700c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800710a:	e024      	b.n	8007156 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d008      	beq.n	8007124 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007112:	4b13      	ldr	r3, [pc, #76]	@ (8007160 <prvProcessTimerOrBlockTask+0x90>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <prvProcessTimerOrBlockTask+0x50>
 800711c:	2301      	movs	r3, #1
 800711e:	e000      	b.n	8007122 <prvProcessTimerOrBlockTask+0x52>
 8007120:	2300      	movs	r3, #0
 8007122:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007124:	4b0f      	ldr	r3, [pc, #60]	@ (8007164 <prvProcessTimerOrBlockTask+0x94>)
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	4619      	mov	r1, r3
 8007132:	f7fe ff93 	bl	800605c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007136:	f7ff fa17 	bl	8006568 <xTaskResumeAll>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10a      	bne.n	8007156 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007140:	4b09      	ldr	r3, [pc, #36]	@ (8007168 <prvProcessTimerOrBlockTask+0x98>)
 8007142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	f3bf 8f6f 	isb	sy
}
 8007150:	e001      	b.n	8007156 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007152:	f7ff fa09 	bl	8006568 <xTaskResumeAll>
}
 8007156:	bf00      	nop
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20001408 	.word	0x20001408
 8007164:	2000140c 	.word	0x2000140c
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007174:	4b0e      	ldr	r3, [pc, #56]	@ (80071b0 <prvGetNextExpireTime+0x44>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <prvGetNextExpireTime+0x16>
 800717e:	2201      	movs	r2, #1
 8007180:	e000      	b.n	8007184 <prvGetNextExpireTime+0x18>
 8007182:	2200      	movs	r2, #0
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d105      	bne.n	800719c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007190:	4b07      	ldr	r3, [pc, #28]	@ (80071b0 <prvGetNextExpireTime+0x44>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e001      	b.n	80071a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071a0:	68fb      	ldr	r3, [r7, #12]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20001404 	.word	0x20001404

080071b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071bc:	f7ff fa72 	bl	80066a4 <xTaskGetTickCount>
 80071c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071c2:	4b0b      	ldr	r3, [pc, #44]	@ (80071f0 <prvSampleTimeNow+0x3c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d205      	bcs.n	80071d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071cc:	f000 f93a 	bl	8007444 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	e002      	b.n	80071de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071de:	4a04      	ldr	r2, [pc, #16]	@ (80071f0 <prvSampleTimeNow+0x3c>)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80071e4:	68fb      	ldr	r3, [r7, #12]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20001414 	.word	0x20001414

080071f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	429a      	cmp	r2, r3
 8007218:	d812      	bhi.n	8007240 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	1ad2      	subs	r2, r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	429a      	cmp	r2, r3
 8007226:	d302      	bcc.n	800722e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007228:	2301      	movs	r3, #1
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	e01b      	b.n	8007266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800722e:	4b10      	ldr	r3, [pc, #64]	@ (8007270 <prvInsertTimerInActiveList+0x7c>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3304      	adds	r3, #4
 8007236:	4619      	mov	r1, r3
 8007238:	4610      	mov	r0, r2
 800723a:	f7fe f8a2 	bl	8005382 <vListInsert>
 800723e:	e012      	b.n	8007266 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d206      	bcs.n	8007256 <prvInsertTimerInActiveList+0x62>
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	429a      	cmp	r2, r3
 800724e:	d302      	bcc.n	8007256 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007250:	2301      	movs	r3, #1
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	e007      	b.n	8007266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007256:	4b07      	ldr	r3, [pc, #28]	@ (8007274 <prvInsertTimerInActiveList+0x80>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3304      	adds	r3, #4
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f7fe f88e 	bl	8005382 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007266:	697b      	ldr	r3, [r7, #20]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	20001408 	.word	0x20001408
 8007274:	20001404 	.word	0x20001404

08007278 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08e      	sub	sp, #56	@ 0x38
 800727c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800727e:	e0ce      	b.n	800741e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	da19      	bge.n	80072ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007286:	1d3b      	adds	r3, r7, #4
 8007288:	3304      	adds	r3, #4
 800728a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800728c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10b      	bne.n	80072aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	61fb      	str	r3, [r7, #28]
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop
 80072a8:	e7fd      	b.n	80072a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072b0:	6850      	ldr	r0, [r2, #4]
 80072b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072b4:	6892      	ldr	r2, [r2, #8]
 80072b6:	4611      	mov	r1, r2
 80072b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f2c0 80ae 	blt.w	800741e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d004      	beq.n	80072d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d0:	3304      	adds	r3, #4
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe f88e 	bl	80053f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072d8:	463b      	mov	r3, r7
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff ff6a 	bl	80071b4 <prvSampleTimeNow>
 80072e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b09      	cmp	r3, #9
 80072e6:	f200 8097 	bhi.w	8007418 <prvProcessReceivedCommands+0x1a0>
 80072ea:	a201      	add	r2, pc, #4	@ (adr r2, 80072f0 <prvProcessReceivedCommands+0x78>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	08007319 	.word	0x08007319
 80072f4:	08007319 	.word	0x08007319
 80072f8:	08007319 	.word	0x08007319
 80072fc:	0800738f 	.word	0x0800738f
 8007300:	080073a3 	.word	0x080073a3
 8007304:	080073ef 	.word	0x080073ef
 8007308:	08007319 	.word	0x08007319
 800730c:	08007319 	.word	0x08007319
 8007310:	0800738f 	.word	0x0800738f
 8007314:	080073a3 	.word	0x080073a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800731e:	f043 0301 	orr.w	r3, r3, #1
 8007322:	b2da      	uxtb	r2, r3
 8007324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007326:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	18d1      	adds	r1, r2, r3
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007338:	f7ff ff5c 	bl	80071f4 <prvInsertTimerInActiveList>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d06c      	beq.n	800741c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007348:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800734a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007350:	f003 0304 	and.w	r3, r3, #4
 8007354:	2b00      	cmp	r3, #0
 8007356:	d061      	beq.n	800741c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	441a      	add	r2, r3
 8007360:	2300      	movs	r3, #0
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	2300      	movs	r3, #0
 8007366:	2100      	movs	r1, #0
 8007368:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800736a:	f7ff fe01 	bl	8006f70 <xTimerGenericCommand>
 800736e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d152      	bne.n	800741c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	61bb      	str	r3, [r7, #24]
}
 8007388:	bf00      	nop
 800738a:	bf00      	nop
 800738c:	e7fd      	b.n	800738a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800738e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007394:	f023 0301 	bic.w	r3, r3, #1
 8007398:	b2da      	uxtb	r2, r3
 800739a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80073a0:	e03d      	b.n	800741e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073a8:	f043 0301 	orr.w	r3, r3, #1
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10b      	bne.n	80073da <prvProcessReceivedCommands+0x162>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	617b      	str	r3, [r7, #20]
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	e7fd      	b.n	80073d6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e0:	18d1      	adds	r1, r2, r3
 80073e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073e8:	f7ff ff04 	bl	80071f4 <prvInsertTimerInActiveList>
					break;
 80073ec:	e017      	b.n	800741e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80073ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d103      	bne.n	8007404 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80073fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073fe:	f000 fbeb 	bl	8007bd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007402:	e00c      	b.n	800741e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007406:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800740a:	f023 0301 	bic.w	r3, r3, #1
 800740e:	b2da      	uxtb	r2, r3
 8007410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007412:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007416:	e002      	b.n	800741e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007418:	bf00      	nop
 800741a:	e000      	b.n	800741e <prvProcessReceivedCommands+0x1a6>
					break;
 800741c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800741e:	4b08      	ldr	r3, [pc, #32]	@ (8007440 <prvProcessReceivedCommands+0x1c8>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	1d39      	adds	r1, r7, #4
 8007424:	2200      	movs	r2, #0
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fbae 	bl	8005b88 <xQueueReceive>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	f47f af26 	bne.w	8007280 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop
 8007438:	3730      	adds	r7, #48	@ 0x30
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	2000140c 	.word	0x2000140c

08007444 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800744a:	e049      	b.n	80074e0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800744c:	4b2e      	ldr	r3, [pc, #184]	@ (8007508 <prvSwitchTimerLists+0xc4>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007456:	4b2c      	ldr	r3, [pc, #176]	@ (8007508 <prvSwitchTimerLists+0xc4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3304      	adds	r3, #4
 8007464:	4618      	mov	r0, r3
 8007466:	f7fd ffc5 	bl	80053f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d02f      	beq.n	80074e0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4413      	add	r3, r2
 8007488:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	429a      	cmp	r2, r3
 8007490:	d90e      	bls.n	80074b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800749e:	4b1a      	ldr	r3, [pc, #104]	@ (8007508 <prvSwitchTimerLists+0xc4>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4619      	mov	r1, r3
 80074a8:	4610      	mov	r0, r2
 80074aa:	f7fd ff6a 	bl	8005382 <vListInsert>
 80074ae:	e017      	b.n	80074e0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074b0:	2300      	movs	r3, #0
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	2300      	movs	r3, #0
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	2100      	movs	r1, #0
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f7ff fd58 	bl	8006f70 <xTimerGenericCommand>
 80074c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10b      	bne.n	80074e0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	603b      	str	r3, [r7, #0]
}
 80074da:	bf00      	nop
 80074dc:	bf00      	nop
 80074de:	e7fd      	b.n	80074dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074e0:	4b09      	ldr	r3, [pc, #36]	@ (8007508 <prvSwitchTimerLists+0xc4>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1b0      	bne.n	800744c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80074ea:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <prvSwitchTimerLists+0xc4>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80074f0:	4b06      	ldr	r3, [pc, #24]	@ (800750c <prvSwitchTimerLists+0xc8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a04      	ldr	r2, [pc, #16]	@ (8007508 <prvSwitchTimerLists+0xc4>)
 80074f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80074f8:	4a04      	ldr	r2, [pc, #16]	@ (800750c <prvSwitchTimerLists+0xc8>)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	6013      	str	r3, [r2, #0]
}
 80074fe:	bf00      	nop
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20001404 	.word	0x20001404
 800750c:	20001408 	.word	0x20001408

08007510 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007516:	f000 f96f 	bl	80077f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800751a:	4b15      	ldr	r3, [pc, #84]	@ (8007570 <prvCheckForValidListAndQueue+0x60>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d120      	bne.n	8007564 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007522:	4814      	ldr	r0, [pc, #80]	@ (8007574 <prvCheckForValidListAndQueue+0x64>)
 8007524:	f7fd fedc 	bl	80052e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007528:	4813      	ldr	r0, [pc, #76]	@ (8007578 <prvCheckForValidListAndQueue+0x68>)
 800752a:	f7fd fed9 	bl	80052e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800752e:	4b13      	ldr	r3, [pc, #76]	@ (800757c <prvCheckForValidListAndQueue+0x6c>)
 8007530:	4a10      	ldr	r2, [pc, #64]	@ (8007574 <prvCheckForValidListAndQueue+0x64>)
 8007532:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007534:	4b12      	ldr	r3, [pc, #72]	@ (8007580 <prvCheckForValidListAndQueue+0x70>)
 8007536:	4a10      	ldr	r2, [pc, #64]	@ (8007578 <prvCheckForValidListAndQueue+0x68>)
 8007538:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800753a:	2300      	movs	r3, #0
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	4b11      	ldr	r3, [pc, #68]	@ (8007584 <prvCheckForValidListAndQueue+0x74>)
 8007540:	4a11      	ldr	r2, [pc, #68]	@ (8007588 <prvCheckForValidListAndQueue+0x78>)
 8007542:	2110      	movs	r1, #16
 8007544:	200a      	movs	r0, #10
 8007546:	f7fd ffe9 	bl	800551c <xQueueGenericCreateStatic>
 800754a:	4603      	mov	r3, r0
 800754c:	4a08      	ldr	r2, [pc, #32]	@ (8007570 <prvCheckForValidListAndQueue+0x60>)
 800754e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007550:	4b07      	ldr	r3, [pc, #28]	@ (8007570 <prvCheckForValidListAndQueue+0x60>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007558:	4b05      	ldr	r3, [pc, #20]	@ (8007570 <prvCheckForValidListAndQueue+0x60>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	490b      	ldr	r1, [pc, #44]	@ (800758c <prvCheckForValidListAndQueue+0x7c>)
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fd28 	bl	8005fb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007564:	f000 f97a 	bl	800785c <vPortExitCritical>
}
 8007568:	bf00      	nop
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	2000140c 	.word	0x2000140c
 8007574:	200013dc 	.word	0x200013dc
 8007578:	200013f0 	.word	0x200013f0
 800757c:	20001404 	.word	0x20001404
 8007580:	20001408 	.word	0x20001408
 8007584:	200014b8 	.word	0x200014b8
 8007588:	20001418 	.word	0x20001418
 800758c:	08007ef8 	.word	0x08007ef8

08007590 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3b04      	subs	r3, #4
 80075a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80075a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3b04      	subs	r3, #4
 80075ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f023 0201 	bic.w	r2, r3, #1
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3b04      	subs	r3, #4
 80075be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075c0:	4a0c      	ldr	r2, [pc, #48]	@ (80075f4 <pxPortInitialiseStack+0x64>)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3b14      	subs	r3, #20
 80075ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3b04      	subs	r3, #4
 80075d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f06f 0202 	mvn.w	r2, #2
 80075de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3b20      	subs	r3, #32
 80075e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075e6:	68fb      	ldr	r3, [r7, #12]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	080075f9 	.word	0x080075f9

080075f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007602:	4b13      	ldr	r3, [pc, #76]	@ (8007650 <prvTaskExitError+0x58>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760a:	d00b      	beq.n	8007624 <prvTaskExitError+0x2c>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	60fb      	str	r3, [r7, #12]
}
 800761e:	bf00      	nop
 8007620:	bf00      	nop
 8007622:	e7fd      	b.n	8007620 <prvTaskExitError+0x28>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	60bb      	str	r3, [r7, #8]
}
 8007636:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007638:	bf00      	nop
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0fc      	beq.n	800763a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	2000000c 	.word	0x2000000c
	...

08007660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007660:	4b07      	ldr	r3, [pc, #28]	@ (8007680 <pxCurrentTCBConst2>)
 8007662:	6819      	ldr	r1, [r3, #0]
 8007664:	6808      	ldr	r0, [r1, #0]
 8007666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766a:	f380 8809 	msr	PSP, r0
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f04f 0000 	mov.w	r0, #0
 8007676:	f380 8811 	msr	BASEPRI, r0
 800767a:	4770      	bx	lr
 800767c:	f3af 8000 	nop.w

08007680 <pxCurrentTCBConst2>:
 8007680:	20000edc 	.word	0x20000edc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop

08007688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007688:	4808      	ldr	r0, [pc, #32]	@ (80076ac <prvPortStartFirstTask+0x24>)
 800768a:	6800      	ldr	r0, [r0, #0]
 800768c:	6800      	ldr	r0, [r0, #0]
 800768e:	f380 8808 	msr	MSP, r0
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8814 	msr	CONTROL, r0
 800769a:	b662      	cpsie	i
 800769c:	b661      	cpsie	f
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	df00      	svc	0
 80076a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076aa:	bf00      	nop
 80076ac:	e000ed08 	.word	0xe000ed08

080076b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076b6:	4b47      	ldr	r3, [pc, #284]	@ (80077d4 <xPortStartScheduler+0x124>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a47      	ldr	r2, [pc, #284]	@ (80077d8 <xPortStartScheduler+0x128>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d10b      	bne.n	80076d8 <xPortStartScheduler+0x28>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	613b      	str	r3, [r7, #16]
}
 80076d2:	bf00      	nop
 80076d4:	bf00      	nop
 80076d6:	e7fd      	b.n	80076d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076d8:	4b3e      	ldr	r3, [pc, #248]	@ (80077d4 <xPortStartScheduler+0x124>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a3f      	ldr	r2, [pc, #252]	@ (80077dc <xPortStartScheduler+0x12c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d10b      	bne.n	80076fa <xPortStartScheduler+0x4a>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	60fb      	str	r3, [r7, #12]
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	e7fd      	b.n	80076f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076fa:	4b39      	ldr	r3, [pc, #228]	@ (80077e0 <xPortStartScheduler+0x130>)
 80076fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	22ff      	movs	r2, #255	@ 0xff
 800770a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007714:	78fb      	ldrb	r3, [r7, #3]
 8007716:	b2db      	uxtb	r3, r3
 8007718:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800771c:	b2da      	uxtb	r2, r3
 800771e:	4b31      	ldr	r3, [pc, #196]	@ (80077e4 <xPortStartScheduler+0x134>)
 8007720:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007722:	4b31      	ldr	r3, [pc, #196]	@ (80077e8 <xPortStartScheduler+0x138>)
 8007724:	2207      	movs	r2, #7
 8007726:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007728:	e009      	b.n	800773e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800772a:	4b2f      	ldr	r3, [pc, #188]	@ (80077e8 <xPortStartScheduler+0x138>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3b01      	subs	r3, #1
 8007730:	4a2d      	ldr	r2, [pc, #180]	@ (80077e8 <xPortStartScheduler+0x138>)
 8007732:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	b2db      	uxtb	r3, r3
 800773c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800773e:	78fb      	ldrb	r3, [r7, #3]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007746:	2b80      	cmp	r3, #128	@ 0x80
 8007748:	d0ef      	beq.n	800772a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800774a:	4b27      	ldr	r3, [pc, #156]	@ (80077e8 <xPortStartScheduler+0x138>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f1c3 0307 	rsb	r3, r3, #7
 8007752:	2b04      	cmp	r3, #4
 8007754:	d00b      	beq.n	800776e <xPortStartScheduler+0xbe>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	60bb      	str	r3, [r7, #8]
}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	e7fd      	b.n	800776a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800776e:	4b1e      	ldr	r3, [pc, #120]	@ (80077e8 <xPortStartScheduler+0x138>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	4a1c      	ldr	r2, [pc, #112]	@ (80077e8 <xPortStartScheduler+0x138>)
 8007776:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007778:	4b1b      	ldr	r3, [pc, #108]	@ (80077e8 <xPortStartScheduler+0x138>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007780:	4a19      	ldr	r2, [pc, #100]	@ (80077e8 <xPortStartScheduler+0x138>)
 8007782:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	b2da      	uxtb	r2, r3
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800778c:	4b17      	ldr	r3, [pc, #92]	@ (80077ec <xPortStartScheduler+0x13c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a16      	ldr	r2, [pc, #88]	@ (80077ec <xPortStartScheduler+0x13c>)
 8007792:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007796:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007798:	4b14      	ldr	r3, [pc, #80]	@ (80077ec <xPortStartScheduler+0x13c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a13      	ldr	r2, [pc, #76]	@ (80077ec <xPortStartScheduler+0x13c>)
 800779e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80077a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077a4:	f000 f8da 	bl	800795c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077a8:	4b11      	ldr	r3, [pc, #68]	@ (80077f0 <xPortStartScheduler+0x140>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077ae:	f000 f8f9 	bl	80079a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077b2:	4b10      	ldr	r3, [pc, #64]	@ (80077f4 <xPortStartScheduler+0x144>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a0f      	ldr	r2, [pc, #60]	@ (80077f4 <xPortStartScheduler+0x144>)
 80077b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80077bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077be:	f7ff ff63 	bl	8007688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077c2:	f7ff f839 	bl	8006838 <vTaskSwitchContext>
	prvTaskExitError();
 80077c6:	f7ff ff17 	bl	80075f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	e000ed00 	.word	0xe000ed00
 80077d8:	410fc271 	.word	0x410fc271
 80077dc:	410fc270 	.word	0x410fc270
 80077e0:	e000e400 	.word	0xe000e400
 80077e4:	20001508 	.word	0x20001508
 80077e8:	2000150c 	.word	0x2000150c
 80077ec:	e000ed20 	.word	0xe000ed20
 80077f0:	2000000c 	.word	0x2000000c
 80077f4:	e000ef34 	.word	0xe000ef34

080077f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	607b      	str	r3, [r7, #4]
}
 8007810:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007812:	4b10      	ldr	r3, [pc, #64]	@ (8007854 <vPortEnterCritical+0x5c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3301      	adds	r3, #1
 8007818:	4a0e      	ldr	r2, [pc, #56]	@ (8007854 <vPortEnterCritical+0x5c>)
 800781a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800781c:	4b0d      	ldr	r3, [pc, #52]	@ (8007854 <vPortEnterCritical+0x5c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d110      	bne.n	8007846 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007824:	4b0c      	ldr	r3, [pc, #48]	@ (8007858 <vPortEnterCritical+0x60>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00b      	beq.n	8007846 <vPortEnterCritical+0x4e>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	603b      	str	r3, [r7, #0]
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	e7fd      	b.n	8007842 <vPortEnterCritical+0x4a>
	}
}
 8007846:	bf00      	nop
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	2000000c 	.word	0x2000000c
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007862:	4b12      	ldr	r3, [pc, #72]	@ (80078ac <vPortExitCritical+0x50>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10b      	bne.n	8007882 <vPortExitCritical+0x26>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	607b      	str	r3, [r7, #4]
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	e7fd      	b.n	800787e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007882:	4b0a      	ldr	r3, [pc, #40]	@ (80078ac <vPortExitCritical+0x50>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3b01      	subs	r3, #1
 8007888:	4a08      	ldr	r2, [pc, #32]	@ (80078ac <vPortExitCritical+0x50>)
 800788a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800788c:	4b07      	ldr	r3, [pc, #28]	@ (80078ac <vPortExitCritical+0x50>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d105      	bne.n	80078a0 <vPortExitCritical+0x44>
 8007894:	2300      	movs	r3, #0
 8007896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	f383 8811 	msr	BASEPRI, r3
}
 800789e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	2000000c 	.word	0x2000000c

080078b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078b0:	f3ef 8009 	mrs	r0, PSP
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	4b15      	ldr	r3, [pc, #84]	@ (8007910 <pxCurrentTCBConst>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	f01e 0f10 	tst.w	lr, #16
 80078c0:	bf08      	it	eq
 80078c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ca:	6010      	str	r0, [r2, #0]
 80078cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80078d4:	f380 8811 	msr	BASEPRI, r0
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f7fe ffaa 	bl	8006838 <vTaskSwitchContext>
 80078e4:	f04f 0000 	mov.w	r0, #0
 80078e8:	f380 8811 	msr	BASEPRI, r0
 80078ec:	bc09      	pop	{r0, r3}
 80078ee:	6819      	ldr	r1, [r3, #0]
 80078f0:	6808      	ldr	r0, [r1, #0]
 80078f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f6:	f01e 0f10 	tst.w	lr, #16
 80078fa:	bf08      	it	eq
 80078fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007900:	f380 8809 	msr	PSP, r0
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	f3af 8000 	nop.w

08007910 <pxCurrentTCBConst>:
 8007910:	20000edc 	.word	0x20000edc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop

08007918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	607b      	str	r3, [r7, #4]
}
 8007930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007932:	f7fe fec7 	bl	80066c4 <xTaskIncrementTick>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800793c:	4b06      	ldr	r3, [pc, #24]	@ (8007958 <xPortSysTickHandler+0x40>)
 800793e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	2300      	movs	r3, #0
 8007946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f383 8811 	msr	BASEPRI, r3
}
 800794e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	e000ed04 	.word	0xe000ed04

0800795c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800795c:	b480      	push	{r7}
 800795e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007960:	4b0b      	ldr	r3, [pc, #44]	@ (8007990 <vPortSetupTimerInterrupt+0x34>)
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007966:	4b0b      	ldr	r3, [pc, #44]	@ (8007994 <vPortSetupTimerInterrupt+0x38>)
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800796c:	4b0a      	ldr	r3, [pc, #40]	@ (8007998 <vPortSetupTimerInterrupt+0x3c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a0a      	ldr	r2, [pc, #40]	@ (800799c <vPortSetupTimerInterrupt+0x40>)
 8007972:	fba2 2303 	umull	r2, r3, r2, r3
 8007976:	099b      	lsrs	r3, r3, #6
 8007978:	4a09      	ldr	r2, [pc, #36]	@ (80079a0 <vPortSetupTimerInterrupt+0x44>)
 800797a:	3b01      	subs	r3, #1
 800797c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800797e:	4b04      	ldr	r3, [pc, #16]	@ (8007990 <vPortSetupTimerInterrupt+0x34>)
 8007980:	2207      	movs	r2, #7
 8007982:	601a      	str	r2, [r3, #0]
}
 8007984:	bf00      	nop
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	e000e010 	.word	0xe000e010
 8007994:	e000e018 	.word	0xe000e018
 8007998:	20000000 	.word	0x20000000
 800799c:	10624dd3 	.word	0x10624dd3
 80079a0:	e000e014 	.word	0xe000e014

080079a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80079b4 <vPortEnableVFP+0x10>
 80079a8:	6801      	ldr	r1, [r0, #0]
 80079aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80079ae:	6001      	str	r1, [r0, #0]
 80079b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079b2:	bf00      	nop
 80079b4:	e000ed88 	.word	0xe000ed88

080079b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079be:	f3ef 8305 	mrs	r3, IPSR
 80079c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b0f      	cmp	r3, #15
 80079c8:	d915      	bls.n	80079f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079ca:	4a18      	ldr	r2, [pc, #96]	@ (8007a2c <vPortValidateInterruptPriority+0x74>)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4413      	add	r3, r2
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079d4:	4b16      	ldr	r3, [pc, #88]	@ (8007a30 <vPortValidateInterruptPriority+0x78>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	7afa      	ldrb	r2, [r7, #11]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d20b      	bcs.n	80079f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	607b      	str	r3, [r7, #4]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a34 <vPortValidateInterruptPriority+0x7c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80079fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007a38 <vPortValidateInterruptPriority+0x80>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d90b      	bls.n	8007a1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	603b      	str	r3, [r7, #0]
}
 8007a18:	bf00      	nop
 8007a1a:	bf00      	nop
 8007a1c:	e7fd      	b.n	8007a1a <vPortValidateInterruptPriority+0x62>
	}
 8007a1e:	bf00      	nop
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	e000e3f0 	.word	0xe000e3f0
 8007a30:	20001508 	.word	0x20001508
 8007a34:	e000ed0c 	.word	0xe000ed0c
 8007a38:	2000150c 	.word	0x2000150c

08007a3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08a      	sub	sp, #40	@ 0x28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a48:	f7fe fd80 	bl	800654c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8007bc0 <pvPortMalloc+0x184>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a54:	f000 f924 	bl	8007ca0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a58:	4b5a      	ldr	r3, [pc, #360]	@ (8007bc4 <pvPortMalloc+0x188>)
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4013      	ands	r3, r2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f040 8095 	bne.w	8007b90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d01e      	beq.n	8007aaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007a6c:	2208      	movs	r2, #8
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4413      	add	r3, r2
 8007a72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d015      	beq.n	8007aaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f023 0307 	bic.w	r3, r3, #7
 8007a84:	3308      	adds	r3, #8
 8007a86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00b      	beq.n	8007aaa <pvPortMalloc+0x6e>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	617b      	str	r3, [r7, #20]
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop
 8007aa8:	e7fd      	b.n	8007aa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d06f      	beq.n	8007b90 <pvPortMalloc+0x154>
 8007ab0:	4b45      	ldr	r3, [pc, #276]	@ (8007bc8 <pvPortMalloc+0x18c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d86a      	bhi.n	8007b90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007aba:	4b44      	ldr	r3, [pc, #272]	@ (8007bcc <pvPortMalloc+0x190>)
 8007abc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007abe:	4b43      	ldr	r3, [pc, #268]	@ (8007bcc <pvPortMalloc+0x190>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ac4:	e004      	b.n	8007ad0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d903      	bls.n	8007ae2 <pvPortMalloc+0xa6>
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1f1      	bne.n	8007ac6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ae2:	4b37      	ldr	r3, [pc, #220]	@ (8007bc0 <pvPortMalloc+0x184>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d051      	beq.n	8007b90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2208      	movs	r2, #8
 8007af2:	4413      	add	r3, r2
 8007af4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	1ad2      	subs	r2, r2, r3
 8007b06:	2308      	movs	r3, #8
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d920      	bls.n	8007b50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4413      	add	r3, r2
 8007b14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <pvPortMalloc+0xfc>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	613b      	str	r3, [r7, #16]
}
 8007b32:	bf00      	nop
 8007b34:	bf00      	nop
 8007b36:	e7fd      	b.n	8007b34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b4a:	69b8      	ldr	r0, [r7, #24]
 8007b4c:	f000 f90a 	bl	8007d64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b50:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc8 <pvPortMalloc+0x18c>)
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007bc8 <pvPortMalloc+0x18c>)
 8007b5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8007bc8 <pvPortMalloc+0x18c>)
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd0 <pvPortMalloc+0x194>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d203      	bcs.n	8007b72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b6a:	4b17      	ldr	r3, [pc, #92]	@ (8007bc8 <pvPortMalloc+0x18c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a18      	ldr	r2, [pc, #96]	@ (8007bd0 <pvPortMalloc+0x194>)
 8007b70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	4b13      	ldr	r3, [pc, #76]	@ (8007bc4 <pvPortMalloc+0x188>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b86:	4b13      	ldr	r3, [pc, #76]	@ (8007bd4 <pvPortMalloc+0x198>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	4a11      	ldr	r2, [pc, #68]	@ (8007bd4 <pvPortMalloc+0x198>)
 8007b8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b90:	f7fe fcea 	bl	8006568 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00b      	beq.n	8007bb6 <pvPortMalloc+0x17a>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	60fb      	str	r3, [r7, #12]
}
 8007bb0:	bf00      	nop
 8007bb2:	bf00      	nop
 8007bb4:	e7fd      	b.n	8007bb2 <pvPortMalloc+0x176>
	return pvReturn;
 8007bb6:	69fb      	ldr	r3, [r7, #28]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3728      	adds	r7, #40	@ 0x28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	200020d0 	.word	0x200020d0
 8007bc4:	200020e4 	.word	0x200020e4
 8007bc8:	200020d4 	.word	0x200020d4
 8007bcc:	200020c8 	.word	0x200020c8
 8007bd0:	200020d8 	.word	0x200020d8
 8007bd4:	200020dc 	.word	0x200020dc

08007bd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d04f      	beq.n	8007c8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bea:	2308      	movs	r3, #8
 8007bec:	425b      	negs	r3, r3
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	4b25      	ldr	r3, [pc, #148]	@ (8007c94 <vPortFree+0xbc>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4013      	ands	r3, r2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10b      	bne.n	8007c1e <vPortFree+0x46>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	60fb      	str	r3, [r7, #12]
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	e7fd      	b.n	8007c1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00b      	beq.n	8007c3e <vPortFree+0x66>
	__asm volatile
 8007c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	60bb      	str	r3, [r7, #8]
}
 8007c38:	bf00      	nop
 8007c3a:	bf00      	nop
 8007c3c:	e7fd      	b.n	8007c3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	4b14      	ldr	r3, [pc, #80]	@ (8007c94 <vPortFree+0xbc>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4013      	ands	r3, r2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01e      	beq.n	8007c8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d11a      	bne.n	8007c8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	4b0e      	ldr	r3, [pc, #56]	@ (8007c94 <vPortFree+0xbc>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	43db      	mvns	r3, r3
 8007c5e:	401a      	ands	r2, r3
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c64:	f7fe fc72 	bl	800654c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c98 <vPortFree+0xc0>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4413      	add	r3, r2
 8007c72:	4a09      	ldr	r2, [pc, #36]	@ (8007c98 <vPortFree+0xc0>)
 8007c74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c76:	6938      	ldr	r0, [r7, #16]
 8007c78:	f000 f874 	bl	8007d64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c7c:	4b07      	ldr	r3, [pc, #28]	@ (8007c9c <vPortFree+0xc4>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3301      	adds	r3, #1
 8007c82:	4a06      	ldr	r2, [pc, #24]	@ (8007c9c <vPortFree+0xc4>)
 8007c84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c86:	f7fe fc6f 	bl	8006568 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c8a:	bf00      	nop
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	200020e4 	.word	0x200020e4
 8007c98:	200020d4 	.word	0x200020d4
 8007c9c:	200020e0 	.word	0x200020e0

08007ca0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ca6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007caa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007cac:	4b27      	ldr	r3, [pc, #156]	@ (8007d4c <prvHeapInit+0xac>)
 8007cae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f003 0307 	and.w	r3, r3, #7
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00c      	beq.n	8007cd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3307      	adds	r3, #7
 8007cbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 0307 	bic.w	r3, r3, #7
 8007cc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	4a1f      	ldr	r2, [pc, #124]	@ (8007d4c <prvHeapInit+0xac>)
 8007cd0:	4413      	add	r3, r2
 8007cd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d50 <prvHeapInit+0xb0>)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cde:	4b1c      	ldr	r3, [pc, #112]	@ (8007d50 <prvHeapInit+0xb0>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	4413      	add	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007cec:	2208      	movs	r2, #8
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	1a9b      	subs	r3, r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0307 	bic.w	r3, r3, #7
 8007cfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4a15      	ldr	r2, [pc, #84]	@ (8007d54 <prvHeapInit+0xb4>)
 8007d00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d02:	4b14      	ldr	r3, [pc, #80]	@ (8007d54 <prvHeapInit+0xb4>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2200      	movs	r2, #0
 8007d08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d0a:	4b12      	ldr	r3, [pc, #72]	@ (8007d54 <prvHeapInit+0xb4>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	1ad2      	subs	r2, r2, r3
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d20:	4b0c      	ldr	r3, [pc, #48]	@ (8007d54 <prvHeapInit+0xb4>)
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8007d58 <prvHeapInit+0xb8>)
 8007d2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	4a09      	ldr	r2, [pc, #36]	@ (8007d5c <prvHeapInit+0xbc>)
 8007d36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d38:	4b09      	ldr	r3, [pc, #36]	@ (8007d60 <prvHeapInit+0xc0>)
 8007d3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007d3e:	601a      	str	r2, [r3, #0]
}
 8007d40:	bf00      	nop
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	20001510 	.word	0x20001510
 8007d50:	200020c8 	.word	0x200020c8
 8007d54:	200020d0 	.word	0x200020d0
 8007d58:	200020d8 	.word	0x200020d8
 8007d5c:	200020d4 	.word	0x200020d4
 8007d60:	200020e4 	.word	0x200020e4

08007d64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d6c:	4b28      	ldr	r3, [pc, #160]	@ (8007e10 <prvInsertBlockIntoFreeList+0xac>)
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	e002      	b.n	8007d78 <prvInsertBlockIntoFreeList+0x14>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d8f7      	bhi.n	8007d72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d108      	bne.n	8007da6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	441a      	add	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	441a      	add	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d118      	bne.n	8007dec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	4b15      	ldr	r3, [pc, #84]	@ (8007e14 <prvInsertBlockIntoFreeList+0xb0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d00d      	beq.n	8007de2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	441a      	add	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	e008      	b.n	8007df4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007de2:	4b0c      	ldr	r3, [pc, #48]	@ (8007e14 <prvInsertBlockIntoFreeList+0xb0>)
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	e003      	b.n	8007df4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d002      	beq.n	8007e02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e02:	bf00      	nop
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	200020c8 	.word	0x200020c8
 8007e14:	200020d0 	.word	0x200020d0

08007e18 <memset>:
 8007e18:	4402      	add	r2, r0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d100      	bne.n	8007e22 <memset+0xa>
 8007e20:	4770      	bx	lr
 8007e22:	f803 1b01 	strb.w	r1, [r3], #1
 8007e26:	e7f9      	b.n	8007e1c <memset+0x4>

08007e28 <__libc_init_array>:
 8007e28:	b570      	push	{r4, r5, r6, lr}
 8007e2a:	4d0d      	ldr	r5, [pc, #52]	@ (8007e60 <__libc_init_array+0x38>)
 8007e2c:	4c0d      	ldr	r4, [pc, #52]	@ (8007e64 <__libc_init_array+0x3c>)
 8007e2e:	1b64      	subs	r4, r4, r5
 8007e30:	10a4      	asrs	r4, r4, #2
 8007e32:	2600      	movs	r6, #0
 8007e34:	42a6      	cmp	r6, r4
 8007e36:	d109      	bne.n	8007e4c <__libc_init_array+0x24>
 8007e38:	4d0b      	ldr	r5, [pc, #44]	@ (8007e68 <__libc_init_array+0x40>)
 8007e3a:	4c0c      	ldr	r4, [pc, #48]	@ (8007e6c <__libc_init_array+0x44>)
 8007e3c:	f000 f826 	bl	8007e8c <_init>
 8007e40:	1b64      	subs	r4, r4, r5
 8007e42:	10a4      	asrs	r4, r4, #2
 8007e44:	2600      	movs	r6, #0
 8007e46:	42a6      	cmp	r6, r4
 8007e48:	d105      	bne.n	8007e56 <__libc_init_array+0x2e>
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}
 8007e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e50:	4798      	blx	r3
 8007e52:	3601      	adds	r6, #1
 8007e54:	e7ee      	b.n	8007e34 <__libc_init_array+0xc>
 8007e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e5a:	4798      	blx	r3
 8007e5c:	3601      	adds	r6, #1
 8007e5e:	e7f2      	b.n	8007e46 <__libc_init_array+0x1e>
 8007e60:	08007fdc 	.word	0x08007fdc
 8007e64:	08007fdc 	.word	0x08007fdc
 8007e68:	08007fdc 	.word	0x08007fdc
 8007e6c:	08007fe0 	.word	0x08007fe0

08007e70 <memcpy>:
 8007e70:	440a      	add	r2, r1
 8007e72:	4291      	cmp	r1, r2
 8007e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e78:	d100      	bne.n	8007e7c <memcpy+0xc>
 8007e7a:	4770      	bx	lr
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e86:	4291      	cmp	r1, r2
 8007e88:	d1f9      	bne.n	8007e7e <memcpy+0xe>
 8007e8a:	bd10      	pop	{r4, pc}

08007e8c <_init>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	bf00      	nop
 8007e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e92:	bc08      	pop	{r3}
 8007e94:	469e      	mov	lr, r3
 8007e96:	4770      	bx	lr

08007e98 <_fini>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	bf00      	nop
 8007e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9e:	bc08      	pop	{r3}
 8007ea0:	469e      	mov	lr, r3
 8007ea2:	4770      	bx	lr
