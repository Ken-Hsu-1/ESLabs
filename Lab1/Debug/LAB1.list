
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080090b4  080090b4  0000a0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009280  08009280  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  08009280  08009280  0000a280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009288  08009288  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009288  08009288  0000a288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800928c  0800928c  0000a28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08009290  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020ec  20000010  080092a0  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020fc  080092a0  0000b0fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026395  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004907  00000000  00000000  000313d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002308  00000000  00000000  00035ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b60  00000000  00000000  00037fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049f2  00000000  00000000  00039b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000279d0  00000000  00000000  0003e53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001082e5  00000000  00000000  00065f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e1ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009804  00000000  00000000  0016e234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00177a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800909c 	.word	0x0800909c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800909c 	.word	0x0800909c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f001 f8bb 	bl	800163e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f89a 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fa9c 	bl	8000a08 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d0:	f000 f8f8 	bl	80006c4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d4:	f000 f92e 	bl	8000734 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f96c 	bl	80007b4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004dc:	f000 f990 	bl	8000800 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 fa04 	bl	80008ec <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004e4:	f000 fa32 	bl	800094c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004e8:	f000 fa60 	bl	80009ac <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 80004ec:	f000 f9c6 	bl	800087c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f004 ffc2 	bl	8005478 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of blinking */
  blinkingHandle = osMutexNew(&blinking_attributes);
 80004f4:	482a      	ldr	r0, [pc, #168]	@ (80005a0 <main+0xe0>)
 80004f6:	f005 f8b6 	bl	8005666 <osMutexNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a29      	ldr	r2, [pc, #164]	@ (80005a4 <main+0xe4>)
 80004fe:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of shortpress */
  shortpressHandle = osSemaphoreNew(1, 0, &shortpress_attributes);
 8000500:	4a29      	ldr	r2, [pc, #164]	@ (80005a8 <main+0xe8>)
 8000502:	2100      	movs	r1, #0
 8000504:	2001      	movs	r0, #1
 8000506:	f005 f9bc 	bl	8005882 <osSemaphoreNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a27      	ldr	r2, [pc, #156]	@ (80005ac <main+0xec>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of timerforblink */
  timerforblinkHandle = osSemaphoreNew(1, 0, &timerforblink_attributes);
 8000510:	4a27      	ldr	r2, [pc, #156]	@ (80005b0 <main+0xf0>)
 8000512:	2100      	movs	r1, #0
 8000514:	2001      	movs	r0, #1
 8000516:	f005 f9b4 	bl	8005882 <osSemaphoreNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a25      	ldr	r2, [pc, #148]	@ (80005b4 <main+0xf4>)
 800051e:	6013      	str	r3, [r2, #0]

  /* creation of longpress */
  longpressHandle = osSemaphoreNew(1, 0, &longpress_attributes);
 8000520:	4a25      	ldr	r2, [pc, #148]	@ (80005b8 <main+0xf8>)
 8000522:	2100      	movs	r1, #0
 8000524:	2001      	movs	r0, #1
 8000526:	f005 f9ac 	bl	8005882 <osSemaphoreNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a23      	ldr	r2, [pc, #140]	@ (80005bc <main+0xfc>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of pressdetect */
  pressdetectHandle = osSemaphoreNew(1, 0, &pressdetect_attributes);
 8000530:	4a23      	ldr	r2, [pc, #140]	@ (80005c0 <main+0x100>)
 8000532:	2100      	movs	r1, #0
 8000534:	2001      	movs	r0, #1
 8000536:	f005 f9a4 	bl	8005882 <osSemaphoreNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a21      	ldr	r2, [pc, #132]	@ (80005c4 <main+0x104>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 0, &myCountingSem01_attributes);
 8000540:	4a21      	ldr	r2, [pc, #132]	@ (80005c8 <main+0x108>)
 8000542:	2100      	movs	r1, #0
 8000544:	2002      	movs	r0, #2
 8000546:	f005 f99c 	bl	8005882 <osSemaphoreNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a1f      	ldr	r2, [pc, #124]	@ (80005cc <main+0x10c>)
 800054e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  HAL_TIM_Base_Start_IT(&htim6);
 8000550:	481f      	ldr	r0, [pc, #124]	@ (80005d0 <main+0x110>)
 8000552:	f003 fca3 	bl	8003e9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of pressforblink */
  pressforblinkHandle = osMessageQueueNew (1, sizeof(uint16_t), &pressforblink_attributes);
 8000556:	4a1f      	ldr	r2, [pc, #124]	@ (80005d4 <main+0x114>)
 8000558:	2102      	movs	r1, #2
 800055a:	2001      	movs	r0, #1
 800055c:	f005 fab0 	bl	8005ac0 <osMessageQueueNew>
 8000560:	4603      	mov	r3, r0
 8000562:	4a1d      	ldr	r2, [pc, #116]	@ (80005d8 <main+0x118>)
 8000564:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PressBlink */
  PressBlinkHandle = osThreadNew(StartPressBlink, NULL, &PressBlink_attributes);
 8000566:	4a1d      	ldr	r2, [pc, #116]	@ (80005dc <main+0x11c>)
 8000568:	2100      	movs	r1, #0
 800056a:	481d      	ldr	r0, [pc, #116]	@ (80005e0 <main+0x120>)
 800056c:	f004 ffce 	bl	800550c <osThreadNew>
 8000570:	4603      	mov	r3, r0
 8000572:	4a1c      	ldr	r2, [pc, #112]	@ (80005e4 <main+0x124>)
 8000574:	6013      	str	r3, [r2, #0]

  /* creation of timerBlink */
  timerBlinkHandle = osThreadNew(StartTimerBlink, NULL, &timerBlink_attributes);
 8000576:	4a1c      	ldr	r2, [pc, #112]	@ (80005e8 <main+0x128>)
 8000578:	2100      	movs	r1, #0
 800057a:	481c      	ldr	r0, [pc, #112]	@ (80005ec <main+0x12c>)
 800057c:	f004 ffc6 	bl	800550c <osThreadNew>
 8000580:	4603      	mov	r3, r0
 8000582:	4a1b      	ldr	r2, [pc, #108]	@ (80005f0 <main+0x130>)
 8000584:	6013      	str	r3, [r2, #0]

  /* creation of detectButton */
  detectButtonHandle = osThreadNew(StartDetectButton, NULL, &detectButton_attributes);
 8000586:	4a1b      	ldr	r2, [pc, #108]	@ (80005f4 <main+0x134>)
 8000588:	2100      	movs	r1, #0
 800058a:	481b      	ldr	r0, [pc, #108]	@ (80005f8 <main+0x138>)
 800058c:	f004 ffbe 	bl	800550c <osThreadNew>
 8000590:	4603      	mov	r3, r0
 8000592:	4a1a      	ldr	r2, [pc, #104]	@ (80005fc <main+0x13c>)
 8000594:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000596:	f004 ff93 	bl	80054c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059a:	bf00      	nop
 800059c:	e7fd      	b.n	800059a <main+0xda>
 800059e:	bf00      	nop
 80005a0:	080091d8 	.word	0x080091d8
 80005a4:	200007b0 	.word	0x200007b0
 80005a8:	080091e8 	.word	0x080091e8
 80005ac:	200007b4 	.word	0x200007b4
 80005b0:	080091f8 	.word	0x080091f8
 80005b4:	200007b8 	.word	0x200007b8
 80005b8:	08009208 	.word	0x08009208
 80005bc:	200007bc 	.word	0x200007bc
 80005c0:	08009218 	.word	0x08009218
 80005c4:	200007c0 	.word	0x200007c0
 80005c8:	08009228 	.word	0x08009228
 80005cc:	200007c4 	.word	0x200007c4
 80005d0:	20000160 	.word	0x20000160
 80005d4:	080091c0 	.word	0x080091c0
 80005d8:	200007ac 	.word	0x200007ac
 80005dc:	08009154 	.word	0x08009154
 80005e0:	08000dc5 	.word	0x08000dc5
 80005e4:	200007a0 	.word	0x200007a0
 80005e8:	08009178 	.word	0x08009178
 80005ec:	08000e7d 	.word	0x08000e7d
 80005f0:	200007a4 	.word	0x200007a4
 80005f4:	0800919c 	.word	0x0800919c
 80005f8:	08000eed 	.word	0x08000eed
 80005fc:	200007a8 	.word	0x200007a8

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b096      	sub	sp, #88	@ 0x58
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	2244      	movs	r2, #68	@ 0x44
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f008 fd0a 	bl	8009028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	463b      	mov	r3, r7
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000622:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000626:	f001 ff51 	bl	80024cc <HAL_PWREx_ControlVoltageScaling>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000630:	f000 fc90 	bl	8000f54 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000634:	f001 ff2c 	bl	8002490 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <SystemClock_Config+0xc0>)
 800063a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800063e:	4a20      	ldr	r2, [pc, #128]	@ (80006c0 <SystemClock_Config+0xc0>)
 8000640:	f023 0318 	bic.w	r3, r3, #24
 8000644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000648:	2314      	movs	r3, #20
 800064a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000658:	2360      	movs	r3, #96	@ 0x60
 800065a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000660:	2301      	movs	r3, #1
 8000662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000668:	2328      	movs	r3, #40	@ 0x28
 800066a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066c:	2307      	movs	r3, #7
 800066e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4618      	mov	r0, r3
 800067e:	f002 f847 	bl	8002710 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000688:	f000 fc64 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2303      	movs	r3, #3
 8000692:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	2104      	movs	r1, #4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fc0f 	bl	8002ec8 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006b0:	f000 fc50 	bl	8000f54 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006b4:	f003 f916 	bl	80038e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b8:	bf00      	nop
 80006ba:	3758      	adds	r7, #88	@ 0x58
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <MX_DFSDM1_Init+0x68>)
 80006ca:	4a19      	ldr	r2, [pc, #100]	@ (8000730 <MX_DFSDM1_Init+0x6c>)
 80006cc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_DFSDM1_Init+0x68>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <MX_DFSDM1_Init+0x68>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_DFSDM1_Init+0x68>)
 80006dc:	2202      	movs	r2, #2
 80006de:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_DFSDM1_Init+0x68>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_DFSDM1_Init+0x68>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_DFSDM1_Init+0x68>)
 80006ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006f2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <MX_DFSDM1_Init+0x68>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_DFSDM1_Init+0x68>)
 80006fc:	2204      	movs	r2, #4
 80006fe:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <MX_DFSDM1_Init+0x68>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_DFSDM1_Init+0x68>)
 8000708:	2201      	movs	r2, #1
 800070a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <MX_DFSDM1_Init+0x68>)
 800070e:	2200      	movs	r2, #0
 8000710:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_DFSDM1_Init+0x68>)
 8000714:	2200      	movs	r2, #0
 8000716:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_DFSDM1_Init+0x68>)
 800071a:	f001 f93b 	bl	8001994 <HAL_DFSDM_ChannelInit>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000724:	f000 fc16 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000002c 	.word	0x2000002c
 8000730:	40016020 	.word	0x40016020

08000734 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000738:	4b1b      	ldr	r3, [pc, #108]	@ (80007a8 <MX_I2C2_Init+0x74>)
 800073a:	4a1c      	ldr	r2, [pc, #112]	@ (80007ac <MX_I2C2_Init+0x78>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800073e:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <MX_I2C2_Init+0x74>)
 8000740:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <MX_I2C2_Init+0x7c>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000744:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <MX_I2C2_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074a:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <MX_I2C2_Init+0x74>)
 800074c:	2201      	movs	r2, #1
 800074e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <MX_I2C2_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000756:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_I2C2_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_I2C2_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_I2C2_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_I2C2_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800076e:	480e      	ldr	r0, [pc, #56]	@ (80007a8 <MX_I2C2_Init+0x74>)
 8000770:	f001 fc28 	bl	8001fc4 <HAL_I2C_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800077a:	f000 fbeb 	bl	8000f54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4809      	ldr	r0, [pc, #36]	@ (80007a8 <MX_I2C2_Init+0x74>)
 8000782:	f001 fcba 	bl	80020fa <HAL_I2CEx_ConfigAnalogFilter>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800078c:	f000 fbe2 	bl	8000f54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000790:	2100      	movs	r1, #0
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <MX_I2C2_Init+0x74>)
 8000794:	f001 fcfc 	bl	8002190 <HAL_I2CEx_ConfigDigitalFilter>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800079e:	f000 fbd9 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000064 	.word	0x20000064
 80007ac:	40005800 	.word	0x40005800
 80007b0:	10d19ce4 	.word	0x10d19ce4

080007b4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_QUADSPI_Init+0x44>)
 80007ba:	4a10      	ldr	r2, [pc, #64]	@ (80007fc <MX_QUADSPI_Init+0x48>)
 80007bc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_QUADSPI_Init+0x44>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_QUADSPI_Init+0x44>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_QUADSPI_Init+0x44>)
 80007cc:	2210      	movs	r2, #16
 80007ce:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_QUADSPI_Init+0x44>)
 80007d2:	2217      	movs	r2, #23
 80007d4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <MX_QUADSPI_Init+0x44>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_QUADSPI_Init+0x44>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_QUADSPI_Init+0x44>)
 80007e4:	f001 fed8 	bl	8002598 <HAL_QSPI_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007ee:	f000 fbb1 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000b8 	.word	0x200000b8
 80007fc:	a0001000 	.word	0xa0001000

08000800 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <MX_SPI3_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	@ (8000878 <MX_SPI3_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_SPI3_Init+0x74>)
 800080c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000810:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000818:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_SPI3_Init+0x74>)
 800081a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800081e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_SPI3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_SPI3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_SPI3_Init+0x74>)
 800082e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000832:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_SPI3_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_SPI3_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_SPI3_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_SPI3_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_SPI3_Init+0x74>)
 800084e:	2207      	movs	r2, #7
 8000850:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_SPI3_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_SPI3_Init+0x74>)
 800085a:	2208      	movs	r2, #8
 800085c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_SPI3_Init+0x74>)
 8000860:	f003 fa22 	bl	8003ca8 <HAL_SPI_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 fb73 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000fc 	.word	0x200000fc
 8000878:	40003c00 	.word	0x40003c00

0800087c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <MX_TIM6_Init+0x68>)
 800088e:	4a16      	ldr	r2, [pc, #88]	@ (80008e8 <MX_TIM6_Init+0x6c>)
 8000890:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 49999;
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_TIM6_Init+0x68>)
 8000894:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000898:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_TIM6_Init+0x68>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 15999;
 80008a0:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <MX_TIM6_Init+0x68>)
 80008a2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80008a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_TIM6_Init+0x68>)
 80008aa:	2280      	movs	r2, #128	@ 0x80
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008ae:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_TIM6_Init+0x68>)
 80008b0:	f003 fa9d 	bl	8003dee <HAL_TIM_Base_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80008ba:	f000 fb4b 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	@ (80008e4 <MX_TIM6_Init+0x68>)
 80008cc:	f003 fd2c 	bl	8004328 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80008d6:	f000 fb3d 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000160 	.word	0x20000160
 80008e8:	40001000 	.word	0x40001000

080008ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <MX_USART1_UART_Init+0x58>)
 80008f2:	4a15      	ldr	r2, [pc, #84]	@ (8000948 <MX_USART1_UART_Init+0x5c>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008f6:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <MX_USART1_UART_Init+0x58>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_USART1_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_USART1_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_USART1_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_USART1_UART_Init+0x58>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_USART1_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_USART1_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_USART1_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_USART1_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_USART1_UART_Init+0x58>)
 8000930:	f003 fda0 	bl	8004474 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 fb0b 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200001ac 	.word	0x200001ac
 8000948:	40013800 	.word	0x40013800

0800094c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_USART3_UART_Init+0x58>)
 8000952:	4a15      	ldr	r2, [pc, #84]	@ (80009a8 <MX_USART3_UART_Init+0x5c>)
 8000954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <MX_USART3_UART_Init+0x58>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_USART3_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_USART3_UART_Init+0x58>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <MX_USART3_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_USART3_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <MX_USART3_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_USART3_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_USART3_UART_Init+0x58>)
 8000990:	f003 fd70 	bl	8004474 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800099a:	f000 fadb 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000234 	.word	0x20000234
 80009a8:	40004800 	.word	0x40004800

080009ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2206      	movs	r2, #6
 80009bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009dc:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f0:	f001 fc1a 	bl	8002228 <HAL_PCD_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009fa:	f000 faab 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200002bc 	.word	0x200002bc

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1e:	4bbd      	ldr	r3, [pc, #756]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a22:	4abc      	ldr	r2, [pc, #752]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a24:	f043 0310 	orr.w	r3, r3, #16
 8000a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2a:	4bba      	ldr	r3, [pc, #744]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2e:	f003 0310 	and.w	r3, r3, #16
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4bb7      	ldr	r3, [pc, #732]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3a:	4ab6      	ldr	r2, [pc, #728]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a42:	4bb4      	ldr	r3, [pc, #720]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4bb1      	ldr	r3, [pc, #708]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a52:	4ab0      	ldr	r2, [pc, #704]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5a:	4bae      	ldr	r3, [pc, #696]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4bab      	ldr	r3, [pc, #684]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6a:	4aaa      	ldr	r2, [pc, #680]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a72:	4ba8      	ldr	r3, [pc, #672]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7e:	4ba5      	ldr	r3, [pc, #660]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a82:	4aa4      	ldr	r2, [pc, #656]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8a:	4ba2      	ldr	r3, [pc, #648]	@ (8000d14 <MX_GPIO_Init+0x30c>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000a9c:	489e      	ldr	r0, [pc, #632]	@ (8000d18 <MX_GPIO_Init+0x310>)
 8000a9e:	f001 fa47 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aac:	f001 fa40 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000ab6:	4899      	ldr	r0, [pc, #612]	@ (8000d1c <MX_GPIO_Init+0x314>)
 8000ab8:	f001 fa3a 	bl	8001f30 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000ac2:	4897      	ldr	r0, [pc, #604]	@ (8000d20 <MX_GPIO_Init+0x318>)
 8000ac4:	f001 fa34 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ace:	4894      	ldr	r0, [pc, #592]	@ (8000d20 <MX_GPIO_Init+0x318>)
 8000ad0:	f001 fa2e 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000ada:	4892      	ldr	r0, [pc, #584]	@ (8000d24 <MX_GPIO_Init+0x31c>)
 8000adc:	f001 fa28 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2120      	movs	r1, #32
 8000ae4:	488d      	ldr	r0, [pc, #564]	@ (8000d1c <MX_GPIO_Init+0x314>)
 8000ae6:	f001 fa23 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	2101      	movs	r1, #1
 8000aee:	488a      	ldr	r0, [pc, #552]	@ (8000d18 <MX_GPIO_Init+0x310>)
 8000af0:	f001 fa1e 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000af4:	f240 1315 	movw	r3, #277	@ 0x115
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4882      	ldr	r0, [pc, #520]	@ (8000d18 <MX_GPIO_Init+0x310>)
 8000b0e:	f001 f84d 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b12:	236a      	movs	r3, #106	@ 0x6a
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	487c      	ldr	r0, [pc, #496]	@ (8000d18 <MX_GPIO_Init+0x310>)
 8000b28:	f001 f840 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b32:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4878      	ldr	r0, [pc, #480]	@ (8000d24 <MX_GPIO_Init+0x31c>)
 8000b44:	f001 f832 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b48:	233f      	movs	r3, #63	@ 0x3f
 8000b4a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b4c:	230b      	movs	r3, #11
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4872      	ldr	r0, [pc, #456]	@ (8000d24 <MX_GPIO_Init+0x31c>)
 8000b5c:	f001 f826 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b60:	2303      	movs	r3, #3
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b70:	2308      	movs	r3, #8
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7e:	f001 f815 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b82:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9e:	f001 f805 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc0:	f000 fff4 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bc8:	230b      	movs	r3, #11
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bda:	f000 ffe7 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bde:	23e0      	movs	r3, #224	@ 0xe0
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bee:	2305      	movs	r3, #5
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfc:	f000 ffd6 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c04:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4841      	ldr	r0, [pc, #260]	@ (8000d1c <MX_GPIO_Init+0x314>)
 8000c16:	f000 ffc9 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c1e:	230b      	movs	r3, #11
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	483b      	ldr	r0, [pc, #236]	@ (8000d1c <MX_GPIO_Init+0x314>)
 8000c2e:	f000 ffbd 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c32:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000c36:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4834      	ldr	r0, [pc, #208]	@ (8000d1c <MX_GPIO_Init+0x314>)
 8000c4c:	f000 ffae 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c50:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000c54:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	482e      	ldr	r0, [pc, #184]	@ (8000d20 <MX_GPIO_Init+0x318>)
 8000c68:	f000 ffa0 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c6c:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4826      	ldr	r0, [pc, #152]	@ (8000d20 <MX_GPIO_Init+0x318>)
 8000c86:	f000 ff91 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c8a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4820      	ldr	r0, [pc, #128]	@ (8000d24 <MX_GPIO_Init+0x31c>)
 8000ca4:	f000 ff82 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ca8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <MX_GPIO_Init+0x31c>)
 8000cc0:	f000 ff74 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4810      	ldr	r0, [pc, #64]	@ (8000d20 <MX_GPIO_Init+0x318>)
 8000ce0:	f000 ff64 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000ce4:	2378      	movs	r3, #120	@ 0x78
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <MX_GPIO_Init+0x318>)
 8000d00:	f000 ff54 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0a:	2312      	movs	r3, #18
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e00a      	b.n	8000d28 <MX_GPIO_Init+0x320>
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000
 8000d18:	48001000 	.word	0x48001000
 8000d1c:	48000400 	.word	0x48000400
 8000d20:	48000c00 	.word	0x48000c00
 8000d24:	48000800 	.word	0x48000800
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <MX_GPIO_Init+0x360>)
 8000d3a:	f000 ff37 	bl	8001bac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2105      	movs	r1, #5
 8000d42:	2017      	movs	r0, #23
 8000d44:	f000 fdef 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d48:	2017      	movs	r0, #23
 8000d4a:	f000 fe08 	bl	800195e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2105      	movs	r1, #5
 8000d52:	2028      	movs	r0, #40	@ 0x28
 8000d54:	f000 fde7 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d58:	2028      	movs	r0, #40	@ 0x28
 8000d5a:	f000 fe00 	bl	800195e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	@ 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	48000400 	.word	0x48000400

08000d6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d7c:	d105      	bne.n	8000d8a <HAL_GPIO_EXTI_Callback+0x1e>
  {
	  case GPIO_PIN_13:
		  {
			  osSemaphoreRelease(pressdetectHandle);
 8000d7e:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x28>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f004 fe58 	bl	8005a38 <osSemaphoreRelease>
			  break;
 8000d88:	e000      	b.n	8000d8c <HAL_GPIO_EXTI_Callback+0x20>
		  }
	  default:
		  break;
 8000d8a:	bf00      	nop
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200007c0 	.word	0x200007c0

08000d98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a06      	ldr	r2, [pc, #24]	@ (8000dbc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d104      	bne.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		osSemaphoreRelease(timerforblinkHandle);
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f004 fe43 	bl	8005a38 <osSemaphoreRelease>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000160 	.word	0x20000160
 8000dc0:	200007b8 	.word	0x200007b8

08000dc4 <StartPressBlink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartPressBlink */
void StartPressBlink(void *argument)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint16_t msg;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(pressforblinkHandle,&msg,NULL,osWaitForever);
 8000dcc:	4b28      	ldr	r3, [pc, #160]	@ (8000e70 <StartPressBlink+0xac>)
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	f107 010e 	add.w	r1, r7, #14
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f004 ff45 	bl	8005c68 <osMessageQueueGet>
	  osMutexAcquire(blinkingHandle,osWaitForever);
 8000dde:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <StartPressBlink+0xb0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f04f 31ff 	mov.w	r1, #4294967295
 8000de6:	4618      	mov	r0, r3
 8000de8:	f004 fcc3 	bl	8005772 <osMutexAcquire>
	  if(msg == 0){
 8000dec:	89fb      	ldrh	r3, [r7, #14]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d11b      	bne.n	8000e2a <StartPressBlink+0x66>
		  for(int i=0; i<5; i++){
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e014      	b.n	8000e22 <StartPressBlink+0x5e>
			  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000df8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dfc:	481e      	ldr	r0, [pc, #120]	@ (8000e78 <StartPressBlink+0xb4>)
 8000dfe:	f001 f8af 	bl	8001f60 <HAL_GPIO_TogglePin>
			  osDelay(500);
 8000e02:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e06:	f004 fc13 	bl	8005630 <osDelay>
			  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000e0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e0e:	481a      	ldr	r0, [pc, #104]	@ (8000e78 <StartPressBlink+0xb4>)
 8000e10:	f001 f8a6 	bl	8001f60 <HAL_GPIO_TogglePin>
			  osDelay(500);
 8000e14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e18:	f004 fc0a 	bl	8005630 <osDelay>
		  for(int i=0; i<5; i++){
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	dde7      	ble.n	8000df8 <StartPressBlink+0x34>
 8000e28:	e01b      	b.n	8000e62 <StartPressBlink+0x9e>
		  }
	  }
	  else if(msg == 1){
 8000e2a:	89fb      	ldrh	r3, [r7, #14]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d118      	bne.n	8000e62 <StartPressBlink+0x9e>
		  for(int i=0; i<50; i++){
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	e012      	b.n	8000e5c <StartPressBlink+0x98>
			  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000e36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3a:	480f      	ldr	r0, [pc, #60]	@ (8000e78 <StartPressBlink+0xb4>)
 8000e3c:	f001 f890 	bl	8001f60 <HAL_GPIO_TogglePin>
			  osDelay(50);
 8000e40:	2032      	movs	r0, #50	@ 0x32
 8000e42:	f004 fbf5 	bl	8005630 <osDelay>
			  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000e46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e4a:	480b      	ldr	r0, [pc, #44]	@ (8000e78 <StartPressBlink+0xb4>)
 8000e4c:	f001 f888 	bl	8001f60 <HAL_GPIO_TogglePin>
			  osDelay(50);
 8000e50:	2032      	movs	r0, #50	@ 0x32
 8000e52:	f004 fbed 	bl	8005630 <osDelay>
		  for(int i=0; i<50; i++){
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	2b31      	cmp	r3, #49	@ 0x31
 8000e60:	dde9      	ble.n	8000e36 <StartPressBlink+0x72>
		  }

	  }
	  osMutexRelease(blinkingHandle);
 8000e62:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <StartPressBlink+0xb0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f004 fcce 	bl	8005808 <osMutexRelease>
	  osMessageQueueGet(pressforblinkHandle,&msg,NULL,osWaitForever);
 8000e6c:	e7ae      	b.n	8000dcc <StartPressBlink+0x8>
 8000e6e:	bf00      	nop
 8000e70:	200007ac 	.word	0x200007ac
 8000e74:	200007b0 	.word	0x200007b0
 8000e78:	48000400 	.word	0x48000400

08000e7c <StartTimerBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimerBlink */
void StartTimerBlink(void *argument)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimerBlink */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(timerforblinkHandle,osWaitForever);
 8000e84:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <StartTimerBlink+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fd81 	bl	8005994 <osSemaphoreAcquire>
	  osMutexAcquire(blinkingHandle,osWaitForever);
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <StartTimerBlink+0x68>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f004 fc69 	bl	8005772 <osMutexAcquire>
	  for(int i=0; i<20; i++){
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	e012      	b.n	8000ecc <StartTimerBlink+0x50>
		  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000ea6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eaa:	480f      	ldr	r0, [pc, #60]	@ (8000ee8 <StartTimerBlink+0x6c>)
 8000eac:	f001 f858 	bl	8001f60 <HAL_GPIO_TogglePin>
		  osDelay(50);
 8000eb0:	2032      	movs	r0, #50	@ 0x32
 8000eb2:	f004 fbbd 	bl	8005630 <osDelay>
		  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000eb6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eba:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <StartTimerBlink+0x6c>)
 8000ebc:	f001 f850 	bl	8001f60 <HAL_GPIO_TogglePin>
		  osDelay(50);
 8000ec0:	2032      	movs	r0, #50	@ 0x32
 8000ec2:	f004 fbb5 	bl	8005630 <osDelay>
	  for(int i=0; i<20; i++){
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b13      	cmp	r3, #19
 8000ed0:	dde9      	ble.n	8000ea6 <StartTimerBlink+0x2a>
	  }
	  osMutexRelease(blinkingHandle);
 8000ed2:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <StartTimerBlink+0x68>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f004 fc96 	bl	8005808 <osMutexRelease>
	  osSemaphoreAcquire(timerforblinkHandle,osWaitForever);
 8000edc:	e7d2      	b.n	8000e84 <StartTimerBlink+0x8>
 8000ede:	bf00      	nop
 8000ee0:	200007b8 	.word	0x200007b8
 8000ee4:	200007b0 	.word	0x200007b0
 8000ee8:	48000400 	.word	0x48000400

08000eec <StartDetectButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDetectButton */
void StartDetectButton(void *argument)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDetectButton */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(pressdetectHandle,osWaitForever);
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <StartDetectButton+0x5c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	4618      	mov	r0, r3
 8000efe:	f004 fd49 	bl	8005994 <osSemaphoreAcquire>
	  uint16_t msg;
	  msg = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	817b      	strh	r3, [r7, #10]
	  for(int i=0; i<8; i++){
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	e010      	b.n	8000f2e <StartDetectButton+0x42>
		  osDelay(100);
 8000f0c:	2064      	movs	r0, #100	@ 0x64
 8000f0e:	f004 fb8f 	bl	8005630 <osDelay>
	  	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1){
 8000f12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <StartDetectButton+0x60>)
 8000f18:	f000 fff2 	bl	8001f00 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d102      	bne.n	8000f28 <StartDetectButton+0x3c>
	  		  msg = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	817b      	strh	r3, [r7, #10]
	  		  break;
 8000f26:	e005      	b.n	8000f34 <StartDetectButton+0x48>
	  for(int i=0; i<8; i++){
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2b07      	cmp	r3, #7
 8000f32:	ddeb      	ble.n	8000f0c <StartDetectButton+0x20>
	  	  }
	  }
	  osMessageQueuePut(pressforblinkHandle,&msg,0,NULL);
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <StartDetectButton+0x64>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	f107 010a 	add.w	r1, r7, #10
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f004 fe32 	bl	8005ba8 <osMessageQueuePut>
  {
 8000f44:	e7d6      	b.n	8000ef4 <StartDetectButton+0x8>
 8000f46:	bf00      	nop
 8000f48:	200007c0 	.word	0x200007c0
 8000f4c:	48000800 	.word	0x48000800
 8000f50:	200007ac 	.word	0x200007ac

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <Error_Handler+0x8>

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6a:	4a10      	ldr	r2, [pc, #64]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	210f      	movs	r1, #15
 8000f9a:	f06f 0001 	mvn.w	r0, #1
 8000f9e:	f000 fcc2 	bl	8001926 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0ac      	sub	sp, #176	@ 0xb0
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2288      	movs	r2, #136	@ 0x88
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f008 f829 	bl	8009028 <memset>
  if(DFSDM1_Init == 0)
 8000fd6:	4b25      	ldr	r3, [pc, #148]	@ (800106c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d142      	bne.n	8001064 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000fde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fe2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 f98e 	bl	8003310 <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000ffa:	f7ff ffab 	bl	8000f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001002:	4a1b      	ldr	r2, [pc, #108]	@ (8001070 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001004:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001008:	6613      	str	r3, [r2, #96]	@ 0x60
 800100a:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001016:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	4a15      	ldr	r2, [pc, #84]	@ (8001070 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001022:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800102e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001032:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001048:	2306      	movs	r3, #6
 800104a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001052:	4619      	mov	r1, r3
 8001054:	4807      	ldr	r0, [pc, #28]	@ (8001074 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001056:	f000 fda9 	bl	8001bac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800105a:	4b04      	ldr	r3, [pc, #16]	@ (800106c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	4a02      	ldr	r2, [pc, #8]	@ (800106c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001062:	6013      	str	r3, [r2, #0]
  }

}
 8001064:	bf00      	nop
 8001066:	37b0      	adds	r7, #176	@ 0xb0
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200007c8 	.word	0x200007c8
 8001070:	40021000 	.word	0x40021000
 8001074:	48001000 	.word	0x48001000

08001078 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0ac      	sub	sp, #176	@ 0xb0
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2288      	movs	r2, #136	@ 0x88
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f007 ffc5 	bl	8009028 <memset>
  if(hi2c->Instance==I2C2)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <HAL_I2C_MspInit+0xb0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d13b      	bne.n	8001120 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010a8:	2380      	movs	r3, #128	@ 0x80
 80010aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 f92b 	bl	8003310 <HAL_RCCEx_PeriphCLKConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010c0:	f7ff ff48 	bl	8000f54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <HAL_I2C_MspInit+0xb4>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c8:	4a18      	ldr	r2, [pc, #96]	@ (800112c <HAL_I2C_MspInit+0xb4>)
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d0:	4b16      	ldr	r3, [pc, #88]	@ (800112c <HAL_I2C_MspInit+0xb4>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80010dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e4:	2312      	movs	r3, #18
 80010e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010f6:	2304      	movs	r3, #4
 80010f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001100:	4619      	mov	r1, r3
 8001102:	480b      	ldr	r0, [pc, #44]	@ (8001130 <HAL_I2C_MspInit+0xb8>)
 8001104:	f000 fd52 	bl	8001bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <HAL_I2C_MspInit+0xb4>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110c:	4a07      	ldr	r2, [pc, #28]	@ (800112c <HAL_I2C_MspInit+0xb4>)
 800110e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001112:	6593      	str	r3, [r2, #88]	@ 0x58
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_I2C_MspInit+0xb4>)
 8001116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001118:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001120:	bf00      	nop
 8001122:	37b0      	adds	r7, #176	@ 0xb0
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40005800 	.word	0x40005800
 800112c:	40021000 	.word	0x40021000
 8001130:	48000400 	.word	0x48000400

08001134 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a17      	ldr	r2, [pc, #92]	@ (80011b0 <HAL_QSPI_MspInit+0x7c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d128      	bne.n	80011a8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_QSPI_MspInit+0x80>)
 8001158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800115a:	4a16      	ldr	r2, [pc, #88]	@ (80011b4 <HAL_QSPI_MspInit+0x80>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001160:	6513      	str	r3, [r2, #80]	@ 0x50
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_QSPI_MspInit+0x80>)
 8001164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <HAL_QSPI_MspInit+0x80>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <HAL_QSPI_MspInit+0x80>)
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <HAL_QSPI_MspInit+0x80>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001186:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800118a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001198:	230a      	movs	r3, #10
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <HAL_QSPI_MspInit+0x84>)
 80011a4:	f000 fd02 	bl	8001bac <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	@ 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	a0001000 	.word	0xa0001000
 80011b4:	40021000 	.word	0x40021000
 80011b8:	48001000 	.word	0x48001000

080011bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a17      	ldr	r2, [pc, #92]	@ (8001238 <HAL_SPI_MspInit+0x7c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d128      	bne.n	8001230 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <HAL_SPI_MspInit+0x80>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e2:	4a16      	ldr	r2, [pc, #88]	@ (800123c <HAL_SPI_MspInit+0x80>)
 80011e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <HAL_SPI_MspInit+0x80>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <HAL_SPI_MspInit+0x80>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	4a10      	ldr	r2, [pc, #64]	@ (800123c <HAL_SPI_MspInit+0x80>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <HAL_SPI_MspInit+0x80>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800120e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001220:	2306      	movs	r3, #6
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <HAL_SPI_MspInit+0x84>)
 800122c:	f000 fcbe 	bl	8001bac <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	@ 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40003c00 	.word	0x40003c00
 800123c:	40021000 	.word	0x40021000
 8001240:	48000800 	.word	0x48000800

08001244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <HAL_TIM_Base_MspInit+0x44>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d113      	bne.n	800127e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001256:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <HAL_TIM_Base_MspInit+0x48>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125a:	4a0c      	ldr	r2, [pc, #48]	@ (800128c <HAL_TIM_Base_MspInit+0x48>)
 800125c:	f043 0310 	orr.w	r3, r3, #16
 8001260:	6593      	str	r3, [r2, #88]	@ 0x58
 8001262:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <HAL_TIM_Base_MspInit+0x48>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2105      	movs	r1, #5
 8001272:	2036      	movs	r0, #54	@ 0x36
 8001274:	f000 fb57 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001278:	2036      	movs	r0, #54	@ 0x36
 800127a:	f000 fb70 	bl	800195e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40001000 	.word	0x40001000
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0ae      	sub	sp, #184	@ 0xb8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	2288      	movs	r2, #136	@ 0x88
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f007 feb9 	bl	8009028 <memset>
  if(huart->Instance==USART1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a42      	ldr	r2, [pc, #264]	@ (80013c4 <HAL_UART_MspInit+0x134>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d13b      	bne.n	8001338 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012c4:	2300      	movs	r3, #0
 80012c6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 f81f 	bl	8003310 <HAL_RCCEx_PeriphCLKConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012d8:	f7ff fe3c 	bl	8000f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012dc:	4b3a      	ldr	r3, [pc, #232]	@ (80013c8 <HAL_UART_MspInit+0x138>)
 80012de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e0:	4a39      	ldr	r2, [pc, #228]	@ (80013c8 <HAL_UART_MspInit+0x138>)
 80012e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80012e8:	4b37      	ldr	r3, [pc, #220]	@ (80013c8 <HAL_UART_MspInit+0x138>)
 80012ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b34      	ldr	r3, [pc, #208]	@ (80013c8 <HAL_UART_MspInit+0x138>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f8:	4a33      	ldr	r2, [pc, #204]	@ (80013c8 <HAL_UART_MspInit+0x138>)
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001300:	4b31      	ldr	r3, [pc, #196]	@ (80013c8 <HAL_UART_MspInit+0x138>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800130c:	23c0      	movs	r3, #192	@ 0xc0
 800130e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001324:	2307      	movs	r3, #7
 8001326:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800132e:	4619      	mov	r1, r3
 8001330:	4826      	ldr	r0, [pc, #152]	@ (80013cc <HAL_UART_MspInit+0x13c>)
 8001332:	f000 fc3b 	bl	8001bac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001336:	e040      	b.n	80013ba <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a24      	ldr	r2, [pc, #144]	@ (80013d0 <HAL_UART_MspInit+0x140>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d13b      	bne.n	80013ba <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001342:	2304      	movs	r3, #4
 8001344:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001346:	2300      	movs	r3, #0
 8001348:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4618      	mov	r0, r3
 8001350:	f001 ffde 	bl	8003310 <HAL_RCCEx_PeriphCLKConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800135a:	f7ff fdfb 	bl	8000f54 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800135e:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <HAL_UART_MspInit+0x138>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001362:	4a19      	ldr	r2, [pc, #100]	@ (80013c8 <HAL_UART_MspInit+0x138>)
 8001364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001368:	6593      	str	r3, [r2, #88]	@ 0x58
 800136a:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <HAL_UART_MspInit+0x138>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <HAL_UART_MspInit+0x138>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	4a13      	ldr	r2, [pc, #76]	@ (80013c8 <HAL_UART_MspInit+0x138>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <HAL_UART_MspInit+0x138>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800138e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001392:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013a8:	2307      	movs	r3, #7
 80013aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013b2:	4619      	mov	r1, r3
 80013b4:	4807      	ldr	r0, [pc, #28]	@ (80013d4 <HAL_UART_MspInit+0x144>)
 80013b6:	f000 fbf9 	bl	8001bac <HAL_GPIO_Init>
}
 80013ba:	bf00      	nop
 80013bc:	37b8      	adds	r7, #184	@ 0xb8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	40004800 	.word	0x40004800
 80013d4:	48000c00 	.word	0x48000c00

080013d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0ac      	sub	sp, #176	@ 0xb0
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2288      	movs	r2, #136	@ 0x88
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f007 fe15 	bl	8009028 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001406:	d17c      	bne.n	8001502 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001408:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800140c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800140e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001412:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001416:	2301      	movs	r3, #1
 8001418:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800141a:	2301      	movs	r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800141e:	2318      	movs	r3, #24
 8001420:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001422:	2307      	movs	r3, #7
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001426:	2302      	movs	r3, #2
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800142a:	2302      	movs	r3, #2
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800142e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001432:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4618      	mov	r0, r3
 800143a:	f001 ff69 	bl	8003310 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001444:	f7ff fd86 	bl	8000f54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b30      	ldr	r3, [pc, #192]	@ (800150c <HAL_PCD_MspInit+0x134>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144c:	4a2f      	ldr	r2, [pc, #188]	@ (800150c <HAL_PCD_MspInit+0x134>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001454:	4b2d      	ldr	r3, [pc, #180]	@ (800150c <HAL_PCD_MspInit+0x134>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001460:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001464:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001478:	4619      	mov	r1, r3
 800147a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147e:	f000 fb95 	bl	8001bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001482:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800149c:	230a      	movs	r3, #10
 800149e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ac:	f000 fb7e 	bl	8001bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014b0:	4b16      	ldr	r3, [pc, #88]	@ (800150c <HAL_PCD_MspInit+0x134>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b4:	4a15      	ldr	r2, [pc, #84]	@ (800150c <HAL_PCD_MspInit+0x134>)
 80014b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014bc:	4b13      	ldr	r3, [pc, #76]	@ (800150c <HAL_PCD_MspInit+0x134>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c8:	4b10      	ldr	r3, [pc, #64]	@ (800150c <HAL_PCD_MspInit+0x134>)
 80014ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d114      	bne.n	80014fe <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d4:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <HAL_PCD_MspInit+0x134>)
 80014d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d8:	4a0c      	ldr	r2, [pc, #48]	@ (800150c <HAL_PCD_MspInit+0x134>)
 80014da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014de:	6593      	str	r3, [r2, #88]	@ 0x58
 80014e0:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <HAL_PCD_MspInit+0x134>)
 80014e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80014ec:	f001 f844 	bl	8002578 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_PCD_MspInit+0x134>)
 80014f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f4:	4a05      	ldr	r2, [pc, #20]	@ (800150c <HAL_PCD_MspInit+0x134>)
 80014f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80014fc:	e001      	b.n	8001502 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80014fe:	f001 f83b 	bl	8002578 <HAL_PWREx_EnableVddUSB>
}
 8001502:	bf00      	nop
 8001504:	37b0      	adds	r7, #176	@ 0xb0
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <NMI_Handler+0x4>

08001518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <MemManage_Handler+0x4>

08001528 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <UsageFault_Handler+0x4>

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154a:	f000 f8cd 	bl	80016e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800154e:	f006 fbef 	bl	8007d30 <xTaskGetSchedulerState>
 8001552:	4603      	mov	r3, r0
 8001554:	2b01      	cmp	r3, #1
 8001556:	d001      	beq.n	800155c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001558:	f007 fae6 	bl	8008b28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001564:	2020      	movs	r0, #32
 8001566:	f000 fd15 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800156a:	2040      	movs	r0, #64	@ 0x40
 800156c:	f000 fd12 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001570:	2080      	movs	r0, #128	@ 0x80
 8001572:	f000 fd0f 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001576:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800157a:	f000 fd0b 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}

08001582 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001586:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800158a:	f000 fd03 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800158e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001592:	f000 fcff 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001596:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800159a:	f000 fcfb 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800159e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80015a2:	f000 fcf7 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80015a6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80015aa:	f000 fcf3 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <TIM6_DAC_IRQHandler+0x10>)
 80015ba:	f002 fcdf 	bl	8003f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000160 	.word	0x20000160

080015c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <SystemInit+0x20>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <SystemInit+0x20>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001624 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f0:	f7ff ffea 	bl	80015c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f4:	480c      	ldr	r0, [pc, #48]	@ (8001628 <LoopForever+0x6>)
  ldr r1, =_edata
 80015f6:	490d      	ldr	r1, [pc, #52]	@ (800162c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001630 <LoopForever+0xe>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <LoopForever+0x12>)
  ldr r4, =_ebss
 800160c:	4c0a      	ldr	r4, [pc, #40]	@ (8001638 <LoopForever+0x16>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800161a:	f007 fd0d 	bl	8009038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800161e:	f7fe ff4f 	bl	80004c0 <main>

08001622 <LoopForever>:

LoopForever:
    b LoopForever
 8001622:	e7fe      	b.n	8001622 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001624:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001630:	08009290 	.word	0x08009290
  ldr r2, =_sbss
 8001634:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001638:	200020fc 	.word	0x200020fc

0800163c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC1_2_IRQHandler>

0800163e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f961 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164e:	200f      	movs	r0, #15
 8001650:	f000 f80e 	bl	8001670 <HAL_InitTick>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d002      	beq.n	8001660 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	e001      	b.n	8001664 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001660:	f7ff fc7e 	bl	8000f60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001664:	79fb      	ldrb	r3, [r7, #7]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <HAL_InitTick+0x6c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d023      	beq.n	80016cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001684:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <HAL_InitTick+0x70>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <HAL_InitTick+0x6c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f96d 	bl	800197a <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10f      	bne.n	80016c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d809      	bhi.n	80016c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 f937 	bl	8001926 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016b8:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <HAL_InitTick+0x74>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e007      	b.n	80016d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e004      	b.n	80016d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	e001      	b.n	80016d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	@ (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008
 800170c:	200007cc 	.word	0x200007cc

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	@ (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	200007cc 	.word	0x200007cc

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff ffee 	bl	8001710 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001742:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <HAL_Delay+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174e:	bf00      	nop
 8001750:	f7ff ffde 	bl	8001710 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001798:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800179c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a2:	4a04      	ldr	r2, [pc, #16]	@ (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60d3      	str	r3, [r2, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0b      	blt.n	80017fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4907      	ldr	r1, [pc, #28]	@ (800180c <__NVIC_EnableIRQ+0x38>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	@ (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	@ (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	@ 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	@ 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	@ (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff29 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff3e 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff31 	bl	80017d4 <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa2 	bl	80018cc <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0ac      	b.n	8001b00 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f8b2 	bl	8001b14 <DFSDM_GetChannelFromInstance>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a55      	ldr	r2, [pc, #340]	@ (8001b08 <HAL_DFSDM_ChannelInit+0x174>)
 80019b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e09f      	b.n	8001b00 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff faf5 	bl	8000fb0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80019c6:	4b51      	ldr	r3, [pc, #324]	@ (8001b0c <HAL_DFSDM_ChannelInit+0x178>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3301      	adds	r3, #1
 80019cc:	4a4f      	ldr	r2, [pc, #316]	@ (8001b0c <HAL_DFSDM_ChannelInit+0x178>)
 80019ce:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80019d0:	4b4e      	ldr	r3, [pc, #312]	@ (8001b0c <HAL_DFSDM_ChannelInit+0x178>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d125      	bne.n	8001a24 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80019d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001b10 <HAL_DFSDM_ChannelInit+0x17c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001b10 <HAL_DFSDM_ChannelInit+0x17c>)
 80019de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80019e2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80019e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001b10 <HAL_DFSDM_ChannelInit+0x17c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4948      	ldr	r1, [pc, #288]	@ (8001b10 <HAL_DFSDM_ChannelInit+0x17c>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80019f2:	4b47      	ldr	r3, [pc, #284]	@ (8001b10 <HAL_DFSDM_ChannelInit+0x17c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a46      	ldr	r2, [pc, #280]	@ (8001b10 <HAL_DFSDM_ChannelInit+0x17c>)
 80019f8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80019fc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	791b      	ldrb	r3, [r3, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d108      	bne.n	8001a18 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001a06:	4b42      	ldr	r3, [pc, #264]	@ (8001b10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	493f      	ldr	r1, [pc, #252]	@ (8001b10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001a18:	4b3d      	ldr	r3, [pc, #244]	@ (8001b10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a22:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001a32:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6819      	ldr	r1, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a42:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a48:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 020f 	bic.w	r2, r2, #15
 8001a60:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6819      	ldr	r1, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001a88:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6899      	ldr	r1, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f002 0207 	and.w	r2, r2, #7
 8001ab4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ae0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f810 	bl	8001b14 <DFSDM_GetChannelFromInstance>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4904      	ldr	r1, [pc, #16]	@ (8001b08 <HAL_DFSDM_ChannelInit+0x174>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200007d4 	.word	0x200007d4
 8001b0c:	200007d0 	.word	0x200007d0
 8001b10:	40016000 	.word	0x40016000

08001b14 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b90 <DFSDM_GetChannelFromInstance+0x7c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d102      	bne.n	8001b2a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e02b      	b.n	8001b82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a19      	ldr	r2, [pc, #100]	@ (8001b94 <DFSDM_GetChannelFromInstance+0x80>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d102      	bne.n	8001b38 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e024      	b.n	8001b82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a17      	ldr	r2, [pc, #92]	@ (8001b98 <DFSDM_GetChannelFromInstance+0x84>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d102      	bne.n	8001b46 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e01d      	b.n	8001b82 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a14      	ldr	r2, [pc, #80]	@ (8001b9c <DFSDM_GetChannelFromInstance+0x88>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d102      	bne.n	8001b54 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001b4e:	2304      	movs	r3, #4
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	e016      	b.n	8001b82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a12      	ldr	r2, [pc, #72]	@ (8001ba0 <DFSDM_GetChannelFromInstance+0x8c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d102      	bne.n	8001b62 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001b5c:	2305      	movs	r3, #5
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	e00f      	b.n	8001b82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba4 <DFSDM_GetChannelFromInstance+0x90>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d102      	bne.n	8001b70 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001b6a:	2306      	movs	r3, #6
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e008      	b.n	8001b82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <DFSDM_GetChannelFromInstance+0x94>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d102      	bne.n	8001b7e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e001      	b.n	8001b82 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40016000 	.word	0x40016000
 8001b94:	40016020 	.word	0x40016020
 8001b98:	40016040 	.word	0x40016040
 8001b9c:	40016080 	.word	0x40016080
 8001ba0:	400160a0 	.word	0x400160a0
 8001ba4:	400160c0 	.word	0x400160c0
 8001ba8:	400160e0 	.word	0x400160e0

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	e17f      	b.n	8001ebc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8171 	beq.w	8001eb6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d005      	beq.n	8001bec <HAL_GPIO_Init+0x40>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d130      	bne.n	8001c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c22:	2201      	movs	r2, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	f003 0201 	and.w	r2, r3, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d118      	bne.n	8001c8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c60:	2201      	movs	r2, #1
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	08db      	lsrs	r3, r3, #3
 8001c76:	f003 0201 	and.w	r2, r3, #1
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d017      	beq.n	8001cc8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d123      	bne.n	8001d1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	08da      	lsrs	r2, r3, #3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3208      	adds	r2, #8
 8001cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	08da      	lsrs	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3208      	adds	r2, #8
 8001d16:	6939      	ldr	r1, [r7, #16]
 8001d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0203 	and.w	r2, r3, #3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80ac 	beq.w	8001eb6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001edc <HAL_GPIO_Init+0x330>)
 8001d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d62:	4a5e      	ldr	r2, [pc, #376]	@ (8001edc <HAL_GPIO_Init+0x330>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8001edc <HAL_GPIO_Init+0x330>)
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d76:	4a5a      	ldr	r2, [pc, #360]	@ (8001ee0 <HAL_GPIO_Init+0x334>)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001da0:	d025      	beq.n	8001dee <HAL_GPIO_Init+0x242>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee4 <HAL_GPIO_Init+0x338>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01f      	beq.n	8001dea <HAL_GPIO_Init+0x23e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee8 <HAL_GPIO_Init+0x33c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d019      	beq.n	8001de6 <HAL_GPIO_Init+0x23a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4d      	ldr	r2, [pc, #308]	@ (8001eec <HAL_GPIO_Init+0x340>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0x236>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4c      	ldr	r2, [pc, #304]	@ (8001ef0 <HAL_GPIO_Init+0x344>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00d      	beq.n	8001dde <HAL_GPIO_Init+0x232>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef4 <HAL_GPIO_Init+0x348>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d007      	beq.n	8001dda <HAL_GPIO_Init+0x22e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8001ef8 <HAL_GPIO_Init+0x34c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_GPIO_Init+0x22a>
 8001dd2:	2306      	movs	r3, #6
 8001dd4:	e00c      	b.n	8001df0 <HAL_GPIO_Init+0x244>
 8001dd6:	2307      	movs	r3, #7
 8001dd8:	e00a      	b.n	8001df0 <HAL_GPIO_Init+0x244>
 8001dda:	2305      	movs	r3, #5
 8001ddc:	e008      	b.n	8001df0 <HAL_GPIO_Init+0x244>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x244>
 8001de2:	2303      	movs	r3, #3
 8001de4:	e004      	b.n	8001df0 <HAL_GPIO_Init+0x244>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e002      	b.n	8001df0 <HAL_GPIO_Init+0x244>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_GPIO_Init+0x244>
 8001dee:	2300      	movs	r3, #0
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	f002 0203 	and.w	r2, r2, #3
 8001df6:	0092      	lsls	r2, r2, #2
 8001df8:	4093      	lsls	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e00:	4937      	ldr	r1, [pc, #220]	@ (8001ee0 <HAL_GPIO_Init+0x334>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001efc <HAL_GPIO_Init+0x350>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e32:	4a32      	ldr	r2, [pc, #200]	@ (8001efc <HAL_GPIO_Init+0x350>)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e38:	4b30      	ldr	r3, [pc, #192]	@ (8001efc <HAL_GPIO_Init+0x350>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e5c:	4a27      	ldr	r2, [pc, #156]	@ (8001efc <HAL_GPIO_Init+0x350>)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e62:	4b26      	ldr	r3, [pc, #152]	@ (8001efc <HAL_GPIO_Init+0x350>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e86:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_GPIO_Init+0x350>)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_GPIO_Init+0x350>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eb0:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <HAL_GPIO_Init+0x350>)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f47f ae78 	bne.w	8001bbc <HAL_GPIO_Init+0x10>
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	48000400 	.word	0x48000400
 8001ee8:	48000800 	.word	0x48000800
 8001eec:	48000c00 	.word	0x48000c00
 8001ef0:	48001000 	.word	0x48001000
 8001ef4:	48001400 	.word	0x48001400
 8001ef8:	48001800 	.word	0x48001800
 8001efc:	40010400 	.word	0x40010400

08001f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	887b      	ldrh	r3, [r7, #2]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e001      	b.n	8001f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f4c:	e002      	b.n	8001f54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4013      	ands	r3, r2
 8001f78:	041a      	lsls	r2, r3, #16
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43d9      	mvns	r1, r3
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	400b      	ands	r3, r1
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f9e:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001faa:	4a05      	ldr	r2, [pc, #20]	@ (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe feda 	bl	8000d6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e08d      	b.n	80020f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff f844 	bl	8001078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2224      	movs	r2, #36	@ 0x24
 8001ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002014:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002024:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	e006      	b.n	800204c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800204a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d108      	bne.n	8002066 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	e007      	b.n	8002076 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002074:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002088:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002098:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69d9      	ldr	r1, [r3, #28]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1a      	ldr	r2, [r3, #32]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b20      	cmp	r3, #32
 800210e:	d138      	bne.n	8002182 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800211a:	2302      	movs	r3, #2
 800211c:	e032      	b.n	8002184 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2224      	movs	r2, #36	@ 0x24
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800214c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6819      	ldr	r1, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0201 	orr.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002182:	2302      	movs	r3, #2
  }
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d139      	bne.n	800221a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e033      	b.n	800221c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2224      	movs	r2, #36	@ 0x24
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0201 	orr.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800221a:	2302      	movs	r3, #2
  }
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af02      	add	r7, sp, #8
 800222e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e101      	b.n	800243e <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff f8c2 	bl	80013d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2203      	movs	r2, #3
 8002258:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f002 fe52 	bl	8004f10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7c1a      	ldrb	r2, [r3, #16]
 8002274:	f88d 2000 	strb.w	r2, [sp]
 8002278:	3304      	adds	r3, #4
 800227a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227c:	f002 fe1b 	bl	8004eb6 <USB_CoreInit>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2202      	movs	r2, #2
 800228a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0d5      	b.n	800243e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f002 fe4a 	bl	8004f32 <USB_SetCurrentMode>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0c6      	b.n	800243e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	e04a      	b.n	800234c <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	3315      	adds	r3, #21
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	3314      	adds	r3, #20
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	b298      	uxth	r0, r3
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	332e      	adds	r3, #46	@ 0x2e
 80022f2:	4602      	mov	r2, r0
 80022f4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	3318      	adds	r3, #24
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	331c      	adds	r3, #28
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	3320      	adds	r3, #32
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3324      	adds	r3, #36	@ 0x24
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	3301      	adds	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	791b      	ldrb	r3, [r3, #4]
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	429a      	cmp	r2, r3
 8002354:	d3af      	bcc.n	80022b6 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	e044      	b.n	80023e6 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	3301      	adds	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	791b      	ldrb	r3, [r3, #4]
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d3b5      	bcc.n	800235c <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7c1a      	ldrb	r2, [r3, #16]
 80023f8:	f88d 2000 	strb.w	r2, [sp]
 80023fc:	3304      	adds	r3, #4
 80023fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002400:	f002 fde4 	bl	8004fcc <USB_DevInit>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2202      	movs	r2, #2
 800240e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e013      	b.n	800243e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7b1b      	ldrb	r3, [r3, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d102      	bne.n	8002432 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f80a 	bl	8002446 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f002 ff89 	bl	800534e <USB_DevDisconnect>

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002478:	f043 0303 	orr.w	r3, r3, #3
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002494:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a04      	ldr	r2, [pc, #16]	@ (80024ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800249a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800249e:	6013      	str	r3, [r2, #0]
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40007000 	.word	0x40007000

080024b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024b4:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40007000 	.word	0x40007000

080024cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024da:	d130      	bne.n	800253e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024dc:	4b23      	ldr	r3, [pc, #140]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024e8:	d038      	beq.n	800255c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ea:	4b20      	ldr	r3, [pc, #128]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024f2:	4a1e      	ldr	r2, [pc, #120]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2232      	movs	r2, #50	@ 0x32
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	4a1b      	ldr	r2, [pc, #108]	@ (8002574 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	0c9b      	lsrs	r3, r3, #18
 800250c:	3301      	adds	r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002510:	e002      	b.n	8002518 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3b01      	subs	r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002518:	4b14      	ldr	r3, [pc, #80]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002524:	d102      	bne.n	800252c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f2      	bne.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800252c:	4b0f      	ldr	r3, [pc, #60]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002538:	d110      	bne.n	800255c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e00f      	b.n	800255e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800253e:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800254a:	d007      	beq.n	800255c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800254c:	4b07      	ldr	r3, [pc, #28]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002554:	4a05      	ldr	r2, [pc, #20]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002556:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800255a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40007000 	.word	0x40007000
 8002570:	20000000 	.word	0x20000000
 8002574:	431bde83 	.word	0x431bde83

08002578 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800257c:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <HAL_PWREx_EnableVddUSB+0x1c>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002582:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002586:	6053      	str	r3, [r2, #4]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40007000 	.word	0x40007000

08002598 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff f8b6 	bl	8001710 <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e063      	b.n	8002678 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10b      	bne.n	80025d4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7fe fdb5 	bl	8001134 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80025ca:	f241 3188 	movw	r1, #5000	@ 0x1388
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f858 	bl	8002684 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	021a      	lsls	r2, r3, #8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	2120      	movs	r1, #32
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f850 	bl	80026a0 <QSPI_WaitFlagStateUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002604:	7afb      	ldrb	r3, [r7, #11]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d131      	bne.n	800266e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002614:	f023 0310 	bic.w	r3, r3, #16
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6852      	ldr	r2, [r2, #4]
 800261c:	0611      	lsls	r1, r2, #24
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68d2      	ldr	r2, [r2, #12]
 8002622:	4311      	orrs	r1, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	430b      	orrs	r3, r1
 800262a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <HAL_QSPI_Init+0xe8>)
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6912      	ldr	r2, [r2, #16]
 800263a:	0411      	lsls	r1, r2, #16
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6952      	ldr	r2, [r2, #20]
 8002640:	4311      	orrs	r1, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6992      	ldr	r2, [r2, #24]
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	430b      	orrs	r3, r1
 800264e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8002676:	7afb      	ldrb	r3, [r7, #11]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	ffe0f8fe 	.word	0xffe0f8fe

08002684 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80026b0:	e01a      	b.n	80026e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d016      	beq.n	80026e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ba:	f7ff f829 	bl	8001710 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10b      	bne.n	80026e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2204      	movs	r2, #4
 80026d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026dc:	f043 0201 	orr.w	r2, r3, #1
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e00e      	b.n	8002706 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf14      	ite	ne
 80026f6:	2301      	movne	r3, #1
 80026f8:	2300      	moveq	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	429a      	cmp	r2, r3
 8002702:	d1d6      	bne.n	80026b2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e3ca      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002722:	4b97      	ldr	r3, [pc, #604]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800272c:	4b94      	ldr	r3, [pc, #592]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80e4 	beq.w	800290c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <HAL_RCC_OscConfig+0x4a>
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	2b0c      	cmp	r3, #12
 800274e:	f040 808b 	bne.w	8002868 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b01      	cmp	r3, #1
 8002756:	f040 8087 	bne.w	8002868 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800275a:	4b89      	ldr	r3, [pc, #548]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_RCC_OscConfig+0x62>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e3a2      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1a      	ldr	r2, [r3, #32]
 8002776:	4b82      	ldr	r3, [pc, #520]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <HAL_RCC_OscConfig+0x7c>
 8002782:	4b7f      	ldr	r3, [pc, #508]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800278a:	e005      	b.n	8002798 <HAL_RCC_OscConfig+0x88>
 800278c:	4b7c      	ldr	r3, [pc, #496]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 800278e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002798:	4293      	cmp	r3, r2
 800279a:	d223      	bcs.n	80027e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fd55 	bl	8003250 <RCC_SetFlashLatencyFromMSIRange>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e383      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027b0:	4b73      	ldr	r3, [pc, #460]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a72      	ldr	r2, [pc, #456]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80027b6:	f043 0308 	orr.w	r3, r3, #8
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b70      	ldr	r3, [pc, #448]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	496d      	ldr	r1, [pc, #436]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	4968      	ldr	r1, [pc, #416]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
 80027e2:	e025      	b.n	8002830 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027e4:	4b66      	ldr	r3, [pc, #408]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a65      	ldr	r2, [pc, #404]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80027ea:	f043 0308 	orr.w	r3, r3, #8
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b63      	ldr	r3, [pc, #396]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4960      	ldr	r1, [pc, #384]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002802:	4b5f      	ldr	r3, [pc, #380]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	495b      	ldr	r1, [pc, #364]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fd15 	bl	8003250 <RCC_SetFlashLatencyFromMSIRange>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e343      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002830:	f000 fc4a 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8002834:	4602      	mov	r2, r0
 8002836:	4b52      	ldr	r3, [pc, #328]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	4950      	ldr	r1, [pc, #320]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002842:	5ccb      	ldrb	r3, [r1, r3]
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
 800284c:	4a4e      	ldr	r2, [pc, #312]	@ (8002988 <HAL_RCC_OscConfig+0x278>)
 800284e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002850:	4b4e      	ldr	r3, [pc, #312]	@ (800298c <HAL_RCC_OscConfig+0x27c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe ff0b 	bl	8001670 <HAL_InitTick>
 800285a:	4603      	mov	r3, r0
 800285c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d052      	beq.n	800290a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	e327      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d032      	beq.n	80028d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002870:	4b43      	ldr	r3, [pc, #268]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a42      	ldr	r2, [pc, #264]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800287c:	f7fe ff48 	bl	8001710 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002884:	f7fe ff44 	bl	8001710 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e310      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002896:	4b3a      	ldr	r3, [pc, #232]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a2:	4b37      	ldr	r3, [pc, #220]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a36      	ldr	r2, [pc, #216]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80028a8:	f043 0308 	orr.w	r3, r3, #8
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b34      	ldr	r3, [pc, #208]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4931      	ldr	r1, [pc, #196]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	492c      	ldr	r1, [pc, #176]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
 80028d4:	e01a      	b.n	800290c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a29      	ldr	r2, [pc, #164]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028e2:	f7fe ff15 	bl	8001710 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ea:	f7fe ff11 	bl	8001710 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e2dd      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028fc:	4b20      	ldr	r3, [pc, #128]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x1da>
 8002908:	e000      	b.n	800290c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800290a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d074      	beq.n	8002a02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b08      	cmp	r3, #8
 800291c:	d005      	beq.n	800292a <HAL_RCC_OscConfig+0x21a>
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b0c      	cmp	r3, #12
 8002922:	d10e      	bne.n	8002942 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d10b      	bne.n	8002942 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292a:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d064      	beq.n	8002a00 <HAL_RCC_OscConfig+0x2f0>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d160      	bne.n	8002a00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e2ba      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800294a:	d106      	bne.n	800295a <HAL_RCC_OscConfig+0x24a>
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0b      	ldr	r2, [pc, #44]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 8002952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	e026      	b.n	80029a8 <HAL_RCC_OscConfig+0x298>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002962:	d115      	bne.n	8002990 <HAL_RCC_OscConfig+0x280>
 8002964:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a05      	ldr	r2, [pc, #20]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 800296a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a02      	ldr	r2, [pc, #8]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 8002976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e014      	b.n	80029a8 <HAL_RCC_OscConfig+0x298>
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	08009238 	.word	0x08009238
 8002988:	20000000 	.word	0x20000000
 800298c:	20000004 	.word	0x20000004
 8002990:	4ba0      	ldr	r3, [pc, #640]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a9f      	ldr	r2, [pc, #636]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b9d      	ldr	r3, [pc, #628]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a9c      	ldr	r2, [pc, #624]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 80029a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d013      	beq.n	80029d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe feae 	bl	8001710 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b8:	f7fe feaa 	bl	8001710 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	@ 0x64
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e276      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ca:	4b92      	ldr	r3, [pc, #584]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x2a8>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fe9a 	bl	8001710 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e0:	f7fe fe96 	bl	8001710 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	@ 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e262      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029f2:	4b88      	ldr	r3, [pc, #544]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x2d0>
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d060      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_OscConfig+0x310>
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	d119      	bne.n	8002a4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d116      	bne.n	8002a4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a20:	4b7c      	ldr	r3, [pc, #496]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_OscConfig+0x328>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e23f      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a38:	4b76      	ldr	r3, [pc, #472]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	4973      	ldr	r1, [pc, #460]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a4c:	e040      	b.n	8002ad0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d023      	beq.n	8002a9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a56:	4b6f      	ldr	r3, [pc, #444]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a62:	f7fe fe55 	bl	8001710 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6a:	f7fe fe51 	bl	8001710 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e21d      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a7c:	4b65      	ldr	r3, [pc, #404]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a88:	4b62      	ldr	r3, [pc, #392]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	495f      	ldr	r1, [pc, #380]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
 8002a9c:	e018      	b.n	8002ad0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fe31 	bl	8001710 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7fe fe2d 	bl	8001710 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e1f9      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac4:	4b53      	ldr	r3, [pc, #332]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f0      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d03c      	beq.n	8002b56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01c      	beq.n	8002b1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aea:	4a4a      	ldr	r2, [pc, #296]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe fe0c 	bl	8001710 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afc:	f7fe fe08 	bl	8001710 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e1d4      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b0e:	4b41      	ldr	r3, [pc, #260]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ef      	beq.n	8002afc <HAL_RCC_OscConfig+0x3ec>
 8002b1c:	e01b      	b.n	8002b56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b24:	4a3b      	ldr	r2, [pc, #236]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fdef 	bl	8001710 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b36:	f7fe fdeb 	bl	8001710 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1b7      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b48:	4b32      	ldr	r3, [pc, #200]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ef      	bne.n	8002b36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80a6 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b64:	2300      	movs	r3, #0
 8002b66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b68:	4b2a      	ldr	r3, [pc, #168]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10d      	bne.n	8002b90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b74:	4b27      	ldr	r3, [pc, #156]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b78:	4a26      	ldr	r2, [pc, #152]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b80:	4b24      	ldr	r3, [pc, #144]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b90:	4b21      	ldr	r3, [pc, #132]	@ (8002c18 <HAL_RCC_OscConfig+0x508>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d118      	bne.n	8002bce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <HAL_RCC_OscConfig+0x508>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c18 <HAL_RCC_OscConfig+0x508>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba8:	f7fe fdb2 	bl	8001710 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb0:	f7fe fdae 	bl	8001710 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e17a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc2:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <HAL_RCC_OscConfig+0x508>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d108      	bne.n	8002be8 <HAL_RCC_OscConfig+0x4d8>
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002be6:	e029      	b.n	8002c3c <HAL_RCC_OscConfig+0x52c>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	d115      	bne.n	8002c1c <HAL_RCC_OscConfig+0x50c>
 8002bf0:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf6:	4a07      	ldr	r2, [pc, #28]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c00:	4b04      	ldr	r3, [pc, #16]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c06:	4a03      	ldr	r2, [pc, #12]	@ (8002c14 <HAL_RCC_OscConfig+0x504>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c10:	e014      	b.n	8002c3c <HAL_RCC_OscConfig+0x52c>
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	4b9c      	ldr	r3, [pc, #624]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c22:	4a9b      	ldr	r2, [pc, #620]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c2c:	4b98      	ldr	r3, [pc, #608]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	4a97      	ldr	r2, [pc, #604]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002c34:	f023 0304 	bic.w	r3, r3, #4
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d016      	beq.n	8002c72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c44:	f7fe fd64 	bl	8001710 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4a:	e00a      	b.n	8002c62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fd60 	bl	8001710 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e12a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c62:	4b8b      	ldr	r3, [pc, #556]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ed      	beq.n	8002c4c <HAL_RCC_OscConfig+0x53c>
 8002c70:	e015      	b.n	8002c9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7fe fd4d 	bl	8001710 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7fe fd49 	bl	8001710 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e113      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c90:	4b7f      	ldr	r3, [pc, #508]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1ed      	bne.n	8002c7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d105      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca4:	4b7a      	ldr	r3, [pc, #488]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca8:	4a79      	ldr	r2, [pc, #484]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002caa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80fe 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	f040 80d0 	bne.w	8002e64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cc4:	4b72      	ldr	r3, [pc, #456]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 0203 	and.w	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d130      	bne.n	8002d3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d127      	bne.n	8002d3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d11f      	bne.n	8002d3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d04:	2a07      	cmp	r2, #7
 8002d06:	bf14      	ite	ne
 8002d08:	2201      	movne	r2, #1
 8002d0a:	2200      	moveq	r2, #0
 8002d0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d113      	bne.n	8002d3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	3b01      	subs	r3, #1
 8002d34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d06e      	beq.n	8002e18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d069      	beq.n	8002e14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d40:	4b53      	ldr	r3, [pc, #332]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d105      	bne.n	8002d58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d4c:	4b50      	ldr	r3, [pc, #320]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0ad      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a4b      	ldr	r2, [pc, #300]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002d62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d68:	f7fe fcd2 	bl	8001710 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe fcce 	bl	8001710 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e09a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d82:	4b43      	ldr	r3, [pc, #268]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d8e:	4b40      	ldr	r3, [pc, #256]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	4b40      	ldr	r3, [pc, #256]	@ (8002e94 <HAL_RCC_OscConfig+0x784>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d9e:	3a01      	subs	r2, #1
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	4311      	orrs	r1, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002da8:	0212      	lsls	r2, r2, #8
 8002daa:	4311      	orrs	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002db0:	0852      	lsrs	r2, r2, #1
 8002db2:	3a01      	subs	r2, #1
 8002db4:	0552      	lsls	r2, r2, #21
 8002db6:	4311      	orrs	r1, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002dbc:	0852      	lsrs	r2, r2, #1
 8002dbe:	3a01      	subs	r2, #1
 8002dc0:	0652      	lsls	r2, r2, #25
 8002dc2:	4311      	orrs	r1, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002dc8:	0912      	lsrs	r2, r2, #4
 8002dca:	0452      	lsls	r2, r2, #17
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	4930      	ldr	r1, [pc, #192]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002de0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dec:	f7fe fc90 	bl	8001710 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe fc8c 	bl	8001710 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e058      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e06:	4b22      	ldr	r3, [pc, #136]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e12:	e050      	b.n	8002eb6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e04f      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e18:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d148      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e24:	4b1a      	ldr	r3, [pc, #104]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a19      	ldr	r2, [pc, #100]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e30:	4b17      	ldr	r3, [pc, #92]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4a16      	ldr	r2, [pc, #88]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e3c:	f7fe fc68 	bl	8001710 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fc64 	bl	8001710 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e030      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e56:	4b0e      	ldr	r3, [pc, #56]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x734>
 8002e62:	e028      	b.n	8002eb6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	d023      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6a:	4b09      	ldr	r3, [pc, #36]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a08      	ldr	r2, [pc, #32]	@ (8002e90 <HAL_RCC_OscConfig+0x780>)
 8002e70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fe fc4b 	bl	8001710 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7c:	e00c      	b.n	8002e98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fe fc47 	bl	8001710 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d905      	bls.n	8002e98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e013      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
 8002e90:	40021000 	.word	0x40021000
 8002e94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e98:	4b09      	ldr	r3, [pc, #36]	@ (8002ec0 <HAL_RCC_OscConfig+0x7b0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1ec      	bne.n	8002e7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ea4:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <HAL_RCC_OscConfig+0x7b0>)
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	4905      	ldr	r1, [pc, #20]	@ (8002ec0 <HAL_RCC_OscConfig+0x7b0>)
 8002eaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <HAL_RCC_OscConfig+0x7b4>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	60cb      	str	r3, [r1, #12]
 8002eb0:	e001      	b.n	8002eb6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	feeefffc 	.word	0xfeeefffc

08002ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0e7      	b.n	80030ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b75      	ldr	r3, [pc, #468]	@ (80030b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d910      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b72      	ldr	r3, [pc, #456]	@ (80030b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 0207 	bic.w	r2, r3, #7
 8002ef2:	4970      	ldr	r1, [pc, #448]	@ (80030b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b6e      	ldr	r3, [pc, #440]	@ (80030b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0cf      	b.n	80030ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	4b66      	ldr	r3, [pc, #408]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d908      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f28:	4b63      	ldr	r3, [pc, #396]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4960      	ldr	r1, [pc, #384]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d04c      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4e:	4b5a      	ldr	r3, [pc, #360]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d121      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0a6      	b.n	80030ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d107      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f66:	4b54      	ldr	r3, [pc, #336]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d115      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e09a      	b.n	80030ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e08e      	b.n	80030ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e086      	b.n	80030ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f9e:	4b46      	ldr	r3, [pc, #280]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f023 0203 	bic.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4943      	ldr	r1, [pc, #268]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb0:	f7fe fbae 	bl	8001710 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb8:	f7fe fbaa 	bl	8001710 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e06e      	b.n	80030ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	4b3a      	ldr	r3, [pc, #232]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 020c 	and.w	r2, r3, #12
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d1eb      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	4b31      	ldr	r3, [pc, #196]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d208      	bcs.n	800300e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	492b      	ldr	r1, [pc, #172]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800300e:	4b29      	ldr	r3, [pc, #164]	@ (80030b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d210      	bcs.n	800303e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301c:	4b25      	ldr	r3, [pc, #148]	@ (80030b4 <HAL_RCC_ClockConfig+0x1ec>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 0207 	bic.w	r2, r3, #7
 8003024:	4923      	ldr	r1, [pc, #140]	@ (80030b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302c:	4b21      	ldr	r3, [pc, #132]	@ (80030b4 <HAL_RCC_ClockConfig+0x1ec>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d001      	beq.n	800303e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e036      	b.n	80030ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800304a:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	4918      	ldr	r1, [pc, #96]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003058:	4313      	orrs	r3, r2
 800305a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003068:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4910      	ldr	r1, [pc, #64]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003078:	4313      	orrs	r3, r2
 800307a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800307c:	f000 f824 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b0d      	ldr	r3, [pc, #52]	@ (80030b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	490b      	ldr	r1, [pc, #44]	@ (80030bc <HAL_RCC_ClockConfig+0x1f4>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
 8003098:	4a09      	ldr	r2, [pc, #36]	@ (80030c0 <HAL_RCC_ClockConfig+0x1f8>)
 800309a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800309c:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_RCC_ClockConfig+0x1fc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe fae5 	bl	8001670 <HAL_InitTick>
 80030a6:	4603      	mov	r3, r0
 80030a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80030aa:	7afb      	ldrb	r3, [r7, #11]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40022000 	.word	0x40022000
 80030b8:	40021000 	.word	0x40021000
 80030bc:	08009238 	.word	0x08009238
 80030c0:	20000000 	.word	0x20000000
 80030c4:	20000004 	.word	0x20000004

080030c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	@ 0x24
 80030cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d6:	4b3e      	ldr	r3, [pc, #248]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030e0:	4b3b      	ldr	r3, [pc, #236]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x34>
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d121      	bne.n	800313a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d11e      	bne.n	800313a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030fc:	4b34      	ldr	r3, [pc, #208]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d107      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003108:	4b31      	ldr	r3, [pc, #196]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	e005      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003118:	4b2d      	ldr	r3, [pc, #180]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003124:	4a2b      	ldr	r2, [pc, #172]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10d      	bne.n	8003150 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003138:	e00a      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b04      	cmp	r3, #4
 800313e:	d102      	bne.n	8003146 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003140:	4b25      	ldr	r3, [pc, #148]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003142:	61bb      	str	r3, [r7, #24]
 8003144:	e004      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b08      	cmp	r3, #8
 800314a:	d101      	bne.n	8003150 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800314c:	4b23      	ldr	r3, [pc, #140]	@ (80031dc <HAL_RCC_GetSysClockFreq+0x114>)
 800314e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2b0c      	cmp	r3, #12
 8003154:	d134      	bne.n	80031c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003156:	4b1e      	ldr	r3, [pc, #120]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d003      	beq.n	800316e <HAL_RCC_GetSysClockFreq+0xa6>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d003      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0xac>
 800316c:	e005      	b.n	800317a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800316e:	4b1a      	ldr	r3, [pc, #104]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003170:	617b      	str	r3, [r7, #20]
      break;
 8003172:	e005      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003174:	4b19      	ldr	r3, [pc, #100]	@ (80031dc <HAL_RCC_GetSysClockFreq+0x114>)
 8003176:	617b      	str	r3, [r7, #20]
      break;
 8003178:	e002      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	617b      	str	r3, [r7, #20]
      break;
 800317e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003180:	4b13      	ldr	r3, [pc, #76]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	3301      	adds	r3, #1
 800318c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800318e:	4b10      	ldr	r3, [pc, #64]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	fb03 f202 	mul.w	r2, r3, r2
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031a6:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	0e5b      	lsrs	r3, r3, #25
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	3301      	adds	r3, #1
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031c0:	69bb      	ldr	r3, [r7, #24]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	@ 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000
 80031d4:	08009250 	.word	0x08009250
 80031d8:	00f42400 	.word	0x00f42400
 80031dc:	007a1200 	.word	0x007a1200

080031e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e4:	4b03      	ldr	r3, [pc, #12]	@ (80031f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000000 	.word	0x20000000

080031f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031fc:	f7ff fff0 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b06      	ldr	r3, [pc, #24]	@ (800321c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4904      	ldr	r1, [pc, #16]	@ (8003220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	08009248 	.word	0x08009248

08003224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003228:	f7ff ffda 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	0adb      	lsrs	r3, r3, #11
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4904      	ldr	r1, [pc, #16]	@ (800324c <HAL_RCC_GetPCLK2Freq+0x28>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	08009248 	.word	0x08009248

08003250 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800325c:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003268:	f7ff f922 	bl	80024b0 <HAL_PWREx_GetVoltageRange>
 800326c:	6178      	str	r0, [r7, #20]
 800326e:	e014      	b.n	800329a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	4b25      	ldr	r3, [pc, #148]	@ (8003308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	4a24      	ldr	r2, [pc, #144]	@ (8003308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327a:	6593      	str	r3, [r2, #88]	@ 0x58
 800327c:	4b22      	ldr	r3, [pc, #136]	@ (8003308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003288:	f7ff f912 	bl	80024b0 <HAL_PWREx_GetVoltageRange>
 800328c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800328e:	4b1e      	ldr	r3, [pc, #120]	@ (8003308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003292:	4a1d      	ldr	r2, [pc, #116]	@ (8003308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003294:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003298:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032a0:	d10b      	bne.n	80032ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b80      	cmp	r3, #128	@ 0x80
 80032a6:	d919      	bls.n	80032dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80032ac:	d902      	bls.n	80032b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032ae:	2302      	movs	r3, #2
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	e013      	b.n	80032dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032b4:	2301      	movs	r3, #1
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	e010      	b.n	80032dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b80      	cmp	r3, #128	@ 0x80
 80032be:	d902      	bls.n	80032c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032c0:	2303      	movs	r3, #3
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	e00a      	b.n	80032dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b80      	cmp	r3, #128	@ 0x80
 80032ca:	d102      	bne.n	80032d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032cc:	2302      	movs	r3, #2
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	e004      	b.n	80032dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b70      	cmp	r3, #112	@ 0x70
 80032d6:	d101      	bne.n	80032dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032d8:	2301      	movs	r3, #1
 80032da:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 0207 	bic.w	r2, r3, #7
 80032e4:	4909      	ldr	r1, [pc, #36]	@ (800330c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032ec:	4b07      	ldr	r3, [pc, #28]	@ (800330c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d001      	beq.n	80032fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000
 800330c:	40022000 	.word	0x40022000

08003310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003318:	2300      	movs	r3, #0
 800331a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800331c:	2300      	movs	r3, #0
 800331e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003328:	2b00      	cmp	r3, #0
 800332a:	d041      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003330:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003334:	d02a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003336:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800333a:	d824      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800333c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003340:	d008      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003342:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003346:	d81e      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800334c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003350:	d010      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003352:	e018      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003354:	4b86      	ldr	r3, [pc, #536]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4a85      	ldr	r2, [pc, #532]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800335e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003360:	e015      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f000 facb 	bl	8003904 <RCCEx_PLLSAI1_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003372:	e00c      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3320      	adds	r3, #32
 8003378:	2100      	movs	r1, #0
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fbb6 	bl	8003aec <RCCEx_PLLSAI2_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003384:	e003      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	74fb      	strb	r3, [r7, #19]
      break;
 800338a:	e000      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800338c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800338e:	7cfb      	ldrb	r3, [r7, #19]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10b      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003394:	4b76      	ldr	r3, [pc, #472]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a2:	4973      	ldr	r1, [pc, #460]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033aa:	e001      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d041      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033c4:	d02a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033ca:	d824      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033d0:	d008      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033d6:	d81e      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033e0:	d010      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033e2:	e018      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033e4:	4b62      	ldr	r3, [pc, #392]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4a61      	ldr	r2, [pc, #388]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033f0:	e015      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3304      	adds	r3, #4
 80033f6:	2100      	movs	r1, #0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fa83 	bl	8003904 <RCCEx_PLLSAI1_Config>
 80033fe:	4603      	mov	r3, r0
 8003400:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003402:	e00c      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3320      	adds	r3, #32
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fb6e 	bl	8003aec <RCCEx_PLLSAI2_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003414:	e003      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	74fb      	strb	r3, [r7, #19]
      break;
 800341a:	e000      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800341c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10b      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003424:	4b52      	ldr	r3, [pc, #328]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003432:	494f      	ldr	r1, [pc, #316]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800343a:	e001      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80a0 	beq.w	800358e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344e:	2300      	movs	r3, #0
 8003450:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003452:	4b47      	ldr	r3, [pc, #284]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003462:	2300      	movs	r3, #0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00d      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003468:	4b41      	ldr	r3, [pc, #260]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346c:	4a40      	ldr	r2, [pc, #256]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003472:	6593      	str	r3, [r2, #88]	@ 0x58
 8003474:	4b3e      	ldr	r3, [pc, #248]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003480:	2301      	movs	r3, #1
 8003482:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003484:	4b3b      	ldr	r3, [pc, #236]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a3a      	ldr	r2, [pc, #232]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800348a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800348e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003490:	f7fe f93e 	bl	8001710 <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003496:	e009      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003498:	f7fe f93a 	bl	8001710 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d902      	bls.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	74fb      	strb	r3, [r7, #19]
        break;
 80034aa:	e005      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034ac:	4b31      	ldr	r3, [pc, #196]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ef      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d15c      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034be:	4b2c      	ldr	r3, [pc, #176]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01f      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d019      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034dc:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034e8:	4b21      	ldr	r3, [pc, #132]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ee:	4a20      	ldr	r2, [pc, #128]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003508:	4a19      	ldr	r2, [pc, #100]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351a:	f7fe f8f9 	bl	8001710 <HAL_GetTick>
 800351e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003520:	e00b      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003522:	f7fe f8f5 	bl	8001710 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003530:	4293      	cmp	r3, r2
 8003532:	d902      	bls.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	74fb      	strb	r3, [r7, #19]
            break;
 8003538:	e006      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ec      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800354e:	4b08      	ldr	r3, [pc, #32]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003554:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800355e:	4904      	ldr	r1, [pc, #16]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003566:	e009      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	74bb      	strb	r3, [r7, #18]
 800356c:	e006      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003578:	7cfb      	ldrb	r3, [r7, #19]
 800357a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800357c:	7c7b      	ldrb	r3, [r7, #17]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d105      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003582:	4b9e      	ldr	r3, [pc, #632]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	4a9d      	ldr	r2, [pc, #628]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800358c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800359a:	4b98      	ldr	r3, [pc, #608]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a0:	f023 0203 	bic.w	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	4994      	ldr	r1, [pc, #592]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035bc:	4b8f      	ldr	r3, [pc, #572]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c2:	f023 020c 	bic.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ca:	498c      	ldr	r1, [pc, #560]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035de:	4b87      	ldr	r3, [pc, #540]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ec:	4983      	ldr	r1, [pc, #524]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003600:	4b7e      	ldr	r3, [pc, #504]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003606:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360e:	497b      	ldr	r1, [pc, #492]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003622:	4b76      	ldr	r3, [pc, #472]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003628:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003630:	4972      	ldr	r1, [pc, #456]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003644:	4b6d      	ldr	r3, [pc, #436]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003652:	496a      	ldr	r1, [pc, #424]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003666:	4b65      	ldr	r3, [pc, #404]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003674:	4961      	ldr	r1, [pc, #388]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003688:	4b5c      	ldr	r3, [pc, #368]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003696:	4959      	ldr	r1, [pc, #356]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036aa:	4b54      	ldr	r3, [pc, #336]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b8:	4950      	ldr	r1, [pc, #320]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036cc:	4b4b      	ldr	r3, [pc, #300]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036da:	4948      	ldr	r1, [pc, #288]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ee:	4b43      	ldr	r3, [pc, #268]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fc:	493f      	ldr	r1, [pc, #252]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d028      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003710:	4b3a      	ldr	r3, [pc, #232]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003716:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800371e:	4937      	ldr	r1, [pc, #220]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800372a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800372e:	d106      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003730:	4b32      	ldr	r3, [pc, #200]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4a31      	ldr	r2, [pc, #196]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800373a:	60d3      	str	r3, [r2, #12]
 800373c:	e011      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003742:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003746:	d10c      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	2101      	movs	r1, #1
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f8d8 	bl	8003904 <RCCEx_PLLSAI1_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d028      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800376e:	4b23      	ldr	r3, [pc, #140]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003774:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377c:	491f      	ldr	r1, [pc, #124]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800378c:	d106      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378e:	4b1b      	ldr	r3, [pc, #108]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	4a1a      	ldr	r2, [pc, #104]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003798:	60d3      	str	r3, [r2, #12]
 800379a:	e011      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3304      	adds	r3, #4
 80037aa:	2101      	movs	r1, #1
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 f8a9 	bl	8003904 <RCCEx_PLLSAI1_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b6:	7cfb      	ldrb	r3, [r7, #19]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d02b      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037cc:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037da:	4908      	ldr	r1, [pc, #32]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037ea:	d109      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a02      	ldr	r2, [pc, #8]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037f6:	60d3      	str	r3, [r2, #12]
 80037f8:	e014      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003804:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003808:	d10c      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f000 f877 	bl	8003904 <RCCEx_PLLSAI1_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d02f      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003830:	4b2b      	ldr	r3, [pc, #172]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003836:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800383e:	4928      	ldr	r1, [pc, #160]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800384a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800384e:	d10d      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3304      	adds	r3, #4
 8003854:	2102      	movs	r1, #2
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f854 	bl	8003904 <RCCEx_PLLSAI1_Config>
 800385c:	4603      	mov	r3, r0
 800385e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d014      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	74bb      	strb	r3, [r7, #18]
 800386a:	e011      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003874:	d10c      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3320      	adds	r3, #32
 800387a:	2102      	movs	r1, #2
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f935 	bl	8003aec <RCCEx_PLLSAI2_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003886:	7cfb      	ldrb	r3, [r7, #19]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800389c:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038aa:	490d      	ldr	r1, [pc, #52]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038be:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ce:	4904      	ldr	r1, [pc, #16]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000

080038e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038e8:	4b05      	ldr	r3, [pc, #20]	@ (8003900 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a04      	ldr	r2, [pc, #16]	@ (8003900 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	6013      	str	r3, [r2, #0]
}
 80038f4:	bf00      	nop
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40021000 	.word	0x40021000

08003904 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003912:	4b75      	ldr	r3, [pc, #468]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d018      	beq.n	8003950 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800391e:	4b72      	ldr	r3, [pc, #456]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0203 	and.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d10d      	bne.n	800394a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
       ||
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003936:	4b6c      	ldr	r3, [pc, #432]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
       ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d047      	beq.n	80039da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
 800394e:	e044      	b.n	80039da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b03      	cmp	r3, #3
 8003956:	d018      	beq.n	800398a <RCCEx_PLLSAI1_Config+0x86>
 8003958:	2b03      	cmp	r3, #3
 800395a:	d825      	bhi.n	80039a8 <RCCEx_PLLSAI1_Config+0xa4>
 800395c:	2b01      	cmp	r3, #1
 800395e:	d002      	beq.n	8003966 <RCCEx_PLLSAI1_Config+0x62>
 8003960:	2b02      	cmp	r3, #2
 8003962:	d009      	beq.n	8003978 <RCCEx_PLLSAI1_Config+0x74>
 8003964:	e020      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003966:	4b60      	ldr	r3, [pc, #384]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d11d      	bne.n	80039ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003976:	e01a      	b.n	80039ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003978:	4b5b      	ldr	r3, [pc, #364]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003980:	2b00      	cmp	r3, #0
 8003982:	d116      	bne.n	80039b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003988:	e013      	b.n	80039b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800398a:	4b57      	ldr	r3, [pc, #348]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10f      	bne.n	80039b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003996:	4b54      	ldr	r3, [pc, #336]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039a6:	e006      	b.n	80039b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      break;
 80039ac:	e004      	b.n	80039b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ae:	bf00      	nop
 80039b0:	e002      	b.n	80039b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039b2:	bf00      	nop
 80039b4:	e000      	b.n	80039b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039be:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6819      	ldr	r1, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	430b      	orrs	r3, r1
 80039d4:	4944      	ldr	r1, [pc, #272]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d17d      	bne.n	8003adc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039e0:	4b41      	ldr	r3, [pc, #260]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a40      	ldr	r2, [pc, #256]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ec:	f7fd fe90 	bl	8001710 <HAL_GetTick>
 80039f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039f2:	e009      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039f4:	f7fd fe8c 	bl	8001710 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d902      	bls.n	8003a08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	73fb      	strb	r3, [r7, #15]
        break;
 8003a06:	e005      	b.n	8003a14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a08:	4b37      	ldr	r3, [pc, #220]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1ef      	bne.n	80039f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d160      	bne.n	8003adc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d111      	bne.n	8003a44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a20:	4b31      	ldr	r3, [pc, #196]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6892      	ldr	r2, [r2, #8]
 8003a30:	0211      	lsls	r1, r2, #8
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68d2      	ldr	r2, [r2, #12]
 8003a36:	0912      	lsrs	r2, r2, #4
 8003a38:	0452      	lsls	r2, r2, #17
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	492a      	ldr	r1, [pc, #168]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	610b      	str	r3, [r1, #16]
 8003a42:	e027      	b.n	8003a94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d112      	bne.n	8003a70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6892      	ldr	r2, [r2, #8]
 8003a5a:	0211      	lsls	r1, r2, #8
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6912      	ldr	r2, [r2, #16]
 8003a60:	0852      	lsrs	r2, r2, #1
 8003a62:	3a01      	subs	r2, #1
 8003a64:	0552      	lsls	r2, r2, #21
 8003a66:	430a      	orrs	r2, r1
 8003a68:	491f      	ldr	r1, [pc, #124]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	610b      	str	r3, [r1, #16]
 8003a6e:	e011      	b.n	8003a94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a70:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6892      	ldr	r2, [r2, #8]
 8003a80:	0211      	lsls	r1, r2, #8
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6952      	ldr	r2, [r2, #20]
 8003a86:	0852      	lsrs	r2, r2, #1
 8003a88:	3a01      	subs	r2, #1
 8003a8a:	0652      	lsls	r2, r2, #25
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	4916      	ldr	r1, [pc, #88]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a94:	4b14      	ldr	r3, [pc, #80]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a13      	ldr	r2, [pc, #76]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa0:	f7fd fe36 	bl	8001710 <HAL_GetTick>
 8003aa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aa6:	e009      	b.n	8003abc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aa8:	f7fd fe32 	bl	8001710 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d902      	bls.n	8003abc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	73fb      	strb	r3, [r7, #15]
          break;
 8003aba:	e005      	b.n	8003ac8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003abc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ef      	beq.n	8003aa8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ace:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	4904      	ldr	r1, [pc, #16]	@ (8003ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000

08003aec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003afa:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d018      	beq.n	8003b38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b06:	4b67      	ldr	r3, [pc, #412]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0203 	and.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d10d      	bne.n	8003b32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
       ||
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b1e:	4b61      	ldr	r3, [pc, #388]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d047      	beq.n	8003bc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
 8003b36:	e044      	b.n	8003bc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d018      	beq.n	8003b72 <RCCEx_PLLSAI2_Config+0x86>
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d825      	bhi.n	8003b90 <RCCEx_PLLSAI2_Config+0xa4>
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d002      	beq.n	8003b4e <RCCEx_PLLSAI2_Config+0x62>
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d009      	beq.n	8003b60 <RCCEx_PLLSAI2_Config+0x74>
 8003b4c:	e020      	b.n	8003b90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b4e:	4b55      	ldr	r3, [pc, #340]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d11d      	bne.n	8003b96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b5e:	e01a      	b.n	8003b96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b60:	4b50      	ldr	r3, [pc, #320]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d116      	bne.n	8003b9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b70:	e013      	b.n	8003b9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b72:	4b4c      	ldr	r3, [pc, #304]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b7e:	4b49      	ldr	r3, [pc, #292]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b8e:	e006      	b.n	8003b9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      break;
 8003b94:	e004      	b.n	8003ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b96:	bf00      	nop
 8003b98:	e002      	b.n	8003ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10d      	bne.n	8003bc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6819      	ldr	r1, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	4939      	ldr	r1, [pc, #228]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d167      	bne.n	8003c98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bc8:	4b36      	ldr	r3, [pc, #216]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a35      	ldr	r2, [pc, #212]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd4:	f7fd fd9c 	bl	8001710 <HAL_GetTick>
 8003bd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bda:	e009      	b.n	8003bf0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bdc:	f7fd fd98 	bl	8001710 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d902      	bls.n	8003bf0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	73fb      	strb	r3, [r7, #15]
        break;
 8003bee:	e005      	b.n	8003bfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ef      	bne.n	8003bdc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d14a      	bne.n	8003c98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d111      	bne.n	8003c2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c08:	4b26      	ldr	r3, [pc, #152]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6892      	ldr	r2, [r2, #8]
 8003c18:	0211      	lsls	r1, r2, #8
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	68d2      	ldr	r2, [r2, #12]
 8003c1e:	0912      	lsrs	r2, r2, #4
 8003c20:	0452      	lsls	r2, r2, #17
 8003c22:	430a      	orrs	r2, r1
 8003c24:	491f      	ldr	r1, [pc, #124]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	614b      	str	r3, [r1, #20]
 8003c2a:	e011      	b.n	8003c50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6892      	ldr	r2, [r2, #8]
 8003c3c:	0211      	lsls	r1, r2, #8
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6912      	ldr	r2, [r2, #16]
 8003c42:	0852      	lsrs	r2, r2, #1
 8003c44:	3a01      	subs	r2, #1
 8003c46:	0652      	lsls	r2, r2, #25
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	4916      	ldr	r1, [pc, #88]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c50:	4b14      	ldr	r3, [pc, #80]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a13      	ldr	r2, [pc, #76]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fd fd58 	bl	8001710 <HAL_GetTick>
 8003c60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c62:	e009      	b.n	8003c78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c64:	f7fd fd54 	bl	8001710 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d902      	bls.n	8003c78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	73fb      	strb	r3, [r7, #15]
          break;
 8003c76:	e005      	b.n	8003c84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c78:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0ef      	beq.n	8003c64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	4904      	ldr	r1, [pc, #16]	@ (8003ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000

08003ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e095      	b.n	8003de6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d108      	bne.n	8003cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cca:	d009      	beq.n	8003ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	61da      	str	r2, [r3, #28]
 8003cd2:	e005      	b.n	8003ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd fa5e 	bl	80011bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d20:	d902      	bls.n	8003d28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	e002      	b.n	8003d2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003d36:	d007      	beq.n	8003d48 <HAL_SPI_Init+0xa0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d40:	d002      	beq.n	8003d48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8a:	ea42 0103 	orr.w	r1, r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d92:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	0c1b      	lsrs	r3, r3, #16
 8003da4:	f003 0204 	and.w	r2, r3, #4
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003dc4:	ea42 0103 	orr.w	r1, r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e049      	b.n	8003e94 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fd fa15 	bl	8001244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f000 f9d5 	bl	80041dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e04f      	b.n	8003f54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a23      	ldr	r2, [pc, #140]	@ (8003f60 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01d      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x76>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ede:	d018      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x76>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f64 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d013      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x76>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1e      	ldr	r2, [pc, #120]	@ (8003f68 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00e      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x76>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d009      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x76>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1b      	ldr	r2, [pc, #108]	@ (8003f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d004      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x76>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a19      	ldr	r2, [pc, #100]	@ (8003f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d115      	bne.n	8003f3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	4b17      	ldr	r3, [pc, #92]	@ (8003f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b06      	cmp	r3, #6
 8003f22:	d015      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0xb4>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f2a:	d011      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3c:	e008      	b.n	8003f50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e000      	b.n	8003f52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	40013400 	.word	0x40013400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	00010007 	.word	0x00010007

08003f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d020      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01b      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0202 	mvn.w	r2, #2
 8003fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8e9 	bl	800419e <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8db 	bl	800418a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f8ec 	bl	80041b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d020      	beq.n	800402c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01b      	beq.n	800402c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0204 	mvn.w	r2, #4
 8003ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8c3 	bl	800419e <HAL_TIM_IC_CaptureCallback>
 8004018:	e005      	b.n	8004026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f8b5 	bl	800418a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f8c6 	bl	80041b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d020      	beq.n	8004078 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01b      	beq.n	8004078 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0208 	mvn.w	r2, #8
 8004048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2204      	movs	r2, #4
 800404e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f89d 	bl	800419e <HAL_TIM_IC_CaptureCallback>
 8004064:	e005      	b.n	8004072 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f88f 	bl	800418a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f8a0 	bl	80041b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	d020      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01b      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0210 	mvn.w	r2, #16
 8004094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2208      	movs	r2, #8
 800409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f877 	bl	800419e <HAL_TIM_IC_CaptureCallback>
 80040b0:	e005      	b.n	80040be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f869 	bl	800418a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f87a 	bl	80041b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00c      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0201 	mvn.w	r2, #1
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc fe58 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00c      	beq.n	8004116 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800410e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f99b 	bl	800444c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00c      	beq.n	800413a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f993 	bl	8004460 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00c      	beq.n	800415e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f834 	bl	80041c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00c      	beq.n	8004182 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d007      	beq.n	8004182 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f06f 0220 	mvn.w	r2, #32
 800417a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f95b 	bl	8004438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a46      	ldr	r2, [pc, #280]	@ (8004308 <TIM_Base_SetConfig+0x12c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041fa:	d00f      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a43      	ldr	r2, [pc, #268]	@ (800430c <TIM_Base_SetConfig+0x130>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00b      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a42      	ldr	r2, [pc, #264]	@ (8004310 <TIM_Base_SetConfig+0x134>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d007      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a41      	ldr	r2, [pc, #260]	@ (8004314 <TIM_Base_SetConfig+0x138>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a40      	ldr	r2, [pc, #256]	@ (8004318 <TIM_Base_SetConfig+0x13c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d108      	bne.n	800422e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a35      	ldr	r2, [pc, #212]	@ (8004308 <TIM_Base_SetConfig+0x12c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01f      	beq.n	8004276 <TIM_Base_SetConfig+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423c:	d01b      	beq.n	8004276 <TIM_Base_SetConfig+0x9a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a32      	ldr	r2, [pc, #200]	@ (800430c <TIM_Base_SetConfig+0x130>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d017      	beq.n	8004276 <TIM_Base_SetConfig+0x9a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a31      	ldr	r2, [pc, #196]	@ (8004310 <TIM_Base_SetConfig+0x134>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <TIM_Base_SetConfig+0x9a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a30      	ldr	r2, [pc, #192]	@ (8004314 <TIM_Base_SetConfig+0x138>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00f      	beq.n	8004276 <TIM_Base_SetConfig+0x9a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2f      	ldr	r2, [pc, #188]	@ (8004318 <TIM_Base_SetConfig+0x13c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00b      	beq.n	8004276 <TIM_Base_SetConfig+0x9a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2e      	ldr	r2, [pc, #184]	@ (800431c <TIM_Base_SetConfig+0x140>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d007      	beq.n	8004276 <TIM_Base_SetConfig+0x9a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2d      	ldr	r2, [pc, #180]	@ (8004320 <TIM_Base_SetConfig+0x144>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_Base_SetConfig+0x9a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2c      	ldr	r2, [pc, #176]	@ (8004324 <TIM_Base_SetConfig+0x148>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d108      	bne.n	8004288 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800427c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a16      	ldr	r2, [pc, #88]	@ (8004308 <TIM_Base_SetConfig+0x12c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00f      	beq.n	80042d4 <TIM_Base_SetConfig+0xf8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a18      	ldr	r2, [pc, #96]	@ (8004318 <TIM_Base_SetConfig+0x13c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00b      	beq.n	80042d4 <TIM_Base_SetConfig+0xf8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a17      	ldr	r2, [pc, #92]	@ (800431c <TIM_Base_SetConfig+0x140>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d007      	beq.n	80042d4 <TIM_Base_SetConfig+0xf8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a16      	ldr	r2, [pc, #88]	@ (8004320 <TIM_Base_SetConfig+0x144>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_Base_SetConfig+0xf8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a15      	ldr	r2, [pc, #84]	@ (8004324 <TIM_Base_SetConfig+0x148>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d103      	bne.n	80042dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d105      	bne.n	80042fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f023 0201 	bic.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	611a      	str	r2, [r3, #16]
  }
}
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40000400 	.word	0x40000400
 8004310:	40000800 	.word	0x40000800
 8004314:	40000c00 	.word	0x40000c00
 8004318:	40013400 	.word	0x40013400
 800431c:	40014000 	.word	0x40014000
 8004320:	40014400 	.word	0x40014400
 8004324:	40014800 	.word	0x40014800

08004328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800433c:	2302      	movs	r3, #2
 800433e:	e068      	b.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2e      	ldr	r2, [pc, #184]	@ (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2d      	ldr	r2, [pc, #180]	@ (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d108      	bne.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800437a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d01d      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043b2:	d018      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004428 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1a      	ldr	r2, [pc, #104]	@ (800442c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a18      	ldr	r2, [pc, #96]	@ (8004430 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a13      	ldr	r2, [pc, #76]	@ (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a14      	ldr	r2, [pc, #80]	@ (8004434 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10c      	bne.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40013400 	.word	0x40013400
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800
 8004430:	40000c00 	.word	0x40000c00
 8004434:	40014000 	.word	0x40014000

08004438 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e040      	b.n	8004508 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fc fefa 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2224      	movs	r2, #36	@ 0x24
 80044a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fae0 	bl	8004a80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f825 	bl	8004510 <UART_SetConfig>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e01b      	b.n	8004508 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fb5f 	bl	8004bc4 <UART_CheckIdleState>
 8004506:	4603      	mov	r3, r0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004514:	b08a      	sub	sp, #40	@ 0x28
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	431a      	orrs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	431a      	orrs	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	4313      	orrs	r3, r2
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4ba4      	ldr	r3, [pc, #656]	@ (80047d0 <UART_SetConfig+0x2c0>)
 8004540:	4013      	ands	r3, r2
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004548:	430b      	orrs	r3, r1
 800454a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a99      	ldr	r2, [pc, #612]	@ (80047d4 <UART_SetConfig+0x2c4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d004      	beq.n	800457c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004578:	4313      	orrs	r3, r2
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800458c:	430a      	orrs	r2, r1
 800458e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a90      	ldr	r2, [pc, #576]	@ (80047d8 <UART_SetConfig+0x2c8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d126      	bne.n	80045e8 <UART_SetConfig+0xd8>
 800459a:	4b90      	ldr	r3, [pc, #576]	@ (80047dc <UART_SetConfig+0x2cc>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d81b      	bhi.n	80045e0 <UART_SetConfig+0xd0>
 80045a8:	a201      	add	r2, pc, #4	@ (adr r2, 80045b0 <UART_SetConfig+0xa0>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045d1 	.word	0x080045d1
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045d9 	.word	0x080045d9
 80045c0:	2301      	movs	r3, #1
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c6:	e116      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80045c8:	2302      	movs	r3, #2
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ce:	e112      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80045d0:	2304      	movs	r3, #4
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d6:	e10e      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80045d8:	2308      	movs	r3, #8
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045de:	e10a      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80045e0:	2310      	movs	r3, #16
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e6:	e106      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a7c      	ldr	r2, [pc, #496]	@ (80047e0 <UART_SetConfig+0x2d0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d138      	bne.n	8004664 <UART_SetConfig+0x154>
 80045f2:	4b7a      	ldr	r3, [pc, #488]	@ (80047dc <UART_SetConfig+0x2cc>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b0c      	cmp	r3, #12
 80045fe:	d82d      	bhi.n	800465c <UART_SetConfig+0x14c>
 8004600:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <UART_SetConfig+0xf8>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	0800463d 	.word	0x0800463d
 800460c:	0800465d 	.word	0x0800465d
 8004610:	0800465d 	.word	0x0800465d
 8004614:	0800465d 	.word	0x0800465d
 8004618:	0800464d 	.word	0x0800464d
 800461c:	0800465d 	.word	0x0800465d
 8004620:	0800465d 	.word	0x0800465d
 8004624:	0800465d 	.word	0x0800465d
 8004628:	08004645 	.word	0x08004645
 800462c:	0800465d 	.word	0x0800465d
 8004630:	0800465d 	.word	0x0800465d
 8004634:	0800465d 	.word	0x0800465d
 8004638:	08004655 	.word	0x08004655
 800463c:	2300      	movs	r3, #0
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004642:	e0d8      	b.n	80047f6 <UART_SetConfig+0x2e6>
 8004644:	2302      	movs	r3, #2
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800464a:	e0d4      	b.n	80047f6 <UART_SetConfig+0x2e6>
 800464c:	2304      	movs	r3, #4
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004652:	e0d0      	b.n	80047f6 <UART_SetConfig+0x2e6>
 8004654:	2308      	movs	r3, #8
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800465a:	e0cc      	b.n	80047f6 <UART_SetConfig+0x2e6>
 800465c:	2310      	movs	r3, #16
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004662:	e0c8      	b.n	80047f6 <UART_SetConfig+0x2e6>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a5e      	ldr	r2, [pc, #376]	@ (80047e4 <UART_SetConfig+0x2d4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d125      	bne.n	80046ba <UART_SetConfig+0x1aa>
 800466e:	4b5b      	ldr	r3, [pc, #364]	@ (80047dc <UART_SetConfig+0x2cc>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004674:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004678:	2b30      	cmp	r3, #48	@ 0x30
 800467a:	d016      	beq.n	80046aa <UART_SetConfig+0x19a>
 800467c:	2b30      	cmp	r3, #48	@ 0x30
 800467e:	d818      	bhi.n	80046b2 <UART_SetConfig+0x1a2>
 8004680:	2b20      	cmp	r3, #32
 8004682:	d00a      	beq.n	800469a <UART_SetConfig+0x18a>
 8004684:	2b20      	cmp	r3, #32
 8004686:	d814      	bhi.n	80046b2 <UART_SetConfig+0x1a2>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <UART_SetConfig+0x182>
 800468c:	2b10      	cmp	r3, #16
 800468e:	d008      	beq.n	80046a2 <UART_SetConfig+0x192>
 8004690:	e00f      	b.n	80046b2 <UART_SetConfig+0x1a2>
 8004692:	2300      	movs	r3, #0
 8004694:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004698:	e0ad      	b.n	80047f6 <UART_SetConfig+0x2e6>
 800469a:	2302      	movs	r3, #2
 800469c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a0:	e0a9      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80046a2:	2304      	movs	r3, #4
 80046a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a8:	e0a5      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80046aa:	2308      	movs	r3, #8
 80046ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b0:	e0a1      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80046b2:	2310      	movs	r3, #16
 80046b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b8:	e09d      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a4a      	ldr	r2, [pc, #296]	@ (80047e8 <UART_SetConfig+0x2d8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d125      	bne.n	8004710 <UART_SetConfig+0x200>
 80046c4:	4b45      	ldr	r3, [pc, #276]	@ (80047dc <UART_SetConfig+0x2cc>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80046d0:	d016      	beq.n	8004700 <UART_SetConfig+0x1f0>
 80046d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80046d4:	d818      	bhi.n	8004708 <UART_SetConfig+0x1f8>
 80046d6:	2b80      	cmp	r3, #128	@ 0x80
 80046d8:	d00a      	beq.n	80046f0 <UART_SetConfig+0x1e0>
 80046da:	2b80      	cmp	r3, #128	@ 0x80
 80046dc:	d814      	bhi.n	8004708 <UART_SetConfig+0x1f8>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <UART_SetConfig+0x1d8>
 80046e2:	2b40      	cmp	r3, #64	@ 0x40
 80046e4:	d008      	beq.n	80046f8 <UART_SetConfig+0x1e8>
 80046e6:	e00f      	b.n	8004708 <UART_SetConfig+0x1f8>
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ee:	e082      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80046f0:	2302      	movs	r3, #2
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f6:	e07e      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80046f8:	2304      	movs	r3, #4
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fe:	e07a      	b.n	80047f6 <UART_SetConfig+0x2e6>
 8004700:	2308      	movs	r3, #8
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004706:	e076      	b.n	80047f6 <UART_SetConfig+0x2e6>
 8004708:	2310      	movs	r3, #16
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470e:	e072      	b.n	80047f6 <UART_SetConfig+0x2e6>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a35      	ldr	r2, [pc, #212]	@ (80047ec <UART_SetConfig+0x2dc>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d12a      	bne.n	8004770 <UART_SetConfig+0x260>
 800471a:	4b30      	ldr	r3, [pc, #192]	@ (80047dc <UART_SetConfig+0x2cc>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004720:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004724:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004728:	d01a      	beq.n	8004760 <UART_SetConfig+0x250>
 800472a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800472e:	d81b      	bhi.n	8004768 <UART_SetConfig+0x258>
 8004730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004734:	d00c      	beq.n	8004750 <UART_SetConfig+0x240>
 8004736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800473a:	d815      	bhi.n	8004768 <UART_SetConfig+0x258>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <UART_SetConfig+0x238>
 8004740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004744:	d008      	beq.n	8004758 <UART_SetConfig+0x248>
 8004746:	e00f      	b.n	8004768 <UART_SetConfig+0x258>
 8004748:	2300      	movs	r3, #0
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474e:	e052      	b.n	80047f6 <UART_SetConfig+0x2e6>
 8004750:	2302      	movs	r3, #2
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004756:	e04e      	b.n	80047f6 <UART_SetConfig+0x2e6>
 8004758:	2304      	movs	r3, #4
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475e:	e04a      	b.n	80047f6 <UART_SetConfig+0x2e6>
 8004760:	2308      	movs	r3, #8
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004766:	e046      	b.n	80047f6 <UART_SetConfig+0x2e6>
 8004768:	2310      	movs	r3, #16
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476e:	e042      	b.n	80047f6 <UART_SetConfig+0x2e6>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a17      	ldr	r2, [pc, #92]	@ (80047d4 <UART_SetConfig+0x2c4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d13a      	bne.n	80047f0 <UART_SetConfig+0x2e0>
 800477a:	4b18      	ldr	r3, [pc, #96]	@ (80047dc <UART_SetConfig+0x2cc>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004780:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004784:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004788:	d01a      	beq.n	80047c0 <UART_SetConfig+0x2b0>
 800478a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800478e:	d81b      	bhi.n	80047c8 <UART_SetConfig+0x2b8>
 8004790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004794:	d00c      	beq.n	80047b0 <UART_SetConfig+0x2a0>
 8004796:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800479a:	d815      	bhi.n	80047c8 <UART_SetConfig+0x2b8>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <UART_SetConfig+0x298>
 80047a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a4:	d008      	beq.n	80047b8 <UART_SetConfig+0x2a8>
 80047a6:	e00f      	b.n	80047c8 <UART_SetConfig+0x2b8>
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ae:	e022      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80047b0:	2302      	movs	r3, #2
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b6:	e01e      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047be:	e01a      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80047c0:	2308      	movs	r3, #8
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c6:	e016      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80047c8:	2310      	movs	r3, #16
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ce:	e012      	b.n	80047f6 <UART_SetConfig+0x2e6>
 80047d0:	efff69f3 	.word	0xefff69f3
 80047d4:	40008000 	.word	0x40008000
 80047d8:	40013800 	.word	0x40013800
 80047dc:	40021000 	.word	0x40021000
 80047e0:	40004400 	.word	0x40004400
 80047e4:	40004800 	.word	0x40004800
 80047e8:	40004c00 	.word	0x40004c00
 80047ec:	40005000 	.word	0x40005000
 80047f0:	2310      	movs	r3, #16
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a9f      	ldr	r2, [pc, #636]	@ (8004a78 <UART_SetConfig+0x568>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d17a      	bne.n	80048f6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004800:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004804:	2b08      	cmp	r3, #8
 8004806:	d824      	bhi.n	8004852 <UART_SetConfig+0x342>
 8004808:	a201      	add	r2, pc, #4	@ (adr r2, 8004810 <UART_SetConfig+0x300>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004835 	.word	0x08004835
 8004814:	08004853 	.word	0x08004853
 8004818:	0800483d 	.word	0x0800483d
 800481c:	08004853 	.word	0x08004853
 8004820:	08004843 	.word	0x08004843
 8004824:	08004853 	.word	0x08004853
 8004828:	08004853 	.word	0x08004853
 800482c:	08004853 	.word	0x08004853
 8004830:	0800484b 	.word	0x0800484b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004834:	f7fe fce0 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 8004838:	61f8      	str	r0, [r7, #28]
        break;
 800483a:	e010      	b.n	800485e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800483c:	4b8f      	ldr	r3, [pc, #572]	@ (8004a7c <UART_SetConfig+0x56c>)
 800483e:	61fb      	str	r3, [r7, #28]
        break;
 8004840:	e00d      	b.n	800485e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004842:	f7fe fc41 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8004846:	61f8      	str	r0, [r7, #28]
        break;
 8004848:	e009      	b.n	800485e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800484e:	61fb      	str	r3, [r7, #28]
        break;
 8004850:	e005      	b.n	800485e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800485c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80fb 	beq.w	8004a5c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	4413      	add	r3, r2
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	429a      	cmp	r2, r3
 8004874:	d305      	bcc.n	8004882 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	429a      	cmp	r2, r3
 8004880:	d903      	bls.n	800488a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004888:	e0e8      	b.n	8004a5c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	2200      	movs	r2, #0
 800488e:	461c      	mov	r4, r3
 8004890:	4615      	mov	r5, r2
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	022b      	lsls	r3, r5, #8
 800489c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048a0:	0222      	lsls	r2, r4, #8
 80048a2:	68f9      	ldr	r1, [r7, #12]
 80048a4:	6849      	ldr	r1, [r1, #4]
 80048a6:	0849      	lsrs	r1, r1, #1
 80048a8:	2000      	movs	r0, #0
 80048aa:	4688      	mov	r8, r1
 80048ac:	4681      	mov	r9, r0
 80048ae:	eb12 0a08 	adds.w	sl, r2, r8
 80048b2:	eb43 0b09 	adc.w	fp, r3, r9
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048c4:	4650      	mov	r0, sl
 80048c6:	4659      	mov	r1, fp
 80048c8:	f7fb fc82 	bl	80001d0 <__aeabi_uldivmod>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4613      	mov	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048da:	d308      	bcc.n	80048ee <UART_SetConfig+0x3de>
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048e2:	d204      	bcs.n	80048ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	60da      	str	r2, [r3, #12]
 80048ec:	e0b6      	b.n	8004a5c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048f4:	e0b2      	b.n	8004a5c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048fe:	d15e      	bne.n	80049be <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004900:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004904:	2b08      	cmp	r3, #8
 8004906:	d828      	bhi.n	800495a <UART_SetConfig+0x44a>
 8004908:	a201      	add	r2, pc, #4	@ (adr r2, 8004910 <UART_SetConfig+0x400>)
 800490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490e:	bf00      	nop
 8004910:	08004935 	.word	0x08004935
 8004914:	0800493d 	.word	0x0800493d
 8004918:	08004945 	.word	0x08004945
 800491c:	0800495b 	.word	0x0800495b
 8004920:	0800494b 	.word	0x0800494b
 8004924:	0800495b 	.word	0x0800495b
 8004928:	0800495b 	.word	0x0800495b
 800492c:	0800495b 	.word	0x0800495b
 8004930:	08004953 	.word	0x08004953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004934:	f7fe fc60 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 8004938:	61f8      	str	r0, [r7, #28]
        break;
 800493a:	e014      	b.n	8004966 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800493c:	f7fe fc72 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 8004940:	61f8      	str	r0, [r7, #28]
        break;
 8004942:	e010      	b.n	8004966 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004944:	4b4d      	ldr	r3, [pc, #308]	@ (8004a7c <UART_SetConfig+0x56c>)
 8004946:	61fb      	str	r3, [r7, #28]
        break;
 8004948:	e00d      	b.n	8004966 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800494a:	f7fe fbbd 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 800494e:	61f8      	str	r0, [r7, #28]
        break;
 8004950:	e009      	b.n	8004966 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004956:	61fb      	str	r3, [r7, #28]
        break;
 8004958:	e005      	b.n	8004966 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004964:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d077      	beq.n	8004a5c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	005a      	lsls	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	441a      	add	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b0f      	cmp	r3, #15
 8004986:	d916      	bls.n	80049b6 <UART_SetConfig+0x4a6>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800498e:	d212      	bcs.n	80049b6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f023 030f 	bic.w	r3, r3, #15
 8004998:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	8afb      	ldrh	r3, [r7, #22]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	8afa      	ldrh	r2, [r7, #22]
 80049b2:	60da      	str	r2, [r3, #12]
 80049b4:	e052      	b.n	8004a5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049bc:	e04e      	b.n	8004a5c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d827      	bhi.n	8004a16 <UART_SetConfig+0x506>
 80049c6:	a201      	add	r2, pc, #4	@ (adr r2, 80049cc <UART_SetConfig+0x4bc>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	080049f1 	.word	0x080049f1
 80049d0:	080049f9 	.word	0x080049f9
 80049d4:	08004a01 	.word	0x08004a01
 80049d8:	08004a17 	.word	0x08004a17
 80049dc:	08004a07 	.word	0x08004a07
 80049e0:	08004a17 	.word	0x08004a17
 80049e4:	08004a17 	.word	0x08004a17
 80049e8:	08004a17 	.word	0x08004a17
 80049ec:	08004a0f 	.word	0x08004a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f0:	f7fe fc02 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 80049f4:	61f8      	str	r0, [r7, #28]
        break;
 80049f6:	e014      	b.n	8004a22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049f8:	f7fe fc14 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 80049fc:	61f8      	str	r0, [r7, #28]
        break;
 80049fe:	e010      	b.n	8004a22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a00:	4b1e      	ldr	r3, [pc, #120]	@ (8004a7c <UART_SetConfig+0x56c>)
 8004a02:	61fb      	str	r3, [r7, #28]
        break;
 8004a04:	e00d      	b.n	8004a22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a06:	f7fe fb5f 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8004a0a:	61f8      	str	r0, [r7, #28]
        break;
 8004a0c:	e009      	b.n	8004a22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a12:	61fb      	str	r3, [r7, #28]
        break;
 8004a14:	e005      	b.n	8004a22 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a20:	bf00      	nop
    }

    if (pclk != 0U)
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d019      	beq.n	8004a5c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	085a      	lsrs	r2, r3, #1
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	441a      	add	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b0f      	cmp	r3, #15
 8004a40:	d909      	bls.n	8004a56 <UART_SetConfig+0x546>
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a48:	d205      	bcs.n	8004a56 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60da      	str	r2, [r3, #12]
 8004a54:	e002      	b.n	8004a5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3728      	adds	r7, #40	@ 0x28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a76:	bf00      	nop
 8004a78:	40008000 	.word	0x40008000
 8004a7c:	00f42400 	.word	0x00f42400

08004a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01a      	beq.n	8004b96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b7e:	d10a      	bne.n	8004b96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	605a      	str	r2, [r3, #4]
  }
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b098      	sub	sp, #96	@ 0x60
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bd4:	f7fc fd9c 	bl	8001710 <HAL_GetTick>
 8004bd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d12e      	bne.n	8004c46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f88c 	bl	8004d14 <UART_WaitOnFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d021      	beq.n	8004c46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c16:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e6      	bne.n	8004c02 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e062      	b.n	8004d0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d149      	bne.n	8004ce8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f856 	bl	8004d14 <UART_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d03c      	beq.n	8004ce8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e6      	bne.n	8004c6e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cc0:	61fa      	str	r2, [r7, #28]
 8004cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	69b9      	ldr	r1, [r7, #24]
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e5      	bne.n	8004ca0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e011      	b.n	8004d0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3758      	adds	r7, #88	@ 0x58
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d24:	e04f      	b.n	8004dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d04b      	beq.n	8004dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2e:	f7fc fcef 	bl	8001710 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e04e      	b.n	8004de6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d037      	beq.n	8004dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b80      	cmp	r3, #128	@ 0x80
 8004d5a:	d034      	beq.n	8004dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b40      	cmp	r3, #64	@ 0x40
 8004d60:	d031      	beq.n	8004dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d110      	bne.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2208      	movs	r2, #8
 8004d76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f838 	bl	8004dee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2208      	movs	r2, #8
 8004d82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e029      	b.n	8004de6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004da0:	d111      	bne.n	8004dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 f81e 	bl	8004dee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e00f      	b.n	8004de6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	bf0c      	ite	eq
 8004dd6:	2301      	moveq	r3, #1
 8004dd8:	2300      	movne	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d0a0      	beq.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b095      	sub	sp, #84	@ 0x54
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e6      	bne.n	8004df6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e5      	bne.n	8004e28 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d118      	bne.n	8004e96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f023 0310 	bic.w	r3, r3, #16
 8004e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6979      	ldr	r1, [r7, #20]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e6      	bne.n	8004e64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004eaa:	bf00      	nop
 8004eac:	3754      	adds	r7, #84	@ 0x54
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	f107 001c 	add.w	r0, r7, #28
 8004ec4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fa69 	bl	80053ac <USB_CoreReset>
 8004eda:	4603      	mov	r3, r0
 8004edc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004ede:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ef2:	e005      	b.n	8004f00 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f0c:	b004      	add	sp, #16
 8004f0e:	4770      	bx	lr

08004f10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f023 0201 	bic.w	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d115      	bne.n	8004f80 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f60:	200a      	movs	r0, #10
 8004f62:	f7fc fbe1 	bl	8001728 <HAL_Delay>
      ms += 10U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	330a      	adds	r3, #10
 8004f6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fa0f 	bl	8005390 <USB_GetMode>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d01e      	beq.n	8004fb6 <USB_SetCurrentMode+0x84>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f7c:	d9f0      	bls.n	8004f60 <USB_SetCurrentMode+0x2e>
 8004f7e:	e01a      	b.n	8004fb6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d115      	bne.n	8004fb2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f92:	200a      	movs	r0, #10
 8004f94:	f7fc fbc8 	bl	8001728 <HAL_Delay>
      ms += 10U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	330a      	adds	r3, #10
 8004f9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f9f6 	bl	8005390 <USB_GetMode>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <USB_SetCurrentMode+0x84>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2bc7      	cmp	r3, #199	@ 0xc7
 8004fae:	d9f0      	bls.n	8004f92 <USB_SetCurrentMode+0x60>
 8004fb0:	e001      	b.n	8004fb6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e005      	b.n	8004fc2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2bc8      	cmp	r3, #200	@ 0xc8
 8004fba:	d101      	bne.n	8004fc0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fcc:	b084      	sub	sp, #16
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b086      	sub	sp, #24
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	e009      	b.n	8005000 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3340      	adds	r3, #64	@ 0x40
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b0e      	cmp	r3, #14
 8005004:	d9f2      	bls.n	8004fec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005006:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800500a:	2b00      	cmp	r3, #0
 800500c:	d11c      	bne.n	8005048 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800501c:	f043 0302 	orr.w	r3, r3, #2
 8005020:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005026:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	e005      	b.n	8005054 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800505a:	461a      	mov	r2, r3
 800505c:	2300      	movs	r3, #0
 800505e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005060:	2103      	movs	r1, #3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f95a 	bl	800531c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005068:	2110      	movs	r1, #16
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f8f6 	bl	800525c <USB_FlushTxFifo>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f920 	bl	80052c0 <USB_FlushRxFifo>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005090:	461a      	mov	r2, r3
 8005092:	2300      	movs	r3, #0
 8005094:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800509c:	461a      	mov	r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a8:	461a      	mov	r2, r3
 80050aa:	2300      	movs	r3, #0
 80050ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	e043      	b.n	800513c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050ca:	d118      	bne.n	80050fe <USB_DevInit+0x132>
    {
      if (i == 0U)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050de:	461a      	mov	r2, r3
 80050e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e013      	b.n	8005110 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f4:	461a      	mov	r2, r3
 80050f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	e008      	b.n	8005110 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510a:	461a      	mov	r2, r3
 800510c:	2300      	movs	r3, #0
 800510e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800511c:	461a      	mov	r2, r3
 800511e:	2300      	movs	r3, #0
 8005120:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512e:	461a      	mov	r2, r3
 8005130:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005134:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	3301      	adds	r3, #1
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005140:	461a      	mov	r2, r3
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4293      	cmp	r3, r2
 8005146:	d3b5      	bcc.n	80050b4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	e043      	b.n	80051d6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005160:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005164:	d118      	bne.n	8005198 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10a      	bne.n	8005182 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005178:	461a      	mov	r2, r3
 800517a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	e013      	b.n	80051aa <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518e:	461a      	mov	r2, r3
 8005190:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e008      	b.n	80051aa <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a4:	461a      	mov	r2, r3
 80051a6:	2300      	movs	r3, #0
 80051a8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b6:	461a      	mov	r2, r3
 80051b8:	2300      	movs	r3, #0
 80051ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c8:	461a      	mov	r2, r3
 80051ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	3301      	adds	r3, #1
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051da:	461a      	mov	r2, r3
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	4293      	cmp	r3, r2
 80051e0:	d3b5      	bcc.n	800514e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051f4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005202:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f043 0210 	orr.w	r2, r3, #16
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	4b10      	ldr	r3, [pc, #64]	@ (8005258 <USB_DevInit+0x28c>)
 8005216:	4313      	orrs	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800521c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f043 0208 	orr.w	r2, r3, #8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005230:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005234:	2b01      	cmp	r3, #1
 8005236:	d107      	bne.n	8005248 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005240:	f043 0304 	orr.w	r3, r3, #4
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005248:	7dfb      	ldrb	r3, [r7, #23]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005254:	b004      	add	sp, #16
 8005256:	4770      	bx	lr
 8005258:	803c3800 	.word	0x803c3800

0800525c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3301      	adds	r3, #1
 800526e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005276:	d901      	bls.n	800527c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e01b      	b.n	80052b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	daf2      	bge.n	800526a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	019b      	lsls	r3, r3, #6
 800528c:	f043 0220 	orr.w	r2, r3, #32
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3301      	adds	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052a0:	d901      	bls.n	80052a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e006      	b.n	80052b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d0f0      	beq.n	8005294 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3301      	adds	r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052d8:	d901      	bls.n	80052de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e018      	b.n	8005310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	daf2      	bge.n	80052cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2210      	movs	r2, #16
 80052ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052fc:	d901      	bls.n	8005302 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e006      	b.n	8005310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0310 	and.w	r3, r3, #16
 800530a:	2b10      	cmp	r3, #16
 800530c:	d0f0      	beq.n	80052f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	68f9      	ldr	r1, [r7, #12]
 8005338:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800533c:	4313      	orrs	r3, r2
 800533e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005368:	f023 0303 	bic.w	r3, r3, #3
 800536c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800537c:	f043 0302 	orr.w	r3, r3, #2
 8005380:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	f003 0301 	and.w	r3, r3, #1
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3301      	adds	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053c4:	d901      	bls.n	80053ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e01b      	b.n	8005402 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	daf2      	bge.n	80053b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f043 0201 	orr.w	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3301      	adds	r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053ee:	d901      	bls.n	80053f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e006      	b.n	8005402 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d0f0      	beq.n	80053e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
	...

08005410 <__NVIC_SetPriority>:
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	4603      	mov	r3, r0
 8005418:	6039      	str	r1, [r7, #0]
 800541a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800541c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005420:	2b00      	cmp	r3, #0
 8005422:	db0a      	blt.n	800543a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	490c      	ldr	r1, [pc, #48]	@ (800545c <__NVIC_SetPriority+0x4c>)
 800542a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542e:	0112      	lsls	r2, r2, #4
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	440b      	add	r3, r1
 8005434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005438:	e00a      	b.n	8005450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	4908      	ldr	r1, [pc, #32]	@ (8005460 <__NVIC_SetPriority+0x50>)
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	3b04      	subs	r3, #4
 8005448:	0112      	lsls	r2, r2, #4
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	440b      	add	r3, r1
 800544e:	761a      	strb	r2, [r3, #24]
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	e000e100 	.word	0xe000e100
 8005460:	e000ed00 	.word	0xe000ed00

08005464 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005468:	2100      	movs	r1, #0
 800546a:	f06f 0004 	mvn.w	r0, #4
 800546e:	f7ff ffcf 	bl	8005410 <__NVIC_SetPriority>
#endif
}
 8005472:	bf00      	nop
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800547e:	f3ef 8305 	mrs	r3, IPSR
 8005482:	603b      	str	r3, [r7, #0]
  return(result);
 8005484:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800548a:	f06f 0305 	mvn.w	r3, #5
 800548e:	607b      	str	r3, [r7, #4]
 8005490:	e00c      	b.n	80054ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005492:	4b0a      	ldr	r3, [pc, #40]	@ (80054bc <osKernelInitialize+0x44>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d105      	bne.n	80054a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800549a:	4b08      	ldr	r3, [pc, #32]	@ (80054bc <osKernelInitialize+0x44>)
 800549c:	2201      	movs	r2, #1
 800549e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	607b      	str	r3, [r7, #4]
 80054a4:	e002      	b.n	80054ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80054a6:	f04f 33ff 	mov.w	r3, #4294967295
 80054aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054ac:	687b      	ldr	r3, [r7, #4]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	200007f4 	.word	0x200007f4

080054c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054c6:	f3ef 8305 	mrs	r3, IPSR
 80054ca:	603b      	str	r3, [r7, #0]
  return(result);
 80054cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <osKernelStart+0x1a>
    stat = osErrorISR;
 80054d2:	f06f 0305 	mvn.w	r3, #5
 80054d6:	607b      	str	r3, [r7, #4]
 80054d8:	e010      	b.n	80054fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80054da:	4b0b      	ldr	r3, [pc, #44]	@ (8005508 <osKernelStart+0x48>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d109      	bne.n	80054f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80054e2:	f7ff ffbf 	bl	8005464 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80054e6:	4b08      	ldr	r3, [pc, #32]	@ (8005508 <osKernelStart+0x48>)
 80054e8:	2202      	movs	r2, #2
 80054ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80054ec:	f001 ffc2 	bl	8007474 <vTaskStartScheduler>
      stat = osOK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	e002      	b.n	80054fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80054f6:	f04f 33ff 	mov.w	r3, #4294967295
 80054fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054fc:	687b      	ldr	r3, [r7, #4]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	200007f4 	.word	0x200007f4

0800550c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b08e      	sub	sp, #56	@ 0x38
 8005510:	af04      	add	r7, sp, #16
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800551c:	f3ef 8305 	mrs	r3, IPSR
 8005520:	617b      	str	r3, [r7, #20]
  return(result);
 8005522:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005524:	2b00      	cmp	r3, #0
 8005526:	d17e      	bne.n	8005626 <osThreadNew+0x11a>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d07b      	beq.n	8005626 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800552e:	2380      	movs	r3, #128	@ 0x80
 8005530:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005532:	2318      	movs	r3, #24
 8005534:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005536:	2300      	movs	r3, #0
 8005538:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800553a:	f04f 33ff 	mov.w	r3, #4294967295
 800553e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d045      	beq.n	80055d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <osThreadNew+0x48>
        name = attr->name;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <osThreadNew+0x6e>
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b38      	cmp	r3, #56	@ 0x38
 800556c:	d805      	bhi.n	800557a <osThreadNew+0x6e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <osThreadNew+0x72>
        return (NULL);
 800557a:	2300      	movs	r3, #0
 800557c:	e054      	b.n	8005628 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	089b      	lsrs	r3, r3, #2
 800558c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00e      	beq.n	80055b4 <osThreadNew+0xa8>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	2b5b      	cmp	r3, #91	@ 0x5b
 800559c:	d90a      	bls.n	80055b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d006      	beq.n	80055b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <osThreadNew+0xa8>
        mem = 1;
 80055ae:	2301      	movs	r3, #1
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	e010      	b.n	80055d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10c      	bne.n	80055d6 <osThreadNew+0xca>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d108      	bne.n	80055d6 <osThreadNew+0xca>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <osThreadNew+0xca>
          mem = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	e001      	b.n	80055d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d110      	bne.n	80055fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055e4:	9202      	str	r2, [sp, #8]
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6a3a      	ldr	r2, [r7, #32]
 80055f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f001 fd62 	bl	80070bc <xTaskCreateStatic>
 80055f8:	4603      	mov	r3, r0
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	e013      	b.n	8005626 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d110      	bne.n	8005626 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	b29a      	uxth	r2, r3
 8005608:	f107 0310 	add.w	r3, r7, #16
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f001 fdb0 	bl	800717c <xTaskCreate>
 800561c:	4603      	mov	r3, r0
 800561e:	2b01      	cmp	r3, #1
 8005620:	d001      	beq.n	8005626 <osThreadNew+0x11a>
            hTask = NULL;
 8005622:	2300      	movs	r3, #0
 8005624:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005626:	693b      	ldr	r3, [r7, #16]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3728      	adds	r7, #40	@ 0x28
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005638:	f3ef 8305 	mrs	r3, IPSR
 800563c:	60bb      	str	r3, [r7, #8]
  return(result);
 800563e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <osDelay+0x1c>
    stat = osErrorISR;
 8005644:	f06f 0305 	mvn.w	r3, #5
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	e007      	b.n	800565c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f001 fed6 	bl	8007408 <vTaskDelay>
    }
  }

  return (stat);
 800565c:	68fb      	ldr	r3, [r7, #12]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005666:	b580      	push	{r7, lr}
 8005668:	b088      	sub	sp, #32
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005672:	f3ef 8305 	mrs	r3, IPSR
 8005676:	60bb      	str	r3, [r7, #8]
  return(result);
 8005678:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800567a:	2b00      	cmp	r3, #0
 800567c:	d174      	bne.n	8005768 <osMutexNew+0x102>
    if (attr != NULL) {
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <osMutexNew+0x26>
      type = attr->attr_bits;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	e001      	b.n	8005690 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <osMutexNew+0x3a>
      rmtx = 1U;
 800569a:	2301      	movs	r3, #1
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	e001      	b.n	80056a4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d15c      	bne.n	8005768 <osMutexNew+0x102>
      mem = -1;
 80056ae:	f04f 33ff 	mov.w	r3, #4294967295
 80056b2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d015      	beq.n	80056e6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d006      	beq.n	80056d0 <osMutexNew+0x6a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	2b4f      	cmp	r3, #79	@ 0x4f
 80056c8:	d902      	bls.n	80056d0 <osMutexNew+0x6a>
          mem = 1;
 80056ca:	2301      	movs	r3, #1
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	e00c      	b.n	80056ea <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d108      	bne.n	80056ea <osMutexNew+0x84>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d104      	bne.n	80056ea <osMutexNew+0x84>
            mem = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	e001      	b.n	80056ea <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d112      	bne.n	8005716 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	4619      	mov	r1, r3
 80056fc:	2004      	movs	r0, #4
 80056fe:	f000 fd70 	bl	80061e2 <xQueueCreateMutexStatic>
 8005702:	61f8      	str	r0, [r7, #28]
 8005704:	e016      	b.n	8005734 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	4619      	mov	r1, r3
 800570c:	2001      	movs	r0, #1
 800570e:	f000 fd68 	bl	80061e2 <xQueueCreateMutexStatic>
 8005712:	61f8      	str	r0, [r7, #28]
 8005714:	e00e      	b.n	8005734 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005722:	2004      	movs	r0, #4
 8005724:	f000 fd45 	bl	80061b2 <xQueueCreateMutex>
 8005728:	61f8      	str	r0, [r7, #28]
 800572a:	e003      	b.n	8005734 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800572c:	2001      	movs	r0, #1
 800572e:	f000 fd40 	bl	80061b2 <xQueueCreateMutex>
 8005732:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00c      	beq.n	8005754 <osMutexNew+0xee>
        if (attr != NULL) {
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <osMutexNew+0xe2>
          name = attr->name;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	e001      	b.n	800574c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005748:	2300      	movs	r3, #0
 800574a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800574c:	68f9      	ldr	r1, [r7, #12]
 800574e:	69f8      	ldr	r0, [r7, #28]
 8005750:	f001 fc2c 	bl	8006fac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d006      	beq.n	8005768 <osMutexNew+0x102>
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	f043 0301 	orr.w	r3, r3, #1
 8005766:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005768:	69fb      	ldr	r3, [r7, #28]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3720      	adds	r7, #32
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005772:	b580      	push	{r7, lr}
 8005774:	b086      	sub	sp, #24
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005790:	f3ef 8305 	mrs	r3, IPSR
 8005794:	60bb      	str	r3, [r7, #8]
  return(result);
 8005796:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800579c:	f06f 0305 	mvn.w	r3, #5
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	e02c      	b.n	80057fe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80057aa:	f06f 0303 	mvn.w	r3, #3
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	e025      	b.n	80057fe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d011      	beq.n	80057dc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6938      	ldr	r0, [r7, #16]
 80057bc:	f000 fd61 	bl	8006282 <xQueueTakeMutexRecursive>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d01b      	beq.n	80057fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80057cc:	f06f 0301 	mvn.w	r3, #1
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	e014      	b.n	80057fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80057d4:	f06f 0302 	mvn.w	r3, #2
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	e010      	b.n	80057fe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6938      	ldr	r0, [r7, #16]
 80057e0:	f001 f906 	bl	80069f0 <xQueueSemaphoreTake>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d009      	beq.n	80057fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80057f0:	f06f 0301 	mvn.w	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	e002      	b.n	80057fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80057f8:	f06f 0302 	mvn.w	r3, #2
 80057fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80057fe:	697b      	ldr	r3, [r7, #20]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005824:	f3ef 8305 	mrs	r3, IPSR
 8005828:	60bb      	str	r3, [r7, #8]
  return(result);
 800582a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005830:	f06f 0305 	mvn.w	r3, #5
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	e01f      	b.n	8005878 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d103      	bne.n	8005846 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800583e:	f06f 0303 	mvn.w	r3, #3
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e018      	b.n	8005878 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d009      	beq.n	8005860 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800584c:	6938      	ldr	r0, [r7, #16]
 800584e:	f000 fce3 	bl	8006218 <xQueueGiveMutexRecursive>
 8005852:	4603      	mov	r3, r0
 8005854:	2b01      	cmp	r3, #1
 8005856:	d00f      	beq.n	8005878 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005858:	f06f 0302 	mvn.w	r3, #2
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	e00b      	b.n	8005878 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005860:	2300      	movs	r3, #0
 8005862:	2200      	movs	r2, #0
 8005864:	2100      	movs	r1, #0
 8005866:	6938      	ldr	r0, [r7, #16]
 8005868:	f000 fdb0 	bl	80063cc <xQueueGenericSend>
 800586c:	4603      	mov	r3, r0
 800586e:	2b01      	cmp	r3, #1
 8005870:	d002      	beq.n	8005878 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005872:	f06f 0302 	mvn.w	r3, #2
 8005876:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005878:	697b      	ldr	r3, [r7, #20]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005882:	b580      	push	{r7, lr}
 8005884:	b08a      	sub	sp, #40	@ 0x28
 8005886:	af02      	add	r7, sp, #8
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005892:	f3ef 8305 	mrs	r3, IPSR
 8005896:	613b      	str	r3, [r7, #16]
  return(result);
 8005898:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800589a:	2b00      	cmp	r3, #0
 800589c:	d175      	bne.n	800598a <osSemaphoreNew+0x108>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d072      	beq.n	800598a <osSemaphoreNew+0x108>
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d86e      	bhi.n	800598a <osSemaphoreNew+0x108>
    mem = -1;
 80058ac:	f04f 33ff 	mov.w	r3, #4294967295
 80058b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d015      	beq.n	80058e4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d006      	beq.n	80058ce <osSemaphoreNew+0x4c>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2b4f      	cmp	r3, #79	@ 0x4f
 80058c6:	d902      	bls.n	80058ce <osSemaphoreNew+0x4c>
        mem = 1;
 80058c8:	2301      	movs	r3, #1
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	e00c      	b.n	80058e8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d108      	bne.n	80058e8 <osSemaphoreNew+0x66>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d104      	bne.n	80058e8 <osSemaphoreNew+0x66>
          mem = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	e001      	b.n	80058e8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d04c      	beq.n	800598a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d128      	bne.n	8005948 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d10a      	bne.n	8005912 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2203      	movs	r2, #3
 8005902:	9200      	str	r2, [sp, #0]
 8005904:	2200      	movs	r2, #0
 8005906:	2100      	movs	r1, #0
 8005908:	2001      	movs	r0, #1
 800590a:	f000 fb5d 	bl	8005fc8 <xQueueGenericCreateStatic>
 800590e:	61f8      	str	r0, [r7, #28]
 8005910:	e005      	b.n	800591e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005912:	2203      	movs	r2, #3
 8005914:	2100      	movs	r1, #0
 8005916:	2001      	movs	r0, #1
 8005918:	f000 fbd3 	bl	80060c2 <xQueueGenericCreate>
 800591c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d022      	beq.n	800596a <osSemaphoreNew+0xe8>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d01f      	beq.n	800596a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800592a:	2300      	movs	r3, #0
 800592c:	2200      	movs	r2, #0
 800592e:	2100      	movs	r1, #0
 8005930:	69f8      	ldr	r0, [r7, #28]
 8005932:	f000 fd4b 	bl	80063cc <xQueueGenericSend>
 8005936:	4603      	mov	r3, r0
 8005938:	2b01      	cmp	r3, #1
 800593a:	d016      	beq.n	800596a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800593c:	69f8      	ldr	r0, [r7, #28]
 800593e:	f001 f9e9 	bl	8006d14 <vQueueDelete>
            hSemaphore = NULL;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	e010      	b.n	800596a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d108      	bne.n	8005960 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	461a      	mov	r2, r3
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fcca 	bl	80062f0 <xQueueCreateCountingSemaphoreStatic>
 800595c:	61f8      	str	r0, [r7, #28]
 800595e:	e004      	b.n	800596a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fcfd 	bl	8006362 <xQueueCreateCountingSemaphore>
 8005968:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00c      	beq.n	800598a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <osSemaphoreNew+0xfc>
          name = attr->name;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	e001      	b.n	8005982 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005982:	6979      	ldr	r1, [r7, #20]
 8005984:	69f8      	ldr	r0, [r7, #28]
 8005986:	f001 fb11 	bl	8006fac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800598a:	69fb      	ldr	r3, [r7, #28]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3720      	adds	r7, #32
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d103      	bne.n	80059b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80059ac:	f06f 0303 	mvn.w	r3, #3
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	e039      	b.n	8005a28 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059b4:	f3ef 8305 	mrs	r3, IPSR
 80059b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80059ba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d022      	beq.n	8005a06 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80059c6:	f06f 0303 	mvn.w	r3, #3
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	e02c      	b.n	8005a28 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80059d2:	f107 0308 	add.w	r3, r7, #8
 80059d6:	461a      	mov	r2, r3
 80059d8:	2100      	movs	r1, #0
 80059da:	6938      	ldr	r0, [r7, #16]
 80059dc:	f001 f918 	bl	8006c10 <xQueueReceiveFromISR>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d003      	beq.n	80059ee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80059e6:	f06f 0302 	mvn.w	r3, #2
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	e01c      	b.n	8005a28 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d019      	beq.n	8005a28 <osSemaphoreAcquire+0x94>
 80059f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005a34 <osSemaphoreAcquire+0xa0>)
 80059f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	e010      	b.n	8005a28 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	6938      	ldr	r0, [r7, #16]
 8005a0a:	f000 fff1 	bl	80069f0 <xQueueSemaphoreTake>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d009      	beq.n	8005a28 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005a1a:	f06f 0301 	mvn.w	r3, #1
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e002      	b.n	8005a28 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005a22:	f06f 0302 	mvn.w	r3, #2
 8005a26:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005a28:	697b      	ldr	r3, [r7, #20]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005a4e:	f06f 0303 	mvn.w	r3, #3
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	e02c      	b.n	8005ab0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a56:	f3ef 8305 	mrs	r3, IPSR
 8005a5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d01a      	beq.n	8005a98 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005a66:	f107 0308 	add.w	r3, r7, #8
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6938      	ldr	r0, [r7, #16]
 8005a6e:	f000 fe4d 	bl	800670c <xQueueGiveFromISR>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d003      	beq.n	8005a80 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005a78:	f06f 0302 	mvn.w	r3, #2
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	e017      	b.n	8005ab0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d014      	beq.n	8005ab0 <osSemaphoreRelease+0x78>
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <osSemaphoreRelease+0x84>)
 8005a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	e00b      	b.n	8005ab0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	6938      	ldr	r0, [r7, #16]
 8005aa0:	f000 fc94 	bl	80063cc <xQueueGenericSend>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d002      	beq.n	8005ab0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005aaa:	f06f 0302 	mvn.w	r3, #2
 8005aae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005ab0:	697b      	ldr	r3, [r7, #20]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	e000ed04 	.word	0xe000ed04

08005ac0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08a      	sub	sp, #40	@ 0x28
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad0:	f3ef 8305 	mrs	r3, IPSR
 8005ad4:	613b      	str	r3, [r7, #16]
  return(result);
 8005ad6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d15f      	bne.n	8005b9c <osMessageQueueNew+0xdc>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d05c      	beq.n	8005b9c <osMessageQueueNew+0xdc>
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d059      	beq.n	8005b9c <osMessageQueueNew+0xdc>
    mem = -1;
 8005ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d029      	beq.n	8005b48 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d012      	beq.n	8005b22 <osMessageQueueNew+0x62>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	2b4f      	cmp	r3, #79	@ 0x4f
 8005b02:	d90e      	bls.n	8005b22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	695a      	ldr	r2, [r3, #20]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d302      	bcc.n	8005b22 <osMessageQueueNew+0x62>
        mem = 1;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	e014      	b.n	8005b4c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d110      	bne.n	8005b4c <osMessageQueueNew+0x8c>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10c      	bne.n	8005b4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d108      	bne.n	8005b4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d104      	bne.n	8005b4c <osMessageQueueNew+0x8c>
          mem = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e001      	b.n	8005b4c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d10b      	bne.n	8005b6a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	9100      	str	r1, [sp, #0]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fa31 	bl	8005fc8 <xQueueGenericCreateStatic>
 8005b66:	61f8      	str	r0, [r7, #28]
 8005b68:	e008      	b.n	8005b7c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d105      	bne.n	8005b7c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005b70:	2200      	movs	r2, #0
 8005b72:	68b9      	ldr	r1, [r7, #8]
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 faa4 	bl	80060c2 <xQueueGenericCreate>
 8005b7a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00c      	beq.n	8005b9c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	e001      	b.n	8005b94 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005b94:	6979      	ldr	r1, [r7, #20]
 8005b96:	69f8      	ldr	r0, [r7, #28]
 8005b98:	f001 fa08 	bl	8006fac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005b9c:	69fb      	ldr	r3, [r7, #28]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc0:	f3ef 8305 	mrs	r3, IPSR
 8005bc4:	617b      	str	r3, [r7, #20]
  return(result);
 8005bc6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d028      	beq.n	8005c1e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <osMessageQueuePut+0x36>
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <osMessageQueuePut+0x36>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005bde:	f06f 0303 	mvn.w	r3, #3
 8005be2:	61fb      	str	r3, [r7, #28]
 8005be4:	e038      	b.n	8005c58 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005bea:	f107 0210 	add.w	r2, r7, #16
 8005bee:	2300      	movs	r3, #0
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	69b8      	ldr	r0, [r7, #24]
 8005bf4:	f000 fcec 	bl	80065d0 <xQueueGenericSendFromISR>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d003      	beq.n	8005c06 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005bfe:	f06f 0302 	mvn.w	r3, #2
 8005c02:	61fb      	str	r3, [r7, #28]
 8005c04:	e028      	b.n	8005c58 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d025      	beq.n	8005c58 <osMessageQueuePut+0xb0>
 8005c0c:	4b15      	ldr	r3, [pc, #84]	@ (8005c64 <osMessageQueuePut+0xbc>)
 8005c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	e01c      	b.n	8005c58 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <osMessageQueuePut+0x82>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005c2a:	f06f 0303 	mvn.w	r3, #3
 8005c2e:	61fb      	str	r3, [r7, #28]
 8005c30:	e012      	b.n	8005c58 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c32:	2300      	movs	r3, #0
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	69b8      	ldr	r0, [r7, #24]
 8005c3a:	f000 fbc7 	bl	80063cc <xQueueGenericSend>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d009      	beq.n	8005c58 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005c4a:	f06f 0301 	mvn.w	r3, #1
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	e002      	b.n	8005c58 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005c52:	f06f 0302 	mvn.w	r3, #2
 8005c56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c58:	69fb      	ldr	r3, [r7, #28]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3720      	adds	r7, #32
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c7e:	f3ef 8305 	mrs	r3, IPSR
 8005c82:	617b      	str	r3, [r7, #20]
  return(result);
 8005c84:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d028      	beq.n	8005cdc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <osMessageQueueGet+0x34>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <osMessageQueueGet+0x34>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005c9c:	f06f 0303 	mvn.w	r3, #3
 8005ca0:	61fb      	str	r3, [r7, #28]
 8005ca2:	e037      	b.n	8005d14 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005ca8:	f107 0310 	add.w	r3, r7, #16
 8005cac:	461a      	mov	r2, r3
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	69b8      	ldr	r0, [r7, #24]
 8005cb2:	f000 ffad 	bl	8006c10 <xQueueReceiveFromISR>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d003      	beq.n	8005cc4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005cbc:	f06f 0302 	mvn.w	r3, #2
 8005cc0:	61fb      	str	r3, [r7, #28]
 8005cc2:	e027      	b.n	8005d14 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d024      	beq.n	8005d14 <osMessageQueueGet+0xac>
 8005cca:	4b15      	ldr	r3, [pc, #84]	@ (8005d20 <osMessageQueueGet+0xb8>)
 8005ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	e01b      	b.n	8005d14 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <osMessageQueueGet+0x80>
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d103      	bne.n	8005cf0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005ce8:	f06f 0303 	mvn.w	r3, #3
 8005cec:	61fb      	str	r3, [r7, #28]
 8005cee:	e011      	b.n	8005d14 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	69b8      	ldr	r0, [r7, #24]
 8005cf6:	f000 fd99 	bl	800682c <xQueueReceive>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d009      	beq.n	8005d14 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005d06:	f06f 0301 	mvn.w	r3, #1
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e002      	b.n	8005d14 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005d0e:	f06f 0302 	mvn.w	r3, #2
 8005d12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d14:	69fb      	ldr	r3, [r7, #28]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	e000ed04 	.word	0xe000ed04

08005d24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4a07      	ldr	r2, [pc, #28]	@ (8005d50 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	4a06      	ldr	r2, [pc, #24]	@ (8005d54 <vApplicationGetIdleTaskMemory+0x30>)
 8005d3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2280      	movs	r2, #128	@ 0x80
 8005d40:	601a      	str	r2, [r3, #0]
}
 8005d42:	bf00      	nop
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	200007f8 	.word	0x200007f8
 8005d54:	20000854 	.word	0x20000854

08005d58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4a07      	ldr	r2, [pc, #28]	@ (8005d84 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4a06      	ldr	r2, [pc, #24]	@ (8005d88 <vApplicationGetTimerTaskMemory+0x30>)
 8005d6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d76:	601a      	str	r2, [r3, #0]
}
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	20000a54 	.word	0x20000a54
 8005d88:	20000ab0 	.word	0x20000ab0

08005d8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f103 0208 	add.w	r2, r3, #8
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f04f 32ff 	mov.w	r2, #4294967295
 8005da4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f103 0208 	add.w	r2, r3, #8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f103 0208 	add.w	r2, r3, #8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	601a      	str	r2, [r3, #0]
}
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b085      	sub	sp, #20
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e44:	d103      	bne.n	8005e4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	e00c      	b.n	8005e68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3308      	adds	r3, #8
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e002      	b.n	8005e5c <vListInsert+0x2e>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d2f6      	bcs.n	8005e56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	601a      	str	r2, [r3, #0]
}
 8005e94:	bf00      	nop
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6892      	ldr	r2, [r2, #8]
 8005eb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6852      	ldr	r2, [r2, #4]
 8005ec0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d103      	bne.n	8005ed4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	1e5a      	subs	r2, r3, #1
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10b      	bne.n	8005f20 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f1a:	bf00      	nop
 8005f1c:	bf00      	nop
 8005f1e:	e7fd      	b.n	8005f1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f20:	f002 fd72 	bl	8008a08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2c:	68f9      	ldr	r1, [r7, #12]
 8005f2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	441a      	add	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f50:	3b01      	subs	r3, #1
 8005f52:	68f9      	ldr	r1, [r7, #12]
 8005f54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f56:	fb01 f303 	mul.w	r3, r1, r3
 8005f5a:	441a      	add	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	22ff      	movs	r2, #255	@ 0xff
 8005f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	22ff      	movs	r2, #255	@ 0xff
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d114      	bne.n	8005fa0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d01a      	beq.n	8005fb4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3310      	adds	r3, #16
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 fd04 	bl	8007990 <xTaskRemoveFromEventList>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d012      	beq.n	8005fb4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc4 <xQueueGenericReset+0xd0>)
 8005f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	e009      	b.n	8005fb4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3310      	adds	r3, #16
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff fef1 	bl	8005d8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3324      	adds	r3, #36	@ 0x24
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff feec 	bl	8005d8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005fb4:	f002 fd5a 	bl	8008a6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005fb8:	2301      	movs	r3, #1
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	e000ed04 	.word	0xe000ed04

08005fc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08e      	sub	sp, #56	@ 0x38
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10b      	bne.n	8005ff4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fee:	bf00      	nop
 8005ff0:	bf00      	nop
 8005ff2:	e7fd      	b.n	8005ff0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10b      	bne.n	8006012 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <xQueueGenericCreateStatic+0x56>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <xQueueGenericCreateStatic+0x5a>
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <xQueueGenericCreateStatic+0x5c>
 8006022:	2300      	movs	r3, #0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	623b      	str	r3, [r7, #32]
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	e7fd      	b.n	800603c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d102      	bne.n	800604c <xQueueGenericCreateStatic+0x84>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <xQueueGenericCreateStatic+0x88>
 800604c:	2301      	movs	r3, #1
 800604e:	e000      	b.n	8006052 <xQueueGenericCreateStatic+0x8a>
 8006050:	2300      	movs	r3, #0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10b      	bne.n	800606e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	61fb      	str	r3, [r7, #28]
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	e7fd      	b.n	800606a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800606e:	2350      	movs	r3, #80	@ 0x50
 8006070:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b50      	cmp	r3, #80	@ 0x50
 8006076:	d00b      	beq.n	8006090 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	61bb      	str	r3, [r7, #24]
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	e7fd      	b.n	800608c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006090:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00d      	beq.n	80060b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800609c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80060a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4613      	mov	r3, r2
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 f840 	bl	8006138 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3730      	adds	r7, #48	@ 0x30
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b08a      	sub	sp, #40	@ 0x28
 80060c6:	af02      	add	r7, sp, #8
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	4613      	mov	r3, r2
 80060ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10b      	bne.n	80060ee <xQueueGenericCreate+0x2c>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	613b      	str	r3, [r7, #16]
}
 80060e8:	bf00      	nop
 80060ea:	bf00      	nop
 80060ec:	e7fd      	b.n	80060ea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	fb02 f303 	mul.w	r3, r2, r3
 80060f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	3350      	adds	r3, #80	@ 0x50
 80060fc:	4618      	mov	r0, r3
 80060fe:	f002 fda5 	bl	8008c4c <pvPortMalloc>
 8006102:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d011      	beq.n	800612e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	3350      	adds	r3, #80	@ 0x50
 8006112:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800611c:	79fa      	ldrb	r2, [r7, #7]
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	4613      	mov	r3, r2
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 f805 	bl	8006138 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800612e:	69bb      	ldr	r3, [r7, #24]
	}
 8006130:	4618      	mov	r0, r3
 8006132:	3720      	adds	r7, #32
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d103      	bne.n	8006154 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	e002      	b.n	800615a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006166:	2101      	movs	r1, #1
 8006168:	69b8      	ldr	r0, [r7, #24]
 800616a:	f7ff fec3 	bl	8005ef4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	78fa      	ldrb	r2, [r7, #3]
 8006172:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00e      	beq.n	80061aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800619e:	2300      	movs	r3, #0
 80061a0:	2200      	movs	r2, #0
 80061a2:	2100      	movs	r1, #0
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f911 	bl	80063cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b086      	sub	sp, #24
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	4603      	mov	r3, r0
 80061ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80061bc:	2301      	movs	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	2300      	movs	r3, #0
 80061c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80061c4:	79fb      	ldrb	r3, [r7, #7]
 80061c6:	461a      	mov	r2, r3
 80061c8:	6939      	ldr	r1, [r7, #16]
 80061ca:	6978      	ldr	r0, [r7, #20]
 80061cc:	f7ff ff79 	bl	80060c2 <xQueueGenericCreate>
 80061d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f7ff ffd3 	bl	800617e <prvInitialiseMutex>

		return xNewQueue;
 80061d8:	68fb      	ldr	r3, [r7, #12]
	}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b088      	sub	sp, #32
 80061e6:	af02      	add	r7, sp, #8
 80061e8:	4603      	mov	r3, r0
 80061ea:	6039      	str	r1, [r7, #0]
 80061ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80061ee:	2301      	movs	r3, #1
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2200      	movs	r2, #0
 80061fe:	6939      	ldr	r1, [r7, #16]
 8006200:	6978      	ldr	r0, [r7, #20]
 8006202:	f7ff fee1 	bl	8005fc8 <xQueueGenericCreateStatic>
 8006206:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7ff ffb8 	bl	800617e <prvInitialiseMutex>

		return xNewQueue;
 800620e:	68fb      	ldr	r3, [r7, #12]
	}
 8006210:	4618      	mov	r0, r3
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006218:	b590      	push	{r4, r7, lr}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10b      	bne.n	8006242 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	60fb      	str	r3, [r7, #12]
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	e7fd      	b.n	800623e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	689c      	ldr	r4, [r3, #8]
 8006246:	f001 fd63 	bl	8007d10 <xTaskGetCurrentTaskHandle>
 800624a:	4603      	mov	r3, r0
 800624c:	429c      	cmp	r4, r3
 800624e:	d111      	bne.n	8006274 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	1e5a      	subs	r2, r3, #1
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d105      	bne.n	800626e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006262:	2300      	movs	r3, #0
 8006264:	2200      	movs	r2, #0
 8006266:	2100      	movs	r1, #0
 8006268:	6938      	ldr	r0, [r7, #16]
 800626a:	f000 f8af 	bl	80063cc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800626e:	2301      	movs	r3, #1
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	e001      	b.n	8006278 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006278:	697b      	ldr	r3, [r7, #20]
	}
 800627a:	4618      	mov	r0, r3
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	bd90      	pop	{r4, r7, pc}

08006282 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006282:	b590      	push	{r4, r7, lr}
 8006284:	b087      	sub	sp, #28
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	60fb      	str	r3, [r7, #12]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	689c      	ldr	r4, [r3, #8]
 80062b2:	f001 fd2d 	bl	8007d10 <xTaskGetCurrentTaskHandle>
 80062b6:	4603      	mov	r3, r0
 80062b8:	429c      	cmp	r4, r3
 80062ba:	d107      	bne.n	80062cc <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80062c6:	2301      	movs	r3, #1
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e00c      	b.n	80062e6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	6938      	ldr	r0, [r7, #16]
 80062d0:	f000 fb8e 	bl	80069f0 <xQueueSemaphoreTake>
 80062d4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d004      	beq.n	80062e6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80062e6:	697b      	ldr	r3, [r7, #20]
	}
 80062e8:	4618      	mov	r0, r3
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd90      	pop	{r4, r7, pc}

080062f0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08a      	sub	sp, #40	@ 0x28
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10b      	bne.n	800631a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	61bb      	str	r3, [r7, #24]
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	e7fd      	b.n	8006316 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	429a      	cmp	r2, r3
 8006320:	d90b      	bls.n	800633a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	617b      	str	r3, [r7, #20]
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop
 8006338:	e7fd      	b.n	8006336 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800633a:	2302      	movs	r3, #2
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	2100      	movs	r1, #0
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f7ff fe3f 	bl	8005fc8 <xQueueGenericCreateStatic>
 800634a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006358:	69fb      	ldr	r3, [r7, #28]
	}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006362:	b580      	push	{r7, lr}
 8006364:	b086      	sub	sp, #24
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10b      	bne.n	800638a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	613b      	str	r3, [r7, #16]
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	e7fd      	b.n	8006386 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	429a      	cmp	r2, r3
 8006390:	d90b      	bls.n	80063aa <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	60fb      	str	r3, [r7, #12]
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80063aa:	2202      	movs	r2, #2
 80063ac:	2100      	movs	r1, #0
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff fe87 	bl	80060c2 <xQueueGenericCreate>
 80063b4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80063c2:	697b      	ldr	r3, [r7, #20]
	}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08e      	sub	sp, #56	@ 0x38
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063da:	2300      	movs	r3, #0
 80063dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10b      	bne.n	8006400 <xQueueGenericSend+0x34>
	__asm volatile
 80063e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063fa:	bf00      	nop
 80063fc:	bf00      	nop
 80063fe:	e7fd      	b.n	80063fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d103      	bne.n	800640e <xQueueGenericSend+0x42>
 8006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <xQueueGenericSend+0x46>
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <xQueueGenericSend+0x48>
 8006412:	2300      	movs	r3, #0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10b      	bne.n	8006430 <xQueueGenericSend+0x64>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800642a:	bf00      	nop
 800642c:	bf00      	nop
 800642e:	e7fd      	b.n	800642c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d103      	bne.n	800643e <xQueueGenericSend+0x72>
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643a:	2b01      	cmp	r3, #1
 800643c:	d101      	bne.n	8006442 <xQueueGenericSend+0x76>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <xQueueGenericSend+0x78>
 8006442:	2300      	movs	r3, #0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10b      	bne.n	8006460 <xQueueGenericSend+0x94>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	623b      	str	r3, [r7, #32]
}
 800645a:	bf00      	nop
 800645c:	bf00      	nop
 800645e:	e7fd      	b.n	800645c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006460:	f001 fc66 	bl	8007d30 <xTaskGetSchedulerState>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d102      	bne.n	8006470 <xQueueGenericSend+0xa4>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <xQueueGenericSend+0xa8>
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <xQueueGenericSend+0xaa>
 8006474:	2300      	movs	r3, #0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <xQueueGenericSend+0xc6>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	61fb      	str	r3, [r7, #28]
}
 800648c:	bf00      	nop
 800648e:	bf00      	nop
 8006490:	e7fd      	b.n	800648e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006492:	f002 fab9 	bl	8008a08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649e:	429a      	cmp	r2, r3
 80064a0:	d302      	bcc.n	80064a8 <xQueueGenericSend+0xdc>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d129      	bne.n	80064fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064ae:	f000 fc6d 	bl	8006d8c <prvCopyDataToQueue>
 80064b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d010      	beq.n	80064de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064be:	3324      	adds	r3, #36	@ 0x24
 80064c0:	4618      	mov	r0, r3
 80064c2:	f001 fa65 	bl	8007990 <xTaskRemoveFromEventList>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d013      	beq.n	80064f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064cc:	4b3f      	ldr	r3, [pc, #252]	@ (80065cc <xQueueGenericSend+0x200>)
 80064ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	e00a      	b.n	80064f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064e4:	4b39      	ldr	r3, [pc, #228]	@ (80065cc <xQueueGenericSend+0x200>)
 80064e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064f4:	f002 faba 	bl	8008a6c <vPortExitCritical>
				return pdPASS;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e063      	b.n	80065c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d103      	bne.n	800650a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006502:	f002 fab3 	bl	8008a6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006506:	2300      	movs	r3, #0
 8006508:	e05c      	b.n	80065c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800650a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006510:	f107 0314 	add.w	r3, r7, #20
 8006514:	4618      	mov	r0, r3
 8006516:	f001 fa9f 	bl	8007a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800651a:	2301      	movs	r3, #1
 800651c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800651e:	f002 faa5 	bl	8008a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006522:	f001 f80f 	bl	8007544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006526:	f002 fa6f 	bl	8008a08 <vPortEnterCritical>
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006530:	b25b      	sxtb	r3, r3
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	d103      	bne.n	8006540 <xQueueGenericSend+0x174>
 8006538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006542:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006546:	b25b      	sxtb	r3, r3
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654c:	d103      	bne.n	8006556 <xQueueGenericSend+0x18a>
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006556:	f002 fa89 	bl	8008a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800655a:	1d3a      	adds	r2, r7, #4
 800655c:	f107 0314 	add.w	r3, r7, #20
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f001 fa8e 	bl	8007a84 <xTaskCheckForTimeOut>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d124      	bne.n	80065b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800656e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006570:	f000 fd04 	bl	8006f7c <prvIsQueueFull>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d018      	beq.n	80065ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	3310      	adds	r3, #16
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	4611      	mov	r1, r2
 8006582:	4618      	mov	r0, r3
 8006584:	f001 f9b2 	bl	80078ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800658a:	f000 fc8f 	bl	8006eac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800658e:	f000 ffe7 	bl	8007560 <xTaskResumeAll>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	f47f af7c 	bne.w	8006492 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800659a:	4b0c      	ldr	r3, [pc, #48]	@ (80065cc <xQueueGenericSend+0x200>)
 800659c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	e772      	b.n	8006492 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065ae:	f000 fc7d 	bl	8006eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065b2:	f000 ffd5 	bl	8007560 <xTaskResumeAll>
 80065b6:	e76c      	b.n	8006492 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065ba:	f000 fc77 	bl	8006eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065be:	f000 ffcf 	bl	8007560 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3738      	adds	r7, #56	@ 0x38
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b090      	sub	sp, #64	@ 0x40
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80065e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10b      	bne.n	8006600 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	e7fd      	b.n	80065fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d103      	bne.n	800660e <xQueueGenericSendFromISR+0x3e>
 8006606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <xQueueGenericSendFromISR+0x42>
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <xQueueGenericSendFromISR+0x44>
 8006612:	2300      	movs	r3, #0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10b      	bne.n	8006630 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800662a:	bf00      	nop
 800662c:	bf00      	nop
 800662e:	e7fd      	b.n	800662c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d103      	bne.n	800663e <xQueueGenericSendFromISR+0x6e>
 8006636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <xQueueGenericSendFromISR+0x72>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <xQueueGenericSendFromISR+0x74>
 8006642:	2300      	movs	r3, #0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10b      	bne.n	8006660 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	623b      	str	r3, [r7, #32]
}
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	e7fd      	b.n	800665c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006660:	f002 fab2 	bl	8008bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006664:	f3ef 8211 	mrs	r2, BASEPRI
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	61fa      	str	r2, [r7, #28]
 800667a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800667c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006682:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006688:	429a      	cmp	r2, r3
 800668a:	d302      	bcc.n	8006692 <xQueueGenericSendFromISR+0xc2>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b02      	cmp	r3, #2
 8006690:	d12f      	bne.n	80066f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006694:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006698:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800669c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80066a8:	f000 fb70 	bl	8006d8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b4:	d112      	bne.n	80066dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d016      	beq.n	80066ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c0:	3324      	adds	r3, #36	@ 0x24
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 f964 	bl	8007990 <xTaskRemoveFromEventList>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00e      	beq.n	80066ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	e007      	b.n	80066ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80066e0:	3301      	adds	r3, #1
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	b25a      	sxtb	r2, r3
 80066e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80066ec:	2301      	movs	r3, #1
 80066ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80066f0:	e001      	b.n	80066f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006700:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006704:	4618      	mov	r0, r3
 8006706:	3740      	adds	r7, #64	@ 0x40
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08e      	sub	sp, #56	@ 0x38
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800671a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10b      	bne.n	8006738 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	623b      	str	r3, [r7, #32]
}
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	e7fd      	b.n	8006734 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00b      	beq.n	8006758 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	61fb      	str	r3, [r7, #28]
}
 8006752:	bf00      	nop
 8006754:	bf00      	nop
 8006756:	e7fd      	b.n	8006754 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d103      	bne.n	8006768 <xQueueGiveFromISR+0x5c>
 8006760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <xQueueGiveFromISR+0x60>
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <xQueueGiveFromISR+0x62>
 800676c:	2300      	movs	r3, #0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10b      	bne.n	800678a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	61bb      	str	r3, [r7, #24]
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	e7fd      	b.n	8006786 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800678a:	f002 fa1d 	bl	8008bc8 <vPortValidateInterruptPriority>
	__asm volatile
 800678e:	f3ef 8211 	mrs	r2, BASEPRI
 8006792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	617a      	str	r2, [r7, #20]
 80067a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80067a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80067b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d22b      	bcs.n	8006812 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d4:	d112      	bne.n	80067fc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d016      	beq.n	800680c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	3324      	adds	r3, #36	@ 0x24
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 f8d4 	bl	8007990 <xTaskRemoveFromEventList>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00e      	beq.n	800680c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2201      	movs	r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e007      	b.n	800680c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006800:	3301      	adds	r3, #1
 8006802:	b2db      	uxtb	r3, r3
 8006804:	b25a      	sxtb	r2, r3
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800680c:	2301      	movs	r3, #1
 800680e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006810:	e001      	b.n	8006816 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
 8006816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006818:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f383 8811 	msr	BASEPRI, r3
}
 8006820:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006824:	4618      	mov	r0, r3
 8006826:	3738      	adds	r7, #56	@ 0x38
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08c      	sub	sp, #48	@ 0x30
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10b      	bne.n	800685e <xQueueReceive+0x32>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	623b      	str	r3, [r7, #32]
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	e7fd      	b.n	800685a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d103      	bne.n	800686c <xQueueReceive+0x40>
 8006864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <xQueueReceive+0x44>
 800686c:	2301      	movs	r3, #1
 800686e:	e000      	b.n	8006872 <xQueueReceive+0x46>
 8006870:	2300      	movs	r3, #0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10b      	bne.n	800688e <xQueueReceive+0x62>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	61fb      	str	r3, [r7, #28]
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	e7fd      	b.n	800688a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800688e:	f001 fa4f 	bl	8007d30 <xTaskGetSchedulerState>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d102      	bne.n	800689e <xQueueReceive+0x72>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <xQueueReceive+0x76>
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <xQueueReceive+0x78>
 80068a2:	2300      	movs	r3, #0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10b      	bne.n	80068c0 <xQueueReceive+0x94>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	61bb      	str	r3, [r7, #24]
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	e7fd      	b.n	80068bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068c0:	f002 f8a2 	bl	8008a08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01f      	beq.n	8006910 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068d0:	68b9      	ldr	r1, [r7, #8]
 80068d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068d4:	f000 fac4 	bl	8006e60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	1e5a      	subs	r2, r3, #1
 80068dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00f      	beq.n	8006908 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ea:	3310      	adds	r3, #16
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 f84f 	bl	8007990 <xTaskRemoveFromEventList>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d007      	beq.n	8006908 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068f8:	4b3c      	ldr	r3, [pc, #240]	@ (80069ec <xQueueReceive+0x1c0>)
 80068fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006908:	f002 f8b0 	bl	8008a6c <vPortExitCritical>
				return pdPASS;
 800690c:	2301      	movs	r3, #1
 800690e:	e069      	b.n	80069e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d103      	bne.n	800691e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006916:	f002 f8a9 	bl	8008a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800691a:	2300      	movs	r3, #0
 800691c:	e062      	b.n	80069e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800691e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d106      	bne.n	8006932 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006924:	f107 0310 	add.w	r3, r7, #16
 8006928:	4618      	mov	r0, r3
 800692a:	f001 f895 	bl	8007a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800692e:	2301      	movs	r3, #1
 8006930:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006932:	f002 f89b 	bl	8008a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006936:	f000 fe05 	bl	8007544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800693a:	f002 f865 	bl	8008a08 <vPortEnterCritical>
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006944:	b25b      	sxtb	r3, r3
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694a:	d103      	bne.n	8006954 <xQueueReceive+0x128>
 800694c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006956:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800695a:	b25b      	sxtb	r3, r3
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d103      	bne.n	800696a <xQueueReceive+0x13e>
 8006962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800696a:	f002 f87f 	bl	8008a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800696e:	1d3a      	adds	r2, r7, #4
 8006970:	f107 0310 	add.w	r3, r7, #16
 8006974:	4611      	mov	r1, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f001 f884 	bl	8007a84 <xTaskCheckForTimeOut>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d123      	bne.n	80069ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006984:	f000 fae4 	bl	8006f50 <prvIsQueueEmpty>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d017      	beq.n	80069be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006990:	3324      	adds	r3, #36	@ 0x24
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	4611      	mov	r1, r2
 8006996:	4618      	mov	r0, r3
 8006998:	f000 ffa8 	bl	80078ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800699c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800699e:	f000 fa85 	bl	8006eac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069a2:	f000 fddd 	bl	8007560 <xTaskResumeAll>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d189      	bne.n	80068c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80069ac:	4b0f      	ldr	r3, [pc, #60]	@ (80069ec <xQueueReceive+0x1c0>)
 80069ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	e780      	b.n	80068c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069c0:	f000 fa74 	bl	8006eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069c4:	f000 fdcc 	bl	8007560 <xTaskResumeAll>
 80069c8:	e77a      	b.n	80068c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069cc:	f000 fa6e 	bl	8006eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069d0:	f000 fdc6 	bl	8007560 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069d6:	f000 fabb 	bl	8006f50 <prvIsQueueEmpty>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f43f af6f 	beq.w	80068c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3730      	adds	r7, #48	@ 0x30
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	e000ed04 	.word	0xe000ed04

080069f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08e      	sub	sp, #56	@ 0x38
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006a02:	2300      	movs	r3, #0
 8006a04:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10b      	bne.n	8006a24 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	623b      	str	r3, [r7, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	bf00      	nop
 8006a22:	e7fd      	b.n	8006a20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00b      	beq.n	8006a44 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	61fb      	str	r3, [r7, #28]
}
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
 8006a42:	e7fd      	b.n	8006a40 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a44:	f001 f974 	bl	8007d30 <xTaskGetSchedulerState>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <xQueueSemaphoreTake+0x64>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <xQueueSemaphoreTake+0x68>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e000      	b.n	8006a5a <xQueueSemaphoreTake+0x6a>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10b      	bne.n	8006a76 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	61bb      	str	r3, [r7, #24]
}
 8006a70:	bf00      	nop
 8006a72:	bf00      	nop
 8006a74:	e7fd      	b.n	8006a72 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a76:	f001 ffc7 	bl	8008a08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d024      	beq.n	8006ad0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a88:	1e5a      	subs	r2, r3, #1
 8006a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d104      	bne.n	8006aa0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a96:	f001 fac5 	bl	8008024 <pvTaskIncrementMutexHeldCount>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00f      	beq.n	8006ac8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aaa:	3310      	adds	r3, #16
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 ff6f 	bl	8007990 <xTaskRemoveFromEventList>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ab8:	4b54      	ldr	r3, [pc, #336]	@ (8006c0c <xQueueSemaphoreTake+0x21c>)
 8006aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ac8:	f001 ffd0 	bl	8008a6c <vPortExitCritical>
				return pdPASS;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e098      	b.n	8006c02 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d112      	bne.n	8006afc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00b      	beq.n	8006af4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	617b      	str	r3, [r7, #20]
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	e7fd      	b.n	8006af0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006af4:	f001 ffba 	bl	8008a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e082      	b.n	8006c02 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b02:	f107 030c 	add.w	r3, r7, #12
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 ffa6 	bl	8007a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b10:	f001 ffac 	bl	8008a6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b14:	f000 fd16 	bl	8007544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b18:	f001 ff76 	bl	8008a08 <vPortEnterCritical>
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b22:	b25b      	sxtb	r3, r3
 8006b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b28:	d103      	bne.n	8006b32 <xQueueSemaphoreTake+0x142>
 8006b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b38:	b25b      	sxtb	r3, r3
 8006b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3e:	d103      	bne.n	8006b48 <xQueueSemaphoreTake+0x158>
 8006b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b48:	f001 ff90 	bl	8008a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b4c:	463a      	mov	r2, r7
 8006b4e:	f107 030c 	add.w	r3, r7, #12
 8006b52:	4611      	mov	r1, r2
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 ff95 	bl	8007a84 <xTaskCheckForTimeOut>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d132      	bne.n	8006bc6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b62:	f000 f9f5 	bl	8006f50 <prvIsQueueEmpty>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d026      	beq.n	8006bba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006b74:	f001 ff48 	bl	8008a08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 f8f5 	bl	8007d6c <xTaskPriorityInherit>
 8006b82:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006b84:	f001 ff72 	bl	8008a6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8a:	3324      	adds	r3, #36	@ 0x24
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 feab 	bl	80078ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b98:	f000 f988 	bl	8006eac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b9c:	f000 fce0 	bl	8007560 <xTaskResumeAll>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f47f af67 	bne.w	8006a76 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006ba8:	4b18      	ldr	r3, [pc, #96]	@ (8006c0c <xQueueSemaphoreTake+0x21c>)
 8006baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	e75d      	b.n	8006a76 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006bba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bbc:	f000 f976 	bl	8006eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bc0:	f000 fcce 	bl	8007560 <xTaskResumeAll>
 8006bc4:	e757      	b.n	8006a76 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006bc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bc8:	f000 f970 	bl	8006eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bcc:	f000 fcc8 	bl	8007560 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bd2:	f000 f9bd 	bl	8006f50 <prvIsQueueEmpty>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f43f af4c 	beq.w	8006a76 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00d      	beq.n	8006c00 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006be4:	f001 ff10 	bl	8008a08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006be8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bea:	f000 f8b7 	bl	8006d5c <prvGetDisinheritPriorityAfterTimeout>
 8006bee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f001 f990 	bl	8007f1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006bfc:	f001 ff36 	bl	8008a6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3738      	adds	r7, #56	@ 0x38
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	e000ed04 	.word	0xe000ed04

08006c10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08e      	sub	sp, #56	@ 0x38
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10b      	bne.n	8006c3e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	623b      	str	r3, [r7, #32]
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	e7fd      	b.n	8006c3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d103      	bne.n	8006c4c <xQueueReceiveFromISR+0x3c>
 8006c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <xQueueReceiveFromISR+0x40>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e000      	b.n	8006c52 <xQueueReceiveFromISR+0x42>
 8006c50:	2300      	movs	r3, #0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10b      	bne.n	8006c6e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	61fb      	str	r3, [r7, #28]
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	e7fd      	b.n	8006c6a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c6e:	f001 ffab 	bl	8008bc8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c72:	f3ef 8211 	mrs	r2, BASEPRI
 8006c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	61ba      	str	r2, [r7, #24]
 8006c88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c92:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d02f      	beq.n	8006cfa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ca8:	f000 f8da 	bl	8006e60 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cae:	1e5a      	subs	r2, r3, #1
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006cb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbc:	d112      	bne.n	8006ce4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d016      	beq.n	8006cf4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc8:	3310      	adds	r3, #16
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 fe60 	bl	8007990 <xTaskRemoveFromEventList>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00e      	beq.n	8006cf4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00b      	beq.n	8006cf4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	e007      	b.n	8006cf4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ce8:	3301      	adds	r3, #1
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	b25a      	sxtb	r2, r3
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf8:	e001      	b.n	8006cfe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f383 8811 	msr	BASEPRI, r3
}
 8006d08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3738      	adds	r7, #56	@ 0x38
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10b      	bne.n	8006d3e <vQueueDelete+0x2a>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	60bb      	str	r3, [r7, #8]
}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	e7fd      	b.n	8006d3a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f95e 	bl	8007000 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d102      	bne.n	8006d54 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f002 f84a 	bl	8008de8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d006      	beq.n	8006d7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e001      	b.n	8006d7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
	}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10d      	bne.n	8006dc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d14d      	bne.n	8006e4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 f840 	bl	8007e3c <xTaskPriorityDisinherit>
 8006dbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	609a      	str	r2, [r3, #8]
 8006dc4:	e043      	b.n	8006e4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d119      	bne.n	8006e00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6858      	ldr	r0, [r3, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	f002 f952 	bl	8009080 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de4:	441a      	add	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d32b      	bcc.n	8006e4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	605a      	str	r2, [r3, #4]
 8006dfe:	e026      	b.n	8006e4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	68d8      	ldr	r0, [r3, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e08:	461a      	mov	r2, r3
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	f002 f938 	bl	8009080 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e18:	425b      	negs	r3, r3
 8006e1a:	441a      	add	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d207      	bcs.n	8006e3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	425b      	negs	r3, r3
 8006e36:	441a      	add	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d105      	bne.n	8006e4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006e56:	697b      	ldr	r3, [r7, #20]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d018      	beq.n	8006ea4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7a:	441a      	add	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68da      	ldr	r2, [r3, #12]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d303      	bcc.n	8006e94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68d9      	ldr	r1, [r3, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6838      	ldr	r0, [r7, #0]
 8006ea0:	f002 f8ee 	bl	8009080 <memcpy>
	}
}
 8006ea4:	bf00      	nop
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006eb4:	f001 fda8 	bl	8008a08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ebe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ec0:	e011      	b.n	8006ee6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d012      	beq.n	8006ef0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3324      	adds	r3, #36	@ 0x24
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fd5e 	bl	8007990 <xTaskRemoveFromEventList>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006eda:	f000 fe37 	bl	8007b4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	dce9      	bgt.n	8006ec2 <prvUnlockQueue+0x16>
 8006eee:	e000      	b.n	8006ef2 <prvUnlockQueue+0x46>
					break;
 8006ef0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	22ff      	movs	r2, #255	@ 0xff
 8006ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006efa:	f001 fdb7 	bl	8008a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006efe:	f001 fd83 	bl	8008a08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f0a:	e011      	b.n	8006f30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d012      	beq.n	8006f3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3310      	adds	r3, #16
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fd39 	bl	8007990 <xTaskRemoveFromEventList>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f24:	f000 fe12 	bl	8007b4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f28:	7bbb      	ldrb	r3, [r7, #14]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	dce9      	bgt.n	8006f0c <prvUnlockQueue+0x60>
 8006f38:	e000      	b.n	8006f3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	22ff      	movs	r2, #255	@ 0xff
 8006f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006f44:	f001 fd92 	bl	8008a6c <vPortExitCritical>
}
 8006f48:	bf00      	nop
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f58:	f001 fd56 	bl	8008a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d102      	bne.n	8006f6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f64:	2301      	movs	r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	e001      	b.n	8006f6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f6e:	f001 fd7d 	bl	8008a6c <vPortExitCritical>

	return xReturn;
 8006f72:	68fb      	ldr	r3, [r7, #12]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f84:	f001 fd40 	bl	8008a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d102      	bne.n	8006f9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f94:	2301      	movs	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	e001      	b.n	8006f9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f9e:	f001 fd65 	bl	8008a6c <vPortExitCritical>

	return xReturn;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	e014      	b.n	8006fe6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8006ffc <vQueueAddToRegistry+0x50>)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10b      	bne.n	8006fe0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fc8:	490c      	ldr	r1, [pc, #48]	@ (8006ffc <vQueueAddToRegistry+0x50>)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8006ffc <vQueueAddToRegistry+0x50>)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4413      	add	r3, r2
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006fde:	e006      	b.n	8006fee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b07      	cmp	r3, #7
 8006fea:	d9e7      	bls.n	8006fbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000eb0 	.word	0x20000eb0

08007000 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e016      	b.n	800703c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800700e:	4a10      	ldr	r2, [pc, #64]	@ (8007050 <vQueueUnregisterQueue+0x50>)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	4413      	add	r3, r2
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	429a      	cmp	r2, r3
 800701c:	d10b      	bne.n	8007036 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800701e:	4a0c      	ldr	r2, [pc, #48]	@ (8007050 <vQueueUnregisterQueue+0x50>)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2100      	movs	r1, #0
 8007024:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007028:	4a09      	ldr	r2, [pc, #36]	@ (8007050 <vQueueUnregisterQueue+0x50>)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	4413      	add	r3, r2
 8007030:	2200      	movs	r2, #0
 8007032:	605a      	str	r2, [r3, #4]
				break;
 8007034:	e006      	b.n	8007044 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3301      	adds	r3, #1
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2b07      	cmp	r3, #7
 8007040:	d9e5      	bls.n	800700e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	20000eb0 	.word	0x20000eb0

08007054 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007064:	f001 fcd0 	bl	8008a08 <vPortEnterCritical>
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800706e:	b25b      	sxtb	r3, r3
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007074:	d103      	bne.n	800707e <vQueueWaitForMessageRestricted+0x2a>
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007084:	b25b      	sxtb	r3, r3
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708a:	d103      	bne.n	8007094 <vQueueWaitForMessageRestricted+0x40>
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007094:	f001 fcea 	bl	8008a6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	d106      	bne.n	80070ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	3324      	adds	r3, #36	@ 0x24
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	68b9      	ldr	r1, [r7, #8]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fc45 	bl	8007938 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070ae:	6978      	ldr	r0, [r7, #20]
 80070b0:	f7ff fefc 	bl	8006eac <prvUnlockQueue>
	}
 80070b4:	bf00      	nop
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08e      	sub	sp, #56	@ 0x38
 80070c0:	af04      	add	r7, sp, #16
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	623b      	str	r3, [r7, #32]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10b      	bne.n	8007106 <xTaskCreateStatic+0x4a>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	61fb      	str	r3, [r7, #28]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007106:	235c      	movs	r3, #92	@ 0x5c
 8007108:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b5c      	cmp	r3, #92	@ 0x5c
 800710e:	d00b      	beq.n	8007128 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	61bb      	str	r3, [r7, #24]
}
 8007122:	bf00      	nop
 8007124:	bf00      	nop
 8007126:	e7fd      	b.n	8007124 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007128:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800712a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01e      	beq.n	800716e <xTaskCreateStatic+0xb2>
 8007130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007132:	2b00      	cmp	r3, #0
 8007134:	d01b      	beq.n	800716e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800713e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	2202      	movs	r2, #2
 8007144:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007148:	2300      	movs	r3, #0
 800714a:	9303      	str	r3, [sp, #12]
 800714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714e:	9302      	str	r3, [sp, #8]
 8007150:	f107 0314 	add.w	r3, r7, #20
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	68b9      	ldr	r1, [r7, #8]
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 f850 	bl	8007206 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007166:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007168:	f000 f8de 	bl	8007328 <prvAddNewTaskToReadyList>
 800716c:	e001      	b.n	8007172 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007172:	697b      	ldr	r3, [r7, #20]
	}
 8007174:	4618      	mov	r0, r3
 8007176:	3728      	adds	r7, #40	@ 0x28
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08c      	sub	sp, #48	@ 0x30
 8007180:	af04      	add	r7, sp, #16
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	4613      	mov	r3, r2
 800718a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800718c:	88fb      	ldrh	r3, [r7, #6]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4618      	mov	r0, r3
 8007192:	f001 fd5b 	bl	8008c4c <pvPortMalloc>
 8007196:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00e      	beq.n	80071bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800719e:	205c      	movs	r0, #92	@ 0x5c
 80071a0:	f001 fd54 	bl	8008c4c <pvPortMalloc>
 80071a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80071b2:	e005      	b.n	80071c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071b4:	6978      	ldr	r0, [r7, #20]
 80071b6:	f001 fe17 	bl	8008de8 <vPortFree>
 80071ba:	e001      	b.n	80071c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d017      	beq.n	80071f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071ce:	88fa      	ldrh	r2, [r7, #6]
 80071d0:	2300      	movs	r3, #0
 80071d2:	9303      	str	r3, [sp, #12]
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	9302      	str	r3, [sp, #8]
 80071d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 f80e 	bl	8007206 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071ea:	69f8      	ldr	r0, [r7, #28]
 80071ec:	f000 f89c 	bl	8007328 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071f0:	2301      	movs	r3, #1
 80071f2:	61bb      	str	r3, [r7, #24]
 80071f4:	e002      	b.n	80071fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071f6:	f04f 33ff 	mov.w	r3, #4294967295
 80071fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071fc:	69bb      	ldr	r3, [r7, #24]
	}
 80071fe:	4618      	mov	r0, r3
 8007200:	3720      	adds	r7, #32
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b088      	sub	sp, #32
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007216:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	461a      	mov	r2, r3
 800721e:	21a5      	movs	r1, #165	@ 0xa5
 8007220:	f001 ff02 	bl	8009028 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800722e:	3b01      	subs	r3, #1
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	f023 0307 	bic.w	r3, r3, #7
 800723c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	f003 0307 	and.w	r3, r3, #7
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00b      	beq.n	8007260 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	617b      	str	r3, [r7, #20]
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	e7fd      	b.n	800725c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d01f      	beq.n	80072a6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007266:	2300      	movs	r3, #0
 8007268:	61fb      	str	r3, [r7, #28]
 800726a:	e012      	b.n	8007292 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	7819      	ldrb	r1, [r3, #0]
 8007274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	4413      	add	r3, r2
 800727a:	3334      	adds	r3, #52	@ 0x34
 800727c:	460a      	mov	r2, r1
 800727e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d006      	beq.n	800729a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	3301      	adds	r3, #1
 8007290:	61fb      	str	r3, [r7, #28]
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	2b0f      	cmp	r3, #15
 8007296:	d9e9      	bls.n	800726c <prvInitialiseNewTask+0x66>
 8007298:	e000      	b.n	800729c <prvInitialiseNewTask+0x96>
			{
				break;
 800729a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800729c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072a4:	e003      	b.n	80072ae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b0:	2b37      	cmp	r3, #55	@ 0x37
 80072b2:	d901      	bls.n	80072b8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072b4:	2337      	movs	r3, #55	@ 0x37
 80072b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072c2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	2200      	movs	r2, #0
 80072c8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	3304      	adds	r3, #4
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe fd7c 	bl	8005dcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d6:	3318      	adds	r3, #24
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fe fd77 	bl	8005dcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	2200      	movs	r2, #0
 80072f8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	68f9      	ldr	r1, [r7, #12]
 8007306:	69b8      	ldr	r0, [r7, #24]
 8007308:	f001 fa4e 	bl	80087a8 <pxPortInitialiseStack>
 800730c:	4602      	mov	r2, r0
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800731c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800731e:	bf00      	nop
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007330:	f001 fb6a 	bl	8008a08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007334:	4b2d      	ldr	r3, [pc, #180]	@ (80073ec <prvAddNewTaskToReadyList+0xc4>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3301      	adds	r3, #1
 800733a:	4a2c      	ldr	r2, [pc, #176]	@ (80073ec <prvAddNewTaskToReadyList+0xc4>)
 800733c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800733e:	4b2c      	ldr	r3, [pc, #176]	@ (80073f0 <prvAddNewTaskToReadyList+0xc8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d109      	bne.n	800735a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007346:	4a2a      	ldr	r2, [pc, #168]	@ (80073f0 <prvAddNewTaskToReadyList+0xc8>)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800734c:	4b27      	ldr	r3, [pc, #156]	@ (80073ec <prvAddNewTaskToReadyList+0xc4>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d110      	bne.n	8007376 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007354:	f000 fc1e 	bl	8007b94 <prvInitialiseTaskLists>
 8007358:	e00d      	b.n	8007376 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800735a:	4b26      	ldr	r3, [pc, #152]	@ (80073f4 <prvAddNewTaskToReadyList+0xcc>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d109      	bne.n	8007376 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007362:	4b23      	ldr	r3, [pc, #140]	@ (80073f0 <prvAddNewTaskToReadyList+0xc8>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736c:	429a      	cmp	r2, r3
 800736e:	d802      	bhi.n	8007376 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007370:	4a1f      	ldr	r2, [pc, #124]	@ (80073f0 <prvAddNewTaskToReadyList+0xc8>)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007376:	4b20      	ldr	r3, [pc, #128]	@ (80073f8 <prvAddNewTaskToReadyList+0xd0>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3301      	adds	r3, #1
 800737c:	4a1e      	ldr	r2, [pc, #120]	@ (80073f8 <prvAddNewTaskToReadyList+0xd0>)
 800737e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007380:	4b1d      	ldr	r3, [pc, #116]	@ (80073f8 <prvAddNewTaskToReadyList+0xd0>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800738c:	4b1b      	ldr	r3, [pc, #108]	@ (80073fc <prvAddNewTaskToReadyList+0xd4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	429a      	cmp	r2, r3
 8007392:	d903      	bls.n	800739c <prvAddNewTaskToReadyList+0x74>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007398:	4a18      	ldr	r2, [pc, #96]	@ (80073fc <prvAddNewTaskToReadyList+0xd4>)
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4a15      	ldr	r2, [pc, #84]	@ (8007400 <prvAddNewTaskToReadyList+0xd8>)
 80073aa:	441a      	add	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3304      	adds	r3, #4
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f7fe fd17 	bl	8005de6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073b8:	f001 fb58 	bl	8008a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073bc:	4b0d      	ldr	r3, [pc, #52]	@ (80073f4 <prvAddNewTaskToReadyList+0xcc>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00e      	beq.n	80073e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073c4:	4b0a      	ldr	r3, [pc, #40]	@ (80073f0 <prvAddNewTaskToReadyList+0xc8>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d207      	bcs.n	80073e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007404 <prvAddNewTaskToReadyList+0xdc>)
 80073d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073e2:	bf00      	nop
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	200013c4 	.word	0x200013c4
 80073f0:	20000ef0 	.word	0x20000ef0
 80073f4:	200013d0 	.word	0x200013d0
 80073f8:	200013e0 	.word	0x200013e0
 80073fc:	200013cc 	.word	0x200013cc
 8007400:	20000ef4 	.word	0x20000ef4
 8007404:	e000ed04 	.word	0xe000ed04

08007408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007410:	2300      	movs	r3, #0
 8007412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d018      	beq.n	800744c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800741a:	4b14      	ldr	r3, [pc, #80]	@ (800746c <vTaskDelay+0x64>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <vTaskDelay+0x32>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	60bb      	str	r3, [r7, #8]
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop
 8007438:	e7fd      	b.n	8007436 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800743a:	f000 f883 	bl	8007544 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800743e:	2100      	movs	r1, #0
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fe03 	bl	800804c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007446:	f000 f88b 	bl	8007560 <xTaskResumeAll>
 800744a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d107      	bne.n	8007462 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007452:	4b07      	ldr	r3, [pc, #28]	@ (8007470 <vTaskDelay+0x68>)
 8007454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007462:	bf00      	nop
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	200013ec 	.word	0x200013ec
 8007470:	e000ed04 	.word	0xe000ed04

08007474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08a      	sub	sp, #40	@ 0x28
 8007478:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800747e:	2300      	movs	r3, #0
 8007480:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007482:	463a      	mov	r2, r7
 8007484:	1d39      	adds	r1, r7, #4
 8007486:	f107 0308 	add.w	r3, r7, #8
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe fc4a 	bl	8005d24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	9202      	str	r2, [sp, #8]
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	2300      	movs	r3, #0
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	2300      	movs	r3, #0
 80074a0:	460a      	mov	r2, r1
 80074a2:	4922      	ldr	r1, [pc, #136]	@ (800752c <vTaskStartScheduler+0xb8>)
 80074a4:	4822      	ldr	r0, [pc, #136]	@ (8007530 <vTaskStartScheduler+0xbc>)
 80074a6:	f7ff fe09 	bl	80070bc <xTaskCreateStatic>
 80074aa:	4603      	mov	r3, r0
 80074ac:	4a21      	ldr	r2, [pc, #132]	@ (8007534 <vTaskStartScheduler+0xc0>)
 80074ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074b0:	4b20      	ldr	r3, [pc, #128]	@ (8007534 <vTaskStartScheduler+0xc0>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074b8:	2301      	movs	r3, #1
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	e001      	b.n	80074c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d102      	bne.n	80074ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074c8:	f000 fe14 	bl	80080f4 <xTimerCreateTimerTask>
 80074cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d116      	bne.n	8007502 <vTaskStartScheduler+0x8e>
	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	613b      	str	r3, [r7, #16]
}
 80074e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074e8:	4b13      	ldr	r3, [pc, #76]	@ (8007538 <vTaskStartScheduler+0xc4>)
 80074ea:	f04f 32ff 	mov.w	r2, #4294967295
 80074ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074f0:	4b12      	ldr	r3, [pc, #72]	@ (800753c <vTaskStartScheduler+0xc8>)
 80074f2:	2201      	movs	r2, #1
 80074f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074f6:	4b12      	ldr	r3, [pc, #72]	@ (8007540 <vTaskStartScheduler+0xcc>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074fc:	f001 f9e0 	bl	80088c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007500:	e00f      	b.n	8007522 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007508:	d10b      	bne.n	8007522 <vTaskStartScheduler+0xae>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	60fb      	str	r3, [r7, #12]
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	e7fd      	b.n	800751e <vTaskStartScheduler+0xaa>
}
 8007522:	bf00      	nop
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	0800913c 	.word	0x0800913c
 8007530:	08007b65 	.word	0x08007b65
 8007534:	200013e8 	.word	0x200013e8
 8007538:	200013e4 	.word	0x200013e4
 800753c:	200013d0 	.word	0x200013d0
 8007540:	200013c8 	.word	0x200013c8

08007544 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007548:	4b04      	ldr	r3, [pc, #16]	@ (800755c <vTaskSuspendAll+0x18>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3301      	adds	r3, #1
 800754e:	4a03      	ldr	r2, [pc, #12]	@ (800755c <vTaskSuspendAll+0x18>)
 8007550:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007552:	bf00      	nop
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	200013ec 	.word	0x200013ec

08007560 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800756a:	2300      	movs	r3, #0
 800756c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800756e:	4b42      	ldr	r3, [pc, #264]	@ (8007678 <xTaskResumeAll+0x118>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10b      	bne.n	800758e <xTaskResumeAll+0x2e>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	603b      	str	r3, [r7, #0]
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	e7fd      	b.n	800758a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800758e:	f001 fa3b 	bl	8008a08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007592:	4b39      	ldr	r3, [pc, #228]	@ (8007678 <xTaskResumeAll+0x118>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3b01      	subs	r3, #1
 8007598:	4a37      	ldr	r2, [pc, #220]	@ (8007678 <xTaskResumeAll+0x118>)
 800759a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800759c:	4b36      	ldr	r3, [pc, #216]	@ (8007678 <xTaskResumeAll+0x118>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d162      	bne.n	800766a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075a4:	4b35      	ldr	r3, [pc, #212]	@ (800767c <xTaskResumeAll+0x11c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d05e      	beq.n	800766a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075ac:	e02f      	b.n	800760e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ae:	4b34      	ldr	r3, [pc, #208]	@ (8007680 <xTaskResumeAll+0x120>)
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3318      	adds	r3, #24
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fc70 	bl	8005ea0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fe fc6b 	bl	8005ea0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ce:	4b2d      	ldr	r3, [pc, #180]	@ (8007684 <xTaskResumeAll+0x124>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d903      	bls.n	80075de <xTaskResumeAll+0x7e>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075da:	4a2a      	ldr	r2, [pc, #168]	@ (8007684 <xTaskResumeAll+0x124>)
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e2:	4613      	mov	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4a27      	ldr	r2, [pc, #156]	@ (8007688 <xTaskResumeAll+0x128>)
 80075ec:	441a      	add	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3304      	adds	r3, #4
 80075f2:	4619      	mov	r1, r3
 80075f4:	4610      	mov	r0, r2
 80075f6:	f7fe fbf6 	bl	8005de6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075fe:	4b23      	ldr	r3, [pc, #140]	@ (800768c <xTaskResumeAll+0x12c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007604:	429a      	cmp	r2, r3
 8007606:	d302      	bcc.n	800760e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007608:	4b21      	ldr	r3, [pc, #132]	@ (8007690 <xTaskResumeAll+0x130>)
 800760a:	2201      	movs	r2, #1
 800760c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800760e:	4b1c      	ldr	r3, [pc, #112]	@ (8007680 <xTaskResumeAll+0x120>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1cb      	bne.n	80075ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800761c:	f000 fb58 	bl	8007cd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007620:	4b1c      	ldr	r3, [pc, #112]	@ (8007694 <xTaskResumeAll+0x134>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d010      	beq.n	800764e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800762c:	f000 f846 	bl	80076bc <xTaskIncrementTick>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007636:	4b16      	ldr	r3, [pc, #88]	@ (8007690 <xTaskResumeAll+0x130>)
 8007638:	2201      	movs	r2, #1
 800763a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3b01      	subs	r3, #1
 8007640:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1f1      	bne.n	800762c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007648:	4b12      	ldr	r3, [pc, #72]	@ (8007694 <xTaskResumeAll+0x134>)
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800764e:	4b10      	ldr	r3, [pc, #64]	@ (8007690 <xTaskResumeAll+0x130>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d009      	beq.n	800766a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007656:	2301      	movs	r3, #1
 8007658:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800765a:	4b0f      	ldr	r3, [pc, #60]	@ (8007698 <xTaskResumeAll+0x138>)
 800765c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800766a:	f001 f9ff 	bl	8008a6c <vPortExitCritical>

	return xAlreadyYielded;
 800766e:	68bb      	ldr	r3, [r7, #8]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	200013ec 	.word	0x200013ec
 800767c:	200013c4 	.word	0x200013c4
 8007680:	20001384 	.word	0x20001384
 8007684:	200013cc 	.word	0x200013cc
 8007688:	20000ef4 	.word	0x20000ef4
 800768c:	20000ef0 	.word	0x20000ef0
 8007690:	200013d8 	.word	0x200013d8
 8007694:	200013d4 	.word	0x200013d4
 8007698:	e000ed04 	.word	0xe000ed04

0800769c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076a2:	4b05      	ldr	r3, [pc, #20]	@ (80076b8 <xTaskGetTickCount+0x1c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076a8:	687b      	ldr	r3, [r7, #4]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	200013c8 	.word	0x200013c8

080076bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076c2:	2300      	movs	r3, #0
 80076c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c6:	4b4f      	ldr	r3, [pc, #316]	@ (8007804 <xTaskIncrementTick+0x148>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f040 8090 	bne.w	80077f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076d0:	4b4d      	ldr	r3, [pc, #308]	@ (8007808 <xTaskIncrementTick+0x14c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3301      	adds	r3, #1
 80076d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076d8:	4a4b      	ldr	r2, [pc, #300]	@ (8007808 <xTaskIncrementTick+0x14c>)
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d121      	bne.n	8007728 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80076e4:	4b49      	ldr	r3, [pc, #292]	@ (800780c <xTaskIncrementTick+0x150>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00b      	beq.n	8007706 <xTaskIncrementTick+0x4a>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	603b      	str	r3, [r7, #0]
}
 8007700:	bf00      	nop
 8007702:	bf00      	nop
 8007704:	e7fd      	b.n	8007702 <xTaskIncrementTick+0x46>
 8007706:	4b41      	ldr	r3, [pc, #260]	@ (800780c <xTaskIncrementTick+0x150>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	4b40      	ldr	r3, [pc, #256]	@ (8007810 <xTaskIncrementTick+0x154>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a3e      	ldr	r2, [pc, #248]	@ (800780c <xTaskIncrementTick+0x150>)
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	4a3e      	ldr	r2, [pc, #248]	@ (8007810 <xTaskIncrementTick+0x154>)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	4b3e      	ldr	r3, [pc, #248]	@ (8007814 <xTaskIncrementTick+0x158>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3301      	adds	r3, #1
 8007720:	4a3c      	ldr	r2, [pc, #240]	@ (8007814 <xTaskIncrementTick+0x158>)
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	f000 fad4 	bl	8007cd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007728:	4b3b      	ldr	r3, [pc, #236]	@ (8007818 <xTaskIncrementTick+0x15c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	429a      	cmp	r2, r3
 8007730:	d349      	bcc.n	80077c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007732:	4b36      	ldr	r3, [pc, #216]	@ (800780c <xTaskIncrementTick+0x150>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d104      	bne.n	8007746 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800773c:	4b36      	ldr	r3, [pc, #216]	@ (8007818 <xTaskIncrementTick+0x15c>)
 800773e:	f04f 32ff 	mov.w	r2, #4294967295
 8007742:	601a      	str	r2, [r3, #0]
					break;
 8007744:	e03f      	b.n	80077c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007746:	4b31      	ldr	r3, [pc, #196]	@ (800780c <xTaskIncrementTick+0x150>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	429a      	cmp	r2, r3
 800775c:	d203      	bcs.n	8007766 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800775e:	4a2e      	ldr	r2, [pc, #184]	@ (8007818 <xTaskIncrementTick+0x15c>)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007764:	e02f      	b.n	80077c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	3304      	adds	r3, #4
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe fb98 	bl	8005ea0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007774:	2b00      	cmp	r3, #0
 8007776:	d004      	beq.n	8007782 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	3318      	adds	r3, #24
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe fb8f 	bl	8005ea0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007786:	4b25      	ldr	r3, [pc, #148]	@ (800781c <xTaskIncrementTick+0x160>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d903      	bls.n	8007796 <xTaskIncrementTick+0xda>
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007792:	4a22      	ldr	r2, [pc, #136]	@ (800781c <xTaskIncrementTick+0x160>)
 8007794:	6013      	str	r3, [r2, #0]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007820 <xTaskIncrementTick+0x164>)
 80077a4:	441a      	add	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	3304      	adds	r3, #4
 80077aa:	4619      	mov	r1, r3
 80077ac:	4610      	mov	r0, r2
 80077ae:	f7fe fb1a 	bl	8005de6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007824 <xTaskIncrementTick+0x168>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077bc:	429a      	cmp	r2, r3
 80077be:	d3b8      	bcc.n	8007732 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80077c0:	2301      	movs	r3, #1
 80077c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077c4:	e7b5      	b.n	8007732 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077c6:	4b17      	ldr	r3, [pc, #92]	@ (8007824 <xTaskIncrementTick+0x168>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077cc:	4914      	ldr	r1, [pc, #80]	@ (8007820 <xTaskIncrementTick+0x164>)
 80077ce:	4613      	mov	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	440b      	add	r3, r1
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d901      	bls.n	80077e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80077de:	2301      	movs	r3, #1
 80077e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077e2:	4b11      	ldr	r3, [pc, #68]	@ (8007828 <xTaskIncrementTick+0x16c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d007      	beq.n	80077fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80077ea:	2301      	movs	r3, #1
 80077ec:	617b      	str	r3, [r7, #20]
 80077ee:	e004      	b.n	80077fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077f0:	4b0e      	ldr	r3, [pc, #56]	@ (800782c <xTaskIncrementTick+0x170>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3301      	adds	r3, #1
 80077f6:	4a0d      	ldr	r2, [pc, #52]	@ (800782c <xTaskIncrementTick+0x170>)
 80077f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077fa:	697b      	ldr	r3, [r7, #20]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	200013ec 	.word	0x200013ec
 8007808:	200013c8 	.word	0x200013c8
 800780c:	2000137c 	.word	0x2000137c
 8007810:	20001380 	.word	0x20001380
 8007814:	200013dc 	.word	0x200013dc
 8007818:	200013e4 	.word	0x200013e4
 800781c:	200013cc 	.word	0x200013cc
 8007820:	20000ef4 	.word	0x20000ef4
 8007824:	20000ef0 	.word	0x20000ef0
 8007828:	200013d8 	.word	0x200013d8
 800782c:	200013d4 	.word	0x200013d4

08007830 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007836:	4b28      	ldr	r3, [pc, #160]	@ (80078d8 <vTaskSwitchContext+0xa8>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800783e:	4b27      	ldr	r3, [pc, #156]	@ (80078dc <vTaskSwitchContext+0xac>)
 8007840:	2201      	movs	r2, #1
 8007842:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007844:	e042      	b.n	80078cc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007846:	4b25      	ldr	r3, [pc, #148]	@ (80078dc <vTaskSwitchContext+0xac>)
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800784c:	4b24      	ldr	r3, [pc, #144]	@ (80078e0 <vTaskSwitchContext+0xb0>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	e011      	b.n	8007878 <vTaskSwitchContext+0x48>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10b      	bne.n	8007872 <vTaskSwitchContext+0x42>
	__asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	607b      	str	r3, [r7, #4]
}
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	e7fd      	b.n	800786e <vTaskSwitchContext+0x3e>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3b01      	subs	r3, #1
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	491a      	ldr	r1, [pc, #104]	@ (80078e4 <vTaskSwitchContext+0xb4>)
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	440b      	add	r3, r1
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d0e3      	beq.n	8007854 <vTaskSwitchContext+0x24>
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4a13      	ldr	r2, [pc, #76]	@ (80078e4 <vTaskSwitchContext+0xb4>)
 8007898:	4413      	add	r3, r2
 800789a:	60bb      	str	r3, [r7, #8]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	605a      	str	r2, [r3, #4]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	3308      	adds	r3, #8
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d104      	bne.n	80078bc <vTaskSwitchContext+0x8c>
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	605a      	str	r2, [r3, #4]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	4a09      	ldr	r2, [pc, #36]	@ (80078e8 <vTaskSwitchContext+0xb8>)
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	4a06      	ldr	r2, [pc, #24]	@ (80078e0 <vTaskSwitchContext+0xb0>)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6013      	str	r3, [r2, #0]
}
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	200013ec 	.word	0x200013ec
 80078dc:	200013d8 	.word	0x200013d8
 80078e0:	200013cc 	.word	0x200013cc
 80078e4:	20000ef4 	.word	0x20000ef4
 80078e8:	20000ef0 	.word	0x20000ef0

080078ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10b      	bne.n	8007914 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	60fb      	str	r3, [r7, #12]
}
 800790e:	bf00      	nop
 8007910:	bf00      	nop
 8007912:	e7fd      	b.n	8007910 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007914:	4b07      	ldr	r3, [pc, #28]	@ (8007934 <vTaskPlaceOnEventList+0x48>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3318      	adds	r3, #24
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7fe fa86 	bl	8005e2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007922:	2101      	movs	r1, #1
 8007924:	6838      	ldr	r0, [r7, #0]
 8007926:	f000 fb91 	bl	800804c <prvAddCurrentTaskToDelayedList>
}
 800792a:	bf00      	nop
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20000ef0 	.word	0x20000ef0

08007938 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	617b      	str	r3, [r7, #20]
}
 800795c:	bf00      	nop
 800795e:	bf00      	nop
 8007960:	e7fd      	b.n	800795e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007962:	4b0a      	ldr	r3, [pc, #40]	@ (800798c <vTaskPlaceOnEventListRestricted+0x54>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3318      	adds	r3, #24
 8007968:	4619      	mov	r1, r3
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f7fe fa3b 	bl	8005de6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007976:	f04f 33ff 	mov.w	r3, #4294967295
 800797a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	68b8      	ldr	r0, [r7, #8]
 8007980:	f000 fb64 	bl	800804c <prvAddCurrentTaskToDelayedList>
	}
 8007984:	bf00      	nop
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	20000ef0 	.word	0x20000ef0

08007990 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10b      	bne.n	80079be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	60fb      	str	r3, [r7, #12]
}
 80079b8:	bf00      	nop
 80079ba:	bf00      	nop
 80079bc:	e7fd      	b.n	80079ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	3318      	adds	r3, #24
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fe fa6c 	bl	8005ea0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007a40 <xTaskRemoveFromEventList+0xb0>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d11d      	bne.n	8007a0c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	3304      	adds	r3, #4
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fe fa63 	bl	8005ea0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079de:	4b19      	ldr	r3, [pc, #100]	@ (8007a44 <xTaskRemoveFromEventList+0xb4>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d903      	bls.n	80079ee <xTaskRemoveFromEventList+0x5e>
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ea:	4a16      	ldr	r2, [pc, #88]	@ (8007a44 <xTaskRemoveFromEventList+0xb4>)
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4a13      	ldr	r2, [pc, #76]	@ (8007a48 <xTaskRemoveFromEventList+0xb8>)
 80079fc:	441a      	add	r2, r3
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	3304      	adds	r3, #4
 8007a02:	4619      	mov	r1, r3
 8007a04:	4610      	mov	r0, r2
 8007a06:	f7fe f9ee 	bl	8005de6 <vListInsertEnd>
 8007a0a:	e005      	b.n	8007a18 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	3318      	adds	r3, #24
 8007a10:	4619      	mov	r1, r3
 8007a12:	480e      	ldr	r0, [pc, #56]	@ (8007a4c <xTaskRemoveFromEventList+0xbc>)
 8007a14:	f7fe f9e7 	bl	8005de6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a50 <xTaskRemoveFromEventList+0xc0>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d905      	bls.n	8007a32 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a26:	2301      	movs	r3, #1
 8007a28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a54 <xTaskRemoveFromEventList+0xc4>)
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	e001      	b.n	8007a36 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a36:	697b      	ldr	r3, [r7, #20]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	200013ec 	.word	0x200013ec
 8007a44:	200013cc 	.word	0x200013cc
 8007a48:	20000ef4 	.word	0x20000ef4
 8007a4c:	20001384 	.word	0x20001384
 8007a50:	20000ef0 	.word	0x20000ef0
 8007a54:	200013d8 	.word	0x200013d8

08007a58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a60:	4b06      	ldr	r3, [pc, #24]	@ (8007a7c <vTaskInternalSetTimeOutState+0x24>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a68:	4b05      	ldr	r3, [pc, #20]	@ (8007a80 <vTaskInternalSetTimeOutState+0x28>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	605a      	str	r2, [r3, #4]
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	200013dc 	.word	0x200013dc
 8007a80:	200013c8 	.word	0x200013c8

08007a84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10b      	bne.n	8007aac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	613b      	str	r3, [r7, #16]
}
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	e7fd      	b.n	8007aa8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10b      	bne.n	8007aca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	60fb      	str	r3, [r7, #12]
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop
 8007ac8:	e7fd      	b.n	8007ac6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007aca:	f000 ff9d 	bl	8008a08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ace:	4b1d      	ldr	r3, [pc, #116]	@ (8007b44 <xTaskCheckForTimeOut+0xc0>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae6:	d102      	bne.n	8007aee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61fb      	str	r3, [r7, #28]
 8007aec:	e023      	b.n	8007b36 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4b15      	ldr	r3, [pc, #84]	@ (8007b48 <xTaskCheckForTimeOut+0xc4>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d007      	beq.n	8007b0a <xTaskCheckForTimeOut+0x86>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d302      	bcc.n	8007b0a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b04:	2301      	movs	r3, #1
 8007b06:	61fb      	str	r3, [r7, #28]
 8007b08:	e015      	b.n	8007b36 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d20b      	bcs.n	8007b2c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	1ad2      	subs	r2, r2, r3
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff ff99 	bl	8007a58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b26:	2300      	movs	r3, #0
 8007b28:	61fb      	str	r3, [r7, #28]
 8007b2a:	e004      	b.n	8007b36 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b32:	2301      	movs	r3, #1
 8007b34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b36:	f000 ff99 	bl	8008a6c <vPortExitCritical>

	return xReturn;
 8007b3a:	69fb      	ldr	r3, [r7, #28]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3720      	adds	r7, #32
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	200013c8 	.word	0x200013c8
 8007b48:	200013dc 	.word	0x200013dc

08007b4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b50:	4b03      	ldr	r3, [pc, #12]	@ (8007b60 <vTaskMissedYield+0x14>)
 8007b52:	2201      	movs	r2, #1
 8007b54:	601a      	str	r2, [r3, #0]
}
 8007b56:	bf00      	nop
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	200013d8 	.word	0x200013d8

08007b64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b6c:	f000 f852 	bl	8007c14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b70:	4b06      	ldr	r3, [pc, #24]	@ (8007b8c <prvIdleTask+0x28>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d9f9      	bls.n	8007b6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b78:	4b05      	ldr	r3, [pc, #20]	@ (8007b90 <prvIdleTask+0x2c>)
 8007b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b88:	e7f0      	b.n	8007b6c <prvIdleTask+0x8>
 8007b8a:	bf00      	nop
 8007b8c:	20000ef4 	.word	0x20000ef4
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	607b      	str	r3, [r7, #4]
 8007b9e:	e00c      	b.n	8007bba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4a12      	ldr	r2, [pc, #72]	@ (8007bf4 <prvInitialiseTaskLists+0x60>)
 8007bac:	4413      	add	r3, r2
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fe f8ec 	bl	8005d8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	607b      	str	r3, [r7, #4]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b37      	cmp	r3, #55	@ 0x37
 8007bbe:	d9ef      	bls.n	8007ba0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bc0:	480d      	ldr	r0, [pc, #52]	@ (8007bf8 <prvInitialiseTaskLists+0x64>)
 8007bc2:	f7fe f8e3 	bl	8005d8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bc6:	480d      	ldr	r0, [pc, #52]	@ (8007bfc <prvInitialiseTaskLists+0x68>)
 8007bc8:	f7fe f8e0 	bl	8005d8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007bcc:	480c      	ldr	r0, [pc, #48]	@ (8007c00 <prvInitialiseTaskLists+0x6c>)
 8007bce:	f7fe f8dd 	bl	8005d8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bd2:	480c      	ldr	r0, [pc, #48]	@ (8007c04 <prvInitialiseTaskLists+0x70>)
 8007bd4:	f7fe f8da 	bl	8005d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007bd8:	480b      	ldr	r0, [pc, #44]	@ (8007c08 <prvInitialiseTaskLists+0x74>)
 8007bda:	f7fe f8d7 	bl	8005d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bde:	4b0b      	ldr	r3, [pc, #44]	@ (8007c0c <prvInitialiseTaskLists+0x78>)
 8007be0:	4a05      	ldr	r2, [pc, #20]	@ (8007bf8 <prvInitialiseTaskLists+0x64>)
 8007be2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007be4:	4b0a      	ldr	r3, [pc, #40]	@ (8007c10 <prvInitialiseTaskLists+0x7c>)
 8007be6:	4a05      	ldr	r2, [pc, #20]	@ (8007bfc <prvInitialiseTaskLists+0x68>)
 8007be8:	601a      	str	r2, [r3, #0]
}
 8007bea:	bf00      	nop
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20000ef4 	.word	0x20000ef4
 8007bf8:	20001354 	.word	0x20001354
 8007bfc:	20001368 	.word	0x20001368
 8007c00:	20001384 	.word	0x20001384
 8007c04:	20001398 	.word	0x20001398
 8007c08:	200013b0 	.word	0x200013b0
 8007c0c:	2000137c 	.word	0x2000137c
 8007c10:	20001380 	.word	0x20001380

08007c14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c1a:	e019      	b.n	8007c50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c1c:	f000 fef4 	bl	8008a08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c20:	4b10      	ldr	r3, [pc, #64]	@ (8007c64 <prvCheckTasksWaitingTermination+0x50>)
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fe f937 	bl	8005ea0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c32:	4b0d      	ldr	r3, [pc, #52]	@ (8007c68 <prvCheckTasksWaitingTermination+0x54>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	4a0b      	ldr	r2, [pc, #44]	@ (8007c68 <prvCheckTasksWaitingTermination+0x54>)
 8007c3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c6c <prvCheckTasksWaitingTermination+0x58>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	4a0a      	ldr	r2, [pc, #40]	@ (8007c6c <prvCheckTasksWaitingTermination+0x58>)
 8007c44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c46:	f000 ff11 	bl	8008a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f810 	bl	8007c70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c50:	4b06      	ldr	r3, [pc, #24]	@ (8007c6c <prvCheckTasksWaitingTermination+0x58>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e1      	bne.n	8007c1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c58:	bf00      	nop
 8007c5a:	bf00      	nop
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20001398 	.word	0x20001398
 8007c68:	200013c4 	.word	0x200013c4
 8007c6c:	200013ac 	.word	0x200013ac

08007c70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d108      	bne.n	8007c94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 f8ae 	bl	8008de8 <vPortFree>
				vPortFree( pxTCB );
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 f8ab 	bl	8008de8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c92:	e019      	b.n	8007cc8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d103      	bne.n	8007ca6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 f8a2 	bl	8008de8 <vPortFree>
	}
 8007ca4:	e010      	b.n	8007cc8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d00b      	beq.n	8007cc8 <prvDeleteTCB+0x58>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	bf00      	nop
 8007cc6:	e7fd      	b.n	8007cc4 <prvDeleteTCB+0x54>
	}
 8007cc8:	bf00      	nop
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007d08 <prvResetNextTaskUnblockTime+0x38>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d104      	bne.n	8007cea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8007d0c <prvResetNextTaskUnblockTime+0x3c>)
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ce8:	e008      	b.n	8007cfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cea:	4b07      	ldr	r3, [pc, #28]	@ (8007d08 <prvResetNextTaskUnblockTime+0x38>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	4a04      	ldr	r2, [pc, #16]	@ (8007d0c <prvResetNextTaskUnblockTime+0x3c>)
 8007cfa:	6013      	str	r3, [r2, #0]
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	2000137c 	.word	0x2000137c
 8007d0c:	200013e4 	.word	0x200013e4

08007d10 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007d16:	4b05      	ldr	r3, [pc, #20]	@ (8007d2c <xTaskGetCurrentTaskHandle+0x1c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007d1c:	687b      	ldr	r3, [r7, #4]
	}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	20000ef0 	.word	0x20000ef0

08007d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d36:	4b0b      	ldr	r3, [pc, #44]	@ (8007d64 <xTaskGetSchedulerState+0x34>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d102      	bne.n	8007d44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	607b      	str	r3, [r7, #4]
 8007d42:	e008      	b.n	8007d56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d44:	4b08      	ldr	r3, [pc, #32]	@ (8007d68 <xTaskGetSchedulerState+0x38>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d102      	bne.n	8007d52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	607b      	str	r3, [r7, #4]
 8007d50:	e001      	b.n	8007d56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d52:	2300      	movs	r3, #0
 8007d54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d56:	687b      	ldr	r3, [r7, #4]
	}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	200013d0 	.word	0x200013d0
 8007d68:	200013ec 	.word	0x200013ec

08007d6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d051      	beq.n	8007e26 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d86:	4b2a      	ldr	r3, [pc, #168]	@ (8007e30 <xTaskPriorityInherit+0xc4>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d241      	bcs.n	8007e14 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	db06      	blt.n	8007da6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d98:	4b25      	ldr	r3, [pc, #148]	@ (8007e30 <xTaskPriorityInherit+0xc4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	6959      	ldr	r1, [r3, #20]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4a1f      	ldr	r2, [pc, #124]	@ (8007e34 <xTaskPriorityInherit+0xc8>)
 8007db8:	4413      	add	r3, r2
 8007dba:	4299      	cmp	r1, r3
 8007dbc:	d122      	bne.n	8007e04 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe f86c 	bl	8005ea0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007dc8:	4b19      	ldr	r3, [pc, #100]	@ (8007e30 <xTaskPriorityInherit+0xc4>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd6:	4b18      	ldr	r3, [pc, #96]	@ (8007e38 <xTaskPriorityInherit+0xcc>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d903      	bls.n	8007de6 <xTaskPriorityInherit+0x7a>
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de2:	4a15      	ldr	r2, [pc, #84]	@ (8007e38 <xTaskPriorityInherit+0xcc>)
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4a10      	ldr	r2, [pc, #64]	@ (8007e34 <xTaskPriorityInherit+0xc8>)
 8007df4:	441a      	add	r2, r3
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	f7fd fff2 	bl	8005de6 <vListInsertEnd>
 8007e02:	e004      	b.n	8007e0e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e04:	4b0a      	ldr	r3, [pc, #40]	@ (8007e30 <xTaskPriorityInherit+0xc4>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	e008      	b.n	8007e26 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e18:	4b05      	ldr	r3, [pc, #20]	@ (8007e30 <xTaskPriorityInherit+0xc4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d201      	bcs.n	8007e26 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007e22:	2301      	movs	r3, #1
 8007e24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e26:	68fb      	ldr	r3, [r7, #12]
	}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20000ef0 	.word	0x20000ef0
 8007e34:	20000ef4 	.word	0x20000ef4
 8007e38:	200013cc 	.word	0x200013cc

08007e3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d058      	beq.n	8007f04 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e52:	4b2f      	ldr	r3, [pc, #188]	@ (8007f10 <xTaskPriorityDisinherit+0xd4>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d00b      	beq.n	8007e74 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	60fb      	str	r3, [r7, #12]
}
 8007e6e:	bf00      	nop
 8007e70:	bf00      	nop
 8007e72:	e7fd      	b.n	8007e70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10b      	bne.n	8007e94 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	60bb      	str	r3, [r7, #8]
}
 8007e8e:	bf00      	nop
 8007e90:	bf00      	nop
 8007e92:	e7fd      	b.n	8007e90 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e98:	1e5a      	subs	r2, r3, #1
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d02c      	beq.n	8007f04 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d128      	bne.n	8007f04 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fd fff2 	bl	8005ea0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8007f14 <xTaskPriorityDisinherit+0xd8>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d903      	bls.n	8007ee4 <xTaskPriorityDisinherit+0xa8>
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8007f14 <xTaskPriorityDisinherit+0xd8>)
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee8:	4613      	mov	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4a09      	ldr	r2, [pc, #36]	@ (8007f18 <xTaskPriorityDisinherit+0xdc>)
 8007ef2:	441a      	add	r2, r3
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4610      	mov	r0, r2
 8007efc:	f7fd ff73 	bl	8005de6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f00:	2301      	movs	r3, #1
 8007f02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f04:	697b      	ldr	r3, [r7, #20]
	}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000ef0 	.word	0x20000ef0
 8007f14:	200013cc 	.word	0x200013cc
 8007f18:	20000ef4 	.word	0x20000ef4

08007f1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d06c      	beq.n	800800e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10b      	bne.n	8007f54 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	60fb      	str	r3, [r7, #12]
}
 8007f4e:	bf00      	nop
 8007f50:	bf00      	nop
 8007f52:	e7fd      	b.n	8007f50 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d902      	bls.n	8007f64 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	61fb      	str	r3, [r7, #28]
 8007f62:	e002      	b.n	8007f6a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f68:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6e:	69fa      	ldr	r2, [r7, #28]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d04c      	beq.n	800800e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d147      	bne.n	800800e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007f7e:	4b26      	ldr	r3, [pc, #152]	@ (8008018 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d10b      	bne.n	8007fa0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	60bb      	str	r3, [r7, #8]
}
 8007f9a:	bf00      	nop
 8007f9c:	bf00      	nop
 8007f9e:	e7fd      	b.n	8007f9c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	69fa      	ldr	r2, [r7, #28]
 8007faa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	db04      	blt.n	8007fbe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	6959      	ldr	r1, [r3, #20]
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4a13      	ldr	r2, [pc, #76]	@ (800801c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007fce:	4413      	add	r3, r2
 8007fd0:	4299      	cmp	r1, r3
 8007fd2:	d11c      	bne.n	800800e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fd ff61 	bl	8005ea0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8008020 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d903      	bls.n	8007ff2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fee:	4a0c      	ldr	r2, [pc, #48]	@ (8008020 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4a07      	ldr	r2, [pc, #28]	@ (800801c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008000:	441a      	add	r2, r3
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	3304      	adds	r3, #4
 8008006:	4619      	mov	r1, r3
 8008008:	4610      	mov	r0, r2
 800800a:	f7fd feec 	bl	8005de6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800800e:	bf00      	nop
 8008010:	3720      	adds	r7, #32
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	20000ef0 	.word	0x20000ef0
 800801c:	20000ef4 	.word	0x20000ef4
 8008020:	200013cc 	.word	0x200013cc

08008024 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008024:	b480      	push	{r7}
 8008026:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008028:	4b07      	ldr	r3, [pc, #28]	@ (8008048 <pvTaskIncrementMutexHeldCount+0x24>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008030:	4b05      	ldr	r3, [pc, #20]	@ (8008048 <pvTaskIncrementMutexHeldCount+0x24>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008036:	3201      	adds	r2, #1
 8008038:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800803a:	4b03      	ldr	r3, [pc, #12]	@ (8008048 <pvTaskIncrementMutexHeldCount+0x24>)
 800803c:	681b      	ldr	r3, [r3, #0]
	}
 800803e:	4618      	mov	r0, r3
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	20000ef0 	.word	0x20000ef0

0800804c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008056:	4b21      	ldr	r3, [pc, #132]	@ (80080dc <prvAddCurrentTaskToDelayedList+0x90>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800805c:	4b20      	ldr	r3, [pc, #128]	@ (80080e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3304      	adds	r3, #4
 8008062:	4618      	mov	r0, r3
 8008064:	f7fd ff1c 	bl	8005ea0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806e:	d10a      	bne.n	8008086 <prvAddCurrentTaskToDelayedList+0x3a>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008076:	4b1a      	ldr	r3, [pc, #104]	@ (80080e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3304      	adds	r3, #4
 800807c:	4619      	mov	r1, r3
 800807e:	4819      	ldr	r0, [pc, #100]	@ (80080e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008080:	f7fd feb1 	bl	8005de6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008084:	e026      	b.n	80080d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4413      	add	r3, r2
 800808c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800808e:	4b14      	ldr	r3, [pc, #80]	@ (80080e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	429a      	cmp	r2, r3
 800809c:	d209      	bcs.n	80080b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800809e:	4b12      	ldr	r3, [pc, #72]	@ (80080e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	4b0f      	ldr	r3, [pc, #60]	@ (80080e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4619      	mov	r1, r3
 80080aa:	4610      	mov	r0, r2
 80080ac:	f7fd febf 	bl	8005e2e <vListInsert>
}
 80080b0:	e010      	b.n	80080d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080b2:	4b0e      	ldr	r3, [pc, #56]	@ (80080ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	4b0a      	ldr	r3, [pc, #40]	@ (80080e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3304      	adds	r3, #4
 80080bc:	4619      	mov	r1, r3
 80080be:	4610      	mov	r0, r2
 80080c0:	f7fd feb5 	bl	8005e2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080c4:	4b0a      	ldr	r3, [pc, #40]	@ (80080f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d202      	bcs.n	80080d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80080ce:	4a08      	ldr	r2, [pc, #32]	@ (80080f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	6013      	str	r3, [r2, #0]
}
 80080d4:	bf00      	nop
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	200013c8 	.word	0x200013c8
 80080e0:	20000ef0 	.word	0x20000ef0
 80080e4:	200013b0 	.word	0x200013b0
 80080e8:	20001380 	.word	0x20001380
 80080ec:	2000137c 	.word	0x2000137c
 80080f0:	200013e4 	.word	0x200013e4

080080f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b08a      	sub	sp, #40	@ 0x28
 80080f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80080fe:	f000 fb13 	bl	8008728 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008102:	4b1d      	ldr	r3, [pc, #116]	@ (8008178 <xTimerCreateTimerTask+0x84>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d021      	beq.n	800814e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800810e:	2300      	movs	r3, #0
 8008110:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008112:	1d3a      	adds	r2, r7, #4
 8008114:	f107 0108 	add.w	r1, r7, #8
 8008118:	f107 030c 	add.w	r3, r7, #12
 800811c:	4618      	mov	r0, r3
 800811e:	f7fd fe1b 	bl	8005d58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008122:	6879      	ldr	r1, [r7, #4]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	9202      	str	r2, [sp, #8]
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	2302      	movs	r3, #2
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	2300      	movs	r3, #0
 8008132:	460a      	mov	r2, r1
 8008134:	4911      	ldr	r1, [pc, #68]	@ (800817c <xTimerCreateTimerTask+0x88>)
 8008136:	4812      	ldr	r0, [pc, #72]	@ (8008180 <xTimerCreateTimerTask+0x8c>)
 8008138:	f7fe ffc0 	bl	80070bc <xTaskCreateStatic>
 800813c:	4603      	mov	r3, r0
 800813e:	4a11      	ldr	r2, [pc, #68]	@ (8008184 <xTimerCreateTimerTask+0x90>)
 8008140:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008142:	4b10      	ldr	r3, [pc, #64]	@ (8008184 <xTimerCreateTimerTask+0x90>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800814a:	2301      	movs	r3, #1
 800814c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10b      	bne.n	800816c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	613b      	str	r3, [r7, #16]
}
 8008166:	bf00      	nop
 8008168:	bf00      	nop
 800816a:	e7fd      	b.n	8008168 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800816c:	697b      	ldr	r3, [r7, #20]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3718      	adds	r7, #24
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20001420 	.word	0x20001420
 800817c:	08009144 	.word	0x08009144
 8008180:	080082c1 	.word	0x080082c1
 8008184:	20001424 	.word	0x20001424

08008188 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b08a      	sub	sp, #40	@ 0x28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008196:	2300      	movs	r3, #0
 8008198:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10b      	bne.n	80081b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	623b      	str	r3, [r7, #32]
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	e7fd      	b.n	80081b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081b8:	4b19      	ldr	r3, [pc, #100]	@ (8008220 <xTimerGenericCommand+0x98>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d02a      	beq.n	8008216 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2b05      	cmp	r3, #5
 80081d0:	dc18      	bgt.n	8008204 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081d2:	f7ff fdad 	bl	8007d30 <xTaskGetSchedulerState>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d109      	bne.n	80081f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80081dc:	4b10      	ldr	r3, [pc, #64]	@ (8008220 <xTimerGenericCommand+0x98>)
 80081de:	6818      	ldr	r0, [r3, #0]
 80081e0:	f107 0110 	add.w	r1, r7, #16
 80081e4:	2300      	movs	r3, #0
 80081e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081e8:	f7fe f8f0 	bl	80063cc <xQueueGenericSend>
 80081ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80081ee:	e012      	b.n	8008216 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008220 <xTimerGenericCommand+0x98>)
 80081f2:	6818      	ldr	r0, [r3, #0]
 80081f4:	f107 0110 	add.w	r1, r7, #16
 80081f8:	2300      	movs	r3, #0
 80081fa:	2200      	movs	r2, #0
 80081fc:	f7fe f8e6 	bl	80063cc <xQueueGenericSend>
 8008200:	6278      	str	r0, [r7, #36]	@ 0x24
 8008202:	e008      	b.n	8008216 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008204:	4b06      	ldr	r3, [pc, #24]	@ (8008220 <xTimerGenericCommand+0x98>)
 8008206:	6818      	ldr	r0, [r3, #0]
 8008208:	f107 0110 	add.w	r1, r7, #16
 800820c:	2300      	movs	r3, #0
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	f7fe f9de 	bl	80065d0 <xQueueGenericSendFromISR>
 8008214:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008218:	4618      	mov	r0, r3
 800821a:	3728      	adds	r7, #40	@ 0x28
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	20001420 	.word	0x20001420

08008224 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af02      	add	r7, sp, #8
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800822e:	4b23      	ldr	r3, [pc, #140]	@ (80082bc <prvProcessExpiredTimer+0x98>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	3304      	adds	r3, #4
 800823c:	4618      	mov	r0, r3
 800823e:	f7fd fe2f 	bl	8005ea0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008248:	f003 0304 	and.w	r3, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	d023      	beq.n	8008298 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	699a      	ldr	r2, [r3, #24]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	18d1      	adds	r1, r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	6978      	ldr	r0, [r7, #20]
 800825e:	f000 f8d5 	bl	800840c <prvInsertTimerInActiveList>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d020      	beq.n	80082aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008268:	2300      	movs	r3, #0
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	2300      	movs	r3, #0
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	2100      	movs	r1, #0
 8008272:	6978      	ldr	r0, [r7, #20]
 8008274:	f7ff ff88 	bl	8008188 <xTimerGenericCommand>
 8008278:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d114      	bne.n	80082aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	60fb      	str	r3, [r7, #12]
}
 8008292:	bf00      	nop
 8008294:	bf00      	nop
 8008296:	e7fd      	b.n	8008294 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800829e:	f023 0301 	bic.w	r3, r3, #1
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	6978      	ldr	r0, [r7, #20]
 80082b0:	4798      	blx	r3
}
 80082b2:	bf00      	nop
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20001418 	.word	0x20001418

080082c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082c8:	f107 0308 	add.w	r3, r7, #8
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 f859 	bl	8008384 <prvGetNextExpireTime>
 80082d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	4619      	mov	r1, r3
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f805 	bl	80082e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082de:	f000 f8d7 	bl	8008490 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082e2:	bf00      	nop
 80082e4:	e7f0      	b.n	80082c8 <prvTimerTask+0x8>
	...

080082e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082f2:	f7ff f927 	bl	8007544 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082f6:	f107 0308 	add.w	r3, r7, #8
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 f866 	bl	80083cc <prvSampleTimeNow>
 8008300:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d130      	bne.n	800836a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10a      	bne.n	8008324 <prvProcessTimerOrBlockTask+0x3c>
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	429a      	cmp	r2, r3
 8008314:	d806      	bhi.n	8008324 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008316:	f7ff f923 	bl	8007560 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800831a:	68f9      	ldr	r1, [r7, #12]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7ff ff81 	bl	8008224 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008322:	e024      	b.n	800836e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d008      	beq.n	800833c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800832a:	4b13      	ldr	r3, [pc, #76]	@ (8008378 <prvProcessTimerOrBlockTask+0x90>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <prvProcessTimerOrBlockTask+0x50>
 8008334:	2301      	movs	r3, #1
 8008336:	e000      	b.n	800833a <prvProcessTimerOrBlockTask+0x52>
 8008338:	2300      	movs	r3, #0
 800833a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800833c:	4b0f      	ldr	r3, [pc, #60]	@ (800837c <prvProcessTimerOrBlockTask+0x94>)
 800833e:	6818      	ldr	r0, [r3, #0]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	4619      	mov	r1, r3
 800834a:	f7fe fe83 	bl	8007054 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800834e:	f7ff f907 	bl	8007560 <xTaskResumeAll>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10a      	bne.n	800836e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008358:	4b09      	ldr	r3, [pc, #36]	@ (8008380 <prvProcessTimerOrBlockTask+0x98>)
 800835a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	f3bf 8f6f 	isb	sy
}
 8008368:	e001      	b.n	800836e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800836a:	f7ff f8f9 	bl	8007560 <xTaskResumeAll>
}
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	2000141c 	.word	0x2000141c
 800837c:	20001420 	.word	0x20001420
 8008380:	e000ed04 	.word	0xe000ed04

08008384 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800838c:	4b0e      	ldr	r3, [pc, #56]	@ (80083c8 <prvGetNextExpireTime+0x44>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <prvGetNextExpireTime+0x16>
 8008396:	2201      	movs	r2, #1
 8008398:	e000      	b.n	800839c <prvGetNextExpireTime+0x18>
 800839a:	2200      	movs	r2, #0
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d105      	bne.n	80083b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083a8:	4b07      	ldr	r3, [pc, #28]	@ (80083c8 <prvGetNextExpireTime+0x44>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60fb      	str	r3, [r7, #12]
 80083b2:	e001      	b.n	80083b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083b8:	68fb      	ldr	r3, [r7, #12]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20001418 	.word	0x20001418

080083cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083d4:	f7ff f962 	bl	800769c <xTaskGetTickCount>
 80083d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083da:	4b0b      	ldr	r3, [pc, #44]	@ (8008408 <prvSampleTimeNow+0x3c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d205      	bcs.n	80083f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083e4:	f000 f93a 	bl	800865c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	e002      	b.n	80083f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083f6:	4a04      	ldr	r2, [pc, #16]	@ (8008408 <prvSampleTimeNow+0x3c>)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80083fc:	68fb      	ldr	r3, [r7, #12]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20001428 	.word	0x20001428

0800840c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800841a:	2300      	movs	r3, #0
 800841c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	429a      	cmp	r2, r3
 8008430:	d812      	bhi.n	8008458 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	1ad2      	subs	r2, r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	429a      	cmp	r2, r3
 800843e:	d302      	bcc.n	8008446 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008440:	2301      	movs	r3, #1
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	e01b      	b.n	800847e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008446:	4b10      	ldr	r3, [pc, #64]	@ (8008488 <prvInsertTimerInActiveList+0x7c>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	3304      	adds	r3, #4
 800844e:	4619      	mov	r1, r3
 8008450:	4610      	mov	r0, r2
 8008452:	f7fd fcec 	bl	8005e2e <vListInsert>
 8008456:	e012      	b.n	800847e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	429a      	cmp	r2, r3
 800845e:	d206      	bcs.n	800846e <prvInsertTimerInActiveList+0x62>
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d302      	bcc.n	800846e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008468:	2301      	movs	r3, #1
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	e007      	b.n	800847e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800846e:	4b07      	ldr	r3, [pc, #28]	@ (800848c <prvInsertTimerInActiveList+0x80>)
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3304      	adds	r3, #4
 8008476:	4619      	mov	r1, r3
 8008478:	4610      	mov	r0, r2
 800847a:	f7fd fcd8 	bl	8005e2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800847e:	697b      	ldr	r3, [r7, #20]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	2000141c 	.word	0x2000141c
 800848c:	20001418 	.word	0x20001418

08008490 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b08e      	sub	sp, #56	@ 0x38
 8008494:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008496:	e0ce      	b.n	8008636 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	da19      	bge.n	80084d2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800849e:	1d3b      	adds	r3, r7, #4
 80084a0:	3304      	adds	r3, #4
 80084a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10b      	bne.n	80084c2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	61fb      	str	r3, [r7, #28]
}
 80084bc:	bf00      	nop
 80084be:	bf00      	nop
 80084c0:	e7fd      	b.n	80084be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084c8:	6850      	ldr	r0, [r2, #4]
 80084ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084cc:	6892      	ldr	r2, [r2, #8]
 80084ce:	4611      	mov	r1, r2
 80084d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f2c0 80ae 	blt.w	8008636 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d004      	beq.n	80084f0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e8:	3304      	adds	r3, #4
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fd fcd8 	bl	8005ea0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084f0:	463b      	mov	r3, r7
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7ff ff6a 	bl	80083cc <prvSampleTimeNow>
 80084f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b09      	cmp	r3, #9
 80084fe:	f200 8097 	bhi.w	8008630 <prvProcessReceivedCommands+0x1a0>
 8008502:	a201      	add	r2, pc, #4	@ (adr r2, 8008508 <prvProcessReceivedCommands+0x78>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	08008531 	.word	0x08008531
 800850c:	08008531 	.word	0x08008531
 8008510:	08008531 	.word	0x08008531
 8008514:	080085a7 	.word	0x080085a7
 8008518:	080085bb 	.word	0x080085bb
 800851c:	08008607 	.word	0x08008607
 8008520:	08008531 	.word	0x08008531
 8008524:	08008531 	.word	0x08008531
 8008528:	080085a7 	.word	0x080085a7
 800852c:	080085bb 	.word	0x080085bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008532:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008536:	f043 0301 	orr.w	r3, r3, #1
 800853a:	b2da      	uxtb	r2, r3
 800853c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	18d1      	adds	r1, r2, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800854e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008550:	f7ff ff5c 	bl	800840c <prvInsertTimerInActiveList>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d06c      	beq.n	8008634 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800855a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008560:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b00      	cmp	r3, #0
 800856e:	d061      	beq.n	8008634 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	441a      	add	r2, r3
 8008578:	2300      	movs	r3, #0
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	2300      	movs	r3, #0
 800857e:	2100      	movs	r1, #0
 8008580:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008582:	f7ff fe01 	bl	8008188 <xTimerGenericCommand>
 8008586:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d152      	bne.n	8008634 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	61bb      	str	r3, [r7, #24]
}
 80085a0:	bf00      	nop
 80085a2:	bf00      	nop
 80085a4:	e7fd      	b.n	80085a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085ac:	f023 0301 	bic.w	r3, r3, #1
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80085b8:	e03d      	b.n	8008636 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085c0:	f043 0301 	orr.w	r3, r3, #1
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10b      	bne.n	80085f2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	617b      	str	r3, [r7, #20]
}
 80085ec:	bf00      	nop
 80085ee:	bf00      	nop
 80085f0:	e7fd      	b.n	80085ee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f4:	699a      	ldr	r2, [r3, #24]
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	18d1      	adds	r1, r2, r3
 80085fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008600:	f7ff ff04 	bl	800840c <prvInsertTimerInActiveList>
					break;
 8008604:	e017      	b.n	8008636 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	2b00      	cmp	r3, #0
 8008612:	d103      	bne.n	800861c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008616:	f000 fbe7 	bl	8008de8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800861a:	e00c      	b.n	8008636 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800861c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008622:	f023 0301 	bic.w	r3, r3, #1
 8008626:	b2da      	uxtb	r2, r3
 8008628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800862e:	e002      	b.n	8008636 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008630:	bf00      	nop
 8008632:	e000      	b.n	8008636 <prvProcessReceivedCommands+0x1a6>
					break;
 8008634:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008636:	4b08      	ldr	r3, [pc, #32]	@ (8008658 <prvProcessReceivedCommands+0x1c8>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	1d39      	adds	r1, r7, #4
 800863c:	2200      	movs	r2, #0
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe f8f4 	bl	800682c <xQueueReceive>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	f47f af26 	bne.w	8008498 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800864c:	bf00      	nop
 800864e:	bf00      	nop
 8008650:	3730      	adds	r7, #48	@ 0x30
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20001420 	.word	0x20001420

0800865c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008662:	e049      	b.n	80086f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008664:	4b2e      	ldr	r3, [pc, #184]	@ (8008720 <prvSwitchTimerLists+0xc4>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800866e:	4b2c      	ldr	r3, [pc, #176]	@ (8008720 <prvSwitchTimerLists+0xc4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	3304      	adds	r3, #4
 800867c:	4618      	mov	r0, r3
 800867e:	f7fd fc0f 	bl	8005ea0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b00      	cmp	r3, #0
 8008696:	d02f      	beq.n	80086f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	4413      	add	r3, r2
 80086a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d90e      	bls.n	80086c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008720 <prvSwitchTimerLists+0xc4>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3304      	adds	r3, #4
 80086be:	4619      	mov	r1, r3
 80086c0:	4610      	mov	r0, r2
 80086c2:	f7fd fbb4 	bl	8005e2e <vListInsert>
 80086c6:	e017      	b.n	80086f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086c8:	2300      	movs	r3, #0
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	2300      	movs	r3, #0
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	2100      	movs	r1, #0
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7ff fd58 	bl	8008188 <xTimerGenericCommand>
 80086d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10b      	bne.n	80086f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	603b      	str	r3, [r7, #0]
}
 80086f2:	bf00      	nop
 80086f4:	bf00      	nop
 80086f6:	e7fd      	b.n	80086f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086f8:	4b09      	ldr	r3, [pc, #36]	@ (8008720 <prvSwitchTimerLists+0xc4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1b0      	bne.n	8008664 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008702:	4b07      	ldr	r3, [pc, #28]	@ (8008720 <prvSwitchTimerLists+0xc4>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008708:	4b06      	ldr	r3, [pc, #24]	@ (8008724 <prvSwitchTimerLists+0xc8>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a04      	ldr	r2, [pc, #16]	@ (8008720 <prvSwitchTimerLists+0xc4>)
 800870e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008710:	4a04      	ldr	r2, [pc, #16]	@ (8008724 <prvSwitchTimerLists+0xc8>)
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	6013      	str	r3, [r2, #0]
}
 8008716:	bf00      	nop
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20001418 	.word	0x20001418
 8008724:	2000141c 	.word	0x2000141c

08008728 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800872e:	f000 f96b 	bl	8008a08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008732:	4b15      	ldr	r3, [pc, #84]	@ (8008788 <prvCheckForValidListAndQueue+0x60>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d120      	bne.n	800877c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800873a:	4814      	ldr	r0, [pc, #80]	@ (800878c <prvCheckForValidListAndQueue+0x64>)
 800873c:	f7fd fb26 	bl	8005d8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008740:	4813      	ldr	r0, [pc, #76]	@ (8008790 <prvCheckForValidListAndQueue+0x68>)
 8008742:	f7fd fb23 	bl	8005d8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008746:	4b13      	ldr	r3, [pc, #76]	@ (8008794 <prvCheckForValidListAndQueue+0x6c>)
 8008748:	4a10      	ldr	r2, [pc, #64]	@ (800878c <prvCheckForValidListAndQueue+0x64>)
 800874a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800874c:	4b12      	ldr	r3, [pc, #72]	@ (8008798 <prvCheckForValidListAndQueue+0x70>)
 800874e:	4a10      	ldr	r2, [pc, #64]	@ (8008790 <prvCheckForValidListAndQueue+0x68>)
 8008750:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008752:	2300      	movs	r3, #0
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	4b11      	ldr	r3, [pc, #68]	@ (800879c <prvCheckForValidListAndQueue+0x74>)
 8008758:	4a11      	ldr	r2, [pc, #68]	@ (80087a0 <prvCheckForValidListAndQueue+0x78>)
 800875a:	2110      	movs	r1, #16
 800875c:	200a      	movs	r0, #10
 800875e:	f7fd fc33 	bl	8005fc8 <xQueueGenericCreateStatic>
 8008762:	4603      	mov	r3, r0
 8008764:	4a08      	ldr	r2, [pc, #32]	@ (8008788 <prvCheckForValidListAndQueue+0x60>)
 8008766:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008768:	4b07      	ldr	r3, [pc, #28]	@ (8008788 <prvCheckForValidListAndQueue+0x60>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d005      	beq.n	800877c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008770:	4b05      	ldr	r3, [pc, #20]	@ (8008788 <prvCheckForValidListAndQueue+0x60>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	490b      	ldr	r1, [pc, #44]	@ (80087a4 <prvCheckForValidListAndQueue+0x7c>)
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fc18 	bl	8006fac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800877c:	f000 f976 	bl	8008a6c <vPortExitCritical>
}
 8008780:	bf00      	nop
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20001420 	.word	0x20001420
 800878c:	200013f0 	.word	0x200013f0
 8008790:	20001404 	.word	0x20001404
 8008794:	20001418 	.word	0x20001418
 8008798:	2000141c 	.word	0x2000141c
 800879c:	200014cc 	.word	0x200014cc
 80087a0:	2000142c 	.word	0x2000142c
 80087a4:	0800914c 	.word	0x0800914c

080087a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3b04      	subs	r3, #4
 80087b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80087c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3b04      	subs	r3, #4
 80087c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f023 0201 	bic.w	r2, r3, #1
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3b04      	subs	r3, #4
 80087d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087d8:	4a0c      	ldr	r2, [pc, #48]	@ (800880c <pxPortInitialiseStack+0x64>)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3b14      	subs	r3, #20
 80087e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3b04      	subs	r3, #4
 80087ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f06f 0202 	mvn.w	r2, #2
 80087f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3b20      	subs	r3, #32
 80087fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087fe:	68fb      	ldr	r3, [r7, #12]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	08008811 	.word	0x08008811

08008810 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800881a:	4b13      	ldr	r3, [pc, #76]	@ (8008868 <prvTaskExitError+0x58>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008822:	d00b      	beq.n	800883c <prvTaskExitError+0x2c>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	60fb      	str	r3, [r7, #12]
}
 8008836:	bf00      	nop
 8008838:	bf00      	nop
 800883a:	e7fd      	b.n	8008838 <prvTaskExitError+0x28>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	60bb      	str	r3, [r7, #8]
}
 800884e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008850:	bf00      	nop
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0fc      	beq.n	8008852 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	2000000c 	.word	0x2000000c
 800886c:	00000000 	.word	0x00000000

08008870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008870:	4b07      	ldr	r3, [pc, #28]	@ (8008890 <pxCurrentTCBConst2>)
 8008872:	6819      	ldr	r1, [r3, #0]
 8008874:	6808      	ldr	r0, [r1, #0]
 8008876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887a:	f380 8809 	msr	PSP, r0
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f04f 0000 	mov.w	r0, #0
 8008886:	f380 8811 	msr	BASEPRI, r0
 800888a:	4770      	bx	lr
 800888c:	f3af 8000 	nop.w

08008890 <pxCurrentTCBConst2>:
 8008890:	20000ef0 	.word	0x20000ef0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop

08008898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008898:	4808      	ldr	r0, [pc, #32]	@ (80088bc <prvPortStartFirstTask+0x24>)
 800889a:	6800      	ldr	r0, [r0, #0]
 800889c:	6800      	ldr	r0, [r0, #0]
 800889e:	f380 8808 	msr	MSP, r0
 80088a2:	f04f 0000 	mov.w	r0, #0
 80088a6:	f380 8814 	msr	CONTROL, r0
 80088aa:	b662      	cpsie	i
 80088ac:	b661      	cpsie	f
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	df00      	svc	0
 80088b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088ba:	bf00      	nop
 80088bc:	e000ed08 	.word	0xe000ed08

080088c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088c6:	4b47      	ldr	r3, [pc, #284]	@ (80089e4 <xPortStartScheduler+0x124>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a47      	ldr	r2, [pc, #284]	@ (80089e8 <xPortStartScheduler+0x128>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d10b      	bne.n	80088e8 <xPortStartScheduler+0x28>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	613b      	str	r3, [r7, #16]
}
 80088e2:	bf00      	nop
 80088e4:	bf00      	nop
 80088e6:	e7fd      	b.n	80088e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088e8:	4b3e      	ldr	r3, [pc, #248]	@ (80089e4 <xPortStartScheduler+0x124>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a3f      	ldr	r2, [pc, #252]	@ (80089ec <xPortStartScheduler+0x12c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d10b      	bne.n	800890a <xPortStartScheduler+0x4a>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	60fb      	str	r3, [r7, #12]
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop
 8008908:	e7fd      	b.n	8008906 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800890a:	4b39      	ldr	r3, [pc, #228]	@ (80089f0 <xPortStartScheduler+0x130>)
 800890c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	22ff      	movs	r2, #255	@ 0xff
 800891a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	b2db      	uxtb	r3, r3
 8008922:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	b2db      	uxtb	r3, r3
 8008928:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800892c:	b2da      	uxtb	r2, r3
 800892e:	4b31      	ldr	r3, [pc, #196]	@ (80089f4 <xPortStartScheduler+0x134>)
 8008930:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008932:	4b31      	ldr	r3, [pc, #196]	@ (80089f8 <xPortStartScheduler+0x138>)
 8008934:	2207      	movs	r2, #7
 8008936:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008938:	e009      	b.n	800894e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800893a:	4b2f      	ldr	r3, [pc, #188]	@ (80089f8 <xPortStartScheduler+0x138>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3b01      	subs	r3, #1
 8008940:	4a2d      	ldr	r2, [pc, #180]	@ (80089f8 <xPortStartScheduler+0x138>)
 8008942:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	b2db      	uxtb	r3, r3
 800894c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800894e:	78fb      	ldrb	r3, [r7, #3]
 8008950:	b2db      	uxtb	r3, r3
 8008952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008956:	2b80      	cmp	r3, #128	@ 0x80
 8008958:	d0ef      	beq.n	800893a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800895a:	4b27      	ldr	r3, [pc, #156]	@ (80089f8 <xPortStartScheduler+0x138>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f1c3 0307 	rsb	r3, r3, #7
 8008962:	2b04      	cmp	r3, #4
 8008964:	d00b      	beq.n	800897e <xPortStartScheduler+0xbe>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	60bb      	str	r3, [r7, #8]
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	e7fd      	b.n	800897a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800897e:	4b1e      	ldr	r3, [pc, #120]	@ (80089f8 <xPortStartScheduler+0x138>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	021b      	lsls	r3, r3, #8
 8008984:	4a1c      	ldr	r2, [pc, #112]	@ (80089f8 <xPortStartScheduler+0x138>)
 8008986:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008988:	4b1b      	ldr	r3, [pc, #108]	@ (80089f8 <xPortStartScheduler+0x138>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008990:	4a19      	ldr	r2, [pc, #100]	@ (80089f8 <xPortStartScheduler+0x138>)
 8008992:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	b2da      	uxtb	r2, r3
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800899c:	4b17      	ldr	r3, [pc, #92]	@ (80089fc <xPortStartScheduler+0x13c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a16      	ldr	r2, [pc, #88]	@ (80089fc <xPortStartScheduler+0x13c>)
 80089a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80089a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089a8:	4b14      	ldr	r3, [pc, #80]	@ (80089fc <xPortStartScheduler+0x13c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a13      	ldr	r2, [pc, #76]	@ (80089fc <xPortStartScheduler+0x13c>)
 80089ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80089b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089b4:	f000 f8da 	bl	8008b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089b8:	4b11      	ldr	r3, [pc, #68]	@ (8008a00 <xPortStartScheduler+0x140>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089be:	f000 f8f9 	bl	8008bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089c2:	4b10      	ldr	r3, [pc, #64]	@ (8008a04 <xPortStartScheduler+0x144>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008a04 <xPortStartScheduler+0x144>)
 80089c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80089cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089ce:	f7ff ff63 	bl	8008898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089d2:	f7fe ff2d 	bl	8007830 <vTaskSwitchContext>
	prvTaskExitError();
 80089d6:	f7ff ff1b 	bl	8008810 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	e000ed00 	.word	0xe000ed00
 80089e8:	410fc271 	.word	0x410fc271
 80089ec:	410fc270 	.word	0x410fc270
 80089f0:	e000e400 	.word	0xe000e400
 80089f4:	2000151c 	.word	0x2000151c
 80089f8:	20001520 	.word	0x20001520
 80089fc:	e000ed20 	.word	0xe000ed20
 8008a00:	2000000c 	.word	0x2000000c
 8008a04:	e000ef34 	.word	0xe000ef34

08008a08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	607b      	str	r3, [r7, #4]
}
 8008a20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a22:	4b10      	ldr	r3, [pc, #64]	@ (8008a64 <vPortEnterCritical+0x5c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3301      	adds	r3, #1
 8008a28:	4a0e      	ldr	r2, [pc, #56]	@ (8008a64 <vPortEnterCritical+0x5c>)
 8008a2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008a64 <vPortEnterCritical+0x5c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d110      	bne.n	8008a56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a34:	4b0c      	ldr	r3, [pc, #48]	@ (8008a68 <vPortEnterCritical+0x60>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00b      	beq.n	8008a56 <vPortEnterCritical+0x4e>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	603b      	str	r3, [r7, #0]
}
 8008a50:	bf00      	nop
 8008a52:	bf00      	nop
 8008a54:	e7fd      	b.n	8008a52 <vPortEnterCritical+0x4a>
	}
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	2000000c 	.word	0x2000000c
 8008a68:	e000ed04 	.word	0xe000ed04

08008a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a72:	4b12      	ldr	r3, [pc, #72]	@ (8008abc <vPortExitCritical+0x50>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10b      	bne.n	8008a92 <vPortExitCritical+0x26>
	__asm volatile
 8008a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	607b      	str	r3, [r7, #4]
}
 8008a8c:	bf00      	nop
 8008a8e:	bf00      	nop
 8008a90:	e7fd      	b.n	8008a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a92:	4b0a      	ldr	r3, [pc, #40]	@ (8008abc <vPortExitCritical+0x50>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	4a08      	ldr	r2, [pc, #32]	@ (8008abc <vPortExitCritical+0x50>)
 8008a9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a9c:	4b07      	ldr	r3, [pc, #28]	@ (8008abc <vPortExitCritical+0x50>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d105      	bne.n	8008ab0 <vPortExitCritical+0x44>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	f383 8811 	msr	BASEPRI, r3
}
 8008aae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	2000000c 	.word	0x2000000c

08008ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ac0:	f3ef 8009 	mrs	r0, PSP
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	4b15      	ldr	r3, [pc, #84]	@ (8008b20 <pxCurrentTCBConst>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	f01e 0f10 	tst.w	lr, #16
 8008ad0:	bf08      	it	eq
 8008ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ada:	6010      	str	r0, [r2, #0]
 8008adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ae0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ae4:	f380 8811 	msr	BASEPRI, r0
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f7fe fe9e 	bl	8007830 <vTaskSwitchContext>
 8008af4:	f04f 0000 	mov.w	r0, #0
 8008af8:	f380 8811 	msr	BASEPRI, r0
 8008afc:	bc09      	pop	{r0, r3}
 8008afe:	6819      	ldr	r1, [r3, #0]
 8008b00:	6808      	ldr	r0, [r1, #0]
 8008b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b06:	f01e 0f10 	tst.w	lr, #16
 8008b0a:	bf08      	it	eq
 8008b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b10:	f380 8809 	msr	PSP, r0
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	f3af 8000 	nop.w

08008b20 <pxCurrentTCBConst>:
 8008b20:	20000ef0 	.word	0x20000ef0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop

08008b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	607b      	str	r3, [r7, #4]
}
 8008b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b42:	f7fe fdbb 	bl	80076bc <xTaskIncrementTick>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d003      	beq.n	8008b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b4c:	4b06      	ldr	r3, [pc, #24]	@ (8008b68 <xPortSysTickHandler+0x40>)
 8008b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	2300      	movs	r3, #0
 8008b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f383 8811 	msr	BASEPRI, r3
}
 8008b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	e000ed04 	.word	0xe000ed04

08008b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b70:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba0 <vPortSetupTimerInterrupt+0x34>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b76:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba4 <vPortSetupTimerInterrupt+0x38>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba8 <vPortSetupTimerInterrupt+0x3c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0a      	ldr	r2, [pc, #40]	@ (8008bac <vPortSetupTimerInterrupt+0x40>)
 8008b82:	fba2 2303 	umull	r2, r3, r2, r3
 8008b86:	099b      	lsrs	r3, r3, #6
 8008b88:	4a09      	ldr	r2, [pc, #36]	@ (8008bb0 <vPortSetupTimerInterrupt+0x44>)
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b8e:	4b04      	ldr	r3, [pc, #16]	@ (8008ba0 <vPortSetupTimerInterrupt+0x34>)
 8008b90:	2207      	movs	r2, #7
 8008b92:	601a      	str	r2, [r3, #0]
}
 8008b94:	bf00      	nop
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	e000e010 	.word	0xe000e010
 8008ba4:	e000e018 	.word	0xe000e018
 8008ba8:	20000000 	.word	0x20000000
 8008bac:	10624dd3 	.word	0x10624dd3
 8008bb0:	e000e014 	.word	0xe000e014

08008bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008bc4 <vPortEnableVFP+0x10>
 8008bb8:	6801      	ldr	r1, [r0, #0]
 8008bba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008bbe:	6001      	str	r1, [r0, #0]
 8008bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008bc2:	bf00      	nop
 8008bc4:	e000ed88 	.word	0xe000ed88

08008bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bce:	f3ef 8305 	mrs	r3, IPSR
 8008bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b0f      	cmp	r3, #15
 8008bd8:	d915      	bls.n	8008c06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bda:	4a18      	ldr	r2, [pc, #96]	@ (8008c3c <vPortValidateInterruptPriority+0x74>)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4413      	add	r3, r2
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008be4:	4b16      	ldr	r3, [pc, #88]	@ (8008c40 <vPortValidateInterruptPriority+0x78>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	7afa      	ldrb	r2, [r7, #11]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d20b      	bcs.n	8008c06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	607b      	str	r3, [r7, #4]
}
 8008c00:	bf00      	nop
 8008c02:	bf00      	nop
 8008c04:	e7fd      	b.n	8008c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c06:	4b0f      	ldr	r3, [pc, #60]	@ (8008c44 <vPortValidateInterruptPriority+0x7c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c48 <vPortValidateInterruptPriority+0x80>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d90b      	bls.n	8008c2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	603b      	str	r3, [r7, #0]
}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	e7fd      	b.n	8008c2a <vPortValidateInterruptPriority+0x62>
	}
 8008c2e:	bf00      	nop
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	e000e3f0 	.word	0xe000e3f0
 8008c40:	2000151c 	.word	0x2000151c
 8008c44:	e000ed0c 	.word	0xe000ed0c
 8008c48:	20001520 	.word	0x20001520

08008c4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b08a      	sub	sp, #40	@ 0x28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c58:	f7fe fc74 	bl	8007544 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8008dd0 <pvPortMalloc+0x184>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c64:	f000 f924 	bl	8008eb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c68:	4b5a      	ldr	r3, [pc, #360]	@ (8008dd4 <pvPortMalloc+0x188>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f040 8095 	bne.w	8008da0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01e      	beq.n	8008cba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008c7c:	2208      	movs	r2, #8
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4413      	add	r3, r2
 8008c82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d015      	beq.n	8008cba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f023 0307 	bic.w	r3, r3, #7
 8008c94:	3308      	adds	r3, #8
 8008c96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f003 0307 	and.w	r3, r3, #7
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00b      	beq.n	8008cba <pvPortMalloc+0x6e>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	617b      	str	r3, [r7, #20]
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
 8008cb8:	e7fd      	b.n	8008cb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d06f      	beq.n	8008da0 <pvPortMalloc+0x154>
 8008cc0:	4b45      	ldr	r3, [pc, #276]	@ (8008dd8 <pvPortMalloc+0x18c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d86a      	bhi.n	8008da0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008cca:	4b44      	ldr	r3, [pc, #272]	@ (8008ddc <pvPortMalloc+0x190>)
 8008ccc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008cce:	4b43      	ldr	r3, [pc, #268]	@ (8008ddc <pvPortMalloc+0x190>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cd4:	e004      	b.n	8008ce0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d903      	bls.n	8008cf2 <pvPortMalloc+0xa6>
 8008cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1f1      	bne.n	8008cd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008cf2:	4b37      	ldr	r3, [pc, #220]	@ (8008dd0 <pvPortMalloc+0x184>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d051      	beq.n	8008da0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2208      	movs	r2, #8
 8008d02:	4413      	add	r3, r2
 8008d04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	1ad2      	subs	r2, r2, r3
 8008d16:	2308      	movs	r3, #8
 8008d18:	005b      	lsls	r3, r3, #1
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d920      	bls.n	8008d60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4413      	add	r3, r2
 8008d24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	f003 0307 	and.w	r3, r3, #7
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00b      	beq.n	8008d48 <pvPortMalloc+0xfc>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	613b      	str	r3, [r7, #16]
}
 8008d42:	bf00      	nop
 8008d44:	bf00      	nop
 8008d46:	e7fd      	b.n	8008d44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	1ad2      	subs	r2, r2, r3
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d5a:	69b8      	ldr	r0, [r7, #24]
 8008d5c:	f000 f90a 	bl	8008f74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d60:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd8 <pvPortMalloc+0x18c>)
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8008dd8 <pvPortMalloc+0x18c>)
 8008d6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008dd8 <pvPortMalloc+0x18c>)
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	4b1b      	ldr	r3, [pc, #108]	@ (8008de0 <pvPortMalloc+0x194>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d203      	bcs.n	8008d82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d7a:	4b17      	ldr	r3, [pc, #92]	@ (8008dd8 <pvPortMalloc+0x18c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a18      	ldr	r2, [pc, #96]	@ (8008de0 <pvPortMalloc+0x194>)
 8008d80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	4b13      	ldr	r3, [pc, #76]	@ (8008dd4 <pvPortMalloc+0x188>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d96:	4b13      	ldr	r3, [pc, #76]	@ (8008de4 <pvPortMalloc+0x198>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	4a11      	ldr	r2, [pc, #68]	@ (8008de4 <pvPortMalloc+0x198>)
 8008d9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008da0:	f7fe fbde 	bl	8007560 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	f003 0307 	and.w	r3, r3, #7
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00b      	beq.n	8008dc6 <pvPortMalloc+0x17a>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	60fb      	str	r3, [r7, #12]
}
 8008dc0:	bf00      	nop
 8008dc2:	bf00      	nop
 8008dc4:	e7fd      	b.n	8008dc2 <pvPortMalloc+0x176>
	return pvReturn;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3728      	adds	r7, #40	@ 0x28
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	200020e4 	.word	0x200020e4
 8008dd4:	200020f8 	.word	0x200020f8
 8008dd8:	200020e8 	.word	0x200020e8
 8008ddc:	200020dc 	.word	0x200020dc
 8008de0:	200020ec 	.word	0x200020ec
 8008de4:	200020f0 	.word	0x200020f0

08008de8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d04f      	beq.n	8008e9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008dfa:	2308      	movs	r3, #8
 8008dfc:	425b      	negs	r3, r3
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	4413      	add	r3, r2
 8008e02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	4b25      	ldr	r3, [pc, #148]	@ (8008ea4 <vPortFree+0xbc>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4013      	ands	r3, r2
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10b      	bne.n	8008e2e <vPortFree+0x46>
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	60fb      	str	r3, [r7, #12]
}
 8008e28:	bf00      	nop
 8008e2a:	bf00      	nop
 8008e2c:	e7fd      	b.n	8008e2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00b      	beq.n	8008e4e <vPortFree+0x66>
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e3a:	f383 8811 	msr	BASEPRI, r3
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f3bf 8f4f 	dsb	sy
 8008e46:	60bb      	str	r3, [r7, #8]
}
 8008e48:	bf00      	nop
 8008e4a:	bf00      	nop
 8008e4c:	e7fd      	b.n	8008e4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	4b14      	ldr	r3, [pc, #80]	@ (8008ea4 <vPortFree+0xbc>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4013      	ands	r3, r2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d01e      	beq.n	8008e9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d11a      	bne.n	8008e9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ea4 <vPortFree+0xbc>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	43db      	mvns	r3, r3
 8008e6e:	401a      	ands	r2, r3
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e74:	f7fe fb66 	bl	8007544 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ea8 <vPortFree+0xc0>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4413      	add	r3, r2
 8008e82:	4a09      	ldr	r2, [pc, #36]	@ (8008ea8 <vPortFree+0xc0>)
 8008e84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e86:	6938      	ldr	r0, [r7, #16]
 8008e88:	f000 f874 	bl	8008f74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e8c:	4b07      	ldr	r3, [pc, #28]	@ (8008eac <vPortFree+0xc4>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3301      	adds	r3, #1
 8008e92:	4a06      	ldr	r2, [pc, #24]	@ (8008eac <vPortFree+0xc4>)
 8008e94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e96:	f7fe fb63 	bl	8007560 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e9a:	bf00      	nop
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	200020f8 	.word	0x200020f8
 8008ea8:	200020e8 	.word	0x200020e8
 8008eac:	200020f4 	.word	0x200020f4

08008eb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008eb6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008eba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ebc:	4b27      	ldr	r3, [pc, #156]	@ (8008f5c <prvHeapInit+0xac>)
 8008ebe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f003 0307 	and.w	r3, r3, #7
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00c      	beq.n	8008ee4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3307      	adds	r3, #7
 8008ece:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f023 0307 	bic.w	r3, r3, #7
 8008ed6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	4a1f      	ldr	r2, [pc, #124]	@ (8008f5c <prvHeapInit+0xac>)
 8008ee0:	4413      	add	r3, r2
 8008ee2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f60 <prvHeapInit+0xb0>)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008eee:	4b1c      	ldr	r3, [pc, #112]	@ (8008f60 <prvHeapInit+0xb0>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	4413      	add	r3, r2
 8008efa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008efc:	2208      	movs	r2, #8
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	1a9b      	subs	r3, r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f023 0307 	bic.w	r3, r3, #7
 8008f0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4a15      	ldr	r2, [pc, #84]	@ (8008f64 <prvHeapInit+0xb4>)
 8008f10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f12:	4b14      	ldr	r3, [pc, #80]	@ (8008f64 <prvHeapInit+0xb4>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2200      	movs	r2, #0
 8008f18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f1a:	4b12      	ldr	r3, [pc, #72]	@ (8008f64 <prvHeapInit+0xb4>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	1ad2      	subs	r2, r2, r3
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f30:	4b0c      	ldr	r3, [pc, #48]	@ (8008f64 <prvHeapInit+0xb4>)
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008f68 <prvHeapInit+0xb8>)
 8008f3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	4a09      	ldr	r2, [pc, #36]	@ (8008f6c <prvHeapInit+0xbc>)
 8008f46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f48:	4b09      	ldr	r3, [pc, #36]	@ (8008f70 <prvHeapInit+0xc0>)
 8008f4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f4e:	601a      	str	r2, [r3, #0]
}
 8008f50:	bf00      	nop
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	20001524 	.word	0x20001524
 8008f60:	200020dc 	.word	0x200020dc
 8008f64:	200020e4 	.word	0x200020e4
 8008f68:	200020ec 	.word	0x200020ec
 8008f6c:	200020e8 	.word	0x200020e8
 8008f70:	200020f8 	.word	0x200020f8

08008f74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f7c:	4b28      	ldr	r3, [pc, #160]	@ (8009020 <prvInsertBlockIntoFreeList+0xac>)
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	e002      	b.n	8008f88 <prvInsertBlockIntoFreeList+0x14>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d8f7      	bhi.n	8008f82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d108      	bne.n	8008fb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	441a      	add	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	441a      	add	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d118      	bne.n	8008ffc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	4b15      	ldr	r3, [pc, #84]	@ (8009024 <prvInsertBlockIntoFreeList+0xb0>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d00d      	beq.n	8008ff2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	441a      	add	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	e008      	b.n	8009004 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8009024 <prvInsertBlockIntoFreeList+0xb0>)
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	e003      	b.n	8009004 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	429a      	cmp	r2, r3
 800900a:	d002      	beq.n	8009012 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009012:	bf00      	nop
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	200020dc 	.word	0x200020dc
 8009024:	200020e4 	.word	0x200020e4

08009028 <memset>:
 8009028:	4402      	add	r2, r0
 800902a:	4603      	mov	r3, r0
 800902c:	4293      	cmp	r3, r2
 800902e:	d100      	bne.n	8009032 <memset+0xa>
 8009030:	4770      	bx	lr
 8009032:	f803 1b01 	strb.w	r1, [r3], #1
 8009036:	e7f9      	b.n	800902c <memset+0x4>

08009038 <__libc_init_array>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	4d0d      	ldr	r5, [pc, #52]	@ (8009070 <__libc_init_array+0x38>)
 800903c:	4c0d      	ldr	r4, [pc, #52]	@ (8009074 <__libc_init_array+0x3c>)
 800903e:	1b64      	subs	r4, r4, r5
 8009040:	10a4      	asrs	r4, r4, #2
 8009042:	2600      	movs	r6, #0
 8009044:	42a6      	cmp	r6, r4
 8009046:	d109      	bne.n	800905c <__libc_init_array+0x24>
 8009048:	4d0b      	ldr	r5, [pc, #44]	@ (8009078 <__libc_init_array+0x40>)
 800904a:	4c0c      	ldr	r4, [pc, #48]	@ (800907c <__libc_init_array+0x44>)
 800904c:	f000 f826 	bl	800909c <_init>
 8009050:	1b64      	subs	r4, r4, r5
 8009052:	10a4      	asrs	r4, r4, #2
 8009054:	2600      	movs	r6, #0
 8009056:	42a6      	cmp	r6, r4
 8009058:	d105      	bne.n	8009066 <__libc_init_array+0x2e>
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009060:	4798      	blx	r3
 8009062:	3601      	adds	r6, #1
 8009064:	e7ee      	b.n	8009044 <__libc_init_array+0xc>
 8009066:	f855 3b04 	ldr.w	r3, [r5], #4
 800906a:	4798      	blx	r3
 800906c:	3601      	adds	r6, #1
 800906e:	e7f2      	b.n	8009056 <__libc_init_array+0x1e>
 8009070:	08009288 	.word	0x08009288
 8009074:	08009288 	.word	0x08009288
 8009078:	08009288 	.word	0x08009288
 800907c:	0800928c 	.word	0x0800928c

08009080 <memcpy>:
 8009080:	440a      	add	r2, r1
 8009082:	4291      	cmp	r1, r2
 8009084:	f100 33ff 	add.w	r3, r0, #4294967295
 8009088:	d100      	bne.n	800908c <memcpy+0xc>
 800908a:	4770      	bx	lr
 800908c:	b510      	push	{r4, lr}
 800908e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009096:	4291      	cmp	r1, r2
 8009098:	d1f9      	bne.n	800908e <memcpy+0xe>
 800909a:	bd10      	pop	{r4, pc}

0800909c <_init>:
 800909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909e:	bf00      	nop
 80090a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090a2:	bc08      	pop	{r3}
 80090a4:	469e      	mov	lr, r3
 80090a6:	4770      	bx	lr

080090a8 <_fini>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	bf00      	nop
 80090ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ae:	bc08      	pop	{r3}
 80090b0:	469e      	mov	lr, r3
 80090b2:	4770      	bx	lr
