
BLE_Gatt_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b744  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800b8d4  0800b8d4  0000c8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd7c  0800bd7c  0000d084  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd7c  0800bd7c  0000cd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd84  0800bd84  0000d084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd84  0800bd84  0000cd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd88  0800bd88  0000cd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800bd8c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000233c  20000084  0800be10  0000d084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023c0  0800be10  0000d3c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000278ea  00000000  00000000  0000d0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005aea  00000000  00000000  0003499e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022e0  00000000  00000000  0003a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ade  00000000  00000000  0003c768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030a5f  00000000  00000000  0003e246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c7df  00000000  00000000  0006eca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111b97  00000000  00000000  0009b484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ad01b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cdc  00000000  00000000  001ad060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b6d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8bc 	.word	0x0800b8bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800b8bc 	.word	0x0800b8bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2f>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000600:	bf24      	itt	cs
 8000602:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000606:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800060a:	d90d      	bls.n	8000628 <__aeabi_d2f+0x30>
 800060c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000610:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000614:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000618:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800061c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000620:	bf08      	it	eq
 8000622:	f020 0001 	biceq.w	r0, r0, #1
 8000626:	4770      	bx	lr
 8000628:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800062c:	d121      	bne.n	8000672 <__aeabi_d2f+0x7a>
 800062e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000632:	bfbc      	itt	lt
 8000634:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000638:	4770      	bxlt	lr
 800063a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000642:	f1c2 0218 	rsb	r2, r2, #24
 8000646:	f1c2 0c20 	rsb	ip, r2, #32
 800064a:	fa10 f30c 	lsls.w	r3, r0, ip
 800064e:	fa20 f002 	lsr.w	r0, r0, r2
 8000652:	bf18      	it	ne
 8000654:	f040 0001 	orrne.w	r0, r0, #1
 8000658:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800065c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000660:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000664:	ea40 000c 	orr.w	r0, r0, ip
 8000668:	fa23 f302 	lsr.w	r3, r3, r2
 800066c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000670:	e7cc      	b.n	800060c <__aeabi_d2f+0x14>
 8000672:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000676:	d107      	bne.n	8000688 <__aeabi_d2f+0x90>
 8000678:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800067c:	bf1e      	ittt	ne
 800067e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000682:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000686:	4770      	bxne	lr
 8000688:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800068c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000690:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b96a 	b.w	8000984 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	460c      	mov	r4, r1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d14e      	bne.n	8000772 <__udivmoddi4+0xaa>
 80006d4:	4694      	mov	ip, r2
 80006d6:	458c      	cmp	ip, r1
 80006d8:	4686      	mov	lr, r0
 80006da:	fab2 f282 	clz	r2, r2
 80006de:	d962      	bls.n	80007a6 <__udivmoddi4+0xde>
 80006e0:	b14a      	cbz	r2, 80006f6 <__udivmoddi4+0x2e>
 80006e2:	f1c2 0320 	rsb	r3, r2, #32
 80006e6:	4091      	lsls	r1, r2
 80006e8:	fa20 f303 	lsr.w	r3, r0, r3
 80006ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80006f0:	4319      	orrs	r1, r3
 80006f2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006fa:	fa1f f68c 	uxth.w	r6, ip
 80006fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000702:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000706:	fb07 1114 	mls	r1, r7, r4, r1
 800070a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800070e:	fb04 f106 	mul.w	r1, r4, r6
 8000712:	4299      	cmp	r1, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x64>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f104 30ff 	add.w	r0, r4, #4294967295
 800071e:	f080 8112 	bcs.w	8000946 <__udivmoddi4+0x27e>
 8000722:	4299      	cmp	r1, r3
 8000724:	f240 810f 	bls.w	8000946 <__udivmoddi4+0x27e>
 8000728:	3c02      	subs	r4, #2
 800072a:	4463      	add	r3, ip
 800072c:	1a59      	subs	r1, r3, r1
 800072e:	fa1f f38e 	uxth.w	r3, lr
 8000732:	fbb1 f0f7 	udiv	r0, r1, r7
 8000736:	fb07 1110 	mls	r1, r7, r0, r1
 800073a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800073e:	fb00 f606 	mul.w	r6, r0, r6
 8000742:	429e      	cmp	r6, r3
 8000744:	d90a      	bls.n	800075c <__udivmoddi4+0x94>
 8000746:	eb1c 0303 	adds.w	r3, ip, r3
 800074a:	f100 31ff 	add.w	r1, r0, #4294967295
 800074e:	f080 80fc 	bcs.w	800094a <__udivmoddi4+0x282>
 8000752:	429e      	cmp	r6, r3
 8000754:	f240 80f9 	bls.w	800094a <__udivmoddi4+0x282>
 8000758:	4463      	add	r3, ip
 800075a:	3802      	subs	r0, #2
 800075c:	1b9b      	subs	r3, r3, r6
 800075e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000762:	2100      	movs	r1, #0
 8000764:	b11d      	cbz	r5, 800076e <__udivmoddi4+0xa6>
 8000766:	40d3      	lsrs	r3, r2
 8000768:	2200      	movs	r2, #0
 800076a:	e9c5 3200 	strd	r3, r2, [r5]
 800076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000772:	428b      	cmp	r3, r1
 8000774:	d905      	bls.n	8000782 <__udivmoddi4+0xba>
 8000776:	b10d      	cbz	r5, 800077c <__udivmoddi4+0xb4>
 8000778:	e9c5 0100 	strd	r0, r1, [r5]
 800077c:	2100      	movs	r1, #0
 800077e:	4608      	mov	r0, r1
 8000780:	e7f5      	b.n	800076e <__udivmoddi4+0xa6>
 8000782:	fab3 f183 	clz	r1, r3
 8000786:	2900      	cmp	r1, #0
 8000788:	d146      	bne.n	8000818 <__udivmoddi4+0x150>
 800078a:	42a3      	cmp	r3, r4
 800078c:	d302      	bcc.n	8000794 <__udivmoddi4+0xcc>
 800078e:	4290      	cmp	r0, r2
 8000790:	f0c0 80f0 	bcc.w	8000974 <__udivmoddi4+0x2ac>
 8000794:	1a86      	subs	r6, r0, r2
 8000796:	eb64 0303 	sbc.w	r3, r4, r3
 800079a:	2001      	movs	r0, #1
 800079c:	2d00      	cmp	r5, #0
 800079e:	d0e6      	beq.n	800076e <__udivmoddi4+0xa6>
 80007a0:	e9c5 6300 	strd	r6, r3, [r5]
 80007a4:	e7e3      	b.n	800076e <__udivmoddi4+0xa6>
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	f040 8090 	bne.w	80008cc <__udivmoddi4+0x204>
 80007ac:	eba1 040c 	sub.w	r4, r1, ip
 80007b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007b4:	fa1f f78c 	uxth.w	r7, ip
 80007b8:	2101      	movs	r1, #1
 80007ba:	fbb4 f6f8 	udiv	r6, r4, r8
 80007be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007c2:	fb08 4416 	mls	r4, r8, r6, r4
 80007c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007ca:	fb07 f006 	mul.w	r0, r7, r6
 80007ce:	4298      	cmp	r0, r3
 80007d0:	d908      	bls.n	80007e4 <__udivmoddi4+0x11c>
 80007d2:	eb1c 0303 	adds.w	r3, ip, r3
 80007d6:	f106 34ff 	add.w	r4, r6, #4294967295
 80007da:	d202      	bcs.n	80007e2 <__udivmoddi4+0x11a>
 80007dc:	4298      	cmp	r0, r3
 80007de:	f200 80cd 	bhi.w	800097c <__udivmoddi4+0x2b4>
 80007e2:	4626      	mov	r6, r4
 80007e4:	1a1c      	subs	r4, r3, r0
 80007e6:	fa1f f38e 	uxth.w	r3, lr
 80007ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80007ee:	fb08 4410 	mls	r4, r8, r0, r4
 80007f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007f6:	fb00 f707 	mul.w	r7, r0, r7
 80007fa:	429f      	cmp	r7, r3
 80007fc:	d908      	bls.n	8000810 <__udivmoddi4+0x148>
 80007fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000802:	f100 34ff 	add.w	r4, r0, #4294967295
 8000806:	d202      	bcs.n	800080e <__udivmoddi4+0x146>
 8000808:	429f      	cmp	r7, r3
 800080a:	f200 80b0 	bhi.w	800096e <__udivmoddi4+0x2a6>
 800080e:	4620      	mov	r0, r4
 8000810:	1bdb      	subs	r3, r3, r7
 8000812:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000816:	e7a5      	b.n	8000764 <__udivmoddi4+0x9c>
 8000818:	f1c1 0620 	rsb	r6, r1, #32
 800081c:	408b      	lsls	r3, r1
 800081e:	fa22 f706 	lsr.w	r7, r2, r6
 8000822:	431f      	orrs	r7, r3
 8000824:	fa20 fc06 	lsr.w	ip, r0, r6
 8000828:	fa04 f301 	lsl.w	r3, r4, r1
 800082c:	ea43 030c 	orr.w	r3, r3, ip
 8000830:	40f4      	lsrs	r4, r6
 8000832:	fa00 f801 	lsl.w	r8, r0, r1
 8000836:	0c38      	lsrs	r0, r7, #16
 8000838:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800083c:	fbb4 fef0 	udiv	lr, r4, r0
 8000840:	fa1f fc87 	uxth.w	ip, r7
 8000844:	fb00 441e 	mls	r4, r0, lr, r4
 8000848:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800084c:	fb0e f90c 	mul.w	r9, lr, ip
 8000850:	45a1      	cmp	r9, r4
 8000852:	fa02 f201 	lsl.w	r2, r2, r1
 8000856:	d90a      	bls.n	800086e <__udivmoddi4+0x1a6>
 8000858:	193c      	adds	r4, r7, r4
 800085a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800085e:	f080 8084 	bcs.w	800096a <__udivmoddi4+0x2a2>
 8000862:	45a1      	cmp	r9, r4
 8000864:	f240 8081 	bls.w	800096a <__udivmoddi4+0x2a2>
 8000868:	f1ae 0e02 	sub.w	lr, lr, #2
 800086c:	443c      	add	r4, r7
 800086e:	eba4 0409 	sub.w	r4, r4, r9
 8000872:	fa1f f983 	uxth.w	r9, r3
 8000876:	fbb4 f3f0 	udiv	r3, r4, r0
 800087a:	fb00 4413 	mls	r4, r0, r3, r4
 800087e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000882:	fb03 fc0c 	mul.w	ip, r3, ip
 8000886:	45a4      	cmp	ip, r4
 8000888:	d907      	bls.n	800089a <__udivmoddi4+0x1d2>
 800088a:	193c      	adds	r4, r7, r4
 800088c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000890:	d267      	bcs.n	8000962 <__udivmoddi4+0x29a>
 8000892:	45a4      	cmp	ip, r4
 8000894:	d965      	bls.n	8000962 <__udivmoddi4+0x29a>
 8000896:	3b02      	subs	r3, #2
 8000898:	443c      	add	r4, r7
 800089a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800089e:	fba0 9302 	umull	r9, r3, r0, r2
 80008a2:	eba4 040c 	sub.w	r4, r4, ip
 80008a6:	429c      	cmp	r4, r3
 80008a8:	46ce      	mov	lr, r9
 80008aa:	469c      	mov	ip, r3
 80008ac:	d351      	bcc.n	8000952 <__udivmoddi4+0x28a>
 80008ae:	d04e      	beq.n	800094e <__udivmoddi4+0x286>
 80008b0:	b155      	cbz	r5, 80008c8 <__udivmoddi4+0x200>
 80008b2:	ebb8 030e 	subs.w	r3, r8, lr
 80008b6:	eb64 040c 	sbc.w	r4, r4, ip
 80008ba:	fa04 f606 	lsl.w	r6, r4, r6
 80008be:	40cb      	lsrs	r3, r1
 80008c0:	431e      	orrs	r6, r3
 80008c2:	40cc      	lsrs	r4, r1
 80008c4:	e9c5 6400 	strd	r6, r4, [r5]
 80008c8:	2100      	movs	r1, #0
 80008ca:	e750      	b.n	800076e <__udivmoddi4+0xa6>
 80008cc:	f1c2 0320 	rsb	r3, r2, #32
 80008d0:	fa20 f103 	lsr.w	r1, r0, r3
 80008d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d8:	fa24 f303 	lsr.w	r3, r4, r3
 80008dc:	4094      	lsls	r4, r2
 80008de:	430c      	orrs	r4, r1
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008e8:	fa1f f78c 	uxth.w	r7, ip
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3110 	mls	r1, r8, r0, r3
 80008f4:	0c23      	lsrs	r3, r4, #16
 80008f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008fa:	fb00 f107 	mul.w	r1, r0, r7
 80008fe:	4299      	cmp	r1, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x24c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f100 36ff 	add.w	r6, r0, #4294967295
 800090a:	d22c      	bcs.n	8000966 <__udivmoddi4+0x29e>
 800090c:	4299      	cmp	r1, r3
 800090e:	d92a      	bls.n	8000966 <__udivmoddi4+0x29e>
 8000910:	3802      	subs	r0, #2
 8000912:	4463      	add	r3, ip
 8000914:	1a5b      	subs	r3, r3, r1
 8000916:	b2a4      	uxth	r4, r4
 8000918:	fbb3 f1f8 	udiv	r1, r3, r8
 800091c:	fb08 3311 	mls	r3, r8, r1, r3
 8000920:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000924:	fb01 f307 	mul.w	r3, r1, r7
 8000928:	42a3      	cmp	r3, r4
 800092a:	d908      	bls.n	800093e <__udivmoddi4+0x276>
 800092c:	eb1c 0404 	adds.w	r4, ip, r4
 8000930:	f101 36ff 	add.w	r6, r1, #4294967295
 8000934:	d213      	bcs.n	800095e <__udivmoddi4+0x296>
 8000936:	42a3      	cmp	r3, r4
 8000938:	d911      	bls.n	800095e <__udivmoddi4+0x296>
 800093a:	3902      	subs	r1, #2
 800093c:	4464      	add	r4, ip
 800093e:	1ae4      	subs	r4, r4, r3
 8000940:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000944:	e739      	b.n	80007ba <__udivmoddi4+0xf2>
 8000946:	4604      	mov	r4, r0
 8000948:	e6f0      	b.n	800072c <__udivmoddi4+0x64>
 800094a:	4608      	mov	r0, r1
 800094c:	e706      	b.n	800075c <__udivmoddi4+0x94>
 800094e:	45c8      	cmp	r8, r9
 8000950:	d2ae      	bcs.n	80008b0 <__udivmoddi4+0x1e8>
 8000952:	ebb9 0e02 	subs.w	lr, r9, r2
 8000956:	eb63 0c07 	sbc.w	ip, r3, r7
 800095a:	3801      	subs	r0, #1
 800095c:	e7a8      	b.n	80008b0 <__udivmoddi4+0x1e8>
 800095e:	4631      	mov	r1, r6
 8000960:	e7ed      	b.n	800093e <__udivmoddi4+0x276>
 8000962:	4603      	mov	r3, r0
 8000964:	e799      	b.n	800089a <__udivmoddi4+0x1d2>
 8000966:	4630      	mov	r0, r6
 8000968:	e7d4      	b.n	8000914 <__udivmoddi4+0x24c>
 800096a:	46d6      	mov	lr, sl
 800096c:	e77f      	b.n	800086e <__udivmoddi4+0x1a6>
 800096e:	4463      	add	r3, ip
 8000970:	3802      	subs	r0, #2
 8000972:	e74d      	b.n	8000810 <__udivmoddi4+0x148>
 8000974:	4606      	mov	r6, r0
 8000976:	4623      	mov	r3, r4
 8000978:	4608      	mov	r0, r1
 800097a:	e70f      	b.n	800079c <__udivmoddi4+0xd4>
 800097c:	3e02      	subs	r6, #2
 800097e:	4463      	add	r3, ip
 8000980:	e730      	b.n	80007e4 <__udivmoddi4+0x11c>
 8000982:	bf00      	nop

08000984 <__aeabi_idiv0>:
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000988:	b5b0      	push	{r4, r5, r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "Blue111";
 800098e:	4b60      	ldr	r3, [pc, #384]	@ (8000b10 <MX_BlueNRG_MS_Init+0x188>)
 8000990:	613b      	str	r3, [r7, #16]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000992:	f000 f8f1 	bl	8000b78 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000996:	2000      	movs	r0, #0
 8000998:	f002 ff52 	bl	8003840 <BSP_PB_GetState>
 800099c:	4603      	mov	r3, r0
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b5c      	ldr	r3, [pc, #368]	@ (8000b14 <MX_BlueNRG_MS_Init+0x18c>)
 80009a2:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80009a4:	2100      	movs	r1, #0
 80009a6:	485c      	ldr	r0, [pc, #368]	@ (8000b18 <MX_BlueNRG_MS_Init+0x190>)
 80009a8:	f008 f972 	bl	8008c90 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80009ac:	1dba      	adds	r2, r7, #6
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f007 ffe0 	bl	800897a <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80009ba:	f008 f822 	bl	8008a02 <hci_reset>
  HAL_Delay(100);
 80009be:	2064      	movs	r0, #100	@ 0x64
 80009c0:	f003 f9ee 	bl	8003da0 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
 80009c4:	7a3b      	ldrb	r3, [r7, #8]
 80009c6:	4619      	mov	r1, r3
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	461a      	mov	r2, r3
 80009cc:	4853      	ldr	r0, [pc, #332]	@ (8000b1c <MX_BlueNRG_MS_Init+0x194>)
 80009ce:	f00a f817 	bl	800aa00 <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80009d2:	7a3b      	ldrb	r3, [r7, #8]
 80009d4:	2b30      	cmp	r3, #48	@ 0x30
 80009d6:	d902      	bls.n	80009de <MX_BlueNRG_MS_Init+0x56>
    bnrg_expansion_board = IDB05A1;
 80009d8:	4b51      	ldr	r3, [pc, #324]	@ (8000b20 <MX_BlueNRG_MS_Init+0x198>)
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 80009de:	f107 0209 	add.w	r2, r7, #9
 80009e2:	4b50      	ldr	r3, [pc, #320]	@ (8000b24 <MX_BlueNRG_MS_Init+0x19c>)
 80009e4:	2106      	movs	r1, #6
 80009e6:	2080      	movs	r0, #128	@ 0x80
 80009e8:	f007 ff41 	bl	800886e <aci_hal_read_config_data>
 80009ec:	4603      	mov	r3, r0
 80009ee:	617b      	str	r3, [r7, #20]

  if (ret) {
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <MX_BlueNRG_MS_Init+0x74>
    PRINTF("Read Static Random address failed.\n");
 80009f6:	484c      	ldr	r0, [pc, #304]	@ (8000b28 <MX_BlueNRG_MS_Init+0x1a0>)
 80009f8:	f00a f86a 	bl	800aad0 <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 80009fc:	4b49      	ldr	r3, [pc, #292]	@ (8000b24 <MX_BlueNRG_MS_Init+0x19c>)
 80009fe:	795b      	ldrb	r3, [r3, #5]
 8000a00:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000a04:	2bc0      	cmp	r3, #192	@ 0xc0
 8000a06:	d004      	beq.n	8000a12 <MX_BlueNRG_MS_Init+0x8a>
    PRINTF("Static Random address not well formed.\n");
 8000a08:	4848      	ldr	r0, [pc, #288]	@ (8000b2c <MX_BlueNRG_MS_Init+0x1a4>)
 8000a0a:	f00a f861 	bl	800aad0 <puts>
    while(1);
 8000a0e:	bf00      	nop
 8000a10:	e7fd      	b.n	8000a0e <MX_BlueNRG_MS_Init+0x86>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000a12:	f007 fca2 	bl	800835a <aci_gatt_init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	617b      	str	r3, [r7, #20]
  if(ret){
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <MX_BlueNRG_MS_Init+0x9e>
    PRINTF("GATT_Init failed.\n");
 8000a20:	4843      	ldr	r0, [pc, #268]	@ (8000b30 <MX_BlueNRG_MS_Init+0x1a8>)
 8000a22:	f00a f855 	bl	800aad0 <puts>
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000a26:	4b3e      	ldr	r3, [pc, #248]	@ (8000b20 <MX_BlueNRG_MS_Init+0x198>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d110      	bne.n	8000a50 <MX_BlueNRG_MS_Init+0xc8>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a2e:	f107 020e 	add.w	r2, r7, #14
 8000a32:	f107 030a 	add.w	r3, r7, #10
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	2207      	movs	r2, #7
 8000a42:	2100      	movs	r1, #0
 8000a44:	2001      	movs	r0, #1
 8000a46:	f007 fa5c 	bl	8007f02 <aci_gap_init_IDB05A1>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	e00a      	b.n	8000a66 <MX_BlueNRG_MS_Init+0xde>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a50:	f107 030a 	add.w	r3, r7, #10
 8000a54:	f107 020c 	add.w	r2, r7, #12
 8000a58:	f107 010e 	add.w	r1, r7, #14
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f007 faa0 	bl	8007fa2 <aci_gap_init_IDB04A1>
 8000a62:	4603      	mov	r3, r0
 8000a64:	617b      	str	r3, [r7, #20]
  }
  if (ret != BLE_STATUS_SUCCESS) {
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <MX_BlueNRG_MS_Init+0xea>
    PRINTF("GAP_Init failed.\n");
 8000a6c:	4831      	ldr	r0, [pc, #196]	@ (8000b34 <MX_BlueNRG_MS_Init+0x1ac>)
 8000a6e:	f00a f82f 	bl	800aad0 <puts>
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a72:	89fc      	ldrh	r4, [r7, #14]
 8000a74:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000a76:	6938      	ldr	r0, [r7, #16]
 8000a78:	f7ff fbaa 	bl	80001d0 <strlen>
 8000a7c:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	4613      	mov	r3, r2
 8000a86:	2200      	movs	r2, #0
 8000a88:	4629      	mov	r1, r5
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f007 fddc 	bl	8008648 <aci_gatt_update_char_value>
 8000a90:	4603      	mov	r3, r0
 8000a92:	617b      	str	r3, [r7, #20]
  if (ret) {
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d004      	beq.n	8000aa4 <MX_BlueNRG_MS_Init+0x11c>
    PRINTF("aci_gatt_update_char_value failed.\n");
 8000a9a:	4827      	ldr	r0, [pc, #156]	@ (8000b38 <MX_BlueNRG_MS_Init+0x1b0>)
 8000a9c:	f00a f818 	bl	800aad0 <puts>
    while(1);
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <MX_BlueNRG_MS_Init+0x118>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	9303      	str	r3, [sp, #12]
 8000aa8:	4b24      	ldr	r3, [pc, #144]	@ (8000b3c <MX_BlueNRG_MS_Init+0x1b4>)
 8000aaa:	9302      	str	r3, [sp, #8]
 8000aac:	2300      	movs	r3, #0
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2001      	movs	r0, #1
 8000abc:	f007 fba5 	bl	800820a <aci_gap_set_auth_requirement>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d004      	beq.n	8000ad4 <MX_BlueNRG_MS_Init+0x14c>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
 8000aca:	481d      	ldr	r0, [pc, #116]	@ (8000b40 <MX_BlueNRG_MS_Init+0x1b8>)
 8000acc:	f00a f800 	bl	800aad0 <puts>
    while(1);
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <MX_BlueNRG_MS_Init+0x148>
  }

  PRINTF("BLE Stack Initialized\n");
 8000ad4:	481b      	ldr	r0, [pc, #108]	@ (8000b44 <MX_BlueNRG_MS_Init+0x1bc>)
 8000ad6:	f009 fffb 	bl	800aad0 <puts>

  ret = Add_HWServW2ST_Service();
 8000ada:	f001 fa9b 	bl	8002014 <Add_HWServW2ST_Service>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d103      	bne.n	8000af0 <MX_BlueNRG_MS_Init+0x168>
    PRINTF("BlueMS HW service added successfully.\n");
 8000ae8:	4817      	ldr	r0, [pc, #92]	@ (8000b48 <MX_BlueNRG_MS_Init+0x1c0>)
 8000aea:	f009 fff1 	bl	800aad0 <puts>
 8000aee:	e005      	b.n	8000afc <MX_BlueNRG_MS_Init+0x174>
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 8000af0:	6979      	ldr	r1, [r7, #20]
 8000af2:	4816      	ldr	r0, [pc, #88]	@ (8000b4c <MX_BlueNRG_MS_Init+0x1c4>)
 8000af4:	f009 ff84 	bl	800aa00 <iprintf>
    while(1);
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <MX_BlueNRG_MS_Init+0x170>
//     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
//     while(1);
//  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000afc:	2104      	movs	r1, #4
 8000afe:	2001      	movs	r0, #1
 8000b00:	f007 ff0a 	bl	8008918 <aci_hal_set_tx_power_level>
 8000b04:	4603      	mov	r3, r0
 8000b06:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b10:	0800b8d4 	.word	0x0800b8d4
 8000b14:	20000000 	.word	0x20000000
 8000b18:	08002485 	.word	0x08002485
 8000b1c:	0800b8dc 	.word	0x0800b8dc
 8000b20:	200000a0 	.word	0x200000a0
 8000b24:	200000a4 	.word	0x200000a4
 8000b28:	0800b8f0 	.word	0x0800b8f0
 8000b2c:	0800b914 	.word	0x0800b914
 8000b30:	0800b93c 	.word	0x0800b93c
 8000b34:	0800b950 	.word	0x0800b950
 8000b38:	0800b964 	.word	0x0800b964
 8000b3c:	0001e240 	.word	0x0001e240
 8000b40:	0800b988 	.word	0x0800b988
 8000b44:	0800b9b8 	.word	0x0800b9b8
 8000b48:	0800b9d0 	.word	0x0800b9d0
 8000b4c:	0800b9f8 	.word	0x0800b9f8

08000b50 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

	if (set_connectable)
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <MX_BlueNRG_MS_Process+0x24>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d004      	beq.n	8000b68 <MX_BlueNRG_MS_Process+0x18>
	  {
	    Set_DeviceConnectable();
 8000b5e:	f001 fc05 	bl	800236c <Set_DeviceConnectable>
	    set_connectable = FALSE;
 8000b62:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <MX_BlueNRG_MS_Process+0x24>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
	  }
	User_Process();
 8000b68:	f000 f814 	bl	8000b94 <User_Process>
	hci_user_evt_proc();
 8000b6c:	f008 fa0a 	bl	8008f84 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000001 	.word	0x20000001

08000b78 <User_Init>:
 *
 * @param  None
 * @retval None
 */
void User_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f002 fe0a 	bl	8003798 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000b84:	2000      	movs	r0, #0
 8000b86:	f002 fd9f 	bl	80036c8 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f002 feb6 	bl	80038fc <BSP_COM_Init>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <User_Process>:
 *
 * @param  None
 * @retval None
 */
void User_Process(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f002 fda6 	bl	80036ec <BSP_LED_Toggle>

    if (connected)
 8000ba0:	4b22      	ldr	r3, [pc, #136]	@ (8000c2c <User_Process+0x98>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d03d      	beq.n	8000c24 <User_Process+0x90>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8000ba8:	f003 f8ee 	bl	8003d88 <HAL_GetTick>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f009 fdf8 	bl	800a7a4 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8000bb4:	463a      	mov	r2, r7
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f842 	bl	8000c44 <Set_Random_Environmental_Values>
      //BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <User_Process+0x9c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f8bd 	bl	8000d44 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 8000bca:	4a1a      	ldr	r2, [pc, #104]	@ (8000c34 <User_Process+0xa0>)
 8000bcc:	491a      	ldr	r1, [pc, #104]	@ (8000c38 <User_Process+0xa4>)
 8000bce:	481b      	ldr	r0, [pc, #108]	@ (8000c3c <User_Process+0xa8>)
 8000bd0:	f001 faf2 	bl	80021b8 <Acc_Update>
      //Quat_Update(&q_axes);

      counter ++;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <User_Process+0x9c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4a15      	ldr	r2, [pc, #84]	@ (8000c30 <User_Process+0x9c>)
 8000bdc:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <User_Process+0x9c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b28      	cmp	r3, #40	@ 0x28
 8000be4:	d104      	bne.n	8000bf0 <User_Process+0x5c>
        counter = 0;
 8000be6:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <User_Process+0x9c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8000bec:	f001 f918 	bl	8001e20 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      int delay = Get_freq();
 8000bf0:	f001 fb94 	bl	800231c <Get_freq>
 8000bf4:	60f8      	str	r0, [r7, #12]
      PRINTF("%d\n",Get_freq());
 8000bf6:	f001 fb91 	bl	800231c <Get_freq>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4810      	ldr	r0, [pc, #64]	@ (8000c40 <User_Process+0xac>)
 8000c00:	f009 fefe 	bl	800aa00 <iprintf>
      for(int i=0; i<delay; i=i+1){
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	e008      	b.n	8000c1c <User_Process+0x88>
    	  HAL_Delay(10); /* wait 1 sec before sending new data */
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f003 f8c8 	bl	8003da0 <HAL_Delay>
    	  delay = Get_freq();
 8000c10:	f001 fb84 	bl	800231c <Get_freq>
 8000c14:	60f8      	str	r0, [r7, #12]
      for(int i=0; i<delay; i=i+1){
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68ba      	ldr	r2, [r7, #8]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf2      	blt.n	8000c0a <User_Process+0x76>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200000dc 	.word	0x200000dc
 8000c30:	200000ac 	.word	0x200000ac
 8000c34:	200000f8 	.word	0x200000f8
 8000c38:	200000ec 	.word	0x200000ec
 8000c3c:	200000e0 	.word	0x200000e0
 8000c40:	0800ba28 	.word	0x0800ba28

08000c44 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8000c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8000c50:	f009 fdd6 	bl	800a800 <rand>
 8000c54:	4603      	mov	r3, r0
 8000c56:	17da      	asrs	r2, r3, #31
 8000c58:	469a      	mov	sl, r3
 8000c5a:	4693      	mov	fp, r2
 8000c5c:	4652      	mov	r2, sl
 8000c5e:	465b      	mov	r3, fp
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	f04f 0100 	mov.w	r1, #0
 8000c68:	0099      	lsls	r1, r3, #2
 8000c6a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000c6e:	0090      	lsls	r0, r2, #2
 8000c70:	4602      	mov	r2, r0
 8000c72:	460b      	mov	r3, r1
 8000c74:	eb12 010a 	adds.w	r1, r2, sl
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	eb43 030b 	adc.w	r3, r3, fp
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c8c:	f7ff fd04 	bl	8000698 <__aeabi_uldivmod>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	4610      	mov	r0, r2
 8000c96:	4619      	mov	r1, r3
 8000c98:	f7ff fc78 	bl	800058c <__aeabi_ul2d>
 8000c9c:	f04f 0200 	mov.w	r2, #0
 8000ca0:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <Set_Random_Environmental_Values+0xf8>)
 8000ca2:	f7ff faf3 	bl	800028c <__adddf3>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4610      	mov	r0, r2
 8000cac:	4619      	mov	r1, r3
 8000cae:	f7ff fca3 	bl	80005f8 <__aeabi_d2f>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8000cb8:	f009 fda2 	bl	800a800 <rand>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	17da      	asrs	r2, r3, #31
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	4691      	mov	r9, r2
 8000cc4:	4642      	mov	r2, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	f04f 0000 	mov.w	r0, #0
 8000ccc:	f04f 0100 	mov.w	r1, #0
 8000cd0:	0099      	lsls	r1, r3, #2
 8000cd2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000cd6:	0090      	lsls	r0, r2, #2
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	eb12 0408 	adds.w	r4, r2, r8
 8000ce0:	eb43 0509 	adc.w	r5, r3, r9
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	012b      	lsls	r3, r5, #4
 8000cee:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000cf2:	0122      	lsls	r2, r4, #4
 8000cf4:	4614      	mov	r4, r2
 8000cf6:	461d      	mov	r5, r3
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	f7ff fcc8 	bl	8000698 <__aeabi_uldivmod>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f7ff fc3c 	bl	800058c <__aeabi_ul2d>
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <Set_Random_Environmental_Values+0xfc>)
 8000d1a:	f7ff fab7 	bl	800028c <__adddf3>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f7ff fc67 	bl	80005f8 <__aeabi_d2f>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	601a      	str	r2, [r3, #0]
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000d3a:	bf00      	nop
 8000d3c:	403b0000 	.word	0x403b0000
 8000d40:	408f4000 	.word	0x408f4000

08000d44 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8000d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d48:	f5ad 7d7a 	sub.w	sp, sp, #1000	@ 0x3e8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	f8c7 03e4 	str.w	r0, [r7, #996]	@ 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 8000d52:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000d56:	2b13      	cmp	r3, #19
 8000d58:	f200 8426 	bhi.w	80015a8 <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8000d5c:	f009 fd50 	bl	800a800 <rand>
 8000d60:	4603      	mov	r3, r0
 8000d62:	17da      	asrs	r2, r3, #31
 8000d64:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8000d68:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 8000d6c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000d70:	2200      	movs	r2, #0
 8000d72:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 8000d76:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 8000d7a:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 8000d7e:	462b      	mov	r3, r5
 8000d80:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	@ 0x320
 8000d84:	4652      	mov	r2, sl
 8000d86:	fb02 f203 	mul.w	r2, r2, r3
 8000d8a:	465b      	mov	r3, fp
 8000d8c:	4621      	mov	r1, r4
 8000d8e:	fb01 f303 	mul.w	r3, r1, r3
 8000d92:	4413      	add	r3, r2
 8000d94:	4622      	mov	r2, r4
 8000d96:	4651      	mov	r1, sl
 8000d98:	fba2 8901 	umull	r8, r9, r2, r1
 8000d9c:	444b      	add	r3, r9
 8000d9e:	4699      	mov	r9, r3
 8000da0:	4642      	mov	r2, r8
 8000da2:	464b      	mov	r3, r9
 8000da4:	1891      	adds	r1, r2, r2
 8000da6:	66b9      	str	r1, [r7, #104]	@ 0x68
 8000da8:	415b      	adcs	r3, r3
 8000daa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000dac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000db0:	eb12 0108 	adds.w	r1, r2, r8
 8000db4:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
 8000db8:	eb43 0309 	adc.w	r3, r3, r9
 8000dbc:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8000dc0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
 8000dcc:	f7ff fc64 	bl	8000698 <__aeabi_uldivmod>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	f112 010a 	adds.w	r1, r2, #10
 8000dd8:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8000ddc:	f143 0300 	adc.w	r3, r3, #0
 8000de0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000de4:	4bec      	ldr	r3, [pc, #944]	@ (8001198 <Set_Random_Motion_Values+0x454>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000dee:	4413      	add	r3, r2
 8000df0:	461a      	mov	r2, r3
 8000df2:	4be9      	ldr	r3, [pc, #932]	@ (8001198 <Set_Random_Motion_Values+0x454>)
 8000df4:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8000df6:	f009 fd03 	bl	800a800 <rand>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	17da      	asrs	r2, r3, #31
 8000dfe:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8000e02:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 8000e06:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8000e10:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8000e14:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	@ 0x310
 8000e18:	462b      	mov	r3, r5
 8000e1a:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	@ 0x308
 8000e1e:	4642      	mov	r2, r8
 8000e20:	fb02 f203 	mul.w	r2, r2, r3
 8000e24:	464b      	mov	r3, r9
 8000e26:	4621      	mov	r1, r4
 8000e28:	fb01 f303 	mul.w	r3, r1, r3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4622      	mov	r2, r4
 8000e30:	4641      	mov	r1, r8
 8000e32:	fba2 1201 	umull	r1, r2, r2, r1
 8000e36:	f8c7 23dc 	str.w	r2, [r7, #988]	@ 0x3dc
 8000e3a:	460a      	mov	r2, r1
 8000e3c:	f8c7 23d8 	str.w	r2, [r7, #984]	@ 0x3d8
 8000e40:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 8000e44:	4413      	add	r3, r2
 8000e46:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 8000e4a:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 8000e4e:	4622      	mov	r2, r4
 8000e50:	462b      	mov	r3, r5
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	f04f 0100 	mov.w	r1, #0
 8000e5a:	0099      	lsls	r1, r3, #2
 8000e5c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e60:	0090      	lsls	r0, r2, #2
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4621      	mov	r1, r4
 8000e68:	1851      	adds	r1, r2, r1
 8000e6a:	f8c7 1300 	str.w	r1, [r7, #768]	@ 0x300
 8000e6e:	4629      	mov	r1, r5
 8000e70:	eb43 0101 	adc.w	r1, r3, r1
 8000e74:	f8c7 1304 	str.w	r1, [r7, #772]	@ 0x304
 8000e78:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 8000e84:	f7ff fc08 	bl	8000698 <__aeabi_uldivmod>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	f06f 0009 	mvn.w	r0, #9
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	1a80      	subs	r0, r0, r2
 8000e96:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000ea2:	4bbd      	ldr	r3, [pc, #756]	@ (8001198 <Set_Random_Motion_Values+0x454>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000eac:	4413      	add	r3, r2
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4bb9      	ldr	r3, [pc, #740]	@ (8001198 <Set_Random_Motion_Values+0x454>)
 8000eb2:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8000eb4:	f009 fca4 	bl	800a800 <rand>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	17da      	asrs	r2, r3, #31
 8000ebc:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8000ec0:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 8000ec4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8000ece:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 8000ed2:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 8000ed6:	462b      	mov	r3, r5
 8000ed8:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	@ 0x2f0
 8000edc:	4642      	mov	r2, r8
 8000ede:	fb02 f203 	mul.w	r2, r2, r3
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	4621      	mov	r1, r4
 8000ee6:	fb01 f303 	mul.w	r3, r1, r3
 8000eea:	4413      	add	r3, r2
 8000eec:	4622      	mov	r2, r4
 8000eee:	4641      	mov	r1, r8
 8000ef0:	fba2 1201 	umull	r1, r2, r2, r1
 8000ef4:	f8c7 23d4 	str.w	r2, [r7, #980]	@ 0x3d4
 8000ef8:	460a      	mov	r2, r1
 8000efa:	f8c7 23d0 	str.w	r2, [r7, #976]	@ 0x3d0
 8000efe:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 8000f02:	4413      	add	r3, r2
 8000f04:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8000f08:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 8000f0c:	4622      	mov	r2, r4
 8000f0e:	462b      	mov	r3, r5
 8000f10:	f04f 0000 	mov.w	r0, #0
 8000f14:	f04f 0100 	mov.w	r1, #0
 8000f18:	00d9      	lsls	r1, r3, #3
 8000f1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000f1e:	00d0      	lsls	r0, r2, #3
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4621      	mov	r1, r4
 8000f26:	1a51      	subs	r1, r2, r1
 8000f28:	f8c7 12e8 	str.w	r1, [r7, #744]	@ 0x2e8
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8000f32:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8000f36:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8000f42:	f7ff fba9 	bl	8000698 <__aeabi_uldivmod>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	f112 010a 	adds.w	r1, r2, #10
 8000f4e:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8000f52:	f143 0300 	adc.w	r3, r3, #0
 8000f56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000f5a:	4b8f      	ldr	r3, [pc, #572]	@ (8001198 <Set_Random_Motion_Values+0x454>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000f64:	4413      	add	r3, r2
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b8b      	ldr	r3, [pc, #556]	@ (8001198 <Set_Random_Motion_Values+0x454>)
 8000f6a:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8000f6c:	f009 fc48 	bl	800a800 <rand>
 8000f70:	4603      	mov	r3, r0
 8000f72:	17da      	asrs	r2, r3, #31
 8000f74:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8000f78:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8000f7c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000f80:	2200      	movs	r2, #0
 8000f82:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8000f86:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8000f8a:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 8000f8e:	462b      	mov	r3, r5
 8000f90:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	@ 0x2d8
 8000f94:	4642      	mov	r2, r8
 8000f96:	fb02 f203 	mul.w	r2, r2, r3
 8000f9a:	464b      	mov	r3, r9
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	fb01 f303 	mul.w	r3, r1, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4622      	mov	r2, r4
 8000fa6:	4641      	mov	r1, r8
 8000fa8:	fba2 1201 	umull	r1, r2, r2, r1
 8000fac:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	f8c7 23c8 	str.w	r2, [r7, #968]	@ 0x3c8
 8000fb6:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8000fba:	4413      	add	r3, r2
 8000fbc:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8000fc0:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	@ 0x3c8
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	18db      	adds	r3, r3, r3
 8000fc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8000fca:	4613      	mov	r3, r2
 8000fcc:	eb42 0303 	adc.w	r3, r2, r3
 8000fd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8000fd2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8000fd6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	f7ff fb5b 	bl	8000698 <__aeabi_uldivmod>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8000fea:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8000fee:	f143 0300 	adc.w	r3, r3, #0
 8000ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000ff6:	4b69      	ldr	r3, [pc, #420]	@ (800119c <Set_Random_Motion_Values+0x458>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001000:	4413      	add	r3, r2
 8001002:	461a      	mov	r2, r3
 8001004:	4b65      	ldr	r3, [pc, #404]	@ (800119c <Set_Random_Motion_Values+0x458>)
 8001006:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001008:	f009 fbfa 	bl	800a800 <rand>
 800100c:	4603      	mov	r3, r0
 800100e:	17da      	asrs	r2, r3, #31
 8001010:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8001014:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8001018:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800101c:	2200      	movs	r2, #0
 800101e:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8001022:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 8001026:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 800102a:	462b      	mov	r3, r5
 800102c:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	@ 0x2c8
 8001030:	4642      	mov	r2, r8
 8001032:	fb02 f203 	mul.w	r2, r2, r3
 8001036:	464b      	mov	r3, r9
 8001038:	4621      	mov	r1, r4
 800103a:	fb01 f303 	mul.w	r3, r1, r3
 800103e:	4413      	add	r3, r2
 8001040:	4622      	mov	r2, r4
 8001042:	4641      	mov	r1, r8
 8001044:	fba2 1201 	umull	r1, r2, r2, r1
 8001048:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 800104c:	460a      	mov	r2, r1
 800104e:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 8001052:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 8001056:	4413      	add	r3, r2
 8001058:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	f04f 0100 	mov.w	r1, #0
 8001064:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	@ 0x3c0
 8001068:	462b      	mov	r3, r5
 800106a:	0099      	lsls	r1, r3, #2
 800106c:	4623      	mov	r3, r4
 800106e:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001072:	4623      	mov	r3, r4
 8001074:	0098      	lsls	r0, r3, #2
 8001076:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	f7ff fb0b 	bl	8000698 <__aeabi_uldivmod>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800108a:	f04f 31ff 	mov.w	r1, #4294967295
 800108e:	1a80      	subs	r0, r0, r2
 8001090:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 8001094:	eb61 0303 	sbc.w	r3, r1, r3
 8001098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800109c:	4b3f      	ldr	r3, [pc, #252]	@ (800119c <Set_Random_Motion_Values+0x458>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	461a      	mov	r2, r3
 80010a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80010a6:	4413      	add	r3, r2
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b3c      	ldr	r3, [pc, #240]	@ (800119c <Set_Random_Motion_Values+0x458>)
 80010ac:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 80010ae:	f009 fba7 	bl	800a800 <rand>
 80010b2:	4603      	mov	r3, r0
 80010b4:	17da      	asrs	r2, r3, #31
 80010b6:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 80010ba:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 80010be:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80010c2:	2200      	movs	r2, #0
 80010c4:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 80010c8:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 80010cc:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 80010d0:	462b      	mov	r3, r5
 80010d2:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	@ 0x2b8
 80010d6:	4642      	mov	r2, r8
 80010d8:	fb02 f203 	mul.w	r2, r2, r3
 80010dc:	464b      	mov	r3, r9
 80010de:	4621      	mov	r1, r4
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	4622      	mov	r2, r4
 80010e8:	4641      	mov	r1, r8
 80010ea:	fba2 1201 	umull	r1, r2, r2, r1
 80010ee:	f8c7 23bc 	str.w	r2, [r7, #956]	@ 0x3bc
 80010f2:	460a      	mov	r2, r1
 80010f4:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
 80010f8:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 80010fc:	4413      	add	r3, r2
 80010fe:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8001102:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 8001106:	4622      	mov	r2, r4
 8001108:	462b      	mov	r3, r5
 800110a:	1891      	adds	r1, r2, r2
 800110c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800110e:	415b      	adcs	r3, r3
 8001110:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001112:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001116:	4621      	mov	r1, r4
 8001118:	1851      	adds	r1, r2, r1
 800111a:	6539      	str	r1, [r7, #80]	@ 0x50
 800111c:	4629      	mov	r1, r5
 800111e:	eb43 0101 	adc.w	r1, r3, r1
 8001122:	6579      	str	r1, [r7, #84]	@ 0x54
 8001124:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8001128:	460b      	mov	r3, r1
 800112a:	18db      	adds	r3, r3, r3
 800112c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800112e:	4613      	mov	r3, r2
 8001130:	eb42 0303 	adc.w	r3, r2, r3
 8001134:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001136:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800113a:	4618      	mov	r0, r3
 800113c:	4621      	mov	r1, r4
 800113e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	f7ff faa7 	bl	8000698 <__aeabi_uldivmod>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001152:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8001156:	f143 0300 	adc.w	r3, r3, #0
 800115a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <Set_Random_Motion_Values+0x458>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	461a      	mov	r2, r3
 8001164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001168:	4413      	add	r3, r2
 800116a:	461a      	mov	r2, r3
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <Set_Random_Motion_Values+0x458>)
 800116e:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001170:	f009 fb46 	bl	800a800 <rand>
 8001174:	4603      	mov	r3, r0
 8001176:	17da      	asrs	r2, r3, #31
 8001178:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800117c:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8001180:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001184:	2200      	movs	r2, #0
 8001186:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 800118a:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 800118e:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 8001192:	462b      	mov	r3, r5
 8001194:	e004      	b.n	80011a0 <Set_Random_Motion_Values+0x45c>
 8001196:	bf00      	nop
 8001198:	200000e0 	.word	0x200000e0
 800119c:	200000ec 	.word	0x200000ec
 80011a0:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	@ 0x2a8
 80011a4:	4642      	mov	r2, r8
 80011a6:	fb02 f203 	mul.w	r2, r2, r3
 80011aa:	464b      	mov	r3, r9
 80011ac:	4621      	mov	r1, r4
 80011ae:	fb01 f303 	mul.w	r3, r1, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	4622      	mov	r2, r4
 80011b6:	4641      	mov	r1, r8
 80011b8:	fba2 1201 	umull	r1, r2, r2, r1
 80011bc:	f8c7 23b4 	str.w	r2, [r7, #948]	@ 0x3b4
 80011c0:	460a      	mov	r2, r1
 80011c2:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 80011c6:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 80011ca:	4413      	add	r3, r2
 80011cc:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 80011d0:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	@ 0x3b0
 80011d4:	4622      	mov	r2, r4
 80011d6:	462b      	mov	r3, r5
 80011d8:	1891      	adds	r1, r2, r2
 80011da:	6439      	str	r1, [r7, #64]	@ 0x40
 80011dc:	415b      	adcs	r3, r3
 80011de:	647b      	str	r3, [r7, #68]	@ 0x44
 80011e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80011e4:	4621      	mov	r1, r4
 80011e6:	1851      	adds	r1, r2, r1
 80011e8:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 80011ec:	4629      	mov	r1, r5
 80011ee:	eb43 0101 	adc.w	r1, r3, r1
 80011f2:	f8c7 12a4 	str.w	r1, [r7, #676]	@ 0x2a4
 80011f6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
 8001202:	f7ff fa49 	bl	8000698 <__aeabi_uldivmod>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	1cd1      	adds	r1, r2, #3
 800120c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001210:	f143 0300 	adc.w	r3, r3, #0
 8001214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001218:	4be1      	ldr	r3, [pc, #900]	@ (80015a0 <Set_Random_Motion_Values+0x85c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001222:	4413      	add	r3, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4bde      	ldr	r3, [pc, #888]	@ (80015a0 <Set_Random_Motion_Values+0x85c>)
 8001228:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800122a:	f009 fae9 	bl	800a800 <rand>
 800122e:	4603      	mov	r3, r0
 8001230:	17da      	asrs	r2, r3, #31
 8001232:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001236:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 800123a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800123e:	2200      	movs	r2, #0
 8001240:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001244:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8001248:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 800124c:	462b      	mov	r3, r5
 800124e:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 8001252:	4642      	mov	r2, r8
 8001254:	fb02 f203 	mul.w	r2, r2, r3
 8001258:	464b      	mov	r3, r9
 800125a:	4621      	mov	r1, r4
 800125c:	fb01 f303 	mul.w	r3, r1, r3
 8001260:	4413      	add	r3, r2
 8001262:	4622      	mov	r2, r4
 8001264:	4641      	mov	r1, r8
 8001266:	fba2 1201 	umull	r1, r2, r2, r1
 800126a:	f8c7 23ac 	str.w	r2, [r7, #940]	@ 0x3ac
 800126e:	460a      	mov	r2, r1
 8001270:	f8c7 23a8 	str.w	r2, [r7, #936]	@ 0x3a8
 8001274:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8001278:	4413      	add	r3, r2
 800127a:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 800127e:	f04f 0000 	mov.w	r0, #0
 8001282:	f04f 0100 	mov.w	r1, #0
 8001286:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 800128a:	462b      	mov	r3, r5
 800128c:	0099      	lsls	r1, r3, #2
 800128e:	4623      	mov	r3, r4
 8001290:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001294:	4623      	mov	r3, r4
 8001296:	0098      	lsls	r0, r3, #2
 8001298:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	f7ff f9fa 	bl	8000698 <__aeabi_uldivmod>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	f06f 0002 	mvn.w	r0, #2
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	1a80      	subs	r0, r0, r2
 80012b2:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 80012b6:	eb61 0303 	sbc.w	r3, r1, r3
 80012ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80012be:	4bb8      	ldr	r3, [pc, #736]	@ (80015a0 <Set_Random_Motion_Values+0x85c>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	461a      	mov	r2, r3
 80012c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012c8:	4413      	add	r3, r2
 80012ca:	461a      	mov	r2, r3
 80012cc:	4bb4      	ldr	r3, [pc, #720]	@ (80015a0 <Set_Random_Motion_Values+0x85c>)
 80012ce:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80012d0:	f009 fa96 	bl	800a800 <rand>
 80012d4:	4603      	mov	r3, r0
 80012d6:	17da      	asrs	r2, r3, #31
 80012d8:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 80012dc:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 80012e0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80012e4:	2200      	movs	r2, #0
 80012e6:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 80012ea:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 80012ee:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	@ 0x288
 80012f2:	462b      	mov	r3, r5
 80012f4:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 80012f8:	4642      	mov	r2, r8
 80012fa:	fb02 f203 	mul.w	r2, r2, r3
 80012fe:	464b      	mov	r3, r9
 8001300:	4621      	mov	r1, r4
 8001302:	fb01 f303 	mul.w	r3, r1, r3
 8001306:	4413      	add	r3, r2
 8001308:	4622      	mov	r2, r4
 800130a:	4641      	mov	r1, r8
 800130c:	fba2 1201 	umull	r1, r2, r2, r1
 8001310:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8001314:	460a      	mov	r2, r1
 8001316:	f8c7 23a0 	str.w	r2, [r7, #928]	@ 0x3a0
 800131a:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 800131e:	4413      	add	r3, r2
 8001320:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8001324:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	@ 0x3a0
 8001328:	4622      	mov	r2, r4
 800132a:	462b      	mov	r3, r5
 800132c:	f04f 0000 	mov.w	r0, #0
 8001330:	f04f 0100 	mov.w	r1, #0
 8001334:	0099      	lsls	r1, r3, #2
 8001336:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800133a:	0090      	lsls	r0, r2, #2
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4621      	mov	r1, r4
 8001342:	1851      	adds	r1, r2, r1
 8001344:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 8001348:	4629      	mov	r1, r5
 800134a:	eb43 0101 	adc.w	r1, r3, r1
 800134e:	f8c7 127c 	str.w	r1, [r7, #636]	@ 0x27c
 8001352:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001356:	f04f 0300 	mov.w	r3, #0
 800135a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 800135e:	f7ff f99b 	bl	8000698 <__aeabi_uldivmod>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	1cd1      	adds	r1, r2, #3
 8001368:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800136c:	f143 0300 	adc.w	r3, r3, #0
 8001370:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001374:	4b8a      	ldr	r3, [pc, #552]	@ (80015a0 <Set_Random_Motion_Values+0x85c>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	461a      	mov	r2, r3
 800137a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800137e:	4413      	add	r3, r2
 8001380:	461a      	mov	r2, r3
 8001382:	4b87      	ldr	r3, [pc, #540]	@ (80015a0 <Set_Random_Motion_Values+0x85c>)
 8001384:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001386:	f009 fa3b 	bl	800a800 <rand>
 800138a:	4603      	mov	r3, r0
 800138c:	17da      	asrs	r2, r3, #31
 800138e:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8001392:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8001396:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800139a:	2200      	movs	r2, #0
 800139c:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 80013a0:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 80013a4:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 80013a8:	462b      	mov	r3, r5
 80013aa:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	@ 0x268
 80013ae:	4642      	mov	r2, r8
 80013b0:	fb02 f203 	mul.w	r2, r2, r3
 80013b4:	464b      	mov	r3, r9
 80013b6:	4621      	mov	r1, r4
 80013b8:	fb01 f303 	mul.w	r3, r1, r3
 80013bc:	4413      	add	r3, r2
 80013be:	4622      	mov	r2, r4
 80013c0:	4641      	mov	r1, r8
 80013c2:	fba2 1201 	umull	r1, r2, r2, r1
 80013c6:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
 80013ca:	460a      	mov	r2, r1
 80013cc:	f8c7 2398 	str.w	r2, [r7, #920]	@ 0x398
 80013d0:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 80013d4:	4413      	add	r3, r2
 80013d6:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 80013da:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 80013de:	4622      	mov	r2, r4
 80013e0:	462b      	mov	r3, r5
 80013e2:	1891      	adds	r1, r2, r2
 80013e4:	63b9      	str	r1, [r7, #56]	@ 0x38
 80013e6:	415b      	adcs	r3, r3
 80013e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80013ee:	4621      	mov	r1, r4
 80013f0:	1851      	adds	r1, r2, r1
 80013f2:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 80013f6:	4629      	mov	r1, r5
 80013f8:	eb43 0101 	adc.w	r1, r3, r1
 80013fc:	f8c7 1264 	str.w	r1, [r7, #612]	@ 0x264
 8001400:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 800140c:	f7ff f944 	bl	8000698 <__aeabi_uldivmod>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001418:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800141c:	f143 0300 	adc.w	r3, r3, #0
 8001420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001424:	4b5f      	ldr	r3, [pc, #380]	@ (80015a4 <Set_Random_Motion_Values+0x860>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4b5c      	ldr	r3, [pc, #368]	@ (80015a4 <Set_Random_Motion_Values+0x860>)
 8001434:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001436:	f009 f9e3 	bl	800a800 <rand>
 800143a:	4603      	mov	r3, r0
 800143c:	17da      	asrs	r2, r3, #31
 800143e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8001442:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8001446:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800144a:	2200      	movs	r2, #0
 800144c:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8001450:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8001454:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8001458:	462b      	mov	r3, r5
 800145a:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	@ 0x250
 800145e:	4642      	mov	r2, r8
 8001460:	fb02 f203 	mul.w	r2, r2, r3
 8001464:	464b      	mov	r3, r9
 8001466:	4621      	mov	r1, r4
 8001468:	fb01 f303 	mul.w	r3, r1, r3
 800146c:	4413      	add	r3, r2
 800146e:	4622      	mov	r2, r4
 8001470:	4641      	mov	r1, r8
 8001472:	fba2 1201 	umull	r1, r2, r2, r1
 8001476:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 800147a:	460a      	mov	r2, r1
 800147c:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
 8001480:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 8001484:	4413      	add	r3, r2
 8001486:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 800148a:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 800148e:	4622      	mov	r2, r4
 8001490:	462b      	mov	r3, r5
 8001492:	f04f 0000 	mov.w	r0, #0
 8001496:	f04f 0100 	mov.w	r1, #0
 800149a:	0099      	lsls	r1, r3, #2
 800149c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014a0:	0090      	lsls	r0, r2, #2
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4621      	mov	r1, r4
 80014a8:	1851      	adds	r1, r2, r1
 80014aa:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 80014ae:	4629      	mov	r1, r5
 80014b0:	eb43 0101 	adc.w	r1, r3, r1
 80014b4:	f8c7 124c 	str.w	r1, [r7, #588]	@ 0x24c
 80014b8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 80014c4:	f7ff f8e8 	bl	8000698 <__aeabi_uldivmod>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 80014d0:	67b9      	str	r1, [r7, #120]	@ 0x78
 80014d2:	f143 0300 	adc.w	r3, r3, #0
 80014d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014d8:	4b32      	ldr	r3, [pc, #200]	@ (80015a4 <Set_Random_Motion_Values+0x860>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	461a      	mov	r2, r3
 80014de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014e0:	4413      	add	r3, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <Set_Random_Motion_Values+0x860>)
 80014e6:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80014e8:	f009 f98a 	bl	800a800 <rand>
 80014ec:	4603      	mov	r3, r0
 80014ee:	17da      	asrs	r2, r3, #31
 80014f0:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 80014f4:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 80014f8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80014fc:	2200      	movs	r2, #0
 80014fe:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8001502:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8001506:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 800150a:	462b      	mov	r3, r5
 800150c:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	@ 0x238
 8001510:	4642      	mov	r2, r8
 8001512:	fb02 f203 	mul.w	r2, r2, r3
 8001516:	464b      	mov	r3, r9
 8001518:	4621      	mov	r1, r4
 800151a:	fb01 f303 	mul.w	r3, r1, r3
 800151e:	4413      	add	r3, r2
 8001520:	4622      	mov	r2, r4
 8001522:	4641      	mov	r1, r8
 8001524:	fba2 1201 	umull	r1, r2, r2, r1
 8001528:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 800152c:	460a      	mov	r2, r1
 800152e:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
 8001532:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8001536:	4413      	add	r3, r2
 8001538:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 800153c:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 8001540:	4622      	mov	r2, r4
 8001542:	462b      	mov	r3, r5
 8001544:	f04f 0000 	mov.w	r0, #0
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	00d9      	lsls	r1, r3, #3
 800154e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001552:	00d0      	lsls	r0, r2, #3
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4621      	mov	r1, r4
 800155a:	1a51      	subs	r1, r2, r1
 800155c:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
 8001560:	4629      	mov	r1, r5
 8001562:	eb63 0301 	sbc.w	r3, r3, r1
 8001566:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800156a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8001576:	f7ff f88f 	bl	8000698 <__aeabi_uldivmod>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001582:	6739      	str	r1, [r7, #112]	@ 0x70
 8001584:	f143 0300 	adc.w	r3, r3, #0
 8001588:	677b      	str	r3, [r7, #116]	@ 0x74
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <Set_Random_Motion_Values+0x860>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	461a      	mov	r2, r3
 8001590:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	461a      	mov	r2, r3
 8001596:	4b03      	ldr	r3, [pc, #12]	@ (80015a4 <Set_Random_Motion_Values+0x860>)
 8001598:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 800159a:	f000 bc37 	b.w	8001e0c <Set_Random_Motion_Values+0x10c8>
 800159e:	bf00      	nop
 80015a0:	200000f8 	.word	0x200000f8
 80015a4:	20000104 	.word	0x20000104
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80015a8:	f009 f92a 	bl	800a800 <rand>
 80015ac:	4603      	mov	r3, r0
 80015ae:	17da      	asrs	r2, r3, #31
 80015b0:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 80015b4:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 80015b8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80015bc:	2200      	movs	r2, #0
 80015be:	469a      	mov	sl, r3
 80015c0:	4693      	mov	fp, r2
 80015c2:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80015c6:	460b      	mov	r3, r1
 80015c8:	fb0a f203 	mul.w	r2, sl, r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	fb03 f30b 	mul.w	r3, r3, fp
 80015d2:	4413      	add	r3, r2
 80015d4:	4602      	mov	r2, r0
 80015d6:	fba2 450a 	umull	r4, r5, r2, sl
 80015da:	442b      	add	r3, r5
 80015dc:	461d      	mov	r5, r3
 80015de:	4622      	mov	r2, r4
 80015e0:	462b      	mov	r3, r5
 80015e2:	1891      	adds	r1, r2, r2
 80015e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80015e6:	415b      	adcs	r3, r3
 80015e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80015ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80015ee:	1911      	adds	r1, r2, r4
 80015f0:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
 80015f4:	416b      	adcs	r3, r5
 80015f6:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 80015fa:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8001606:	f7ff f847 	bl	8000698 <__aeabi_uldivmod>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	f06f 0009 	mvn.w	r0, #9
 8001612:	f04f 31ff 	mov.w	r1, #4294967295
 8001616:	1a80      	subs	r0, r0, r2
 8001618:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 800161c:	eb61 0303 	sbc.w	r3, r1, r3
 8001620:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001624:	4beb      	ldr	r3, [pc, #940]	@ (80019d4 <Set_Random_Motion_Values+0xc90>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800162e:	4413      	add	r3, r2
 8001630:	461a      	mov	r2, r3
 8001632:	4be8      	ldr	r3, [pc, #928]	@ (80019d4 <Set_Random_Motion_Values+0xc90>)
 8001634:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001636:	f009 f8e3 	bl	800a800 <rand>
 800163a:	4603      	mov	r3, r0
 800163c:	17da      	asrs	r2, r3, #31
 800163e:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8001642:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8001646:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800164a:	2200      	movs	r2, #0
 800164c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001650:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8001654:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8001658:	462b      	mov	r3, r5
 800165a:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	@ 0x210
 800165e:	4642      	mov	r2, r8
 8001660:	fb02 f203 	mul.w	r2, r2, r3
 8001664:	464b      	mov	r3, r9
 8001666:	4621      	mov	r1, r4
 8001668:	fb01 f303 	mul.w	r3, r1, r3
 800166c:	4413      	add	r3, r2
 800166e:	4622      	mov	r2, r4
 8001670:	4641      	mov	r1, r8
 8001672:	fba2 1201 	umull	r1, r2, r2, r1
 8001676:	f8c7 2384 	str.w	r2, [r7, #900]	@ 0x384
 800167a:	460a      	mov	r2, r1
 800167c:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8001680:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8001684:	4413      	add	r3, r2
 8001686:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 800168a:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 800168e:	4622      	mov	r2, r4
 8001690:	462b      	mov	r3, r5
 8001692:	f04f 0000 	mov.w	r0, #0
 8001696:	f04f 0100 	mov.w	r1, #0
 800169a:	0099      	lsls	r1, r3, #2
 800169c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80016a0:	0090      	lsls	r0, r2, #2
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4621      	mov	r1, r4
 80016a8:	1851      	adds	r1, r2, r1
 80016aa:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 80016ae:	4629      	mov	r1, r5
 80016b0:	eb43 0101 	adc.w	r1, r3, r1
 80016b4:	f8c7 120c 	str.w	r1, [r7, #524]	@ 0x20c
 80016b8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 80016c4:	f7fe ffe8 	bl	8000698 <__aeabi_uldivmod>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	f112 010a 	adds.w	r1, r2, #10
 80016d0:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 80016d4:	f143 0300 	adc.w	r3, r3, #0
 80016d8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80016dc:	4bbd      	ldr	r3, [pc, #756]	@ (80019d4 <Set_Random_Motion_Values+0xc90>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	461a      	mov	r2, r3
 80016e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016e6:	4413      	add	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	4bba      	ldr	r3, [pc, #744]	@ (80019d4 <Set_Random_Motion_Values+0xc90>)
 80016ec:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80016ee:	f009 f887 	bl	800a800 <rand>
 80016f2:	4603      	mov	r3, r0
 80016f4:	17da      	asrs	r2, r3, #31
 80016f6:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 80016fa:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 80016fe:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001702:	2200      	movs	r2, #0
 8001704:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8001708:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 800170c:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8001710:	462b      	mov	r3, r5
 8001712:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8001716:	4642      	mov	r2, r8
 8001718:	fb02 f203 	mul.w	r2, r2, r3
 800171c:	464b      	mov	r3, r9
 800171e:	4621      	mov	r1, r4
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	4413      	add	r3, r2
 8001726:	4622      	mov	r2, r4
 8001728:	4641      	mov	r1, r8
 800172a:	fba2 1201 	umull	r1, r2, r2, r1
 800172e:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 8001732:	460a      	mov	r2, r1
 8001734:	f8c7 2378 	str.w	r2, [r7, #888]	@ 0x378
 8001738:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 800173c:	4413      	add	r3, r2
 800173e:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001742:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	@ 0x378
 8001746:	4622      	mov	r2, r4
 8001748:	462b      	mov	r3, r5
 800174a:	f04f 0000 	mov.w	r0, #0
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	00d9      	lsls	r1, r3, #3
 8001754:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001758:	00d0      	lsls	r0, r2, #3
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4621      	mov	r1, r4
 8001760:	1a51      	subs	r1, r2, r1
 8001762:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8001766:	4629      	mov	r1, r5
 8001768:	eb63 0301 	sbc.w	r3, r3, r1
 800176c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8001770:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 800177c:	f7fe ff8c 	bl	8000698 <__aeabi_uldivmod>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	f06f 0009 	mvn.w	r0, #9
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	1a80      	subs	r0, r0, r2
 800178e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 8001792:	eb61 0303 	sbc.w	r3, r1, r3
 8001796:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800179a:	4b8e      	ldr	r3, [pc, #568]	@ (80019d4 <Set_Random_Motion_Values+0xc90>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	461a      	mov	r2, r3
 80017a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80017a4:	4413      	add	r3, r2
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b8a      	ldr	r3, [pc, #552]	@ (80019d4 <Set_Random_Motion_Values+0xc90>)
 80017aa:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 80017ac:	f009 f828 	bl	800a800 <rand>
 80017b0:	4603      	mov	r3, r0
 80017b2:	17da      	asrs	r2, r3, #31
 80017b4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80017b8:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 80017bc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80017c0:	2200      	movs	r2, #0
 80017c2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80017c6:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 80017ca:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 80017ce:	462b      	mov	r3, r5
 80017d0:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	@ 0x1e0
 80017d4:	4642      	mov	r2, r8
 80017d6:	fb02 f203 	mul.w	r2, r2, r3
 80017da:	464b      	mov	r3, r9
 80017dc:	4621      	mov	r1, r4
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	4622      	mov	r2, r4
 80017e6:	4641      	mov	r1, r8
 80017e8:	fba2 1201 	umull	r1, r2, r2, r1
 80017ec:	f8c7 2374 	str.w	r2, [r7, #884]	@ 0x374
 80017f0:	460a      	mov	r2, r1
 80017f2:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 80017f6:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 80017fa:	4413      	add	r3, r2
 80017fc:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001800:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	@ 0x370
 8001804:	460b      	mov	r3, r1
 8001806:	18db      	adds	r3, r3, r3
 8001808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800180a:	4613      	mov	r3, r2
 800180c:	eb42 0303 	adc.w	r3, r2, r3
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001812:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001816:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	f7fe ff3b 	bl	8000698 <__aeabi_uldivmod>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800182a:	f04f 31ff 	mov.w	r1, #4294967295
 800182e:	1a80      	subs	r0, r0, r2
 8001830:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 8001834:	eb61 0303 	sbc.w	r3, r1, r3
 8001838:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800183c:	4b66      	ldr	r3, [pc, #408]	@ (80019d8 <Set_Random_Motion_Values+0xc94>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001846:	4413      	add	r3, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4b63      	ldr	r3, [pc, #396]	@ (80019d8 <Set_Random_Motion_Values+0xc94>)
 800184c:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800184e:	f008 ffd7 	bl	800a800 <rand>
 8001852:	4603      	mov	r3, r0
 8001854:	17da      	asrs	r2, r3, #31
 8001856:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800185a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800185e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001862:	2200      	movs	r2, #0
 8001864:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001868:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 800186c:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 8001870:	462b      	mov	r3, r5
 8001872:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	@ 0x1d0
 8001876:	4642      	mov	r2, r8
 8001878:	fb02 f203 	mul.w	r2, r2, r3
 800187c:	464b      	mov	r3, r9
 800187e:	4621      	mov	r1, r4
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	4622      	mov	r2, r4
 8001888:	4641      	mov	r1, r8
 800188a:	fba2 1201 	umull	r1, r2, r2, r1
 800188e:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 8001892:	460a      	mov	r2, r1
 8001894:	f8c7 2368 	str.w	r2, [r7, #872]	@ 0x368
 8001898:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 800189c:	4413      	add	r3, r2
 800189e:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 80018ae:	462b      	mov	r3, r5
 80018b0:	0099      	lsls	r1, r3, #2
 80018b2:	4623      	mov	r3, r4
 80018b4:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80018b8:	4623      	mov	r3, r4
 80018ba:	0098      	lsls	r0, r3, #2
 80018bc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	f7fe fee8 	bl	8000698 <__aeabi_uldivmod>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 80018d0:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 80018d4:	f143 0300 	adc.w	r3, r3, #0
 80018d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80018dc:	4b3e      	ldr	r3, [pc, #248]	@ (80019d8 <Set_Random_Motion_Values+0xc94>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	461a      	mov	r2, r3
 80018e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80018e6:	4413      	add	r3, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b3b      	ldr	r3, [pc, #236]	@ (80019d8 <Set_Random_Motion_Values+0xc94>)
 80018ec:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 80018ee:	f008 ff87 	bl	800a800 <rand>
 80018f2:	4603      	mov	r3, r0
 80018f4:	17da      	asrs	r2, r3, #31
 80018f6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80018fa:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 80018fe:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001902:	2200      	movs	r2, #0
 8001904:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001908:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800190c:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 8001910:	462b      	mov	r3, r5
 8001912:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8001916:	4642      	mov	r2, r8
 8001918:	fb02 f203 	mul.w	r2, r2, r3
 800191c:	464b      	mov	r3, r9
 800191e:	4621      	mov	r1, r4
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	4413      	add	r3, r2
 8001926:	4622      	mov	r2, r4
 8001928:	4641      	mov	r1, r8
 800192a:	fba2 1201 	umull	r1, r2, r2, r1
 800192e:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 8001932:	460a      	mov	r2, r1
 8001934:	f8c7 2360 	str.w	r2, [r7, #864]	@ 0x360
 8001938:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 800193c:	4413      	add	r3, r2
 800193e:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001942:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 8001946:	4622      	mov	r2, r4
 8001948:	462b      	mov	r3, r5
 800194a:	1891      	adds	r1, r2, r2
 800194c:	6239      	str	r1, [r7, #32]
 800194e:	415b      	adcs	r3, r3
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
 8001952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001956:	4621      	mov	r1, r4
 8001958:	1851      	adds	r1, r2, r1
 800195a:	61b9      	str	r1, [r7, #24]
 800195c:	4629      	mov	r1, r5
 800195e:	eb43 0101 	adc.w	r1, r3, r1
 8001962:	61f9      	str	r1, [r7, #28]
 8001964:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001968:	460b      	mov	r3, r1
 800196a:	18db      	adds	r3, r3, r3
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	4613      	mov	r3, r2
 8001970:	eb42 0303 	adc.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800197a:	4618      	mov	r0, r3
 800197c:	4621      	mov	r1, r4
 800197e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	f7fe fe87 	bl	8000698 <__aeabi_uldivmod>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001992:	f04f 31ff 	mov.w	r1, #4294967295
 8001996:	1a80      	subs	r0, r0, r2
 8001998:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 800199c:	eb61 0303 	sbc.w	r3, r1, r3
 80019a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <Set_Random_Motion_Values+0xc94>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	461a      	mov	r2, r3
 80019aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80019ae:	4413      	add	r3, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <Set_Random_Motion_Values+0xc94>)
 80019b4:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80019b6:	f008 ff23 	bl	800a800 <rand>
 80019ba:	4603      	mov	r3, r0
 80019bc:	17da      	asrs	r2, r3, #31
 80019be:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80019c2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80019c6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80019ca:	2200      	movs	r2, #0
 80019cc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80019d0:	e004      	b.n	80019dc <Set_Random_Motion_Values+0xc98>
 80019d2:	bf00      	nop
 80019d4:	200000e0 	.word	0x200000e0
 80019d8:	200000ec 	.word	0x200000ec
 80019dc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80019e0:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 80019e4:	462b      	mov	r3, r5
 80019e6:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	@ 0x1b0
 80019ea:	4642      	mov	r2, r8
 80019ec:	fb02 f203 	mul.w	r2, r2, r3
 80019f0:	464b      	mov	r3, r9
 80019f2:	4621      	mov	r1, r4
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	4622      	mov	r2, r4
 80019fc:	4641      	mov	r1, r8
 80019fe:	fba2 1201 	umull	r1, r2, r2, r1
 8001a02:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 8001a06:	460a      	mov	r2, r1
 8001a08:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8001a0c:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 8001a10:	4413      	add	r3, r2
 8001a12:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8001a16:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	@ 0x358
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	462b      	mov	r3, r5
 8001a1e:	f04f 0000 	mov.w	r0, #0
 8001a22:	f04f 0100 	mov.w	r1, #0
 8001a26:	00d9      	lsls	r1, r3, #3
 8001a28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a2c:	00d0      	lsls	r0, r2, #3
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4621      	mov	r1, r4
 8001a34:	1a51      	subs	r1, r2, r1
 8001a36:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	eb63 0301 	sbc.w	r3, r3, r1
 8001a40:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001a44:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8001a50:	f7fe fe22 	bl	8000698 <__aeabi_uldivmod>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	f06f 0002 	mvn.w	r0, #2
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	1a80      	subs	r0, r0, r2
 8001a62:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
 8001a66:	eb61 0303 	sbc.w	r3, r1, r3
 8001a6a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001a6e:	4bea      	ldr	r3, [pc, #936]	@ (8001e18 <Set_Random_Motion_Values+0x10d4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001a78:	4413      	add	r3, r2
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4be6      	ldr	r3, [pc, #920]	@ (8001e18 <Set_Random_Motion_Values+0x10d4>)
 8001a7e:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001a80:	f008 febe 	bl	800a800 <rand>
 8001a84:	4603      	mov	r3, r0
 8001a86:	17da      	asrs	r2, r3, #31
 8001a88:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001a8c:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8001a90:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001a94:	2200      	movs	r2, #0
 8001a96:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001a9a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001a9e:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8001aa2:	462b      	mov	r3, r5
 8001aa4:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	@ 0x198
 8001aa8:	4642      	mov	r2, r8
 8001aaa:	fb02 f203 	mul.w	r2, r2, r3
 8001aae:	464b      	mov	r3, r9
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4622      	mov	r2, r4
 8001aba:	4641      	mov	r1, r8
 8001abc:	fba2 1201 	umull	r1, r2, r2, r1
 8001ac0:	f8c7 2354 	str.w	r2, [r7, #852]	@ 0x354
 8001ac4:	460a      	mov	r2, r1
 8001ac6:	f8c7 2350 	str.w	r2, [r7, #848]	@ 0x350
 8001aca:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8001ace:	4413      	add	r3, r2
 8001ad0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001ad4:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 8001ad8:	4622      	mov	r2, r4
 8001ada:	462b      	mov	r3, r5
 8001adc:	f04f 0000 	mov.w	r0, #0
 8001ae0:	f04f 0100 	mov.w	r1, #0
 8001ae4:	00d9      	lsls	r1, r3, #3
 8001ae6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aea:	00d0      	lsls	r0, r2, #3
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4621      	mov	r1, r4
 8001af2:	1851      	adds	r1, r2, r1
 8001af4:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 8001af8:	4629      	mov	r1, r5
 8001afa:	eb43 0101 	adc.w	r1, r3, r1
 8001afe:	f8c7 1194 	str.w	r1, [r7, #404]	@ 0x194
 8001b02:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8001b0e:	f7fe fdc3 	bl	8000698 <__aeabi_uldivmod>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	1cd1      	adds	r1, r2, #3
 8001b18:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8001b1c:	f143 0300 	adc.w	r3, r3, #0
 8001b20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001b24:	4bbc      	ldr	r3, [pc, #752]	@ (8001e18 <Set_Random_Motion_Values+0x10d4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001b2e:	4413      	add	r3, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4bb9      	ldr	r3, [pc, #740]	@ (8001e18 <Set_Random_Motion_Values+0x10d4>)
 8001b34:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001b36:	f008 fe63 	bl	800a800 <rand>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	17da      	asrs	r2, r3, #31
 8001b3e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001b42:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8001b46:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001b50:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8001b54:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 8001b58:	462b      	mov	r3, r5
 8001b5a:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 8001b5e:	4642      	mov	r2, r8
 8001b60:	fb02 f203 	mul.w	r2, r2, r3
 8001b64:	464b      	mov	r3, r9
 8001b66:	4621      	mov	r1, r4
 8001b68:	fb01 f303 	mul.w	r3, r1, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4622      	mov	r2, r4
 8001b70:	4641      	mov	r1, r8
 8001b72:	fba2 1201 	umull	r1, r2, r2, r1
 8001b76:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 8001b7a:	460a      	mov	r2, r1
 8001b7c:	f8c7 2348 	str.w	r2, [r7, #840]	@ 0x348
 8001b80:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 8001b84:	4413      	add	r3, r2
 8001b86:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8001b8a:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	@ 0x348
 8001b8e:	4622      	mov	r2, r4
 8001b90:	462b      	mov	r3, r5
 8001b92:	1891      	adds	r1, r2, r2
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	415b      	adcs	r3, r3
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	1851      	adds	r1, r2, r1
 8001ba2:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	eb43 0101 	adc.w	r1, r3, r1
 8001bac:	f8c7 117c 	str.w	r1, [r7, #380]	@ 0x17c
 8001bb0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8001bbc:	f7fe fd6c 	bl	8000698 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	f06f 0002 	mvn.w	r0, #2
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	1a80      	subs	r0, r0, r2
 8001bce:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 8001bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8001bd6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001bda:	4b8f      	ldr	r3, [pc, #572]	@ (8001e18 <Set_Random_Motion_Values+0x10d4>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001be4:	4413      	add	r3, r2
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b8b      	ldr	r3, [pc, #556]	@ (8001e18 <Set_Random_Motion_Values+0x10d4>)
 8001bea:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001bec:	f008 fe08 	bl	800a800 <rand>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	17da      	asrs	r2, r3, #31
 8001bf4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001bf8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8001bfc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001c00:	2200      	movs	r2, #0
 8001c02:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001c06:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8001c0a:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 8001c0e:	462b      	mov	r3, r5
 8001c10:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	@ 0x168
 8001c14:	4642      	mov	r2, r8
 8001c16:	fb02 f203 	mul.w	r2, r2, r3
 8001c1a:	464b      	mov	r3, r9
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	4622      	mov	r2, r4
 8001c26:	4641      	mov	r1, r8
 8001c28:	fba2 1201 	umull	r1, r2, r2, r1
 8001c2c:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8001c30:	460a      	mov	r2, r1
 8001c32:	f8c7 2340 	str.w	r2, [r7, #832]	@ 0x340
 8001c36:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001c40:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 8001c44:	4622      	mov	r2, r4
 8001c46:	462b      	mov	r3, r5
 8001c48:	f04f 0000 	mov.w	r0, #0
 8001c4c:	f04f 0100 	mov.w	r1, #0
 8001c50:	00d9      	lsls	r1, r3, #3
 8001c52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c56:	00d0      	lsls	r0, r2, #3
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	1a51      	subs	r1, r2, r1
 8001c60:	f8c7 1160 	str.w	r1, [r7, #352]	@ 0x160
 8001c64:	4629      	mov	r1, r5
 8001c66:	eb63 0301 	sbc.w	r3, r3, r1
 8001c6a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c6e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8001c7a:	f7fe fd0d 	bl	8000698 <__aeabi_uldivmod>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 8001c86:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8001c8a:	f143 0300 	adc.w	r3, r3, #0
 8001c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001c92:	4b62      	ldr	r3, [pc, #392]	@ (8001e1c <Set_Random_Motion_Values+0x10d8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c9c:	4413      	add	r3, r2
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e1c <Set_Random_Motion_Values+0x10d8>)
 8001ca2:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001ca4:	f008 fdac 	bl	800a800 <rand>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	17da      	asrs	r2, r3, #31
 8001cac:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001cb0:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001cb4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cbe:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8001cc2:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8001cc6:	462b      	mov	r3, r5
 8001cc8:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001ccc:	4642      	mov	r2, r8
 8001cce:	fb02 f203 	mul.w	r2, r2, r3
 8001cd2:	464b      	mov	r3, r9
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	4622      	mov	r2, r4
 8001cde:	4641      	mov	r1, r8
 8001ce0:	fba2 1201 	umull	r1, r2, r2, r1
 8001ce4:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 8001ce8:	460a      	mov	r2, r1
 8001cea:	f8c7 2338 	str.w	r2, [r7, #824]	@ 0x338
 8001cee:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001cf8:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 8001cfc:	4622      	mov	r2, r4
 8001cfe:	462b      	mov	r3, r5
 8001d00:	1891      	adds	r1, r2, r2
 8001d02:	6039      	str	r1, [r7, #0]
 8001d04:	415b      	adcs	r3, r3
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	1851      	adds	r1, r2, r1
 8001d10:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 8001d14:	4629      	mov	r1, r5
 8001d16:	eb43 0101 	adc.w	r1, r3, r1
 8001d1a:	f8c7 114c 	str.w	r1, [r7, #332]	@ 0x14c
 8001d1e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8001d2a:	f7fe fcb5 	bl	8000698 <__aeabi_uldivmod>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	f112 0196 	adds.w	r1, r2, #150	@ 0x96
 8001d36:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8001d3a:	f143 0300 	adc.w	r3, r3, #0
 8001d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001d42:	4b36      	ldr	r3, [pc, #216]	@ (8001e1c <Set_Random_Motion_Values+0x10d8>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	461a      	mov	r2, r3
 8001d48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b32      	ldr	r3, [pc, #200]	@ (8001e1c <Set_Random_Motion_Values+0x10d8>)
 8001d52:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001d54:	f008 fd54 	bl	800a800 <rand>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	17da      	asrs	r2, r3, #31
 8001d5c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001d60:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8001d64:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001d6e:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8001d72:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001d76:	462b      	mov	r3, r5
 8001d78:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8001d7c:	4642      	mov	r2, r8
 8001d7e:	fb02 f203 	mul.w	r2, r2, r3
 8001d82:	464b      	mov	r3, r9
 8001d84:	4621      	mov	r1, r4
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4622      	mov	r2, r4
 8001d8e:	4641      	mov	r1, r8
 8001d90:	fba2 1201 	umull	r1, r2, r2, r1
 8001d94:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 8001d98:	460a      	mov	r2, r1
 8001d9a:	f8c7 2330 	str.w	r2, [r7, #816]	@ 0x330
 8001d9e:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001da2:	4413      	add	r3, r2
 8001da4:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001da8:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 8001dac:	4622      	mov	r2, r4
 8001dae:	462b      	mov	r3, r5
 8001db0:	f04f 0000 	mov.w	r0, #0
 8001db4:	f04f 0100 	mov.w	r1, #0
 8001db8:	0099      	lsls	r1, r3, #2
 8001dba:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001dbe:	0090      	lsls	r0, r2, #2
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4621      	mov	r1, r4
 8001dc6:	1851      	adds	r1, r2, r1
 8001dc8:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8001dcc:	4629      	mov	r1, r5
 8001dce:	eb43 0101 	adc.w	r1, r3, r1
 8001dd2:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001dd6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8001de2:	f7fe fc59 	bl	8000698 <__aeabi_uldivmod>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	f112 010a 	adds.w	r1, r2, #10
 8001dee:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8001df2:	f143 0300 	adc.w	r3, r3, #0
 8001df6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001dfa:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <Set_Random_Motion_Values+0x10d8>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e04:	4413      	add	r3, r2
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <Set_Random_Motion_Values+0x10d8>)
 8001e0a:	609a      	str	r2, [r3, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	f507 777a 	add.w	r7, r7, #1000	@ 0x3e8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e18:	200000f8 	.word	0x200000f8
 8001e1c:	20000104 	.word	0x20000104

08001e20 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8001e24:	4b6e      	ldr	r3, [pc, #440]	@ (8001fe0 <Reset_Motion_Values+0x1c0>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b6e      	ldr	r3, [pc, #440]	@ (8001fe4 <Reset_Motion_Values+0x1c4>)
 8001e2a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e2e:	11d9      	asrs	r1, r3, #7
 8001e30:	17d3      	asrs	r3, r2, #31
 8001e32:	1acb      	subs	r3, r1, r3
 8001e34:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <Reset_Motion_Values+0x2a>
 8001e42:	4b67      	ldr	r3, [pc, #412]	@ (8001fe0 <Reset_Motion_Values+0x1c0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	425b      	negs	r3, r3
 8001e48:	e000      	b.n	8001e4c <Reset_Motion_Values+0x2c>
 8001e4a:	230a      	movs	r3, #10
 8001e4c:	4a64      	ldr	r2, [pc, #400]	@ (8001fe0 <Reset_Motion_Values+0x1c0>)
 8001e4e:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8001e50:	4b63      	ldr	r3, [pc, #396]	@ (8001fe0 <Reset_Motion_Values+0x1c0>)
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4b63      	ldr	r3, [pc, #396]	@ (8001fe4 <Reset_Motion_Values+0x1c4>)
 8001e56:	fb83 1302 	smull	r1, r3, r3, r2
 8001e5a:	11d9      	asrs	r1, r3, #7
 8001e5c:	17d3      	asrs	r3, r2, #31
 8001e5e:	1acb      	subs	r3, r1, r3
 8001e60:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <Reset_Motion_Values+0x56>
 8001e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fe0 <Reset_Motion_Values+0x1c0>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	425b      	negs	r3, r3
 8001e74:	e001      	b.n	8001e7a <Reset_Motion_Values+0x5a>
 8001e76:	f06f 0309 	mvn.w	r3, #9
 8001e7a:	4a59      	ldr	r2, [pc, #356]	@ (8001fe0 <Reset_Motion_Values+0x1c0>)
 8001e7c:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8001e7e:	4b58      	ldr	r3, [pc, #352]	@ (8001fe0 <Reset_Motion_Values+0x1c0>)
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	4b58      	ldr	r3, [pc, #352]	@ (8001fe4 <Reset_Motion_Values+0x1c4>)
 8001e84:	fb83 1302 	smull	r1, r3, r3, r2
 8001e88:	11d9      	asrs	r1, r3, #7
 8001e8a:	17d3      	asrs	r3, r2, #31
 8001e8c:	1acb      	subs	r3, r1, r3
 8001e8e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d103      	bne.n	8001ea4 <Reset_Motion_Values+0x84>
 8001e9c:	4b50      	ldr	r3, [pc, #320]	@ (8001fe0 <Reset_Motion_Values+0x1c0>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	425b      	negs	r3, r3
 8001ea2:	e000      	b.n	8001ea6 <Reset_Motion_Values+0x86>
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	4a4e      	ldr	r2, [pc, #312]	@ (8001fe0 <Reset_Motion_Values+0x1c0>)
 8001ea8:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8001eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8001fe8 <Reset_Motion_Values+0x1c8>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b4d      	ldr	r3, [pc, #308]	@ (8001fe4 <Reset_Motion_Values+0x1c4>)
 8001eb0:	fb83 1302 	smull	r1, r3, r3, r2
 8001eb4:	11d9      	asrs	r1, r3, #7
 8001eb6:	17d3      	asrs	r3, r2, #31
 8001eb8:	1acb      	subs	r3, r1, r3
 8001eba:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d103      	bne.n	8001ed0 <Reset_Motion_Values+0xb0>
 8001ec8:	4b47      	ldr	r3, [pc, #284]	@ (8001fe8 <Reset_Motion_Values+0x1c8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	425b      	negs	r3, r3
 8001ece:	e000      	b.n	8001ed2 <Reset_Motion_Values+0xb2>
 8001ed0:	2364      	movs	r3, #100	@ 0x64
 8001ed2:	4a45      	ldr	r2, [pc, #276]	@ (8001fe8 <Reset_Motion_Values+0x1c8>)
 8001ed4:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8001ed6:	4b44      	ldr	r3, [pc, #272]	@ (8001fe8 <Reset_Motion_Values+0x1c8>)
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4b42      	ldr	r3, [pc, #264]	@ (8001fe4 <Reset_Motion_Values+0x1c4>)
 8001edc:	fb83 1302 	smull	r1, r3, r3, r2
 8001ee0:	11d9      	asrs	r1, r3, #7
 8001ee2:	17d3      	asrs	r3, r2, #31
 8001ee4:	1acb      	subs	r3, r1, r3
 8001ee6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d103      	bne.n	8001efc <Reset_Motion_Values+0xdc>
 8001ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe8 <Reset_Motion_Values+0x1c8>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	425b      	negs	r3, r3
 8001efa:	e001      	b.n	8001f00 <Reset_Motion_Values+0xe0>
 8001efc:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001f00:	4a39      	ldr	r2, [pc, #228]	@ (8001fe8 <Reset_Motion_Values+0x1c8>)
 8001f02:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8001f04:	4b38      	ldr	r3, [pc, #224]	@ (8001fe8 <Reset_Motion_Values+0x1c8>)
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	4b36      	ldr	r3, [pc, #216]	@ (8001fe4 <Reset_Motion_Values+0x1c4>)
 8001f0a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f0e:	11d9      	asrs	r1, r3, #7
 8001f10:	17d3      	asrs	r3, r2, #31
 8001f12:	1acb      	subs	r3, r1, r3
 8001f14:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d103      	bne.n	8001f2a <Reset_Motion_Values+0x10a>
 8001f22:	4b31      	ldr	r3, [pc, #196]	@ (8001fe8 <Reset_Motion_Values+0x1c8>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	425b      	negs	r3, r3
 8001f28:	e000      	b.n	8001f2c <Reset_Motion_Values+0x10c>
 8001f2a:	2364      	movs	r3, #100	@ 0x64
 8001f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8001fe8 <Reset_Motion_Values+0x1c8>)
 8001f2e:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8001f30:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <Reset_Motion_Values+0x1c8>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe4 <Reset_Motion_Values+0x1c4>)
 8001f36:	fb83 1302 	smull	r1, r3, r3, r2
 8001f3a:	11d9      	asrs	r1, r3, #7
 8001f3c:	17d3      	asrs	r3, r2, #31
 8001f3e:	1acb      	subs	r3, r1, r3
 8001f40:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d103      	bne.n	8001f56 <Reset_Motion_Values+0x136>
 8001f4e:	4b27      	ldr	r3, [pc, #156]	@ (8001fec <Reset_Motion_Values+0x1cc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	425b      	negs	r3, r3
 8001f54:	e000      	b.n	8001f58 <Reset_Motion_Values+0x138>
 8001f56:	2303      	movs	r3, #3
 8001f58:	4a24      	ldr	r2, [pc, #144]	@ (8001fec <Reset_Motion_Values+0x1cc>)
 8001f5a:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8001f5c:	4b22      	ldr	r3, [pc, #136]	@ (8001fe8 <Reset_Motion_Values+0x1c8>)
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <Reset_Motion_Values+0x1c4>)
 8001f62:	fb83 1302 	smull	r1, r3, r3, r2
 8001f66:	11d9      	asrs	r1, r3, #7
 8001f68:	17d3      	asrs	r3, r2, #31
 8001f6a:	1acb      	subs	r3, r1, r3
 8001f6c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d103      	bne.n	8001f82 <Reset_Motion_Values+0x162>
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fec <Reset_Motion_Values+0x1cc>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	425b      	negs	r3, r3
 8001f80:	e001      	b.n	8001f86 <Reset_Motion_Values+0x166>
 8001f82:	f06f 0302 	mvn.w	r3, #2
 8001f86:	4a19      	ldr	r2, [pc, #100]	@ (8001fec <Reset_Motion_Values+0x1cc>)
 8001f88:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8001f8a:	4b17      	ldr	r3, [pc, #92]	@ (8001fe8 <Reset_Motion_Values+0x1c8>)
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <Reset_Motion_Values+0x1c4>)
 8001f90:	fb83 1302 	smull	r1, r3, r3, r2
 8001f94:	11d9      	asrs	r1, r3, #7
 8001f96:	17d3      	asrs	r3, r2, #31
 8001f98:	1acb      	subs	r3, r1, r3
 8001f9a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d103      	bne.n	8001fb0 <Reset_Motion_Values+0x190>
 8001fa8:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <Reset_Motion_Values+0x1cc>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	425b      	negs	r3, r3
 8001fae:	e000      	b.n	8001fb2 <Reset_Motion_Values+0x192>
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8001fec <Reset_Motion_Values+0x1cc>)
 8001fb4:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <Reset_Motion_Values+0x1d0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	425b      	negs	r3, r3
 8001fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff0 <Reset_Motion_Values+0x1d0>)
 8001fbe:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <Reset_Motion_Values+0x1d0>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	425b      	negs	r3, r3
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff0 <Reset_Motion_Values+0x1d0>)
 8001fc8:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8001fca:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <Reset_Motion_Values+0x1d0>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	425b      	negs	r3, r3
 8001fd0:	4a07      	ldr	r2, [pc, #28]	@ (8001ff0 <Reset_Motion_Values+0x1d0>)
 8001fd2:	6093      	str	r3, [r2, #8]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	200000e0 	.word	0x200000e0
 8001fe4:	10624dd3 	.word	0x10624dd3
 8001fe8:	200000ec 	.word	0x200000ec
 8001fec:	200000f8 	.word	0x200000f8
 8001ff0:	20000104 	.word	0x20000104

08001ff4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8001ffe:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <BSP_PB_Callback+0x1c>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	200000aa 	.word	0x200000aa

08002014 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b08d      	sub	sp, #52	@ 0x34
 8002018:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 800201a:	231b      	movs	r3, #27
 800201c:	713b      	strb	r3, [r7, #4]
 800201e:	23c5      	movs	r3, #197	@ 0xc5
 8002020:	717b      	strb	r3, [r7, #5]
 8002022:	23d5      	movs	r3, #213	@ 0xd5
 8002024:	71bb      	strb	r3, [r7, #6]
 8002026:	23a5      	movs	r3, #165	@ 0xa5
 8002028:	71fb      	strb	r3, [r7, #7]
 800202a:	2302      	movs	r3, #2
 800202c:	723b      	strb	r3, [r7, #8]
 800202e:	2300      	movs	r3, #0
 8002030:	727b      	strb	r3, [r7, #9]
 8002032:	23b4      	movs	r3, #180	@ 0xb4
 8002034:	72bb      	strb	r3, [r7, #10]
 8002036:	239a      	movs	r3, #154	@ 0x9a
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	23e1      	movs	r3, #225	@ 0xe1
 800203c:	733b      	strb	r3, [r7, #12]
 800203e:	2311      	movs	r3, #17
 8002040:	737b      	strb	r3, [r7, #13]
 8002042:	2301      	movs	r3, #1
 8002044:	73bb      	strb	r3, [r7, #14]
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
 800204a:	2300      	movs	r3, #0
 800204c:	743b      	strb	r3, [r7, #16]
 800204e:	2300      	movs	r3, #0
 8002050:	747b      	strb	r3, [r7, #17]
 8002052:	2300      	movs	r3, #0
 8002054:	74bb      	strb	r3, [r7, #18]
 8002056:	2300      	movs	r3, #0
 8002058:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800205a:	4b52      	ldr	r3, [pc, #328]	@ (80021a4 <Add_HWServW2ST_Service+0x190>)
 800205c:	461c      	mov	r4, r3
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8002066:	4b50      	ldr	r3, [pc, #320]	@ (80021a8 <Add_HWServW2ST_Service+0x194>)
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2310      	movs	r3, #16
 800206c:	2201      	movs	r2, #1
 800206e:	494d      	ldr	r1, [pc, #308]	@ (80021a4 <Add_HWServW2ST_Service+0x190>)
 8002070:	2002      	movs	r0, #2
 8002072:	f006 f995 	bl	80083a0 <aci_gatt_add_serv>
 8002076:	4603      	mov	r3, r0
 8002078:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 8002080:	2347      	movs	r3, #71	@ 0x47
 8002082:	e08a      	b.n	800219a <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8002084:	231b      	movs	r3, #27
 8002086:	713b      	strb	r3, [r7, #4]
 8002088:	23c5      	movs	r3, #197	@ 0xc5
 800208a:	717b      	strb	r3, [r7, #5]
 800208c:	23d5      	movs	r3, #213	@ 0xd5
 800208e:	71bb      	strb	r3, [r7, #6]
 8002090:	23a5      	movs	r3, #165	@ 0xa5
 8002092:	71fb      	strb	r3, [r7, #7]
 8002094:	2302      	movs	r3, #2
 8002096:	723b      	strb	r3, [r7, #8]
 8002098:	2300      	movs	r3, #0
 800209a:	727b      	strb	r3, [r7, #9]
 800209c:	2336      	movs	r3, #54	@ 0x36
 800209e:	72bb      	strb	r3, [r7, #10]
 80020a0:	23ac      	movs	r3, #172	@ 0xac
 80020a2:	72fb      	strb	r3, [r7, #11]
 80020a4:	23e1      	movs	r3, #225	@ 0xe1
 80020a6:	733b      	strb	r3, [r7, #12]
 80020a8:	2311      	movs	r3, #17
 80020aa:	737b      	strb	r3, [r7, #13]
 80020ac:	2301      	movs	r3, #1
 80020ae:	73bb      	strb	r3, [r7, #14]
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	2300      	movs	r3, #0
 80020b6:	743b      	strb	r3, [r7, #16]
 80020b8:	2300      	movs	r3, #0
 80020ba:	747b      	strb	r3, [r7, #17]
 80020bc:	2300      	movs	r3, #0
 80020be:	74bb      	strb	r3, [r7, #18]
 80020c0:	2300      	movs	r3, #0
 80020c2:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 80020c4:	7cbb      	ldrb	r3, [r7, #18]
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 80020ce:	7cbb      	ldrb	r3, [r7, #18]
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80020d8:	4b34      	ldr	r3, [pc, #208]	@ (80021ac <Add_HWServW2ST_Service+0x198>)
 80020da:	461c      	mov	r4, r3
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80020e4:	4b30      	ldr	r3, [pc, #192]	@ (80021a8 <Add_HWServW2ST_Service+0x194>)
 80020e6:	8818      	ldrh	r0, [r3, #0]
 80020e8:	4b31      	ldr	r3, [pc, #196]	@ (80021b0 <Add_HWServW2ST_Service+0x19c>)
 80020ea:	9305      	str	r3, [sp, #20]
 80020ec:	2300      	movs	r3, #0
 80020ee:	9304      	str	r3, [sp, #16]
 80020f0:	2310      	movs	r3, #16
 80020f2:	9303      	str	r3, [sp, #12]
 80020f4:	2304      	movs	r3, #4
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	2300      	movs	r3, #0
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	230a      	movs	r3, #10
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2308      	movs	r3, #8
 8002102:	4a2a      	ldr	r2, [pc, #168]	@ (80021ac <Add_HWServW2ST_Service+0x198>)
 8002104:	2102      	movs	r1, #2
 8002106:	f006 f9d4 	bl	80084b2 <aci_gatt_add_char>
 800210a:	4603      	mov	r3, r0
 800210c:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_WRITE|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800210e:	7dfb      	ldrb	r3, [r7, #23]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 8002114:	2347      	movs	r3, #71	@ 0x47
 8002116:	e040      	b.n	800219a <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002118:	231b      	movs	r3, #27
 800211a:	713b      	strb	r3, [r7, #4]
 800211c:	23c5      	movs	r3, #197	@ 0xc5
 800211e:	717b      	strb	r3, [r7, #5]
 8002120:	23d5      	movs	r3, #213	@ 0xd5
 8002122:	71bb      	strb	r3, [r7, #6]
 8002124:	23a5      	movs	r3, #165	@ 0xa5
 8002126:	71fb      	strb	r3, [r7, #7]
 8002128:	2302      	movs	r3, #2
 800212a:	723b      	strb	r3, [r7, #8]
 800212c:	2300      	movs	r3, #0
 800212e:	727b      	strb	r3, [r7, #9]
 8002130:	2336      	movs	r3, #54	@ 0x36
 8002132:	72bb      	strb	r3, [r7, #10]
 8002134:	23ac      	movs	r3, #172	@ 0xac
 8002136:	72fb      	strb	r3, [r7, #11]
 8002138:	23e1      	movs	r3, #225	@ 0xe1
 800213a:	733b      	strb	r3, [r7, #12]
 800213c:	2311      	movs	r3, #17
 800213e:	737b      	strb	r3, [r7, #13]
 8002140:	2301      	movs	r3, #1
 8002142:	73bb      	strb	r3, [r7, #14]
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	2300      	movs	r3, #0
 800214a:	743b      	strb	r3, [r7, #16]
 800214c:	2300      	movs	r3, #0
 800214e:	747b      	strb	r3, [r7, #17]
 8002150:	23e0      	movs	r3, #224	@ 0xe0
 8002152:	74bb      	strb	r3, [r7, #18]
 8002154:	2300      	movs	r3, #0
 8002156:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002158:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <Add_HWServW2ST_Service+0x198>)
 800215a:	461c      	mov	r4, r3
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002164:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <Add_HWServW2ST_Service+0x194>)
 8002166:	8818      	ldrh	r0, [r3, #0]
 8002168:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <Add_HWServW2ST_Service+0x1a0>)
 800216a:	9305      	str	r3, [sp, #20]
 800216c:	2300      	movs	r3, #0
 800216e:	9304      	str	r3, [sp, #16]
 8002170:	2310      	movs	r3, #16
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	2304      	movs	r3, #4
 8002176:	9302      	str	r3, [sp, #8]
 8002178:	2300      	movs	r3, #0
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	2310      	movs	r3, #16
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2314      	movs	r3, #20
 8002182:	4a0a      	ldr	r2, [pc, #40]	@ (80021ac <Add_HWServW2ST_Service+0x198>)
 8002184:	2102      	movs	r1, #2
 8002186:	f006 f994 	bl	80084b2 <aci_gatt_add_char>
 800218a:	4603      	mov	r3, r0
 800218c:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 8002194:	2347      	movs	r3, #71	@ 0x47
 8002196:	e000      	b.n	800219a <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd90      	pop	{r4, r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200000b8 	.word	0x200000b8
 80021a8:	200000b0 	.word	0x200000b0
 80021ac:	200000c8 	.word	0x200000c8
 80021b0:	200000b2 	.word	0x200000b2
 80021b4:	200000b4 	.word	0x200000b4

080021b8 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	@ 0x30
 80021bc:	af02      	add	r7, sp, #8
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80021c4:	f001 fde0 	bl	8003d88 <HAL_GetTick>
 80021c8:	4603      	mov	r3, r0
 80021ca:	08db      	lsrs	r3, r3, #3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	743b      	strb	r3, [r7, #16]
 80021d0:	f001 fdda 	bl	8003d88 <HAL_GetTick>
 80021d4:	4603      	mov	r3, r0
 80021d6:	0adb      	lsrs	r3, r3, #11
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	425b      	negs	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	74bb      	strb	r3, [r7, #18]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	425b      	negs	r3, r3
 80021ee:	121b      	asrs	r3, r3, #8
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	753b      	strb	r3, [r7, #20]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	121b      	asrs	r3, r3, #8
 8002202:	b2db      	uxtb	r3, r3
 8002204:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	425b      	negs	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	75bb      	strb	r3, [r7, #22]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	425b      	negs	r3, r3
 8002218:	121b      	asrs	r3, r3, #8
 800221a:	b2db      	uxtb	r3, r3
 800221c:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	763b      	strb	r3, [r7, #24]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	121b      	asrs	r3, r3, #8
 800222c:	b2db      	uxtb	r3, r3
 800222e:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	76bb      	strb	r3, [r7, #26]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	121b      	asrs	r3, r3, #8
 800223e:	b2db      	uxtb	r3, r3
 8002240:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	773b      	strb	r3, [r7, #28]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	121b      	asrs	r3, r3, #8
 8002250:	b2db      	uxtb	r3, r3
 8002252:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	77bb      	strb	r3, [r7, #30]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	121b      	asrs	r3, r3, #8
 8002262:	b2db      	uxtb	r3, r3
 8002264:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f887 3020 	strb.w	r3, [r7, #32]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	121b      	asrs	r3, r3, #8
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	121b      	asrs	r3, r3, #8
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002292:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <Acc_Update+0x118>)
 8002294:	8818      	ldrh	r0, [r3, #0]
 8002296:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <Acc_Update+0x11c>)
 8002298:	8819      	ldrh	r1, [r3, #0]
 800229a:	f107 0310 	add.w	r3, r7, #16
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2314      	movs	r3, #20
 80022a2:	2200      	movs	r2, #0
 80022a4:	f006 f9d0 	bl	8008648 <aci_gatt_update_char_value>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80022ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <Acc_Update+0x10e>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
 80022b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022ba:	4619      	mov	r1, r3
 80022bc:	4806      	ldr	r0, [pc, #24]	@ (80022d8 <Acc_Update+0x120>)
 80022be:	f008 fb9f 	bl	800aa00 <iprintf>
    return BLE_STATUS_ERROR ;
 80022c2:	2347      	movs	r3, #71	@ 0x47
 80022c4:	e000      	b.n	80022c8 <Acc_Update+0x110>
  }

  return BLE_STATUS_SUCCESS;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3728      	adds	r7, #40	@ 0x28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200000b0 	.word	0x200000b0
 80022d4:	200000b4 	.word	0x200000b4
 80022d8:	0800ba2c 	.word	0x0800ba2c

080022dc <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
//    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
//    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
//    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
//  }

  if(connection_handle !=0)
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <Read_Request_CB+0x38>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00e      	beq.n	800230c <Read_Request_CB+0x30>
  {
    ret = aci_gatt_allow_read(connection_handle);
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <Read_Request_CB+0x38>)
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f006 fa38 	bl	8008768 <aci_gatt_allow_read>
 80022f8:	4603      	mov	r3, r0
 80022fa:	73fb      	strb	r3, [r7, #15]
    if (ret != BLE_STATUS_SUCCESS)
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <Read_Request_CB+0x30>
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	4619      	mov	r1, r3
 8002306:	4804      	ldr	r0, [pc, #16]	@ (8002318 <Read_Request_CB+0x3c>)
 8002308:	f008 fb7a 	bl	800aa00 <iprintf>
    }
  }
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200000d8 	.word	0x200000d8
 8002318:	0800baa4 	.word	0x0800baa4

0800231c <Get_freq>:
  }

  return BLE_STATUS_SUCCESS;
}

int Get_freq(void){
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
	  tBleStatus ret;
	  uint16_t *data_len;
	  uint8_t data[8];
	  ret = aci_gatt_read_handle_value(EnvironmentalCharHandle+1, 8, data_len, data);
 8002322:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <Get_freq+0x48>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	3301      	adds	r3, #1
 8002328:	b298      	uxth	r0, r3
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	2108      	movs	r1, #8
 8002330:	f006 fa47 	bl	80087c2 <aci_gatt_read_handle_value>
 8002334:	4603      	mov	r3, r0
 8002336:	74fb      	strb	r3, [r7, #19]
	  if (ret != BLE_STATUS_SUCCESS){
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <Get_freq+0x30>
	      PRINTF("Error while read frequency: 0x%02X\n",ret) ;
 800233e:	7cfb      	ldrb	r3, [r7, #19]
 8002340:	4619      	mov	r1, r3
 8002342:	4809      	ldr	r0, [pc, #36]	@ (8002368 <Get_freq+0x4c>)
 8002344:	f008 fb5c 	bl	800aa00 <iprintf>
	      return BLE_STATUS_ERROR ;
 8002348:	2347      	movs	r3, #71	@ 0x47
 800234a:	e007      	b.n	800235c <Get_freq+0x40>
	  }
	  int freq = (int)data[0];
 800234c:	793b      	ldrb	r3, [r7, #4]
 800234e:	60fb      	str	r3, [r7, #12]
	  if(freq == 0) return 100;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <Get_freq+0x3e>
 8002356:	2364      	movs	r3, #100	@ 0x64
 8002358:	e000      	b.n	800235c <Get_freq+0x40>
	  return freq;
 800235a:	68fb      	ldr	r3, [r7, #12]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	200000b2 	.word	0x200000b2
 8002368:	0800bb00 	.word	0x0800bb00

0800236c <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b092      	sub	sp, #72	@ 0x48
 8002370:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8002372:	4a3f      	ldr	r2, [pc, #252]	@ (8002470 <Set_DeviceConnectable+0x104>)
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800237c:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8002380:	2302      	movs	r3, #2
 8002382:	703b      	strb	r3, [r7, #0]
 8002384:	230a      	movs	r3, #10
 8002386:	707b      	strb	r3, [r7, #1]
 8002388:	2300      	movs	r3, #0
 800238a:	70bb      	strb	r3, [r7, #2]
 800238c:	2308      	movs	r3, #8
 800238e:	70fb      	strb	r3, [r7, #3]
 8002390:	2309      	movs	r3, #9
 8002392:	713b      	strb	r3, [r7, #4]
 8002394:	2342      	movs	r3, #66	@ 0x42
 8002396:	717b      	strb	r3, [r7, #5]
 8002398:	236c      	movs	r3, #108	@ 0x6c
 800239a:	71bb      	strb	r3, [r7, #6]
 800239c:	2375      	movs	r3, #117	@ 0x75
 800239e:	71fb      	strb	r3, [r7, #7]
 80023a0:	2365      	movs	r3, #101	@ 0x65
 80023a2:	723b      	strb	r3, [r7, #8]
 80023a4:	2361      	movs	r3, #97	@ 0x61
 80023a6:	727b      	strb	r3, [r7, #9]
 80023a8:	2362      	movs	r3, #98	@ 0x62
 80023aa:	72bb      	strb	r3, [r7, #10]
 80023ac:	2363      	movs	r3, #99	@ 0x63
 80023ae:	72fb      	strb	r3, [r7, #11]
 80023b0:	230d      	movs	r3, #13
 80023b2:	733b      	strb	r3, [r7, #12]
 80023b4:	23ff      	movs	r3, #255	@ 0xff
 80023b6:	737b      	strb	r3, [r7, #13]
 80023b8:	2301      	movs	r3, #1
 80023ba:	73bb      	strb	r3, [r7, #14]
 80023bc:	2380      	movs	r3, #128	@ 0x80
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	2300      	movs	r3, #0
 80023c2:	743b      	strb	r3, [r7, #16]
 80023c4:	23f4      	movs	r3, #244	@ 0xf4
 80023c6:	747b      	strb	r3, [r7, #17]
 80023c8:	2300      	movs	r3, #0
 80023ca:	74bb      	strb	r3, [r7, #18]
 80023cc:	2300      	movs	r3, #0
 80023ce:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 80023d0:	4b28      	ldr	r3, [pc, #160]	@ (8002474 <Set_DeviceConnectable+0x108>)
 80023d2:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 80023d4:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 80023d6:	4b27      	ldr	r3, [pc, #156]	@ (8002474 <Set_DeviceConnectable+0x108>)
 80023d8:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 80023da:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 80023dc:	4b25      	ldr	r3, [pc, #148]	@ (8002474 <Set_DeviceConnectable+0x108>)
 80023de:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 80023e0:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 80023e2:	4b24      	ldr	r3, [pc, #144]	@ (8002474 <Set_DeviceConnectable+0x108>)
 80023e4:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 80023e6:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 80023e8:	4b22      	ldr	r3, [pc, #136]	@ (8002474 <Set_DeviceConnectable+0x108>)
 80023ea:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 80023ec:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 80023ee:	4b21      	ldr	r3, [pc, #132]	@ (8002474 <Set_DeviceConnectable+0x108>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 80023f2:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80023f4:	7cbb      	ldrb	r3, [r7, #18]
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 80023fe:	2100      	movs	r1, #0
 8002400:	2000      	movs	r0, #0
 8002402:	f006 fb6a 	bl	8008ada <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");
 8002406:	481c      	ldr	r0, [pc, #112]	@ (8002478 <Set_DeviceConnectable+0x10c>)
 8002408:	f008 fb62 	bl	800aad0 <puts>

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 800240c:	2300      	movs	r3, #0
 800240e:	9306      	str	r3, [sp, #24]
 8002410:	2300      	movs	r3, #0
 8002412:	9305      	str	r3, [sp, #20]
 8002414:	2300      	movs	r3, #0
 8002416:	9304      	str	r3, [sp, #16]
 8002418:	2300      	movs	r3, #0
 800241a:	9303      	str	r3, [sp, #12]
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	9302      	str	r3, [sp, #8]
 8002422:	2308      	movs	r3, #8
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	2300      	movs	r3, #0
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2301      	movs	r3, #1
 800242c:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8002430:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8002434:	2000      	movs	r0, #0
 8002436:	f005 fdfe 	bl	8008036 <aci_gap_set_discoverable>
 800243a:	4603      	mov	r3, r0
 800243c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8002440:	463b      	mov	r3, r7
 8002442:	4619      	mov	r1, r3
 8002444:	201a      	movs	r0, #26
 8002446:	f005 ff37 	bl	80082b8 <aci_gap_update_adv_data>

  if(ret != BLE_STATUS_SUCCESS)
 800244a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <Set_DeviceConnectable+0xf4>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 8002452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002456:	4619      	mov	r1, r3
 8002458:	4808      	ldr	r0, [pc, #32]	@ (800247c <Set_DeviceConnectable+0x110>)
 800245a:	f008 fad1 	bl	800aa00 <iprintf>
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 800245e:	e002      	b.n	8002466 <Set_DeviceConnectable+0xfa>
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
 8002460:	4807      	ldr	r0, [pc, #28]	@ (8002480 <Set_DeviceConnectable+0x114>)
 8002462:	f008 fb35 	bl	800aad0 <puts>
}
 8002466:	bf00      	nop
 8002468:	3728      	adds	r7, #40	@ 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	0800bb98 	.word	0x0800bb98
 8002474:	200000a4 	.word	0x200000a4
 8002478:	0800bb24 	.word	0x0800bb24
 800247c:	0800bb44 	.word	0x0800bb44
 8002480:	0800bb70 	.word	0x0800bb70

08002484 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	3301      	adds	r3, #1
 8002494:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b04      	cmp	r3, #4
 800249c:	d139      	bne.n	8002512 <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2bff      	cmp	r3, #255	@ 0xff
 80024a4:	d01f      	beq.n	80024e6 <user_notify+0x62>
 80024a6:	2bff      	cmp	r3, #255	@ 0xff
 80024a8:	dc38      	bgt.n	800251c <user_notify+0x98>
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d002      	beq.n	80024b4 <user_notify+0x30>
 80024ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80024b0:	d003      	beq.n	80024ba <user_notify+0x36>
 80024b2:	e033      	b.n	800251c <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80024b4:	f000 f836 	bl	8002524 <GAP_DisconnectionComplete_CB>
    }
    break;
 80024b8:	e030      	b.n	800251c <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	3302      	adds	r3, #2
 80024be:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d126      	bne.n	8002516 <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3301      	adds	r3, #1
 80024cc:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1d5a      	adds	r2, r3, #5
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f000 f839 	bl	8002554 <GAP_ConnectionComplete_CB>
        }
        break;
 80024e2:	bf00      	nop
      }
    }
    break;
 80024e4:	e017      	b.n	8002516 <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	3302      	adds	r3, #2
 80024ea:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	f640 4314 	movw	r3, #3092	@ 0xc14
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d10e      	bne.n	800251a <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3302      	adds	r3, #2
 8002500:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	885b      	ldrh	r3, [r3, #2]
 8002506:	b29b      	uxth	r3, r3
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fee7 	bl	80022dc <Read_Request_CB>
        }
        break;
 800250e:	bf00      	nop
      }

    }
    break;
 8002510:	e003      	b.n	800251a <user_notify+0x96>
    return;
 8002512:	bf00      	nop
 8002514:	e002      	b.n	800251c <user_notify+0x98>
    break;
 8002516:	bf00      	nop
 8002518:	e000      	b.n	800251c <user_notify+0x98>
    break;
 800251a:	bf00      	nop
  }
}
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  connected = FALSE;
 8002528:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <GAP_DisconnectionComplete_CB+0x20>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
 800252e:	4806      	ldr	r0, [pc, #24]	@ (8002548 <GAP_DisconnectionComplete_CB+0x24>)
 8002530:	f008 face 	bl	800aad0 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8002534:	4b05      	ldr	r3, [pc, #20]	@ (800254c <GAP_DisconnectionComplete_CB+0x28>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <GAP_DisconnectionComplete_CB+0x2c>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200000dc 	.word	0x200000dc
 8002548:	0800bba0 	.word	0x0800bba0
 800254c:	20000001 	.word	0x20000001
 8002550:	200000da 	.word	0x200000da

08002554 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002560:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <GAP_ConnectionComplete_CB+0x54>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8002566:	4a11      	ldr	r2, [pc, #68]	@ (80025ac <GAP_ConnectionComplete_CB+0x58>)
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
 800256c:	4810      	ldr	r0, [pc, #64]	@ (80025b0 <GAP_ConnectionComplete_CB+0x5c>)
 800256e:	f008 fa47 	bl	800aa00 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8002572:	2305      	movs	r3, #5
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	e00a      	b.n	800258e <GAP_ConnectionComplete_CB+0x3a>
    PRINTF("%02X-", addr[i]);
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4413      	add	r3, r2
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	480c      	ldr	r0, [pc, #48]	@ (80025b4 <GAP_ConnectionComplete_CB+0x60>)
 8002584:	f008 fa3c 	bl	800aa00 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3b01      	subs	r3, #1
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f1      	bne.n	8002578 <GAP_ConnectionComplete_CB+0x24>
  }
  PRINTF("%02X\n", addr[0]);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	4619      	mov	r1, r3
 800259a:	4807      	ldr	r0, [pc, #28]	@ (80025b8 <GAP_ConnectionComplete_CB+0x64>)
 800259c:	f008 fa30 	bl	800aa00 <iprintf>
  //aci_gap_send_pairing_request(handle, 0x00);
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200000dc 	.word	0x200000dc
 80025ac:	200000d8 	.word	0x200000d8
 80025b0:	0800bbb0 	.word	0x0800bbb0
 80025b4:	0800bbc8 	.word	0x0800bbc8
 80025b8:	0800bbd0 	.word	0x0800bbd0

080025bc <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002644 <HCI_TL_SPI_Init+0x88>)
 80025c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002644 <HCI_TL_SPI_Init+0x88>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002644 <HCI_TL_SPI_Init+0x88>)
 80025d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80025dc:	2340      	movs	r3, #64	@ 0x40
 80025de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	4619      	mov	r1, r3
 80025f0:	4815      	ldr	r0, [pc, #84]	@ (8002648 <HCI_TL_SPI_Init+0x8c>)
 80025f2:	f001 fe75 	bl	80042e0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80025f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8002608:	f107 030c 	add.w	r3, r7, #12
 800260c:	4619      	mov	r1, r3
 800260e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002612:	f001 fe65 	bl	80042e0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8002616:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800261a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261c:	2301      	movs	r3, #1
 800261e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	4619      	mov	r1, r3
 800262e:	4807      	ldr	r0, [pc, #28]	@ (800264c <HCI_TL_SPI_Init+0x90>)
 8002630:	f001 fe56 	bl	80042e0 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8002634:	f001 fa4e 	bl	8003ad4 <BSP_SPI3_Init>
 8002638:	4603      	mov	r3, r0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	48001000 	.word	0x48001000
 800264c:	48000c00 	.word	0x48000c00

08002650 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8002654:	2140      	movs	r1, #64	@ 0x40
 8002656:	4808      	ldr	r0, [pc, #32]	@ (8002678 <HCI_TL_SPI_DeInit+0x28>)
 8002658:	f001 ffec 	bl	8004634 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800265c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002660:	4806      	ldr	r0, [pc, #24]	@ (800267c <HCI_TL_SPI_DeInit+0x2c>)
 8002662:	f001 ffe7 	bl	8004634 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8002666:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800266a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800266e:	f001 ffe1 	bl	8004634 <HAL_GPIO_DeInit>
  return 0;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	48001000 	.word	0x48001000
 800267c:	48000c00 	.word	0x48000c00

08002680 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002684:	2201      	movs	r2, #1
 8002686:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800268a:	480d      	ldr	r0, [pc, #52]	@ (80026c0 <HCI_TL_SPI_Reset+0x40>)
 800268c:	f002 f8de 	bl	800484c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800269a:	f002 f8d7 	bl	800484c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800269e:	2005      	movs	r0, #5
 80026a0:	f001 fb7e 	bl	8003da0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80026a4:	2201      	movs	r2, #1
 80026a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ae:	f002 f8cd 	bl	800484c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80026b2:	2005      	movs	r0, #5
 80026b4:	f001 fb74 	bl	8003da0 <HAL_Delay>
  return 0;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	48000c00 	.word	0x48000c00

080026c4 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80026d4:	23ff      	movs	r3, #255	@ 0xff
 80026d6:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80026d8:	4a26      	ldr	r2, [pc, #152]	@ (8002774 <HCI_TL_SPI_Receive+0xb0>)
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026e2:	6018      	str	r0, [r3, #0]
 80026e4:	3304      	adds	r3, #4
 80026e6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80026e8:	2200      	movs	r2, #0
 80026ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026ee:	4822      	ldr	r0, [pc, #136]	@ (8002778 <HCI_TL_SPI_Receive+0xb4>)
 80026f0:	f002 f8ac 	bl	800484c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80026f4:	f107 010c 	add.w	r1, r7, #12
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2205      	movs	r2, #5
 80026fe:	4618      	mov	r0, r3
 8002700:	f001 fa18 	bl	8003b34 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8002704:	7b3b      	ldrb	r3, [r7, #12]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d129      	bne.n	800275e <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800270a:	7c3b      	ldrb	r3, [r7, #16]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	b21a      	sxth	r2, r3
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	b21b      	sxth	r3, r3
 8002714:	4313      	orrs	r3, r2
 8002716:	b21b      	sxth	r3, r3
 8002718:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 800271a:	8bfb      	ldrh	r3, [r7, #30]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01e      	beq.n	800275e <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8002720:	8bfa      	ldrh	r2, [r7, #30]
 8002722:	887b      	ldrh	r3, [r7, #2]
 8002724:	429a      	cmp	r2, r3
 8002726:	d901      	bls.n	800272c <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 800272c:	2300      	movs	r3, #0
 800272e:	777b      	strb	r3, [r7, #29]
 8002730:	e010      	b.n	8002754 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8002732:	f107 011b 	add.w	r1, r7, #27
 8002736:	f107 031c 	add.w	r3, r7, #28
 800273a:	2201      	movs	r2, #1
 800273c:	4618      	mov	r0, r3
 800273e:	f001 f9f9 	bl	8003b34 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8002742:	7f7b      	ldrb	r3, [r7, #29]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	7efa      	ldrb	r2, [r7, #27]
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 800274e:	7f7b      	ldrb	r3, [r7, #29]
 8002750:	3301      	adds	r3, #1
 8002752:	777b      	strb	r3, [r7, #29]
 8002754:	7f7b      	ldrb	r3, [r7, #29]
 8002756:	b29b      	uxth	r3, r3
 8002758:	8bfa      	ldrh	r2, [r7, #30]
 800275a:	429a      	cmp	r2, r3
 800275c:	d8e9      	bhi.n	8002732 <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800275e:	2201      	movs	r2, #1
 8002760:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002764:	4804      	ldr	r0, [pc, #16]	@ (8002778 <HCI_TL_SPI_Receive+0xb4>)
 8002766:	f002 f871 	bl	800484c <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800276a:	7f7b      	ldrb	r3, [r7, #29]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	0800bbd8 	.word	0x0800bbd8
 8002778:	48000c00 	.word	0x48000c00

0800277c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8002788:	4a24      	ldr	r2, [pc, #144]	@ (800281c <HCI_TL_SPI_Send+0xa0>)
 800278a:	f107 0310 	add.w	r3, r7, #16
 800278e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002792:	6018      	str	r0, [r3, #0]
 8002794:	3304      	adds	r3, #4
 8002796:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002798:	f001 faf6 	bl	8003d88 <HAL_GetTick>
 800279c:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80027a2:	2200      	movs	r2, #0
 80027a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027a8:	481d      	ldr	r0, [pc, #116]	@ (8002820 <HCI_TL_SPI_Send+0xa4>)
 80027aa:	f002 f84f 	bl	800484c <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80027ae:	f107 0108 	add.w	r1, r7, #8
 80027b2:	f107 0310 	add.w	r3, r7, #16
 80027b6:	2205      	movs	r2, #5
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 f9bb 	bl	8003b34 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 80027be:	7a3b      	ldrb	r3, [r7, #8]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d10f      	bne.n	80027e4 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80027c4:	7a7b      	ldrb	r3, [r7, #9]
 80027c6:	461a      	mov	r2, r3
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d806      	bhi.n	80027dc <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4914      	ldr	r1, [pc, #80]	@ (8002824 <HCI_TL_SPI_Send+0xa8>)
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f001 f9ad 	bl	8003b34 <BSP_SPI3_SendRecv>
 80027da:	e006      	b.n	80027ea <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80027dc:	f06f 0301 	mvn.w	r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e002      	b.n	80027ea <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80027ea:	2201      	movs	r2, #1
 80027ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027f0:	480b      	ldr	r0, [pc, #44]	@ (8002820 <HCI_TL_SPI_Send+0xa4>)
 80027f2:	f002 f82b 	bl	800484c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80027f6:	f001 fac7 	bl	8003d88 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b0f      	cmp	r3, #15
 8002802:	d903      	bls.n	800280c <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8002804:	f06f 0302 	mvn.w	r3, #2
 8002808:	61fb      	str	r3, [r7, #28]
      break;
 800280a:	e002      	b.n	8002812 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	dbc5      	blt.n	800279e <HCI_TL_SPI_Send+0x22>

  return result;
 8002812:	69fb      	ldr	r3, [r7, #28]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	0800bbe0 	.word	0x0800bbe0
 8002820:	48000c00 	.word	0x48000c00
 8002824:	20000118 	.word	0x20000118

08002828 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800282c:	2140      	movs	r1, #64	@ 0x40
 800282e:	4805      	ldr	r0, [pc, #20]	@ (8002844 <IsDataAvailable+0x1c>)
 8002830:	f001 fff4 	bl	800481c <HAL_GPIO_ReadPin>
 8002834:	4603      	mov	r3, r0
 8002836:	2b01      	cmp	r3, #1
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	48001000 	.word	0x48001000

08002848 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800284e:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <hci_tl_lowlevel_init+0x50>)
 8002850:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8002852:	4b12      	ldr	r3, [pc, #72]	@ (800289c <hci_tl_lowlevel_init+0x54>)
 8002854:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8002856:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <hci_tl_lowlevel_init+0x58>)
 8002858:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800285a:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <hci_tl_lowlevel_init+0x5c>)
 800285c:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800285e:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <hci_tl_lowlevel_init+0x60>)
 8002860:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8002862:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <hci_tl_lowlevel_init+0x64>)
 8002864:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	4618      	mov	r0, r3
 800286a:	f006 fa53 	bl	8008d14 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 800286e:	4910      	ldr	r1, [pc, #64]	@ (80028b0 <hci_tl_lowlevel_init+0x68>)
 8002870:	4810      	ldr	r0, [pc, #64]	@ (80028b4 <hci_tl_lowlevel_init+0x6c>)
 8002872:	f001 fcf1 	bl	8004258 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8002876:	4a10      	ldr	r2, [pc, #64]	@ (80028b8 <hci_tl_lowlevel_init+0x70>)
 8002878:	2100      	movs	r1, #0
 800287a:	480e      	ldr	r0, [pc, #56]	@ (80028b4 <hci_tl_lowlevel_init+0x6c>)
 800287c:	f001 fcd2 	bl	8004224 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	2017      	movs	r0, #23
 8002886:	f001 fb8a 	bl	8003f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800288a:	2017      	movs	r0, #23
 800288c:	f001 fba3 	bl	8003fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002890:	bf00      	nop
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	080025bd 	.word	0x080025bd
 800289c:	08002651 	.word	0x08002651
 80028a0:	0800277d 	.word	0x0800277d
 80028a4:	080026c5 	.word	0x080026c5
 80028a8:	08002681 	.word	0x08002681
 80028ac:	08003b75 	.word	0x08003b75
 80028b0:	16000006 	.word	0x16000006
 80028b4:	20000110 	.word	0x20000110
 80028b8:	080028bd 	.word	0x080028bd

080028bc <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80028c0:	e005      	b.n	80028ce <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80028c2:	2000      	movs	r0, #0
 80028c4:	f006 fb8a 	bl	8008fdc <hci_notify_asynch_evt>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80028ce:	f7ff ffab 	bl	8002828 <IsDataAvailable>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f4      	bne.n	80028c2 <hci_tl_lowlevel_isr+0x6>
 80028d8:	e000      	b.n	80028dc <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80028da:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a07      	ldr	r2, [pc, #28]	@ (800290c <vApplicationGetIdleTaskMemory+0x2c>)
 80028f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4a06      	ldr	r2, [pc, #24]	@ (8002910 <vApplicationGetIdleTaskMemory+0x30>)
 80028f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000218 	.word	0x20000218
 8002910:	2000026c 	.word	0x2000026c

08002914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002914:	b5b0      	push	{r4, r5, r7, lr}
 8002916:	b08e      	sub	sp, #56	@ 0x38
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800291a:	f001 f9cd 	bl	8003cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800291e:	f000 f83f 	bl	80029a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002922:	f000 f999 	bl	8002c58 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8002926:	f000 f89d 	bl	8002a64 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800292a:	f000 f8d3 	bl	8002ad4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800292e:	f000 f90f 	bl	8002b50 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8002932:	f000 f933 	bl	8002b9c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002936:	f000 f961 	bl	8002bfc <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 800293a:	f7fe f825 	bl	8000988 <MX_BlueNRG_MS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256, defaultTaskBuffer, &defaultTaskControlBlock);
 800293e:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <main+0x7c>)
 8002940:	f107 041c 	add.w	r4, r7, #28
 8002944:	461d      	mov	r5, r3
 8002946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800294a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800294e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f006 fcc1 	bl	80092e0 <osThreadCreate>
 800295e:	4603      	mov	r3, r0
 8002960:	4a0c      	ldr	r2, [pc, #48]	@ (8002994 <main+0x80>)
 8002962:	6013      	str	r3, [r2, #0]

  /* definition and creation of TASK_ACC */
  osThreadStaticDef(TASK_ACC, StartTASK_ACC, osPriorityIdle, 0, 128, TASK_ACCBuffer, &TASK_ACCControlBlock);
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <main+0x84>)
 8002966:	463c      	mov	r4, r7
 8002968:	461d      	mov	r5, r3
 800296a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800296c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800296e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TASK_ACCHandle = osThreadCreate(osThread(TASK_ACC), NULL);
 8002976:	463b      	mov	r3, r7
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f006 fcb0 	bl	80092e0 <osThreadCreate>
 8002980:	4603      	mov	r3, r0
 8002982:	4a06      	ldr	r2, [pc, #24]	@ (800299c <main+0x88>)
 8002984:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002986:	f006 fca4 	bl	80092d2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800298a:	bf00      	nop
 800298c:	e7fd      	b.n	800298a <main+0x76>
 800298e:	bf00      	nop
 8002990:	0800bbf4 	.word	0x0800bbf4
 8002994:	20000aa8 	.word	0x20000aa8
 8002998:	0800bc1c 	.word	0x0800bc1c
 800299c:	20000f00 	.word	0x20000f00

080029a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b096      	sub	sp, #88	@ 0x58
 80029a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	2244      	movs	r2, #68	@ 0x44
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f008 f96e 	bl	800ac90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029b4:	463b      	mov	r3, r7
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80029c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80029c6:	f002 fa19 	bl	8004dfc <HAL_PWREx_ControlVoltageScaling>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80029d0:	f000 faf3 	bl	8002fba <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80029d4:	f002 f9f4 	bl	8004dc0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80029d8:	4b21      	ldr	r3, [pc, #132]	@ (8002a60 <SystemClock_Config+0xc0>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029de:	4a20      	ldr	r2, [pc, #128]	@ (8002a60 <SystemClock_Config+0xc0>)
 80029e0:	f023 0318 	bic.w	r3, r3, #24
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80029e8:	2314      	movs	r3, #20
 80029ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029ec:	2301      	movs	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80029f0:	2301      	movs	r3, #1
 80029f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80029f8:	2360      	movs	r3, #96	@ 0x60
 80029fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029fc:	2302      	movs	r3, #2
 80029fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002a00:	2301      	movs	r3, #1
 8002a02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002a04:	2301      	movs	r3, #1
 8002a06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002a08:	2328      	movs	r3, #40	@ 0x28
 8002a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002a0c:	2307      	movs	r3, #7
 8002a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a10:	2302      	movs	r3, #2
 8002a12:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a14:	2302      	movs	r3, #2
 8002a16:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f002 fb0f 	bl	8005040 <HAL_RCC_OscConfig>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002a28:	f000 fac7 	bl	8002fba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a2c:	230f      	movs	r3, #15
 8002a2e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a30:	2303      	movs	r3, #3
 8002a32:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a40:	463b      	mov	r3, r7
 8002a42:	2104      	movs	r1, #4
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 fed7 	bl	80057f8 <HAL_RCC_ClockConfig>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002a50:	f000 fab3 	bl	8002fba <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002a54:	f003 fbde 	bl	8006214 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002a58:	bf00      	nop
 8002a5a:	3758      	adds	r7, #88	@ 0x58
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000

08002a64 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8002a68:	4b18      	ldr	r3, [pc, #96]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002a6a:	4a19      	ldr	r2, [pc, #100]	@ (8002ad0 <MX_DFSDM1_Init+0x6c>)
 8002a6c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8002a6e:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002a74:	4b15      	ldr	r3, [pc, #84]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8002a7a:	4b14      	ldr	r3, [pc, #80]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002a80:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002a86:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002a8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a92:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002a94:	4b0d      	ldr	r3, [pc, #52]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8002aa6:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8002aac:	4b07      	ldr	r3, [pc, #28]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8002ab2:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8002ab8:	4804      	ldr	r0, [pc, #16]	@ (8002acc <MX_DFSDM1_Init+0x68>)
 8002aba:	f001 faa7 	bl	800400c <HAL_DFSDM_ChannelInit>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8002ac4:	f000 fa79 	bl	8002fba <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	2000046c 	.word	0x2000046c
 8002ad0:	40016020 	.word	0x40016020

08002ad4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002ada:	4a1c      	ldr	r2, [pc, #112]	@ (8002b4c <MX_I2C2_Init+0x78>)
 8002adc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8002ade:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002ae0:	f640 6214 	movw	r2, #3604	@ 0xe14
 8002ae4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002ae6:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aec:	4b16      	ldr	r3, [pc, #88]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002af2:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002af8:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002afe:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b04:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b10:	480d      	ldr	r0, [pc, #52]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002b12:	f001 fef0 	bl	80048f6 <HAL_I2C_Init>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b1c:	f000 fa4d 	bl	8002fba <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b20:	2100      	movs	r1, #0
 8002b22:	4809      	ldr	r0, [pc, #36]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002b24:	f001 ff82 	bl	8004a2c <HAL_I2CEx_ConfigAnalogFilter>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002b2e:	f000 fa44 	bl	8002fba <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002b32:	2100      	movs	r1, #0
 8002b34:	4804      	ldr	r0, [pc, #16]	@ (8002b48 <MX_I2C2_Init+0x74>)
 8002b36:	f001 ffc4 	bl	8004ac2 <HAL_I2CEx_ConfigDigitalFilter>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002b40:	f000 fa3b 	bl	8002fba <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200004a4 	.word	0x200004a4
 8002b4c:	40005800 	.word	0x40005800

08002b50 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002b54:	4b0f      	ldr	r3, [pc, #60]	@ (8002b94 <MX_QUADSPI_Init+0x44>)
 8002b56:	4a10      	ldr	r2, [pc, #64]	@ (8002b98 <MX_QUADSPI_Init+0x48>)
 8002b58:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <MX_QUADSPI_Init+0x44>)
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002b60:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <MX_QUADSPI_Init+0x44>)
 8002b62:	2204      	movs	r2, #4
 8002b64:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <MX_QUADSPI_Init+0x44>)
 8002b68:	2210      	movs	r2, #16
 8002b6a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002b6c:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <MX_QUADSPI_Init+0x44>)
 8002b6e:	2217      	movs	r2, #23
 8002b70:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002b72:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <MX_QUADSPI_Init+0x44>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <MX_QUADSPI_Init+0x44>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002b7e:	4805      	ldr	r0, [pc, #20]	@ (8002b94 <MX_QUADSPI_Init+0x44>)
 8002b80:	f002 f9a2 	bl	8004ec8 <HAL_QSPI_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8002b8a:	f000 fa16 	bl	8002fba <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200004f8 	.word	0x200004f8
 8002b98:	a0001000 	.word	0xa0001000

08002b9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ba0:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <MX_USART3_UART_Init+0x58>)
 8002ba2:	4a15      	ldr	r2, [pc, #84]	@ (8002bf8 <MX_USART3_UART_Init+0x5c>)
 8002ba4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ba6:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <MX_USART3_UART_Init+0x58>)
 8002ba8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bae:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <MX_USART3_UART_Init+0x58>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf4 <MX_USART3_UART_Init+0x58>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bba:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf4 <MX_USART3_UART_Init+0x58>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <MX_USART3_UART_Init+0x58>)
 8002bc2:	220c      	movs	r2, #12
 8002bc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <MX_USART3_UART_Init+0x58>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <MX_USART3_UART_Init+0x58>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bd2:	4b08      	ldr	r3, [pc, #32]	@ (8002bf4 <MX_USART3_UART_Init+0x58>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <MX_USART3_UART_Init+0x58>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bde:	4805      	ldr	r0, [pc, #20]	@ (8002bf4 <MX_USART3_UART_Init+0x58>)
 8002be0:	f004 f938 	bl	8006e54 <HAL_UART_Init>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002bea:	f000 f9e6 	bl	8002fba <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	2000053c 	.word	0x2000053c
 8002bf8:	40004800 	.word	0x40004800

08002bfc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c00:	4b14      	ldr	r3, [pc, #80]	@ (8002c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002c06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002c08:	4b12      	ldr	r3, [pc, #72]	@ (8002c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c0a:	2206      	movs	r2, #6
 8002c0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c0e:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c10:	2202      	movs	r2, #2
 8002c12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c14:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c16:	2202      	movs	r2, #2
 8002c18:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c20:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c26:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002c2c:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002c32:	4b08      	ldr	r3, [pc, #32]	@ (8002c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002c38:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c3e:	4805      	ldr	r0, [pc, #20]	@ (8002c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c40:	f001 ff8b 	bl	8004b5a <HAL_PCD_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002c4a:	f000 f9b6 	bl	8002fba <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200005c4 	.word	0x200005c4

08002c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	@ 0x28
 8002c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c6e:	4bbd      	ldr	r3, [pc, #756]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c72:	4abc      	ldr	r2, [pc, #752]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002c74:	f043 0310 	orr.w	r3, r3, #16
 8002c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c7a:	4bba      	ldr	r3, [pc, #744]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c86:	4bb7      	ldr	r3, [pc, #732]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8a:	4ab6      	ldr	r2, [pc, #728]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c92:	4bb4      	ldr	r3, [pc, #720]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9e:	4bb1      	ldr	r3, [pc, #708]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	4ab0      	ldr	r2, [pc, #704]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002caa:	4bae      	ldr	r3, [pc, #696]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb6:	4bab      	ldr	r3, [pc, #684]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cba:	4aaa      	ldr	r2, [pc, #680]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002cbc:	f043 0302 	orr.w	r3, r3, #2
 8002cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cc2:	4ba8      	ldr	r3, [pc, #672]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cce:	4ba5      	ldr	r3, [pc, #660]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd2:	4aa4      	ldr	r2, [pc, #656]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cda:	4ba2      	ldr	r3, [pc, #648]	@ (8002f64 <MX_GPIO_Init+0x30c>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002cec:	489e      	ldr	r0, [pc, #632]	@ (8002f68 <MX_GPIO_Init+0x310>)
 8002cee:	f001 fdad 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f248 1104 	movw	r1, #33028	@ 0x8104
 8002cf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cfc:	f001 fda6 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002d00:	2200      	movs	r2, #0
 8002d02:	f24b 0114 	movw	r1, #45076	@ 0xb014
 8002d06:	4899      	ldr	r0, [pc, #612]	@ (8002f6c <MX_GPIO_Init+0x314>)
 8002d08:	f001 fda0 	bl	800484c <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f241 0181 	movw	r1, #4225	@ 0x1081
 8002d12:	4897      	ldr	r0, [pc, #604]	@ (8002f70 <MX_GPIO_Init+0x318>)
 8002d14:	f001 fd9a 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d1e:	4894      	ldr	r0, [pc, #592]	@ (8002f70 <MX_GPIO_Init+0x318>)
 8002d20:	f001 fd94 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002d24:	2200      	movs	r2, #0
 8002d26:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8002d2a:	4892      	ldr	r0, [pc, #584]	@ (8002f74 <MX_GPIO_Init+0x31c>)
 8002d2c:	f001 fd8e 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002d30:	2201      	movs	r2, #1
 8002d32:	2120      	movs	r1, #32
 8002d34:	488d      	ldr	r0, [pc, #564]	@ (8002f6c <MX_GPIO_Init+0x314>)
 8002d36:	f001 fd89 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	488a      	ldr	r0, [pc, #552]	@ (8002f68 <MX_GPIO_Init+0x310>)
 8002d40:	f001 fd84 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002d44:	f240 1315 	movw	r3, #277	@ 0x115
 8002d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4882      	ldr	r0, [pc, #520]	@ (8002f68 <MX_GPIO_Init+0x310>)
 8002d5e:	f001 fabf 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8002d62:	236a      	movs	r3, #106	@ 0x6a
 8002d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	487c      	ldr	r0, [pc, #496]	@ (8002f68 <MX_GPIO_Init+0x310>)
 8002d78:	f001 fab2 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002d7c:	233f      	movs	r3, #63	@ 0x3f
 8002d7e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d80:	230b      	movs	r3, #11
 8002d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4879      	ldr	r0, [pc, #484]	@ (8002f74 <MX_GPIO_Init+0x31c>)
 8002d90:	f001 faa6 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002d94:	2303      	movs	r3, #3
 8002d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da0:	2303      	movs	r3, #3
 8002da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002da4:	2308      	movs	r3, #8
 8002da6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	4619      	mov	r1, r3
 8002dae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002db2:	f001 fa95 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8002db6:	f248 1304 	movw	r3, #33028	@ 0x8104
 8002dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dd2:	f001 fa85 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002de6:	2301      	movs	r3, #1
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002dea:	f107 0314 	add.w	r3, r7, #20
 8002dee:	4619      	mov	r1, r3
 8002df0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002df4:	f001 fa74 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002df8:	2310      	movs	r3, #16
 8002dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002dfc:	230b      	movs	r3, #11
 8002dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e0e:	f001 fa67 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002e12:	23e0      	movs	r3, #224	@ 0xe0
 8002e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e22:	2305      	movs	r3, #5
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e30:	f001 fa56 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002e34:	2301      	movs	r3, #1
 8002e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4619      	mov	r1, r3
 8002e48:	4848      	ldr	r0, [pc, #288]	@ (8002f6c <MX_GPIO_Init+0x314>)
 8002e4a:	f001 fa49 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002e52:	230b      	movs	r3, #11
 8002e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002e5a:	f107 0314 	add.w	r3, r7, #20
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4842      	ldr	r0, [pc, #264]	@ (8002f6c <MX_GPIO_Init+0x314>)
 8002e62:	f001 fa3d 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002e66:	f24b 0334 	movw	r3, #45108	@ 0xb034
 8002e6a:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	483b      	ldr	r0, [pc, #236]	@ (8002f6c <MX_GPIO_Init+0x314>)
 8002e80:	f001 fa2e 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8002e84:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8002e88:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e8a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4835      	ldr	r0, [pc, #212]	@ (8002f70 <MX_GPIO_Init+0x318>)
 8002e9c:	f001 fa20 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002ea0:	f243 0381 	movw	r3, #12417	@ 0x3081
 8002ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	482d      	ldr	r0, [pc, #180]	@ (8002f70 <MX_GPIO_Init+0x318>)
 8002eba:	f001 fa11 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002ebe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4827      	ldr	r0, [pc, #156]	@ (8002f74 <MX_GPIO_Init+0x31c>)
 8002ed8:	f001 fa02 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002edc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ee2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4820      	ldr	r0, [pc, #128]	@ (8002f74 <MX_GPIO_Init+0x31c>)
 8002ef4:	f001 f9f4 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f04:	2303      	movs	r3, #3
 8002f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f08:	2305      	movs	r3, #5
 8002f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	4817      	ldr	r0, [pc, #92]	@ (8002f70 <MX_GPIO_Init+0x318>)
 8002f14:	f001 f9e4 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002f18:	2378      	movs	r3, #120	@ 0x78
 8002f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f24:	2303      	movs	r3, #3
 8002f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f28:	2307      	movs	r3, #7
 8002f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	4619      	mov	r1, r3
 8002f32:	480f      	ldr	r0, [pc, #60]	@ (8002f70 <MX_GPIO_Init+0x318>)
 8002f34:	f001 f9d4 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002f38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f3e:	2312      	movs	r3, #18
 8002f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f46:	2303      	movs	r3, #3
 8002f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4e:	f107 0314 	add.w	r3, r7, #20
 8002f52:	4619      	mov	r1, r3
 8002f54:	4805      	ldr	r0, [pc, #20]	@ (8002f6c <MX_GPIO_Init+0x314>)
 8002f56:	f001 f9c3 	bl	80042e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2105      	movs	r1, #5
 8002f5e:	2017      	movs	r0, #23
 8002f60:	e00a      	b.n	8002f78 <MX_GPIO_Init+0x320>
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	48001000 	.word	0x48001000
 8002f6c:	48000400 	.word	0x48000400
 8002f70:	48000c00 	.word	0x48000c00
 8002f74:	48000800 	.word	0x48000800
 8002f78:	f001 f811 	bl	8003f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f7c:	2017      	movs	r0, #23
 8002f7e:	f001 f82a 	bl	8003fd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2105      	movs	r1, #5
 8002f86:	2028      	movs	r0, #40	@ 0x28
 8002f88:	f001 f809 	bl	8003f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f8c:	2028      	movs	r0, #40	@ 0x28
 8002f8e:	f001 f822 	bl	8003fd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f92:	bf00      	nop
 8002f94:	3728      	adds	r7, #40	@ 0x28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop

08002f9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  MX_BlueNRG_MS_Process();
 8002fa4:	f7fd fdd4 	bl	8000b50 <MX_BlueNRG_MS_Process>
 8002fa8:	e7fc      	b.n	8002fa4 <StartDefaultTask+0x8>

08002faa <StartTASK_ACC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTASK_ACC */
void StartTASK_ACC(void const * argument)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTASK_ACC */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f006 f9e0 	bl	8009378 <osDelay>
 8002fb8:	e7fb      	b.n	8002fb2 <StartTASK_ACC+0x8>

08002fba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fbe:	b672      	cpsid	i
}
 8002fc0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fc2:	bf00      	nop
 8002fc4:	e7fd      	b.n	8002fc2 <Error_Handler+0x8>
	...

08002fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fce:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <HAL_MspInit+0x4c>)
 8002fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd2:	4a10      	ldr	r2, [pc, #64]	@ (8003014 <HAL_MspInit+0x4c>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fda:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <HAL_MspInit+0x4c>)
 8002fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <HAL_MspInit+0x4c>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fea:	4a0a      	ldr	r2, [pc, #40]	@ (8003014 <HAL_MspInit+0x4c>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff2:	4b08      	ldr	r3, [pc, #32]	@ (8003014 <HAL_MspInit+0x4c>)
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	210f      	movs	r1, #15
 8003002:	f06f 0001 	mvn.w	r0, #1
 8003006:	f000 ffca 	bl	8003f9e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000

08003018 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b0ac      	sub	sp, #176	@ 0xb0
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003030:	f107 0314 	add.w	r3, r7, #20
 8003034:	2288      	movs	r2, #136	@ 0x88
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f007 fe29 	bl	800ac90 <memset>
  if(DFSDM1_Init == 0)
 800303e:	4b25      	ldr	r3, [pc, #148]	@ (80030d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d142      	bne.n	80030cc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003046:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800304a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	4618      	mov	r0, r3
 8003058:	f002 fdf2 	bl	8005c40 <HAL_RCCEx_PeriphCLKConfig>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8003062:	f7ff ffaa 	bl	8002fba <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003066:	4b1c      	ldr	r3, [pc, #112]	@ (80030d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306a:	4a1b      	ldr	r2, [pc, #108]	@ (80030d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800306c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003070:	6613      	str	r3, [r2, #96]	@ 0x60
 8003072:	4b19      	ldr	r3, [pc, #100]	@ (80030d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003076:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800307e:	4b16      	ldr	r3, [pc, #88]	@ (80030d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003082:	4a15      	ldr	r2, [pc, #84]	@ (80030d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003084:	f043 0310 	orr.w	r3, r3, #16
 8003088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800308a:	4b13      	ldr	r3, [pc, #76]	@ (80030d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800308c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003096:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800309a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80030b0:	2306      	movs	r3, #6
 80030b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030ba:	4619      	mov	r1, r3
 80030bc:	4807      	ldr	r0, [pc, #28]	@ (80030dc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80030be:	f001 f90f 	bl	80042e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80030c2:	4b04      	ldr	r3, [pc, #16]	@ (80030d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3301      	adds	r3, #1
 80030c8:	4a02      	ldr	r2, [pc, #8]	@ (80030d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80030ca:	6013      	str	r3, [r2, #0]
  }

}
 80030cc:	bf00      	nop
 80030ce:	37b0      	adds	r7, #176	@ 0xb0
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20001158 	.word	0x20001158
 80030d8:	40021000 	.word	0x40021000
 80030dc:	48001000 	.word	0x48001000

080030e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b0ac      	sub	sp, #176	@ 0xb0
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	2288      	movs	r2, #136	@ 0x88
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f007 fdc5 	bl	800ac90 <memset>
  if(hi2c->Instance==I2C2)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a21      	ldr	r2, [pc, #132]	@ (8003190 <HAL_I2C_MspInit+0xb0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d13b      	bne.n	8003188 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003114:	2300      	movs	r3, #0
 8003116:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	4618      	mov	r0, r3
 800311e:	f002 fd8f 	bl	8005c40 <HAL_RCCEx_PeriphCLKConfig>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003128:	f7ff ff47 	bl	8002fba <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312c:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <HAL_I2C_MspInit+0xb4>)
 800312e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003130:	4a18      	ldr	r2, [pc, #96]	@ (8003194 <HAL_I2C_MspInit+0xb4>)
 8003132:	f043 0302 	orr.w	r3, r3, #2
 8003136:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003138:	4b16      	ldr	r3, [pc, #88]	@ (8003194 <HAL_I2C_MspInit+0xb4>)
 800313a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003144:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003148:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800314c:	2312      	movs	r3, #18
 800314e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003152:	2301      	movs	r3, #1
 8003154:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003158:	2303      	movs	r3, #3
 800315a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800315e:	2304      	movs	r3, #4
 8003160:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003164:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003168:	4619      	mov	r1, r3
 800316a:	480b      	ldr	r0, [pc, #44]	@ (8003198 <HAL_I2C_MspInit+0xb8>)
 800316c:	f001 f8b8 	bl	80042e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003170:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <HAL_I2C_MspInit+0xb4>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	4a07      	ldr	r2, [pc, #28]	@ (8003194 <HAL_I2C_MspInit+0xb4>)
 8003176:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800317a:	6593      	str	r3, [r2, #88]	@ 0x58
 800317c:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <HAL_I2C_MspInit+0xb4>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003188:	bf00      	nop
 800318a:	37b0      	adds	r7, #176	@ 0xb0
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40005800 	.word	0x40005800
 8003194:	40021000 	.word	0x40021000
 8003198:	48000400 	.word	0x48000400

0800319c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	@ 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a17      	ldr	r2, [pc, #92]	@ (8003218 <HAL_QSPI_MspInit+0x7c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d128      	bne.n	8003210 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80031be:	4b17      	ldr	r3, [pc, #92]	@ (800321c <HAL_QSPI_MspInit+0x80>)
 80031c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c2:	4a16      	ldr	r2, [pc, #88]	@ (800321c <HAL_QSPI_MspInit+0x80>)
 80031c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80031ca:	4b14      	ldr	r3, [pc, #80]	@ (800321c <HAL_QSPI_MspInit+0x80>)
 80031cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031d6:	4b11      	ldr	r3, [pc, #68]	@ (800321c <HAL_QSPI_MspInit+0x80>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031da:	4a10      	ldr	r2, [pc, #64]	@ (800321c <HAL_QSPI_MspInit+0x80>)
 80031dc:	f043 0310 	orr.w	r3, r3, #16
 80031e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031e2:	4b0e      	ldr	r3, [pc, #56]	@ (800321c <HAL_QSPI_MspInit+0x80>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80031ee:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80031f2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f4:	2302      	movs	r3, #2
 80031f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fc:	2303      	movs	r3, #3
 80031fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003200:	230a      	movs	r3, #10
 8003202:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	4619      	mov	r1, r3
 800320a:	4805      	ldr	r0, [pc, #20]	@ (8003220 <HAL_QSPI_MspInit+0x84>)
 800320c:	f001 f868 	bl	80042e0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003210:	bf00      	nop
 8003212:	3728      	adds	r7, #40	@ 0x28
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	a0001000 	.word	0xa0001000
 800321c:	40021000 	.word	0x40021000
 8003220:	48001000 	.word	0x48001000

08003224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b0ac      	sub	sp, #176	@ 0xb0
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	2288      	movs	r2, #136	@ 0x88
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f007 fd23 	bl	800ac90 <memset>
  if(huart->Instance==USART3)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a21      	ldr	r2, [pc, #132]	@ (80032d4 <HAL_UART_MspInit+0xb0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d13b      	bne.n	80032cc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003254:	2304      	movs	r3, #4
 8003256:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003258:	2300      	movs	r3, #0
 800325a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	4618      	mov	r0, r3
 8003262:	f002 fced 	bl	8005c40 <HAL_RCCEx_PeriphCLKConfig>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800326c:	f7ff fea5 	bl	8002fba <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003270:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <HAL_UART_MspInit+0xb4>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	4a18      	ldr	r2, [pc, #96]	@ (80032d8 <HAL_UART_MspInit+0xb4>)
 8003276:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800327a:	6593      	str	r3, [r2, #88]	@ 0x58
 800327c:	4b16      	ldr	r3, [pc, #88]	@ (80032d8 <HAL_UART_MspInit+0xb4>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003288:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <HAL_UART_MspInit+0xb4>)
 800328a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800328c:	4a12      	ldr	r2, [pc, #72]	@ (80032d8 <HAL_UART_MspInit+0xb4>)
 800328e:	f043 0308 	orr.w	r3, r3, #8
 8003292:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003294:	4b10      	ldr	r3, [pc, #64]	@ (80032d8 <HAL_UART_MspInit+0xb4>)
 8003296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80032a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80032a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a8:	2302      	movs	r3, #2
 80032aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b4:	2303      	movs	r3, #3
 80032b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80032ba:	2307      	movs	r3, #7
 80032bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80032c4:	4619      	mov	r1, r3
 80032c6:	4805      	ldr	r0, [pc, #20]	@ (80032dc <HAL_UART_MspInit+0xb8>)
 80032c8:	f001 f80a 	bl	80042e0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80032cc:	bf00      	nop
 80032ce:	37b0      	adds	r7, #176	@ 0xb0
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40004800 	.word	0x40004800
 80032d8:	40021000 	.word	0x40021000
 80032dc:	48000c00 	.word	0x48000c00

080032e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b0ac      	sub	sp, #176	@ 0xb0
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	2288      	movs	r2, #136	@ 0x88
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f007 fcc5 	bl	800ac90 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800330e:	d17c      	bne.n	800340a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003310:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003314:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003316:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800331a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800331e:	2301      	movs	r3, #1
 8003320:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003322:	2301      	movs	r3, #1
 8003324:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003326:	2318      	movs	r3, #24
 8003328:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800332a:	2307      	movs	r3, #7
 800332c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800332e:	2302      	movs	r3, #2
 8003330:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003332:	2302      	movs	r3, #2
 8003334:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003336:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800333a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	4618      	mov	r0, r3
 8003342:	f002 fc7d 	bl	8005c40 <HAL_RCCEx_PeriphCLKConfig>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800334c:	f7ff fe35 	bl	8002fba <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003350:	4b30      	ldr	r3, [pc, #192]	@ (8003414 <HAL_PCD_MspInit+0x134>)
 8003352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003354:	4a2f      	ldr	r2, [pc, #188]	@ (8003414 <HAL_PCD_MspInit+0x134>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800335c:	4b2d      	ldr	r3, [pc, #180]	@ (8003414 <HAL_PCD_MspInit+0x134>)
 800335e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800336c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003370:	2300      	movs	r3, #0
 8003372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800337c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003380:	4619      	mov	r1, r3
 8003382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003386:	f000 ffab 	bl	80042e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800338a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800338e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339e:	2303      	movs	r3, #3
 80033a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80033a4:	230a      	movs	r3, #10
 80033a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80033ae:	4619      	mov	r1, r3
 80033b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033b4:	f000 ff94 	bl	80042e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80033b8:	4b16      	ldr	r3, [pc, #88]	@ (8003414 <HAL_PCD_MspInit+0x134>)
 80033ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033bc:	4a15      	ldr	r2, [pc, #84]	@ (8003414 <HAL_PCD_MspInit+0x134>)
 80033be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033c4:	4b13      	ldr	r3, [pc, #76]	@ (8003414 <HAL_PCD_MspInit+0x134>)
 80033c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d0:	4b10      	ldr	r3, [pc, #64]	@ (8003414 <HAL_PCD_MspInit+0x134>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d114      	bne.n	8003406 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003414 <HAL_PCD_MspInit+0x134>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003414 <HAL_PCD_MspInit+0x134>)
 80033e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <HAL_PCD_MspInit+0x134>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80033f4:	f001 fd58 	bl	8004ea8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f8:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <HAL_PCD_MspInit+0x134>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fc:	4a05      	ldr	r2, [pc, #20]	@ (8003414 <HAL_PCD_MspInit+0x134>)
 80033fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003402:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003404:	e001      	b.n	800340a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8003406:	f001 fd4f 	bl	8004ea8 <HAL_PWREx_EnableVddUSB>
}
 800340a:	bf00      	nop
 800340c:	37b0      	adds	r7, #176	@ 0xb0
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000

08003418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800341c:	bf00      	nop
 800341e:	e7fd      	b.n	800341c <NMI_Handler+0x4>

08003420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <HardFault_Handler+0x4>

08003428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <MemManage_Handler+0x4>

08003430 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <BusFault_Handler+0x4>

08003438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800343c:	bf00      	nop
 800343e:	e7fd      	b.n	800343c <UsageFault_Handler+0x4>

08003440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003452:	f000 fc85 	bl	8003d60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003456:	f006 fd1f 	bl	8009e98 <xTaskGetSchedulerState>
 800345a:	4603      	mov	r3, r0
 800345c:	2b01      	cmp	r3, #1
 800345e:	d001      	beq.n	8003464 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003460:	f006 ff62 	bl	800a328 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}

08003468 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800346c:	2020      	movs	r0, #32
 800346e:	f001 fa1f 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8003472:	4806      	ldr	r0, [pc, #24]	@ (800348c <EXTI9_5_IRQHandler+0x24>)
 8003474:	f000 ff04 	bl	8004280 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003478:	2080      	movs	r0, #128	@ 0x80
 800347a:	f001 fa19 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800347e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003482:	f001 fa15 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000110 	.word	0x20000110

08003490 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8003494:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003498:	f001 fa0a 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800349c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80034a0:	f001 fa06 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80034a4:	4806      	ldr	r0, [pc, #24]	@ (80034c0 <EXTI15_10_IRQHandler+0x30>)
 80034a6:	f000 feeb 	bl	8004280 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80034aa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80034ae:	f001 f9ff 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80034b2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80034b6:	f001 f9fb 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000010 	.word	0x20000010

080034c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return 1;
 80034c8:	2301      	movs	r3, #1
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <_kill>:

int _kill(int pid, int sig)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034de:	f007 fc25 	bl	800ad2c <__errno>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2216      	movs	r2, #22
 80034e6:	601a      	str	r2, [r3, #0]
  return -1;
 80034e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_exit>:

void _exit (int status)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ffe7 	bl	80034d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003506:	bf00      	nop
 8003508:	e7fd      	b.n	8003506 <_exit+0x12>

0800350a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e00a      	b.n	8003532 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800351c:	f3af 8000 	nop.w
 8003520:	4601      	mov	r1, r0
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	60ba      	str	r2, [r7, #8]
 8003528:	b2ca      	uxtb	r2, r1
 800352a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3301      	adds	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	429a      	cmp	r2, r3
 8003538:	dbf0      	blt.n	800351c <_read+0x12>
  }

  return len;
 800353a:	687b      	ldr	r3, [r7, #4]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e009      	b.n	800356a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	60ba      	str	r2, [r7, #8]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fa3e 	bl	80039e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3301      	adds	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	dbf1      	blt.n	8003556 <_write+0x12>
  }
  return len;
 8003572:	687b      	ldr	r3, [r7, #4]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_close>:

int _close(int file)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035a4:	605a      	str	r2, [r3, #4]
  return 0;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <_isatty>:

int _isatty(int file)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035bc:	2301      	movs	r3, #1
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035ec:	4a14      	ldr	r2, [pc, #80]	@ (8003640 <_sbrk+0x5c>)
 80035ee:	4b15      	ldr	r3, [pc, #84]	@ (8003644 <_sbrk+0x60>)
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035f8:	4b13      	ldr	r3, [pc, #76]	@ (8003648 <_sbrk+0x64>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003600:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <_sbrk+0x64>)
 8003602:	4a12      	ldr	r2, [pc, #72]	@ (800364c <_sbrk+0x68>)
 8003604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003606:	4b10      	ldr	r3, [pc, #64]	@ (8003648 <_sbrk+0x64>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	429a      	cmp	r2, r3
 8003612:	d207      	bcs.n	8003624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003614:	f007 fb8a 	bl	800ad2c <__errno>
 8003618:	4603      	mov	r3, r0
 800361a:	220c      	movs	r2, #12
 800361c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800361e:	f04f 33ff 	mov.w	r3, #4294967295
 8003622:	e009      	b.n	8003638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003624:	4b08      	ldr	r3, [pc, #32]	@ (8003648 <_sbrk+0x64>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800362a:	4b07      	ldr	r3, [pc, #28]	@ (8003648 <_sbrk+0x64>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	4a05      	ldr	r2, [pc, #20]	@ (8003648 <_sbrk+0x64>)
 8003634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003636:	68fb      	ldr	r3, [r7, #12]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20018000 	.word	0x20018000
 8003644:	00000400 	.word	0x00000400
 8003648:	2000115c 	.word	0x2000115c
 800364c:	200023c0 	.word	0x200023c0

08003650 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003654:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <SystemInit+0x20>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365a:	4a05      	ldr	r2, [pc, #20]	@ (8003670 <SystemInit+0x20>)
 800365c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003660:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003674:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003678:	f7ff ffea 	bl	8003650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800367c:	480c      	ldr	r0, [pc, #48]	@ (80036b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800367e:	490d      	ldr	r1, [pc, #52]	@ (80036b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003680:	4a0d      	ldr	r2, [pc, #52]	@ (80036b8 <LoopForever+0xe>)
  movs r3, #0
 8003682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003684:	e002      	b.n	800368c <LoopCopyDataInit>

08003686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800368a:	3304      	adds	r3, #4

0800368c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800368c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800368e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003690:	d3f9      	bcc.n	8003686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003692:	4a0a      	ldr	r2, [pc, #40]	@ (80036bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003694:	4c0a      	ldr	r4, [pc, #40]	@ (80036c0 <LoopForever+0x16>)
  movs r3, #0
 8003696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003698:	e001      	b.n	800369e <LoopFillZerobss>

0800369a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800369a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800369c:	3204      	adds	r2, #4

0800369e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800369e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a0:	d3fb      	bcc.n	800369a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036a2:	f007 fb49 	bl	800ad38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036a6:	f7ff f935 	bl	8002914 <main>

080036aa <LoopForever>:

LoopForever:
    b LoopForever
 80036aa:	e7fe      	b.n	80036aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80036ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80036b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036b4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80036b8:	0800bd8c 	.word	0x0800bd8c
  ldr r2, =_sbss
 80036bc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80036c0:	200023c0 	.word	0x200023c0

080036c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036c4:	e7fe      	b.n	80036c4 <ADC1_2_IRQHandler>
	...

080036c8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	4a04      	ldr	r2, [pc, #16]	@ (80036e8 <BSP_LED_Init+0x20>)
 80036d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036da:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	0800bc88 	.word	0x0800bc88

080036ec <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	4a06      	ldr	r2, [pc, #24]	@ (8003714 <BSP_LED_Toggle+0x28>)
 80036fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f001 f8b9 	bl	800487c <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000008 	.word	0x20000008

08003718 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800371e:	4b1c      	ldr	r3, [pc, #112]	@ (8003790 <LED_USER_GPIO_Init+0x78>)
 8003720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003722:	4a1b      	ldr	r2, [pc, #108]	@ (8003790 <LED_USER_GPIO_Init+0x78>)
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800372a:	4b19      	ldr	r3, [pc, #100]	@ (8003790 <LED_USER_GPIO_Init+0x78>)
 800372c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003736:	f107 030c 	add.w	r3, r7, #12
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	609a      	str	r2, [r3, #8]
 8003742:	60da      	str	r2, [r3, #12]
 8003744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003746:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <LED_USER_GPIO_Init+0x78>)
 8003748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374a:	4a11      	ldr	r2, [pc, #68]	@ (8003790 <LED_USER_GPIO_Init+0x78>)
 800374c:	f043 0302 	orr.w	r3, r3, #2
 8003750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003752:	4b0f      	ldr	r3, [pc, #60]	@ (8003790 <LED_USER_GPIO_Init+0x78>)
 8003754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	607b      	str	r3, [r7, #4]
 800375c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800375e:	2200      	movs	r2, #0
 8003760:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003764:	480b      	ldr	r0, [pc, #44]	@ (8003794 <LED_USER_GPIO_Init+0x7c>)
 8003766:	f001 f871 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800376a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800376e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003770:	2301      	movs	r3, #1
 8003772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	4619      	mov	r1, r3
 8003782:	4804      	ldr	r0, [pc, #16]	@ (8003794 <LED_USER_GPIO_Init+0x7c>)
 8003784:	f000 fdac 	bl	80042e0 <HAL_GPIO_Init>

}
 8003788:	bf00      	nop
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	48000400 	.word	0x48000400

08003798 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	460a      	mov	r2, r1
 80037a2:	71fb      	strb	r3, [r7, #7]
 80037a4:	4613      	mov	r3, r2
 80037a6:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	4a1f      	ldr	r2, [pc, #124]	@ (800382c <BSP_PB_Init+0x94>)
 80037b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b4:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80037b6:	79bb      	ldrb	r3, [r7, #6]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d132      	bne.n	8003822 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003830 <BSP_PB_Init+0x98>)
 80037c2:	441a      	add	r2, r3
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	491b      	ldr	r1, [pc, #108]	@ (8003834 <BSP_PB_Init+0x9c>)
 80037c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037cc:	4619      	mov	r1, r3
 80037ce:	4610      	mov	r0, r2
 80037d0:	f000 fd42 	bl	8004258 <HAL_EXTI_GetHandle>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80037da:	f06f 0303 	mvn.w	r3, #3
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e01f      	b.n	8003822 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4a12      	ldr	r2, [pc, #72]	@ (8003830 <BSP_PB_Init+0x98>)
 80037e8:	1898      	adds	r0, r3, r2
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	4a12      	ldr	r2, [pc, #72]	@ (8003838 <BSP_PB_Init+0xa0>)
 80037ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f2:	461a      	mov	r2, r3
 80037f4:	2100      	movs	r1, #0
 80037f6:	f000 fd15 	bl	8004224 <HAL_EXTI_RegisterCallback>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003800:	f06f 0303 	mvn.w	r3, #3
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e00c      	b.n	8003822 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003808:	2028      	movs	r0, #40	@ 0x28
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	4a0b      	ldr	r2, [pc, #44]	@ (800383c <BSP_PB_Init+0xa4>)
 800380e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003812:	2200      	movs	r2, #0
 8003814:	4619      	mov	r1, r3
 8003816:	f000 fbc2 	bl	8003f9e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800381a:	2328      	movs	r3, #40	@ 0x28
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fbda 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003822:	68fb      	ldr	r3, [r7, #12]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	0800bc8c 	.word	0x0800bc8c
 8003830:	20000010 	.word	0x20000010
 8003834:	0800bc90 	.word	0x0800bc90
 8003838:	0800bc94 	.word	0x0800bc94
 800383c:	0800bc98 	.word	0x0800bc98

08003840 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	4a09      	ldr	r2, [pc, #36]	@ (8003874 <BSP_PB_GetState+0x34>)
 800384e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003852:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f000 ffdf 	bl	800481c <HAL_GPIO_ReadPin>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	2000000c 	.word	0x2000000c

08003878 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800387c:	2000      	movs	r0, #0
 800387e:	f7fe fbb9 	bl	8001ff4 <BSP_PB_Callback>
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800388e:	4b19      	ldr	r3, [pc, #100]	@ (80038f4 <BUTTON_USER_GPIO_Init+0x6c>)
 8003890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003892:	4a18      	ldr	r2, [pc, #96]	@ (80038f4 <BUTTON_USER_GPIO_Init+0x6c>)
 8003894:	f043 0304 	orr.w	r3, r3, #4
 8003898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800389a:	4b16      	ldr	r3, [pc, #88]	@ (80038f4 <BUTTON_USER_GPIO_Init+0x6c>)
 800389c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038b6:	4b0f      	ldr	r3, [pc, #60]	@ (80038f4 <BUTTON_USER_GPIO_Init+0x6c>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ba:	4a0e      	ldr	r2, [pc, #56]	@ (80038f4 <BUTTON_USER_GPIO_Init+0x6c>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038c2:	4b0c      	ldr	r3, [pc, #48]	@ (80038f4 <BUTTON_USER_GPIO_Init+0x6c>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 80038ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80038d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	4619      	mov	r1, r3
 80038e4:	4804      	ldr	r0, [pc, #16]	@ (80038f8 <BUTTON_USER_GPIO_Init+0x70>)
 80038e6:	f000 fcfb 	bl	80042e0 <HAL_GPIO_Init>

}
 80038ea:	bf00      	nop
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000
 80038f8:	48000800 	.word	0x48000800

080038fc <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d903      	bls.n	8003918 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003910:	f06f 0301 	mvn.w	r3, #1
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	e025      	b.n	8003964 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	79fa      	ldrb	r2, [r7, #7]
 800391c:	4914      	ldr	r1, [pc, #80]	@ (8003970 <BSP_COM_Init+0x74>)
 800391e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003922:	4814      	ldr	r0, [pc, #80]	@ (8003974 <BSP_COM_Init+0x78>)
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4403      	add	r3, r0
 800392e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8003930:	79fa      	ldrb	r2, [r7, #7]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	4413      	add	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4a0e      	ldr	r2, [pc, #56]	@ (8003974 <BSP_COM_Init+0x78>)
 800393c:	4413      	add	r3, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f86a 	bl	8003a18 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8003944:	79fa      	ldrb	r2, [r7, #7]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	4413      	add	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4a09      	ldr	r2, [pc, #36]	@ (8003974 <BSP_COM_Init+0x78>)
 8003950:	4413      	add	r3, r2
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f810 	bl	8003978 <MX_USART1_UART_Init>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800395e:	f06f 0303 	mvn.w	r3, #3
 8003962:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003964:	68fb      	ldr	r3, [r7, #12]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000018 	.word	0x20000018
 8003974:	20001160 	.word	0x20001160

08003978 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a15      	ldr	r2, [pc, #84]	@ (80039dc <MX_USART1_UART_Init+0x64>)
 8003988:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003990:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	220c      	movs	r2, #12
 80039a8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f003 fa46 	bl	8006e54 <HAL_UART_Init>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40013800 	.word	0x40013800

080039e0 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80039e8:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <__io_putchar+0x30>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	4613      	mov	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	4413      	add	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4a07      	ldr	r2, [pc, #28]	@ (8003a14 <__io_putchar+0x34>)
 80039f8:	1898      	adds	r0, r3, r2
 80039fa:	1d39      	adds	r1, r7, #4
 80039fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a00:	2201      	movs	r2, #1
 8003a02:	f003 fa75 	bl	8006ef0 <HAL_UART_Transmit>
  return ch;
 8003a06:	687b      	ldr	r3, [r7, #4]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	200011e8 	.word	0x200011e8
 8003a14:	20001160 	.word	0x20001160

08003a18 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b0ac      	sub	sp, #176	@ 0xb0
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a20:	f107 0314 	add.w	r3, r7, #20
 8003a24:	2288      	movs	r2, #136	@ 0x88
 8003a26:	2100      	movs	r1, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f007 f931 	bl	800ac90 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a32:	2300      	movs	r3, #0
 8003a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8003a36:	f107 0314 	add.w	r3, r7, #20
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f002 f900 	bl	8005c40 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a40:	4b22      	ldr	r3, [pc, #136]	@ (8003acc <USART1_MspInit+0xb4>)
 8003a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a44:	4a21      	ldr	r2, [pc, #132]	@ (8003acc <USART1_MspInit+0xb4>)
 8003a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003acc <USART1_MspInit+0xb4>)
 8003a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a58:	4b1c      	ldr	r3, [pc, #112]	@ (8003acc <USART1_MspInit+0xb4>)
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003acc <USART1_MspInit+0xb4>)
 8003a5e:	f043 0302 	orr.w	r3, r3, #2
 8003a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a64:	4b19      	ldr	r3, [pc, #100]	@ (8003acc <USART1_MspInit+0xb4>)
 8003a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8003a70:	2340      	movs	r3, #64	@ 0x40
 8003a72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	2302      	movs	r3, #2
 8003a78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8003a88:	2307      	movs	r3, #7
 8003a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8003a8e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a92:	4619      	mov	r1, r3
 8003a94:	480e      	ldr	r0, [pc, #56]	@ (8003ad0 <USART1_MspInit+0xb8>)
 8003a96:	f000 fc23 	bl	80042e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aac:	2303      	movs	r3, #3
 8003aae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8003ab2:	2307      	movs	r3, #7
 8003ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8003ab8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003abc:	4619      	mov	r1, r3
 8003abe:	4804      	ldr	r0, [pc, #16]	@ (8003ad0 <USART1_MspInit+0xb8>)
 8003ac0:	f000 fc0e 	bl	80042e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8003ac4:	bf00      	nop
 8003ac6:	37b0      	adds	r7, #176	@ 0xb0
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	48000400 	.word	0x48000400

08003ad4 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8003ade:	4b12      	ldr	r3, [pc, #72]	@ (8003b28 <BSP_SPI3_Init+0x54>)
 8003ae0:	4a12      	ldr	r2, [pc, #72]	@ (8003b2c <BSP_SPI3_Init+0x58>)
 8003ae2:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8003ae4:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <BSP_SPI3_Init+0x5c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	4911      	ldr	r1, [pc, #68]	@ (8003b30 <BSP_SPI3_Init+0x5c>)
 8003aec:	600a      	str	r2, [r1, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d114      	bne.n	8003b1c <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8003af2:	480d      	ldr	r0, [pc, #52]	@ (8003b28 <BSP_SPI3_Init+0x54>)
 8003af4:	f003 f83c 	bl	8006b70 <HAL_SPI_GetState>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10e      	bne.n	8003b1c <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8003afe:	480a      	ldr	r0, [pc, #40]	@ (8003b28 <BSP_SPI3_Init+0x54>)
 8003b00:	f000 f882 	bl	8003c08 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d108      	bne.n	8003b1c <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8003b0a:	4807      	ldr	r0, [pc, #28]	@ (8003b28 <BSP_SPI3_Init+0x54>)
 8003b0c:	f000 f83a 	bl	8003b84 <MX_SPI3_Init>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8003b16:	f06f 0307 	mvn.w	r3, #7
 8003b1a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003b1c:	687b      	ldr	r3, [r7, #4]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200011ec 	.word	0x200011ec
 8003b2c:	40003c00 	.word	0x40003c00
 8003b30:	20001250 	.word	0x20001250

08003b34 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003b4c:	9200      	str	r2, [sp, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	68f9      	ldr	r1, [r7, #12]
 8003b52:	4807      	ldr	r0, [pc, #28]	@ (8003b70 <BSP_SPI3_SendRecv+0x3c>)
 8003b54:	f002 fded 	bl	8006732 <HAL_SPI_TransmitReceive>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003b5e:	f06f 0305 	mvn.w	r3, #5
 8003b62:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003b64:	697b      	ldr	r3, [r7, #20]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200011ec 	.word	0x200011ec

08003b74 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003b78:	f000 f906 	bl	8003d88 <HAL_GetTick>
 8003b7c:	4603      	mov	r3, r0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a1c      	ldr	r2, [pc, #112]	@ (8003c04 <MX_SPI3_Init+0x80>)
 8003b94:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b9c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003baa:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bbe:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2207      	movs	r2, #7
 8003bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2208      	movs	r2, #8
 8003be8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f002 fcf4 	bl	80065d8 <HAL_SPI_Init>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40003c00 	.word	0x40003c00

08003c08 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08a      	sub	sp, #40	@ 0x28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003c10:	4b27      	ldr	r3, [pc, #156]	@ (8003cb0 <SPI3_MspInit+0xa8>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c14:	4a26      	ldr	r2, [pc, #152]	@ (8003cb0 <SPI3_MspInit+0xa8>)
 8003c16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c1c:	4b24      	ldr	r3, [pc, #144]	@ (8003cb0 <SPI3_MspInit+0xa8>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c28:	4b21      	ldr	r3, [pc, #132]	@ (8003cb0 <SPI3_MspInit+0xa8>)
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2c:	4a20      	ldr	r2, [pc, #128]	@ (8003cb0 <SPI3_MspInit+0xa8>)
 8003c2e:	f043 0304 	orr.w	r3, r3, #4
 8003c32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c34:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb0 <SPI3_MspInit+0xa8>)
 8003c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8003c40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c46:	2302      	movs	r3, #2
 8003c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8003c52:	2306      	movs	r3, #6
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4815      	ldr	r0, [pc, #84]	@ (8003cb4 <SPI3_MspInit+0xac>)
 8003c5e:	f000 fb3f 	bl	80042e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8003c62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c70:	2303      	movs	r3, #3
 8003c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8003c74:	2306      	movs	r3, #6
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	480d      	ldr	r0, [pc, #52]	@ (8003cb4 <SPI3_MspInit+0xac>)
 8003c80:	f000 fb2e 	bl	80042e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8003c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c92:	2303      	movs	r3, #3
 8003c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8003c96:	2306      	movs	r3, #6
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003c9a:	f107 0314 	add.w	r3, r7, #20
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4804      	ldr	r0, [pc, #16]	@ (8003cb4 <SPI3_MspInit+0xac>)
 8003ca2:	f000 fb1d 	bl	80042e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	3728      	adds	r7, #40	@ 0x28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	48000800 	.word	0x48000800

08003cb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cc2:	2003      	movs	r0, #3
 8003cc4:	f000 f960 	bl	8003f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cc8:	200f      	movs	r0, #15
 8003cca:	f000 f80d 	bl	8003ce8 <HAL_InitTick>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	71fb      	strb	r3, [r7, #7]
 8003cd8:	e001      	b.n	8003cde <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003cda:	f7ff f975 	bl	8002fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cde:	79fb      	ldrb	r3, [r7, #7]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003cf4:	4b17      	ldr	r3, [pc, #92]	@ (8003d54 <HAL_InitTick+0x6c>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d023      	beq.n	8003d44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003cfc:	4b16      	ldr	r3, [pc, #88]	@ (8003d58 <HAL_InitTick+0x70>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b14      	ldr	r3, [pc, #80]	@ (8003d54 <HAL_InitTick+0x6c>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	4619      	mov	r1, r3
 8003d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f96d 	bl	8003ff2 <HAL_SYSTICK_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10f      	bne.n	8003d3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b0f      	cmp	r3, #15
 8003d22:	d809      	bhi.n	8003d38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d24:	2200      	movs	r2, #0
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2c:	f000 f937 	bl	8003f9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d30:	4a0a      	ldr	r2, [pc, #40]	@ (8003d5c <HAL_InitTick+0x74>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e007      	b.n	8003d48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
 8003d3c:	e004      	b.n	8003d48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	73fb      	strb	r3, [r7, #15]
 8003d42:	e001      	b.n	8003d48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000020 	.word	0x20000020
 8003d58:	20000004 	.word	0x20000004
 8003d5c:	2000001c 	.word	0x2000001c

08003d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d64:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_IncTick+0x20>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <HAL_IncTick+0x24>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4413      	add	r3, r2
 8003d70:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <HAL_IncTick+0x24>)
 8003d72:	6013      	str	r3, [r2, #0]
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000020 	.word	0x20000020
 8003d84:	20001254 	.word	0x20001254

08003d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d8c:	4b03      	ldr	r3, [pc, #12]	@ (8003d9c <HAL_GetTick+0x14>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20001254 	.word	0x20001254

08003da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003da8:	f7ff ffee 	bl	8003d88 <HAL_GetTick>
 8003dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d005      	beq.n	8003dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003dba:	4b0a      	ldr	r3, [pc, #40]	@ (8003de4 <HAL_Delay+0x44>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dc6:	bf00      	nop
 8003dc8:	f7ff ffde 	bl	8003d88 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d8f7      	bhi.n	8003dc8 <HAL_Delay+0x28>
  {
  }
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000020 	.word	0x20000020

08003de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e04:	4013      	ands	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e1a:	4a04      	ldr	r2, [pc, #16]	@ (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	60d3      	str	r3, [r2, #12]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e34:	4b04      	ldr	r3, [pc, #16]	@ (8003e48 <__NVIC_GetPriorityGrouping+0x18>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	f003 0307 	and.w	r3, r3, #7
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	db0b      	blt.n	8003e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	f003 021f 	and.w	r2, r3, #31
 8003e64:	4907      	ldr	r1, [pc, #28]	@ (8003e84 <__NVIC_EnableIRQ+0x38>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	e000e100 	.word	0xe000e100

08003e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	6039      	str	r1, [r7, #0]
 8003e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	db0a      	blt.n	8003eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	490c      	ldr	r1, [pc, #48]	@ (8003ed4 <__NVIC_SetPriority+0x4c>)
 8003ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea6:	0112      	lsls	r2, r2, #4
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	440b      	add	r3, r1
 8003eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eb0:	e00a      	b.n	8003ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4908      	ldr	r1, [pc, #32]	@ (8003ed8 <__NVIC_SetPriority+0x50>)
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	3b04      	subs	r3, #4
 8003ec0:	0112      	lsls	r2, r2, #4
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	761a      	strb	r2, [r3, #24]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000e100 	.word	0xe000e100
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b089      	sub	sp, #36	@ 0x24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f1c3 0307 	rsb	r3, r3, #7
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	bf28      	it	cs
 8003efa:	2304      	movcs	r3, #4
 8003efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3304      	adds	r3, #4
 8003f02:	2b06      	cmp	r3, #6
 8003f04:	d902      	bls.n	8003f0c <NVIC_EncodePriority+0x30>
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	3b03      	subs	r3, #3
 8003f0a:	e000      	b.n	8003f0e <NVIC_EncodePriority+0x32>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f10:	f04f 32ff 	mov.w	r2, #4294967295
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	401a      	ands	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f24:	f04f 31ff 	mov.w	r1, #4294967295
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2e:	43d9      	mvns	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f34:	4313      	orrs	r3, r2
         );
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	@ 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f54:	d301      	bcc.n	8003f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f56:	2301      	movs	r3, #1
 8003f58:	e00f      	b.n	8003f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f84 <SysTick_Config+0x40>)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f62:	210f      	movs	r1, #15
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	f7ff ff8e 	bl	8003e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <SysTick_Config+0x40>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f72:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <SysTick_Config+0x40>)
 8003f74:	2207      	movs	r2, #7
 8003f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	e000e010 	.word	0xe000e010

08003f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ff29 	bl	8003de8 <__NVIC_SetPriorityGrouping>
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b086      	sub	sp, #24
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fb0:	f7ff ff3e 	bl	8003e30 <__NVIC_GetPriorityGrouping>
 8003fb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	6978      	ldr	r0, [r7, #20]
 8003fbc:	f7ff ff8e 	bl	8003edc <NVIC_EncodePriority>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff5d 	bl	8003e88 <__NVIC_SetPriority>
}
 8003fce:	bf00      	nop
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	4603      	mov	r3, r0
 8003fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff31 	bl	8003e4c <__NVIC_EnableIRQ>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff ffa2 	bl	8003f44 <SysTick_Config>
 8004000:	4603      	mov	r3, r0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e0ac      	b.n	8004178 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f8b2 	bl	800418c <DFSDM_GetChannelFromInstance>
 8004028:	4603      	mov	r3, r0
 800402a:	4a55      	ldr	r2, [pc, #340]	@ (8004180 <HAL_DFSDM_ChannelInit+0x174>)
 800402c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e09f      	b.n	8004178 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fe ffed 	bl	8003018 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800403e:	4b51      	ldr	r3, [pc, #324]	@ (8004184 <HAL_DFSDM_ChannelInit+0x178>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3301      	adds	r3, #1
 8004044:	4a4f      	ldr	r2, [pc, #316]	@ (8004184 <HAL_DFSDM_ChannelInit+0x178>)
 8004046:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004048:	4b4e      	ldr	r3, [pc, #312]	@ (8004184 <HAL_DFSDM_ChannelInit+0x178>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d125      	bne.n	800409c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004050:	4b4d      	ldr	r3, [pc, #308]	@ (8004188 <HAL_DFSDM_ChannelInit+0x17c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a4c      	ldr	r2, [pc, #304]	@ (8004188 <HAL_DFSDM_ChannelInit+0x17c>)
 8004056:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800405a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800405c:	4b4a      	ldr	r3, [pc, #296]	@ (8004188 <HAL_DFSDM_ChannelInit+0x17c>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4948      	ldr	r1, [pc, #288]	@ (8004188 <HAL_DFSDM_ChannelInit+0x17c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800406a:	4b47      	ldr	r3, [pc, #284]	@ (8004188 <HAL_DFSDM_ChannelInit+0x17c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a46      	ldr	r2, [pc, #280]	@ (8004188 <HAL_DFSDM_ChannelInit+0x17c>)
 8004070:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8004074:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	791b      	ldrb	r3, [r3, #4]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d108      	bne.n	8004090 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800407e:	4b42      	ldr	r3, [pc, #264]	@ (8004188 <HAL_DFSDM_ChannelInit+0x17c>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	3b01      	subs	r3, #1
 8004088:	041b      	lsls	r3, r3, #16
 800408a:	493f      	ldr	r1, [pc, #252]	@ (8004188 <HAL_DFSDM_ChannelInit+0x17c>)
 800408c:	4313      	orrs	r3, r2
 800408e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004090:	4b3d      	ldr	r3, [pc, #244]	@ (8004188 <HAL_DFSDM_ChannelInit+0x17c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a3c      	ldr	r2, [pc, #240]	@ (8004188 <HAL_DFSDM_ChannelInit+0x17c>)
 8004096:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800409a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80040aa:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6819      	ldr	r1, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80040ba:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80040c0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 020f 	bic.w	r2, r2, #15
 80040d8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6819      	ldr	r1, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8004100:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6899      	ldr	r1, [r3, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	3b01      	subs	r3, #1
 8004112:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f002 0207 	and.w	r2, r2, #7
 800412c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004158:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f810 	bl	800418c <DFSDM_GetChannelFromInstance>
 800416c:	4602      	mov	r2, r0
 800416e:	4904      	ldr	r1, [pc, #16]	@ (8004180 <HAL_DFSDM_ChannelInit+0x174>)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	2000125c 	.word	0x2000125c
 8004184:	20001258 	.word	0x20001258
 8004188:	40016000 	.word	0x40016000

0800418c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a1c      	ldr	r2, [pc, #112]	@ (8004208 <DFSDM_GetChannelFromInstance+0x7c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d102      	bne.n	80041a2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e02b      	b.n	80041fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a19      	ldr	r2, [pc, #100]	@ (800420c <DFSDM_GetChannelFromInstance+0x80>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d102      	bne.n	80041b0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80041aa:	2301      	movs	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e024      	b.n	80041fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a17      	ldr	r2, [pc, #92]	@ (8004210 <DFSDM_GetChannelFromInstance+0x84>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d102      	bne.n	80041be <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80041b8:	2302      	movs	r3, #2
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e01d      	b.n	80041fa <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a14      	ldr	r2, [pc, #80]	@ (8004214 <DFSDM_GetChannelFromInstance+0x88>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d102      	bne.n	80041cc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80041c6:	2304      	movs	r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e016      	b.n	80041fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a12      	ldr	r2, [pc, #72]	@ (8004218 <DFSDM_GetChannelFromInstance+0x8c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d102      	bne.n	80041da <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80041d4:	2305      	movs	r3, #5
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	e00f      	b.n	80041fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a0f      	ldr	r2, [pc, #60]	@ (800421c <DFSDM_GetChannelFromInstance+0x90>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d102      	bne.n	80041e8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80041e2:	2306      	movs	r3, #6
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	e008      	b.n	80041fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004220 <DFSDM_GetChannelFromInstance+0x94>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d102      	bne.n	80041f6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80041f0:	2307      	movs	r3, #7
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e001      	b.n	80041fa <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80041f6:	2303      	movs	r3, #3
 80041f8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80041fa:	68fb      	ldr	r3, [r7, #12]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40016000 	.word	0x40016000
 800420c:	40016020 	.word	0x40016020
 8004210:	40016040 	.word	0x40016040
 8004214:	40016080 	.word	0x40016080
 8004218:	400160a0 	.word	0x400160a0
 800421c:	400160c0 	.word	0x400160c0
 8004220:	400160e0 	.word	0x400160e0

08004224 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	460b      	mov	r3, r1
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004236:	7afb      	ldrb	r3, [r7, #11]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d103      	bne.n	8004244 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	605a      	str	r2, [r3, #4]
      break;
 8004242:	e002      	b.n	800424a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
      break;
 8004248:	bf00      	nop
  }

  return status;
 800424a:	7dfb      	ldrb	r3, [r7, #23]
}
 800424c:	4618      	mov	r0, r3
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e003      	b.n	8004274 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004272:	2300      	movs	r3, #0
  }
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	2201      	movs	r2, #1
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <HAL_EXTI_IRQHandler+0x5c>)
 80042aa:	4413      	add	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4013      	ands	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4798      	blx	r3
    }
  }
}
 80042d2:	bf00      	nop
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40010414 	.word	0x40010414

080042e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ee:	e17f      	b.n	80045f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	2101      	movs	r1, #1
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	4013      	ands	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 8171 	beq.w	80045ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	2b01      	cmp	r3, #1
 8004312:	d005      	beq.n	8004320 <HAL_GPIO_Init+0x40>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d130      	bne.n	8004382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	2203      	movs	r2, #3
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4013      	ands	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004356:	2201      	movs	r2, #1
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4013      	ands	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	f003 0201 	and.w	r2, r3, #1
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	2b03      	cmp	r3, #3
 800438c:	d118      	bne.n	80043c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004394:	2201      	movs	r2, #1
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4013      	ands	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	08db      	lsrs	r3, r3, #3
 80043aa:	f003 0201 	and.w	r2, r3, #1
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d017      	beq.n	80043fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4013      	ands	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d123      	bne.n	8004450 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	08da      	lsrs	r2, r3, #3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3208      	adds	r2, #8
 8004410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	220f      	movs	r2, #15
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4013      	ands	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	08da      	lsrs	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3208      	adds	r2, #8
 800444a:	6939      	ldr	r1, [r7, #16]
 800444c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	2203      	movs	r2, #3
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	43db      	mvns	r3, r3
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4013      	ands	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0203 	and.w	r2, r3, #3
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80ac 	beq.w	80045ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004492:	4b5f      	ldr	r3, [pc, #380]	@ (8004610 <HAL_GPIO_Init+0x330>)
 8004494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004496:	4a5e      	ldr	r2, [pc, #376]	@ (8004610 <HAL_GPIO_Init+0x330>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	6613      	str	r3, [r2, #96]	@ 0x60
 800449e:	4b5c      	ldr	r3, [pc, #368]	@ (8004610 <HAL_GPIO_Init+0x330>)
 80044a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044aa:	4a5a      	ldr	r2, [pc, #360]	@ (8004614 <HAL_GPIO_Init+0x334>)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	089b      	lsrs	r3, r3, #2
 80044b0:	3302      	adds	r3, #2
 80044b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	220f      	movs	r2, #15
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43db      	mvns	r3, r3
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4013      	ands	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044d4:	d025      	beq.n	8004522 <HAL_GPIO_Init+0x242>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a4f      	ldr	r2, [pc, #316]	@ (8004618 <HAL_GPIO_Init+0x338>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01f      	beq.n	800451e <HAL_GPIO_Init+0x23e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a4e      	ldr	r2, [pc, #312]	@ (800461c <HAL_GPIO_Init+0x33c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d019      	beq.n	800451a <HAL_GPIO_Init+0x23a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a4d      	ldr	r2, [pc, #308]	@ (8004620 <HAL_GPIO_Init+0x340>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_GPIO_Init+0x236>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a4c      	ldr	r2, [pc, #304]	@ (8004624 <HAL_GPIO_Init+0x344>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00d      	beq.n	8004512 <HAL_GPIO_Init+0x232>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004628 <HAL_GPIO_Init+0x348>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d007      	beq.n	800450e <HAL_GPIO_Init+0x22e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4a      	ldr	r2, [pc, #296]	@ (800462c <HAL_GPIO_Init+0x34c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <HAL_GPIO_Init+0x22a>
 8004506:	2306      	movs	r3, #6
 8004508:	e00c      	b.n	8004524 <HAL_GPIO_Init+0x244>
 800450a:	2307      	movs	r3, #7
 800450c:	e00a      	b.n	8004524 <HAL_GPIO_Init+0x244>
 800450e:	2305      	movs	r3, #5
 8004510:	e008      	b.n	8004524 <HAL_GPIO_Init+0x244>
 8004512:	2304      	movs	r3, #4
 8004514:	e006      	b.n	8004524 <HAL_GPIO_Init+0x244>
 8004516:	2303      	movs	r3, #3
 8004518:	e004      	b.n	8004524 <HAL_GPIO_Init+0x244>
 800451a:	2302      	movs	r3, #2
 800451c:	e002      	b.n	8004524 <HAL_GPIO_Init+0x244>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <HAL_GPIO_Init+0x244>
 8004522:	2300      	movs	r3, #0
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	f002 0203 	and.w	r2, r2, #3
 800452a:	0092      	lsls	r2, r2, #2
 800452c:	4093      	lsls	r3, r2
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004534:	4937      	ldr	r1, [pc, #220]	@ (8004614 <HAL_GPIO_Init+0x334>)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	3302      	adds	r3, #2
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004542:	4b3b      	ldr	r3, [pc, #236]	@ (8004630 <HAL_GPIO_Init+0x350>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	43db      	mvns	r3, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4013      	ands	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004566:	4a32      	ldr	r2, [pc, #200]	@ (8004630 <HAL_GPIO_Init+0x350>)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800456c:	4b30      	ldr	r3, [pc, #192]	@ (8004630 <HAL_GPIO_Init+0x350>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004590:	4a27      	ldr	r2, [pc, #156]	@ (8004630 <HAL_GPIO_Init+0x350>)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004596:	4b26      	ldr	r3, [pc, #152]	@ (8004630 <HAL_GPIO_Init+0x350>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004630 <HAL_GPIO_Init+0x350>)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004630 <HAL_GPIO_Init+0x350>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4013      	ands	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045e4:	4a12      	ldr	r2, [pc, #72]	@ (8004630 <HAL_GPIO_Init+0x350>)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	3301      	adds	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	fa22 f303 	lsr.w	r3, r2, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f47f ae78 	bne.w	80042f0 <HAL_GPIO_Init+0x10>
  }
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000
 8004614:	40010000 	.word	0x40010000
 8004618:	48000400 	.word	0x48000400
 800461c:	48000800 	.word	0x48000800
 8004620:	48000c00 	.word	0x48000c00
 8004624:	48001000 	.word	0x48001000
 8004628:	48001400 	.word	0x48001400
 800462c:	48001800 	.word	0x48001800
 8004630:	40010400 	.word	0x40010400

08004634 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004642:	e0cd      	b.n	80047e0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004644:	2201      	movs	r2, #1
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	4013      	ands	r3, r2
 8004650:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80c0 	beq.w	80047da <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800465a:	4a68      	ldr	r2, [pc, #416]	@ (80047fc <HAL_GPIO_DeInit+0x1c8>)
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	3302      	adds	r3, #2
 8004662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004666:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	220f      	movs	r2, #15
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4013      	ands	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004682:	d025      	beq.n	80046d0 <HAL_GPIO_DeInit+0x9c>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a5e      	ldr	r2, [pc, #376]	@ (8004800 <HAL_GPIO_DeInit+0x1cc>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d01f      	beq.n	80046cc <HAL_GPIO_DeInit+0x98>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a5d      	ldr	r2, [pc, #372]	@ (8004804 <HAL_GPIO_DeInit+0x1d0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d019      	beq.n	80046c8 <HAL_GPIO_DeInit+0x94>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a5c      	ldr	r2, [pc, #368]	@ (8004808 <HAL_GPIO_DeInit+0x1d4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d013      	beq.n	80046c4 <HAL_GPIO_DeInit+0x90>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a5b      	ldr	r2, [pc, #364]	@ (800480c <HAL_GPIO_DeInit+0x1d8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00d      	beq.n	80046c0 <HAL_GPIO_DeInit+0x8c>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a5a      	ldr	r2, [pc, #360]	@ (8004810 <HAL_GPIO_DeInit+0x1dc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d007      	beq.n	80046bc <HAL_GPIO_DeInit+0x88>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a59      	ldr	r2, [pc, #356]	@ (8004814 <HAL_GPIO_DeInit+0x1e0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d101      	bne.n	80046b8 <HAL_GPIO_DeInit+0x84>
 80046b4:	2306      	movs	r3, #6
 80046b6:	e00c      	b.n	80046d2 <HAL_GPIO_DeInit+0x9e>
 80046b8:	2307      	movs	r3, #7
 80046ba:	e00a      	b.n	80046d2 <HAL_GPIO_DeInit+0x9e>
 80046bc:	2305      	movs	r3, #5
 80046be:	e008      	b.n	80046d2 <HAL_GPIO_DeInit+0x9e>
 80046c0:	2304      	movs	r3, #4
 80046c2:	e006      	b.n	80046d2 <HAL_GPIO_DeInit+0x9e>
 80046c4:	2303      	movs	r3, #3
 80046c6:	e004      	b.n	80046d2 <HAL_GPIO_DeInit+0x9e>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e002      	b.n	80046d2 <HAL_GPIO_DeInit+0x9e>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_GPIO_DeInit+0x9e>
 80046d0:	2300      	movs	r3, #0
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	f002 0203 	and.w	r2, r2, #3
 80046d8:	0092      	lsls	r2, r2, #2
 80046da:	4093      	lsls	r3, r2
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d132      	bne.n	8004748 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80046e2:	4b4d      	ldr	r3, [pc, #308]	@ (8004818 <HAL_GPIO_DeInit+0x1e4>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	43db      	mvns	r3, r3
 80046ea:	494b      	ldr	r1, [pc, #300]	@ (8004818 <HAL_GPIO_DeInit+0x1e4>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80046f0:	4b49      	ldr	r3, [pc, #292]	@ (8004818 <HAL_GPIO_DeInit+0x1e4>)
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	4947      	ldr	r1, [pc, #284]	@ (8004818 <HAL_GPIO_DeInit+0x1e4>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80046fe:	4b46      	ldr	r3, [pc, #280]	@ (8004818 <HAL_GPIO_DeInit+0x1e4>)
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	43db      	mvns	r3, r3
 8004706:	4944      	ldr	r1, [pc, #272]	@ (8004818 <HAL_GPIO_DeInit+0x1e4>)
 8004708:	4013      	ands	r3, r2
 800470a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800470c:	4b42      	ldr	r3, [pc, #264]	@ (8004818 <HAL_GPIO_DeInit+0x1e4>)
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	43db      	mvns	r3, r3
 8004714:	4940      	ldr	r1, [pc, #256]	@ (8004818 <HAL_GPIO_DeInit+0x1e4>)
 8004716:	4013      	ands	r3, r2
 8004718:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	220f      	movs	r2, #15
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800472a:	4a34      	ldr	r2, [pc, #208]	@ (80047fc <HAL_GPIO_DeInit+0x1c8>)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	089b      	lsrs	r3, r3, #2
 8004730:	3302      	adds	r3, #2
 8004732:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	43da      	mvns	r2, r3
 800473a:	4830      	ldr	r0, [pc, #192]	@ (80047fc <HAL_GPIO_DeInit+0x1c8>)
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	400a      	ands	r2, r1
 8004742:	3302      	adds	r3, #2
 8004744:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	2103      	movs	r1, #3
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	08da      	lsrs	r2, r3, #3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3208      	adds	r2, #8
 8004764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	220f      	movs	r2, #15
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43db      	mvns	r3, r3
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	08d2      	lsrs	r2, r2, #3
 800477c:	4019      	ands	r1, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3208      	adds	r2, #8
 8004782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	2103      	movs	r1, #3
 8004790:	fa01 f303 	lsl.w	r3, r1, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	401a      	ands	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	2101      	movs	r1, #1
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	fa01 f303 	lsl.w	r3, r1, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	401a      	ands	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	2103      	movs	r1, #3
 80047ba:	fa01 f303 	lsl.w	r3, r1, r3
 80047be:	43db      	mvns	r3, r3
 80047c0:	401a      	ands	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ca:	2101      	movs	r1, #1
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	fa01 f303 	lsl.w	r3, r1, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	401a      	ands	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	3301      	adds	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f47f af2b 	bne.w	8004644 <HAL_GPIO_DeInit+0x10>
  }
}
 80047ee:	bf00      	nop
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40010000 	.word	0x40010000
 8004800:	48000400 	.word	0x48000400
 8004804:	48000800 	.word	0x48000800
 8004808:	48000c00 	.word	0x48000c00
 800480c:	48001000 	.word	0x48001000
 8004810:	48001400 	.word	0x48001400
 8004814:	48001800 	.word	0x48001800
 8004818:	40010400 	.word	0x40010400

0800481c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	887b      	ldrh	r3, [r7, #2]
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
 8004838:	e001      	b.n	800483e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800483e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]
 8004858:	4613      	mov	r3, r2
 800485a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800485c:	787b      	ldrb	r3, [r7, #1]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004862:	887a      	ldrh	r2, [r7, #2]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004868:	e002      	b.n	8004870 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800486a:	887a      	ldrh	r2, [r7, #2]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4013      	ands	r3, r2
 8004894:	041a      	lsls	r2, r3, #16
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	43d9      	mvns	r1, r3
 800489a:	887b      	ldrh	r3, [r7, #2]
 800489c:	400b      	ands	r3, r1
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	619a      	str	r2, [r3, #24]
}
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048ba:	4b08      	ldr	r3, [pc, #32]	@ (80048dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d006      	beq.n	80048d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048c6:	4a05      	ldr	r2, [pc, #20]	@ (80048dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048c8:	88fb      	ldrh	r3, [r7, #6]
 80048ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f806 	bl	80048e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40010400 	.word	0x40010400

080048e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e08d      	b.n	8004a24 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7fe fbdf 	bl	80030e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2224      	movs	r2, #36	@ 0x24
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0201 	bic.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004946:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004956:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d107      	bne.n	8004970 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800496c:	609a      	str	r2, [r3, #8]
 800496e:	e006      	b.n	800497e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800497c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d108      	bne.n	8004998 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	e007      	b.n	80049a8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69d9      	ldr	r1, [r3, #28]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1a      	ldr	r2, [r3, #32]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d138      	bne.n	8004ab4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e032      	b.n	8004ab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2224      	movs	r2, #36	@ 0x24
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6819      	ldr	r1, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e000      	b.n	8004ab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ab4:	2302      	movs	r3, #2
  }
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d139      	bne.n	8004b4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e033      	b.n	8004b4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2224      	movs	r2, #36	@ 0x24
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e000      	b.n	8004b4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
  }
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b086      	sub	sp, #24
 8004b5e:	af02      	add	r7, sp, #8
 8004b60:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e101      	b.n	8004d70 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7fe fbad 	bl	80032e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f002 ff33 	bl	8007a04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	7c1a      	ldrb	r2, [r3, #16]
 8004ba6:	f88d 2000 	strb.w	r2, [sp]
 8004baa:	3304      	adds	r3, #4
 8004bac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bae:	f002 fefc 	bl	80079aa <USB_CoreInit>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0d5      	b.n	8004d70 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f002 ff2b 	bl	8007a26 <USB_SetCurrentMode>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e0c6      	b.n	8004d70 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004be2:	2300      	movs	r3, #0
 8004be4:	73fb      	strb	r3, [r7, #15]
 8004be6:	e04a      	b.n	8004c7e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004be8:	7bfa      	ldrb	r2, [r7, #15]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3315      	adds	r3, #21
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bfc:	7bfa      	ldrb	r2, [r7, #15]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	3314      	adds	r3, #20
 8004c0c:	7bfa      	ldrb	r2, [r7, #15]
 8004c0e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c10:	7bfa      	ldrb	r2, [r7, #15]
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	b298      	uxth	r0, r3
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	332e      	adds	r3, #46	@ 0x2e
 8004c24:	4602      	mov	r2, r0
 8004c26:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	3318      	adds	r3, #24
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c3c:	7bfa      	ldrb	r2, [r7, #15]
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	331c      	adds	r3, #28
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c50:	7bfa      	ldrb	r2, [r7, #15]
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	3320      	adds	r3, #32
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c64:	7bfa      	ldrb	r2, [r7, #15]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	3324      	adds	r3, #36	@ 0x24
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	73fb      	strb	r3, [r7, #15]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	791b      	ldrb	r3, [r3, #4]
 8004c82:	7bfa      	ldrb	r2, [r7, #15]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3af      	bcc.n	8004be8 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	73fb      	strb	r3, [r7, #15]
 8004c8c:	e044      	b.n	8004d18 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c8e:	7bfa      	ldrb	r2, [r7, #15]
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ca4:	7bfa      	ldrb	r2, [r7, #15]
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	440b      	add	r3, r1
 8004cb2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cba:	7bfa      	ldrb	r2, [r7, #15]
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cd0:	7bfa      	ldrb	r2, [r7, #15]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ce6:	7bfa      	ldrb	r2, [r7, #15]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cfc:	7bfa      	ldrb	r2, [r7, #15]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	3301      	adds	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	791b      	ldrb	r3, [r3, #4]
 8004d1c:	7bfa      	ldrb	r2, [r7, #15]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d3b5      	bcc.n	8004c8e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	7c1a      	ldrb	r2, [r3, #16]
 8004d2a:	f88d 2000 	strb.w	r2, [sp]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d32:	f002 fec5 	bl	8007ac0 <USB_DevInit>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e013      	b.n	8004d70 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	7b1b      	ldrb	r3, [r3, #12]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d102      	bne.n	8004d64 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f80a 	bl	8004d78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f003 f86a 	bl	8007e42 <USB_DevDisconnect>

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004daa:	f043 0303 	orr.w	r3, r3, #3
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dc4:	4b05      	ldr	r3, [pc, #20]	@ (8004ddc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a04      	ldr	r2, [pc, #16]	@ (8004ddc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dce:	6013      	str	r3, [r2, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40007000 	.word	0x40007000

08004de0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004de4:	4b04      	ldr	r3, [pc, #16]	@ (8004df8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40007000 	.word	0x40007000

08004dfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e0a:	d130      	bne.n	8004e6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e0c:	4b23      	ldr	r3, [pc, #140]	@ (8004e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e18:	d038      	beq.n	8004e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e1a:	4b20      	ldr	r3, [pc, #128]	@ (8004e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e22:	4a1e      	ldr	r2, [pc, #120]	@ (8004e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2232      	movs	r2, #50	@ 0x32
 8004e30:	fb02 f303 	mul.w	r3, r2, r3
 8004e34:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	0c9b      	lsrs	r3, r3, #18
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e40:	e002      	b.n	8004e48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e48:	4b14      	ldr	r3, [pc, #80]	@ (8004e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e54:	d102      	bne.n	8004e5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f2      	bne.n	8004e42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e68:	d110      	bne.n	8004e8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e00f      	b.n	8004e8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7a:	d007      	beq.n	8004e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e7c:	4b07      	ldr	r3, [pc, #28]	@ (8004e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e84:	4a05      	ldr	r2, [pc, #20]	@ (8004e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40007000 	.word	0x40007000
 8004ea0:	20000004 	.word	0x20000004
 8004ea4:	431bde83 	.word	0x431bde83

08004ea8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	4a04      	ldr	r2, [pc, #16]	@ (8004ec4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004eb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eb6:	6053      	str	r3, [r2, #4]
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40007000 	.word	0x40007000

08004ec8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004ed0:	f7fe ff5a 	bl	8003d88 <HAL_GetTick>
 8004ed4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e063      	b.n	8004fa8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fe f951 	bl	800319c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004efa:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f858 	bl	8004fb4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	021a      	lsls	r2, r3, #8
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	2120      	movs	r1, #32
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f850 	bl	8004fd0 <QSPI_WaitFlagStateUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004f34:	7afb      	ldrb	r3, [r7, #11]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d131      	bne.n	8004f9e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f44:	f023 0310 	bic.w	r3, r3, #16
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6852      	ldr	r2, [r2, #4]
 8004f4c:	0611      	lsls	r1, r2, #24
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68d2      	ldr	r2, [r2, #12]
 8004f52:	4311      	orrs	r1, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	4b13      	ldr	r3, [pc, #76]	@ (8004fb0 <HAL_QSPI_Init+0xe8>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6912      	ldr	r2, [r2, #16]
 8004f6a:	0411      	lsls	r1, r2, #16
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6952      	ldr	r2, [r2, #20]
 8004f70:	4311      	orrs	r1, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6992      	ldr	r2, [r2, #24]
 8004f76:	4311      	orrs	r1, r2
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8004fa6:	7afb      	ldrb	r3, [r7, #11]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	ffe0f8fe 	.word	0xffe0f8fe

08004fb4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004fe0:	e01a      	b.n	8005018 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d016      	beq.n	8005018 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fea:	f7fe fecd 	bl	8003d88 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10b      	bne.n	8005018 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2204      	movs	r2, #4
 8005004:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500c:	f043 0201 	orr.w	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e00e      	b.n	8005036 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	4013      	ands	r3, r2
 8005022:	2b00      	cmp	r3, #0
 8005024:	bf14      	ite	ne
 8005026:	2301      	movne	r3, #1
 8005028:	2300      	moveq	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	429a      	cmp	r2, r3
 8005032:	d1d6      	bne.n	8004fe2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e3ca      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005052:	4b97      	ldr	r3, [pc, #604]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 030c 	and.w	r3, r3, #12
 800505a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800505c:	4b94      	ldr	r3, [pc, #592]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 80e4 	beq.w	800523c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <HAL_RCC_OscConfig+0x4a>
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b0c      	cmp	r3, #12
 800507e:	f040 808b 	bne.w	8005198 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b01      	cmp	r3, #1
 8005086:	f040 8087 	bne.w	8005198 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800508a:	4b89      	ldr	r3, [pc, #548]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <HAL_RCC_OscConfig+0x62>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e3a2      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	4b82      	ldr	r3, [pc, #520]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <HAL_RCC_OscConfig+0x7c>
 80050b2:	4b7f      	ldr	r3, [pc, #508]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050ba:	e005      	b.n	80050c8 <HAL_RCC_OscConfig+0x88>
 80050bc:	4b7c      	ldr	r3, [pc, #496]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050c2:	091b      	lsrs	r3, r3, #4
 80050c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d223      	bcs.n	8005114 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fd55 	bl	8005b80 <RCC_SetFlashLatencyFromMSIRange>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e383      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050e0:	4b73      	ldr	r3, [pc, #460]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a72      	ldr	r2, [pc, #456]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050e6:	f043 0308 	orr.w	r3, r3, #8
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	4b70      	ldr	r3, [pc, #448]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	496d      	ldr	r1, [pc, #436]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050fe:	4b6c      	ldr	r3, [pc, #432]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	4968      	ldr	r1, [pc, #416]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 800510e:	4313      	orrs	r3, r2
 8005110:	604b      	str	r3, [r1, #4]
 8005112:	e025      	b.n	8005160 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005114:	4b66      	ldr	r3, [pc, #408]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a65      	ldr	r2, [pc, #404]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 800511a:	f043 0308 	orr.w	r3, r3, #8
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	4b63      	ldr	r3, [pc, #396]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	4960      	ldr	r1, [pc, #384]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 800512e:	4313      	orrs	r3, r2
 8005130:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005132:	4b5f      	ldr	r3, [pc, #380]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	495b      	ldr	r1, [pc, #364]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005142:	4313      	orrs	r3, r2
 8005144:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d109      	bne.n	8005160 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fd15 	bl	8005b80 <RCC_SetFlashLatencyFromMSIRange>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e343      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005160:	f000 fc4a 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8005164:	4602      	mov	r2, r0
 8005166:	4b52      	ldr	r3, [pc, #328]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	4950      	ldr	r1, [pc, #320]	@ (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
 800517c:	4a4e      	ldr	r2, [pc, #312]	@ (80052b8 <HAL_RCC_OscConfig+0x278>)
 800517e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005180:	4b4e      	ldr	r3, [pc, #312]	@ (80052bc <HAL_RCC_OscConfig+0x27c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe fdaf 	bl	8003ce8 <HAL_InitTick>
 800518a:	4603      	mov	r3, r0
 800518c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d052      	beq.n	800523a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	e327      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d032      	beq.n	8005206 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051a0:	4b43      	ldr	r3, [pc, #268]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a42      	ldr	r2, [pc, #264]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051ac:	f7fe fdec 	bl	8003d88 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051b4:	f7fe fde8 	bl	8003d88 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e310      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051c6:	4b3a      	ldr	r3, [pc, #232]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051d2:	4b37      	ldr	r3, [pc, #220]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a36      	ldr	r2, [pc, #216]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051d8:	f043 0308 	orr.w	r3, r3, #8
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	4b34      	ldr	r3, [pc, #208]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	4931      	ldr	r1, [pc, #196]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051f0:	4b2f      	ldr	r3, [pc, #188]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	492c      	ldr	r1, [pc, #176]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005200:	4313      	orrs	r3, r2
 8005202:	604b      	str	r3, [r1, #4]
 8005204:	e01a      	b.n	800523c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005206:	4b2a      	ldr	r3, [pc, #168]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a29      	ldr	r2, [pc, #164]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005212:	f7fe fdb9 	bl	8003d88 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800521a:	f7fe fdb5 	bl	8003d88 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e2dd      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800522c:	4b20      	ldr	r3, [pc, #128]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1f0      	bne.n	800521a <HAL_RCC_OscConfig+0x1da>
 8005238:	e000      	b.n	800523c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800523a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d074      	beq.n	8005332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2b08      	cmp	r3, #8
 800524c:	d005      	beq.n	800525a <HAL_RCC_OscConfig+0x21a>
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	2b0c      	cmp	r3, #12
 8005252:	d10e      	bne.n	8005272 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b03      	cmp	r3, #3
 8005258:	d10b      	bne.n	8005272 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525a:	4b15      	ldr	r3, [pc, #84]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d064      	beq.n	8005330 <HAL_RCC_OscConfig+0x2f0>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d160      	bne.n	8005330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e2ba      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800527a:	d106      	bne.n	800528a <HAL_RCC_OscConfig+0x24a>
 800527c:	4b0c      	ldr	r3, [pc, #48]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a0b      	ldr	r2, [pc, #44]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	e026      	b.n	80052d8 <HAL_RCC_OscConfig+0x298>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005292:	d115      	bne.n	80052c0 <HAL_RCC_OscConfig+0x280>
 8005294:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a05      	ldr	r2, [pc, #20]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 800529a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	4b03      	ldr	r3, [pc, #12]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a02      	ldr	r2, [pc, #8]	@ (80052b0 <HAL_RCC_OscConfig+0x270>)
 80052a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	e014      	b.n	80052d8 <HAL_RCC_OscConfig+0x298>
 80052ae:	bf00      	nop
 80052b0:	40021000 	.word	0x40021000
 80052b4:	0800bc40 	.word	0x0800bc40
 80052b8:	20000004 	.word	0x20000004
 80052bc:	2000001c 	.word	0x2000001c
 80052c0:	4ba0      	ldr	r3, [pc, #640]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a9f      	ldr	r2, [pc, #636]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80052c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	4b9d      	ldr	r3, [pc, #628]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a9c      	ldr	r2, [pc, #624]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80052d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d013      	beq.n	8005308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fe fd52 	bl	8003d88 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052e8:	f7fe fd4e 	bl	8003d88 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b64      	cmp	r3, #100	@ 0x64
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e276      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052fa:	4b92      	ldr	r3, [pc, #584]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCC_OscConfig+0x2a8>
 8005306:	e014      	b.n	8005332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fe fd3e 	bl	8003d88 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005310:	f7fe fd3a 	bl	8003d88 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	@ 0x64
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e262      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005322:	4b88      	ldr	r3, [pc, #544]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x2d0>
 800532e:	e000      	b.n	8005332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d060      	beq.n	8005400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b04      	cmp	r3, #4
 8005342:	d005      	beq.n	8005350 <HAL_RCC_OscConfig+0x310>
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b0c      	cmp	r3, #12
 8005348:	d119      	bne.n	800537e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d116      	bne.n	800537e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005350:	4b7c      	ldr	r3, [pc, #496]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <HAL_RCC_OscConfig+0x328>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e23f      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005368:	4b76      	ldr	r3, [pc, #472]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	061b      	lsls	r3, r3, #24
 8005376:	4973      	ldr	r1, [pc, #460]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 8005378:	4313      	orrs	r3, r2
 800537a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800537c:	e040      	b.n	8005400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d023      	beq.n	80053ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005386:	4b6f      	ldr	r3, [pc, #444]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a6e      	ldr	r2, [pc, #440]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 800538c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005392:	f7fe fcf9 	bl	8003d88 <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800539a:	f7fe fcf5 	bl	8003d88 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e21d      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ac:	4b65      	ldr	r3, [pc, #404]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0f0      	beq.n	800539a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b8:	4b62      	ldr	r3, [pc, #392]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	495f      	ldr	r1, [pc, #380]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	604b      	str	r3, [r1, #4]
 80053cc:	e018      	b.n	8005400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ce:	4b5d      	ldr	r3, [pc, #372]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a5c      	ldr	r2, [pc, #368]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80053d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fe fcd5 	bl	8003d88 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e2:	f7fe fcd1 	bl	8003d88 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e1f9      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053f4:	4b53      	ldr	r3, [pc, #332]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f0      	bne.n	80053e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d03c      	beq.n	8005486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01c      	beq.n	800544e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005414:	4b4b      	ldr	r3, [pc, #300]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 8005416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800541a:	4a4a      	ldr	r2, [pc, #296]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005424:	f7fe fcb0 	bl	8003d88 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800542c:	f7fe fcac 	bl	8003d88 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e1d4      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800543e:	4b41      	ldr	r3, [pc, #260]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 8005440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0ef      	beq.n	800542c <HAL_RCC_OscConfig+0x3ec>
 800544c:	e01b      	b.n	8005486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800544e:	4b3d      	ldr	r3, [pc, #244]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 8005450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005454:	4a3b      	ldr	r2, [pc, #236]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 8005456:	f023 0301 	bic.w	r3, r3, #1
 800545a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545e:	f7fe fc93 	bl	8003d88 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005466:	f7fe fc8f 	bl	8003d88 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e1b7      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005478:	4b32      	ldr	r3, [pc, #200]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 800547a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1ef      	bne.n	8005466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80a6 	beq.w	80055e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005494:	2300      	movs	r3, #0
 8005496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005498:	4b2a      	ldr	r3, [pc, #168]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 800549a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10d      	bne.n	80054c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a4:	4b27      	ldr	r3, [pc, #156]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80054a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a8:	4a26      	ldr	r2, [pc, #152]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80054aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80054b0:	4b24      	ldr	r3, [pc, #144]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 80054b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054bc:	2301      	movs	r3, #1
 80054be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054c0:	4b21      	ldr	r3, [pc, #132]	@ (8005548 <HAL_RCC_OscConfig+0x508>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d118      	bne.n	80054fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005548 <HAL_RCC_OscConfig+0x508>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005548 <HAL_RCC_OscConfig+0x508>)
 80054d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054d8:	f7fe fc56 	bl	8003d88 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e0:	f7fe fc52 	bl	8003d88 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e17a      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054f2:	4b15      	ldr	r3, [pc, #84]	@ (8005548 <HAL_RCC_OscConfig+0x508>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0f0      	beq.n	80054e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d108      	bne.n	8005518 <HAL_RCC_OscConfig+0x4d8>
 8005506:	4b0f      	ldr	r3, [pc, #60]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550c:	4a0d      	ldr	r2, [pc, #52]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005516:	e029      	b.n	800556c <HAL_RCC_OscConfig+0x52c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b05      	cmp	r3, #5
 800551e:	d115      	bne.n	800554c <HAL_RCC_OscConfig+0x50c>
 8005520:	4b08      	ldr	r3, [pc, #32]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005526:	4a07      	ldr	r2, [pc, #28]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 8005528:	f043 0304 	orr.w	r3, r3, #4
 800552c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005530:	4b04      	ldr	r3, [pc, #16]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005536:	4a03      	ldr	r2, [pc, #12]	@ (8005544 <HAL_RCC_OscConfig+0x504>)
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005540:	e014      	b.n	800556c <HAL_RCC_OscConfig+0x52c>
 8005542:	bf00      	nop
 8005544:	40021000 	.word	0x40021000
 8005548:	40007000 	.word	0x40007000
 800554c:	4b9c      	ldr	r3, [pc, #624]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005552:	4a9b      	ldr	r2, [pc, #620]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800555c:	4b98      	ldr	r3, [pc, #608]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005562:	4a97      	ldr	r2, [pc, #604]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005564:	f023 0304 	bic.w	r3, r3, #4
 8005568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d016      	beq.n	80055a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005574:	f7fe fc08 	bl	8003d88 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800557a:	e00a      	b.n	8005592 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800557c:	f7fe fc04 	bl	8003d88 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e12a      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005592:	4b8b      	ldr	r3, [pc, #556]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0ed      	beq.n	800557c <HAL_RCC_OscConfig+0x53c>
 80055a0:	e015      	b.n	80055ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a2:	f7fe fbf1 	bl	8003d88 <HAL_GetTick>
 80055a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055a8:	e00a      	b.n	80055c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055aa:	f7fe fbed 	bl	8003d88 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e113      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055c0:	4b7f      	ldr	r3, [pc, #508]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1ed      	bne.n	80055aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055ce:	7ffb      	ldrb	r3, [r7, #31]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d105      	bne.n	80055e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d4:	4b7a      	ldr	r3, [pc, #488]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 80055d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d8:	4a79      	ldr	r2, [pc, #484]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 80055da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055de:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 80fe 	beq.w	80057e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	f040 80d0 	bne.w	8005794 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80055f4:	4b72      	ldr	r3, [pc, #456]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f003 0203 	and.w	r2, r3, #3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	429a      	cmp	r2, r3
 8005606:	d130      	bne.n	800566a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005612:	3b01      	subs	r3, #1
 8005614:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005616:	429a      	cmp	r2, r3
 8005618:	d127      	bne.n	800566a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005624:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d11f      	bne.n	800566a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005634:	2a07      	cmp	r2, #7
 8005636:	bf14      	ite	ne
 8005638:	2201      	movne	r2, #1
 800563a:	2200      	moveq	r2, #0
 800563c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800563e:	4293      	cmp	r3, r2
 8005640:	d113      	bne.n	800566a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	3b01      	subs	r3, #1
 8005650:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005652:	429a      	cmp	r2, r3
 8005654:	d109      	bne.n	800566a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005660:	085b      	lsrs	r3, r3, #1
 8005662:	3b01      	subs	r3, #1
 8005664:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005666:	429a      	cmp	r2, r3
 8005668:	d06e      	beq.n	8005748 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b0c      	cmp	r3, #12
 800566e:	d069      	beq.n	8005744 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005670:	4b53      	ldr	r3, [pc, #332]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d105      	bne.n	8005688 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800567c:	4b50      	ldr	r3, [pc, #320]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0ad      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800568c:	4b4c      	ldr	r3, [pc, #304]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a4b      	ldr	r2, [pc, #300]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005692:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005696:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005698:	f7fe fb76 	bl	8003d88 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fe fb72 	bl	8003d88 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e09a      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056b2:	4b43      	ldr	r3, [pc, #268]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056be:	4b40      	ldr	r3, [pc, #256]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	4b40      	ldr	r3, [pc, #256]	@ (80057c4 <HAL_RCC_OscConfig+0x784>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056ce:	3a01      	subs	r2, #1
 80056d0:	0112      	lsls	r2, r2, #4
 80056d2:	4311      	orrs	r1, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80056d8:	0212      	lsls	r2, r2, #8
 80056da:	4311      	orrs	r1, r2
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056e0:	0852      	lsrs	r2, r2, #1
 80056e2:	3a01      	subs	r2, #1
 80056e4:	0552      	lsls	r2, r2, #21
 80056e6:	4311      	orrs	r1, r2
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80056ec:	0852      	lsrs	r2, r2, #1
 80056ee:	3a01      	subs	r2, #1
 80056f0:	0652      	lsls	r2, r2, #25
 80056f2:	4311      	orrs	r1, r2
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056f8:	0912      	lsrs	r2, r2, #4
 80056fa:	0452      	lsls	r2, r2, #17
 80056fc:	430a      	orrs	r2, r1
 80056fe:	4930      	ldr	r1, [pc, #192]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005700:	4313      	orrs	r3, r2
 8005702:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005704:	4b2e      	ldr	r3, [pc, #184]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a2d      	ldr	r2, [pc, #180]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 800570a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800570e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005710:	4b2b      	ldr	r3, [pc, #172]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4a2a      	ldr	r2, [pc, #168]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800571a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800571c:	f7fe fb34 	bl	8003d88 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005724:	f7fe fb30 	bl	8003d88 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e058      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005736:	4b22      	ldr	r3, [pc, #136]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005742:	e050      	b.n	80057e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e04f      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005748:	4b1d      	ldr	r3, [pc, #116]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d148      	bne.n	80057e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005754:	4b1a      	ldr	r3, [pc, #104]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a19      	ldr	r2, [pc, #100]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 800575a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800575e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005760:	4b17      	ldr	r3, [pc, #92]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4a16      	ldr	r2, [pc, #88]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800576a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800576c:	f7fe fb0c 	bl	8003d88 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005774:	f7fe fb08 	bl	8003d88 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e030      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005786:	4b0e      	ldr	r3, [pc, #56]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0f0      	beq.n	8005774 <HAL_RCC_OscConfig+0x734>
 8005792:	e028      	b.n	80057e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b0c      	cmp	r3, #12
 8005798:	d023      	beq.n	80057e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579a:	4b09      	ldr	r3, [pc, #36]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a08      	ldr	r2, [pc, #32]	@ (80057c0 <HAL_RCC_OscConfig+0x780>)
 80057a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a6:	f7fe faef 	bl	8003d88 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057ac:	e00c      	b.n	80057c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ae:	f7fe faeb 	bl	8003d88 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d905      	bls.n	80057c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e013      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
 80057c0:	40021000 	.word	0x40021000
 80057c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c8:	4b09      	ldr	r3, [pc, #36]	@ (80057f0 <HAL_RCC_OscConfig+0x7b0>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1ec      	bne.n	80057ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80057d4:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <HAL_RCC_OscConfig+0x7b0>)
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	4905      	ldr	r1, [pc, #20]	@ (80057f0 <HAL_RCC_OscConfig+0x7b0>)
 80057da:	4b06      	ldr	r3, [pc, #24]	@ (80057f4 <HAL_RCC_OscConfig+0x7b4>)
 80057dc:	4013      	ands	r3, r2
 80057de:	60cb      	str	r3, [r1, #12]
 80057e0:	e001      	b.n	80057e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40021000 	.word	0x40021000
 80057f4:	feeefffc 	.word	0xfeeefffc

080057f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0e7      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800580c:	4b75      	ldr	r3, [pc, #468]	@ (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d910      	bls.n	800583c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581a:	4b72      	ldr	r3, [pc, #456]	@ (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f023 0207 	bic.w	r2, r3, #7
 8005822:	4970      	ldr	r1, [pc, #448]	@ (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b6e      	ldr	r3, [pc, #440]	@ (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d001      	beq.n	800583c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0cf      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d010      	beq.n	800586a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	4b66      	ldr	r3, [pc, #408]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005854:	429a      	cmp	r2, r3
 8005856:	d908      	bls.n	800586a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005858:	4b63      	ldr	r3, [pc, #396]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	4960      	ldr	r1, [pc, #384]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005866:	4313      	orrs	r3, r2
 8005868:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d04c      	beq.n	8005910 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b03      	cmp	r3, #3
 800587c:	d107      	bne.n	800588e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800587e:	4b5a      	ldr	r3, [pc, #360]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d121      	bne.n	80058ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0a6      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d107      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005896:	4b54      	ldr	r3, [pc, #336]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d115      	bne.n	80058ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e09a      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d107      	bne.n	80058be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058ae:	4b4e      	ldr	r3, [pc, #312]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e08e      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058be:	4b4a      	ldr	r3, [pc, #296]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e086      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058ce:	4b46      	ldr	r3, [pc, #280]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f023 0203 	bic.w	r2, r3, #3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	4943      	ldr	r1, [pc, #268]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e0:	f7fe fa52 	bl	8003d88 <HAL_GetTick>
 80058e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e6:	e00a      	b.n	80058fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e8:	f7fe fa4e 	bl	8003d88 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e06e      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058fe:	4b3a      	ldr	r3, [pc, #232]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 020c 	and.w	r2, r3, #12
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	429a      	cmp	r2, r3
 800590e:	d1eb      	bne.n	80058e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d010      	beq.n	800593e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	4b31      	ldr	r3, [pc, #196]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005928:	429a      	cmp	r2, r3
 800592a:	d208      	bcs.n	800593e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800592c:	4b2e      	ldr	r3, [pc, #184]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	492b      	ldr	r1, [pc, #172]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 800593a:	4313      	orrs	r3, r2
 800593c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800593e:	4b29      	ldr	r3, [pc, #164]	@ (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d210      	bcs.n	800596e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594c:	4b25      	ldr	r3, [pc, #148]	@ (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f023 0207 	bic.w	r2, r3, #7
 8005954:	4923      	ldr	r1, [pc, #140]	@ (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	4313      	orrs	r3, r2
 800595a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800595c:	4b21      	ldr	r3, [pc, #132]	@ (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d001      	beq.n	800596e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e036      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b00      	cmp	r3, #0
 8005978:	d008      	beq.n	800598c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800597a:	4b1b      	ldr	r3, [pc, #108]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	4918      	ldr	r1, [pc, #96]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005988:	4313      	orrs	r3, r2
 800598a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d009      	beq.n	80059ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005998:	4b13      	ldr	r3, [pc, #76]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	4910      	ldr	r1, [pc, #64]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059ac:	f000 f824 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 80059b0:	4602      	mov	r2, r0
 80059b2:	4b0d      	ldr	r3, [pc, #52]	@ (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	091b      	lsrs	r3, r3, #4
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	490b      	ldr	r1, [pc, #44]	@ (80059ec <HAL_RCC_ClockConfig+0x1f4>)
 80059be:	5ccb      	ldrb	r3, [r1, r3]
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	fa22 f303 	lsr.w	r3, r2, r3
 80059c8:	4a09      	ldr	r2, [pc, #36]	@ (80059f0 <HAL_RCC_ClockConfig+0x1f8>)
 80059ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059cc:	4b09      	ldr	r3, [pc, #36]	@ (80059f4 <HAL_RCC_ClockConfig+0x1fc>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe f989 	bl	8003ce8 <HAL_InitTick>
 80059d6:	4603      	mov	r3, r0
 80059d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80059da:	7afb      	ldrb	r3, [r7, #11]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40022000 	.word	0x40022000
 80059e8:	40021000 	.word	0x40021000
 80059ec:	0800bc40 	.word	0x0800bc40
 80059f0:	20000004 	.word	0x20000004
 80059f4:	2000001c 	.word	0x2000001c

080059f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b089      	sub	sp, #36	@ 0x24
 80059fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	2300      	movs	r3, #0
 8005a04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a06:	4b3e      	ldr	r3, [pc, #248]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 030c 	and.w	r3, r3, #12
 8005a0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a10:	4b3b      	ldr	r3, [pc, #236]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <HAL_RCC_GetSysClockFreq+0x34>
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b0c      	cmp	r3, #12
 8005a24:	d121      	bne.n	8005a6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d11e      	bne.n	8005a6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a2c:	4b34      	ldr	r3, [pc, #208]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d107      	bne.n	8005a48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a38:	4b31      	ldr	r3, [pc, #196]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	e005      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a48:	4b2d      	ldr	r3, [pc, #180]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a54:	4a2b      	ldr	r2, [pc, #172]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10d      	bne.n	8005a80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a68:	e00a      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d102      	bne.n	8005a76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a70:	4b25      	ldr	r3, [pc, #148]	@ (8005b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a72:	61bb      	str	r3, [r7, #24]
 8005a74:	e004      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d101      	bne.n	8005a80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a7c:	4b23      	ldr	r3, [pc, #140]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8005a7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b0c      	cmp	r3, #12
 8005a84:	d134      	bne.n	8005af0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a86:	4b1e      	ldr	r3, [pc, #120]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d003      	beq.n	8005a9e <HAL_RCC_GetSysClockFreq+0xa6>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d003      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0xac>
 8005a9c:	e005      	b.n	8005aaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8005aa0:	617b      	str	r3, [r7, #20]
      break;
 8005aa2:	e005      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005aa4:	4b19      	ldr	r3, [pc, #100]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8005aa6:	617b      	str	r3, [r7, #20]
      break;
 8005aa8:	e002      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	617b      	str	r3, [r7, #20]
      break;
 8005aae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ab0:	4b13      	ldr	r3, [pc, #76]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	3301      	adds	r3, #1
 8005abc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005abe:	4b10      	ldr	r3, [pc, #64]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	0a1b      	lsrs	r3, r3, #8
 8005ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	fb03 f202 	mul.w	r2, r3, r2
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	0e5b      	lsrs	r3, r3, #25
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005af0:	69bb      	ldr	r3, [r7, #24]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3724      	adds	r7, #36	@ 0x24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40021000 	.word	0x40021000
 8005b04:	0800bc58 	.word	0x0800bc58
 8005b08:	00f42400 	.word	0x00f42400
 8005b0c:	007a1200 	.word	0x007a1200

08005b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b14:	4b03      	ldr	r3, [pc, #12]	@ (8005b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b16:	681b      	ldr	r3, [r3, #0]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000004 	.word	0x20000004

08005b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b2c:	f7ff fff0 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8005b30:	4602      	mov	r2, r0
 8005b32:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	0a1b      	lsrs	r3, r3, #8
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	4904      	ldr	r1, [pc, #16]	@ (8005b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b3e:	5ccb      	ldrb	r3, [r1, r3]
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	0800bc50 	.word	0x0800bc50

08005b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b58:	f7ff ffda 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	0adb      	lsrs	r3, r3, #11
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	4904      	ldr	r1, [pc, #16]	@ (8005b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b6a:	5ccb      	ldrb	r3, [r1, r3]
 8005b6c:	f003 031f 	and.w	r3, r3, #31
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	0800bc50 	.word	0x0800bc50

08005b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8005c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b98:	f7ff f922 	bl	8004de0 <HAL_PWREx_GetVoltageRange>
 8005b9c:	6178      	str	r0, [r7, #20]
 8005b9e:	e014      	b.n	8005bca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ba0:	4b25      	ldr	r3, [pc, #148]	@ (8005c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba4:	4a24      	ldr	r2, [pc, #144]	@ (8005c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005baa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bac:	4b22      	ldr	r3, [pc, #136]	@ (8005c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bb8:	f7ff f912 	bl	8004de0 <HAL_PWREx_GetVoltageRange>
 8005bbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bd0:	d10b      	bne.n	8005bea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b80      	cmp	r3, #128	@ 0x80
 8005bd6:	d919      	bls.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2ba0      	cmp	r3, #160	@ 0xa0
 8005bdc:	d902      	bls.n	8005be4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bde:	2302      	movs	r3, #2
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	e013      	b.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005be4:	2301      	movs	r3, #1
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	e010      	b.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b80      	cmp	r3, #128	@ 0x80
 8005bee:	d902      	bls.n	8005bf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	e00a      	b.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b80      	cmp	r3, #128	@ 0x80
 8005bfa:	d102      	bne.n	8005c02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	e004      	b.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b70      	cmp	r3, #112	@ 0x70
 8005c06:	d101      	bne.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c08:	2301      	movs	r3, #1
 8005c0a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f023 0207 	bic.w	r2, r3, #7
 8005c14:	4909      	ldr	r1, [pc, #36]	@ (8005c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c1c:	4b07      	ldr	r3, [pc, #28]	@ (8005c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d001      	beq.n	8005c2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	40022000 	.word	0x40022000

08005c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c48:	2300      	movs	r3, #0
 8005c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d041      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005c64:	d02a      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005c66:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005c6a:	d824      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c70:	d008      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005c72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c76:	d81e      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c80:	d010      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c82:	e018      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c84:	4b86      	ldr	r3, [pc, #536]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	4a85      	ldr	r2, [pc, #532]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c90:	e015      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3304      	adds	r3, #4
 8005c96:	2100      	movs	r1, #0
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 facb 	bl	8006234 <RCCEx_PLLSAI1_Config>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ca2:	e00c      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3320      	adds	r3, #32
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fbb6 	bl	800641c <RCCEx_PLLSAI2_Config>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cb4:	e003      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	74fb      	strb	r3, [r7, #19]
      break;
 8005cba:	e000      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cbe:	7cfb      	ldrb	r3, [r7, #19]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10b      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cc4:	4b76      	ldr	r3, [pc, #472]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cd2:	4973      	ldr	r1, [pc, #460]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005cda:	e001      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cdc:	7cfb      	ldrb	r3, [r7, #19]
 8005cde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d041      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cf0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cf4:	d02a      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005cf6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cfa:	d824      	bhi.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005cfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d00:	d008      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d06:	d81e      	bhi.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d10:	d010      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d12:	e018      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d14:	4b62      	ldr	r3, [pc, #392]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	4a61      	ldr	r2, [pc, #388]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d20:	e015      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3304      	adds	r3, #4
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fa83 	bl	8006234 <RCCEx_PLLSAI1_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d32:	e00c      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3320      	adds	r3, #32
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fb6e 	bl	800641c <RCCEx_PLLSAI2_Config>
 8005d40:	4603      	mov	r3, r0
 8005d42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d44:	e003      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	74fb      	strb	r3, [r7, #19]
      break;
 8005d4a:	e000      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d4e:	7cfb      	ldrb	r3, [r7, #19]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10b      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d54:	4b52      	ldr	r3, [pc, #328]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d62:	494f      	ldr	r1, [pc, #316]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d6a:	e001      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6c:	7cfb      	ldrb	r3, [r7, #19]
 8005d6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 80a0 	beq.w	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d82:	4b47      	ldr	r3, [pc, #284]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005d92:	2300      	movs	r3, #0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00d      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d98:	4b41      	ldr	r3, [pc, #260]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9c:	4a40      	ldr	r2, [pc, #256]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005da4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005db0:	2301      	movs	r3, #1
 8005db2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005db4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a3a      	ldr	r2, [pc, #232]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dc0:	f7fd ffe2 	bl	8003d88 <HAL_GetTick>
 8005dc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dc6:	e009      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc8:	f7fd ffde 	bl	8003d88 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d902      	bls.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	74fb      	strb	r3, [r7, #19]
        break;
 8005dda:	e005      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ddc:	4b31      	ldr	r3, [pc, #196]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0ef      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005de8:	7cfb      	ldrb	r3, [r7, #19]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d15c      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005dee:	4b2c      	ldr	r3, [pc, #176]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01f      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d019      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e0c:	4b24      	ldr	r3, [pc, #144]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e18:	4b21      	ldr	r3, [pc, #132]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e1e:	4a20      	ldr	r2, [pc, #128]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e38:	4a19      	ldr	r2, [pc, #100]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d016      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4a:	f7fd ff9d 	bl	8003d88 <HAL_GetTick>
 8005e4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e50:	e00b      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e52:	f7fd ff99 	bl	8003d88 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d902      	bls.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	74fb      	strb	r3, [r7, #19]
            break;
 8005e68:	e006      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0ec      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005e78:	7cfb      	ldrb	r3, [r7, #19]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10c      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e7e:	4b08      	ldr	r3, [pc, #32]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e8e:	4904      	ldr	r1, [pc, #16]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005e96:	e009      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e98:	7cfb      	ldrb	r3, [r7, #19]
 8005e9a:	74bb      	strb	r3, [r7, #18]
 8005e9c:	e006      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005e9e:	bf00      	nop
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea8:	7cfb      	ldrb	r3, [r7, #19]
 8005eaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eac:	7c7b      	ldrb	r3, [r7, #17]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d105      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb2:	4b9e      	ldr	r3, [pc, #632]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb6:	4a9d      	ldr	r2, [pc, #628]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ebc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005eca:	4b98      	ldr	r3, [pc, #608]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed0:	f023 0203 	bic.w	r2, r3, #3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed8:	4994      	ldr	r1, [pc, #592]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005eec:	4b8f      	ldr	r3, [pc, #572]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef2:	f023 020c 	bic.w	r2, r3, #12
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efa:	498c      	ldr	r1, [pc, #560]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f0e:	4b87      	ldr	r3, [pc, #540]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1c:	4983      	ldr	r1, [pc, #524]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f30:	4b7e      	ldr	r3, [pc, #504]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3e:	497b      	ldr	r1, [pc, #492]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f52:	4b76      	ldr	r3, [pc, #472]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f60:	4972      	ldr	r1, [pc, #456]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f74:	4b6d      	ldr	r3, [pc, #436]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f82:	496a      	ldr	r1, [pc, #424]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f96:	4b65      	ldr	r3, [pc, #404]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa4:	4961      	ldr	r1, [pc, #388]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fb8:	4b5c      	ldr	r3, [pc, #368]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fc6:	4959      	ldr	r1, [pc, #356]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fda:	4b54      	ldr	r3, [pc, #336]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe8:	4950      	ldr	r1, [pc, #320]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006002:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600a:	4948      	ldr	r1, [pc, #288]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800601e:	4b43      	ldr	r3, [pc, #268]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006024:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602c:	493f      	ldr	r1, [pc, #252]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d028      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006040:	4b3a      	ldr	r3, [pc, #232]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006046:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800604e:	4937      	ldr	r1, [pc, #220]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800605a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800605e:	d106      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006060:	4b32      	ldr	r3, [pc, #200]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	4a31      	ldr	r2, [pc, #196]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800606a:	60d3      	str	r3, [r2, #12]
 800606c:	e011      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006072:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006076:	d10c      	bne.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3304      	adds	r3, #4
 800607c:	2101      	movs	r1, #1
 800607e:	4618      	mov	r0, r3
 8006080:	f000 f8d8 	bl	8006234 <RCCEx_PLLSAI1_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006088:	7cfb      	ldrb	r3, [r7, #19]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800608e:	7cfb      	ldrb	r3, [r7, #19]
 8006090:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d028      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800609e:	4b23      	ldr	r3, [pc, #140]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ac:	491f      	ldr	r1, [pc, #124]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060bc:	d106      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060be:	4b1b      	ldr	r3, [pc, #108]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	4a1a      	ldr	r2, [pc, #104]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060c8:	60d3      	str	r3, [r2, #12]
 80060ca:	e011      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060d4:	d10c      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3304      	adds	r3, #4
 80060da:	2101      	movs	r1, #1
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 f8a9 	bl	8006234 <RCCEx_PLLSAI1_Config>
 80060e2:	4603      	mov	r3, r0
 80060e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060e6:	7cfb      	ldrb	r3, [r7, #19]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80060ec:	7cfb      	ldrb	r3, [r7, #19]
 80060ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d02b      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060fc:	4b0b      	ldr	r3, [pc, #44]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006102:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800610a:	4908      	ldr	r1, [pc, #32]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006116:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800611a:	d109      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800611c:	4b03      	ldr	r3, [pc, #12]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	4a02      	ldr	r2, [pc, #8]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006126:	60d3      	str	r3, [r2, #12]
 8006128:	e014      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800612a:	bf00      	nop
 800612c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006134:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006138:	d10c      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3304      	adds	r3, #4
 800613e:	2101      	movs	r1, #1
 8006140:	4618      	mov	r0, r3
 8006142:	f000 f877 	bl	8006234 <RCCEx_PLLSAI1_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800614a:	7cfb      	ldrb	r3, [r7, #19]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006150:	7cfb      	ldrb	r3, [r7, #19]
 8006152:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d02f      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006160:	4b2b      	ldr	r3, [pc, #172]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006166:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800616e:	4928      	ldr	r1, [pc, #160]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800617a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800617e:	d10d      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3304      	adds	r3, #4
 8006184:	2102      	movs	r1, #2
 8006186:	4618      	mov	r0, r3
 8006188:	f000 f854 	bl	8006234 <RCCEx_PLLSAI1_Config>
 800618c:	4603      	mov	r3, r0
 800618e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006190:	7cfb      	ldrb	r3, [r7, #19]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d014      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006196:	7cfb      	ldrb	r3, [r7, #19]
 8006198:	74bb      	strb	r3, [r7, #18]
 800619a:	e011      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061a4:	d10c      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3320      	adds	r3, #32
 80061aa:	2102      	movs	r1, #2
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 f935 	bl	800641c <RCCEx_PLLSAI2_Config>
 80061b2:	4603      	mov	r3, r0
 80061b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061b6:	7cfb      	ldrb	r3, [r7, #19]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061bc:	7cfb      	ldrb	r3, [r7, #19]
 80061be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00a      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061cc:	4b10      	ldr	r3, [pc, #64]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061da:	490d      	ldr	r1, [pc, #52]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00b      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80061ee:	4b08      	ldr	r3, [pc, #32]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061fe:	4904      	ldr	r1, [pc, #16]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006200:	4313      	orrs	r3, r2
 8006202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006206:	7cbb      	ldrb	r3, [r7, #18]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	40021000 	.word	0x40021000

08006214 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006218:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a04      	ldr	r2, [pc, #16]	@ (8006230 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800621e:	f043 0304 	orr.w	r3, r3, #4
 8006222:	6013      	str	r3, [r2, #0]
}
 8006224:	bf00      	nop
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40021000 	.word	0x40021000

08006234 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006242:	4b75      	ldr	r3, [pc, #468]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d018      	beq.n	8006280 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800624e:	4b72      	ldr	r3, [pc, #456]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f003 0203 	and.w	r2, r3, #3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d10d      	bne.n	800627a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
       ||
 8006262:	2b00      	cmp	r3, #0
 8006264:	d009      	beq.n	800627a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006266:	4b6c      	ldr	r3, [pc, #432]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	091b      	lsrs	r3, r3, #4
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
       ||
 8006276:	429a      	cmp	r2, r3
 8006278:	d047      	beq.n	800630a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	73fb      	strb	r3, [r7, #15]
 800627e:	e044      	b.n	800630a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b03      	cmp	r3, #3
 8006286:	d018      	beq.n	80062ba <RCCEx_PLLSAI1_Config+0x86>
 8006288:	2b03      	cmp	r3, #3
 800628a:	d825      	bhi.n	80062d8 <RCCEx_PLLSAI1_Config+0xa4>
 800628c:	2b01      	cmp	r3, #1
 800628e:	d002      	beq.n	8006296 <RCCEx_PLLSAI1_Config+0x62>
 8006290:	2b02      	cmp	r3, #2
 8006292:	d009      	beq.n	80062a8 <RCCEx_PLLSAI1_Config+0x74>
 8006294:	e020      	b.n	80062d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006296:	4b60      	ldr	r3, [pc, #384]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d11d      	bne.n	80062de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062a6:	e01a      	b.n	80062de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062a8:	4b5b      	ldr	r3, [pc, #364]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d116      	bne.n	80062e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062b8:	e013      	b.n	80062e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062ba:	4b57      	ldr	r3, [pc, #348]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10f      	bne.n	80062e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062c6:	4b54      	ldr	r3, [pc, #336]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062d6:	e006      	b.n	80062e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	73fb      	strb	r3, [r7, #15]
      break;
 80062dc:	e004      	b.n	80062e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062de:	bf00      	nop
 80062e0:	e002      	b.n	80062e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062e2:	bf00      	nop
 80062e4:	e000      	b.n	80062e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10d      	bne.n	800630a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6819      	ldr	r1, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	3b01      	subs	r3, #1
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	430b      	orrs	r3, r1
 8006304:	4944      	ldr	r1, [pc, #272]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006306:	4313      	orrs	r3, r2
 8006308:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800630a:	7bfb      	ldrb	r3, [r7, #15]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d17d      	bne.n	800640c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006310:	4b41      	ldr	r3, [pc, #260]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a40      	ldr	r2, [pc, #256]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006316:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800631a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631c:	f7fd fd34 	bl	8003d88 <HAL_GetTick>
 8006320:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006322:	e009      	b.n	8006338 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006324:	f7fd fd30 	bl	8003d88 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d902      	bls.n	8006338 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	73fb      	strb	r3, [r7, #15]
        break;
 8006336:	e005      	b.n	8006344 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006338:	4b37      	ldr	r3, [pc, #220]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1ef      	bne.n	8006324 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006344:	7bfb      	ldrb	r3, [r7, #15]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d160      	bne.n	800640c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d111      	bne.n	8006374 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006350:	4b31      	ldr	r3, [pc, #196]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6892      	ldr	r2, [r2, #8]
 8006360:	0211      	lsls	r1, r2, #8
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	68d2      	ldr	r2, [r2, #12]
 8006366:	0912      	lsrs	r2, r2, #4
 8006368:	0452      	lsls	r2, r2, #17
 800636a:	430a      	orrs	r2, r1
 800636c:	492a      	ldr	r1, [pc, #168]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 800636e:	4313      	orrs	r3, r2
 8006370:	610b      	str	r3, [r1, #16]
 8006372:	e027      	b.n	80063c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d112      	bne.n	80063a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800637a:	4b27      	ldr	r3, [pc, #156]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006382:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6892      	ldr	r2, [r2, #8]
 800638a:	0211      	lsls	r1, r2, #8
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6912      	ldr	r2, [r2, #16]
 8006390:	0852      	lsrs	r2, r2, #1
 8006392:	3a01      	subs	r2, #1
 8006394:	0552      	lsls	r2, r2, #21
 8006396:	430a      	orrs	r2, r1
 8006398:	491f      	ldr	r1, [pc, #124]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 800639a:	4313      	orrs	r3, r2
 800639c:	610b      	str	r3, [r1, #16]
 800639e:	e011      	b.n	80063c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80063a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6892      	ldr	r2, [r2, #8]
 80063b0:	0211      	lsls	r1, r2, #8
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6952      	ldr	r2, [r2, #20]
 80063b6:	0852      	lsrs	r2, r2, #1
 80063b8:	3a01      	subs	r2, #1
 80063ba:	0652      	lsls	r2, r2, #25
 80063bc:	430a      	orrs	r2, r1
 80063be:	4916      	ldr	r1, [pc, #88]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063c4:	4b14      	ldr	r3, [pc, #80]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a13      	ldr	r2, [pc, #76]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d0:	f7fd fcda 	bl	8003d88 <HAL_GetTick>
 80063d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063d6:	e009      	b.n	80063ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063d8:	f7fd fcd6 	bl	8003d88 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d902      	bls.n	80063ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	73fb      	strb	r3, [r7, #15]
          break;
 80063ea:	e005      	b.n	80063f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0ef      	beq.n	80063d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063fe:	4b06      	ldr	r3, [pc, #24]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	4904      	ldr	r1, [pc, #16]	@ (8006418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006408:	4313      	orrs	r3, r2
 800640a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40021000 	.word	0x40021000

0800641c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800642a:	4b6a      	ldr	r3, [pc, #424]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d018      	beq.n	8006468 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006436:	4b67      	ldr	r3, [pc, #412]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f003 0203 	and.w	r2, r3, #3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d10d      	bne.n	8006462 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
       ||
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800644e:	4b61      	ldr	r3, [pc, #388]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	091b      	lsrs	r3, r3, #4
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
       ||
 800645e:	429a      	cmp	r2, r3
 8006460:	d047      	beq.n	80064f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	73fb      	strb	r3, [r7, #15]
 8006466:	e044      	b.n	80064f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b03      	cmp	r3, #3
 800646e:	d018      	beq.n	80064a2 <RCCEx_PLLSAI2_Config+0x86>
 8006470:	2b03      	cmp	r3, #3
 8006472:	d825      	bhi.n	80064c0 <RCCEx_PLLSAI2_Config+0xa4>
 8006474:	2b01      	cmp	r3, #1
 8006476:	d002      	beq.n	800647e <RCCEx_PLLSAI2_Config+0x62>
 8006478:	2b02      	cmp	r3, #2
 800647a:	d009      	beq.n	8006490 <RCCEx_PLLSAI2_Config+0x74>
 800647c:	e020      	b.n	80064c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800647e:	4b55      	ldr	r3, [pc, #340]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d11d      	bne.n	80064c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800648e:	e01a      	b.n	80064c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006490:	4b50      	ldr	r3, [pc, #320]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006498:	2b00      	cmp	r3, #0
 800649a:	d116      	bne.n	80064ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064a0:	e013      	b.n	80064ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064a2:	4b4c      	ldr	r3, [pc, #304]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10f      	bne.n	80064ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064ae:	4b49      	ldr	r3, [pc, #292]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d109      	bne.n	80064ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064be:	e006      	b.n	80064ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	73fb      	strb	r3, [r7, #15]
      break;
 80064c4:	e004      	b.n	80064d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064c6:	bf00      	nop
 80064c8:	e002      	b.n	80064d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064ca:	bf00      	nop
 80064cc:	e000      	b.n	80064d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10d      	bne.n	80064f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80064d6:	4b3f      	ldr	r3, [pc, #252]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6819      	ldr	r1, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	430b      	orrs	r3, r1
 80064ec:	4939      	ldr	r1, [pc, #228]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d167      	bne.n	80065c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80064f8:	4b36      	ldr	r3, [pc, #216]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a35      	ldr	r2, [pc, #212]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006504:	f7fd fc40 	bl	8003d88 <HAL_GetTick>
 8006508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800650a:	e009      	b.n	8006520 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800650c:	f7fd fc3c 	bl	8003d88 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d902      	bls.n	8006520 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	73fb      	strb	r3, [r7, #15]
        break;
 800651e:	e005      	b.n	800652c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006520:	4b2c      	ldr	r3, [pc, #176]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1ef      	bne.n	800650c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d14a      	bne.n	80065c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d111      	bne.n	800655c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006538:	4b26      	ldr	r3, [pc, #152]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6892      	ldr	r2, [r2, #8]
 8006548:	0211      	lsls	r1, r2, #8
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	68d2      	ldr	r2, [r2, #12]
 800654e:	0912      	lsrs	r2, r2, #4
 8006550:	0452      	lsls	r2, r2, #17
 8006552:	430a      	orrs	r2, r1
 8006554:	491f      	ldr	r1, [pc, #124]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006556:	4313      	orrs	r3, r2
 8006558:	614b      	str	r3, [r1, #20]
 800655a:	e011      	b.n	8006580 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800655c:	4b1d      	ldr	r3, [pc, #116]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006564:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6892      	ldr	r2, [r2, #8]
 800656c:	0211      	lsls	r1, r2, #8
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6912      	ldr	r2, [r2, #16]
 8006572:	0852      	lsrs	r2, r2, #1
 8006574:	3a01      	subs	r2, #1
 8006576:	0652      	lsls	r2, r2, #25
 8006578:	430a      	orrs	r2, r1
 800657a:	4916      	ldr	r1, [pc, #88]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800657c:	4313      	orrs	r3, r2
 800657e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006580:	4b14      	ldr	r3, [pc, #80]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a13      	ldr	r2, [pc, #76]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800658a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658c:	f7fd fbfc 	bl	8003d88 <HAL_GetTick>
 8006590:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006592:	e009      	b.n	80065a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006594:	f7fd fbf8 	bl	8003d88 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d902      	bls.n	80065a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	73fb      	strb	r3, [r7, #15]
          break;
 80065a6:	e005      	b.n	80065b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065a8:	4b0a      	ldr	r3, [pc, #40]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0ef      	beq.n	8006594 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80065ba:	4b06      	ldr	r3, [pc, #24]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065bc:	695a      	ldr	r2, [r3, #20]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	4904      	ldr	r1, [pc, #16]	@ (80065d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	40021000 	.word	0x40021000

080065d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e095      	b.n	8006716 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d108      	bne.n	8006604 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065fa:	d009      	beq.n	8006610 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	61da      	str	r2, [r3, #28]
 8006602:	e005      	b.n	8006610 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f877 	bl	800671e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006646:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006650:	d902      	bls.n	8006658 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	e002      	b.n	800665e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800665c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006666:	d007      	beq.n	8006678 <HAL_SPI_Init+0xa0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006670:	d002      	beq.n	8006678 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ba:	ea42 0103 	orr.w	r1, r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	0c1b      	lsrs	r3, r3, #16
 80066d4:	f003 0204 	and.w	r2, r3, #4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80066f4:	ea42 0103 	orr.w	r1, r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b08a      	sub	sp, #40	@ 0x28
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	607a      	str	r2, [r7, #4]
 800673e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006740:	2301      	movs	r3, #1
 8006742:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006744:	f7fd fb20 	bl	8003d88 <HAL_GetTick>
 8006748:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006750:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006758:	887b      	ldrh	r3, [r7, #2]
 800675a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800675c:	887b      	ldrh	r3, [r7, #2]
 800675e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006760:	7ffb      	ldrb	r3, [r7, #31]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d00c      	beq.n	8006780 <HAL_SPI_TransmitReceive+0x4e>
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800676c:	d106      	bne.n	800677c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <HAL_SPI_TransmitReceive+0x4a>
 8006776:	7ffb      	ldrb	r3, [r7, #31]
 8006778:	2b04      	cmp	r3, #4
 800677a:	d001      	beq.n	8006780 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800677c:	2302      	movs	r3, #2
 800677e:	e1f3      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <HAL_SPI_TransmitReceive+0x60>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <HAL_SPI_TransmitReceive+0x60>
 800678c:	887b      	ldrh	r3, [r7, #2]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e1e8      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800679c:	2b01      	cmp	r3, #1
 800679e:	d101      	bne.n	80067a4 <HAL_SPI_TransmitReceive+0x72>
 80067a0:	2302      	movs	r3, #2
 80067a2:	e1e1      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x436>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d003      	beq.n	80067c0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2205      	movs	r2, #5
 80067bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	887a      	ldrh	r2, [r7, #2]
 80067d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	887a      	ldrh	r2, [r7, #2]
 80067d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	887a      	ldrh	r2, [r7, #2]
 80067e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	887a      	ldrh	r2, [r7, #2]
 80067ec:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006802:	d802      	bhi.n	800680a <HAL_SPI_TransmitReceive+0xd8>
 8006804:	8abb      	ldrh	r3, [r7, #20]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d908      	bls.n	800681c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006818:	605a      	str	r2, [r3, #4]
 800681a:	e007      	b.n	800682c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800682a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006836:	2b40      	cmp	r3, #64	@ 0x40
 8006838:	d007      	beq.n	800684a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006848:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006852:	f240 8083 	bls.w	800695c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <HAL_SPI_TransmitReceive+0x132>
 800685e:	8afb      	ldrh	r3, [r7, #22]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d16f      	bne.n	8006944 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006868:	881a      	ldrh	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006874:	1c9a      	adds	r2, r3, #2
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006888:	e05c      	b.n	8006944 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b02      	cmp	r3, #2
 8006896:	d11b      	bne.n	80068d0 <HAL_SPI_TransmitReceive+0x19e>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d016      	beq.n	80068d0 <HAL_SPI_TransmitReceive+0x19e>
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d113      	bne.n	80068d0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ac:	881a      	ldrh	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b8:	1c9a      	adds	r2, r3, #2
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d11c      	bne.n	8006918 <HAL_SPI_TransmitReceive+0x1e6>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d016      	beq.n	8006918 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f4:	b292      	uxth	r2, r2
 80068f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fc:	1c9a      	adds	r2, r3, #2
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006914:	2301      	movs	r3, #1
 8006916:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006918:	f7fd fa36 	bl	8003d88 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006924:	429a      	cmp	r2, r3
 8006926:	d80d      	bhi.n	8006944 <HAL_SPI_TransmitReceive+0x212>
 8006928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692e:	d009      	beq.n	8006944 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e111      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006948:	b29b      	uxth	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d19d      	bne.n	800688a <HAL_SPI_TransmitReceive+0x158>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d197      	bne.n	800688a <HAL_SPI_TransmitReceive+0x158>
 800695a:	e0e5      	b.n	8006b28 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_SPI_TransmitReceive+0x23a>
 8006964:	8afb      	ldrh	r3, [r7, #22]
 8006966:	2b01      	cmp	r3, #1
 8006968:	f040 80d1 	bne.w	8006b0e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b01      	cmp	r3, #1
 8006974:	d912      	bls.n	800699c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697a:	881a      	ldrh	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006986:	1c9a      	adds	r2, r3, #2
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006990:	b29b      	uxth	r3, r3
 8006992:	3b02      	subs	r3, #2
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800699a:	e0b8      	b.n	8006b0e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	330c      	adds	r3, #12
 80069a6:	7812      	ldrb	r2, [r2, #0]
 80069a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069c2:	e0a4      	b.n	8006b0e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d134      	bne.n	8006a3c <HAL_SPI_TransmitReceive+0x30a>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d02f      	beq.n	8006a3c <HAL_SPI_TransmitReceive+0x30a>
 80069dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d12c      	bne.n	8006a3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d912      	bls.n	8006a12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f0:	881a      	ldrh	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fc:	1c9a      	adds	r2, r3, #2
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b02      	subs	r3, #2
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a10:	e012      	b.n	8006a38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	330c      	adds	r3, #12
 8006a1c:	7812      	ldrb	r2, [r2, #0]
 8006a1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d148      	bne.n	8006adc <HAL_SPI_TransmitReceive+0x3aa>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d042      	beq.n	8006adc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d923      	bls.n	8006aaa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6c:	b292      	uxth	r2, r2
 8006a6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a74:	1c9a      	adds	r2, r3, #2
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b02      	subs	r3, #2
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d81f      	bhi.n	8006ad8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006aa6:	605a      	str	r2, [r3, #4]
 8006aa8:	e016      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f103 020c 	add.w	r2, r3, #12
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab6:	7812      	ldrb	r2, [r2, #0]
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006adc:	f7fd f954 	bl	8003d88 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d803      	bhi.n	8006af4 <HAL_SPI_TransmitReceive+0x3c2>
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	d102      	bne.n	8006afa <HAL_SPI_TransmitReceive+0x3c8>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d109      	bne.n	8006b0e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e02c      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f47f af55 	bne.w	80069c4 <HAL_SPI_TransmitReceive+0x292>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f47f af4e 	bne.w	80069c4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b28:	6a3a      	ldr	r2, [r7, #32]
 8006b2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f94b 	bl	8006dc8 <SPI_EndRxTxTransaction>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e00e      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e000      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006b66:	2300      	movs	r3, #0
  }
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3728      	adds	r7, #40	@ 0x28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b7e:	b2db      	uxtb	r3, r3
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b9c:	f7fd f8f4 	bl	8003d88 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba4:	1a9b      	subs	r3, r3, r2
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	4413      	add	r3, r2
 8006baa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bac:	f7fd f8ec 	bl	8003d88 <HAL_GetTick>
 8006bb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bb2:	4b39      	ldr	r3, [pc, #228]	@ (8006c98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	015b      	lsls	r3, r3, #5
 8006bb8:	0d1b      	lsrs	r3, r3, #20
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	fb02 f303 	mul.w	r3, r2, r3
 8006bc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bc2:	e054      	b.n	8006c6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bca:	d050      	beq.n	8006c6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bcc:	f7fd f8dc 	bl	8003d88 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d902      	bls.n	8006be2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d13d      	bne.n	8006c5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006bf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bfa:	d111      	bne.n	8006c20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c04:	d004      	beq.n	8006c10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c0e:	d107      	bne.n	8006c20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c28:	d10f      	bne.n	8006c4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e017      	b.n	8006c8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4013      	ands	r3, r2
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	bf0c      	ite	eq
 8006c7e:	2301      	moveq	r3, #1
 8006c80:	2300      	movne	r3, #0
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d19b      	bne.n	8006bc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3720      	adds	r7, #32
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000004 	.word	0x20000004

08006c9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08a      	sub	sp, #40	@ 0x28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006cae:	f7fd f86b 	bl	8003d88 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	1a9b      	subs	r3, r3, r2
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	4413      	add	r3, r2
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006cbe:	f7fd f863 	bl	8003d88 <HAL_GetTick>
 8006cc2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006ccc:	4b3d      	ldr	r3, [pc, #244]	@ (8006dc4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	00da      	lsls	r2, r3, #3
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	0d1b      	lsrs	r3, r3, #20
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cde:	fb02 f303 	mul.w	r3, r2, r3
 8006ce2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ce4:	e060      	b.n	8006da8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006cec:	d107      	bne.n	8006cfe <SPI_WaitFifoStateUntilTimeout+0x62>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d104      	bne.n	8006cfe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d04:	d050      	beq.n	8006da8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d06:	f7fd f83f 	bl	8003d88 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d902      	bls.n	8006d1c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d13d      	bne.n	8006d98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d34:	d111      	bne.n	8006d5a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d3e:	d004      	beq.n	8006d4a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d48:	d107      	bne.n	8006d5a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d62:	d10f      	bne.n	8006d84 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e010      	b.n	8006dba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	4013      	ands	r3, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d196      	bne.n	8006ce6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3728      	adds	r7, #40	@ 0x28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000004 	.word	0x20000004

08006dc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f7ff ff5b 	bl	8006c9c <SPI_WaitFifoStateUntilTimeout>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d007      	beq.n	8006dfc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006df0:	f043 0220 	orr.w	r2, r3, #32
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e027      	b.n	8006e4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2200      	movs	r2, #0
 8006e04:	2180      	movs	r1, #128	@ 0x80
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f7ff fec0 	bl	8006b8c <SPI_WaitFlagStateUntilTimeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d007      	beq.n	8006e22 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e16:	f043 0220 	orr.w	r2, r3, #32
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e014      	b.n	8006e4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff ff34 	bl	8006c9c <SPI_WaitFifoStateUntilTimeout>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d007      	beq.n	8006e4a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e3e:	f043 0220 	orr.w	r2, r3, #32
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e000      	b.n	8006e4c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e040      	b.n	8006ee8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fc f9d4 	bl	8003224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2224      	movs	r2, #36	@ 0x24
 8006e80:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0201 	bic.w	r2, r2, #1
 8006e90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fb6a 	bl	8007574 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f8af 	bl	8007004 <UART_SetConfig>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e01b      	b.n	8006ee8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ebe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689a      	ldr	r2, [r3, #8]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ece:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 0201 	orr.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fbe9 	bl	80076b8 <UART_CheckIdleState>
 8006ee6:	4603      	mov	r3, r0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08a      	sub	sp, #40	@ 0x28
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	4613      	mov	r3, r2
 8006efe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d177      	bne.n	8006ff8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <HAL_UART_Transmit+0x24>
 8006f0e:	88fb      	ldrh	r3, [r7, #6]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e070      	b.n	8006ffa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2221      	movs	r2, #33	@ 0x21
 8006f24:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f26:	f7fc ff2f 	bl	8003d88 <HAL_GetTick>
 8006f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	88fa      	ldrh	r2, [r7, #6]
 8006f30:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	88fa      	ldrh	r2, [r7, #6]
 8006f38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f44:	d108      	bne.n	8006f58 <HAL_UART_Transmit+0x68>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d104      	bne.n	8006f58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	61bb      	str	r3, [r7, #24]
 8006f56:	e003      	b.n	8006f60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f60:	e02f      	b.n	8006fc2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2180      	movs	r1, #128	@ 0x80
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 fc4b 	bl	8007808 <UART_WaitOnFlagUntilTimeout>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e03b      	b.n	8006ffa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10b      	bne.n	8006fa0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	881a      	ldrh	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f94:	b292      	uxth	r2, r2
 8006f96:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	3302      	adds	r3, #2
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	e007      	b.n	8006fb0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	781a      	ldrb	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	3301      	adds	r3, #1
 8006fae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1c9      	bne.n	8006f62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2140      	movs	r1, #64	@ 0x40
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fc15 	bl	8007808 <UART_WaitOnFlagUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e005      	b.n	8006ffa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e000      	b.n	8006ffa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006ff8:	2302      	movs	r3, #2
  }
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3720      	adds	r7, #32
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007008:	b08a      	sub	sp, #40	@ 0x28
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	431a      	orrs	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	431a      	orrs	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	4313      	orrs	r3, r2
 800702a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4ba4      	ldr	r3, [pc, #656]	@ (80072c4 <UART_SetConfig+0x2c0>)
 8007034:	4013      	ands	r3, r2
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	6812      	ldr	r2, [r2, #0]
 800703a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800703c:	430b      	orrs	r3, r1
 800703e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a99      	ldr	r2, [pc, #612]	@ (80072c8 <UART_SetConfig+0x2c4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d004      	beq.n	8007070 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800706c:	4313      	orrs	r3, r2
 800706e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007080:	430a      	orrs	r2, r1
 8007082:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a90      	ldr	r2, [pc, #576]	@ (80072cc <UART_SetConfig+0x2c8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d126      	bne.n	80070dc <UART_SetConfig+0xd8>
 800708e:	4b90      	ldr	r3, [pc, #576]	@ (80072d0 <UART_SetConfig+0x2cc>)
 8007090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	2b03      	cmp	r3, #3
 800709a:	d81b      	bhi.n	80070d4 <UART_SetConfig+0xd0>
 800709c:	a201      	add	r2, pc, #4	@ (adr r2, 80070a4 <UART_SetConfig+0xa0>)
 800709e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a2:	bf00      	nop
 80070a4:	080070b5 	.word	0x080070b5
 80070a8:	080070c5 	.word	0x080070c5
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	080070cd 	.word	0x080070cd
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ba:	e116      	b.n	80072ea <UART_SetConfig+0x2e6>
 80070bc:	2302      	movs	r3, #2
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070c2:	e112      	b.n	80072ea <UART_SetConfig+0x2e6>
 80070c4:	2304      	movs	r3, #4
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ca:	e10e      	b.n	80072ea <UART_SetConfig+0x2e6>
 80070cc:	2308      	movs	r3, #8
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070d2:	e10a      	b.n	80072ea <UART_SetConfig+0x2e6>
 80070d4:	2310      	movs	r3, #16
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070da:	e106      	b.n	80072ea <UART_SetConfig+0x2e6>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a7c      	ldr	r2, [pc, #496]	@ (80072d4 <UART_SetConfig+0x2d0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d138      	bne.n	8007158 <UART_SetConfig+0x154>
 80070e6:	4b7a      	ldr	r3, [pc, #488]	@ (80072d0 <UART_SetConfig+0x2cc>)
 80070e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ec:	f003 030c 	and.w	r3, r3, #12
 80070f0:	2b0c      	cmp	r3, #12
 80070f2:	d82d      	bhi.n	8007150 <UART_SetConfig+0x14c>
 80070f4:	a201      	add	r2, pc, #4	@ (adr r2, 80070fc <UART_SetConfig+0xf8>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007131 	.word	0x08007131
 8007100:	08007151 	.word	0x08007151
 8007104:	08007151 	.word	0x08007151
 8007108:	08007151 	.word	0x08007151
 800710c:	08007141 	.word	0x08007141
 8007110:	08007151 	.word	0x08007151
 8007114:	08007151 	.word	0x08007151
 8007118:	08007151 	.word	0x08007151
 800711c:	08007139 	.word	0x08007139
 8007120:	08007151 	.word	0x08007151
 8007124:	08007151 	.word	0x08007151
 8007128:	08007151 	.word	0x08007151
 800712c:	08007149 	.word	0x08007149
 8007130:	2300      	movs	r3, #0
 8007132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007136:	e0d8      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007138:	2302      	movs	r3, #2
 800713a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800713e:	e0d4      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007140:	2304      	movs	r3, #4
 8007142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007146:	e0d0      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007148:	2308      	movs	r3, #8
 800714a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800714e:	e0cc      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007150:	2310      	movs	r3, #16
 8007152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007156:	e0c8      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a5e      	ldr	r2, [pc, #376]	@ (80072d8 <UART_SetConfig+0x2d4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d125      	bne.n	80071ae <UART_SetConfig+0x1aa>
 8007162:	4b5b      	ldr	r3, [pc, #364]	@ (80072d0 <UART_SetConfig+0x2cc>)
 8007164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007168:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800716c:	2b30      	cmp	r3, #48	@ 0x30
 800716e:	d016      	beq.n	800719e <UART_SetConfig+0x19a>
 8007170:	2b30      	cmp	r3, #48	@ 0x30
 8007172:	d818      	bhi.n	80071a6 <UART_SetConfig+0x1a2>
 8007174:	2b20      	cmp	r3, #32
 8007176:	d00a      	beq.n	800718e <UART_SetConfig+0x18a>
 8007178:	2b20      	cmp	r3, #32
 800717a:	d814      	bhi.n	80071a6 <UART_SetConfig+0x1a2>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <UART_SetConfig+0x182>
 8007180:	2b10      	cmp	r3, #16
 8007182:	d008      	beq.n	8007196 <UART_SetConfig+0x192>
 8007184:	e00f      	b.n	80071a6 <UART_SetConfig+0x1a2>
 8007186:	2300      	movs	r3, #0
 8007188:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800718c:	e0ad      	b.n	80072ea <UART_SetConfig+0x2e6>
 800718e:	2302      	movs	r3, #2
 8007190:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007194:	e0a9      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007196:	2304      	movs	r3, #4
 8007198:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800719c:	e0a5      	b.n	80072ea <UART_SetConfig+0x2e6>
 800719e:	2308      	movs	r3, #8
 80071a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071a4:	e0a1      	b.n	80072ea <UART_SetConfig+0x2e6>
 80071a6:	2310      	movs	r3, #16
 80071a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ac:	e09d      	b.n	80072ea <UART_SetConfig+0x2e6>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a4a      	ldr	r2, [pc, #296]	@ (80072dc <UART_SetConfig+0x2d8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d125      	bne.n	8007204 <UART_SetConfig+0x200>
 80071b8:	4b45      	ldr	r3, [pc, #276]	@ (80072d0 <UART_SetConfig+0x2cc>)
 80071ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80071c4:	d016      	beq.n	80071f4 <UART_SetConfig+0x1f0>
 80071c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80071c8:	d818      	bhi.n	80071fc <UART_SetConfig+0x1f8>
 80071ca:	2b80      	cmp	r3, #128	@ 0x80
 80071cc:	d00a      	beq.n	80071e4 <UART_SetConfig+0x1e0>
 80071ce:	2b80      	cmp	r3, #128	@ 0x80
 80071d0:	d814      	bhi.n	80071fc <UART_SetConfig+0x1f8>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <UART_SetConfig+0x1d8>
 80071d6:	2b40      	cmp	r3, #64	@ 0x40
 80071d8:	d008      	beq.n	80071ec <UART_SetConfig+0x1e8>
 80071da:	e00f      	b.n	80071fc <UART_SetConfig+0x1f8>
 80071dc:	2300      	movs	r3, #0
 80071de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071e2:	e082      	b.n	80072ea <UART_SetConfig+0x2e6>
 80071e4:	2302      	movs	r3, #2
 80071e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ea:	e07e      	b.n	80072ea <UART_SetConfig+0x2e6>
 80071ec:	2304      	movs	r3, #4
 80071ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071f2:	e07a      	b.n	80072ea <UART_SetConfig+0x2e6>
 80071f4:	2308      	movs	r3, #8
 80071f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071fa:	e076      	b.n	80072ea <UART_SetConfig+0x2e6>
 80071fc:	2310      	movs	r3, #16
 80071fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007202:	e072      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a35      	ldr	r2, [pc, #212]	@ (80072e0 <UART_SetConfig+0x2dc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d12a      	bne.n	8007264 <UART_SetConfig+0x260>
 800720e:	4b30      	ldr	r3, [pc, #192]	@ (80072d0 <UART_SetConfig+0x2cc>)
 8007210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007218:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800721c:	d01a      	beq.n	8007254 <UART_SetConfig+0x250>
 800721e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007222:	d81b      	bhi.n	800725c <UART_SetConfig+0x258>
 8007224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007228:	d00c      	beq.n	8007244 <UART_SetConfig+0x240>
 800722a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800722e:	d815      	bhi.n	800725c <UART_SetConfig+0x258>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <UART_SetConfig+0x238>
 8007234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007238:	d008      	beq.n	800724c <UART_SetConfig+0x248>
 800723a:	e00f      	b.n	800725c <UART_SetConfig+0x258>
 800723c:	2300      	movs	r3, #0
 800723e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007242:	e052      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007244:	2302      	movs	r3, #2
 8007246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800724a:	e04e      	b.n	80072ea <UART_SetConfig+0x2e6>
 800724c:	2304      	movs	r3, #4
 800724e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007252:	e04a      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007254:	2308      	movs	r3, #8
 8007256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800725a:	e046      	b.n	80072ea <UART_SetConfig+0x2e6>
 800725c:	2310      	movs	r3, #16
 800725e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007262:	e042      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a17      	ldr	r2, [pc, #92]	@ (80072c8 <UART_SetConfig+0x2c4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d13a      	bne.n	80072e4 <UART_SetConfig+0x2e0>
 800726e:	4b18      	ldr	r3, [pc, #96]	@ (80072d0 <UART_SetConfig+0x2cc>)
 8007270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007274:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007278:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800727c:	d01a      	beq.n	80072b4 <UART_SetConfig+0x2b0>
 800727e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007282:	d81b      	bhi.n	80072bc <UART_SetConfig+0x2b8>
 8007284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007288:	d00c      	beq.n	80072a4 <UART_SetConfig+0x2a0>
 800728a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800728e:	d815      	bhi.n	80072bc <UART_SetConfig+0x2b8>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <UART_SetConfig+0x298>
 8007294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007298:	d008      	beq.n	80072ac <UART_SetConfig+0x2a8>
 800729a:	e00f      	b.n	80072bc <UART_SetConfig+0x2b8>
 800729c:	2300      	movs	r3, #0
 800729e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072a2:	e022      	b.n	80072ea <UART_SetConfig+0x2e6>
 80072a4:	2302      	movs	r3, #2
 80072a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072aa:	e01e      	b.n	80072ea <UART_SetConfig+0x2e6>
 80072ac:	2304      	movs	r3, #4
 80072ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072b2:	e01a      	b.n	80072ea <UART_SetConfig+0x2e6>
 80072b4:	2308      	movs	r3, #8
 80072b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ba:	e016      	b.n	80072ea <UART_SetConfig+0x2e6>
 80072bc:	2310      	movs	r3, #16
 80072be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072c2:	e012      	b.n	80072ea <UART_SetConfig+0x2e6>
 80072c4:	efff69f3 	.word	0xefff69f3
 80072c8:	40008000 	.word	0x40008000
 80072cc:	40013800 	.word	0x40013800
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40004400 	.word	0x40004400
 80072d8:	40004800 	.word	0x40004800
 80072dc:	40004c00 	.word	0x40004c00
 80072e0:	40005000 	.word	0x40005000
 80072e4:	2310      	movs	r3, #16
 80072e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a9f      	ldr	r2, [pc, #636]	@ (800756c <UART_SetConfig+0x568>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d17a      	bne.n	80073ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d824      	bhi.n	8007346 <UART_SetConfig+0x342>
 80072fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <UART_SetConfig+0x300>)
 80072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007302:	bf00      	nop
 8007304:	08007329 	.word	0x08007329
 8007308:	08007347 	.word	0x08007347
 800730c:	08007331 	.word	0x08007331
 8007310:	08007347 	.word	0x08007347
 8007314:	08007337 	.word	0x08007337
 8007318:	08007347 	.word	0x08007347
 800731c:	08007347 	.word	0x08007347
 8007320:	08007347 	.word	0x08007347
 8007324:	0800733f 	.word	0x0800733f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007328:	f7fe fbfe 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 800732c:	61f8      	str	r0, [r7, #28]
        break;
 800732e:	e010      	b.n	8007352 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007330:	4b8f      	ldr	r3, [pc, #572]	@ (8007570 <UART_SetConfig+0x56c>)
 8007332:	61fb      	str	r3, [r7, #28]
        break;
 8007334:	e00d      	b.n	8007352 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007336:	f7fe fb5f 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 800733a:	61f8      	str	r0, [r7, #28]
        break;
 800733c:	e009      	b.n	8007352 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800733e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007342:	61fb      	str	r3, [r7, #28]
        break;
 8007344:	e005      	b.n	8007352 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007350:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 80fb 	beq.w	8007550 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	4613      	mov	r3, r2
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	4413      	add	r3, r2
 8007364:	69fa      	ldr	r2, [r7, #28]
 8007366:	429a      	cmp	r2, r3
 8007368:	d305      	bcc.n	8007376 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	429a      	cmp	r2, r3
 8007374:	d903      	bls.n	800737e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800737c:	e0e8      	b.n	8007550 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	2200      	movs	r2, #0
 8007382:	461c      	mov	r4, r3
 8007384:	4615      	mov	r5, r2
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	f04f 0300 	mov.w	r3, #0
 800738e:	022b      	lsls	r3, r5, #8
 8007390:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007394:	0222      	lsls	r2, r4, #8
 8007396:	68f9      	ldr	r1, [r7, #12]
 8007398:	6849      	ldr	r1, [r1, #4]
 800739a:	0849      	lsrs	r1, r1, #1
 800739c:	2000      	movs	r0, #0
 800739e:	4688      	mov	r8, r1
 80073a0:	4681      	mov	r9, r0
 80073a2:	eb12 0a08 	adds.w	sl, r2, r8
 80073a6:	eb43 0b09 	adc.w	fp, r3, r9
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	603b      	str	r3, [r7, #0]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073b8:	4650      	mov	r0, sl
 80073ba:	4659      	mov	r1, fp
 80073bc:	f7f9 f96c 	bl	8000698 <__aeabi_uldivmod>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4613      	mov	r3, r2
 80073c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073ce:	d308      	bcc.n	80073e2 <UART_SetConfig+0x3de>
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073d6:	d204      	bcs.n	80073e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	60da      	str	r2, [r3, #12]
 80073e0:	e0b6      	b.n	8007550 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80073e8:	e0b2      	b.n	8007550 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073f2:	d15e      	bne.n	80074b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80073f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d828      	bhi.n	800744e <UART_SetConfig+0x44a>
 80073fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007404 <UART_SetConfig+0x400>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007429 	.word	0x08007429
 8007408:	08007431 	.word	0x08007431
 800740c:	08007439 	.word	0x08007439
 8007410:	0800744f 	.word	0x0800744f
 8007414:	0800743f 	.word	0x0800743f
 8007418:	0800744f 	.word	0x0800744f
 800741c:	0800744f 	.word	0x0800744f
 8007420:	0800744f 	.word	0x0800744f
 8007424:	08007447 	.word	0x08007447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007428:	f7fe fb7e 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 800742c:	61f8      	str	r0, [r7, #28]
        break;
 800742e:	e014      	b.n	800745a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007430:	f7fe fb90 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 8007434:	61f8      	str	r0, [r7, #28]
        break;
 8007436:	e010      	b.n	800745a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007438:	4b4d      	ldr	r3, [pc, #308]	@ (8007570 <UART_SetConfig+0x56c>)
 800743a:	61fb      	str	r3, [r7, #28]
        break;
 800743c:	e00d      	b.n	800745a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800743e:	f7fe fadb 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8007442:	61f8      	str	r0, [r7, #28]
        break;
 8007444:	e009      	b.n	800745a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800744a:	61fb      	str	r3, [r7, #28]
        break;
 800744c:	e005      	b.n	800745a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007458:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d077      	beq.n	8007550 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	005a      	lsls	r2, r3, #1
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	085b      	lsrs	r3, r3, #1
 800746a:	441a      	add	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	fbb2 f3f3 	udiv	r3, r2, r3
 8007474:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	2b0f      	cmp	r3, #15
 800747a:	d916      	bls.n	80074aa <UART_SetConfig+0x4a6>
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007482:	d212      	bcs.n	80074aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	b29b      	uxth	r3, r3
 8007488:	f023 030f 	bic.w	r3, r3, #15
 800748c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	085b      	lsrs	r3, r3, #1
 8007492:	b29b      	uxth	r3, r3
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	b29a      	uxth	r2, r3
 800749a:	8afb      	ldrh	r3, [r7, #22]
 800749c:	4313      	orrs	r3, r2
 800749e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	8afa      	ldrh	r2, [r7, #22]
 80074a6:	60da      	str	r2, [r3, #12]
 80074a8:	e052      	b.n	8007550 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80074b0:	e04e      	b.n	8007550 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074b6:	2b08      	cmp	r3, #8
 80074b8:	d827      	bhi.n	800750a <UART_SetConfig+0x506>
 80074ba:	a201      	add	r2, pc, #4	@ (adr r2, 80074c0 <UART_SetConfig+0x4bc>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074e5 	.word	0x080074e5
 80074c4:	080074ed 	.word	0x080074ed
 80074c8:	080074f5 	.word	0x080074f5
 80074cc:	0800750b 	.word	0x0800750b
 80074d0:	080074fb 	.word	0x080074fb
 80074d4:	0800750b 	.word	0x0800750b
 80074d8:	0800750b 	.word	0x0800750b
 80074dc:	0800750b 	.word	0x0800750b
 80074e0:	08007503 	.word	0x08007503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e4:	f7fe fb20 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 80074e8:	61f8      	str	r0, [r7, #28]
        break;
 80074ea:	e014      	b.n	8007516 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074ec:	f7fe fb32 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 80074f0:	61f8      	str	r0, [r7, #28]
        break;
 80074f2:	e010      	b.n	8007516 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007570 <UART_SetConfig+0x56c>)
 80074f6:	61fb      	str	r3, [r7, #28]
        break;
 80074f8:	e00d      	b.n	8007516 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074fa:	f7fe fa7d 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 80074fe:	61f8      	str	r0, [r7, #28]
        break;
 8007500:	e009      	b.n	8007516 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007506:	61fb      	str	r3, [r7, #28]
        break;
 8007508:	e005      	b.n	8007516 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007514:	bf00      	nop
    }

    if (pclk != 0U)
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d019      	beq.n	8007550 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	085a      	lsrs	r2, r3, #1
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	441a      	add	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	fbb2 f3f3 	udiv	r3, r2, r3
 800752e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	2b0f      	cmp	r3, #15
 8007534:	d909      	bls.n	800754a <UART_SetConfig+0x546>
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800753c:	d205      	bcs.n	800754a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60da      	str	r2, [r3, #12]
 8007548:	e002      	b.n	8007550 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800755c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007560:	4618      	mov	r0, r3
 8007562:	3728      	adds	r7, #40	@ 0x28
 8007564:	46bd      	mov	sp, r7
 8007566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800756a:	bf00      	nop
 800756c:	40008000 	.word	0x40008000
 8007570:	00f42400 	.word	0x00f42400

08007574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00a      	beq.n	800759e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00a      	beq.n	80075e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007650:	2b00      	cmp	r3, #0
 8007652:	d01a      	beq.n	800768a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007672:	d10a      	bne.n	800768a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00a      	beq.n	80076ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	430a      	orrs	r2, r1
 80076aa:	605a      	str	r2, [r3, #4]
  }
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b098      	sub	sp, #96	@ 0x60
 80076bc:	af02      	add	r7, sp, #8
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076c8:	f7fc fb5e 	bl	8003d88 <HAL_GetTick>
 80076cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0308 	and.w	r3, r3, #8
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d12e      	bne.n	800773a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e4:	2200      	movs	r2, #0
 80076e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f88c 	bl	8007808 <UART_WaitOnFlagUntilTimeout>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d021      	beq.n	800773a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fe:	e853 3f00 	ldrex	r3, [r3]
 8007702:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800770a:	653b      	str	r3, [r7, #80]	@ 0x50
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007714:	647b      	str	r3, [r7, #68]	@ 0x44
 8007716:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800771a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e6      	bne.n	80076f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e062      	b.n	8007800 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b04      	cmp	r3, #4
 8007746:	d149      	bne.n	80077dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007748:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007750:	2200      	movs	r2, #0
 8007752:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f856 	bl	8007808 <UART_WaitOnFlagUntilTimeout>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d03c      	beq.n	80077dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	623b      	str	r3, [r7, #32]
   return(result);
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007780:	633b      	str	r3, [r7, #48]	@ 0x30
 8007782:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800778e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e6      	bne.n	8007762 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3308      	adds	r3, #8
 800779a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f023 0301 	bic.w	r3, r3, #1
 80077aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077b4:	61fa      	str	r2, [r7, #28]
 80077b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	69b9      	ldr	r1, [r7, #24]
 80077ba:	69fa      	ldr	r2, [r7, #28]
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	617b      	str	r3, [r7, #20]
   return(result);
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e5      	bne.n	8007794 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e011      	b.n	8007800 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3758      	adds	r7, #88	@ 0x58
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	603b      	str	r3, [r7, #0]
 8007814:	4613      	mov	r3, r2
 8007816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007818:	e04f      	b.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007820:	d04b      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007822:	f7fc fab1 	bl	8003d88 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	429a      	cmp	r2, r3
 8007830:	d302      	bcc.n	8007838 <UART_WaitOnFlagUntilTimeout+0x30>
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e04e      	b.n	80078da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0304 	and.w	r3, r3, #4
 8007846:	2b00      	cmp	r3, #0
 8007848:	d037      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b80      	cmp	r3, #128	@ 0x80
 800784e:	d034      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b40      	cmp	r3, #64	@ 0x40
 8007854:	d031      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b08      	cmp	r3, #8
 8007862:	d110      	bne.n	8007886 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2208      	movs	r2, #8
 800786a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f838 	bl	80078e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2208      	movs	r2, #8
 8007876:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e029      	b.n	80078da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007894:	d111      	bne.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800789e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 f81e 	bl	80078e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2220      	movs	r2, #32
 80078aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e00f      	b.n	80078da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69da      	ldr	r2, [r3, #28]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4013      	ands	r3, r2
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	bf0c      	ite	eq
 80078ca:	2301      	moveq	r3, #1
 80078cc:	2300      	movne	r3, #0
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	461a      	mov	r2, r3
 80078d2:	79fb      	ldrb	r3, [r7, #7]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d0a0      	beq.n	800781a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b095      	sub	sp, #84	@ 0x54
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f2:	e853 3f00 	ldrex	r3, [r3]
 80078f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	461a      	mov	r2, r3
 8007906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007908:	643b      	str	r3, [r7, #64]	@ 0x40
 800790a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800790e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e6      	bne.n	80078ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3308      	adds	r3, #8
 8007922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	61fb      	str	r3, [r7, #28]
   return(result);
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	f023 0301 	bic.w	r3, r3, #1
 8007932:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3308      	adds	r3, #8
 800793a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800793c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800793e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e5      	bne.n	800791c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007954:	2b01      	cmp	r3, #1
 8007956:	d118      	bne.n	800798a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	60bb      	str	r3, [r7, #8]
   return(result);
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f023 0310 	bic.w	r3, r3, #16
 800796c:	647b      	str	r3, [r7, #68]	@ 0x44
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007976:	61bb      	str	r3, [r7, #24]
 8007978:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	6979      	ldr	r1, [r7, #20]
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	e841 2300 	strex	r3, r2, [r1]
 8007982:	613b      	str	r3, [r7, #16]
   return(result);
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e6      	bne.n	8007958 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2220      	movs	r2, #32
 800798e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800799e:	bf00      	nop
 80079a0:	3754      	adds	r7, #84	@ 0x54
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079aa:	b084      	sub	sp, #16
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	f107 001c 	add.w	r0, r7, #28
 80079b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fa69 	bl	8007ea0 <USB_CoreReset>
 80079ce:	4603      	mov	r3, r0
 80079d0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80079d2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d106      	bne.n	80079e8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80079e6:	e005      	b.n	80079f4 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a00:	b004      	add	sp, #16
 8007a02:	4770      	bx	lr

08007a04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f023 0201 	bic.w	r2, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a42:	78fb      	ldrb	r3, [r7, #3]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d115      	bne.n	8007a74 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007a54:	200a      	movs	r0, #10
 8007a56:	f7fc f9a3 	bl	8003da0 <HAL_Delay>
      ms += 10U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	330a      	adds	r3, #10
 8007a5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fa0f 	bl	8007e84 <USB_GetMode>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d01e      	beq.n	8007aaa <USB_SetCurrentMode+0x84>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007a70:	d9f0      	bls.n	8007a54 <USB_SetCurrentMode+0x2e>
 8007a72:	e01a      	b.n	8007aaa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a74:	78fb      	ldrb	r3, [r7, #3]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d115      	bne.n	8007aa6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007a86:	200a      	movs	r0, #10
 8007a88:	f7fc f98a 	bl	8003da0 <HAL_Delay>
      ms += 10U;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	330a      	adds	r3, #10
 8007a90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f9f6 	bl	8007e84 <USB_GetMode>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d005      	beq.n	8007aaa <USB_SetCurrentMode+0x84>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2bc7      	cmp	r3, #199	@ 0xc7
 8007aa2:	d9f0      	bls.n	8007a86 <USB_SetCurrentMode+0x60>
 8007aa4:	e001      	b.n	8007aaa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e005      	b.n	8007ab6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2bc8      	cmp	r3, #200	@ 0xc8
 8007aae:	d101      	bne.n	8007ab4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e000      	b.n	8007ab6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
	...

08007ac0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b086      	sub	sp, #24
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ada:	2300      	movs	r3, #0
 8007adc:	613b      	str	r3, [r7, #16]
 8007ade:	e009      	b.n	8007af4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	3340      	adds	r3, #64	@ 0x40
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	2200      	movs	r2, #0
 8007aec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	3301      	adds	r3, #1
 8007af2:	613b      	str	r3, [r7, #16]
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b0e      	cmp	r3, #14
 8007af8:	d9f2      	bls.n	8007ae0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007afa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d11c      	bne.n	8007b3c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b10:	f043 0302 	orr.w	r3, r3, #2
 8007b14:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e005      	b.n	8007b48 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b40:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b4e:	461a      	mov	r2, r3
 8007b50:	2300      	movs	r3, #0
 8007b52:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b54:	2103      	movs	r1, #3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f95a 	bl	8007e10 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b5c:	2110      	movs	r1, #16
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f8f6 	bl	8007d50 <USB_FlushTxFifo>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f920 	bl	8007db4 <USB_FlushRxFifo>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b84:	461a      	mov	r2, r3
 8007b86:	2300      	movs	r3, #0
 8007b88:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b90:	461a      	mov	r2, r3
 8007b92:	2300      	movs	r3, #0
 8007b94:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	613b      	str	r3, [r7, #16]
 8007ba6:	e043      	b.n	8007c30 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bbe:	d118      	bne.n	8007bf2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10a      	bne.n	8007bdc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	e013      	b.n	8007c04 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007be8:	461a      	mov	r2, r3
 8007bea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	e008      	b.n	8007c04 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bfe:	461a      	mov	r2, r3
 8007c00:	2300      	movs	r3, #0
 8007c02:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c10:	461a      	mov	r2, r3
 8007c12:	2300      	movs	r3, #0
 8007c14:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c22:	461a      	mov	r2, r3
 8007c24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	613b      	str	r3, [r7, #16]
 8007c30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c34:	461a      	mov	r2, r3
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d3b5      	bcc.n	8007ba8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	e043      	b.n	8007cca <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c58:	d118      	bne.n	8007c8c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10a      	bne.n	8007c76 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	e013      	b.n	8007c9e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c82:	461a      	mov	r2, r3
 8007c84:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007c88:	6013      	str	r3, [r2, #0]
 8007c8a:	e008      	b.n	8007c9e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c98:	461a      	mov	r2, r3
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007caa:	461a      	mov	r2, r3
 8007cac:	2300      	movs	r3, #0
 8007cae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007cc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	613b      	str	r3, [r7, #16]
 8007cca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007cce:	461a      	mov	r2, r3
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d3b5      	bcc.n	8007c42 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ce8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007cf6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	f043 0210 	orr.w	r2, r3, #16
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	699a      	ldr	r2, [r3, #24]
 8007d08:	4b10      	ldr	r3, [pc, #64]	@ (8007d4c <USB_DevInit+0x28c>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	f043 0208 	orr.w	r2, r3, #8
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d107      	bne.n	8007d3c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d34:	f043 0304 	orr.w	r3, r3, #4
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d48:	b004      	add	sp, #16
 8007d4a:	4770      	bx	lr
 8007d4c:	803c3800 	.word	0x803c3800

08007d50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3301      	adds	r3, #1
 8007d62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d6a:	d901      	bls.n	8007d70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e01b      	b.n	8007da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	daf2      	bge.n	8007d5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	019b      	lsls	r3, r3, #6
 8007d80:	f043 0220 	orr.w	r2, r3, #32
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d94:	d901      	bls.n	8007d9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e006      	b.n	8007da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f003 0320 	and.w	r3, r3, #32
 8007da2:	2b20      	cmp	r3, #32
 8007da4:	d0f0      	beq.n	8007d88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dcc:	d901      	bls.n	8007dd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e018      	b.n	8007e04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	daf2      	bge.n	8007dc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2210      	movs	r2, #16
 8007de2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3301      	adds	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007df0:	d901      	bls.n	8007df6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e006      	b.n	8007e04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f003 0310 	and.w	r3, r3, #16
 8007dfe:	2b10      	cmp	r3, #16
 8007e00:	d0f0      	beq.n	8007de4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	68f9      	ldr	r1, [r7, #12]
 8007e2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e30:	4313      	orrs	r3, r2
 8007e32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b085      	sub	sp, #20
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e5c:	f023 0303 	bic.w	r3, r3, #3
 8007e60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e70:	f043 0302 	orr.w	r3, r3, #2
 8007e74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	f003 0301 	and.w	r3, r3, #1
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007eb8:	d901      	bls.n	8007ebe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e01b      	b.n	8007ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	daf2      	bge.n	8007eac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f043 0201 	orr.w	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ee2:	d901      	bls.n	8007ee8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e006      	b.n	8007ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d0f0      	beq.n	8007ed6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b08c      	sub	sp, #48	@ 0x30
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	603b      	str	r3, [r7, #0]
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	71fb      	strb	r3, [r7, #7]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	71bb      	strb	r3, [r7, #6]
 8007f12:	4613      	mov	r3, r2
 8007f14:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8007f1a:	79bb      	ldrb	r3, [r7, #6]
 8007f1c:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8007f1e:	797b      	ldrb	r3, [r7, #5]
 8007f20:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007f22:	f107 030c 	add.w	r3, r7, #12
 8007f26:	2207      	movs	r2, #7
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f002 feb0 	bl	800ac90 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007f30:	f107 0318 	add.w	r3, r7, #24
 8007f34:	2218      	movs	r2, #24
 8007f36:	2100      	movs	r1, #0
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f002 fea9 	bl	800ac90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007f3e:	233f      	movs	r3, #63	@ 0x3f
 8007f40:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8007f42:	238a      	movs	r3, #138	@ 0x8a
 8007f44:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8007f46:	f107 0314 	add.w	r3, r7, #20
 8007f4a:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8007f50:	f107 030c 	add.w	r3, r7, #12
 8007f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8007f56:	2307      	movs	r3, #7
 8007f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007f5a:	f107 0318 	add.w	r3, r7, #24
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fef7 	bl	8008d54 <hci_send_req>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	da01      	bge.n	8007f70 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8007f6c:	23ff      	movs	r3, #255	@ 0xff
 8007f6e:	e014      	b.n	8007f9a <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8007f70:	7b3b      	ldrb	r3, [r7, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8007f76:	7b3b      	ldrb	r3, [r7, #12]
 8007f78:	e00f      	b.n	8007f9a <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8007f7a:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007f84:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007f8e:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f96:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3730      	adds	r7, #48	@ 0x30
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b08e      	sub	sp, #56	@ 0x38
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	603b      	str	r3, [r7, #0]
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007fb6:	f107 0314 	add.w	r3, r7, #20
 8007fba:	2207      	movs	r2, #7
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f002 fe66 	bl	800ac90 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007fc4:	f107 0320 	add.w	r3, r7, #32
 8007fc8:	2218      	movs	r2, #24
 8007fca:	2100      	movs	r1, #0
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f002 fe5f 	bl	800ac90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007fd2:	233f      	movs	r3, #63	@ 0x3f
 8007fd4:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8007fd6:	238a      	movs	r3, #138	@ 0x8a
 8007fd8:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 8007fda:	f107 031c 	add.w	r3, r7, #28
 8007fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8007fe4:	f107 0314 	add.w	r3, r7, #20
 8007fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8007fea:	2307      	movs	r3, #7
 8007fec:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007fee:	f107 0320 	add.w	r3, r7, #32
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 fead 	bl	8008d54 <hci_send_req>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	da01      	bge.n	8008004 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8008000:	23ff      	movs	r3, #255	@ 0xff
 8008002:	e014      	b.n	800802e <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8008004:	7d3b      	ldrb	r3, [r7, #20]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800800a:	7d3b      	ldrb	r3, [r7, #20]
 800800c:	e00f      	b.n	800802e <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800800e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8008012:	b29a      	uxth	r2, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008018:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 800801c:	b29a      	uxth	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008022:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008026:	b29a      	uxth	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3738      	adds	r7, #56	@ 0x38
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8008036:	b590      	push	{r4, r7, lr}
 8008038:	b095      	sub	sp, #84	@ 0x54
 800803a:	af00      	add	r7, sp, #0
 800803c:	4604      	mov	r4, r0
 800803e:	4608      	mov	r0, r1
 8008040:	4611      	mov	r1, r2
 8008042:	461a      	mov	r2, r3
 8008044:	4623      	mov	r3, r4
 8008046:	71fb      	strb	r3, [r7, #7]
 8008048:	4603      	mov	r3, r0
 800804a:	80bb      	strh	r3, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	807b      	strh	r3, [r7, #2]
 8008050:	4613      	mov	r3, r2
 8008052:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800805a:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800805e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8008062:	4413      	add	r3, r2
 8008064:	330e      	adds	r3, #14
 8008066:	2b28      	cmp	r3, #40	@ 0x28
 8008068:	d901      	bls.n	800806e <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800806a:	2342      	movs	r3, #66	@ 0x42
 800806c:	e0c9      	b.n	8008202 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 800806e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008072:	3350      	adds	r3, #80	@ 0x50
 8008074:	443b      	add	r3, r7
 8008076:	79fa      	ldrb	r2, [r7, #7]
 8008078:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800807c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008080:	3301      	adds	r3, #1
 8008082:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8008086:	88bb      	ldrh	r3, [r7, #4]
 8008088:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800808a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800808e:	f107 0208 	add.w	r2, r7, #8
 8008092:	4413      	add	r3, r2
 8008094:	88ba      	ldrh	r2, [r7, #4]
 8008096:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008098:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800809c:	3302      	adds	r3, #2
 800809e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80080a2:	887b      	ldrh	r3, [r7, #2]
 80080a4:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80080a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80080aa:	f107 0208 	add.w	r2, r7, #8
 80080ae:	4413      	add	r3, r2
 80080b0:	887a      	ldrh	r2, [r7, #2]
 80080b2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80080b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80080b8:	3302      	adds	r3, #2
 80080ba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 80080be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80080c2:	3350      	adds	r3, #80	@ 0x50
 80080c4:	443b      	add	r3, r7
 80080c6:	79ba      	ldrb	r2, [r7, #6]
 80080c8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80080cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80080d0:	3301      	adds	r3, #1
 80080d2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80080d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80080da:	3350      	adds	r3, #80	@ 0x50
 80080dc:	443b      	add	r3, r7
 80080de:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80080e2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80080e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80080ea:	3301      	adds	r3, #1
 80080ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 80080f0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80080f4:	3350      	adds	r3, #80	@ 0x50
 80080f6:	443b      	add	r3, r7
 80080f8:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80080fc:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008100:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008104:	3301      	adds	r3, #1
 8008106:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800810a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800810e:	f107 0208 	add.w	r2, r7, #8
 8008112:	4413      	add	r3, r2
 8008114:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8008118:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800811a:	4618      	mov	r0, r3
 800811c:	f002 fe33 	bl	800ad86 <memcpy>
  indx +=  LocalNameLen;
 8008120:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008124:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8008128:	4413      	add	r3, r2
 800812a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800812e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008132:	3350      	adds	r3, #80	@ 0x50
 8008134:	443b      	add	r3, r7
 8008136:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800813a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800813e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008142:	3301      	adds	r3, #1
 8008144:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8008148:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800814c:	f107 0208 	add.w	r2, r7, #8
 8008150:	4413      	add	r3, r2
 8008152:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8008156:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008158:	4618      	mov	r0, r3
 800815a:	f002 fe14 	bl	800ad86 <memcpy>
  indx +=  ServiceUUIDLen;  
 800815e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008162:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8008166:	4413      	add	r3, r2
 8008168:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800816c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8008170:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8008174:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008178:	f107 0208 	add.w	r2, r7, #8
 800817c:	4413      	add	r3, r2
 800817e:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8008182:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008184:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008188:	3302      	adds	r3, #2
 800818a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800818e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8008192:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8008196:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800819a:	f107 0208 	add.w	r2, r7, #8
 800819e:	4413      	add	r3, r2
 80081a0:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80081a4:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80081a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80081aa:	3302      	adds	r3, #2
 80081ac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80081b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80081b4:	2218      	movs	r2, #24
 80081b6:	2100      	movs	r1, #0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f002 fd69 	bl	800ac90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80081be:	233f      	movs	r3, #63	@ 0x3f
 80081c0:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80081c2:	2383      	movs	r3, #131	@ 0x83
 80081c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 80081c6:	f107 0308 	add.w	r3, r7, #8
 80081ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 80081cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80081d0:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 80081d2:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80081d6:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 80081d8:	2301      	movs	r3, #1
 80081da:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 80081dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80081e0:	2100      	movs	r1, #0
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fdb6 	bl	8008d54 <hci_send_req>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	da01      	bge.n	80081f2 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 80081ee:	23ff      	movs	r3, #255	@ 0xff
 80081f0:	e007      	b.n	8008202 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 80081f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <aci_gap_set_discoverable+0x1ca>
    return status;
 80081fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80081fe:	e000      	b.n	8008202 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3754      	adds	r7, #84	@ 0x54
 8008206:	46bd      	mov	sp, r7
 8008208:	bd90      	pop	{r4, r7, pc}

0800820a <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800820a:	b590      	push	{r4, r7, lr}
 800820c:	b091      	sub	sp, #68	@ 0x44
 800820e:	af00      	add	r7, sp, #0
 8008210:	603a      	str	r2, [r7, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	4603      	mov	r3, r0
 8008216:	71fb      	strb	r3, [r7, #7]
 8008218:	460b      	mov	r3, r1
 800821a:	71bb      	strb	r3, [r7, #6]
 800821c:	4613      	mov	r3, r2
 800821e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8008220:	79fb      	ldrb	r3, [r7, #7]
 8008222:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8008224:	79bb      	ldrb	r3, [r7, #6]
 8008226:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8008228:	79bb      	ldrb	r3, [r7, #6]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00a      	beq.n	8008244 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	f107 030e 	add.w	r3, r7, #14
 8008234:	6814      	ldr	r4, [r2, #0]
 8008236:	6850      	ldr	r0, [r2, #4]
 8008238:	6891      	ldr	r1, [r2, #8]
 800823a:	68d2      	ldr	r2, [r2, #12]
 800823c:	601c      	str	r4, [r3, #0]
 800823e:	6058      	str	r0, [r3, #4]
 8008240:	6099      	str	r1, [r3, #8]
 8008242:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8008244:	797b      	ldrb	r3, [r7, #5]
 8008246:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8008248:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800824c:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800824e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008252:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8008256:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008258:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 800825c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8008260:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008264:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008268:	2218      	movs	r2, #24
 800826a:	2100      	movs	r1, #0
 800826c:	4618      	mov	r0, r3
 800826e:	f002 fd0f 	bl	800ac90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008272:	233f      	movs	r3, #63	@ 0x3f
 8008274:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8008276:	2386      	movs	r3, #134	@ 0x86
 8008278:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 800827a:	f107 030c 	add.w	r3, r7, #12
 800827e:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8008280:	231a      	movs	r3, #26
 8008282:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8008284:	f107 030b 	add.w	r3, r7, #11
 8008288:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 800828a:	2301      	movs	r3, #1
 800828c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800828e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008292:	2100      	movs	r1, #0
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fd5d 	bl	8008d54 <hci_send_req>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	da01      	bge.n	80082a4 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80082a0:	23ff      	movs	r3, #255	@ 0xff
 80082a2:	e005      	b.n	80082b0 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80082a4:	7afb      	ldrb	r3, [r7, #11]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <aci_gap_set_auth_requirement+0xa4>
    return status;
 80082aa:	7afb      	ldrb	r3, [r7, #11]
 80082ac:	e000      	b.n	80082b0 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3744      	adds	r7, #68	@ 0x44
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd90      	pop	{r4, r7, pc}

080082b8 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b092      	sub	sp, #72	@ 0x48
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 80082ca:	79fb      	ldrb	r3, [r7, #7]
 80082cc:	2b1f      	cmp	r3, #31
 80082ce:	d901      	bls.n	80082d4 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 80082d0:	2342      	movs	r3, #66	@ 0x42
 80082d2:	e03e      	b.n	8008352 <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 80082d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80082d8:	3348      	adds	r3, #72	@ 0x48
 80082da:	443b      	add	r3, r7
 80082dc:	79fa      	ldrb	r2, [r7, #7]
 80082de:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 80082e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80082e6:	3301      	adds	r3, #1
 80082e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 80082ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80082f0:	f107 0208 	add.w	r2, r7, #8
 80082f4:	4413      	add	r3, r2
 80082f6:	79fa      	ldrb	r2, [r7, #7]
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f002 fd43 	bl	800ad86 <memcpy>
  indx +=  AdvLen;
 8008300:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	4413      	add	r3, r2
 8008308:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800830c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008310:	2218      	movs	r2, #24
 8008312:	2100      	movs	r1, #0
 8008314:	4618      	mov	r0, r3
 8008316:	f002 fcbb 	bl	800ac90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800831a:	233f      	movs	r3, #63	@ 0x3f
 800831c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800831e:	238e      	movs	r3, #142	@ 0x8e
 8008320:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8008322:	f107 0308 	add.w	r3, r7, #8
 8008326:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8008328:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800832c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 800832e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008332:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 8008334:	2301      	movs	r3, #1
 8008336:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8008338:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800833c:	2100      	movs	r1, #0
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fd08 	bl	8008d54 <hci_send_req>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	da01      	bge.n	800834e <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 800834a:	23ff      	movs	r3, #255	@ 0xff
 800834c:	e001      	b.n	8008352 <aci_gap_update_adv_data+0x9a>
    
  return status;
 800834e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008352:	4618      	mov	r0, r3
 8008354:	3748      	adds	r7, #72	@ 0x48
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b088      	sub	sp, #32
 800835e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008360:	f107 0308 	add.w	r3, r7, #8
 8008364:	2218      	movs	r2, #24
 8008366:	2100      	movs	r1, #0
 8008368:	4618      	mov	r0, r3
 800836a:	f002 fc91 	bl	800ac90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800836e:	233f      	movs	r3, #63	@ 0x3f
 8008370:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8008372:	f240 1301 	movw	r3, #257	@ 0x101
 8008376:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008378:	1dfb      	adds	r3, r7, #7
 800837a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800837c:	2301      	movs	r3, #1
 800837e:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8008380:	f107 0308 	add.w	r3, r7, #8
 8008384:	2100      	movs	r1, #0
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fce4 	bl	8008d54 <hci_send_req>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	da01      	bge.n	8008396 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8008392:	23ff      	movs	r3, #255	@ 0xff
 8008394:	e000      	b.n	8008398 <aci_gatt_init+0x3e>

  return status;
 8008396:	79fb      	ldrb	r3, [r7, #7]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3720      	adds	r7, #32
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b090      	sub	sp, #64	@ 0x40
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6039      	str	r1, [r7, #0]
 80083a8:	4611      	mov	r1, r2
 80083aa:	461a      	mov	r2, r3
 80083ac:	4603      	mov	r3, r0
 80083ae:	71fb      	strb	r3, [r7, #7]
 80083b0:	460b      	mov	r3, r1
 80083b2:	71bb      	strb	r3, [r7, #6]
 80083b4:	4613      	mov	r3, r2
 80083b6:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 80083be:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80083c2:	3340      	adds	r3, #64	@ 0x40
 80083c4:	443b      	add	r3, r7
 80083c6:	79fa      	ldrb	r2, [r7, #7]
 80083c8:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80083cc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80083d0:	3301      	adds	r3, #1
 80083d2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d103      	bne.n	80083e4 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 80083dc:	2302      	movs	r3, #2
 80083de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80083e2:	e002      	b.n	80083ea <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 80083e4:	2310      	movs	r3, #16
 80083e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80083ea:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80083ee:	f107 020c 	add.w	r2, r7, #12
 80083f2:	4413      	add	r3, r2
 80083f4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f002 fcc3 	bl	800ad86 <memcpy>
  indx +=  uuid_len;
 8008400:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8008404:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008408:	4413      	add	r3, r2
 800840a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 800840e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008412:	3340      	adds	r3, #64	@ 0x40
 8008414:	443b      	add	r3, r7
 8008416:	79ba      	ldrb	r2, [r7, #6]
 8008418:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800841c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008420:	3301      	adds	r3, #1
 8008422:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 8008426:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800842a:	3340      	adds	r3, #64	@ 0x40
 800842c:	443b      	add	r3, r7
 800842e:	797a      	ldrb	r2, [r7, #5]
 8008430:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008434:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008438:	3301      	adds	r3, #1
 800843a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800843e:	f107 0320 	add.w	r3, r7, #32
 8008442:	2203      	movs	r2, #3
 8008444:	2100      	movs	r1, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f002 fc22 	bl	800ac90 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800844c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008450:	2218      	movs	r2, #24
 8008452:	2100      	movs	r1, #0
 8008454:	4618      	mov	r0, r3
 8008456:	f002 fc1b 	bl	800ac90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800845a:	233f      	movs	r3, #63	@ 0x3f
 800845c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800845e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8008462:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 8008464:	f107 030c 	add.w	r3, r7, #12
 8008468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 800846a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800846e:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 8008470:	f107 0320 	add.w	r3, r7, #32
 8008474:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8008476:	2303      	movs	r3, #3
 8008478:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800847a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800847e:	2100      	movs	r1, #0
 8008480:	4618      	mov	r0, r3
 8008482:	f000 fc67 	bl	8008d54 <hci_send_req>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	da01      	bge.n	8008490 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 800848c:	23ff      	movs	r3, #255	@ 0xff
 800848e:	e00c      	b.n	80084aa <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8008490:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <aci_gatt_add_serv+0xfe>
    return resp.status;
 8008498:	f897 3020 	ldrb.w	r3, [r7, #32]
 800849c:	e005      	b.n	80084aa <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 800849e:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084a6:	801a      	strh	r2, [r3, #0]

  return 0;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3740      	adds	r7, #64	@ 0x40
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b092      	sub	sp, #72	@ 0x48
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	603a      	str	r2, [r7, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	4603      	mov	r3, r0
 80084be:	80fb      	strh	r3, [r7, #6]
 80084c0:	460b      	mov	r3, r1
 80084c2:	717b      	strb	r3, [r7, #5]
 80084c4:	4613      	mov	r3, r2
 80084c6:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 80084ce:	88fb      	ldrh	r3, [r7, #6]
 80084d0:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80084d2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80084d6:	f107 020c 	add.w	r2, r7, #12
 80084da:	4413      	add	r3, r2
 80084dc:	88fa      	ldrh	r2, [r7, #6]
 80084de:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80084e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80084e4:	3302      	adds	r3, #2
 80084e6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 80084ea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80084ee:	3348      	adds	r3, #72	@ 0x48
 80084f0:	443b      	add	r3, r7
 80084f2:	797a      	ldrb	r2, [r7, #5]
 80084f4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80084f8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80084fc:	3301      	adds	r3, #1
 80084fe:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8008502:	797b      	ldrb	r3, [r7, #5]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d103      	bne.n	8008510 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8008508:	2302      	movs	r3, #2
 800850a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800850e:	e002      	b.n	8008516 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8008510:	2310      	movs	r3, #16
 8008512:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8008516:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800851a:	f107 020c 	add.w	r2, r7, #12
 800851e:	4413      	add	r3, r2
 8008520:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f002 fc2d 	bl	800ad86 <memcpy>
  indx +=  uuid_len;
 800852c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008530:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008534:	4413      	add	r3, r2
 8008536:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 800853a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800853e:	3348      	adds	r3, #72	@ 0x48
 8008540:	443b      	add	r3, r7
 8008542:	793a      	ldrb	r2, [r7, #4]
 8008544:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008548:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800854c:	3301      	adds	r3, #1
 800854e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 8008552:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008556:	3348      	adds	r3, #72	@ 0x48
 8008558:	443b      	add	r3, r7
 800855a:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800855e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008562:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008566:	3301      	adds	r3, #1
 8008568:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 800856c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008570:	3348      	adds	r3, #72	@ 0x48
 8008572:	443b      	add	r3, r7
 8008574:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8008578:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800857c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008580:	3301      	adds	r3, #1
 8008582:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8008586:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800858a:	3348      	adds	r3, #72	@ 0x48
 800858c:	443b      	add	r3, r7
 800858e:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8008592:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008596:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800859a:	3301      	adds	r3, #1
 800859c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 80085a0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085a4:	3348      	adds	r3, #72	@ 0x48
 80085a6:	443b      	add	r3, r7
 80085a8:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80085ac:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80085b0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085b4:	3301      	adds	r3, #1
 80085b6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 80085ba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085be:	3348      	adds	r3, #72	@ 0x48
 80085c0:	443b      	add	r3, r7
 80085c2:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80085c6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80085ca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085ce:	3301      	adds	r3, #1
 80085d0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80085d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80085d8:	2203      	movs	r2, #3
 80085da:	2100      	movs	r1, #0
 80085dc:	4618      	mov	r0, r3
 80085de:	f002 fb57 	bl	800ac90 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80085e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80085e6:	2218      	movs	r2, #24
 80085e8:	2100      	movs	r1, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f002 fb50 	bl	800ac90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80085f0:	233f      	movs	r3, #63	@ 0x3f
 80085f2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 80085f4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80085f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 80085fa:	f107 030c 	add.w	r3, r7, #12
 80085fe:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8008600:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008604:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8008606:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800860a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800860c:	2303      	movs	r3, #3
 800860e:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8008610:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008614:	2100      	movs	r1, #0
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fb9c 	bl	8008d54 <hci_send_req>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	da01      	bge.n	8008626 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8008622:	23ff      	movs	r3, #255	@ 0xff
 8008624:	e00c      	b.n	8008640 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8008626:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <aci_gatt_add_char+0x182>
    return resp.status;
 800862e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008632:	e005      	b.n	8008640 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8008634:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8008638:	b29a      	uxth	r2, r3
 800863a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800863c:	801a      	strh	r2, [r3, #0]

  return 0;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3748      	adds	r7, #72	@ 0x48
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8008648:	b590      	push	{r4, r7, lr}
 800864a:	b0ab      	sub	sp, #172	@ 0xac
 800864c:	af00      	add	r7, sp, #0
 800864e:	4604      	mov	r4, r0
 8008650:	4608      	mov	r0, r1
 8008652:	4611      	mov	r1, r2
 8008654:	461a      	mov	r2, r3
 8008656:	4623      	mov	r3, r4
 8008658:	80fb      	strh	r3, [r7, #6]
 800865a:	4603      	mov	r3, r0
 800865c:	80bb      	strh	r3, [r7, #4]
 800865e:	460b      	mov	r3, r1
 8008660:	70fb      	strb	r3, [r7, #3]
 8008662:	4613      	mov	r3, r2
 8008664:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800866c:	78bb      	ldrb	r3, [r7, #2]
 800866e:	2b7a      	cmp	r3, #122	@ 0x7a
 8008670:	d901      	bls.n	8008676 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8008672:	2342      	movs	r3, #66	@ 0x42
 8008674:	e074      	b.n	8008760 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8008676:	88fb      	ldrh	r3, [r7, #6]
 8008678:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800867a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800867e:	f107 0208 	add.w	r2, r7, #8
 8008682:	4413      	add	r3, r2
 8008684:	88fa      	ldrh	r2, [r7, #6]
 8008686:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008688:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800868c:	3302      	adds	r3, #2
 800868e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8008692:	88bb      	ldrh	r3, [r7, #4]
 8008694:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8008696:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800869a:	f107 0208 	add.w	r2, r7, #8
 800869e:	4413      	add	r3, r2
 80086a0:	88ba      	ldrh	r2, [r7, #4]
 80086a2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80086a4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80086a8:	3302      	adds	r3, #2
 80086aa:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 80086ae:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80086b2:	33a8      	adds	r3, #168	@ 0xa8
 80086b4:	443b      	add	r3, r7
 80086b6:	78fa      	ldrb	r2, [r7, #3]
 80086b8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80086bc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80086c0:	3301      	adds	r3, #1
 80086c2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 80086c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80086ca:	33a8      	adds	r3, #168	@ 0xa8
 80086cc:	443b      	add	r3, r7
 80086ce:	78ba      	ldrb	r2, [r7, #2]
 80086d0:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80086d4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80086d8:	3301      	adds	r3, #1
 80086da:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80086de:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80086e2:	f107 0208 	add.w	r2, r7, #8
 80086e6:	4413      	add	r3, r2
 80086e8:	78ba      	ldrb	r2, [r7, #2]
 80086ea:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80086ee:	4618      	mov	r0, r3
 80086f0:	f002 fb49 	bl	800ad86 <memcpy>
  indx +=  charValueLen;
 80086f4:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 80086f8:	78bb      	ldrb	r3, [r7, #2]
 80086fa:	4413      	add	r3, r2
 80086fc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008700:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008704:	2218      	movs	r2, #24
 8008706:	2100      	movs	r1, #0
 8008708:	4618      	mov	r0, r3
 800870a:	f002 fac1 	bl	800ac90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800870e:	233f      	movs	r3, #63	@ 0x3f
 8008710:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008714:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008718:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 800871c:	f107 0308 	add.w	r3, r7, #8
 8008720:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8008724:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 800872c:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8008730:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8008734:	2301      	movs	r3, #1
 8008736:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800873a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800873e:	2100      	movs	r1, #0
 8008740:	4618      	mov	r0, r3
 8008742:	f000 fb07 	bl	8008d54 <hci_send_req>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	da01      	bge.n	8008750 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 800874c:	23ff      	movs	r3, #255	@ 0xff
 800874e:	e007      	b.n	8008760 <aci_gatt_update_char_value+0x118>

  if (status) {
 8008750:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <aci_gatt_update_char_value+0x116>
    return status;
 8008758:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800875c:	e000      	b.n	8008760 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	37ac      	adds	r7, #172	@ 0xac
 8008764:	46bd      	mov	sp, r7
 8008766:	bd90      	pop	{r4, r7, pc}

08008768 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08a      	sub	sp, #40	@ 0x28
 800876c:	af00      	add	r7, sp, #0
 800876e:	4603      	mov	r3, r0
 8008770:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8008772:	88fb      	ldrh	r3, [r7, #6]
 8008774:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8008776:	f107 0310 	add.w	r3, r7, #16
 800877a:	2218      	movs	r2, #24
 800877c:	2100      	movs	r1, #0
 800877e:	4618      	mov	r0, r3
 8008780:	f002 fa86 	bl	800ac90 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8008784:	233f      	movs	r3, #63	@ 0x3f
 8008786:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8008788:	f240 1327 	movw	r3, #295	@ 0x127
 800878c:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800878e:	f107 030c 	add.w	r3, r7, #12
 8008792:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8008794:	2302      	movs	r3, #2
 8008796:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8008798:	f107 030b 	add.w	r3, r7, #11
 800879c:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800879e:	2301      	movs	r3, #1
 80087a0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 80087a2:	f107 0310 	add.w	r3, r7, #16
 80087a6:	2100      	movs	r1, #0
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 fad3 	bl	8008d54 <hci_send_req>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	da01      	bge.n	80087b8 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 80087b4:	23ff      	movs	r3, #255	@ 0xff
 80087b6:	e000      	b.n	80087ba <aci_gatt_allow_read+0x52>

    return status;
 80087b8:	7afb      	ldrb	r3, [r7, #11]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3728      	adds	r7, #40	@ 0x28
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <aci_gatt_read_handle_value>:

  return status;
}

tBleStatus aci_gatt_read_handle_value(uint16_t attr_handle, uint16_t data_len, uint16_t *data_len_out_p, uint8_t *data)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b0ac      	sub	sp, #176	@ 0xb0
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60ba      	str	r2, [r7, #8]
 80087ca:	607b      	str	r3, [r7, #4]
 80087cc:	4603      	mov	r3, r0
 80087ce:	81fb      	strh	r3, [r7, #14]
 80087d0:	460b      	mov	r3, r1
 80087d2:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  gatt_read_handle_val_cp cp;
  gatt_read_handle_val_rp rp;
 
  if(data_len > sizeof(rp.value))
 80087d4:	89bb      	ldrh	r3, [r7, #12]
 80087d6:	2b7d      	cmp	r3, #125	@ 0x7d
 80087d8:	d901      	bls.n	80087de <aci_gatt_read_handle_value+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 80087da:	2342      	movs	r3, #66	@ 0x42
 80087dc:	e043      	b.n	8008866 <aci_gatt_read_handle_value+0xa4>

  cp.attr_handle = htobs(attr_handle);
 80087de:	89fb      	ldrh	r3, [r7, #14]
 80087e0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80087e4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80087e8:	2218      	movs	r2, #24
 80087ea:	2100      	movs	r1, #0
 80087ec:	4618      	mov	r0, r3
 80087ee:	f002 fa4f 	bl	800ac90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80087f2:	233f      	movs	r3, #63	@ 0x3f
 80087f4:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_GATT_READ_HANDLE_VALUE;
 80087f8:	f44f 7395 	mov.w	r3, #298	@ 0x12a
 80087fc:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8008800:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8008804:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8008808:	2302      	movs	r3, #2
 800880a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 800880e:	f107 0314 	add.w	r3, r7, #20
 8008812:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8008816:	2380      	movs	r3, #128	@ 0x80
 8008818:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  if (hci_send_req(&rq, FALSE) < 0)
 800881c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008820:	2100      	movs	r1, #0
 8008822:	4618      	mov	r0, r3
 8008824:	f000 fa96 	bl	8008d54 <hci_send_req>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	da01      	bge.n	8008832 <aci_gatt_read_handle_value+0x70>
    return BLE_STATUS_TIMEOUT;
 800882e:	23ff      	movs	r3, #255	@ 0xff
 8008830:	e019      	b.n	8008866 <aci_gatt_read_handle_value+0xa4>
  
  if(rp.status)
 8008832:	7d3b      	ldrb	r3, [r7, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <aci_gatt_read_handle_value+0x7a>
    return rp.status;
 8008838:	7d3b      	ldrb	r3, [r7, #20]
 800883a:	e014      	b.n	8008866 <aci_gatt_read_handle_value+0xa4>

  *data_len_out_p = btohs(rp.value_len);
 800883c:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8008840:	b29a      	uxth	r2, r3
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	801a      	strh	r2, [r3, #0]

  BLUENRG_memcpy(data, rp.value, MIN(data_len, *data_len_out_p));
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	89ba      	ldrh	r2, [r7, #12]
 800884c:	4293      	cmp	r3, r2
 800884e:	bf28      	it	cs
 8008850:	4613      	movcs	r3, r2
 8008852:	b29b      	uxth	r3, r3
 8008854:	461a      	mov	r2, r3
 8008856:	f107 0314 	add.w	r3, r7, #20
 800885a:	3303      	adds	r3, #3
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f002 fa91 	bl	800ad86 <memcpy>

  return 0;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	37b0      	adds	r7, #176	@ 0xb0
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b0ac      	sub	sp, #176	@ 0xb0
 8008872:	af00      	add	r7, sp, #0
 8008874:	60ba      	str	r2, [r7, #8]
 8008876:	607b      	str	r3, [r7, #4]
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]
 800887c:	460b      	mov	r3, r1
 800887e:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008886:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800888a:	2218      	movs	r2, #24
 800888c:	2100      	movs	r1, #0
 800888e:	4618      	mov	r0, r3
 8008890:	f002 f9fe 	bl	800ac90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008894:	233f      	movs	r3, #63	@ 0x3f
 8008896:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800889a:	230d      	movs	r3, #13
 800889c:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 80088a0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80088a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 80088a8:	2301      	movs	r3, #1
 80088aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 80088ae:	f107 0314 	add.w	r3, r7, #20
 80088b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 80088b6:	2380      	movs	r3, #128	@ 0x80
 80088b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 80088bc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fa46 	bl	8008d54 <hci_send_req>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	da01      	bge.n	80088d2 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 80088ce:	23ff      	movs	r3, #255	@ 0xff
 80088d0:	e01e      	b.n	8008910 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 80088d2:	7d3b      	ldrb	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <aci_hal_read_config_data+0x6e>
    return rp.status;
 80088d8:	7d3b      	ldrb	r3, [r7, #20]
 80088da:	e019      	b.n	8008910 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 80088dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	3b01      	subs	r3, #1
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	89bb      	ldrh	r3, [r7, #12]
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d201      	bcs.n	80088fa <aci_hal_read_config_data+0x8c>
 80088f6:	89ba      	ldrh	r2, [r7, #12]
 80088f8:	e002      	b.n	8008900 <aci_hal_read_config_data+0x92>
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	f107 0314 	add.w	r3, r7, #20
 8008904:	3301      	adds	r3, #1
 8008906:	4619      	mov	r1, r3
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f002 fa3c 	bl	800ad86 <memcpy>
  
  return 0;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	37b0      	adds	r7, #176	@ 0xb0
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	@ 0x28
 800891c:	af00      	add	r7, sp, #0
 800891e:	4603      	mov	r3, r0
 8008920:	460a      	mov	r2, r1
 8008922:	71fb      	strb	r3, [r7, #7]
 8008924:	4613      	mov	r3, r2
 8008926:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8008928:	79fb      	ldrb	r3, [r7, #7]
 800892a:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800892c:	79bb      	ldrb	r3, [r7, #6]
 800892e:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008930:	f107 0310 	add.w	r3, r7, #16
 8008934:	2218      	movs	r2, #24
 8008936:	2100      	movs	r1, #0
 8008938:	4618      	mov	r0, r3
 800893a:	f002 f9a9 	bl	800ac90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800893e:	233f      	movs	r3, #63	@ 0x3f
 8008940:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8008942:	230f      	movs	r3, #15
 8008944:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8008946:	f107 030c 	add.w	r3, r7, #12
 800894a:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800894c:	2302      	movs	r3, #2
 800894e:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8008950:	f107 030b 	add.w	r3, r7, #11
 8008954:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8008956:	2301      	movs	r3, #1
 8008958:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800895a:	f107 0310 	add.w	r3, r7, #16
 800895e:	2100      	movs	r1, #0
 8008960:	4618      	mov	r0, r3
 8008962:	f000 f9f7 	bl	8008d54 <hci_send_req>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	da01      	bge.n	8008970 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800896c:	23ff      	movs	r3, #255	@ 0xff
 800896e:	e000      	b.n	8008972 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8008970:	7afb      	ldrb	r3, [r7, #11]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3728      	adds	r7, #40	@ 0x28
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800897a:	b590      	push	{r4, r7, lr}
 800897c:	b089      	sub	sp, #36	@ 0x24
 800897e:	af02      	add	r7, sp, #8
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008984:	f107 0410 	add.w	r4, r7, #16
 8008988:	f107 0215 	add.w	r2, r7, #21
 800898c:	f107 0112 	add.w	r1, r7, #18
 8008990:	f107 0016 	add.w	r0, r7, #22
 8008994:	f107 030e 	add.w	r3, r7, #14
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	4623      	mov	r3, r4
 800899c:	f000 f853 	bl	8008a46 <hci_le_read_local_version>
 80089a0:	4603      	mov	r3, r0
 80089a2:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d126      	bne.n	80089f8 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 80089aa:	8a7b      	ldrh	r3, [r7, #18]
 80089ac:	0a1b      	lsrs	r3, r3, #8
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 80089b6:	8a7b      	ldrh	r3, [r7, #18]
 80089b8:	021b      	lsls	r3, r3, #8
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	b21a      	sxth	r2, r3
 80089c6:	89fb      	ldrh	r3, [r7, #14]
 80089c8:	091b      	lsrs	r3, r3, #4
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	011b      	lsls	r3, r3, #4
 80089ce:	b21b      	sxth	r3, r3
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	b21b      	sxth	r3, r3
 80089d4:	4313      	orrs	r3, r2
 80089d6:	b21b      	sxth	r3, r3
 80089d8:	b29a      	uxth	r2, r3
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	b21a      	sxth	r2, r3
 80089e4:	89fb      	ldrh	r3, [r7, #14]
 80089e6:	b21b      	sxth	r3, r3
 80089e8:	f003 030f 	and.w	r3, r3, #15
 80089ec:	b21b      	sxth	r3, r3
 80089ee:	4313      	orrs	r3, r2
 80089f0:	b21b      	sxth	r3, r3
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	801a      	strh	r2, [r3, #0]
  }
  return status;
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd90      	pop	{r4, r7, pc}

08008a02 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b088      	sub	sp, #32
 8008a06:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a08:	f107 0308 	add.w	r3, r7, #8
 8008a0c:	2218      	movs	r2, #24
 8008a0e:	2100      	movs	r1, #0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f002 f93d 	bl	800ac90 <memset>
  rq.ogf = OGF_HOST_CTL;
 8008a16:	2303      	movs	r3, #3
 8008a18:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008a1e:	1dfb      	adds	r3, r7, #7
 8008a20:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008a22:	2301      	movs	r3, #1
 8008a24:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008a26:	f107 0308 	add.w	r3, r7, #8
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 f991 	bl	8008d54 <hci_send_req>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	da01      	bge.n	8008a3c <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8008a38:	23ff      	movs	r3, #255	@ 0xff
 8008a3a:	e000      	b.n	8008a3e <hci_reset+0x3c>
  
  return status;  
 8008a3c:	79fb      	ldrb	r3, [r7, #7]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3720      	adds	r7, #32
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b08e      	sub	sp, #56	@ 0x38
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	607a      	str	r2, [r7, #4]
 8008a52:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008a54:	f107 0314 	add.w	r3, r7, #20
 8008a58:	2209      	movs	r2, #9
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f002 f917 	bl	800ac90 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a62:	f107 0320 	add.w	r3, r7, #32
 8008a66:	2218      	movs	r2, #24
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f002 f910 	bl	800ac90 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008a70:	2304      	movs	r3, #4
 8008a72:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008a74:	2301      	movs	r3, #1
 8008a76:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8008a80:	f107 0314 	add.w	r3, r7, #20
 8008a84:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008a86:	2309      	movs	r3, #9
 8008a88:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008a8a:	f107 0320 	add.w	r3, r7, #32
 8008a8e:	2100      	movs	r1, #0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 f95f 	bl	8008d54 <hci_send_req>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	da01      	bge.n	8008aa0 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8008a9c:	23ff      	movs	r3, #255	@ 0xff
 8008a9e:	e018      	b.n	8008ad2 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008aa0:	7d3b      	ldrb	r3, [r7, #20]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <hci_le_read_local_version+0x64>
    return resp.status;
 8008aa6:	7d3b      	ldrb	r3, [r7, #20]
 8008aa8:	e013      	b.n	8008ad2 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8008aaa:	7d7a      	ldrb	r2, [r7, #21]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008ab0:	8afa      	ldrh	r2, [r7, #22]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008ab6:	7e3a      	ldrb	r2, [r7, #24]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8008abc:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008ac6:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ace:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3738      	adds	r7, #56	@ 0x38
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b092      	sub	sp, #72	@ 0x48
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	6039      	str	r1, [r7, #0]
 8008ae4:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8008ae6:	f107 0310 	add.w	r3, r7, #16
 8008aea:	2220      	movs	r2, #32
 8008aec:	2100      	movs	r1, #0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f002 f8ce 	bl	800ac90 <memset>
  scan_resp_cp.length = length;
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8008af8:	79fb      	ldrb	r3, [r7, #7]
 8008afa:	2b1f      	cmp	r3, #31
 8008afc:	bf28      	it	cs
 8008afe:	231f      	movcs	r3, #31
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	461a      	mov	r2, r3
 8008b04:	f107 0310 	add.w	r3, r7, #16
 8008b08:	3301      	adds	r3, #1
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f002 f93a 	bl	800ad86 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008b16:	2218      	movs	r2, #24
 8008b18:	2100      	movs	r1, #0
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f002 f8b8 	bl	800ac90 <memset>
  rq.ogf = OGF_LE_CTL;
 8008b20:	2308      	movs	r3, #8
 8008b22:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8008b24:	2309      	movs	r3, #9
 8008b26:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8008b28:	f107 0310 	add.w	r3, r7, #16
 8008b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8008b2e:	2320      	movs	r3, #32
 8008b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8008b32:	f107 030f 	add.w	r3, r7, #15
 8008b36:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008b3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008b40:	2100      	movs	r1, #0
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 f906 	bl	8008d54 <hci_send_req>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	da01      	bge.n	8008b52 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8008b4e:	23ff      	movs	r3, #255	@ 0xff
 8008b50:	e000      	b.n	8008b54 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3748      	adds	r7, #72	@ 0x48
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3308      	adds	r3, #8
 8008b68:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d001      	beq.n	8008b76 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008b72:	2301      	movs	r3, #1
 8008b74:	e00c      	b.n	8008b90 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3302      	adds	r3, #2
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008b84:	3b03      	subs	r3, #3
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d001      	beq.n	8008b8e <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e000      	b.n	8008b90 <verify_packet+0x34>
  
  return 0;      
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b0a6      	sub	sp, #152	@ 0x98
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	607b      	str	r3, [r7, #4]
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	81fb      	strh	r3, [r7, #14]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	81bb      	strh	r3, [r7, #12]
 8008bac:	4613      	mov	r3, r2
 8008bae:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008bb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bb8:	b21a      	sxth	r2, r3
 8008bba:	89fb      	ldrh	r3, [r7, #14]
 8008bbc:	029b      	lsls	r3, r3, #10
 8008bbe:	b21b      	sxth	r3, r3
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	b21b      	sxth	r3, r3
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8008bc8:	7afb      	ldrb	r3, [r7, #11]
 8008bca:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008bd0:	f107 0318 	add.w	r3, r7, #24
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f107 0314 	add.w	r3, r7, #20
 8008bdc:	8819      	ldrh	r1, [r3, #0]
 8008bde:	789b      	ldrb	r3, [r3, #2]
 8008be0:	8011      	strh	r1, [r2, #0]
 8008be2:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008be4:	f107 0318 	add.w	r3, r7, #24
 8008be8:	3304      	adds	r3, #4
 8008bea:	7afa      	ldrb	r2, [r7, #11]
 8008bec:	6879      	ldr	r1, [r7, #4]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f002 f8c9 	bl	800ad86 <memcpy>
  
  if (hciContext.io.Send)
 8008bf4:	4b08      	ldr	r3, [pc, #32]	@ (8008c18 <send_cmd+0x7c>)
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d009      	beq.n	8008c10 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008bfc:	4b06      	ldr	r3, [pc, #24]	@ (8008c18 <send_cmd+0x7c>)
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	7afa      	ldrb	r2, [r7, #11]
 8008c02:	b292      	uxth	r2, r2
 8008c04:	3204      	adds	r2, #4
 8008c06:	b291      	uxth	r1, r2
 8008c08:	f107 0218 	add.w	r2, r7, #24
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
  }
}
 8008c10:	bf00      	nop
 8008c12:	3798      	adds	r7, #152	@ 0x98
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	20001548 	.word	0x20001548

08008c1c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8008c26:	e00a      	b.n	8008c3e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8008c28:	f107 030c 	add.w	r3, r7, #12
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6838      	ldr	r0, [r7, #0]
 8008c30:	f000 fae8 	bl	8009204 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fa4f 	bl	80090dc <list_insert_head>
  while (!list_is_empty(src_list))
 8008c3e:	6838      	ldr	r0, [r7, #0]
 8008c40:	f000 fa2a 	bl	8009098 <list_is_empty>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0ee      	beq.n	8008c28 <move_list+0xc>
  }
}
 8008c4a:	bf00      	nop
 8008c4c:	bf00      	nop
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008c5a:	e009      	b.n	8008c70 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008c5c:	1d3b      	adds	r3, r7, #4
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4809      	ldr	r0, [pc, #36]	@ (8008c88 <free_event_list+0x34>)
 8008c62:	f000 faa8 	bl	80091b6 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4808      	ldr	r0, [pc, #32]	@ (8008c8c <free_event_list+0x38>)
 8008c6c:	f000 fa5c 	bl	8009128 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008c70:	4806      	ldr	r0, [pc, #24]	@ (8008c8c <free_event_list+0x38>)
 8008c72:	f000 faee 	bl	8009252 <list_get_size>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	ddef      	ble.n	8008c5c <free_event_list+0x8>
  }
}
 8008c7c:	bf00      	nop
 8008c7e:	bf00      	nop
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20001284 	.word	0x20001284
 8008c8c:	2000127c 	.word	0x2000127c

08008c90 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008ca0:	4a18      	ldr	r2, [pc, #96]	@ (8008d04 <hci_init+0x74>)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8008ca6:	4818      	ldr	r0, [pc, #96]	@ (8008d08 <hci_init+0x78>)
 8008ca8:	f000 f9e6 	bl	8009078 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008cac:	4817      	ldr	r0, [pc, #92]	@ (8008d0c <hci_init+0x7c>)
 8008cae:	f000 f9e3 	bl	8009078 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008cb2:	f7f9 fdc9 	bl	8002848 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	73fb      	strb	r3, [r7, #15]
 8008cba:	e00c      	b.n	8008cd6 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	228c      	movs	r2, #140	@ 0x8c
 8008cc0:	fb02 f303 	mul.w	r3, r2, r3
 8008cc4:	4a12      	ldr	r2, [pc, #72]	@ (8008d10 <hci_init+0x80>)
 8008cc6:	4413      	add	r3, r2
 8008cc8:	4619      	mov	r1, r3
 8008cca:	480f      	ldr	r0, [pc, #60]	@ (8008d08 <hci_init+0x78>)
 8008ccc:	f000 fa2c 	bl	8009128 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	73fb      	strb	r3, [r7, #15]
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d9ef      	bls.n	8008cbc <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008cdc:	4b09      	ldr	r3, [pc, #36]	@ (8008d04 <hci_init+0x74>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <hci_init+0x5c>
 8008ce4:	4b07      	ldr	r3, [pc, #28]	@ (8008d04 <hci_init+0x74>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2000      	movs	r0, #0
 8008cea:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008cec:	4b05      	ldr	r3, [pc, #20]	@ (8008d04 <hci_init+0x74>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <hci_init+0x6a>
 8008cf4:	4b03      	ldr	r3, [pc, #12]	@ (8008d04 <hci_init+0x74>)
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	4798      	blx	r3
}
 8008cfa:	bf00      	nop
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20001548 	.word	0x20001548
 8008d08:	2000127c 	.word	0x2000127c
 8008d0c:	20001284 	.word	0x20001284
 8008d10:	2000128c 	.word	0x2000128c

08008d14 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0b      	ldr	r2, [pc, #44]	@ (8008d50 <hci_register_io_bus+0x3c>)
 8008d22:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	4a09      	ldr	r2, [pc, #36]	@ (8008d50 <hci_register_io_bus+0x3c>)
 8008d2a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	4a07      	ldr	r2, [pc, #28]	@ (8008d50 <hci_register_io_bus+0x3c>)
 8008d32:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	4a05      	ldr	r2, [pc, #20]	@ (8008d50 <hci_register_io_bus+0x3c>)
 8008d3a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	4a03      	ldr	r2, [pc, #12]	@ (8008d50 <hci_register_io_bus+0x3c>)
 8008d42:	6093      	str	r3, [r2, #8]
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	20001548 	.word	0x20001548

08008d54 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08e      	sub	sp, #56	@ 0x38
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	885b      	ldrh	r3, [r3, #2]
 8008d64:	b21b      	sxth	r3, r3
 8008d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d6a:	b21a      	sxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	029b      	lsls	r3, r3, #10
 8008d72:	b21b      	sxth	r3, r3
 8008d74:	4313      	orrs	r3, r2
 8008d76:	b21b      	sxth	r3, r3
 8008d78:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008d7e:	f107 0308 	add.w	r3, r7, #8
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 f978 	bl	8009078 <list_init_head>

  free_event_list();
 8008d88:	f7ff ff64 	bl	8008c54 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	8818      	ldrh	r0, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	8859      	ldrh	r1, [r3, #2]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f7ff fefd 	bl	8008b9c <send_cmd>
  
  if (async)
 8008da2:	78fb      	ldrb	r3, [r7, #3]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <hci_send_req+0x58>
  {
    return 0;
 8008da8:	2300      	movs	r3, #0
 8008daa:	e0e2      	b.n	8008f72 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8008dac:	f7fa ffec 	bl	8003d88 <HAL_GetTick>
 8008db0:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008db2:	f7fa ffe9 	bl	8003d88 <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008dc0:	f200 80b3 	bhi.w	8008f2a <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008dc4:	486d      	ldr	r0, [pc, #436]	@ (8008f7c <hci_send_req+0x228>)
 8008dc6:	f000 f967 	bl	8009098 <list_is_empty>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d000      	beq.n	8008dd2 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008dd0:	e7ef      	b.n	8008db2 <hci_send_req+0x5e>
      {
        break;
 8008dd2:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008dd4:	f107 0310 	add.w	r3, r7, #16
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4868      	ldr	r0, [pc, #416]	@ (8008f7c <hci_send_req+0x228>)
 8008ddc:	f000 f9eb 	bl	80091b6 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	3308      	adds	r3, #8
 8008de4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8008de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	d17f      	bne.n	8008eee <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8008dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df0:	3301      	adds	r3, #1
 8008df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	3308      	adds	r3, #8
 8008df8:	3303      	adds	r3, #3
 8008dfa:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008e02:	3b03      	subs	r3, #3
 8008e04:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8008e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e0c:	d04c      	beq.n	8008ea8 <hci_send_req+0x154>
 8008e0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e10:	dc68      	bgt.n	8008ee4 <hci_send_req+0x190>
 8008e12:	2b10      	cmp	r3, #16
 8008e14:	f000 808b 	beq.w	8008f2e <hci_send_req+0x1da>
 8008e18:	2b10      	cmp	r3, #16
 8008e1a:	dc63      	bgt.n	8008ee4 <hci_send_req+0x190>
 8008e1c:	2b0e      	cmp	r3, #14
 8008e1e:	d023      	beq.n	8008e68 <hci_send_req+0x114>
 8008e20:	2b0f      	cmp	r3, #15
 8008e22:	d15f      	bne.n	8008ee4 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e26:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	885b      	ldrh	r3, [r3, #2]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d17e      	bne.n	8008f32 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	2b0f      	cmp	r3, #15
 8008e3a:	d004      	beq.n	8008e46 <hci_send_req+0xf2>
          if (cs->status) {
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d051      	beq.n	8008ee8 <hci_send_req+0x194>
            goto failed;
 8008e44:	e078      	b.n	8008f38 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695a      	ldr	r2, [r3, #20]
 8008e4a:	6a3b      	ldr	r3, [r7, #32]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	bf28      	it	cs
 8008e50:	461a      	movcs	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6918      	ldr	r0, [r3, #16]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e62:	f001 ff90 	bl	800ad86 <memcpy>
        goto done;
 8008e66:	e078      	b.n	8008f5a <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8008e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6a:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d15d      	bne.n	8008f36 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	3303      	adds	r3, #3
 8008e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	3b03      	subs	r3, #3
 8008e84:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	695a      	ldr	r2, [r3, #20]
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	bf28      	it	cs
 8008e90:	461a      	movcs	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6918      	ldr	r0, [r3, #16]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ea2:	f001 ff70 	bl	800ad86 <memcpy>
        goto done;
 8008ea6:	e058      	b.n	8008f5a <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eaa:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d118      	bne.n	8008eec <hci_send_req+0x198>
          break;
      
        len -= 1;
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	695a      	ldr	r2, [r3, #20]
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	bf28      	it	cs
 8008eca:	461a      	movcs	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6918      	ldr	r0, [r3, #16]
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	1c59      	adds	r1, r3, #1
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	461a      	mov	r2, r3
 8008ede:	f001 ff52 	bl	800ad86 <memcpy>
        goto done;
 8008ee2:	e03a      	b.n	8008f5a <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8008ee4:	bf00      	nop
 8008ee6:	e002      	b.n	8008eee <hci_send_req+0x19a>
          break;
 8008ee8:	bf00      	nop
 8008eea:	e000      	b.n	8008eee <hci_send_req+0x19a>
          break;
 8008eec:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8008eee:	4824      	ldr	r0, [pc, #144]	@ (8008f80 <hci_send_req+0x22c>)
 8008ef0:	f000 f8d2 	bl	8009098 <list_is_empty>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00d      	beq.n	8008f16 <hci_send_req+0x1c2>
 8008efa:	4820      	ldr	r0, [pc, #128]	@ (8008f7c <hci_send_req+0x228>)
 8008efc:	f000 f8cc 	bl	8009098 <list_is_empty>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d007      	beq.n	8008f16 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	481d      	ldr	r0, [pc, #116]	@ (8008f80 <hci_send_req+0x22c>)
 8008f0c:	f000 f90c 	bl	8009128 <list_insert_tail>
      hciReadPacket=NULL;
 8008f10:	2300      	movs	r3, #0
 8008f12:	613b      	str	r3, [r7, #16]
 8008f14:	e008      	b.n	8008f28 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	f107 0308 	add.w	r3, r7, #8
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 f902 	bl	8009128 <list_insert_tail>
      hciReadPacket=NULL;
 8008f24:	2300      	movs	r3, #0
 8008f26:	613b      	str	r3, [r7, #16]
  {
 8008f28:	e740      	b.n	8008dac <hci_send_req+0x58>
        goto failed;
 8008f2a:	bf00      	nop
 8008f2c:	e004      	b.n	8008f38 <hci_send_req+0x1e4>
        goto failed;
 8008f2e:	bf00      	nop
 8008f30:	e002      	b.n	8008f38 <hci_send_req+0x1e4>
          goto failed;
 8008f32:	bf00      	nop
 8008f34:	e000      	b.n	8008f38 <hci_send_req+0x1e4>
          goto failed;
 8008f36:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d004      	beq.n	8008f48 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	4619      	mov	r1, r3
 8008f42:	480f      	ldr	r0, [pc, #60]	@ (8008f80 <hci_send_req+0x22c>)
 8008f44:	f000 f8ca 	bl	80090dc <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008f48:	f107 0308 	add.w	r3, r7, #8
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	480b      	ldr	r0, [pc, #44]	@ (8008f7c <hci_send_req+0x228>)
 8008f50:	f7ff fe64 	bl	8008c1c <move_list>

  return -1;
 8008f54:	f04f 33ff 	mov.w	r3, #4294967295
 8008f58:	e00b      	b.n	8008f72 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4808      	ldr	r0, [pc, #32]	@ (8008f80 <hci_send_req+0x22c>)
 8008f60:	f000 f8bc 	bl	80090dc <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008f64:	f107 0308 	add.w	r3, r7, #8
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4804      	ldr	r0, [pc, #16]	@ (8008f7c <hci_send_req+0x228>)
 8008f6c:	f7ff fe56 	bl	8008c1c <move_list>

  return 0;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3738      	adds	r7, #56	@ 0x38
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20001284 	.word	0x20001284
 8008f80:	2000127c 	.word	0x2000127c

08008f84 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008f8e:	e013      	b.n	8008fb8 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8008f90:	1d3b      	adds	r3, r7, #4
 8008f92:	4619      	mov	r1, r3
 8008f94:	480e      	ldr	r0, [pc, #56]	@ (8008fd0 <hci_user_evt_proc+0x4c>)
 8008f96:	f000 f90e 	bl	80091b6 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8008fd4 <hci_user_evt_proc+0x50>)
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8008fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd4 <hci_user_evt_proc+0x50>)
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	3208      	adds	r2, #8
 8008faa:	4610      	mov	r0, r2
 8008fac:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4809      	ldr	r0, [pc, #36]	@ (8008fd8 <hci_user_evt_proc+0x54>)
 8008fb4:	f000 f8b8 	bl	8009128 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008fb8:	4805      	ldr	r0, [pc, #20]	@ (8008fd0 <hci_user_evt_proc+0x4c>)
 8008fba:	f000 f86d 	bl	8009098 <list_is_empty>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0e5      	beq.n	8008f90 <hci_user_evt_proc+0xc>
  }
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20001284 	.word	0x20001284
 8008fd4:	20001548 	.word	0x20001548
 8008fd8:	2000127c 	.word	0x2000127c

08008fdc <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8008fec:	481f      	ldr	r0, [pc, #124]	@ (800906c <hci_notify_asynch_evt+0x90>)
 8008fee:	f000 f853 	bl	8009098 <list_is_empty>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d132      	bne.n	800905e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8008ff8:	f107 030c 	add.w	r3, r7, #12
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	481b      	ldr	r0, [pc, #108]	@ (800906c <hci_notify_asynch_evt+0x90>)
 8009000:	f000 f8d9 	bl	80091b6 <list_remove_head>
    
    if (hciContext.io.Receive)
 8009004:	4b1a      	ldr	r3, [pc, #104]	@ (8009070 <hci_notify_asynch_evt+0x94>)
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d02a      	beq.n	8009062 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800900c:	4b18      	ldr	r3, [pc, #96]	@ (8009070 <hci_notify_asynch_evt+0x94>)
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	3208      	adds	r2, #8
 8009014:	2180      	movs	r1, #128	@ 0x80
 8009016:	4610      	mov	r0, r2
 8009018:	4798      	blx	r3
 800901a:	4603      	mov	r3, r0
 800901c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800901e:	7cfb      	ldrb	r3, [r7, #19]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d016      	beq.n	8009052 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	7cfa      	ldrb	r2, [r7, #19]
 8009028:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff fd94 	bl	8008b5c <verify_packet>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d105      	bne.n	8009046 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4619      	mov	r1, r3
 800903e:	480d      	ldr	r0, [pc, #52]	@ (8009074 <hci_notify_asynch_evt+0x98>)
 8009040:	f000 f872 	bl	8009128 <list_insert_tail>
 8009044:	e00d      	b.n	8009062 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	4619      	mov	r1, r3
 800904a:	4808      	ldr	r0, [pc, #32]	@ (800906c <hci_notify_asynch_evt+0x90>)
 800904c:	f000 f846 	bl	80090dc <list_insert_head>
 8009050:	e007      	b.n	8009062 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	4619      	mov	r1, r3
 8009056:	4805      	ldr	r0, [pc, #20]	@ (800906c <hci_notify_asynch_evt+0x90>)
 8009058:	f000 f840 	bl	80090dc <list_insert_head>
 800905c:	e001      	b.n	8009062 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800905e:	2301      	movs	r3, #1
 8009060:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009062:	697b      	ldr	r3, [r7, #20]

}
 8009064:	4618      	mov	r0, r3
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	2000127c 	.word	0x2000127c
 8009070:	20001548 	.word	0x20001548
 8009074:	20001284 	.word	0x20001284

08009078 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	605a      	str	r2, [r3, #4]
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8009098:	b480      	push	{r7}
 800909a:	b087      	sub	sp, #28
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090a0:	f3ef 8310 	mrs	r3, PRIMASK
 80090a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80090a6:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80090a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80090aa:	b672      	cpsid	i
}
 80090ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d102      	bne.n	80090be <list_is_empty+0x26>
  {
    return_value = 1;
 80090b8:	2301      	movs	r3, #1
 80090ba:	75fb      	strb	r3, [r7, #23]
 80090bc:	e001      	b.n	80090c2 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	75fb      	strb	r3, [r7, #23]
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	f383 8810 	msr	PRIMASK, r3
}
 80090cc:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80090ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	371c      	adds	r7, #28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090e6:	f3ef 8310 	mrs	r3, PRIMASK
 80090ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80090ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80090ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090f0:	b672      	cpsid	i
}
 80090f2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	605a      	str	r2, [r3, #4]
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f383 8810 	msr	PRIMASK, r3
}
 800911a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800911c:	bf00      	nop
 800911e:	371c      	adds	r7, #28
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009132:	f3ef 8310 	mrs	r3, PRIMASK
 8009136:	60fb      	str	r3, [r7, #12]
  return(result);
 8009138:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800913a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800913c:	b672      	cpsid	i
}
 800913e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f383 8810 	msr	PRIMASK, r3
}
 8009166:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009168:	bf00      	nop
 800916a:	371c      	adds	r7, #28
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800917c:	f3ef 8310 	mrs	r3, PRIMASK
 8009180:	60fb      	str	r3, [r7, #12]
  return(result);
 8009182:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009184:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009186:	b672      	cpsid	i
}
 8009188:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6812      	ldr	r2, [r2, #0]
 8009192:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	6852      	ldr	r2, [r2, #4]
 800919c:	605a      	str	r2, [r3, #4]
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f383 8810 	msr	PRIMASK, r3
}
 80091a8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80091aa:	bf00      	nop
 80091ac:	371c      	adds	r7, #28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b086      	sub	sp, #24
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c0:	f3ef 8310 	mrs	r3, PRIMASK
 80091c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80091c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80091c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091ca:	b672      	cpsid	i
}
 80091cc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff ffca 	bl	8009174 <list_remove_node>
  (*node)->next = NULL;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2200      	movs	r2, #0
 80091e6:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2200      	movs	r2, #0
 80091ee:	605a      	str	r2, [r3, #4]
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f383 8810 	msr	PRIMASK, r3
}
 80091fa:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80091fc:	bf00      	nop
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800920e:	f3ef 8310 	mrs	r3, PRIMASK
 8009212:	60fb      	str	r3, [r7, #12]
  return(result);
 8009214:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009216:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009218:	b672      	cpsid	i
}
 800921a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	4618      	mov	r0, r3
 800922a:	f7ff ffa3 	bl	8009174 <list_remove_node>
  (*node)->next = NULL;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2200      	movs	r2, #0
 800923c:	605a      	str	r2, [r3, #4]
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	f383 8810 	msr	PRIMASK, r3
}
 8009248:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800924a:	bf00      	nop
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8009252:	b480      	push	{r7}
 8009254:	b089      	sub	sp, #36	@ 0x24
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  int size = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800925e:	f3ef 8310 	mrs	r3, PRIMASK
 8009262:	613b      	str	r3, [r7, #16]
  return(result);
 8009264:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009266:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009268:	b672      	cpsid	i
}
 800926a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009272:	e005      	b.n	8009280 <list_get_size+0x2e>
  {
    size++;
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	3301      	adds	r3, #1
 8009278:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	429a      	cmp	r2, r3
 8009286:	d1f5      	bne.n	8009274 <list_get_size+0x22>
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f383 8810 	msr	PRIMASK, r3
}
 8009292:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8009294:	69fb      	ldr	r3, [r7, #28]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3724      	adds	r7, #36	@ 0x24
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80092a2:	b480      	push	{r7}
 80092a4:	b085      	sub	sp, #20
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	4603      	mov	r3, r0
 80092aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80092b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80092b4:	2b84      	cmp	r3, #132	@ 0x84
 80092b6:	d005      	beq.n	80092c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80092b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4413      	add	r3, r2
 80092c0:	3303      	adds	r3, #3
 80092c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80092c4:	68fb      	ldr	r3, [r7, #12]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80092d6:	f000 fae5 	bl	80098a4 <vTaskStartScheduler>
  
  return osOK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	bd80      	pop	{r7, pc}

080092e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80092e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092e2:	b089      	sub	sp, #36	@ 0x24
 80092e4:	af04      	add	r7, sp, #16
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d020      	beq.n	8009334 <osThreadCreate+0x54>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d01c      	beq.n	8009334 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685c      	ldr	r4, [r3, #4]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	691e      	ldr	r6, [r3, #16]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800930c:	4618      	mov	r0, r3
 800930e:	f7ff ffc8 	bl	80092a2 <makeFreeRtosPriority>
 8009312:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	695b      	ldr	r3, [r3, #20]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800931c:	9202      	str	r2, [sp, #8]
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	9100      	str	r1, [sp, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	4632      	mov	r2, r6
 8009326:	4629      	mov	r1, r5
 8009328:	4620      	mov	r0, r4
 800932a:	f000 f8ed 	bl	8009508 <xTaskCreateStatic>
 800932e:	4603      	mov	r3, r0
 8009330:	60fb      	str	r3, [r7, #12]
 8009332:	e01c      	b.n	800936e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685c      	ldr	r4, [r3, #4]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009340:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009348:	4618      	mov	r0, r3
 800934a:	f7ff ffaa 	bl	80092a2 <makeFreeRtosPriority>
 800934e:	4602      	mov	r2, r0
 8009350:	f107 030c 	add.w	r3, r7, #12
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	9200      	str	r2, [sp, #0]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	4632      	mov	r2, r6
 800935c:	4629      	mov	r1, r5
 800935e:	4620      	mov	r0, r4
 8009360:	f000 f932 	bl	80095c8 <xTaskCreate>
 8009364:	4603      	mov	r3, r0
 8009366:	2b01      	cmp	r3, #1
 8009368:	d001      	beq.n	800936e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800936a:	2300      	movs	r3, #0
 800936c:	e000      	b.n	8009370 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800936e:	68fb      	ldr	r3, [r7, #12]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009378 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <osDelay+0x16>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	e000      	b.n	8009390 <osDelay+0x18>
 800938e:	2301      	movs	r3, #1
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fa51 	bl	8009838 <vTaskDelay>
  
  return osOK;
 8009396:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f103 0208 	add.w	r2, r3, #8
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f04f 32ff 	mov.w	r2, #4294967295
 80093b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f103 0208 	add.w	r2, r3, #8
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f103 0208 	add.w	r2, r3, #8
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	689a      	ldr	r2, [r3, #8]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	1c5a      	adds	r2, r3, #1
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	601a      	str	r2, [r3, #0]
}
 8009436:	bf00      	nop
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009442:	b480      	push	{r7}
 8009444:	b085      	sub	sp, #20
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009458:	d103      	bne.n	8009462 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	e00c      	b.n	800947c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	3308      	adds	r3, #8
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	e002      	b.n	8009470 <vListInsert+0x2e>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	429a      	cmp	r2, r3
 800947a:	d2f6      	bcs.n	800946a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	601a      	str	r2, [r3, #0]
}
 80094a8:	bf00      	nop
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	6892      	ldr	r2, [r2, #8]
 80094ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	6852      	ldr	r2, [r2, #4]
 80094d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d103      	bne.n	80094e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	689a      	ldr	r2, [r3, #8]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	1e5a      	subs	r2, r3, #1
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08e      	sub	sp, #56	@ 0x38
 800950c:	af04      	add	r7, sp, #16
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10b      	bne.n	8009534 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800952e:	bf00      	nop
 8009530:	bf00      	nop
 8009532:	e7fd      	b.n	8009530 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10b      	bne.n	8009552 <xTaskCreateStatic+0x4a>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	61fb      	str	r3, [r7, #28]
}
 800954c:	bf00      	nop
 800954e:	bf00      	nop
 8009550:	e7fd      	b.n	800954e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009552:	2354      	movs	r3, #84	@ 0x54
 8009554:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	2b54      	cmp	r3, #84	@ 0x54
 800955a:	d00b      	beq.n	8009574 <xTaskCreateStatic+0x6c>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	61bb      	str	r3, [r7, #24]
}
 800956e:	bf00      	nop
 8009570:	bf00      	nop
 8009572:	e7fd      	b.n	8009570 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009574:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009578:	2b00      	cmp	r3, #0
 800957a:	d01e      	beq.n	80095ba <xTaskCreateStatic+0xb2>
 800957c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957e:	2b00      	cmp	r3, #0
 8009580:	d01b      	beq.n	80095ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009584:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009588:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800958a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800958c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958e:	2202      	movs	r2, #2
 8009590:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009594:	2300      	movs	r3, #0
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959a:	9302      	str	r3, [sp, #8]
 800959c:	f107 0314 	add.w	r3, r7, #20
 80095a0:	9301      	str	r3, [sp, #4]
 80095a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	68b9      	ldr	r1, [r7, #8]
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 f850 	bl	8009652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80095b4:	f000 f8d6 	bl	8009764 <prvAddNewTaskToReadyList>
 80095b8:	e001      	b.n	80095be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80095ba:	2300      	movs	r3, #0
 80095bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095be:	697b      	ldr	r3, [r7, #20]
	}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3728      	adds	r7, #40	@ 0x28
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08c      	sub	sp, #48	@ 0x30
 80095cc:	af04      	add	r7, sp, #16
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	603b      	str	r3, [r7, #0]
 80095d4:	4613      	mov	r3, r2
 80095d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80095d8:	88fb      	ldrh	r3, [r7, #6]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 fef3 	bl	800a3c8 <pvPortMalloc>
 80095e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00e      	beq.n	8009608 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80095ea:	2054      	movs	r0, #84	@ 0x54
 80095ec:	f000 feec 	bl	800a3c8 <pvPortMalloc>
 80095f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80095fe:	e005      	b.n	800960c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009600:	6978      	ldr	r0, [r7, #20]
 8009602:	f000 ffaf 	bl	800a564 <vPortFree>
 8009606:	e001      	b.n	800960c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009608:	2300      	movs	r3, #0
 800960a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d017      	beq.n	8009642 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800961a:	88fa      	ldrh	r2, [r7, #6]
 800961c:	2300      	movs	r3, #0
 800961e:	9303      	str	r3, [sp, #12]
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	9302      	str	r3, [sp, #8]
 8009624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	68b9      	ldr	r1, [r7, #8]
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f000 f80e 	bl	8009652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009636:	69f8      	ldr	r0, [r7, #28]
 8009638:	f000 f894 	bl	8009764 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800963c:	2301      	movs	r3, #1
 800963e:	61bb      	str	r3, [r7, #24]
 8009640:	e002      	b.n	8009648 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009642:	f04f 33ff 	mov.w	r3, #4294967295
 8009646:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009648:	69bb      	ldr	r3, [r7, #24]
	}
 800964a:	4618      	mov	r0, r3
 800964c:	3720      	adds	r7, #32
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b088      	sub	sp, #32
 8009656:	af00      	add	r7, sp, #0
 8009658:	60f8      	str	r0, [r7, #12]
 800965a:	60b9      	str	r1, [r7, #8]
 800965c:	607a      	str	r2, [r7, #4]
 800965e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800966a:	3b01      	subs	r3, #1
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	f023 0307 	bic.w	r3, r3, #7
 8009678:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	f003 0307 	and.w	r3, r3, #7
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00b      	beq.n	800969c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	617b      	str	r3, [r7, #20]
}
 8009696:	bf00      	nop
 8009698:	bf00      	nop
 800969a:	e7fd      	b.n	8009698 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d01f      	beq.n	80096e2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096a2:	2300      	movs	r3, #0
 80096a4:	61fb      	str	r3, [r7, #28]
 80096a6:	e012      	b.n	80096ce <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	4413      	add	r3, r2
 80096ae:	7819      	ldrb	r1, [r3, #0]
 80096b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	4413      	add	r3, r2
 80096b6:	3334      	adds	r3, #52	@ 0x34
 80096b8:	460a      	mov	r2, r1
 80096ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	4413      	add	r3, r2
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d006      	beq.n	80096d6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	3301      	adds	r3, #1
 80096cc:	61fb      	str	r3, [r7, #28]
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	2b0f      	cmp	r3, #15
 80096d2:	d9e9      	bls.n	80096a8 <prvInitialiseNewTask+0x56>
 80096d4:	e000      	b.n	80096d8 <prvInitialiseNewTask+0x86>
			{
				break;
 80096d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80096e0:	e003      	b.n	80096ea <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80096e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ec:	2b06      	cmp	r3, #6
 80096ee:	d901      	bls.n	80096f4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096f0:	2306      	movs	r3, #6
 80096f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096fe:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009702:	2200      	movs	r2, #0
 8009704:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009708:	3304      	adds	r3, #4
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff fe68 	bl	80093e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009712:	3318      	adds	r3, #24
 8009714:	4618      	mov	r0, r3
 8009716:	f7ff fe63 	bl	80093e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800971a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800971e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009722:	f1c3 0207 	rsb	r2, r3, #7
 8009726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009728:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800972a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800972e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009732:	2200      	movs	r2, #0
 8009734:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	68f9      	ldr	r1, [r7, #12]
 8009742:	69b8      	ldr	r0, [r7, #24]
 8009744:	f000 fc2c 	bl	8009fa0 <pxPortInitialiseStack>
 8009748:	4602      	mov	r2, r0
 800974a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800974e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009758:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800975a:	bf00      	nop
 800975c:	3720      	adds	r7, #32
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800976c:	f000 fd4c 	bl	800a208 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009770:	4b2a      	ldr	r3, [pc, #168]	@ (800981c <prvAddNewTaskToReadyList+0xb8>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3301      	adds	r3, #1
 8009776:	4a29      	ldr	r2, [pc, #164]	@ (800981c <prvAddNewTaskToReadyList+0xb8>)
 8009778:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800977a:	4b29      	ldr	r3, [pc, #164]	@ (8009820 <prvAddNewTaskToReadyList+0xbc>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d109      	bne.n	8009796 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009782:	4a27      	ldr	r2, [pc, #156]	@ (8009820 <prvAddNewTaskToReadyList+0xbc>)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009788:	4b24      	ldr	r3, [pc, #144]	@ (800981c <prvAddNewTaskToReadyList+0xb8>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d110      	bne.n	80097b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009790:	f000 fac4 	bl	8009d1c <prvInitialiseTaskLists>
 8009794:	e00d      	b.n	80097b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009796:	4b23      	ldr	r3, [pc, #140]	@ (8009824 <prvAddNewTaskToReadyList+0xc0>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d109      	bne.n	80097b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800979e:	4b20      	ldr	r3, [pc, #128]	@ (8009820 <prvAddNewTaskToReadyList+0xbc>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d802      	bhi.n	80097b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097ac:	4a1c      	ldr	r2, [pc, #112]	@ (8009820 <prvAddNewTaskToReadyList+0xbc>)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097b2:	4b1d      	ldr	r3, [pc, #116]	@ (8009828 <prvAddNewTaskToReadyList+0xc4>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3301      	adds	r3, #1
 80097b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009828 <prvAddNewTaskToReadyList+0xc4>)
 80097ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c0:	2201      	movs	r2, #1
 80097c2:	409a      	lsls	r2, r3
 80097c4:	4b19      	ldr	r3, [pc, #100]	@ (800982c <prvAddNewTaskToReadyList+0xc8>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	4a18      	ldr	r2, [pc, #96]	@ (800982c <prvAddNewTaskToReadyList+0xc8>)
 80097cc:	6013      	str	r3, [r2, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097d2:	4613      	mov	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4a15      	ldr	r2, [pc, #84]	@ (8009830 <prvAddNewTaskToReadyList+0xcc>)
 80097dc:	441a      	add	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	3304      	adds	r3, #4
 80097e2:	4619      	mov	r1, r3
 80097e4:	4610      	mov	r0, r2
 80097e6:	f7ff fe08 	bl	80093fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097ea:	f000 fd3f 	bl	800a26c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009824 <prvAddNewTaskToReadyList+0xc0>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00e      	beq.n	8009814 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009820 <prvAddNewTaskToReadyList+0xbc>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009800:	429a      	cmp	r2, r3
 8009802:	d207      	bcs.n	8009814 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009804:	4b0b      	ldr	r3, [pc, #44]	@ (8009834 <prvAddNewTaskToReadyList+0xd0>)
 8009806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009814:	bf00      	nop
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	20001668 	.word	0x20001668
 8009820:	20001568 	.word	0x20001568
 8009824:	20001674 	.word	0x20001674
 8009828:	20001684 	.word	0x20001684
 800982c:	20001670 	.word	0x20001670
 8009830:	2000156c 	.word	0x2000156c
 8009834:	e000ed04 	.word	0xe000ed04

08009838 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009840:	2300      	movs	r3, #0
 8009842:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d018      	beq.n	800987c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800984a:	4b14      	ldr	r3, [pc, #80]	@ (800989c <vTaskDelay+0x64>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00b      	beq.n	800986a <vTaskDelay+0x32>
	__asm volatile
 8009852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	60bb      	str	r3, [r7, #8]
}
 8009864:	bf00      	nop
 8009866:	bf00      	nop
 8009868:	e7fd      	b.n	8009866 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800986a:	f000 f87d 	bl	8009968 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800986e:	2100      	movs	r1, #0
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fb2f 	bl	8009ed4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009876:	f000 f885 	bl	8009984 <xTaskResumeAll>
 800987a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d107      	bne.n	8009892 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009882:	4b07      	ldr	r3, [pc, #28]	@ (80098a0 <vTaskDelay+0x68>)
 8009884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009892:	bf00      	nop
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20001690 	.word	0x20001690
 80098a0:	e000ed04 	.word	0xe000ed04

080098a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b08a      	sub	sp, #40	@ 0x28
 80098a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098aa:	2300      	movs	r3, #0
 80098ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098ae:	2300      	movs	r3, #0
 80098b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098b2:	463a      	mov	r2, r7
 80098b4:	1d39      	adds	r1, r7, #4
 80098b6:	f107 0308 	add.w	r3, r7, #8
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7f9 f810 	bl	80028e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098c0:	6839      	ldr	r1, [r7, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	9202      	str	r2, [sp, #8]
 80098c8:	9301      	str	r3, [sp, #4]
 80098ca:	2300      	movs	r3, #0
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	2300      	movs	r3, #0
 80098d0:	460a      	mov	r2, r1
 80098d2:	491f      	ldr	r1, [pc, #124]	@ (8009950 <vTaskStartScheduler+0xac>)
 80098d4:	481f      	ldr	r0, [pc, #124]	@ (8009954 <vTaskStartScheduler+0xb0>)
 80098d6:	f7ff fe17 	bl	8009508 <xTaskCreateStatic>
 80098da:	4603      	mov	r3, r0
 80098dc:	4a1e      	ldr	r2, [pc, #120]	@ (8009958 <vTaskStartScheduler+0xb4>)
 80098de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80098e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009958 <vTaskStartScheduler+0xb4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80098e8:	2301      	movs	r3, #1
 80098ea:	617b      	str	r3, [r7, #20]
 80098ec:	e001      	b.n	80098f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80098ee:	2300      	movs	r3, #0
 80098f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d116      	bne.n	8009926 <vTaskStartScheduler+0x82>
	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	613b      	str	r3, [r7, #16]
}
 800990a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800990c:	4b13      	ldr	r3, [pc, #76]	@ (800995c <vTaskStartScheduler+0xb8>)
 800990e:	f04f 32ff 	mov.w	r2, #4294967295
 8009912:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009914:	4b12      	ldr	r3, [pc, #72]	@ (8009960 <vTaskStartScheduler+0xbc>)
 8009916:	2201      	movs	r2, #1
 8009918:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800991a:	4b12      	ldr	r3, [pc, #72]	@ (8009964 <vTaskStartScheduler+0xc0>)
 800991c:	2200      	movs	r2, #0
 800991e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009920:	f000 fbce 	bl	800a0c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009924:	e00f      	b.n	8009946 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992c:	d10b      	bne.n	8009946 <vTaskStartScheduler+0xa2>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	60fb      	str	r3, [r7, #12]
}
 8009940:	bf00      	nop
 8009942:	bf00      	nop
 8009944:	e7fd      	b.n	8009942 <vTaskStartScheduler+0x9e>
}
 8009946:	bf00      	nop
 8009948:	3718      	adds	r7, #24
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	0800bc38 	.word	0x0800bc38
 8009954:	08009ced 	.word	0x08009ced
 8009958:	2000168c 	.word	0x2000168c
 800995c:	20001688 	.word	0x20001688
 8009960:	20001674 	.word	0x20001674
 8009964:	2000166c 	.word	0x2000166c

08009968 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009968:	b480      	push	{r7}
 800996a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800996c:	4b04      	ldr	r3, [pc, #16]	@ (8009980 <vTaskSuspendAll+0x18>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	3301      	adds	r3, #1
 8009972:	4a03      	ldr	r2, [pc, #12]	@ (8009980 <vTaskSuspendAll+0x18>)
 8009974:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009976:	bf00      	nop
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	20001690 	.word	0x20001690

08009984 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800998a:	2300      	movs	r3, #0
 800998c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800998e:	2300      	movs	r3, #0
 8009990:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009992:	4b42      	ldr	r3, [pc, #264]	@ (8009a9c <xTaskResumeAll+0x118>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10b      	bne.n	80099b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	603b      	str	r3, [r7, #0]
}
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	e7fd      	b.n	80099ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099b2:	f000 fc29 	bl	800a208 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099b6:	4b39      	ldr	r3, [pc, #228]	@ (8009a9c <xTaskResumeAll+0x118>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	4a37      	ldr	r2, [pc, #220]	@ (8009a9c <xTaskResumeAll+0x118>)
 80099be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099c0:	4b36      	ldr	r3, [pc, #216]	@ (8009a9c <xTaskResumeAll+0x118>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d161      	bne.n	8009a8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099c8:	4b35      	ldr	r3, [pc, #212]	@ (8009aa0 <xTaskResumeAll+0x11c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d05d      	beq.n	8009a8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099d0:	e02e      	b.n	8009a30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099d2:	4b34      	ldr	r3, [pc, #208]	@ (8009aa4 <xTaskResumeAll+0x120>)
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	3318      	adds	r3, #24
 80099de:	4618      	mov	r0, r3
 80099e0:	f7ff fd68 	bl	80094b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	3304      	adds	r3, #4
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff fd63 	bl	80094b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f2:	2201      	movs	r2, #1
 80099f4:	409a      	lsls	r2, r3
 80099f6:	4b2c      	ldr	r3, [pc, #176]	@ (8009aa8 <xTaskResumeAll+0x124>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	4a2a      	ldr	r2, [pc, #168]	@ (8009aa8 <xTaskResumeAll+0x124>)
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a04:	4613      	mov	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4a27      	ldr	r2, [pc, #156]	@ (8009aac <xTaskResumeAll+0x128>)
 8009a0e:	441a      	add	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	3304      	adds	r3, #4
 8009a14:	4619      	mov	r1, r3
 8009a16:	4610      	mov	r0, r2
 8009a18:	f7ff fcef 	bl	80093fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a20:	4b23      	ldr	r3, [pc, #140]	@ (8009ab0 <xTaskResumeAll+0x12c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d302      	bcc.n	8009a30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009a2a:	4b22      	ldr	r3, [pc, #136]	@ (8009ab4 <xTaskResumeAll+0x130>)
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a30:	4b1c      	ldr	r3, [pc, #112]	@ (8009aa4 <xTaskResumeAll+0x120>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1cc      	bne.n	80099d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a3e:	f000 fa0b 	bl	8009e58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a42:	4b1d      	ldr	r3, [pc, #116]	@ (8009ab8 <xTaskResumeAll+0x134>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d010      	beq.n	8009a70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a4e:	f000 f837 	bl	8009ac0 <xTaskIncrementTick>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009a58:	4b16      	ldr	r3, [pc, #88]	@ (8009ab4 <xTaskResumeAll+0x130>)
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1f1      	bne.n	8009a4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009a6a:	4b13      	ldr	r3, [pc, #76]	@ (8009ab8 <xTaskResumeAll+0x134>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a70:	4b10      	ldr	r3, [pc, #64]	@ (8009ab4 <xTaskResumeAll+0x130>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d009      	beq.n	8009a8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8009abc <xTaskResumeAll+0x138>)
 8009a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a8c:	f000 fbee 	bl	800a26c <vPortExitCritical>

	return xAlreadyYielded;
 8009a90:	68bb      	ldr	r3, [r7, #8]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20001690 	.word	0x20001690
 8009aa0:	20001668 	.word	0x20001668
 8009aa4:	20001628 	.word	0x20001628
 8009aa8:	20001670 	.word	0x20001670
 8009aac:	2000156c 	.word	0x2000156c
 8009ab0:	20001568 	.word	0x20001568
 8009ab4:	2000167c 	.word	0x2000167c
 8009ab8:	20001678 	.word	0x20001678
 8009abc:	e000ed04 	.word	0xe000ed04

08009ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aca:	4b4f      	ldr	r3, [pc, #316]	@ (8009c08 <xTaskIncrementTick+0x148>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f040 808f 	bne.w	8009bf2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8009c0c <xTaskIncrementTick+0x14c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009adc:	4a4b      	ldr	r2, [pc, #300]	@ (8009c0c <xTaskIncrementTick+0x14c>)
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d121      	bne.n	8009b2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ae8:	4b49      	ldr	r3, [pc, #292]	@ (8009c10 <xTaskIncrementTick+0x150>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00b      	beq.n	8009b0a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	603b      	str	r3, [r7, #0]
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop
 8009b08:	e7fd      	b.n	8009b06 <xTaskIncrementTick+0x46>
 8009b0a:	4b41      	ldr	r3, [pc, #260]	@ (8009c10 <xTaskIncrementTick+0x150>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	4b40      	ldr	r3, [pc, #256]	@ (8009c14 <xTaskIncrementTick+0x154>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a3e      	ldr	r2, [pc, #248]	@ (8009c10 <xTaskIncrementTick+0x150>)
 8009b16:	6013      	str	r3, [r2, #0]
 8009b18:	4a3e      	ldr	r2, [pc, #248]	@ (8009c14 <xTaskIncrementTick+0x154>)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6013      	str	r3, [r2, #0]
 8009b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8009c18 <xTaskIncrementTick+0x158>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3301      	adds	r3, #1
 8009b24:	4a3c      	ldr	r2, [pc, #240]	@ (8009c18 <xTaskIncrementTick+0x158>)
 8009b26:	6013      	str	r3, [r2, #0]
 8009b28:	f000 f996 	bl	8009e58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8009c1c <xTaskIncrementTick+0x15c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d348      	bcc.n	8009bc8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b36:	4b36      	ldr	r3, [pc, #216]	@ (8009c10 <xTaskIncrementTick+0x150>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d104      	bne.n	8009b4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b40:	4b36      	ldr	r3, [pc, #216]	@ (8009c1c <xTaskIncrementTick+0x15c>)
 8009b42:	f04f 32ff 	mov.w	r2, #4294967295
 8009b46:	601a      	str	r2, [r3, #0]
					break;
 8009b48:	e03e      	b.n	8009bc8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b4a:	4b31      	ldr	r3, [pc, #196]	@ (8009c10 <xTaskIncrementTick+0x150>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b5a:	693a      	ldr	r2, [r7, #16]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d203      	bcs.n	8009b6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b62:	4a2e      	ldr	r2, [pc, #184]	@ (8009c1c <xTaskIncrementTick+0x15c>)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b68:	e02e      	b.n	8009bc8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7ff fca0 	bl	80094b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d004      	beq.n	8009b86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	3318      	adds	r3, #24
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7ff fc97 	bl	80094b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	409a      	lsls	r2, r3
 8009b8e:	4b24      	ldr	r3, [pc, #144]	@ (8009c20 <xTaskIncrementTick+0x160>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	4a22      	ldr	r2, [pc, #136]	@ (8009c20 <xTaskIncrementTick+0x160>)
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8009c24 <xTaskIncrementTick+0x164>)
 8009ba6:	441a      	add	r2, r3
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	3304      	adds	r3, #4
 8009bac:	4619      	mov	r1, r3
 8009bae:	4610      	mov	r0, r2
 8009bb0:	f7ff fc23 	bl	80093fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8009c28 <xTaskIncrementTick+0x168>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d3b9      	bcc.n	8009b36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bc6:	e7b6      	b.n	8009b36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009bc8:	4b17      	ldr	r3, [pc, #92]	@ (8009c28 <xTaskIncrementTick+0x168>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bce:	4915      	ldr	r1, [pc, #84]	@ (8009c24 <xTaskIncrementTick+0x164>)
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	440b      	add	r3, r1
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d901      	bls.n	8009be4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009be4:	4b11      	ldr	r3, [pc, #68]	@ (8009c2c <xTaskIncrementTick+0x16c>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d007      	beq.n	8009bfc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009bec:	2301      	movs	r3, #1
 8009bee:	617b      	str	r3, [r7, #20]
 8009bf0:	e004      	b.n	8009bfc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8009c30 <xTaskIncrementTick+0x170>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8009c30 <xTaskIncrementTick+0x170>)
 8009bfa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009bfc:	697b      	ldr	r3, [r7, #20]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20001690 	.word	0x20001690
 8009c0c:	2000166c 	.word	0x2000166c
 8009c10:	20001620 	.word	0x20001620
 8009c14:	20001624 	.word	0x20001624
 8009c18:	20001680 	.word	0x20001680
 8009c1c:	20001688 	.word	0x20001688
 8009c20:	20001670 	.word	0x20001670
 8009c24:	2000156c 	.word	0x2000156c
 8009c28:	20001568 	.word	0x20001568
 8009c2c:	2000167c 	.word	0x2000167c
 8009c30:	20001678 	.word	0x20001678

08009c34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c34:	b480      	push	{r7}
 8009c36:	b087      	sub	sp, #28
 8009c38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c3a:	4b27      	ldr	r3, [pc, #156]	@ (8009cd8 <vTaskSwitchContext+0xa4>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d003      	beq.n	8009c4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c42:	4b26      	ldr	r3, [pc, #152]	@ (8009cdc <vTaskSwitchContext+0xa8>)
 8009c44:	2201      	movs	r2, #1
 8009c46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c48:	e040      	b.n	8009ccc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009c4a:	4b24      	ldr	r3, [pc, #144]	@ (8009cdc <vTaskSwitchContext+0xa8>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c50:	4b23      	ldr	r3, [pc, #140]	@ (8009ce0 <vTaskSwitchContext+0xac>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	fab3 f383 	clz	r3, r3
 8009c5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009c5e:	7afb      	ldrb	r3, [r7, #11]
 8009c60:	f1c3 031f 	rsb	r3, r3, #31
 8009c64:	617b      	str	r3, [r7, #20]
 8009c66:	491f      	ldr	r1, [pc, #124]	@ (8009ce4 <vTaskSwitchContext+0xb0>)
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4413      	add	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	440b      	add	r3, r1
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10b      	bne.n	8009c92 <vTaskSwitchContext+0x5e>
	__asm volatile
 8009c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	607b      	str	r3, [r7, #4]
}
 8009c8c:	bf00      	nop
 8009c8e:	bf00      	nop
 8009c90:	e7fd      	b.n	8009c8e <vTaskSwitchContext+0x5a>
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	4613      	mov	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4a11      	ldr	r2, [pc, #68]	@ (8009ce4 <vTaskSwitchContext+0xb0>)
 8009c9e:	4413      	add	r3, r2
 8009ca0:	613b      	str	r3, [r7, #16]
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	605a      	str	r2, [r3, #4]
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d104      	bne.n	8009cc2 <vTaskSwitchContext+0x8e>
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	605a      	str	r2, [r3, #4]
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	4a07      	ldr	r2, [pc, #28]	@ (8009ce8 <vTaskSwitchContext+0xb4>)
 8009cca:	6013      	str	r3, [r2, #0]
}
 8009ccc:	bf00      	nop
 8009cce:	371c      	adds	r7, #28
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	20001690 	.word	0x20001690
 8009cdc:	2000167c 	.word	0x2000167c
 8009ce0:	20001670 	.word	0x20001670
 8009ce4:	2000156c 	.word	0x2000156c
 8009ce8:	20001568 	.word	0x20001568

08009cec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009cf4:	f000 f852 	bl	8009d9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009cf8:	4b06      	ldr	r3, [pc, #24]	@ (8009d14 <prvIdleTask+0x28>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d9f9      	bls.n	8009cf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d00:	4b05      	ldr	r3, [pc, #20]	@ (8009d18 <prvIdleTask+0x2c>)
 8009d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d06:	601a      	str	r2, [r3, #0]
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d10:	e7f0      	b.n	8009cf4 <prvIdleTask+0x8>
 8009d12:	bf00      	nop
 8009d14:	2000156c 	.word	0x2000156c
 8009d18:	e000ed04 	.word	0xe000ed04

08009d1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d22:	2300      	movs	r3, #0
 8009d24:	607b      	str	r3, [r7, #4]
 8009d26:	e00c      	b.n	8009d42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4a12      	ldr	r2, [pc, #72]	@ (8009d7c <prvInitialiseTaskLists+0x60>)
 8009d34:	4413      	add	r3, r2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7ff fb32 	bl	80093a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	607b      	str	r3, [r7, #4]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b06      	cmp	r3, #6
 8009d46:	d9ef      	bls.n	8009d28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d48:	480d      	ldr	r0, [pc, #52]	@ (8009d80 <prvInitialiseTaskLists+0x64>)
 8009d4a:	f7ff fb29 	bl	80093a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d4e:	480d      	ldr	r0, [pc, #52]	@ (8009d84 <prvInitialiseTaskLists+0x68>)
 8009d50:	f7ff fb26 	bl	80093a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d54:	480c      	ldr	r0, [pc, #48]	@ (8009d88 <prvInitialiseTaskLists+0x6c>)
 8009d56:	f7ff fb23 	bl	80093a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d5a:	480c      	ldr	r0, [pc, #48]	@ (8009d8c <prvInitialiseTaskLists+0x70>)
 8009d5c:	f7ff fb20 	bl	80093a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d60:	480b      	ldr	r0, [pc, #44]	@ (8009d90 <prvInitialiseTaskLists+0x74>)
 8009d62:	f7ff fb1d 	bl	80093a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d66:	4b0b      	ldr	r3, [pc, #44]	@ (8009d94 <prvInitialiseTaskLists+0x78>)
 8009d68:	4a05      	ldr	r2, [pc, #20]	@ (8009d80 <prvInitialiseTaskLists+0x64>)
 8009d6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d98 <prvInitialiseTaskLists+0x7c>)
 8009d6e:	4a05      	ldr	r2, [pc, #20]	@ (8009d84 <prvInitialiseTaskLists+0x68>)
 8009d70:	601a      	str	r2, [r3, #0]
}
 8009d72:	bf00      	nop
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	2000156c 	.word	0x2000156c
 8009d80:	200015f8 	.word	0x200015f8
 8009d84:	2000160c 	.word	0x2000160c
 8009d88:	20001628 	.word	0x20001628
 8009d8c:	2000163c 	.word	0x2000163c
 8009d90:	20001654 	.word	0x20001654
 8009d94:	20001620 	.word	0x20001620
 8009d98:	20001624 	.word	0x20001624

08009d9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009da2:	e019      	b.n	8009dd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009da4:	f000 fa30 	bl	800a208 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da8:	4b10      	ldr	r3, [pc, #64]	@ (8009dec <prvCheckTasksWaitingTermination+0x50>)
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7ff fb7d 	bl	80094b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009dba:	4b0d      	ldr	r3, [pc, #52]	@ (8009df0 <prvCheckTasksWaitingTermination+0x54>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8009df0 <prvCheckTasksWaitingTermination+0x54>)
 8009dc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8009df4 <prvCheckTasksWaitingTermination+0x58>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	4a0a      	ldr	r2, [pc, #40]	@ (8009df4 <prvCheckTasksWaitingTermination+0x58>)
 8009dcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009dce:	f000 fa4d 	bl	800a26c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f810 	bl	8009df8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dd8:	4b06      	ldr	r3, [pc, #24]	@ (8009df4 <prvCheckTasksWaitingTermination+0x58>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1e1      	bne.n	8009da4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009de0:	bf00      	nop
 8009de2:	bf00      	nop
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	2000163c 	.word	0x2000163c
 8009df0:	20001668 	.word	0x20001668
 8009df4:	20001650 	.word	0x20001650

08009df8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d108      	bne.n	8009e1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 fba8 	bl	800a564 <vPortFree>
				vPortFree( pxTCB );
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fba5 	bl	800a564 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e1a:	e019      	b.n	8009e50 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d103      	bne.n	8009e2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fb9c 	bl	800a564 <vPortFree>
	}
 8009e2c:	e010      	b.n	8009e50 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d00b      	beq.n	8009e50 <prvDeleteTCB+0x58>
	__asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	60fb      	str	r3, [r7, #12]
}
 8009e4a:	bf00      	nop
 8009e4c:	bf00      	nop
 8009e4e:	e7fd      	b.n	8009e4c <prvDeleteTCB+0x54>
	}
 8009e50:	bf00      	nop
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8009e90 <prvResetNextTaskUnblockTime+0x38>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d104      	bne.n	8009e72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e68:	4b0a      	ldr	r3, [pc, #40]	@ (8009e94 <prvResetNextTaskUnblockTime+0x3c>)
 8009e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e70:	e008      	b.n	8009e84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e72:	4b07      	ldr	r3, [pc, #28]	@ (8009e90 <prvResetNextTaskUnblockTime+0x38>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	4a04      	ldr	r2, [pc, #16]	@ (8009e94 <prvResetNextTaskUnblockTime+0x3c>)
 8009e82:	6013      	str	r3, [r2, #0]
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	20001620 	.word	0x20001620
 8009e94:	20001688 	.word	0x20001688

08009e98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8009ecc <xTaskGetSchedulerState+0x34>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d102      	bne.n	8009eac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	607b      	str	r3, [r7, #4]
 8009eaa:	e008      	b.n	8009ebe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eac:	4b08      	ldr	r3, [pc, #32]	@ (8009ed0 <xTaskGetSchedulerState+0x38>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d102      	bne.n	8009eba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	607b      	str	r3, [r7, #4]
 8009eb8:	e001      	b.n	8009ebe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ebe:	687b      	ldr	r3, [r7, #4]
	}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	20001674 	.word	0x20001674
 8009ed0:	20001690 	.word	0x20001690

08009ed4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ede:	4b29      	ldr	r3, [pc, #164]	@ (8009f84 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ee4:	4b28      	ldr	r3, [pc, #160]	@ (8009f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7ff fae2 	bl	80094b4 <uxListRemove>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10b      	bne.n	8009f0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009ef6:	4b24      	ldr	r3, [pc, #144]	@ (8009f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efc:	2201      	movs	r2, #1
 8009efe:	fa02 f303 	lsl.w	r3, r2, r3
 8009f02:	43da      	mvns	r2, r3
 8009f04:	4b21      	ldr	r3, [pc, #132]	@ (8009f8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4013      	ands	r3, r2
 8009f0a:	4a20      	ldr	r2, [pc, #128]	@ (8009f8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f14:	d10a      	bne.n	8009f2c <prvAddCurrentTaskToDelayedList+0x58>
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d007      	beq.n	8009f2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8009f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	3304      	adds	r3, #4
 8009f22:	4619      	mov	r1, r3
 8009f24:	481a      	ldr	r0, [pc, #104]	@ (8009f90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009f26:	f7ff fa68 	bl	80093fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f2a:	e026      	b.n	8009f7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4413      	add	r3, r2
 8009f32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f34:	4b14      	ldr	r3, [pc, #80]	@ (8009f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d209      	bcs.n	8009f58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f44:	4b13      	ldr	r3, [pc, #76]	@ (8009f94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	4b0f      	ldr	r3, [pc, #60]	@ (8009f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4610      	mov	r0, r2
 8009f52:	f7ff fa76 	bl	8009442 <vListInsert>
}
 8009f56:	e010      	b.n	8009f7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f58:	4b0f      	ldr	r3, [pc, #60]	@ (8009f98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3304      	adds	r3, #4
 8009f62:	4619      	mov	r1, r3
 8009f64:	4610      	mov	r0, r2
 8009f66:	f7ff fa6c 	bl	8009442 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d202      	bcs.n	8009f7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009f74:	4a09      	ldr	r2, [pc, #36]	@ (8009f9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	6013      	str	r3, [r2, #0]
}
 8009f7a:	bf00      	nop
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	2000166c 	.word	0x2000166c
 8009f88:	20001568 	.word	0x20001568
 8009f8c:	20001670 	.word	0x20001670
 8009f90:	20001654 	.word	0x20001654
 8009f94:	20001624 	.word	0x20001624
 8009f98:	20001620 	.word	0x20001620
 8009f9c:	20001688 	.word	0x20001688

08009fa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	3b04      	subs	r3, #4
 8009fb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3b04      	subs	r3, #4
 8009fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f023 0201 	bic.w	r2, r3, #1
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3b04      	subs	r3, #4
 8009fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009fd0:	4a0c      	ldr	r2, [pc, #48]	@ (800a004 <pxPortInitialiseStack+0x64>)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	3b14      	subs	r3, #20
 8009fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3b04      	subs	r3, #4
 8009fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f06f 0202 	mvn.w	r2, #2
 8009fee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3b20      	subs	r3, #32
 8009ff4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	0800a009 	.word	0x0800a009

0800a008 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a00e:	2300      	movs	r3, #0
 800a010:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a012:	4b13      	ldr	r3, [pc, #76]	@ (800a060 <prvTaskExitError+0x58>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01a:	d00b      	beq.n	800a034 <prvTaskExitError+0x2c>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	60fb      	str	r3, [r7, #12]
}
 800a02e:	bf00      	nop
 800a030:	bf00      	nop
 800a032:	e7fd      	b.n	800a030 <prvTaskExitError+0x28>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	60bb      	str	r3, [r7, #8]
}
 800a046:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a048:	bf00      	nop
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d0fc      	beq.n	800a04a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a050:	bf00      	nop
 800a052:	bf00      	nop
 800a054:	3714      	adds	r7, #20
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	20000024 	.word	0x20000024
	...

0800a070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a070:	4b07      	ldr	r3, [pc, #28]	@ (800a090 <pxCurrentTCBConst2>)
 800a072:	6819      	ldr	r1, [r3, #0]
 800a074:	6808      	ldr	r0, [r1, #0]
 800a076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07a:	f380 8809 	msr	PSP, r0
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f04f 0000 	mov.w	r0, #0
 800a086:	f380 8811 	msr	BASEPRI, r0
 800a08a:	4770      	bx	lr
 800a08c:	f3af 8000 	nop.w

0800a090 <pxCurrentTCBConst2>:
 800a090:	20001568 	.word	0x20001568
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop

0800a098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a098:	4808      	ldr	r0, [pc, #32]	@ (800a0bc <prvPortStartFirstTask+0x24>)
 800a09a:	6800      	ldr	r0, [r0, #0]
 800a09c:	6800      	ldr	r0, [r0, #0]
 800a09e:	f380 8808 	msr	MSP, r0
 800a0a2:	f04f 0000 	mov.w	r0, #0
 800a0a6:	f380 8814 	msr	CONTROL, r0
 800a0aa:	b662      	cpsie	i
 800a0ac:	b661      	cpsie	f
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	df00      	svc	0
 800a0b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0ba:	bf00      	nop
 800a0bc:	e000ed08 	.word	0xe000ed08

0800a0c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0c6:	4b47      	ldr	r3, [pc, #284]	@ (800a1e4 <xPortStartScheduler+0x124>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a47      	ldr	r2, [pc, #284]	@ (800a1e8 <xPortStartScheduler+0x128>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d10b      	bne.n	800a0e8 <xPortStartScheduler+0x28>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	613b      	str	r3, [r7, #16]
}
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	e7fd      	b.n	800a0e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0e8:	4b3e      	ldr	r3, [pc, #248]	@ (800a1e4 <xPortStartScheduler+0x124>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a3f      	ldr	r2, [pc, #252]	@ (800a1ec <xPortStartScheduler+0x12c>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d10b      	bne.n	800a10a <xPortStartScheduler+0x4a>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	60fb      	str	r3, [r7, #12]
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop
 800a108:	e7fd      	b.n	800a106 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a10a:	4b39      	ldr	r3, [pc, #228]	@ (800a1f0 <xPortStartScheduler+0x130>)
 800a10c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	22ff      	movs	r2, #255	@ 0xff
 800a11a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	b2db      	uxtb	r3, r3
 800a122:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	b2db      	uxtb	r3, r3
 800a128:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a12c:	b2da      	uxtb	r2, r3
 800a12e:	4b31      	ldr	r3, [pc, #196]	@ (800a1f4 <xPortStartScheduler+0x134>)
 800a130:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a132:	4b31      	ldr	r3, [pc, #196]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a134:	2207      	movs	r2, #7
 800a136:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a138:	e009      	b.n	800a14e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a13a:	4b2f      	ldr	r3, [pc, #188]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3b01      	subs	r3, #1
 800a140:	4a2d      	ldr	r2, [pc, #180]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a142:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a144:	78fb      	ldrb	r3, [r7, #3]
 800a146:	b2db      	uxtb	r3, r3
 800a148:	005b      	lsls	r3, r3, #1
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a14e:	78fb      	ldrb	r3, [r7, #3]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a156:	2b80      	cmp	r3, #128	@ 0x80
 800a158:	d0ef      	beq.n	800a13a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a15a:	4b27      	ldr	r3, [pc, #156]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f1c3 0307 	rsb	r3, r3, #7
 800a162:	2b04      	cmp	r3, #4
 800a164:	d00b      	beq.n	800a17e <xPortStartScheduler+0xbe>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60bb      	str	r3, [r7, #8]
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	e7fd      	b.n	800a17a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a17e:	4b1e      	ldr	r3, [pc, #120]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	021b      	lsls	r3, r3, #8
 800a184:	4a1c      	ldr	r2, [pc, #112]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a186:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a188:	4b1b      	ldr	r3, [pc, #108]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a190:	4a19      	ldr	r2, [pc, #100]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a192:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	b2da      	uxtb	r2, r3
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a19c:	4b17      	ldr	r3, [pc, #92]	@ (800a1fc <xPortStartScheduler+0x13c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a16      	ldr	r2, [pc, #88]	@ (800a1fc <xPortStartScheduler+0x13c>)
 800a1a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a1a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1a8:	4b14      	ldr	r3, [pc, #80]	@ (800a1fc <xPortStartScheduler+0x13c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a13      	ldr	r2, [pc, #76]	@ (800a1fc <xPortStartScheduler+0x13c>)
 800a1ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a1b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1b4:	f000 f8da 	bl	800a36c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1b8:	4b11      	ldr	r3, [pc, #68]	@ (800a200 <xPortStartScheduler+0x140>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1be:	f000 f8f9 	bl	800a3b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1c2:	4b10      	ldr	r3, [pc, #64]	@ (800a204 <xPortStartScheduler+0x144>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a0f      	ldr	r2, [pc, #60]	@ (800a204 <xPortStartScheduler+0x144>)
 800a1c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a1cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1ce:	f7ff ff63 	bl	800a098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1d2:	f7ff fd2f 	bl	8009c34 <vTaskSwitchContext>
	prvTaskExitError();
 800a1d6:	f7ff ff17 	bl	800a008 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3718      	adds	r7, #24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	e000ed00 	.word	0xe000ed00
 800a1e8:	410fc271 	.word	0x410fc271
 800a1ec:	410fc270 	.word	0x410fc270
 800a1f0:	e000e400 	.word	0xe000e400
 800a1f4:	20001694 	.word	0x20001694
 800a1f8:	20001698 	.word	0x20001698
 800a1fc:	e000ed20 	.word	0xe000ed20
 800a200:	20000024 	.word	0x20000024
 800a204:	e000ef34 	.word	0xe000ef34

0800a208 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	607b      	str	r3, [r7, #4]
}
 800a220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a222:	4b10      	ldr	r3, [pc, #64]	@ (800a264 <vPortEnterCritical+0x5c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	3301      	adds	r3, #1
 800a228:	4a0e      	ldr	r2, [pc, #56]	@ (800a264 <vPortEnterCritical+0x5c>)
 800a22a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a22c:	4b0d      	ldr	r3, [pc, #52]	@ (800a264 <vPortEnterCritical+0x5c>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d110      	bne.n	800a256 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a234:	4b0c      	ldr	r3, [pc, #48]	@ (800a268 <vPortEnterCritical+0x60>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00b      	beq.n	800a256 <vPortEnterCritical+0x4e>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	603b      	str	r3, [r7, #0]
}
 800a250:	bf00      	nop
 800a252:	bf00      	nop
 800a254:	e7fd      	b.n	800a252 <vPortEnterCritical+0x4a>
	}
}
 800a256:	bf00      	nop
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	20000024 	.word	0x20000024
 800a268:	e000ed04 	.word	0xe000ed04

0800a26c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a272:	4b12      	ldr	r3, [pc, #72]	@ (800a2bc <vPortExitCritical+0x50>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10b      	bne.n	800a292 <vPortExitCritical+0x26>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	607b      	str	r3, [r7, #4]
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	e7fd      	b.n	800a28e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a292:	4b0a      	ldr	r3, [pc, #40]	@ (800a2bc <vPortExitCritical+0x50>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3b01      	subs	r3, #1
 800a298:	4a08      	ldr	r2, [pc, #32]	@ (800a2bc <vPortExitCritical+0x50>)
 800a29a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a29c:	4b07      	ldr	r3, [pc, #28]	@ (800a2bc <vPortExitCritical+0x50>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <vPortExitCritical+0x44>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	20000024 	.word	0x20000024

0800a2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2c0:	f3ef 8009 	mrs	r0, PSP
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	4b15      	ldr	r3, [pc, #84]	@ (800a320 <pxCurrentTCBConst>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	f01e 0f10 	tst.w	lr, #16
 800a2d0:	bf08      	it	eq
 800a2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2da:	6010      	str	r0, [r2, #0]
 800a2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a2e4:	f380 8811 	msr	BASEPRI, r0
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f7ff fca0 	bl	8009c34 <vTaskSwitchContext>
 800a2f4:	f04f 0000 	mov.w	r0, #0
 800a2f8:	f380 8811 	msr	BASEPRI, r0
 800a2fc:	bc09      	pop	{r0, r3}
 800a2fe:	6819      	ldr	r1, [r3, #0]
 800a300:	6808      	ldr	r0, [r1, #0]
 800a302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a306:	f01e 0f10 	tst.w	lr, #16
 800a30a:	bf08      	it	eq
 800a30c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a310:	f380 8809 	msr	PSP, r0
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	f3af 8000 	nop.w

0800a320 <pxCurrentTCBConst>:
 800a320:	20001568 	.word	0x20001568
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop

0800a328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	607b      	str	r3, [r7, #4]
}
 800a340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a342:	f7ff fbbd 	bl	8009ac0 <xTaskIncrementTick>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a34c:	4b06      	ldr	r3, [pc, #24]	@ (800a368 <xPortSysTickHandler+0x40>)
 800a34e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	2300      	movs	r3, #0
 800a356:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	f383 8811 	msr	BASEPRI, r3
}
 800a35e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a360:	bf00      	nop
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	e000ed04 	.word	0xe000ed04

0800a36c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a36c:	b480      	push	{r7}
 800a36e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a370:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a0 <vPortSetupTimerInterrupt+0x34>)
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a376:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a4 <vPortSetupTimerInterrupt+0x38>)
 800a378:	2200      	movs	r2, #0
 800a37a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a37c:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a8 <vPortSetupTimerInterrupt+0x3c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a0a      	ldr	r2, [pc, #40]	@ (800a3ac <vPortSetupTimerInterrupt+0x40>)
 800a382:	fba2 2303 	umull	r2, r3, r2, r3
 800a386:	099b      	lsrs	r3, r3, #6
 800a388:	4a09      	ldr	r2, [pc, #36]	@ (800a3b0 <vPortSetupTimerInterrupt+0x44>)
 800a38a:	3b01      	subs	r3, #1
 800a38c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a38e:	4b04      	ldr	r3, [pc, #16]	@ (800a3a0 <vPortSetupTimerInterrupt+0x34>)
 800a390:	2207      	movs	r2, #7
 800a392:	601a      	str	r2, [r3, #0]
}
 800a394:	bf00      	nop
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	e000e010 	.word	0xe000e010
 800a3a4:	e000e018 	.word	0xe000e018
 800a3a8:	20000004 	.word	0x20000004
 800a3ac:	10624dd3 	.word	0x10624dd3
 800a3b0:	e000e014 	.word	0xe000e014

0800a3b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a3c4 <vPortEnableVFP+0x10>
 800a3b8:	6801      	ldr	r1, [r0, #0]
 800a3ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a3be:	6001      	str	r1, [r0, #0]
 800a3c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3c2:	bf00      	nop
 800a3c4:	e000ed88 	.word	0xe000ed88

0800a3c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08a      	sub	sp, #40	@ 0x28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3d4:	f7ff fac8 	bl	8009968 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3d8:	4b5c      	ldr	r3, [pc, #368]	@ (800a54c <pvPortMalloc+0x184>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3e0:	f000 f924 	bl	800a62c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3e4:	4b5a      	ldr	r3, [pc, #360]	@ (800a550 <pvPortMalloc+0x188>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f040 8095 	bne.w	800a51c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d01e      	beq.n	800a436 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a3f8:	2208      	movs	r2, #8
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f003 0307 	and.w	r3, r3, #7
 800a406:	2b00      	cmp	r3, #0
 800a408:	d015      	beq.n	800a436 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f023 0307 	bic.w	r3, r3, #7
 800a410:	3308      	adds	r3, #8
 800a412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00b      	beq.n	800a436 <pvPortMalloc+0x6e>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	617b      	str	r3, [r7, #20]
}
 800a430:	bf00      	nop
 800a432:	bf00      	nop
 800a434:	e7fd      	b.n	800a432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d06f      	beq.n	800a51c <pvPortMalloc+0x154>
 800a43c:	4b45      	ldr	r3, [pc, #276]	@ (800a554 <pvPortMalloc+0x18c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	429a      	cmp	r2, r3
 800a444:	d86a      	bhi.n	800a51c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a446:	4b44      	ldr	r3, [pc, #272]	@ (800a558 <pvPortMalloc+0x190>)
 800a448:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a44a:	4b43      	ldr	r3, [pc, #268]	@ (800a558 <pvPortMalloc+0x190>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a450:	e004      	b.n	800a45c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a454:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	429a      	cmp	r2, r3
 800a464:	d903      	bls.n	800a46e <pvPortMalloc+0xa6>
 800a466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1f1      	bne.n	800a452 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a46e:	4b37      	ldr	r3, [pc, #220]	@ (800a54c <pvPortMalloc+0x184>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a474:	429a      	cmp	r2, r3
 800a476:	d051      	beq.n	800a51c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2208      	movs	r2, #8
 800a47e:	4413      	add	r3, r2
 800a480:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	6a3b      	ldr	r3, [r7, #32]
 800a488:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	1ad2      	subs	r2, r2, r3
 800a492:	2308      	movs	r3, #8
 800a494:	005b      	lsls	r3, r3, #1
 800a496:	429a      	cmp	r2, r3
 800a498:	d920      	bls.n	800a4dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a49a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4413      	add	r3, r2
 800a4a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	f003 0307 	and.w	r3, r3, #7
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00b      	beq.n	800a4c4 <pvPortMalloc+0xfc>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	613b      	str	r3, [r7, #16]
}
 800a4be:	bf00      	nop
 800a4c0:	bf00      	nop
 800a4c2:	e7fd      	b.n	800a4c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	1ad2      	subs	r2, r2, r3
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4d6:	69b8      	ldr	r0, [r7, #24]
 800a4d8:	f000 f90a 	bl	800a6f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4dc:	4b1d      	ldr	r3, [pc, #116]	@ (800a554 <pvPortMalloc+0x18c>)
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	4a1b      	ldr	r2, [pc, #108]	@ (800a554 <pvPortMalloc+0x18c>)
 800a4e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4ea:	4b1a      	ldr	r3, [pc, #104]	@ (800a554 <pvPortMalloc+0x18c>)
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	4b1b      	ldr	r3, [pc, #108]	@ (800a55c <pvPortMalloc+0x194>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d203      	bcs.n	800a4fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4f6:	4b17      	ldr	r3, [pc, #92]	@ (800a554 <pvPortMalloc+0x18c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a18      	ldr	r2, [pc, #96]	@ (800a55c <pvPortMalloc+0x194>)
 800a4fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	4b13      	ldr	r3, [pc, #76]	@ (800a550 <pvPortMalloc+0x188>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	431a      	orrs	r2, r3
 800a508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a512:	4b13      	ldr	r3, [pc, #76]	@ (800a560 <pvPortMalloc+0x198>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3301      	adds	r3, #1
 800a518:	4a11      	ldr	r2, [pc, #68]	@ (800a560 <pvPortMalloc+0x198>)
 800a51a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a51c:	f7ff fa32 	bl	8009984 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	f003 0307 	and.w	r3, r3, #7
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00b      	beq.n	800a542 <pvPortMalloc+0x17a>
	__asm volatile
 800a52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	60fb      	str	r3, [r7, #12]
}
 800a53c:	bf00      	nop
 800a53e:	bf00      	nop
 800a540:	e7fd      	b.n	800a53e <pvPortMalloc+0x176>
	return pvReturn;
 800a542:	69fb      	ldr	r3, [r7, #28]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3728      	adds	r7, #40	@ 0x28
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	2000225c 	.word	0x2000225c
 800a550:	20002270 	.word	0x20002270
 800a554:	20002260 	.word	0x20002260
 800a558:	20002254 	.word	0x20002254
 800a55c:	20002264 	.word	0x20002264
 800a560:	20002268 	.word	0x20002268

0800a564 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d04f      	beq.n	800a616 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a576:	2308      	movs	r3, #8
 800a578:	425b      	negs	r3, r3
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	4413      	add	r3, r2
 800a57e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	685a      	ldr	r2, [r3, #4]
 800a588:	4b25      	ldr	r3, [pc, #148]	@ (800a620 <vPortFree+0xbc>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4013      	ands	r3, r2
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10b      	bne.n	800a5aa <vPortFree+0x46>
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	60fb      	str	r3, [r7, #12]
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop
 800a5a8:	e7fd      	b.n	800a5a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00b      	beq.n	800a5ca <vPortFree+0x66>
	__asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	60bb      	str	r3, [r7, #8]
}
 800a5c4:	bf00      	nop
 800a5c6:	bf00      	nop
 800a5c8:	e7fd      	b.n	800a5c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	685a      	ldr	r2, [r3, #4]
 800a5ce:	4b14      	ldr	r3, [pc, #80]	@ (800a620 <vPortFree+0xbc>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01e      	beq.n	800a616 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d11a      	bne.n	800a616 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	685a      	ldr	r2, [r3, #4]
 800a5e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a620 <vPortFree+0xbc>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	43db      	mvns	r3, r3
 800a5ea:	401a      	ands	r2, r3
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5f0:	f7ff f9ba 	bl	8009968 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a624 <vPortFree+0xc0>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	4a09      	ldr	r2, [pc, #36]	@ (800a624 <vPortFree+0xc0>)
 800a600:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a602:	6938      	ldr	r0, [r7, #16]
 800a604:	f000 f874 	bl	800a6f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a608:	4b07      	ldr	r3, [pc, #28]	@ (800a628 <vPortFree+0xc4>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3301      	adds	r3, #1
 800a60e:	4a06      	ldr	r2, [pc, #24]	@ (800a628 <vPortFree+0xc4>)
 800a610:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a612:	f7ff f9b7 	bl	8009984 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a616:	bf00      	nop
 800a618:	3718      	adds	r7, #24
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	20002270 	.word	0x20002270
 800a624:	20002260 	.word	0x20002260
 800a628:	2000226c 	.word	0x2000226c

0800a62c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a632:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a636:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a638:	4b27      	ldr	r3, [pc, #156]	@ (800a6d8 <prvHeapInit+0xac>)
 800a63a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f003 0307 	and.w	r3, r3, #7
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00c      	beq.n	800a660 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	3307      	adds	r3, #7
 800a64a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f023 0307 	bic.w	r3, r3, #7
 800a652:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	4a1f      	ldr	r2, [pc, #124]	@ (800a6d8 <prvHeapInit+0xac>)
 800a65c:	4413      	add	r3, r2
 800a65e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a664:	4a1d      	ldr	r2, [pc, #116]	@ (800a6dc <prvHeapInit+0xb0>)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a66a:	4b1c      	ldr	r3, [pc, #112]	@ (800a6dc <prvHeapInit+0xb0>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	4413      	add	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a678:	2208      	movs	r2, #8
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	1a9b      	subs	r3, r3, r2
 800a67e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 0307 	bic.w	r3, r3, #7
 800a686:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	4a15      	ldr	r2, [pc, #84]	@ (800a6e0 <prvHeapInit+0xb4>)
 800a68c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a68e:	4b14      	ldr	r3, [pc, #80]	@ (800a6e0 <prvHeapInit+0xb4>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2200      	movs	r2, #0
 800a694:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a696:	4b12      	ldr	r3, [pc, #72]	@ (800a6e0 <prvHeapInit+0xb4>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2200      	movs	r2, #0
 800a69c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	1ad2      	subs	r2, r2, r3
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a6e0 <prvHeapInit+0xb4>)
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	4a0a      	ldr	r2, [pc, #40]	@ (800a6e4 <prvHeapInit+0xb8>)
 800a6ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	4a09      	ldr	r2, [pc, #36]	@ (800a6e8 <prvHeapInit+0xbc>)
 800a6c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6c4:	4b09      	ldr	r3, [pc, #36]	@ (800a6ec <prvHeapInit+0xc0>)
 800a6c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a6ca:	601a      	str	r2, [r3, #0]
}
 800a6cc:	bf00      	nop
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	2000169c 	.word	0x2000169c
 800a6dc:	20002254 	.word	0x20002254
 800a6e0:	2000225c 	.word	0x2000225c
 800a6e4:	20002264 	.word	0x20002264
 800a6e8:	20002260 	.word	0x20002260
 800a6ec:	20002270 	.word	0x20002270

0800a6f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6f8:	4b28      	ldr	r3, [pc, #160]	@ (800a79c <prvInsertBlockIntoFreeList+0xac>)
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	e002      	b.n	800a704 <prvInsertBlockIntoFreeList+0x14>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	60fb      	str	r3, [r7, #12]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d8f7      	bhi.n	800a6fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	4413      	add	r3, r2
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d108      	bne.n	800a732 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	685a      	ldr	r2, [r3, #4]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	441a      	add	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	441a      	add	r2, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	429a      	cmp	r2, r3
 800a744:	d118      	bne.n	800a778 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	4b15      	ldr	r3, [pc, #84]	@ (800a7a0 <prvInsertBlockIntoFreeList+0xb0>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d00d      	beq.n	800a76e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	441a      	add	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	601a      	str	r2, [r3, #0]
 800a76c:	e008      	b.n	800a780 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a76e:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a0 <prvInsertBlockIntoFreeList+0xb0>)
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	601a      	str	r2, [r3, #0]
 800a776:	e003      	b.n	800a780 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	429a      	cmp	r2, r3
 800a786:	d002      	beq.n	800a78e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a78e:	bf00      	nop
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	20002254 	.word	0x20002254
 800a7a0:	2000225c 	.word	0x2000225c

0800a7a4 <srand>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	4b10      	ldr	r3, [pc, #64]	@ (800a7e8 <srand+0x44>)
 800a7a8:	681d      	ldr	r5, [r3, #0]
 800a7aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	b9b3      	cbnz	r3, 800a7de <srand+0x3a>
 800a7b0:	2018      	movs	r0, #24
 800a7b2:	f000 fb5f 	bl	800ae74 <malloc>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	6328      	str	r0, [r5, #48]	@ 0x30
 800a7ba:	b920      	cbnz	r0, 800a7c6 <srand+0x22>
 800a7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a7ec <srand+0x48>)
 800a7be:	480c      	ldr	r0, [pc, #48]	@ (800a7f0 <srand+0x4c>)
 800a7c0:	2146      	movs	r1, #70	@ 0x46
 800a7c2:	f000 faef 	bl	800ada4 <__assert_func>
 800a7c6:	490b      	ldr	r1, [pc, #44]	@ (800a7f4 <srand+0x50>)
 800a7c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a7f8 <srand+0x54>)
 800a7ca:	e9c0 1300 	strd	r1, r3, [r0]
 800a7ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a7fc <srand+0x58>)
 800a7d0:	6083      	str	r3, [r0, #8]
 800a7d2:	230b      	movs	r3, #11
 800a7d4:	8183      	strh	r3, [r0, #12]
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	2001      	movs	r0, #1
 800a7da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a7de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	611c      	str	r4, [r3, #16]
 800a7e4:	615a      	str	r2, [r3, #20]
 800a7e6:	bd38      	pop	{r3, r4, r5, pc}
 800a7e8:	20000034 	.word	0x20000034
 800a7ec:	0800bc9c 	.word	0x0800bc9c
 800a7f0:	0800bcb3 	.word	0x0800bcb3
 800a7f4:	abcd330e 	.word	0xabcd330e
 800a7f8:	e66d1234 	.word	0xe66d1234
 800a7fc:	0005deec 	.word	0x0005deec

0800a800 <rand>:
 800a800:	4b16      	ldr	r3, [pc, #88]	@ (800a85c <rand+0x5c>)
 800a802:	b510      	push	{r4, lr}
 800a804:	681c      	ldr	r4, [r3, #0]
 800a806:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a808:	b9b3      	cbnz	r3, 800a838 <rand+0x38>
 800a80a:	2018      	movs	r0, #24
 800a80c:	f000 fb32 	bl	800ae74 <malloc>
 800a810:	4602      	mov	r2, r0
 800a812:	6320      	str	r0, [r4, #48]	@ 0x30
 800a814:	b920      	cbnz	r0, 800a820 <rand+0x20>
 800a816:	4b12      	ldr	r3, [pc, #72]	@ (800a860 <rand+0x60>)
 800a818:	4812      	ldr	r0, [pc, #72]	@ (800a864 <rand+0x64>)
 800a81a:	2152      	movs	r1, #82	@ 0x52
 800a81c:	f000 fac2 	bl	800ada4 <__assert_func>
 800a820:	4911      	ldr	r1, [pc, #68]	@ (800a868 <rand+0x68>)
 800a822:	4b12      	ldr	r3, [pc, #72]	@ (800a86c <rand+0x6c>)
 800a824:	e9c0 1300 	strd	r1, r3, [r0]
 800a828:	4b11      	ldr	r3, [pc, #68]	@ (800a870 <rand+0x70>)
 800a82a:	6083      	str	r3, [r0, #8]
 800a82c:	230b      	movs	r3, #11
 800a82e:	8183      	strh	r3, [r0, #12]
 800a830:	2100      	movs	r1, #0
 800a832:	2001      	movs	r0, #1
 800a834:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a838:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a83a:	480e      	ldr	r0, [pc, #56]	@ (800a874 <rand+0x74>)
 800a83c:	690b      	ldr	r3, [r1, #16]
 800a83e:	694c      	ldr	r4, [r1, #20]
 800a840:	4a0d      	ldr	r2, [pc, #52]	@ (800a878 <rand+0x78>)
 800a842:	4358      	muls	r0, r3
 800a844:	fb02 0004 	mla	r0, r2, r4, r0
 800a848:	fba3 3202 	umull	r3, r2, r3, r2
 800a84c:	3301      	adds	r3, #1
 800a84e:	eb40 0002 	adc.w	r0, r0, r2
 800a852:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a856:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a85a:	bd10      	pop	{r4, pc}
 800a85c:	20000034 	.word	0x20000034
 800a860:	0800bc9c 	.word	0x0800bc9c
 800a864:	0800bcb3 	.word	0x0800bcb3
 800a868:	abcd330e 	.word	0xabcd330e
 800a86c:	e66d1234 	.word	0xe66d1234
 800a870:	0005deec 	.word	0x0005deec
 800a874:	5851f42d 	.word	0x5851f42d
 800a878:	4c957f2d 	.word	0x4c957f2d

0800a87c <std>:
 800a87c:	2300      	movs	r3, #0
 800a87e:	b510      	push	{r4, lr}
 800a880:	4604      	mov	r4, r0
 800a882:	e9c0 3300 	strd	r3, r3, [r0]
 800a886:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a88a:	6083      	str	r3, [r0, #8]
 800a88c:	8181      	strh	r1, [r0, #12]
 800a88e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a890:	81c2      	strh	r2, [r0, #14]
 800a892:	6183      	str	r3, [r0, #24]
 800a894:	4619      	mov	r1, r3
 800a896:	2208      	movs	r2, #8
 800a898:	305c      	adds	r0, #92	@ 0x5c
 800a89a:	f000 f9f9 	bl	800ac90 <memset>
 800a89e:	4b0d      	ldr	r3, [pc, #52]	@ (800a8d4 <std+0x58>)
 800a8a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a8a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a8d8 <std+0x5c>)
 800a8a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a8a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a8dc <std+0x60>)
 800a8a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a8aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e0 <std+0x64>)
 800a8ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800a8ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e4 <std+0x68>)
 800a8b0:	6224      	str	r4, [r4, #32]
 800a8b2:	429c      	cmp	r4, r3
 800a8b4:	d006      	beq.n	800a8c4 <std+0x48>
 800a8b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a8ba:	4294      	cmp	r4, r2
 800a8bc:	d002      	beq.n	800a8c4 <std+0x48>
 800a8be:	33d0      	adds	r3, #208	@ 0xd0
 800a8c0:	429c      	cmp	r4, r3
 800a8c2:	d105      	bne.n	800a8d0 <std+0x54>
 800a8c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a8c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8cc:	f000 ba58 	b.w	800ad80 <__retarget_lock_init_recursive>
 800a8d0:	bd10      	pop	{r4, pc}
 800a8d2:	bf00      	nop
 800a8d4:	0800aae1 	.word	0x0800aae1
 800a8d8:	0800ab03 	.word	0x0800ab03
 800a8dc:	0800ab3b 	.word	0x0800ab3b
 800a8e0:	0800ab5f 	.word	0x0800ab5f
 800a8e4:	20002274 	.word	0x20002274

0800a8e8 <stdio_exit_handler>:
 800a8e8:	4a02      	ldr	r2, [pc, #8]	@ (800a8f4 <stdio_exit_handler+0xc>)
 800a8ea:	4903      	ldr	r1, [pc, #12]	@ (800a8f8 <stdio_exit_handler+0x10>)
 800a8ec:	4803      	ldr	r0, [pc, #12]	@ (800a8fc <stdio_exit_handler+0x14>)
 800a8ee:	f000 b869 	b.w	800a9c4 <_fwalk_sglue>
 800a8f2:	bf00      	nop
 800a8f4:	20000028 	.word	0x20000028
 800a8f8:	0800b689 	.word	0x0800b689
 800a8fc:	20000038 	.word	0x20000038

0800a900 <cleanup_stdio>:
 800a900:	6841      	ldr	r1, [r0, #4]
 800a902:	4b0c      	ldr	r3, [pc, #48]	@ (800a934 <cleanup_stdio+0x34>)
 800a904:	4299      	cmp	r1, r3
 800a906:	b510      	push	{r4, lr}
 800a908:	4604      	mov	r4, r0
 800a90a:	d001      	beq.n	800a910 <cleanup_stdio+0x10>
 800a90c:	f000 febc 	bl	800b688 <_fflush_r>
 800a910:	68a1      	ldr	r1, [r4, #8]
 800a912:	4b09      	ldr	r3, [pc, #36]	@ (800a938 <cleanup_stdio+0x38>)
 800a914:	4299      	cmp	r1, r3
 800a916:	d002      	beq.n	800a91e <cleanup_stdio+0x1e>
 800a918:	4620      	mov	r0, r4
 800a91a:	f000 feb5 	bl	800b688 <_fflush_r>
 800a91e:	68e1      	ldr	r1, [r4, #12]
 800a920:	4b06      	ldr	r3, [pc, #24]	@ (800a93c <cleanup_stdio+0x3c>)
 800a922:	4299      	cmp	r1, r3
 800a924:	d004      	beq.n	800a930 <cleanup_stdio+0x30>
 800a926:	4620      	mov	r0, r4
 800a928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a92c:	f000 beac 	b.w	800b688 <_fflush_r>
 800a930:	bd10      	pop	{r4, pc}
 800a932:	bf00      	nop
 800a934:	20002274 	.word	0x20002274
 800a938:	200022dc 	.word	0x200022dc
 800a93c:	20002344 	.word	0x20002344

0800a940 <global_stdio_init.part.0>:
 800a940:	b510      	push	{r4, lr}
 800a942:	4b0b      	ldr	r3, [pc, #44]	@ (800a970 <global_stdio_init.part.0+0x30>)
 800a944:	4c0b      	ldr	r4, [pc, #44]	@ (800a974 <global_stdio_init.part.0+0x34>)
 800a946:	4a0c      	ldr	r2, [pc, #48]	@ (800a978 <global_stdio_init.part.0+0x38>)
 800a948:	601a      	str	r2, [r3, #0]
 800a94a:	4620      	mov	r0, r4
 800a94c:	2200      	movs	r2, #0
 800a94e:	2104      	movs	r1, #4
 800a950:	f7ff ff94 	bl	800a87c <std>
 800a954:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a958:	2201      	movs	r2, #1
 800a95a:	2109      	movs	r1, #9
 800a95c:	f7ff ff8e 	bl	800a87c <std>
 800a960:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a964:	2202      	movs	r2, #2
 800a966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a96a:	2112      	movs	r1, #18
 800a96c:	f7ff bf86 	b.w	800a87c <std>
 800a970:	200023ac 	.word	0x200023ac
 800a974:	20002274 	.word	0x20002274
 800a978:	0800a8e9 	.word	0x0800a8e9

0800a97c <__sfp_lock_acquire>:
 800a97c:	4801      	ldr	r0, [pc, #4]	@ (800a984 <__sfp_lock_acquire+0x8>)
 800a97e:	f000 ba00 	b.w	800ad82 <__retarget_lock_acquire_recursive>
 800a982:	bf00      	nop
 800a984:	200023b5 	.word	0x200023b5

0800a988 <__sfp_lock_release>:
 800a988:	4801      	ldr	r0, [pc, #4]	@ (800a990 <__sfp_lock_release+0x8>)
 800a98a:	f000 b9fb 	b.w	800ad84 <__retarget_lock_release_recursive>
 800a98e:	bf00      	nop
 800a990:	200023b5 	.word	0x200023b5

0800a994 <__sinit>:
 800a994:	b510      	push	{r4, lr}
 800a996:	4604      	mov	r4, r0
 800a998:	f7ff fff0 	bl	800a97c <__sfp_lock_acquire>
 800a99c:	6a23      	ldr	r3, [r4, #32]
 800a99e:	b11b      	cbz	r3, 800a9a8 <__sinit+0x14>
 800a9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9a4:	f7ff bff0 	b.w	800a988 <__sfp_lock_release>
 800a9a8:	4b04      	ldr	r3, [pc, #16]	@ (800a9bc <__sinit+0x28>)
 800a9aa:	6223      	str	r3, [r4, #32]
 800a9ac:	4b04      	ldr	r3, [pc, #16]	@ (800a9c0 <__sinit+0x2c>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1f5      	bne.n	800a9a0 <__sinit+0xc>
 800a9b4:	f7ff ffc4 	bl	800a940 <global_stdio_init.part.0>
 800a9b8:	e7f2      	b.n	800a9a0 <__sinit+0xc>
 800a9ba:	bf00      	nop
 800a9bc:	0800a901 	.word	0x0800a901
 800a9c0:	200023ac 	.word	0x200023ac

0800a9c4 <_fwalk_sglue>:
 800a9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9c8:	4607      	mov	r7, r0
 800a9ca:	4688      	mov	r8, r1
 800a9cc:	4614      	mov	r4, r2
 800a9ce:	2600      	movs	r6, #0
 800a9d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9d4:	f1b9 0901 	subs.w	r9, r9, #1
 800a9d8:	d505      	bpl.n	800a9e6 <_fwalk_sglue+0x22>
 800a9da:	6824      	ldr	r4, [r4, #0]
 800a9dc:	2c00      	cmp	r4, #0
 800a9de:	d1f7      	bne.n	800a9d0 <_fwalk_sglue+0xc>
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9e6:	89ab      	ldrh	r3, [r5, #12]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d907      	bls.n	800a9fc <_fwalk_sglue+0x38>
 800a9ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	d003      	beq.n	800a9fc <_fwalk_sglue+0x38>
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	47c0      	blx	r8
 800a9fa:	4306      	orrs	r6, r0
 800a9fc:	3568      	adds	r5, #104	@ 0x68
 800a9fe:	e7e9      	b.n	800a9d4 <_fwalk_sglue+0x10>

0800aa00 <iprintf>:
 800aa00:	b40f      	push	{r0, r1, r2, r3}
 800aa02:	b507      	push	{r0, r1, r2, lr}
 800aa04:	4906      	ldr	r1, [pc, #24]	@ (800aa20 <iprintf+0x20>)
 800aa06:	ab04      	add	r3, sp, #16
 800aa08:	6808      	ldr	r0, [r1, #0]
 800aa0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa0e:	6881      	ldr	r1, [r0, #8]
 800aa10:	9301      	str	r3, [sp, #4]
 800aa12:	f000 fb0f 	bl	800b034 <_vfiprintf_r>
 800aa16:	b003      	add	sp, #12
 800aa18:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa1c:	b004      	add	sp, #16
 800aa1e:	4770      	bx	lr
 800aa20:	20000034 	.word	0x20000034

0800aa24 <_puts_r>:
 800aa24:	6a03      	ldr	r3, [r0, #32]
 800aa26:	b570      	push	{r4, r5, r6, lr}
 800aa28:	6884      	ldr	r4, [r0, #8]
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	460e      	mov	r6, r1
 800aa2e:	b90b      	cbnz	r3, 800aa34 <_puts_r+0x10>
 800aa30:	f7ff ffb0 	bl	800a994 <__sinit>
 800aa34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa36:	07db      	lsls	r3, r3, #31
 800aa38:	d405      	bmi.n	800aa46 <_puts_r+0x22>
 800aa3a:	89a3      	ldrh	r3, [r4, #12]
 800aa3c:	0598      	lsls	r0, r3, #22
 800aa3e:	d402      	bmi.n	800aa46 <_puts_r+0x22>
 800aa40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa42:	f000 f99e 	bl	800ad82 <__retarget_lock_acquire_recursive>
 800aa46:	89a3      	ldrh	r3, [r4, #12]
 800aa48:	0719      	lsls	r1, r3, #28
 800aa4a:	d502      	bpl.n	800aa52 <_puts_r+0x2e>
 800aa4c:	6923      	ldr	r3, [r4, #16]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d135      	bne.n	800aabe <_puts_r+0x9a>
 800aa52:	4621      	mov	r1, r4
 800aa54:	4628      	mov	r0, r5
 800aa56:	f000 f8c5 	bl	800abe4 <__swsetup_r>
 800aa5a:	b380      	cbz	r0, 800aabe <_puts_r+0x9a>
 800aa5c:	f04f 35ff 	mov.w	r5, #4294967295
 800aa60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa62:	07da      	lsls	r2, r3, #31
 800aa64:	d405      	bmi.n	800aa72 <_puts_r+0x4e>
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	059b      	lsls	r3, r3, #22
 800aa6a:	d402      	bmi.n	800aa72 <_puts_r+0x4e>
 800aa6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa6e:	f000 f989 	bl	800ad84 <__retarget_lock_release_recursive>
 800aa72:	4628      	mov	r0, r5
 800aa74:	bd70      	pop	{r4, r5, r6, pc}
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	da04      	bge.n	800aa84 <_puts_r+0x60>
 800aa7a:	69a2      	ldr	r2, [r4, #24]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	dc17      	bgt.n	800aab0 <_puts_r+0x8c>
 800aa80:	290a      	cmp	r1, #10
 800aa82:	d015      	beq.n	800aab0 <_puts_r+0x8c>
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	6022      	str	r2, [r4, #0]
 800aa8a:	7019      	strb	r1, [r3, #0]
 800aa8c:	68a3      	ldr	r3, [r4, #8]
 800aa8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa92:	3b01      	subs	r3, #1
 800aa94:	60a3      	str	r3, [r4, #8]
 800aa96:	2900      	cmp	r1, #0
 800aa98:	d1ed      	bne.n	800aa76 <_puts_r+0x52>
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	da11      	bge.n	800aac2 <_puts_r+0x9e>
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	210a      	movs	r1, #10
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f000 f85f 	bl	800ab66 <__swbuf_r>
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	d0d7      	beq.n	800aa5c <_puts_r+0x38>
 800aaac:	250a      	movs	r5, #10
 800aaae:	e7d7      	b.n	800aa60 <_puts_r+0x3c>
 800aab0:	4622      	mov	r2, r4
 800aab2:	4628      	mov	r0, r5
 800aab4:	f000 f857 	bl	800ab66 <__swbuf_r>
 800aab8:	3001      	adds	r0, #1
 800aaba:	d1e7      	bne.n	800aa8c <_puts_r+0x68>
 800aabc:	e7ce      	b.n	800aa5c <_puts_r+0x38>
 800aabe:	3e01      	subs	r6, #1
 800aac0:	e7e4      	b.n	800aa8c <_puts_r+0x68>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	1c5a      	adds	r2, r3, #1
 800aac6:	6022      	str	r2, [r4, #0]
 800aac8:	220a      	movs	r2, #10
 800aaca:	701a      	strb	r2, [r3, #0]
 800aacc:	e7ee      	b.n	800aaac <_puts_r+0x88>
	...

0800aad0 <puts>:
 800aad0:	4b02      	ldr	r3, [pc, #8]	@ (800aadc <puts+0xc>)
 800aad2:	4601      	mov	r1, r0
 800aad4:	6818      	ldr	r0, [r3, #0]
 800aad6:	f7ff bfa5 	b.w	800aa24 <_puts_r>
 800aada:	bf00      	nop
 800aadc:	20000034 	.word	0x20000034

0800aae0 <__sread>:
 800aae0:	b510      	push	{r4, lr}
 800aae2:	460c      	mov	r4, r1
 800aae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aae8:	f000 f8fc 	bl	800ace4 <_read_r>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	bfab      	itete	ge
 800aaf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aaf2:	89a3      	ldrhlt	r3, [r4, #12]
 800aaf4:	181b      	addge	r3, r3, r0
 800aaf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aafa:	bfac      	ite	ge
 800aafc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aafe:	81a3      	strhlt	r3, [r4, #12]
 800ab00:	bd10      	pop	{r4, pc}

0800ab02 <__swrite>:
 800ab02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab06:	461f      	mov	r7, r3
 800ab08:	898b      	ldrh	r3, [r1, #12]
 800ab0a:	05db      	lsls	r3, r3, #23
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	460c      	mov	r4, r1
 800ab10:	4616      	mov	r6, r2
 800ab12:	d505      	bpl.n	800ab20 <__swrite+0x1e>
 800ab14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab18:	2302      	movs	r3, #2
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f000 f8d0 	bl	800acc0 <_lseek_r>
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab2a:	81a3      	strh	r3, [r4, #12]
 800ab2c:	4632      	mov	r2, r6
 800ab2e:	463b      	mov	r3, r7
 800ab30:	4628      	mov	r0, r5
 800ab32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab36:	f000 b8e7 	b.w	800ad08 <_write_r>

0800ab3a <__sseek>:
 800ab3a:	b510      	push	{r4, lr}
 800ab3c:	460c      	mov	r4, r1
 800ab3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab42:	f000 f8bd 	bl	800acc0 <_lseek_r>
 800ab46:	1c43      	adds	r3, r0, #1
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	bf15      	itete	ne
 800ab4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab56:	81a3      	strheq	r3, [r4, #12]
 800ab58:	bf18      	it	ne
 800ab5a:	81a3      	strhne	r3, [r4, #12]
 800ab5c:	bd10      	pop	{r4, pc}

0800ab5e <__sclose>:
 800ab5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab62:	f000 b89d 	b.w	800aca0 <_close_r>

0800ab66 <__swbuf_r>:
 800ab66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab68:	460e      	mov	r6, r1
 800ab6a:	4614      	mov	r4, r2
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	b118      	cbz	r0, 800ab78 <__swbuf_r+0x12>
 800ab70:	6a03      	ldr	r3, [r0, #32]
 800ab72:	b90b      	cbnz	r3, 800ab78 <__swbuf_r+0x12>
 800ab74:	f7ff ff0e 	bl	800a994 <__sinit>
 800ab78:	69a3      	ldr	r3, [r4, #24]
 800ab7a:	60a3      	str	r3, [r4, #8]
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	071a      	lsls	r2, r3, #28
 800ab80:	d501      	bpl.n	800ab86 <__swbuf_r+0x20>
 800ab82:	6923      	ldr	r3, [r4, #16]
 800ab84:	b943      	cbnz	r3, 800ab98 <__swbuf_r+0x32>
 800ab86:	4621      	mov	r1, r4
 800ab88:	4628      	mov	r0, r5
 800ab8a:	f000 f82b 	bl	800abe4 <__swsetup_r>
 800ab8e:	b118      	cbz	r0, 800ab98 <__swbuf_r+0x32>
 800ab90:	f04f 37ff 	mov.w	r7, #4294967295
 800ab94:	4638      	mov	r0, r7
 800ab96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	6922      	ldr	r2, [r4, #16]
 800ab9c:	1a98      	subs	r0, r3, r2
 800ab9e:	6963      	ldr	r3, [r4, #20]
 800aba0:	b2f6      	uxtb	r6, r6
 800aba2:	4283      	cmp	r3, r0
 800aba4:	4637      	mov	r7, r6
 800aba6:	dc05      	bgt.n	800abb4 <__swbuf_r+0x4e>
 800aba8:	4621      	mov	r1, r4
 800abaa:	4628      	mov	r0, r5
 800abac:	f000 fd6c 	bl	800b688 <_fflush_r>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d1ed      	bne.n	800ab90 <__swbuf_r+0x2a>
 800abb4:	68a3      	ldr	r3, [r4, #8]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	60a3      	str	r3, [r4, #8]
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	1c5a      	adds	r2, r3, #1
 800abbe:	6022      	str	r2, [r4, #0]
 800abc0:	701e      	strb	r6, [r3, #0]
 800abc2:	6962      	ldr	r2, [r4, #20]
 800abc4:	1c43      	adds	r3, r0, #1
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d004      	beq.n	800abd4 <__swbuf_r+0x6e>
 800abca:	89a3      	ldrh	r3, [r4, #12]
 800abcc:	07db      	lsls	r3, r3, #31
 800abce:	d5e1      	bpl.n	800ab94 <__swbuf_r+0x2e>
 800abd0:	2e0a      	cmp	r6, #10
 800abd2:	d1df      	bne.n	800ab94 <__swbuf_r+0x2e>
 800abd4:	4621      	mov	r1, r4
 800abd6:	4628      	mov	r0, r5
 800abd8:	f000 fd56 	bl	800b688 <_fflush_r>
 800abdc:	2800      	cmp	r0, #0
 800abde:	d0d9      	beq.n	800ab94 <__swbuf_r+0x2e>
 800abe0:	e7d6      	b.n	800ab90 <__swbuf_r+0x2a>
	...

0800abe4 <__swsetup_r>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	4b29      	ldr	r3, [pc, #164]	@ (800ac8c <__swsetup_r+0xa8>)
 800abe8:	4605      	mov	r5, r0
 800abea:	6818      	ldr	r0, [r3, #0]
 800abec:	460c      	mov	r4, r1
 800abee:	b118      	cbz	r0, 800abf8 <__swsetup_r+0x14>
 800abf0:	6a03      	ldr	r3, [r0, #32]
 800abf2:	b90b      	cbnz	r3, 800abf8 <__swsetup_r+0x14>
 800abf4:	f7ff fece 	bl	800a994 <__sinit>
 800abf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abfc:	0719      	lsls	r1, r3, #28
 800abfe:	d422      	bmi.n	800ac46 <__swsetup_r+0x62>
 800ac00:	06da      	lsls	r2, r3, #27
 800ac02:	d407      	bmi.n	800ac14 <__swsetup_r+0x30>
 800ac04:	2209      	movs	r2, #9
 800ac06:	602a      	str	r2, [r5, #0]
 800ac08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac0c:	81a3      	strh	r3, [r4, #12]
 800ac0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac12:	e033      	b.n	800ac7c <__swsetup_r+0x98>
 800ac14:	0758      	lsls	r0, r3, #29
 800ac16:	d512      	bpl.n	800ac3e <__swsetup_r+0x5a>
 800ac18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac1a:	b141      	cbz	r1, 800ac2e <__swsetup_r+0x4a>
 800ac1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac20:	4299      	cmp	r1, r3
 800ac22:	d002      	beq.n	800ac2a <__swsetup_r+0x46>
 800ac24:	4628      	mov	r0, r5
 800ac26:	f000 f8db 	bl	800ade0 <_free_r>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac34:	81a3      	strh	r3, [r4, #12]
 800ac36:	2300      	movs	r3, #0
 800ac38:	6063      	str	r3, [r4, #4]
 800ac3a:	6923      	ldr	r3, [r4, #16]
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	f043 0308 	orr.w	r3, r3, #8
 800ac44:	81a3      	strh	r3, [r4, #12]
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	b94b      	cbnz	r3, 800ac5e <__swsetup_r+0x7a>
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac54:	d003      	beq.n	800ac5e <__swsetup_r+0x7a>
 800ac56:	4621      	mov	r1, r4
 800ac58:	4628      	mov	r0, r5
 800ac5a:	f000 fd75 	bl	800b748 <__smakebuf_r>
 800ac5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac62:	f013 0201 	ands.w	r2, r3, #1
 800ac66:	d00a      	beq.n	800ac7e <__swsetup_r+0x9a>
 800ac68:	2200      	movs	r2, #0
 800ac6a:	60a2      	str	r2, [r4, #8]
 800ac6c:	6962      	ldr	r2, [r4, #20]
 800ac6e:	4252      	negs	r2, r2
 800ac70:	61a2      	str	r2, [r4, #24]
 800ac72:	6922      	ldr	r2, [r4, #16]
 800ac74:	b942      	cbnz	r2, 800ac88 <__swsetup_r+0xa4>
 800ac76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac7a:	d1c5      	bne.n	800ac08 <__swsetup_r+0x24>
 800ac7c:	bd38      	pop	{r3, r4, r5, pc}
 800ac7e:	0799      	lsls	r1, r3, #30
 800ac80:	bf58      	it	pl
 800ac82:	6962      	ldrpl	r2, [r4, #20]
 800ac84:	60a2      	str	r2, [r4, #8]
 800ac86:	e7f4      	b.n	800ac72 <__swsetup_r+0x8e>
 800ac88:	2000      	movs	r0, #0
 800ac8a:	e7f7      	b.n	800ac7c <__swsetup_r+0x98>
 800ac8c:	20000034 	.word	0x20000034

0800ac90 <memset>:
 800ac90:	4402      	add	r2, r0
 800ac92:	4603      	mov	r3, r0
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d100      	bne.n	800ac9a <memset+0xa>
 800ac98:	4770      	bx	lr
 800ac9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac9e:	e7f9      	b.n	800ac94 <memset+0x4>

0800aca0 <_close_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4d06      	ldr	r5, [pc, #24]	@ (800acbc <_close_r+0x1c>)
 800aca4:	2300      	movs	r3, #0
 800aca6:	4604      	mov	r4, r0
 800aca8:	4608      	mov	r0, r1
 800acaa:	602b      	str	r3, [r5, #0]
 800acac:	f7f8 fc66 	bl	800357c <_close>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d102      	bne.n	800acba <_close_r+0x1a>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	b103      	cbz	r3, 800acba <_close_r+0x1a>
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	200023b0 	.word	0x200023b0

0800acc0 <_lseek_r>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	4d07      	ldr	r5, [pc, #28]	@ (800ace0 <_lseek_r+0x20>)
 800acc4:	4604      	mov	r4, r0
 800acc6:	4608      	mov	r0, r1
 800acc8:	4611      	mov	r1, r2
 800acca:	2200      	movs	r2, #0
 800accc:	602a      	str	r2, [r5, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	f7f8 fc7b 	bl	80035ca <_lseek>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d102      	bne.n	800acde <_lseek_r+0x1e>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	b103      	cbz	r3, 800acde <_lseek_r+0x1e>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	200023b0 	.word	0x200023b0

0800ace4 <_read_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4d07      	ldr	r5, [pc, #28]	@ (800ad04 <_read_r+0x20>)
 800ace8:	4604      	mov	r4, r0
 800acea:	4608      	mov	r0, r1
 800acec:	4611      	mov	r1, r2
 800acee:	2200      	movs	r2, #0
 800acf0:	602a      	str	r2, [r5, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	f7f8 fc09 	bl	800350a <_read>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	d102      	bne.n	800ad02 <_read_r+0x1e>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	b103      	cbz	r3, 800ad02 <_read_r+0x1e>
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	200023b0 	.word	0x200023b0

0800ad08 <_write_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	4d07      	ldr	r5, [pc, #28]	@ (800ad28 <_write_r+0x20>)
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	4608      	mov	r0, r1
 800ad10:	4611      	mov	r1, r2
 800ad12:	2200      	movs	r2, #0
 800ad14:	602a      	str	r2, [r5, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	f7f8 fc14 	bl	8003544 <_write>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	d102      	bne.n	800ad26 <_write_r+0x1e>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	b103      	cbz	r3, 800ad26 <_write_r+0x1e>
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
 800ad28:	200023b0 	.word	0x200023b0

0800ad2c <__errno>:
 800ad2c:	4b01      	ldr	r3, [pc, #4]	@ (800ad34 <__errno+0x8>)
 800ad2e:	6818      	ldr	r0, [r3, #0]
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	20000034 	.word	0x20000034

0800ad38 <__libc_init_array>:
 800ad38:	b570      	push	{r4, r5, r6, lr}
 800ad3a:	4d0d      	ldr	r5, [pc, #52]	@ (800ad70 <__libc_init_array+0x38>)
 800ad3c:	4c0d      	ldr	r4, [pc, #52]	@ (800ad74 <__libc_init_array+0x3c>)
 800ad3e:	1b64      	subs	r4, r4, r5
 800ad40:	10a4      	asrs	r4, r4, #2
 800ad42:	2600      	movs	r6, #0
 800ad44:	42a6      	cmp	r6, r4
 800ad46:	d109      	bne.n	800ad5c <__libc_init_array+0x24>
 800ad48:	4d0b      	ldr	r5, [pc, #44]	@ (800ad78 <__libc_init_array+0x40>)
 800ad4a:	4c0c      	ldr	r4, [pc, #48]	@ (800ad7c <__libc_init_array+0x44>)
 800ad4c:	f000 fdb6 	bl	800b8bc <_init>
 800ad50:	1b64      	subs	r4, r4, r5
 800ad52:	10a4      	asrs	r4, r4, #2
 800ad54:	2600      	movs	r6, #0
 800ad56:	42a6      	cmp	r6, r4
 800ad58:	d105      	bne.n	800ad66 <__libc_init_array+0x2e>
 800ad5a:	bd70      	pop	{r4, r5, r6, pc}
 800ad5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad60:	4798      	blx	r3
 800ad62:	3601      	adds	r6, #1
 800ad64:	e7ee      	b.n	800ad44 <__libc_init_array+0xc>
 800ad66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad6a:	4798      	blx	r3
 800ad6c:	3601      	adds	r6, #1
 800ad6e:	e7f2      	b.n	800ad56 <__libc_init_array+0x1e>
 800ad70:	0800bd84 	.word	0x0800bd84
 800ad74:	0800bd84 	.word	0x0800bd84
 800ad78:	0800bd84 	.word	0x0800bd84
 800ad7c:	0800bd88 	.word	0x0800bd88

0800ad80 <__retarget_lock_init_recursive>:
 800ad80:	4770      	bx	lr

0800ad82 <__retarget_lock_acquire_recursive>:
 800ad82:	4770      	bx	lr

0800ad84 <__retarget_lock_release_recursive>:
 800ad84:	4770      	bx	lr

0800ad86 <memcpy>:
 800ad86:	440a      	add	r2, r1
 800ad88:	4291      	cmp	r1, r2
 800ad8a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad8e:	d100      	bne.n	800ad92 <memcpy+0xc>
 800ad90:	4770      	bx	lr
 800ad92:	b510      	push	{r4, lr}
 800ad94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad9c:	4291      	cmp	r1, r2
 800ad9e:	d1f9      	bne.n	800ad94 <memcpy+0xe>
 800ada0:	bd10      	pop	{r4, pc}
	...

0800ada4 <__assert_func>:
 800ada4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ada6:	4614      	mov	r4, r2
 800ada8:	461a      	mov	r2, r3
 800adaa:	4b09      	ldr	r3, [pc, #36]	@ (800add0 <__assert_func+0x2c>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4605      	mov	r5, r0
 800adb0:	68d8      	ldr	r0, [r3, #12]
 800adb2:	b954      	cbnz	r4, 800adca <__assert_func+0x26>
 800adb4:	4b07      	ldr	r3, [pc, #28]	@ (800add4 <__assert_func+0x30>)
 800adb6:	461c      	mov	r4, r3
 800adb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adbc:	9100      	str	r1, [sp, #0]
 800adbe:	462b      	mov	r3, r5
 800adc0:	4905      	ldr	r1, [pc, #20]	@ (800add8 <__assert_func+0x34>)
 800adc2:	f000 fc89 	bl	800b6d8 <fiprintf>
 800adc6:	f000 fd2d 	bl	800b824 <abort>
 800adca:	4b04      	ldr	r3, [pc, #16]	@ (800addc <__assert_func+0x38>)
 800adcc:	e7f4      	b.n	800adb8 <__assert_func+0x14>
 800adce:	bf00      	nop
 800add0:	20000034 	.word	0x20000034
 800add4:	0800bd46 	.word	0x0800bd46
 800add8:	0800bd18 	.word	0x0800bd18
 800addc:	0800bd0b 	.word	0x0800bd0b

0800ade0 <_free_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4605      	mov	r5, r0
 800ade4:	2900      	cmp	r1, #0
 800ade6:	d041      	beq.n	800ae6c <_free_r+0x8c>
 800ade8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adec:	1f0c      	subs	r4, r1, #4
 800adee:	2b00      	cmp	r3, #0
 800adf0:	bfb8      	it	lt
 800adf2:	18e4      	addlt	r4, r4, r3
 800adf4:	f000 f8e8 	bl	800afc8 <__malloc_lock>
 800adf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae70 <_free_r+0x90>)
 800adfa:	6813      	ldr	r3, [r2, #0]
 800adfc:	b933      	cbnz	r3, 800ae0c <_free_r+0x2c>
 800adfe:	6063      	str	r3, [r4, #4]
 800ae00:	6014      	str	r4, [r2, #0]
 800ae02:	4628      	mov	r0, r5
 800ae04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae08:	f000 b8e4 	b.w	800afd4 <__malloc_unlock>
 800ae0c:	42a3      	cmp	r3, r4
 800ae0e:	d908      	bls.n	800ae22 <_free_r+0x42>
 800ae10:	6820      	ldr	r0, [r4, #0]
 800ae12:	1821      	adds	r1, r4, r0
 800ae14:	428b      	cmp	r3, r1
 800ae16:	bf01      	itttt	eq
 800ae18:	6819      	ldreq	r1, [r3, #0]
 800ae1a:	685b      	ldreq	r3, [r3, #4]
 800ae1c:	1809      	addeq	r1, r1, r0
 800ae1e:	6021      	streq	r1, [r4, #0]
 800ae20:	e7ed      	b.n	800adfe <_free_r+0x1e>
 800ae22:	461a      	mov	r2, r3
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	b10b      	cbz	r3, 800ae2c <_free_r+0x4c>
 800ae28:	42a3      	cmp	r3, r4
 800ae2a:	d9fa      	bls.n	800ae22 <_free_r+0x42>
 800ae2c:	6811      	ldr	r1, [r2, #0]
 800ae2e:	1850      	adds	r0, r2, r1
 800ae30:	42a0      	cmp	r0, r4
 800ae32:	d10b      	bne.n	800ae4c <_free_r+0x6c>
 800ae34:	6820      	ldr	r0, [r4, #0]
 800ae36:	4401      	add	r1, r0
 800ae38:	1850      	adds	r0, r2, r1
 800ae3a:	4283      	cmp	r3, r0
 800ae3c:	6011      	str	r1, [r2, #0]
 800ae3e:	d1e0      	bne.n	800ae02 <_free_r+0x22>
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	6053      	str	r3, [r2, #4]
 800ae46:	4408      	add	r0, r1
 800ae48:	6010      	str	r0, [r2, #0]
 800ae4a:	e7da      	b.n	800ae02 <_free_r+0x22>
 800ae4c:	d902      	bls.n	800ae54 <_free_r+0x74>
 800ae4e:	230c      	movs	r3, #12
 800ae50:	602b      	str	r3, [r5, #0]
 800ae52:	e7d6      	b.n	800ae02 <_free_r+0x22>
 800ae54:	6820      	ldr	r0, [r4, #0]
 800ae56:	1821      	adds	r1, r4, r0
 800ae58:	428b      	cmp	r3, r1
 800ae5a:	bf04      	itt	eq
 800ae5c:	6819      	ldreq	r1, [r3, #0]
 800ae5e:	685b      	ldreq	r3, [r3, #4]
 800ae60:	6063      	str	r3, [r4, #4]
 800ae62:	bf04      	itt	eq
 800ae64:	1809      	addeq	r1, r1, r0
 800ae66:	6021      	streq	r1, [r4, #0]
 800ae68:	6054      	str	r4, [r2, #4]
 800ae6a:	e7ca      	b.n	800ae02 <_free_r+0x22>
 800ae6c:	bd38      	pop	{r3, r4, r5, pc}
 800ae6e:	bf00      	nop
 800ae70:	200023bc 	.word	0x200023bc

0800ae74 <malloc>:
 800ae74:	4b02      	ldr	r3, [pc, #8]	@ (800ae80 <malloc+0xc>)
 800ae76:	4601      	mov	r1, r0
 800ae78:	6818      	ldr	r0, [r3, #0]
 800ae7a:	f000 b825 	b.w	800aec8 <_malloc_r>
 800ae7e:	bf00      	nop
 800ae80:	20000034 	.word	0x20000034

0800ae84 <sbrk_aligned>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	4e0f      	ldr	r6, [pc, #60]	@ (800aec4 <sbrk_aligned+0x40>)
 800ae88:	460c      	mov	r4, r1
 800ae8a:	6831      	ldr	r1, [r6, #0]
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	b911      	cbnz	r1, 800ae96 <sbrk_aligned+0x12>
 800ae90:	f000 fcb8 	bl	800b804 <_sbrk_r>
 800ae94:	6030      	str	r0, [r6, #0]
 800ae96:	4621      	mov	r1, r4
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f000 fcb3 	bl	800b804 <_sbrk_r>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	d103      	bne.n	800aeaa <sbrk_aligned+0x26>
 800aea2:	f04f 34ff 	mov.w	r4, #4294967295
 800aea6:	4620      	mov	r0, r4
 800aea8:	bd70      	pop	{r4, r5, r6, pc}
 800aeaa:	1cc4      	adds	r4, r0, #3
 800aeac:	f024 0403 	bic.w	r4, r4, #3
 800aeb0:	42a0      	cmp	r0, r4
 800aeb2:	d0f8      	beq.n	800aea6 <sbrk_aligned+0x22>
 800aeb4:	1a21      	subs	r1, r4, r0
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	f000 fca4 	bl	800b804 <_sbrk_r>
 800aebc:	3001      	adds	r0, #1
 800aebe:	d1f2      	bne.n	800aea6 <sbrk_aligned+0x22>
 800aec0:	e7ef      	b.n	800aea2 <sbrk_aligned+0x1e>
 800aec2:	bf00      	nop
 800aec4:	200023b8 	.word	0x200023b8

0800aec8 <_malloc_r>:
 800aec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aecc:	1ccd      	adds	r5, r1, #3
 800aece:	f025 0503 	bic.w	r5, r5, #3
 800aed2:	3508      	adds	r5, #8
 800aed4:	2d0c      	cmp	r5, #12
 800aed6:	bf38      	it	cc
 800aed8:	250c      	movcc	r5, #12
 800aeda:	2d00      	cmp	r5, #0
 800aedc:	4606      	mov	r6, r0
 800aede:	db01      	blt.n	800aee4 <_malloc_r+0x1c>
 800aee0:	42a9      	cmp	r1, r5
 800aee2:	d904      	bls.n	800aeee <_malloc_r+0x26>
 800aee4:	230c      	movs	r3, #12
 800aee6:	6033      	str	r3, [r6, #0]
 800aee8:	2000      	movs	r0, #0
 800aeea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afc4 <_malloc_r+0xfc>
 800aef2:	f000 f869 	bl	800afc8 <__malloc_lock>
 800aef6:	f8d8 3000 	ldr.w	r3, [r8]
 800aefa:	461c      	mov	r4, r3
 800aefc:	bb44      	cbnz	r4, 800af50 <_malloc_r+0x88>
 800aefe:	4629      	mov	r1, r5
 800af00:	4630      	mov	r0, r6
 800af02:	f7ff ffbf 	bl	800ae84 <sbrk_aligned>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	4604      	mov	r4, r0
 800af0a:	d158      	bne.n	800afbe <_malloc_r+0xf6>
 800af0c:	f8d8 4000 	ldr.w	r4, [r8]
 800af10:	4627      	mov	r7, r4
 800af12:	2f00      	cmp	r7, #0
 800af14:	d143      	bne.n	800af9e <_malloc_r+0xd6>
 800af16:	2c00      	cmp	r4, #0
 800af18:	d04b      	beq.n	800afb2 <_malloc_r+0xea>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	4639      	mov	r1, r7
 800af1e:	4630      	mov	r0, r6
 800af20:	eb04 0903 	add.w	r9, r4, r3
 800af24:	f000 fc6e 	bl	800b804 <_sbrk_r>
 800af28:	4581      	cmp	r9, r0
 800af2a:	d142      	bne.n	800afb2 <_malloc_r+0xea>
 800af2c:	6821      	ldr	r1, [r4, #0]
 800af2e:	1a6d      	subs	r5, r5, r1
 800af30:	4629      	mov	r1, r5
 800af32:	4630      	mov	r0, r6
 800af34:	f7ff ffa6 	bl	800ae84 <sbrk_aligned>
 800af38:	3001      	adds	r0, #1
 800af3a:	d03a      	beq.n	800afb2 <_malloc_r+0xea>
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	442b      	add	r3, r5
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	f8d8 3000 	ldr.w	r3, [r8]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	bb62      	cbnz	r2, 800afa4 <_malloc_r+0xdc>
 800af4a:	f8c8 7000 	str.w	r7, [r8]
 800af4e:	e00f      	b.n	800af70 <_malloc_r+0xa8>
 800af50:	6822      	ldr	r2, [r4, #0]
 800af52:	1b52      	subs	r2, r2, r5
 800af54:	d420      	bmi.n	800af98 <_malloc_r+0xd0>
 800af56:	2a0b      	cmp	r2, #11
 800af58:	d917      	bls.n	800af8a <_malloc_r+0xc2>
 800af5a:	1961      	adds	r1, r4, r5
 800af5c:	42a3      	cmp	r3, r4
 800af5e:	6025      	str	r5, [r4, #0]
 800af60:	bf18      	it	ne
 800af62:	6059      	strne	r1, [r3, #4]
 800af64:	6863      	ldr	r3, [r4, #4]
 800af66:	bf08      	it	eq
 800af68:	f8c8 1000 	streq.w	r1, [r8]
 800af6c:	5162      	str	r2, [r4, r5]
 800af6e:	604b      	str	r3, [r1, #4]
 800af70:	4630      	mov	r0, r6
 800af72:	f000 f82f 	bl	800afd4 <__malloc_unlock>
 800af76:	f104 000b 	add.w	r0, r4, #11
 800af7a:	1d23      	adds	r3, r4, #4
 800af7c:	f020 0007 	bic.w	r0, r0, #7
 800af80:	1ac2      	subs	r2, r0, r3
 800af82:	bf1c      	itt	ne
 800af84:	1a1b      	subne	r3, r3, r0
 800af86:	50a3      	strne	r3, [r4, r2]
 800af88:	e7af      	b.n	800aeea <_malloc_r+0x22>
 800af8a:	6862      	ldr	r2, [r4, #4]
 800af8c:	42a3      	cmp	r3, r4
 800af8e:	bf0c      	ite	eq
 800af90:	f8c8 2000 	streq.w	r2, [r8]
 800af94:	605a      	strne	r2, [r3, #4]
 800af96:	e7eb      	b.n	800af70 <_malloc_r+0xa8>
 800af98:	4623      	mov	r3, r4
 800af9a:	6864      	ldr	r4, [r4, #4]
 800af9c:	e7ae      	b.n	800aefc <_malloc_r+0x34>
 800af9e:	463c      	mov	r4, r7
 800afa0:	687f      	ldr	r7, [r7, #4]
 800afa2:	e7b6      	b.n	800af12 <_malloc_r+0x4a>
 800afa4:	461a      	mov	r2, r3
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	42a3      	cmp	r3, r4
 800afaa:	d1fb      	bne.n	800afa4 <_malloc_r+0xdc>
 800afac:	2300      	movs	r3, #0
 800afae:	6053      	str	r3, [r2, #4]
 800afb0:	e7de      	b.n	800af70 <_malloc_r+0xa8>
 800afb2:	230c      	movs	r3, #12
 800afb4:	6033      	str	r3, [r6, #0]
 800afb6:	4630      	mov	r0, r6
 800afb8:	f000 f80c 	bl	800afd4 <__malloc_unlock>
 800afbc:	e794      	b.n	800aee8 <_malloc_r+0x20>
 800afbe:	6005      	str	r5, [r0, #0]
 800afc0:	e7d6      	b.n	800af70 <_malloc_r+0xa8>
 800afc2:	bf00      	nop
 800afc4:	200023bc 	.word	0x200023bc

0800afc8 <__malloc_lock>:
 800afc8:	4801      	ldr	r0, [pc, #4]	@ (800afd0 <__malloc_lock+0x8>)
 800afca:	f7ff beda 	b.w	800ad82 <__retarget_lock_acquire_recursive>
 800afce:	bf00      	nop
 800afd0:	200023b4 	.word	0x200023b4

0800afd4 <__malloc_unlock>:
 800afd4:	4801      	ldr	r0, [pc, #4]	@ (800afdc <__malloc_unlock+0x8>)
 800afd6:	f7ff bed5 	b.w	800ad84 <__retarget_lock_release_recursive>
 800afda:	bf00      	nop
 800afdc:	200023b4 	.word	0x200023b4

0800afe0 <__sfputc_r>:
 800afe0:	6893      	ldr	r3, [r2, #8]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	b410      	push	{r4}
 800afe8:	6093      	str	r3, [r2, #8]
 800afea:	da08      	bge.n	800affe <__sfputc_r+0x1e>
 800afec:	6994      	ldr	r4, [r2, #24]
 800afee:	42a3      	cmp	r3, r4
 800aff0:	db01      	blt.n	800aff6 <__sfputc_r+0x16>
 800aff2:	290a      	cmp	r1, #10
 800aff4:	d103      	bne.n	800affe <__sfputc_r+0x1e>
 800aff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800affa:	f7ff bdb4 	b.w	800ab66 <__swbuf_r>
 800affe:	6813      	ldr	r3, [r2, #0]
 800b000:	1c58      	adds	r0, r3, #1
 800b002:	6010      	str	r0, [r2, #0]
 800b004:	7019      	strb	r1, [r3, #0]
 800b006:	4608      	mov	r0, r1
 800b008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b00c:	4770      	bx	lr

0800b00e <__sfputs_r>:
 800b00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b010:	4606      	mov	r6, r0
 800b012:	460f      	mov	r7, r1
 800b014:	4614      	mov	r4, r2
 800b016:	18d5      	adds	r5, r2, r3
 800b018:	42ac      	cmp	r4, r5
 800b01a:	d101      	bne.n	800b020 <__sfputs_r+0x12>
 800b01c:	2000      	movs	r0, #0
 800b01e:	e007      	b.n	800b030 <__sfputs_r+0x22>
 800b020:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b024:	463a      	mov	r2, r7
 800b026:	4630      	mov	r0, r6
 800b028:	f7ff ffda 	bl	800afe0 <__sfputc_r>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d1f3      	bne.n	800b018 <__sfputs_r+0xa>
 800b030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b034 <_vfiprintf_r>:
 800b034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b038:	460d      	mov	r5, r1
 800b03a:	b09d      	sub	sp, #116	@ 0x74
 800b03c:	4614      	mov	r4, r2
 800b03e:	4698      	mov	r8, r3
 800b040:	4606      	mov	r6, r0
 800b042:	b118      	cbz	r0, 800b04c <_vfiprintf_r+0x18>
 800b044:	6a03      	ldr	r3, [r0, #32]
 800b046:	b90b      	cbnz	r3, 800b04c <_vfiprintf_r+0x18>
 800b048:	f7ff fca4 	bl	800a994 <__sinit>
 800b04c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b04e:	07d9      	lsls	r1, r3, #31
 800b050:	d405      	bmi.n	800b05e <_vfiprintf_r+0x2a>
 800b052:	89ab      	ldrh	r3, [r5, #12]
 800b054:	059a      	lsls	r2, r3, #22
 800b056:	d402      	bmi.n	800b05e <_vfiprintf_r+0x2a>
 800b058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b05a:	f7ff fe92 	bl	800ad82 <__retarget_lock_acquire_recursive>
 800b05e:	89ab      	ldrh	r3, [r5, #12]
 800b060:	071b      	lsls	r3, r3, #28
 800b062:	d501      	bpl.n	800b068 <_vfiprintf_r+0x34>
 800b064:	692b      	ldr	r3, [r5, #16]
 800b066:	b99b      	cbnz	r3, 800b090 <_vfiprintf_r+0x5c>
 800b068:	4629      	mov	r1, r5
 800b06a:	4630      	mov	r0, r6
 800b06c:	f7ff fdba 	bl	800abe4 <__swsetup_r>
 800b070:	b170      	cbz	r0, 800b090 <_vfiprintf_r+0x5c>
 800b072:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b074:	07dc      	lsls	r4, r3, #31
 800b076:	d504      	bpl.n	800b082 <_vfiprintf_r+0x4e>
 800b078:	f04f 30ff 	mov.w	r0, #4294967295
 800b07c:	b01d      	add	sp, #116	@ 0x74
 800b07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b082:	89ab      	ldrh	r3, [r5, #12]
 800b084:	0598      	lsls	r0, r3, #22
 800b086:	d4f7      	bmi.n	800b078 <_vfiprintf_r+0x44>
 800b088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b08a:	f7ff fe7b 	bl	800ad84 <__retarget_lock_release_recursive>
 800b08e:	e7f3      	b.n	800b078 <_vfiprintf_r+0x44>
 800b090:	2300      	movs	r3, #0
 800b092:	9309      	str	r3, [sp, #36]	@ 0x24
 800b094:	2320      	movs	r3, #32
 800b096:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b09a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b09e:	2330      	movs	r3, #48	@ 0x30
 800b0a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b250 <_vfiprintf_r+0x21c>
 800b0a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0a8:	f04f 0901 	mov.w	r9, #1
 800b0ac:	4623      	mov	r3, r4
 800b0ae:	469a      	mov	sl, r3
 800b0b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0b4:	b10a      	cbz	r2, 800b0ba <_vfiprintf_r+0x86>
 800b0b6:	2a25      	cmp	r2, #37	@ 0x25
 800b0b8:	d1f9      	bne.n	800b0ae <_vfiprintf_r+0x7a>
 800b0ba:	ebba 0b04 	subs.w	fp, sl, r4
 800b0be:	d00b      	beq.n	800b0d8 <_vfiprintf_r+0xa4>
 800b0c0:	465b      	mov	r3, fp
 800b0c2:	4622      	mov	r2, r4
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f7ff ffa1 	bl	800b00e <__sfputs_r>
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	f000 80a7 	beq.w	800b220 <_vfiprintf_r+0x1ec>
 800b0d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0d4:	445a      	add	r2, fp
 800b0d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f000 809f 	beq.w	800b220 <_vfiprintf_r+0x1ec>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0ec:	f10a 0a01 	add.w	sl, sl, #1
 800b0f0:	9304      	str	r3, [sp, #16]
 800b0f2:	9307      	str	r3, [sp, #28]
 800b0f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0fa:	4654      	mov	r4, sl
 800b0fc:	2205      	movs	r2, #5
 800b0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b102:	4853      	ldr	r0, [pc, #332]	@ (800b250 <_vfiprintf_r+0x21c>)
 800b104:	f7f5 f86c 	bl	80001e0 <memchr>
 800b108:	9a04      	ldr	r2, [sp, #16]
 800b10a:	b9d8      	cbnz	r0, 800b144 <_vfiprintf_r+0x110>
 800b10c:	06d1      	lsls	r1, r2, #27
 800b10e:	bf44      	itt	mi
 800b110:	2320      	movmi	r3, #32
 800b112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b116:	0713      	lsls	r3, r2, #28
 800b118:	bf44      	itt	mi
 800b11a:	232b      	movmi	r3, #43	@ 0x2b
 800b11c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b120:	f89a 3000 	ldrb.w	r3, [sl]
 800b124:	2b2a      	cmp	r3, #42	@ 0x2a
 800b126:	d015      	beq.n	800b154 <_vfiprintf_r+0x120>
 800b128:	9a07      	ldr	r2, [sp, #28]
 800b12a:	4654      	mov	r4, sl
 800b12c:	2000      	movs	r0, #0
 800b12e:	f04f 0c0a 	mov.w	ip, #10
 800b132:	4621      	mov	r1, r4
 800b134:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b138:	3b30      	subs	r3, #48	@ 0x30
 800b13a:	2b09      	cmp	r3, #9
 800b13c:	d94b      	bls.n	800b1d6 <_vfiprintf_r+0x1a2>
 800b13e:	b1b0      	cbz	r0, 800b16e <_vfiprintf_r+0x13a>
 800b140:	9207      	str	r2, [sp, #28]
 800b142:	e014      	b.n	800b16e <_vfiprintf_r+0x13a>
 800b144:	eba0 0308 	sub.w	r3, r0, r8
 800b148:	fa09 f303 	lsl.w	r3, r9, r3
 800b14c:	4313      	orrs	r3, r2
 800b14e:	9304      	str	r3, [sp, #16]
 800b150:	46a2      	mov	sl, r4
 800b152:	e7d2      	b.n	800b0fa <_vfiprintf_r+0xc6>
 800b154:	9b03      	ldr	r3, [sp, #12]
 800b156:	1d19      	adds	r1, r3, #4
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	9103      	str	r1, [sp, #12]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	bfbb      	ittet	lt
 800b160:	425b      	neglt	r3, r3
 800b162:	f042 0202 	orrlt.w	r2, r2, #2
 800b166:	9307      	strge	r3, [sp, #28]
 800b168:	9307      	strlt	r3, [sp, #28]
 800b16a:	bfb8      	it	lt
 800b16c:	9204      	strlt	r2, [sp, #16]
 800b16e:	7823      	ldrb	r3, [r4, #0]
 800b170:	2b2e      	cmp	r3, #46	@ 0x2e
 800b172:	d10a      	bne.n	800b18a <_vfiprintf_r+0x156>
 800b174:	7863      	ldrb	r3, [r4, #1]
 800b176:	2b2a      	cmp	r3, #42	@ 0x2a
 800b178:	d132      	bne.n	800b1e0 <_vfiprintf_r+0x1ac>
 800b17a:	9b03      	ldr	r3, [sp, #12]
 800b17c:	1d1a      	adds	r2, r3, #4
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	9203      	str	r2, [sp, #12]
 800b182:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b186:	3402      	adds	r4, #2
 800b188:	9305      	str	r3, [sp, #20]
 800b18a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b260 <_vfiprintf_r+0x22c>
 800b18e:	7821      	ldrb	r1, [r4, #0]
 800b190:	2203      	movs	r2, #3
 800b192:	4650      	mov	r0, sl
 800b194:	f7f5 f824 	bl	80001e0 <memchr>
 800b198:	b138      	cbz	r0, 800b1aa <_vfiprintf_r+0x176>
 800b19a:	9b04      	ldr	r3, [sp, #16]
 800b19c:	eba0 000a 	sub.w	r0, r0, sl
 800b1a0:	2240      	movs	r2, #64	@ 0x40
 800b1a2:	4082      	lsls	r2, r0
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	3401      	adds	r4, #1
 800b1a8:	9304      	str	r3, [sp, #16]
 800b1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ae:	4829      	ldr	r0, [pc, #164]	@ (800b254 <_vfiprintf_r+0x220>)
 800b1b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1b4:	2206      	movs	r2, #6
 800b1b6:	f7f5 f813 	bl	80001e0 <memchr>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	d03f      	beq.n	800b23e <_vfiprintf_r+0x20a>
 800b1be:	4b26      	ldr	r3, [pc, #152]	@ (800b258 <_vfiprintf_r+0x224>)
 800b1c0:	bb1b      	cbnz	r3, 800b20a <_vfiprintf_r+0x1d6>
 800b1c2:	9b03      	ldr	r3, [sp, #12]
 800b1c4:	3307      	adds	r3, #7
 800b1c6:	f023 0307 	bic.w	r3, r3, #7
 800b1ca:	3308      	adds	r3, #8
 800b1cc:	9303      	str	r3, [sp, #12]
 800b1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d0:	443b      	add	r3, r7
 800b1d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1d4:	e76a      	b.n	800b0ac <_vfiprintf_r+0x78>
 800b1d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1da:	460c      	mov	r4, r1
 800b1dc:	2001      	movs	r0, #1
 800b1de:	e7a8      	b.n	800b132 <_vfiprintf_r+0xfe>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	3401      	adds	r4, #1
 800b1e4:	9305      	str	r3, [sp, #20]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	f04f 0c0a 	mov.w	ip, #10
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1f2:	3a30      	subs	r2, #48	@ 0x30
 800b1f4:	2a09      	cmp	r2, #9
 800b1f6:	d903      	bls.n	800b200 <_vfiprintf_r+0x1cc>
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d0c6      	beq.n	800b18a <_vfiprintf_r+0x156>
 800b1fc:	9105      	str	r1, [sp, #20]
 800b1fe:	e7c4      	b.n	800b18a <_vfiprintf_r+0x156>
 800b200:	fb0c 2101 	mla	r1, ip, r1, r2
 800b204:	4604      	mov	r4, r0
 800b206:	2301      	movs	r3, #1
 800b208:	e7f0      	b.n	800b1ec <_vfiprintf_r+0x1b8>
 800b20a:	ab03      	add	r3, sp, #12
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	462a      	mov	r2, r5
 800b210:	4b12      	ldr	r3, [pc, #72]	@ (800b25c <_vfiprintf_r+0x228>)
 800b212:	a904      	add	r1, sp, #16
 800b214:	4630      	mov	r0, r6
 800b216:	f3af 8000 	nop.w
 800b21a:	4607      	mov	r7, r0
 800b21c:	1c78      	adds	r0, r7, #1
 800b21e:	d1d6      	bne.n	800b1ce <_vfiprintf_r+0x19a>
 800b220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b222:	07d9      	lsls	r1, r3, #31
 800b224:	d405      	bmi.n	800b232 <_vfiprintf_r+0x1fe>
 800b226:	89ab      	ldrh	r3, [r5, #12]
 800b228:	059a      	lsls	r2, r3, #22
 800b22a:	d402      	bmi.n	800b232 <_vfiprintf_r+0x1fe>
 800b22c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b22e:	f7ff fda9 	bl	800ad84 <__retarget_lock_release_recursive>
 800b232:	89ab      	ldrh	r3, [r5, #12]
 800b234:	065b      	lsls	r3, r3, #25
 800b236:	f53f af1f 	bmi.w	800b078 <_vfiprintf_r+0x44>
 800b23a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b23c:	e71e      	b.n	800b07c <_vfiprintf_r+0x48>
 800b23e:	ab03      	add	r3, sp, #12
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	462a      	mov	r2, r5
 800b244:	4b05      	ldr	r3, [pc, #20]	@ (800b25c <_vfiprintf_r+0x228>)
 800b246:	a904      	add	r1, sp, #16
 800b248:	4630      	mov	r0, r6
 800b24a:	f000 f879 	bl	800b340 <_printf_i>
 800b24e:	e7e4      	b.n	800b21a <_vfiprintf_r+0x1e6>
 800b250:	0800bd47 	.word	0x0800bd47
 800b254:	0800bd51 	.word	0x0800bd51
 800b258:	00000000 	.word	0x00000000
 800b25c:	0800b00f 	.word	0x0800b00f
 800b260:	0800bd4d 	.word	0x0800bd4d

0800b264 <_printf_common>:
 800b264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b268:	4616      	mov	r6, r2
 800b26a:	4698      	mov	r8, r3
 800b26c:	688a      	ldr	r2, [r1, #8]
 800b26e:	690b      	ldr	r3, [r1, #16]
 800b270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b274:	4293      	cmp	r3, r2
 800b276:	bfb8      	it	lt
 800b278:	4613      	movlt	r3, r2
 800b27a:	6033      	str	r3, [r6, #0]
 800b27c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b280:	4607      	mov	r7, r0
 800b282:	460c      	mov	r4, r1
 800b284:	b10a      	cbz	r2, 800b28a <_printf_common+0x26>
 800b286:	3301      	adds	r3, #1
 800b288:	6033      	str	r3, [r6, #0]
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	0699      	lsls	r1, r3, #26
 800b28e:	bf42      	ittt	mi
 800b290:	6833      	ldrmi	r3, [r6, #0]
 800b292:	3302      	addmi	r3, #2
 800b294:	6033      	strmi	r3, [r6, #0]
 800b296:	6825      	ldr	r5, [r4, #0]
 800b298:	f015 0506 	ands.w	r5, r5, #6
 800b29c:	d106      	bne.n	800b2ac <_printf_common+0x48>
 800b29e:	f104 0a19 	add.w	sl, r4, #25
 800b2a2:	68e3      	ldr	r3, [r4, #12]
 800b2a4:	6832      	ldr	r2, [r6, #0]
 800b2a6:	1a9b      	subs	r3, r3, r2
 800b2a8:	42ab      	cmp	r3, r5
 800b2aa:	dc26      	bgt.n	800b2fa <_printf_common+0x96>
 800b2ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2b0:	6822      	ldr	r2, [r4, #0]
 800b2b2:	3b00      	subs	r3, #0
 800b2b4:	bf18      	it	ne
 800b2b6:	2301      	movne	r3, #1
 800b2b8:	0692      	lsls	r2, r2, #26
 800b2ba:	d42b      	bmi.n	800b314 <_printf_common+0xb0>
 800b2bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2c0:	4641      	mov	r1, r8
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	47c8      	blx	r9
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	d01e      	beq.n	800b308 <_printf_common+0xa4>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	6922      	ldr	r2, [r4, #16]
 800b2ce:	f003 0306 	and.w	r3, r3, #6
 800b2d2:	2b04      	cmp	r3, #4
 800b2d4:	bf02      	ittt	eq
 800b2d6:	68e5      	ldreq	r5, [r4, #12]
 800b2d8:	6833      	ldreq	r3, [r6, #0]
 800b2da:	1aed      	subeq	r5, r5, r3
 800b2dc:	68a3      	ldr	r3, [r4, #8]
 800b2de:	bf0c      	ite	eq
 800b2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2e4:	2500      	movne	r5, #0
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	bfc4      	itt	gt
 800b2ea:	1a9b      	subgt	r3, r3, r2
 800b2ec:	18ed      	addgt	r5, r5, r3
 800b2ee:	2600      	movs	r6, #0
 800b2f0:	341a      	adds	r4, #26
 800b2f2:	42b5      	cmp	r5, r6
 800b2f4:	d11a      	bne.n	800b32c <_printf_common+0xc8>
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	e008      	b.n	800b30c <_printf_common+0xa8>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	4652      	mov	r2, sl
 800b2fe:	4641      	mov	r1, r8
 800b300:	4638      	mov	r0, r7
 800b302:	47c8      	blx	r9
 800b304:	3001      	adds	r0, #1
 800b306:	d103      	bne.n	800b310 <_printf_common+0xac>
 800b308:	f04f 30ff 	mov.w	r0, #4294967295
 800b30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b310:	3501      	adds	r5, #1
 800b312:	e7c6      	b.n	800b2a2 <_printf_common+0x3e>
 800b314:	18e1      	adds	r1, r4, r3
 800b316:	1c5a      	adds	r2, r3, #1
 800b318:	2030      	movs	r0, #48	@ 0x30
 800b31a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b31e:	4422      	add	r2, r4
 800b320:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b328:	3302      	adds	r3, #2
 800b32a:	e7c7      	b.n	800b2bc <_printf_common+0x58>
 800b32c:	2301      	movs	r3, #1
 800b32e:	4622      	mov	r2, r4
 800b330:	4641      	mov	r1, r8
 800b332:	4638      	mov	r0, r7
 800b334:	47c8      	blx	r9
 800b336:	3001      	adds	r0, #1
 800b338:	d0e6      	beq.n	800b308 <_printf_common+0xa4>
 800b33a:	3601      	adds	r6, #1
 800b33c:	e7d9      	b.n	800b2f2 <_printf_common+0x8e>
	...

0800b340 <_printf_i>:
 800b340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b344:	7e0f      	ldrb	r7, [r1, #24]
 800b346:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b348:	2f78      	cmp	r7, #120	@ 0x78
 800b34a:	4691      	mov	r9, r2
 800b34c:	4680      	mov	r8, r0
 800b34e:	460c      	mov	r4, r1
 800b350:	469a      	mov	sl, r3
 800b352:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b356:	d807      	bhi.n	800b368 <_printf_i+0x28>
 800b358:	2f62      	cmp	r7, #98	@ 0x62
 800b35a:	d80a      	bhi.n	800b372 <_printf_i+0x32>
 800b35c:	2f00      	cmp	r7, #0
 800b35e:	f000 80d2 	beq.w	800b506 <_printf_i+0x1c6>
 800b362:	2f58      	cmp	r7, #88	@ 0x58
 800b364:	f000 80b9 	beq.w	800b4da <_printf_i+0x19a>
 800b368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b36c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b370:	e03a      	b.n	800b3e8 <_printf_i+0xa8>
 800b372:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b376:	2b15      	cmp	r3, #21
 800b378:	d8f6      	bhi.n	800b368 <_printf_i+0x28>
 800b37a:	a101      	add	r1, pc, #4	@ (adr r1, 800b380 <_printf_i+0x40>)
 800b37c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b380:	0800b3d9 	.word	0x0800b3d9
 800b384:	0800b3ed 	.word	0x0800b3ed
 800b388:	0800b369 	.word	0x0800b369
 800b38c:	0800b369 	.word	0x0800b369
 800b390:	0800b369 	.word	0x0800b369
 800b394:	0800b369 	.word	0x0800b369
 800b398:	0800b3ed 	.word	0x0800b3ed
 800b39c:	0800b369 	.word	0x0800b369
 800b3a0:	0800b369 	.word	0x0800b369
 800b3a4:	0800b369 	.word	0x0800b369
 800b3a8:	0800b369 	.word	0x0800b369
 800b3ac:	0800b4ed 	.word	0x0800b4ed
 800b3b0:	0800b417 	.word	0x0800b417
 800b3b4:	0800b4a7 	.word	0x0800b4a7
 800b3b8:	0800b369 	.word	0x0800b369
 800b3bc:	0800b369 	.word	0x0800b369
 800b3c0:	0800b50f 	.word	0x0800b50f
 800b3c4:	0800b369 	.word	0x0800b369
 800b3c8:	0800b417 	.word	0x0800b417
 800b3cc:	0800b369 	.word	0x0800b369
 800b3d0:	0800b369 	.word	0x0800b369
 800b3d4:	0800b4af 	.word	0x0800b4af
 800b3d8:	6833      	ldr	r3, [r6, #0]
 800b3da:	1d1a      	adds	r2, r3, #4
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6032      	str	r2, [r6, #0]
 800b3e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e09d      	b.n	800b528 <_printf_i+0x1e8>
 800b3ec:	6833      	ldr	r3, [r6, #0]
 800b3ee:	6820      	ldr	r0, [r4, #0]
 800b3f0:	1d19      	adds	r1, r3, #4
 800b3f2:	6031      	str	r1, [r6, #0]
 800b3f4:	0606      	lsls	r6, r0, #24
 800b3f6:	d501      	bpl.n	800b3fc <_printf_i+0xbc>
 800b3f8:	681d      	ldr	r5, [r3, #0]
 800b3fa:	e003      	b.n	800b404 <_printf_i+0xc4>
 800b3fc:	0645      	lsls	r5, r0, #25
 800b3fe:	d5fb      	bpl.n	800b3f8 <_printf_i+0xb8>
 800b400:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b404:	2d00      	cmp	r5, #0
 800b406:	da03      	bge.n	800b410 <_printf_i+0xd0>
 800b408:	232d      	movs	r3, #45	@ 0x2d
 800b40a:	426d      	negs	r5, r5
 800b40c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b410:	4859      	ldr	r0, [pc, #356]	@ (800b578 <_printf_i+0x238>)
 800b412:	230a      	movs	r3, #10
 800b414:	e011      	b.n	800b43a <_printf_i+0xfa>
 800b416:	6821      	ldr	r1, [r4, #0]
 800b418:	6833      	ldr	r3, [r6, #0]
 800b41a:	0608      	lsls	r0, r1, #24
 800b41c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b420:	d402      	bmi.n	800b428 <_printf_i+0xe8>
 800b422:	0649      	lsls	r1, r1, #25
 800b424:	bf48      	it	mi
 800b426:	b2ad      	uxthmi	r5, r5
 800b428:	2f6f      	cmp	r7, #111	@ 0x6f
 800b42a:	4853      	ldr	r0, [pc, #332]	@ (800b578 <_printf_i+0x238>)
 800b42c:	6033      	str	r3, [r6, #0]
 800b42e:	bf14      	ite	ne
 800b430:	230a      	movne	r3, #10
 800b432:	2308      	moveq	r3, #8
 800b434:	2100      	movs	r1, #0
 800b436:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b43a:	6866      	ldr	r6, [r4, #4]
 800b43c:	60a6      	str	r6, [r4, #8]
 800b43e:	2e00      	cmp	r6, #0
 800b440:	bfa2      	ittt	ge
 800b442:	6821      	ldrge	r1, [r4, #0]
 800b444:	f021 0104 	bicge.w	r1, r1, #4
 800b448:	6021      	strge	r1, [r4, #0]
 800b44a:	b90d      	cbnz	r5, 800b450 <_printf_i+0x110>
 800b44c:	2e00      	cmp	r6, #0
 800b44e:	d04b      	beq.n	800b4e8 <_printf_i+0x1a8>
 800b450:	4616      	mov	r6, r2
 800b452:	fbb5 f1f3 	udiv	r1, r5, r3
 800b456:	fb03 5711 	mls	r7, r3, r1, r5
 800b45a:	5dc7      	ldrb	r7, [r0, r7]
 800b45c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b460:	462f      	mov	r7, r5
 800b462:	42bb      	cmp	r3, r7
 800b464:	460d      	mov	r5, r1
 800b466:	d9f4      	bls.n	800b452 <_printf_i+0x112>
 800b468:	2b08      	cmp	r3, #8
 800b46a:	d10b      	bne.n	800b484 <_printf_i+0x144>
 800b46c:	6823      	ldr	r3, [r4, #0]
 800b46e:	07df      	lsls	r7, r3, #31
 800b470:	d508      	bpl.n	800b484 <_printf_i+0x144>
 800b472:	6923      	ldr	r3, [r4, #16]
 800b474:	6861      	ldr	r1, [r4, #4]
 800b476:	4299      	cmp	r1, r3
 800b478:	bfde      	ittt	le
 800b47a:	2330      	movle	r3, #48	@ 0x30
 800b47c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b480:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b484:	1b92      	subs	r2, r2, r6
 800b486:	6122      	str	r2, [r4, #16]
 800b488:	f8cd a000 	str.w	sl, [sp]
 800b48c:	464b      	mov	r3, r9
 800b48e:	aa03      	add	r2, sp, #12
 800b490:	4621      	mov	r1, r4
 800b492:	4640      	mov	r0, r8
 800b494:	f7ff fee6 	bl	800b264 <_printf_common>
 800b498:	3001      	adds	r0, #1
 800b49a:	d14a      	bne.n	800b532 <_printf_i+0x1f2>
 800b49c:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a0:	b004      	add	sp, #16
 800b4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	f043 0320 	orr.w	r3, r3, #32
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	4833      	ldr	r0, [pc, #204]	@ (800b57c <_printf_i+0x23c>)
 800b4b0:	2778      	movs	r7, #120	@ 0x78
 800b4b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	6831      	ldr	r1, [r6, #0]
 800b4ba:	061f      	lsls	r7, r3, #24
 800b4bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4c0:	d402      	bmi.n	800b4c8 <_printf_i+0x188>
 800b4c2:	065f      	lsls	r7, r3, #25
 800b4c4:	bf48      	it	mi
 800b4c6:	b2ad      	uxthmi	r5, r5
 800b4c8:	6031      	str	r1, [r6, #0]
 800b4ca:	07d9      	lsls	r1, r3, #31
 800b4cc:	bf44      	itt	mi
 800b4ce:	f043 0320 	orrmi.w	r3, r3, #32
 800b4d2:	6023      	strmi	r3, [r4, #0]
 800b4d4:	b11d      	cbz	r5, 800b4de <_printf_i+0x19e>
 800b4d6:	2310      	movs	r3, #16
 800b4d8:	e7ac      	b.n	800b434 <_printf_i+0xf4>
 800b4da:	4827      	ldr	r0, [pc, #156]	@ (800b578 <_printf_i+0x238>)
 800b4dc:	e7e9      	b.n	800b4b2 <_printf_i+0x172>
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	f023 0320 	bic.w	r3, r3, #32
 800b4e4:	6023      	str	r3, [r4, #0]
 800b4e6:	e7f6      	b.n	800b4d6 <_printf_i+0x196>
 800b4e8:	4616      	mov	r6, r2
 800b4ea:	e7bd      	b.n	800b468 <_printf_i+0x128>
 800b4ec:	6833      	ldr	r3, [r6, #0]
 800b4ee:	6825      	ldr	r5, [r4, #0]
 800b4f0:	6961      	ldr	r1, [r4, #20]
 800b4f2:	1d18      	adds	r0, r3, #4
 800b4f4:	6030      	str	r0, [r6, #0]
 800b4f6:	062e      	lsls	r6, r5, #24
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	d501      	bpl.n	800b500 <_printf_i+0x1c0>
 800b4fc:	6019      	str	r1, [r3, #0]
 800b4fe:	e002      	b.n	800b506 <_printf_i+0x1c6>
 800b500:	0668      	lsls	r0, r5, #25
 800b502:	d5fb      	bpl.n	800b4fc <_printf_i+0x1bc>
 800b504:	8019      	strh	r1, [r3, #0]
 800b506:	2300      	movs	r3, #0
 800b508:	6123      	str	r3, [r4, #16]
 800b50a:	4616      	mov	r6, r2
 800b50c:	e7bc      	b.n	800b488 <_printf_i+0x148>
 800b50e:	6833      	ldr	r3, [r6, #0]
 800b510:	1d1a      	adds	r2, r3, #4
 800b512:	6032      	str	r2, [r6, #0]
 800b514:	681e      	ldr	r6, [r3, #0]
 800b516:	6862      	ldr	r2, [r4, #4]
 800b518:	2100      	movs	r1, #0
 800b51a:	4630      	mov	r0, r6
 800b51c:	f7f4 fe60 	bl	80001e0 <memchr>
 800b520:	b108      	cbz	r0, 800b526 <_printf_i+0x1e6>
 800b522:	1b80      	subs	r0, r0, r6
 800b524:	6060      	str	r0, [r4, #4]
 800b526:	6863      	ldr	r3, [r4, #4]
 800b528:	6123      	str	r3, [r4, #16]
 800b52a:	2300      	movs	r3, #0
 800b52c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b530:	e7aa      	b.n	800b488 <_printf_i+0x148>
 800b532:	6923      	ldr	r3, [r4, #16]
 800b534:	4632      	mov	r2, r6
 800b536:	4649      	mov	r1, r9
 800b538:	4640      	mov	r0, r8
 800b53a:	47d0      	blx	sl
 800b53c:	3001      	adds	r0, #1
 800b53e:	d0ad      	beq.n	800b49c <_printf_i+0x15c>
 800b540:	6823      	ldr	r3, [r4, #0]
 800b542:	079b      	lsls	r3, r3, #30
 800b544:	d413      	bmi.n	800b56e <_printf_i+0x22e>
 800b546:	68e0      	ldr	r0, [r4, #12]
 800b548:	9b03      	ldr	r3, [sp, #12]
 800b54a:	4298      	cmp	r0, r3
 800b54c:	bfb8      	it	lt
 800b54e:	4618      	movlt	r0, r3
 800b550:	e7a6      	b.n	800b4a0 <_printf_i+0x160>
 800b552:	2301      	movs	r3, #1
 800b554:	4632      	mov	r2, r6
 800b556:	4649      	mov	r1, r9
 800b558:	4640      	mov	r0, r8
 800b55a:	47d0      	blx	sl
 800b55c:	3001      	adds	r0, #1
 800b55e:	d09d      	beq.n	800b49c <_printf_i+0x15c>
 800b560:	3501      	adds	r5, #1
 800b562:	68e3      	ldr	r3, [r4, #12]
 800b564:	9903      	ldr	r1, [sp, #12]
 800b566:	1a5b      	subs	r3, r3, r1
 800b568:	42ab      	cmp	r3, r5
 800b56a:	dcf2      	bgt.n	800b552 <_printf_i+0x212>
 800b56c:	e7eb      	b.n	800b546 <_printf_i+0x206>
 800b56e:	2500      	movs	r5, #0
 800b570:	f104 0619 	add.w	r6, r4, #25
 800b574:	e7f5      	b.n	800b562 <_printf_i+0x222>
 800b576:	bf00      	nop
 800b578:	0800bd58 	.word	0x0800bd58
 800b57c:	0800bd69 	.word	0x0800bd69

0800b580 <__sflush_r>:
 800b580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b588:	0716      	lsls	r6, r2, #28
 800b58a:	4605      	mov	r5, r0
 800b58c:	460c      	mov	r4, r1
 800b58e:	d454      	bmi.n	800b63a <__sflush_r+0xba>
 800b590:	684b      	ldr	r3, [r1, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	dc02      	bgt.n	800b59c <__sflush_r+0x1c>
 800b596:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b598:	2b00      	cmp	r3, #0
 800b59a:	dd48      	ble.n	800b62e <__sflush_r+0xae>
 800b59c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b59e:	2e00      	cmp	r6, #0
 800b5a0:	d045      	beq.n	800b62e <__sflush_r+0xae>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b5a8:	682f      	ldr	r7, [r5, #0]
 800b5aa:	6a21      	ldr	r1, [r4, #32]
 800b5ac:	602b      	str	r3, [r5, #0]
 800b5ae:	d030      	beq.n	800b612 <__sflush_r+0x92>
 800b5b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5b2:	89a3      	ldrh	r3, [r4, #12]
 800b5b4:	0759      	lsls	r1, r3, #29
 800b5b6:	d505      	bpl.n	800b5c4 <__sflush_r+0x44>
 800b5b8:	6863      	ldr	r3, [r4, #4]
 800b5ba:	1ad2      	subs	r2, r2, r3
 800b5bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5be:	b10b      	cbz	r3, 800b5c4 <__sflush_r+0x44>
 800b5c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b5c2:	1ad2      	subs	r2, r2, r3
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5c8:	6a21      	ldr	r1, [r4, #32]
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	47b0      	blx	r6
 800b5ce:	1c43      	adds	r3, r0, #1
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	d106      	bne.n	800b5e2 <__sflush_r+0x62>
 800b5d4:	6829      	ldr	r1, [r5, #0]
 800b5d6:	291d      	cmp	r1, #29
 800b5d8:	d82b      	bhi.n	800b632 <__sflush_r+0xb2>
 800b5da:	4a2a      	ldr	r2, [pc, #168]	@ (800b684 <__sflush_r+0x104>)
 800b5dc:	410a      	asrs	r2, r1
 800b5de:	07d6      	lsls	r6, r2, #31
 800b5e0:	d427      	bmi.n	800b632 <__sflush_r+0xb2>
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	6062      	str	r2, [r4, #4]
 800b5e6:	04d9      	lsls	r1, r3, #19
 800b5e8:	6922      	ldr	r2, [r4, #16]
 800b5ea:	6022      	str	r2, [r4, #0]
 800b5ec:	d504      	bpl.n	800b5f8 <__sflush_r+0x78>
 800b5ee:	1c42      	adds	r2, r0, #1
 800b5f0:	d101      	bne.n	800b5f6 <__sflush_r+0x76>
 800b5f2:	682b      	ldr	r3, [r5, #0]
 800b5f4:	b903      	cbnz	r3, 800b5f8 <__sflush_r+0x78>
 800b5f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b5f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5fa:	602f      	str	r7, [r5, #0]
 800b5fc:	b1b9      	cbz	r1, 800b62e <__sflush_r+0xae>
 800b5fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b602:	4299      	cmp	r1, r3
 800b604:	d002      	beq.n	800b60c <__sflush_r+0x8c>
 800b606:	4628      	mov	r0, r5
 800b608:	f7ff fbea 	bl	800ade0 <_free_r>
 800b60c:	2300      	movs	r3, #0
 800b60e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b610:	e00d      	b.n	800b62e <__sflush_r+0xae>
 800b612:	2301      	movs	r3, #1
 800b614:	4628      	mov	r0, r5
 800b616:	47b0      	blx	r6
 800b618:	4602      	mov	r2, r0
 800b61a:	1c50      	adds	r0, r2, #1
 800b61c:	d1c9      	bne.n	800b5b2 <__sflush_r+0x32>
 800b61e:	682b      	ldr	r3, [r5, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d0c6      	beq.n	800b5b2 <__sflush_r+0x32>
 800b624:	2b1d      	cmp	r3, #29
 800b626:	d001      	beq.n	800b62c <__sflush_r+0xac>
 800b628:	2b16      	cmp	r3, #22
 800b62a:	d11e      	bne.n	800b66a <__sflush_r+0xea>
 800b62c:	602f      	str	r7, [r5, #0]
 800b62e:	2000      	movs	r0, #0
 800b630:	e022      	b.n	800b678 <__sflush_r+0xf8>
 800b632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b636:	b21b      	sxth	r3, r3
 800b638:	e01b      	b.n	800b672 <__sflush_r+0xf2>
 800b63a:	690f      	ldr	r7, [r1, #16]
 800b63c:	2f00      	cmp	r7, #0
 800b63e:	d0f6      	beq.n	800b62e <__sflush_r+0xae>
 800b640:	0793      	lsls	r3, r2, #30
 800b642:	680e      	ldr	r6, [r1, #0]
 800b644:	bf08      	it	eq
 800b646:	694b      	ldreq	r3, [r1, #20]
 800b648:	600f      	str	r7, [r1, #0]
 800b64a:	bf18      	it	ne
 800b64c:	2300      	movne	r3, #0
 800b64e:	eba6 0807 	sub.w	r8, r6, r7
 800b652:	608b      	str	r3, [r1, #8]
 800b654:	f1b8 0f00 	cmp.w	r8, #0
 800b658:	dde9      	ble.n	800b62e <__sflush_r+0xae>
 800b65a:	6a21      	ldr	r1, [r4, #32]
 800b65c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b65e:	4643      	mov	r3, r8
 800b660:	463a      	mov	r2, r7
 800b662:	4628      	mov	r0, r5
 800b664:	47b0      	blx	r6
 800b666:	2800      	cmp	r0, #0
 800b668:	dc08      	bgt.n	800b67c <__sflush_r+0xfc>
 800b66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b672:	81a3      	strh	r3, [r4, #12]
 800b674:	f04f 30ff 	mov.w	r0, #4294967295
 800b678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b67c:	4407      	add	r7, r0
 800b67e:	eba8 0800 	sub.w	r8, r8, r0
 800b682:	e7e7      	b.n	800b654 <__sflush_r+0xd4>
 800b684:	dfbffffe 	.word	0xdfbffffe

0800b688 <_fflush_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	690b      	ldr	r3, [r1, #16]
 800b68c:	4605      	mov	r5, r0
 800b68e:	460c      	mov	r4, r1
 800b690:	b913      	cbnz	r3, 800b698 <_fflush_r+0x10>
 800b692:	2500      	movs	r5, #0
 800b694:	4628      	mov	r0, r5
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	b118      	cbz	r0, 800b6a2 <_fflush_r+0x1a>
 800b69a:	6a03      	ldr	r3, [r0, #32]
 800b69c:	b90b      	cbnz	r3, 800b6a2 <_fflush_r+0x1a>
 800b69e:	f7ff f979 	bl	800a994 <__sinit>
 800b6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d0f3      	beq.n	800b692 <_fflush_r+0xa>
 800b6aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6ac:	07d0      	lsls	r0, r2, #31
 800b6ae:	d404      	bmi.n	800b6ba <_fflush_r+0x32>
 800b6b0:	0599      	lsls	r1, r3, #22
 800b6b2:	d402      	bmi.n	800b6ba <_fflush_r+0x32>
 800b6b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6b6:	f7ff fb64 	bl	800ad82 <__retarget_lock_acquire_recursive>
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	4621      	mov	r1, r4
 800b6be:	f7ff ff5f 	bl	800b580 <__sflush_r>
 800b6c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6c4:	07da      	lsls	r2, r3, #31
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	d4e4      	bmi.n	800b694 <_fflush_r+0xc>
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	059b      	lsls	r3, r3, #22
 800b6ce:	d4e1      	bmi.n	800b694 <_fflush_r+0xc>
 800b6d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6d2:	f7ff fb57 	bl	800ad84 <__retarget_lock_release_recursive>
 800b6d6:	e7dd      	b.n	800b694 <_fflush_r+0xc>

0800b6d8 <fiprintf>:
 800b6d8:	b40e      	push	{r1, r2, r3}
 800b6da:	b503      	push	{r0, r1, lr}
 800b6dc:	4601      	mov	r1, r0
 800b6de:	ab03      	add	r3, sp, #12
 800b6e0:	4805      	ldr	r0, [pc, #20]	@ (800b6f8 <fiprintf+0x20>)
 800b6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6e6:	6800      	ldr	r0, [r0, #0]
 800b6e8:	9301      	str	r3, [sp, #4]
 800b6ea:	f7ff fca3 	bl	800b034 <_vfiprintf_r>
 800b6ee:	b002      	add	sp, #8
 800b6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6f4:	b003      	add	sp, #12
 800b6f6:	4770      	bx	lr
 800b6f8:	20000034 	.word	0x20000034

0800b6fc <__swhatbuf_r>:
 800b6fc:	b570      	push	{r4, r5, r6, lr}
 800b6fe:	460c      	mov	r4, r1
 800b700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b704:	2900      	cmp	r1, #0
 800b706:	b096      	sub	sp, #88	@ 0x58
 800b708:	4615      	mov	r5, r2
 800b70a:	461e      	mov	r6, r3
 800b70c:	da0d      	bge.n	800b72a <__swhatbuf_r+0x2e>
 800b70e:	89a3      	ldrh	r3, [r4, #12]
 800b710:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b714:	f04f 0100 	mov.w	r1, #0
 800b718:	bf14      	ite	ne
 800b71a:	2340      	movne	r3, #64	@ 0x40
 800b71c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b720:	2000      	movs	r0, #0
 800b722:	6031      	str	r1, [r6, #0]
 800b724:	602b      	str	r3, [r5, #0]
 800b726:	b016      	add	sp, #88	@ 0x58
 800b728:	bd70      	pop	{r4, r5, r6, pc}
 800b72a:	466a      	mov	r2, sp
 800b72c:	f000 f848 	bl	800b7c0 <_fstat_r>
 800b730:	2800      	cmp	r0, #0
 800b732:	dbec      	blt.n	800b70e <__swhatbuf_r+0x12>
 800b734:	9901      	ldr	r1, [sp, #4]
 800b736:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b73a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b73e:	4259      	negs	r1, r3
 800b740:	4159      	adcs	r1, r3
 800b742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b746:	e7eb      	b.n	800b720 <__swhatbuf_r+0x24>

0800b748 <__smakebuf_r>:
 800b748:	898b      	ldrh	r3, [r1, #12]
 800b74a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b74c:	079d      	lsls	r5, r3, #30
 800b74e:	4606      	mov	r6, r0
 800b750:	460c      	mov	r4, r1
 800b752:	d507      	bpl.n	800b764 <__smakebuf_r+0x1c>
 800b754:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	6123      	str	r3, [r4, #16]
 800b75c:	2301      	movs	r3, #1
 800b75e:	6163      	str	r3, [r4, #20]
 800b760:	b003      	add	sp, #12
 800b762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b764:	ab01      	add	r3, sp, #4
 800b766:	466a      	mov	r2, sp
 800b768:	f7ff ffc8 	bl	800b6fc <__swhatbuf_r>
 800b76c:	9f00      	ldr	r7, [sp, #0]
 800b76e:	4605      	mov	r5, r0
 800b770:	4639      	mov	r1, r7
 800b772:	4630      	mov	r0, r6
 800b774:	f7ff fba8 	bl	800aec8 <_malloc_r>
 800b778:	b948      	cbnz	r0, 800b78e <__smakebuf_r+0x46>
 800b77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b77e:	059a      	lsls	r2, r3, #22
 800b780:	d4ee      	bmi.n	800b760 <__smakebuf_r+0x18>
 800b782:	f023 0303 	bic.w	r3, r3, #3
 800b786:	f043 0302 	orr.w	r3, r3, #2
 800b78a:	81a3      	strh	r3, [r4, #12]
 800b78c:	e7e2      	b.n	800b754 <__smakebuf_r+0xc>
 800b78e:	89a3      	ldrh	r3, [r4, #12]
 800b790:	6020      	str	r0, [r4, #0]
 800b792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b796:	81a3      	strh	r3, [r4, #12]
 800b798:	9b01      	ldr	r3, [sp, #4]
 800b79a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b79e:	b15b      	cbz	r3, 800b7b8 <__smakebuf_r+0x70>
 800b7a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	f000 f81d 	bl	800b7e4 <_isatty_r>
 800b7aa:	b128      	cbz	r0, 800b7b8 <__smakebuf_r+0x70>
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	f023 0303 	bic.w	r3, r3, #3
 800b7b2:	f043 0301 	orr.w	r3, r3, #1
 800b7b6:	81a3      	strh	r3, [r4, #12]
 800b7b8:	89a3      	ldrh	r3, [r4, #12]
 800b7ba:	431d      	orrs	r5, r3
 800b7bc:	81a5      	strh	r5, [r4, #12]
 800b7be:	e7cf      	b.n	800b760 <__smakebuf_r+0x18>

0800b7c0 <_fstat_r>:
 800b7c0:	b538      	push	{r3, r4, r5, lr}
 800b7c2:	4d07      	ldr	r5, [pc, #28]	@ (800b7e0 <_fstat_r+0x20>)
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	4604      	mov	r4, r0
 800b7c8:	4608      	mov	r0, r1
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	602b      	str	r3, [r5, #0]
 800b7ce:	f7f7 fee1 	bl	8003594 <_fstat>
 800b7d2:	1c43      	adds	r3, r0, #1
 800b7d4:	d102      	bne.n	800b7dc <_fstat_r+0x1c>
 800b7d6:	682b      	ldr	r3, [r5, #0]
 800b7d8:	b103      	cbz	r3, 800b7dc <_fstat_r+0x1c>
 800b7da:	6023      	str	r3, [r4, #0]
 800b7dc:	bd38      	pop	{r3, r4, r5, pc}
 800b7de:	bf00      	nop
 800b7e0:	200023b0 	.word	0x200023b0

0800b7e4 <_isatty_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4d06      	ldr	r5, [pc, #24]	@ (800b800 <_isatty_r+0x1c>)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	4608      	mov	r0, r1
 800b7ee:	602b      	str	r3, [r5, #0]
 800b7f0:	f7f7 fee0 	bl	80035b4 <_isatty>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d102      	bne.n	800b7fe <_isatty_r+0x1a>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	b103      	cbz	r3, 800b7fe <_isatty_r+0x1a>
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	200023b0 	.word	0x200023b0

0800b804 <_sbrk_r>:
 800b804:	b538      	push	{r3, r4, r5, lr}
 800b806:	4d06      	ldr	r5, [pc, #24]	@ (800b820 <_sbrk_r+0x1c>)
 800b808:	2300      	movs	r3, #0
 800b80a:	4604      	mov	r4, r0
 800b80c:	4608      	mov	r0, r1
 800b80e:	602b      	str	r3, [r5, #0]
 800b810:	f7f7 fee8 	bl	80035e4 <_sbrk>
 800b814:	1c43      	adds	r3, r0, #1
 800b816:	d102      	bne.n	800b81e <_sbrk_r+0x1a>
 800b818:	682b      	ldr	r3, [r5, #0]
 800b81a:	b103      	cbz	r3, 800b81e <_sbrk_r+0x1a>
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	bd38      	pop	{r3, r4, r5, pc}
 800b820:	200023b0 	.word	0x200023b0

0800b824 <abort>:
 800b824:	b508      	push	{r3, lr}
 800b826:	2006      	movs	r0, #6
 800b828:	f000 f82c 	bl	800b884 <raise>
 800b82c:	2001      	movs	r0, #1
 800b82e:	f7f7 fe61 	bl	80034f4 <_exit>

0800b832 <_raise_r>:
 800b832:	291f      	cmp	r1, #31
 800b834:	b538      	push	{r3, r4, r5, lr}
 800b836:	4605      	mov	r5, r0
 800b838:	460c      	mov	r4, r1
 800b83a:	d904      	bls.n	800b846 <_raise_r+0x14>
 800b83c:	2316      	movs	r3, #22
 800b83e:	6003      	str	r3, [r0, #0]
 800b840:	f04f 30ff 	mov.w	r0, #4294967295
 800b844:	bd38      	pop	{r3, r4, r5, pc}
 800b846:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b848:	b112      	cbz	r2, 800b850 <_raise_r+0x1e>
 800b84a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b84e:	b94b      	cbnz	r3, 800b864 <_raise_r+0x32>
 800b850:	4628      	mov	r0, r5
 800b852:	f000 f831 	bl	800b8b8 <_getpid_r>
 800b856:	4622      	mov	r2, r4
 800b858:	4601      	mov	r1, r0
 800b85a:	4628      	mov	r0, r5
 800b85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b860:	f000 b818 	b.w	800b894 <_kill_r>
 800b864:	2b01      	cmp	r3, #1
 800b866:	d00a      	beq.n	800b87e <_raise_r+0x4c>
 800b868:	1c59      	adds	r1, r3, #1
 800b86a:	d103      	bne.n	800b874 <_raise_r+0x42>
 800b86c:	2316      	movs	r3, #22
 800b86e:	6003      	str	r3, [r0, #0]
 800b870:	2001      	movs	r0, #1
 800b872:	e7e7      	b.n	800b844 <_raise_r+0x12>
 800b874:	2100      	movs	r1, #0
 800b876:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b87a:	4620      	mov	r0, r4
 800b87c:	4798      	blx	r3
 800b87e:	2000      	movs	r0, #0
 800b880:	e7e0      	b.n	800b844 <_raise_r+0x12>
	...

0800b884 <raise>:
 800b884:	4b02      	ldr	r3, [pc, #8]	@ (800b890 <raise+0xc>)
 800b886:	4601      	mov	r1, r0
 800b888:	6818      	ldr	r0, [r3, #0]
 800b88a:	f7ff bfd2 	b.w	800b832 <_raise_r>
 800b88e:	bf00      	nop
 800b890:	20000034 	.word	0x20000034

0800b894 <_kill_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	4d07      	ldr	r5, [pc, #28]	@ (800b8b4 <_kill_r+0x20>)
 800b898:	2300      	movs	r3, #0
 800b89a:	4604      	mov	r4, r0
 800b89c:	4608      	mov	r0, r1
 800b89e:	4611      	mov	r1, r2
 800b8a0:	602b      	str	r3, [r5, #0]
 800b8a2:	f7f7 fe17 	bl	80034d4 <_kill>
 800b8a6:	1c43      	adds	r3, r0, #1
 800b8a8:	d102      	bne.n	800b8b0 <_kill_r+0x1c>
 800b8aa:	682b      	ldr	r3, [r5, #0]
 800b8ac:	b103      	cbz	r3, 800b8b0 <_kill_r+0x1c>
 800b8ae:	6023      	str	r3, [r4, #0]
 800b8b0:	bd38      	pop	{r3, r4, r5, pc}
 800b8b2:	bf00      	nop
 800b8b4:	200023b0 	.word	0x200023b0

0800b8b8 <_getpid_r>:
 800b8b8:	f7f7 be04 	b.w	80034c4 <_getpid>

0800b8bc <_init>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	bf00      	nop
 800b8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c2:	bc08      	pop	{r3}
 800b8c4:	469e      	mov	lr, r3
 800b8c6:	4770      	bx	lr

0800b8c8 <_fini>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	bf00      	nop
 800b8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ce:	bc08      	pop	{r3}
 800b8d0:	469e      	mov	lr, r3
 800b8d2:	4770      	bx	lr
