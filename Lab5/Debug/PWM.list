
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007290  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007420  08007420  00008420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a8  080074a8  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  080074a8  080074a8  000084a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074b0  080074b0  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b0  080074b0  000084b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074b4  080074b4  000084b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080074b8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  2000005c  08007514  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009bc  08007514  000099bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfa3  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000369a  00000000  00000000  0002602f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  000296d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001551  00000000  00000000  0002b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002973d  00000000  00000000  0002c759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000206f9  00000000  00000000  00055e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe57c  00000000  00000000  0007658f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00174b0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b2c  00000000  00000000  00174b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0017c67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007408 	.word	0x08007408

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08007408 	.word	0x08007408

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f001 f921 	bl	80017ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f828 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 fadc 	bl	8000b38 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000580:	f000 f886 	bl	8000690 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000584:	f000 f8bc 	bl	8000700 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000588:	f000 f8fa 	bl	8000780 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800058c:	f000 f91e 	bl	80007cc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000590:	f000 fa44 	bl	8000a1c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000594:	f000 fa72 	bl	8000a7c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000598:	f000 faa0 	bl	8000adc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800059c:	f000 f954 	bl	8000848 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005a0:	f000 f9ca 	bl	8000938 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80005a4:	2100      	movs	r1, #0
 80005a6:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <main+0x50>)
 80005a8:	f003 fd70 	bl	800408c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_4);
 80005ac:	210c      	movs	r1, #12
 80005ae:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <main+0x54>)
 80005b0:	f003 fe72 	bl	8004298 <HAL_TIM_PWM_Start_IT>
  UART_Printf_Dbg("123\n");
 80005b4:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <main+0x58>)
 80005b6:	f001 f8a7 	bl	8001708 <UART_Printf_Dbg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <main+0x4a>
 80005be:	bf00      	nop
 80005c0:	200001ac 	.word	0x200001ac
 80005c4:	200001f8 	.word	0x200001f8
 80005c8:	08007420 	.word	0x08007420

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	@ 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2244      	movs	r2, #68	@ 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f006 fa94 	bl	8006b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005f2:	f002 f801 	bl	80025f8 <HAL_PWREx_ControlVoltageScaling>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005fc:	f000 fc76 	bl	8000eec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000600:	f001 ffdc 	bl	80025bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000604:	4b21      	ldr	r3, [pc, #132]	@ (800068c <SystemClock_Config+0xc0>)
 8000606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800060a:	4a20      	ldr	r2, [pc, #128]	@ (800068c <SystemClock_Config+0xc0>)
 800060c:	f023 0318 	bic.w	r3, r3, #24
 8000610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000614:	2314      	movs	r3, #20
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000624:	2360      	movs	r3, #96	@ 0x60
 8000626:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062c:	2301      	movs	r3, #1
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000634:	2328      	movs	r3, #40	@ 0x28
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f8f7 	bl	800283c <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000654:	f000 fc4a 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2104      	movs	r1, #4
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fcbf 	bl	8002ff4 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800067c:	f000 fc36 	bl	8000eec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000680:	f003 f9c6 	bl	8003a10 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000684:	bf00      	nop
 8000686:	3758      	adds	r7, #88	@ 0x58
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000

08000690 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 8000696:	4a19      	ldr	r2, [pc, #100]	@ (80006fc <MX_DFSDM1_Init+0x6c>)
 8000698:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 800069c:	2201      	movs	r2, #1
 800069e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006a8:	2202      	movs	r2, #2
 80006aa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006be:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006d8:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006e6:	f001 fa13 	bl	8001b10 <HAL_DFSDM_ChannelInit>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006f0:	f000 fbfc 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000078 	.word	0x20000078
 80006fc:	40016020 	.word	0x40016020

08000700 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	@ (8000778 <MX_I2C2_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_I2C2_Init+0x74>)
 800070c:	4a1b      	ldr	r2, [pc, #108]	@ (800077c <MX_I2C2_Init+0x7c>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000718:	2201      	movs	r2, #1
 800071a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <MX_I2C2_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_I2C2_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800073a:	480e      	ldr	r0, [pc, #56]	@ (8000774 <MX_I2C2_Init+0x74>)
 800073c:	f001 fcd9 	bl	80020f2 <HAL_I2C_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000746:	f000 fbd1 	bl	8000eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074a:	2100      	movs	r1, #0
 800074c:	4809      	ldr	r0, [pc, #36]	@ (8000774 <MX_I2C2_Init+0x74>)
 800074e:	f001 fd6b 	bl	8002228 <HAL_I2CEx_ConfigAnalogFilter>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000758:	f000 fbc8 	bl	8000eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000760:	f001 fdad 	bl	80022be <HAL_I2CEx_ConfigDigitalFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800076a:	f000 fbbf 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000b0 	.word	0x200000b0
 8000778:	40005800 	.word	0x40005800
 800077c:	10d19ce4 	.word	0x10d19ce4

08000780 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 8000786:	4a10      	ldr	r2, [pc, #64]	@ (80007c8 <MX_QUADSPI_Init+0x48>)
 8000788:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 800078c:	2202      	movs	r2, #2
 800078e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 8000792:	2204      	movs	r2, #4
 8000794:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 8000798:	2210      	movs	r2, #16
 800079a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 800079e:	2217      	movs	r2, #23
 80007a0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 80007b0:	f001 ff88 	bl	80026c4 <HAL_QSPI_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007ba:	f000 fb97 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000104 	.word	0x20000104
 80007c8:	a0001000 	.word	0xa0001000

080007cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000844 <MX_SPI3_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007e4:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007e6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007ea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f2:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007fe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_SPI3_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_SPI3_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_SPI3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_SPI3_Init+0x74>)
 800081a:	2207      	movs	r2, #7
 800081c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_SPI3_Init+0x74>)
 8000826:	2208      	movs	r2, #8
 8000828:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_SPI3_Init+0x74>)
 800082c:	f003 fad2 	bl	8003dd4 <HAL_SPI_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 fb59 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000148 	.word	0x20000148
 8000844:	40003c00 	.word	0x40003c00

08000848 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08e      	sub	sp, #56	@ 0x38
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
 8000876:	615a      	str	r2, [r3, #20]
 8000878:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800087a:	4b2e      	ldr	r3, [pc, #184]	@ (8000934 <MX_TIM2_Init+0xec>)
 800087c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000880:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000882:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <MX_TIM2_Init+0xec>)
 8000884:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000888:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088a:	4b2a      	ldr	r3, [pc, #168]	@ (8000934 <MX_TIM2_Init+0xec>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8000890:	4b28      	ldr	r3, [pc, #160]	@ (8000934 <MX_TIM2_Init+0xec>)
 8000892:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000896:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <MX_TIM2_Init+0xec>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800089e:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <MX_TIM2_Init+0xec>)
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a4:	4823      	ldr	r0, [pc, #140]	@ (8000934 <MX_TIM2_Init+0xec>)
 80008a6:	f003 fb38 	bl	8003f1a <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80008b0:	f000 fb1c 	bl	8000eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008be:	4619      	mov	r1, r3
 80008c0:	481c      	ldr	r0, [pc, #112]	@ (8000934 <MX_TIM2_Init+0xec>)
 80008c2:	f004 f955 	bl	8004b70 <HAL_TIM_ConfigClockSource>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80008cc:	f000 fb0e 	bl	8000eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008d0:	4818      	ldr	r0, [pc, #96]	@ (8000934 <MX_TIM2_Init+0xec>)
 80008d2:	f003 fb79 	bl	8003fc8 <HAL_TIM_PWM_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008dc:	f000 fb06 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4811      	ldr	r0, [pc, #68]	@ (8000934 <MX_TIM2_Init+0xec>)
 80008f0:	f004 ffd4 	bl	800589c <HAL_TIMEx_MasterConfigSynchronization>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80008fa:	f000 faf7 	bl	8000eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fe:	2360      	movs	r3, #96	@ 0x60
 8000900:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1999;
 8000902:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 8000906:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	4619      	mov	r1, r3
 8000916:	4807      	ldr	r0, [pc, #28]	@ (8000934 <MX_TIM2_Init+0xec>)
 8000918:	f004 f816 	bl	8004948 <HAL_TIM_PWM_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000922:	f000 fae3 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000926:	4803      	ldr	r0, [pc, #12]	@ (8000934 <MX_TIM2_Init+0xec>)
 8000928:	f000 fcce 	bl	80012c8 <HAL_TIM_MspPostInit>

}
 800092c:	bf00      	nop
 800092e:	3738      	adds	r7, #56	@ 0x38
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001ac 	.word	0x200001ac

08000938 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	@ 0x30
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000964:	4b2b      	ldr	r3, [pc, #172]	@ (8000a14 <MX_TIM3_Init+0xdc>)
 8000966:	4a2c      	ldr	r2, [pc, #176]	@ (8000a18 <MX_TIM3_Init+0xe0>)
 8000968:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800096a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <MX_TIM3_Init+0xdc>)
 800096c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000970:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <MX_TIM3_Init+0xdc>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 8000978:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <MX_TIM3_Init+0xdc>)
 800097a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800097e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b24      	ldr	r3, [pc, #144]	@ (8000a14 <MX_TIM3_Init+0xdc>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b23      	ldr	r3, [pc, #140]	@ (8000a14 <MX_TIM3_Init+0xdc>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800098c:	4821      	ldr	r0, [pc, #132]	@ (8000a14 <MX_TIM3_Init+0xdc>)
 800098e:	f003 fac4 	bl	8003f1a <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000998:	f000 faa8 	bl	8000eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009a2:	f107 0320 	add.w	r3, r7, #32
 80009a6:	4619      	mov	r1, r3
 80009a8:	481a      	ldr	r0, [pc, #104]	@ (8000a14 <MX_TIM3_Init+0xdc>)
 80009aa:	f004 f8e1 	bl	8004b70 <HAL_TIM_ConfigClockSource>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80009b4:	f000 fa9a 	bl	8000eec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80009b8:	4816      	ldr	r0, [pc, #88]	@ (8000a14 <MX_TIM3_Init+0xdc>)
 80009ba:	f003 fdc1 	bl	8004540 <HAL_TIM_IC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80009c4:	f000 fa92 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	480f      	ldr	r0, [pc, #60]	@ (8000a14 <MX_TIM3_Init+0xdc>)
 80009d8:	f004 ff60 	bl	800589c <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80009e2:	f000 fa83 	bl	8000eec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009ea:	2301      	movs	r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	220c      	movs	r2, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_TIM3_Init+0xdc>)
 80009fe:	f003 ff07 	bl	8004810 <HAL_TIM_IC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000a08:	f000 fa70 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	3730      	adds	r7, #48	@ 0x30
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200001f8 	.word	0x200001f8
 8000a18:	40000400 	.word	0x40000400

08000a1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a22:	4a15      	ldr	r2, [pc, #84]	@ (8000a78 <MX_USART1_UART_Init+0x5c>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a26:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a60:	f004 ffc2 	bl	80059e8 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a6a:	f000 fa3f 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000244 	.word	0x20000244
 8000a78:	40013800 	.word	0x40013800

08000a7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a82:	4a15      	ldr	r2, [pc, #84]	@ (8000ad8 <MX_USART3_UART_Init+0x5c>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a86:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000ac0:	f004 ff92 	bl	80059e8 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aca:	f000 fa0f 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200002cc 	.word	0x200002cc
 8000ad8:	40004800 	.word	0x40004800

08000adc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ae6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aea:	2206      	movs	r2, #6
 8000aec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af0:	2202      	movs	r2, #2
 8000af2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af6:	2202      	movs	r2, #2
 8000af8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b20:	f001 fc19 	bl	8002356 <HAL_PCD_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b2a:	f000 f9df 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000354 	.word	0x20000354

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4e:	4bbb      	ldr	r3, [pc, #748]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	4aba      	ldr	r2, [pc, #744]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000b54:	f043 0310 	orr.w	r3, r3, #16
 8000b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5a:	4bb8      	ldr	r3, [pc, #736]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4bb5      	ldr	r3, [pc, #724]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	4ab4      	ldr	r2, [pc, #720]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b72:	4bb2      	ldr	r3, [pc, #712]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4baf      	ldr	r3, [pc, #700]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	4aae      	ldr	r2, [pc, #696]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8a:	4bac      	ldr	r3, [pc, #688]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4ba9      	ldr	r3, [pc, #676]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	4aa8      	ldr	r2, [pc, #672]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba2:	4ba6      	ldr	r3, [pc, #664]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	4ba3      	ldr	r3, [pc, #652]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	4aa2      	ldr	r2, [pc, #648]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bba:	4ba0      	ldr	r3, [pc, #640]	@ (8000e3c <MX_GPIO_Init+0x304>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000bcc:	489c      	ldr	r0, [pc, #624]	@ (8000e40 <MX_GPIO_Init+0x308>)
 8000bce:	f001 fa55 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bdc:	f001 fa4e 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000be0:	2200      	movs	r2, #0
 8000be2:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8000be6:	4897      	ldr	r0, [pc, #604]	@ (8000e44 <MX_GPIO_Init+0x30c>)
 8000be8:	f001 fa48 	bl	800207c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000bf2:	4895      	ldr	r0, [pc, #596]	@ (8000e48 <MX_GPIO_Init+0x310>)
 8000bf4:	f001 fa42 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bfe:	4892      	ldr	r0, [pc, #584]	@ (8000e48 <MX_GPIO_Init+0x310>)
 8000c00:	f001 fa3c 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000c0a:	4890      	ldr	r0, [pc, #576]	@ (8000e4c <MX_GPIO_Init+0x314>)
 8000c0c:	f001 fa36 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2101      	movs	r1, #1
 8000c14:	488a      	ldr	r0, [pc, #552]	@ (8000e40 <MX_GPIO_Init+0x308>)
 8000c16:	f001 fa31 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000c1a:	f240 1315 	movw	r3, #277	@ 0x115
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4883      	ldr	r0, [pc, #524]	@ (8000e40 <MX_GPIO_Init+0x308>)
 8000c34:	f001 f878 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000c38:	236a      	movs	r3, #106	@ 0x6a
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	487c      	ldr	r0, [pc, #496]	@ (8000e40 <MX_GPIO_Init+0x308>)
 8000c4e:	f001 f86b 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000c52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c58:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4878      	ldr	r0, [pc, #480]	@ (8000e4c <MX_GPIO_Init+0x314>)
 8000c6a:	f001 f85d 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000c6e:	233f      	movs	r3, #63	@ 0x3f
 8000c70:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c72:	230b      	movs	r3, #11
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4872      	ldr	r0, [pc, #456]	@ (8000e4c <MX_GPIO_Init+0x314>)
 8000c82:	f001 f851 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c86:	2303      	movs	r3, #3
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c96:	2308      	movs	r3, #8
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca4:	f001 f840 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin;
 8000ca8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc4:	f001 f830 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ccc:	230b      	movs	r3, #11
 8000cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cde:	f001 f823 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000ce2:	23c0      	movs	r3, #192	@ 0xc0
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d00:	f001 f812 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000d04:	2301      	movs	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	484a      	ldr	r0, [pc, #296]	@ (8000e44 <MX_GPIO_Init+0x30c>)
 8000d1a:	f001 f805 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin PB5 */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d1e:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000d22:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4843      	ldr	r0, [pc, #268]	@ (8000e44 <MX_GPIO_Init+0x30c>)
 8000d38:	f000 fff6 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000d3c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000d40:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	483d      	ldr	r0, [pc, #244]	@ (8000e48 <MX_GPIO_Init+0x310>)
 8000d54:	f000 ffe8 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000d58:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4835      	ldr	r0, [pc, #212]	@ (8000e48 <MX_GPIO_Init+0x310>)
 8000d72:	f000 ffd9 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000d76:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	482f      	ldr	r0, [pc, #188]	@ (8000e4c <MX_GPIO_Init+0x314>)
 8000d90:	f000 ffca 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d94:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4828      	ldr	r0, [pc, #160]	@ (8000e4c <MX_GPIO_Init+0x314>)
 8000dac:	f000 ffbc 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000db0:	2302      	movs	r3, #2
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dc0:	2305      	movs	r3, #5
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481f      	ldr	r0, [pc, #124]	@ (8000e48 <MX_GPIO_Init+0x310>)
 8000dcc:	f000 ffac 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000dd0:	2378      	movs	r3, #120	@ 0x78
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de0:	2307      	movs	r3, #7
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4817      	ldr	r0, [pc, #92]	@ (8000e48 <MX_GPIO_Init+0x310>)
 8000dec:	f000 ff9c 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000df0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df6:	2312      	movs	r3, #18
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e02:	2304      	movs	r3, #4
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480d      	ldr	r0, [pc, #52]	@ (8000e44 <MX_GPIO_Init+0x30c>)
 8000e0e:	f000 ff8b 	bl	8001d28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2017      	movs	r0, #23
 8000e18:	f000 fe43 	bl	8001aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e1c:	2017      	movs	r0, #23
 8000e1e:	f000 fe5c 	bl	8001ada <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2028      	movs	r0, #40	@ 0x28
 8000e28:	f000 fe3b 	bl	8001aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e2c:	2028      	movs	r0, #40	@ 0x28
 8000e2e:	f000 fe54 	bl	8001ada <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	@ 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	48001000 	.word	0x48001000
 8000e44:	48000400 	.word	0x48000400
 8000e48:	48000c00 	.word	0x48000c00
 8000e4c:	48000800 	.word	0x48000800

08000e50 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 4 */
uint32_t captureValue = 0;
uint32_t previousCaptureValue = 0;
uint32_t frequency = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	7f1b      	ldrb	r3, [r3, #28]
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d136      	bne.n	8000ece <HAL_TIM_IC_CaptureCallback+0x7e>
        captureValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000e60:	210c      	movs	r1, #12
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f003 ff4e 	bl	8004d04 <HAL_TIM_ReadCapturedValue>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000e6c:	6013      	str	r3, [r2, #0]
        frequency = HAL_RCC_GetPCLK1Freq() / (captureValue - previousCaptureValue);
 8000e6e:	f002 fa59 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8000e72:	4601      	mov	r1, r0
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e82:	4a17      	ldr	r2, [pc, #92]	@ (8000ee0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000e84:	6013      	str	r3, [r2, #0]
        if(captureValue < previousCaptureValue)
 8000e86:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d20f      	bcs.n	8000eb2 <HAL_TIM_IC_CaptureCallback+0x62>
        	frequency = HAL_RCC_GetPCLK1Freq() / (captureValue - previousCaptureValue+htim3.Init.Period+1);
 8000e92:	f002 fa47 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8000e96:	4601      	mov	r1, r0
 8000e98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	1ad2      	subs	r2, r2, r3
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eae:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000eb0:	6013      	str	r3, [r2, #0]
        if(frequency != 0)
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <HAL_TIM_IC_CaptureCallback+0x76>
        	UART_Printf_Dbg("%d\n",frequency);
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4809      	ldr	r0, [pc, #36]	@ (8000ee8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ec2:	f000 fc21 	bl	8001708 <UART_Printf_Dbg>
        previousCaptureValue = captureValue;
 8000ec6:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a04      	ldr	r2, [pc, #16]	@ (8000edc <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ecc:	6013      	str	r3, [r2, #0]
    }
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000838 	.word	0x20000838
 8000edc:	2000083c 	.word	0x2000083c
 8000ee0:	20000840 	.word	0x20000840
 8000ee4:	200001f8 	.word	0x200001f8
 8000ee8:	08007428 	.word	0x08007428

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <Error_Handler+0x8>

08000ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f02:	4a0e      	ldr	r2, [pc, #56]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1a:	4a08      	ldr	r2, [pc, #32]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0ac      	sub	sp, #176	@ 0xb0
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2288      	movs	r2, #136	@ 0x88
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f005 fdd1 	bl	8006b08 <memset>
  if(DFSDM1_Init == 0)
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d142      	bne.n	8000ff4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 fa5c 	bl	800343c <HAL_RCCEx_PeriphCLKConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f8a:	f7ff ffaf 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f92:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000faa:	4a15      	ldr	r2, [pc, #84]	@ (8001000 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fac:	f043 0310 	orr.w	r3, r3, #16
 8000fb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb2:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000fbe:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000fc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fd8:	2306      	movs	r3, #6
 8000fda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fde:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4807      	ldr	r0, [pc, #28]	@ (8001004 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000fe6:	f000 fe9f 	bl	8001d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000fea:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	4a02      	ldr	r2, [pc, #8]	@ (8000ffc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ff2:	6013      	str	r3, [r2, #0]
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	37b0      	adds	r7, #176	@ 0xb0
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000844 	.word	0x20000844
 8001000:	40021000 	.word	0x40021000
 8001004:	48001000 	.word	0x48001000

08001008 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b0ac      	sub	sp, #176	@ 0xb0
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2288      	movs	r2, #136	@ 0x88
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f005 fd6d 	bl	8006b08 <memset>
  if(hi2c->Instance==I2C2)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a21      	ldr	r2, [pc, #132]	@ (80010b8 <HAL_I2C_MspInit+0xb0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d13b      	bne.n	80010b0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800103c:	2300      	movs	r3, #0
 800103e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4618      	mov	r0, r3
 8001046:	f002 f9f9 	bl	800343c <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001050:	f7ff ff4c 	bl	8000eec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001054:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <HAL_I2C_MspInit+0xb4>)
 8001056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001058:	4a18      	ldr	r2, [pc, #96]	@ (80010bc <HAL_I2C_MspInit+0xb4>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <HAL_I2C_MspInit+0xb4>)
 8001062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800106c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001074:	2312      	movs	r3, #18
 8001076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107a:	2301      	movs	r3, #1
 800107c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001086:	2304      	movs	r3, #4
 8001088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001090:	4619      	mov	r1, r3
 8001092:	480b      	ldr	r0, [pc, #44]	@ (80010c0 <HAL_I2C_MspInit+0xb8>)
 8001094:	f000 fe48 	bl	8001d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <HAL_I2C_MspInit+0xb4>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109c:	4a07      	ldr	r2, [pc, #28]	@ (80010bc <HAL_I2C_MspInit+0xb4>)
 800109e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <HAL_I2C_MspInit+0xb4>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80010b0:	bf00      	nop
 80010b2:	37b0      	adds	r7, #176	@ 0xb0
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40005800 	.word	0x40005800
 80010bc:	40021000 	.word	0x40021000
 80010c0:	48000400 	.word	0x48000400

080010c4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	@ 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a17      	ldr	r2, [pc, #92]	@ (8001140 <HAL_QSPI_MspInit+0x7c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d128      	bne.n	8001138 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <HAL_QSPI_MspInit+0x80>)
 80010e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010ea:	4a16      	ldr	r2, [pc, #88]	@ (8001144 <HAL_QSPI_MspInit+0x80>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80010f2:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <HAL_QSPI_MspInit+0x80>)
 80010f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <HAL_QSPI_MspInit+0x80>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	4a10      	ldr	r2, [pc, #64]	@ (8001144 <HAL_QSPI_MspInit+0x80>)
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <HAL_QSPI_MspInit+0x80>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001116:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800111a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001128:	230a      	movs	r3, #10
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <HAL_QSPI_MspInit+0x84>)
 8001134:	f000 fdf8 	bl	8001d28 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	@ 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	a0001000 	.word	0xa0001000
 8001144:	40021000 	.word	0x40021000
 8001148:	48001000 	.word	0x48001000

0800114c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a17      	ldr	r2, [pc, #92]	@ (80011c8 <HAL_SPI_MspInit+0x7c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d128      	bne.n	80011c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800116e:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	4a16      	ldr	r2, [pc, #88]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 8001174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001178:	6593      	str	r3, [r2, #88]	@ 0x58
 800117a:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_SPI_MspInit+0x80>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800119e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b0:	2306      	movs	r3, #6
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <HAL_SPI_MspInit+0x84>)
 80011bc:	f000 fdb4 	bl	8001d28 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	@ 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40003c00 	.word	0x40003c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000800 	.word	0x48000800

080011d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	@ 0x30
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011f4:	d129      	bne.n	800124a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f6:	4b31      	ldr	r3, [pc, #196]	@ (80012bc <HAL_TIM_Base_MspInit+0xe8>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	4a30      	ldr	r2, [pc, #192]	@ (80012bc <HAL_TIM_Base_MspInit+0xe8>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6593      	str	r3, [r2, #88]	@ 0x58
 8001202:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <HAL_TIM_Base_MspInit+0xe8>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <HAL_TIM_Base_MspInit+0xe8>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	4a2a      	ldr	r2, [pc, #168]	@ (80012bc <HAL_TIM_Base_MspInit+0xe8>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121a:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <HAL_TIM_Base_MspInit+0xe8>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001226:	2308      	movs	r3, #8
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001236:	2301      	movs	r3, #1
 8001238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001244:	f000 fd70 	bl	8001d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001248:	e034      	b.n	80012b4 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM3)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a1c      	ldr	r2, [pc, #112]	@ (80012c0 <HAL_TIM_Base_MspInit+0xec>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d12f      	bne.n	80012b4 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <HAL_TIM_Base_MspInit+0xe8>)
 8001256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001258:	4a18      	ldr	r2, [pc, #96]	@ (80012bc <HAL_TIM_Base_MspInit+0xe8>)
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <HAL_TIM_Base_MspInit+0xe8>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <HAL_TIM_Base_MspInit+0xe8>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001270:	4a12      	ldr	r2, [pc, #72]	@ (80012bc <HAL_TIM_Base_MspInit+0xe8>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001278:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <HAL_TIM_Base_MspInit+0xe8>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INCAP_Pin;
 8001284:	2302      	movs	r3, #2
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001294:	2302      	movs	r3, #2
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(INCAP_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4809      	ldr	r0, [pc, #36]	@ (80012c4 <HAL_TIM_Base_MspInit+0xf0>)
 80012a0:	f000 fd42 	bl	8001d28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	201d      	movs	r0, #29
 80012aa:	f000 fbfa 	bl	8001aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012ae:	201d      	movs	r0, #29
 80012b0:	f000 fc13 	bl	8001ada <HAL_NVIC_EnableIRQ>
}
 80012b4:	bf00      	nop
 80012b6:	3730      	adds	r7, #48	@ 0x30
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40000400 	.word	0x40000400
 80012c4:	48000400 	.word	0x48000400

080012c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012e8:	d11d      	bne.n	8001326 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <HAL_TIM_MspPostInit+0x68>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	4a10      	ldr	r2, [pc, #64]	@ (8001330 <HAL_TIM_MspPostInit+0x68>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <HAL_TIM_MspPostInit+0x68>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LED1_Pin;
 8001302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001314:	2301      	movs	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001322:	f000 fd01 	bl	8001d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0ae      	sub	sp, #184	@ 0xb8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	2288      	movs	r2, #136	@ 0x88
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f005 fbd7 	bl	8006b08 <memset>
  if(huart->Instance==USART1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a42      	ldr	r2, [pc, #264]	@ (8001468 <HAL_UART_MspInit+0x134>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d13b      	bne.n	80013dc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001364:	2301      	movs	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001368:	2300      	movs	r3, #0
 800136a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4618      	mov	r0, r3
 8001372:	f002 f863 	bl	800343c <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800137c:	f7ff fdb6 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001380:	4b3a      	ldr	r3, [pc, #232]	@ (800146c <HAL_UART_MspInit+0x138>)
 8001382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001384:	4a39      	ldr	r2, [pc, #228]	@ (800146c <HAL_UART_MspInit+0x138>)
 8001386:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800138a:	6613      	str	r3, [r2, #96]	@ 0x60
 800138c:	4b37      	ldr	r3, [pc, #220]	@ (800146c <HAL_UART_MspInit+0x138>)
 800138e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	4b34      	ldr	r3, [pc, #208]	@ (800146c <HAL_UART_MspInit+0x138>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	4a33      	ldr	r2, [pc, #204]	@ (800146c <HAL_UART_MspInit+0x138>)
 800139e:	f043 0302 	orr.w	r3, r3, #2
 80013a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a4:	4b31      	ldr	r3, [pc, #196]	@ (800146c <HAL_UART_MspInit+0x138>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80013b0:	23c0      	movs	r3, #192	@ 0xc0
 80013b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013c8:	2307      	movs	r3, #7
 80013ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4826      	ldr	r0, [pc, #152]	@ (8001470 <HAL_UART_MspInit+0x13c>)
 80013d6:	f000 fca7 	bl	8001d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013da:	e040      	b.n	800145e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a24      	ldr	r2, [pc, #144]	@ (8001474 <HAL_UART_MspInit+0x140>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d13b      	bne.n	800145e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013e6:	2304      	movs	r3, #4
 80013e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 f822 	bl	800343c <HAL_RCCEx_PeriphCLKConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80013fe:	f7ff fd75 	bl	8000eec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <HAL_UART_MspInit+0x138>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001406:	4a19      	ldr	r2, [pc, #100]	@ (800146c <HAL_UART_MspInit+0x138>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800140c:	6593      	str	r3, [r2, #88]	@ 0x58
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <HAL_UART_MspInit+0x138>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <HAL_UART_MspInit+0x138>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	4a13      	ldr	r2, [pc, #76]	@ (800146c <HAL_UART_MspInit+0x138>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <HAL_UART_MspInit+0x138>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001432:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001436:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800144c:	2307      	movs	r3, #7
 800144e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001452:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001456:	4619      	mov	r1, r3
 8001458:	4807      	ldr	r0, [pc, #28]	@ (8001478 <HAL_UART_MspInit+0x144>)
 800145a:	f000 fc65 	bl	8001d28 <HAL_GPIO_Init>
}
 800145e:	bf00      	nop
 8001460:	37b8      	adds	r7, #184	@ 0xb8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40013800 	.word	0x40013800
 800146c:	40021000 	.word	0x40021000
 8001470:	48000400 	.word	0x48000400
 8001474:	40004800 	.word	0x40004800
 8001478:	48000c00 	.word	0x48000c00

0800147c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0ac      	sub	sp, #176	@ 0xb0
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2288      	movs	r2, #136	@ 0x88
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f005 fb33 	bl	8006b08 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014aa:	d17c      	bne.n	80015a6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80014b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014be:	2301      	movs	r3, #1
 80014c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014c2:	2318      	movs	r3, #24
 80014c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014c6:	2307      	movs	r3, #7
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80014d2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014d6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 ffad 	bl	800343c <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80014e8:	f7ff fd00 	bl	8000eec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b30      	ldr	r3, [pc, #192]	@ (80015b0 <HAL_PCD_MspInit+0x134>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f0:	4a2f      	ldr	r2, [pc, #188]	@ (80015b0 <HAL_PCD_MspInit+0x134>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f8:	4b2d      	ldr	r3, [pc, #180]	@ (80015b0 <HAL_PCD_MspInit+0x134>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001508:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001522:	f000 fc01 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001526:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800152a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001540:	230a      	movs	r3, #10
 8001542:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001550:	f000 fbea 	bl	8001d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001554:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <HAL_PCD_MspInit+0x134>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001558:	4a15      	ldr	r2, [pc, #84]	@ (80015b0 <HAL_PCD_MspInit+0x134>)
 800155a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800155e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <HAL_PCD_MspInit+0x134>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156c:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <HAL_PCD_MspInit+0x134>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d114      	bne.n	80015a2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <HAL_PCD_MspInit+0x134>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157c:	4a0c      	ldr	r2, [pc, #48]	@ (80015b0 <HAL_PCD_MspInit+0x134>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001582:	6593      	str	r3, [r2, #88]	@ 0x58
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_PCD_MspInit+0x134>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001590:	f001 f888 	bl	80026a4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_PCD_MspInit+0x134>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001598:	4a05      	ldr	r2, [pc, #20]	@ (80015b0 <HAL_PCD_MspInit+0x134>)
 800159a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800159e:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80015a0:	e001      	b.n	80015a6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80015a2:	f001 f87f 	bl	80026a4 <HAL_PWREx_EnableVddUSB>
}
 80015a6:	bf00      	nop
 80015a8:	37b0      	adds	r7, #176	@ 0xb0
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <NMI_Handler+0x4>

080015bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <MemManage_Handler+0x4>

080015cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <UsageFault_Handler+0x4>

080015dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160a:	f000 f92b 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}

08001612 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001616:	2020      	movs	r0, #32
 8001618:	f000 fd48 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800161c:	2040      	movs	r0, #64	@ 0x40
 800161e:	f000 fd45 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001622:	2080      	movs	r0, #128	@ 0x80
 8001624:	f000 fd42 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001628:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800162c:	f000 fd3e 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <TIM3_IRQHandler+0x10>)
 800163a:	f002 ffe2 	bl	8004602 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200001f8 	.word	0x200001f8

08001648 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800164c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001650:	f000 fd2c 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001654:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001658:	f000 fd28 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800165c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001660:	f000 fd24 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001664:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001668:	f000 fd20 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800166c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001670:	f000 fd1c 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f005 fa36 	bl	8006b18 <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20018000 	.word	0x20018000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	20000848 	.word	0x20000848
 80016e0:	200009c0 	.word	0x200009c0

080016e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <UART_Printf_Dbg>:
    HAL_UART_Transmit(&UART_COM, (uint8_t*)buff, strlen(buff), UART_MAXDELAY);
    va_end(args);
}
*/

void UART_Printf_Dbg(const char* fmt, ...) {
 8001708:	b40f      	push	{r0, r1, r2, r3}
 800170a:	b580      	push	{r7, lr}
 800170c:	b0c2      	sub	sp, #264	@ 0x108
 800170e:	af00      	add	r7, sp, #0

	#if(DEBUG_UART)
	char buff[256];
	va_list args;
	va_start(args, fmt);
 8001710:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001718:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800171c:	601a      	str	r2, [r3, #0]
	vsnprintf(buff, sizeof(buff), fmt, args);
 800171e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001722:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001726:	f107 0008 	add.w	r0, r7, #8
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001730:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001734:	f005 f9da 	bl	8006aec <vsniprintf>
	HAL_UART_Transmit(&UART_DBG, (uint8_t*)buff, strlen(buff), UART_MAXDELAY);
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fd47 	bl	80001d0 <strlen>
 8001742:	4603      	mov	r3, r0
 8001744:	b29a      	uxth	r2, r3
 8001746:	f107 0108 	add.w	r1, r7, #8
 800174a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174e:	4805      	ldr	r0, [pc, #20]	@ (8001764 <UART_Printf_Dbg+0x5c>)
 8001750:	f004 f998 	bl	8005a84 <HAL_UART_Transmit>
	va_end(args);
	#endif
}
 8001754:	bf00      	nop
 8001756:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800175a:	46bd      	mov	sp, r7
 800175c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001760:	b004      	add	sp, #16
 8001762:	4770      	bx	lr
 8001764:	20000244 	.word	0x20000244

08001768 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001768:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800176c:	f7ff ffba 	bl	80016e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001772:	490d      	ldr	r1, [pc, #52]	@ (80017a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <LoopForever+0xe>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001778:	e002      	b.n	8001780 <LoopCopyDataInit>

0800177a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800177c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177e:	3304      	adds	r3, #4

08001780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001784:	d3f9      	bcc.n	800177a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001788:	4c0a      	ldr	r4, [pc, #40]	@ (80017b4 <LoopForever+0x16>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800178c:	e001      	b.n	8001792 <LoopFillZerobss>

0800178e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001790:	3204      	adds	r2, #4

08001792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001794:	d3fb      	bcc.n	800178e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001796:	f005 f9c5 	bl	8006b24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800179a:	f7fe fee9 	bl	8000570 <main>

0800179e <LoopForever>:

LoopForever:
    b LoopForever
 800179e:	e7fe      	b.n	800179e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017ac:	080074b8 	.word	0x080074b8
  ldr r2, =_sbss
 80017b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80017b4:	200009bc 	.word	0x200009bc

080017b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC1_2_IRQHandler>

080017ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f961 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ca:	2000      	movs	r0, #0
 80017cc:	f000 f80e 	bl	80017ec <HAL_InitTick>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	e001      	b.n	80017e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017dc:	f7ff fb8c 	bl	8000ef8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017e0:	79fb      	ldrb	r3, [r7, #7]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017f8:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <HAL_InitTick+0x6c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d023      	beq.n	8001848 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001800:	4b16      	ldr	r3, [pc, #88]	@ (800185c <HAL_InitTick+0x70>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <HAL_InitTick+0x6c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f96d 	bl	8001af6 <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10f      	bne.n	8001842 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b0f      	cmp	r3, #15
 8001826:	d809      	bhi.n	800183c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001828:	2200      	movs	r2, #0
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	f000 f937 	bl	8001aa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001834:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <HAL_InitTick+0x74>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e007      	b.n	800184c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e004      	b.n	800184c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	73fb      	strb	r3, [r7, #15]
 8001846:	e001      	b.n	800184c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000008 	.word	0x20000008
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_IncTick+0x20>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_IncTick+0x24>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <HAL_IncTick+0x24>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000008 	.word	0x20000008
 8001888:	2000084c 	.word	0x2000084c

0800188c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTick;
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <HAL_GetTick+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2000084c 	.word	0x2000084c

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff ffee 	bl	800188c <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d005      	beq.n	80018ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_Delay+0x44>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ca:	bf00      	nop
 80018cc:	f7ff ffde 	bl	800188c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8f7      	bhi.n	80018cc <HAL_Delay+0x28>
  {
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008

080018ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	@ (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4907      	ldr	r1, [pc, #28]	@ (8001988 <__NVIC_EnableIRQ+0x38>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	@ (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	@ (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	@ 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	@ 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a58:	d301      	bcc.n	8001a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00f      	b.n	8001a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <SysTick_Config+0x40>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a66:	210f      	movs	r1, #15
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f7ff ff8e 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <SysTick_Config+0x40>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a76:	4b04      	ldr	r3, [pc, #16]	@ (8001a88 <SysTick_Config+0x40>)
 8001a78:	2207      	movs	r2, #7
 8001a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff29 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab4:	f7ff ff3e 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001ab8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	6978      	ldr	r0, [r7, #20]
 8001ac0:	f7ff ff8e 	bl	80019e0 <NVIC_EncodePriority>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff5d 	bl	800198c <__NVIC_SetPriority>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff31 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffa2 	bl	8001a48 <SysTick_Config>
 8001b04:	4603      	mov	r3, r0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0ac      	b.n	8001c7c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f8b2 	bl	8001c90 <DFSDM_GetChannelFromInstance>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4a55      	ldr	r2, [pc, #340]	@ (8001c84 <HAL_DFSDM_ChannelInit+0x174>)
 8001b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e09f      	b.n	8001c7c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff f9ff 	bl	8000f40 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001b42:	4b51      	ldr	r3, [pc, #324]	@ (8001c88 <HAL_DFSDM_ChannelInit+0x178>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	4a4f      	ldr	r2, [pc, #316]	@ (8001c88 <HAL_DFSDM_ChannelInit+0x178>)
 8001b4a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001b4c:	4b4e      	ldr	r3, [pc, #312]	@ (8001c88 <HAL_DFSDM_ChannelInit+0x178>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d125      	bne.n	8001ba0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001b54:	4b4d      	ldr	r3, [pc, #308]	@ (8001c8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a4c      	ldr	r2, [pc, #304]	@ (8001c8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001b5e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001b60:	4b4a      	ldr	r3, [pc, #296]	@ (8001c8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	4948      	ldr	r1, [pc, #288]	@ (8001c8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001b6e:	4b47      	ldr	r3, [pc, #284]	@ (8001c8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a46      	ldr	r2, [pc, #280]	@ (8001c8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b74:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001b78:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	791b      	ldrb	r3, [r3, #4]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001b82:	4b42      	ldr	r3, [pc, #264]	@ (8001c8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	493f      	ldr	r1, [pc, #252]	@ (8001c8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001b94:	4b3d      	ldr	r3, [pc, #244]	@ (8001c8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a3c      	ldr	r2, [pc, #240]	@ (8001c8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001b9e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001bae:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bbe:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001bc4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 020f 	bic.w	r2, r2, #15
 8001bdc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6819      	ldr	r1, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001c04:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6899      	ldr	r1, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	3b01      	subs	r3, #1
 8001c16:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f002 0207 	and.w	r2, r2, #7
 8001c30:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c5c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f810 	bl	8001c90 <DFSDM_GetChannelFromInstance>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4904      	ldr	r1, [pc, #16]	@ (8001c84 <HAL_DFSDM_ChannelInit+0x174>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000854 	.word	0x20000854
 8001c88:	20000850 	.word	0x20000850
 8001c8c:	40016000 	.word	0x40016000

08001c90 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d0c <DFSDM_GetChannelFromInstance+0x7c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d102      	bne.n	8001ca6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	e02b      	b.n	8001cfe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a19      	ldr	r2, [pc, #100]	@ (8001d10 <DFSDM_GetChannelFromInstance+0x80>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d102      	bne.n	8001cb4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e024      	b.n	8001cfe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <DFSDM_GetChannelFromInstance+0x84>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d102      	bne.n	8001cc2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	e01d      	b.n	8001cfe <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a14      	ldr	r2, [pc, #80]	@ (8001d18 <DFSDM_GetChannelFromInstance+0x88>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d102      	bne.n	8001cd0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	e016      	b.n	8001cfe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a12      	ldr	r2, [pc, #72]	@ (8001d1c <DFSDM_GetChannelFromInstance+0x8c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d102      	bne.n	8001cde <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001cd8:	2305      	movs	r3, #5
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e00f      	b.n	8001cfe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d20 <DFSDM_GetChannelFromInstance+0x90>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d102      	bne.n	8001cec <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	e008      	b.n	8001cfe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a0d      	ldr	r2, [pc, #52]	@ (8001d24 <DFSDM_GetChannelFromInstance+0x94>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d102      	bne.n	8001cfa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e001      	b.n	8001cfe <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	40016000 	.word	0x40016000
 8001d10:	40016020 	.word	0x40016020
 8001d14:	40016040 	.word	0x40016040
 8001d18:	40016080 	.word	0x40016080
 8001d1c:	400160a0 	.word	0x400160a0
 8001d20:	400160c0 	.word	0x400160c0
 8001d24:	400160e0 	.word	0x400160e0

08001d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d36:	e17f      	b.n	8002038 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8171 	beq.w	8002032 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d005      	beq.n	8001d68 <HAL_GPIO_Init+0x40>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d130      	bne.n	8001dca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d9e:	2201      	movs	r2, #1
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	091b      	lsrs	r3, r3, #4
 8001db4:	f003 0201 	and.w	r2, r3, #1
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d118      	bne.n	8001e08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	f003 0201 	and.w	r2, r3, #1
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d017      	beq.n	8001e44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d123      	bne.n	8001e98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	6939      	ldr	r1, [r7, #16]
 8001e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80ac 	beq.w	8002032 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	4b5f      	ldr	r3, [pc, #380]	@ (8002058 <HAL_GPIO_Init+0x330>)
 8001edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ede:	4a5e      	ldr	r2, [pc, #376]	@ (8002058 <HAL_GPIO_Init+0x330>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ee6:	4b5c      	ldr	r3, [pc, #368]	@ (8002058 <HAL_GPIO_Init+0x330>)
 8001ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ef2:	4a5a      	ldr	r2, [pc, #360]	@ (800205c <HAL_GPIO_Init+0x334>)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f1c:	d025      	beq.n	8001f6a <HAL_GPIO_Init+0x242>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4f      	ldr	r2, [pc, #316]	@ (8002060 <HAL_GPIO_Init+0x338>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01f      	beq.n	8001f66 <HAL_GPIO_Init+0x23e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4e      	ldr	r2, [pc, #312]	@ (8002064 <HAL_GPIO_Init+0x33c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d019      	beq.n	8001f62 <HAL_GPIO_Init+0x23a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4d      	ldr	r2, [pc, #308]	@ (8002068 <HAL_GPIO_Init+0x340>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <HAL_GPIO_Init+0x236>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4c      	ldr	r2, [pc, #304]	@ (800206c <HAL_GPIO_Init+0x344>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00d      	beq.n	8001f5a <HAL_GPIO_Init+0x232>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4b      	ldr	r2, [pc, #300]	@ (8002070 <HAL_GPIO_Init+0x348>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d007      	beq.n	8001f56 <HAL_GPIO_Init+0x22e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4a      	ldr	r2, [pc, #296]	@ (8002074 <HAL_GPIO_Init+0x34c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <HAL_GPIO_Init+0x22a>
 8001f4e:	2306      	movs	r3, #6
 8001f50:	e00c      	b.n	8001f6c <HAL_GPIO_Init+0x244>
 8001f52:	2307      	movs	r3, #7
 8001f54:	e00a      	b.n	8001f6c <HAL_GPIO_Init+0x244>
 8001f56:	2305      	movs	r3, #5
 8001f58:	e008      	b.n	8001f6c <HAL_GPIO_Init+0x244>
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x244>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e004      	b.n	8001f6c <HAL_GPIO_Init+0x244>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_Init+0x244>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x244>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	f002 0203 	and.w	r2, r2, #3
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4093      	lsls	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f7c:	4937      	ldr	r1, [pc, #220]	@ (800205c <HAL_GPIO_Init+0x334>)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002078 <HAL_GPIO_Init+0x350>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fae:	4a32      	ldr	r2, [pc, #200]	@ (8002078 <HAL_GPIO_Init+0x350>)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fb4:	4b30      	ldr	r3, [pc, #192]	@ (8002078 <HAL_GPIO_Init+0x350>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fd8:	4a27      	ldr	r2, [pc, #156]	@ (8002078 <HAL_GPIO_Init+0x350>)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fde:	4b26      	ldr	r3, [pc, #152]	@ (8002078 <HAL_GPIO_Init+0x350>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002002:	4a1d      	ldr	r2, [pc, #116]	@ (8002078 <HAL_GPIO_Init+0x350>)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002008:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <HAL_GPIO_Init+0x350>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800202c:	4a12      	ldr	r2, [pc, #72]	@ (8002078 <HAL_GPIO_Init+0x350>)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa22 f303 	lsr.w	r3, r2, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	f47f ae78 	bne.w	8001d38 <HAL_GPIO_Init+0x10>
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	371c      	adds	r7, #28
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	40010000 	.word	0x40010000
 8002060:	48000400 	.word	0x48000400
 8002064:	48000800 	.word	0x48000800
 8002068:	48000c00 	.word	0x48000c00
 800206c:	48001000 	.word	0x48001000
 8002070:	48001400 	.word	0x48001400
 8002074:	48001800 	.word	0x48001800
 8002078:	40010400 	.word	0x40010400

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800208c:	787b      	ldrb	r3, [r7, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d006      	beq.n	80020d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020c2:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f806 	bl	80020dc <HAL_GPIO_EXTI_Callback>
  }
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e08d      	b.n	8002220 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d106      	bne.n	800211e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7fe ff75 	bl	8001008 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2224      	movs	r2, #36	@ 0x24
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002142:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002152:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	e006      	b.n	800217a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002178:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d108      	bne.n	8002194 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	e007      	b.n	80021a4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69d9      	ldr	r1, [r3, #28]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1a      	ldr	r2, [r3, #32]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b20      	cmp	r3, #32
 800223c:	d138      	bne.n	80022b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002248:	2302      	movs	r3, #2
 800224a:	e032      	b.n	80022b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2224      	movs	r2, #36	@ 0x24
 8002258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800227a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6819      	ldr	r1, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e000      	b.n	80022b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
  }
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022be:	b480      	push	{r7}
 80022c0:	b085      	sub	sp, #20
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	d139      	bne.n	8002348 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022de:	2302      	movs	r3, #2
 80022e0:	e033      	b.n	800234a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2224      	movs	r2, #36	@ 0x24
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0201 	bic.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002310:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af02      	add	r7, sp, #8
 800235c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e101      	b.n	800256c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d106      	bne.n	8002382 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff f87d 	bl	800147c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2203      	movs	r2, #3
 8002386:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f004 f8ff 	bl	8006598 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7c1a      	ldrb	r2, [r3, #16]
 80023a2:	f88d 2000 	strb.w	r2, [sp]
 80023a6:	3304      	adds	r3, #4
 80023a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023aa:	f004 f8c8 	bl	800653e <USB_CoreInit>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0d5      	b.n	800256c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 f8f7 	bl	80065ba <USB_SetCurrentMode>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0c6      	b.n	800256c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e04a      	b.n	800247a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	3315      	adds	r3, #21
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	3314      	adds	r3, #20
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	b298      	uxth	r0, r3
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	332e      	adds	r3, #46	@ 0x2e
 8002420:	4602      	mov	r2, r0
 8002422:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3318      	adds	r3, #24
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	331c      	adds	r3, #28
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	3320      	adds	r3, #32
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	3324      	adds	r3, #36	@ 0x24
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	3301      	adds	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	791b      	ldrb	r3, [r3, #4]
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	429a      	cmp	r2, r3
 8002482:	d3af      	bcc.n	80023e4 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	e044      	b.n	8002514 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	3301      	adds	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	791b      	ldrb	r3, [r3, #4]
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	429a      	cmp	r2, r3
 800251c:	d3b5      	bcc.n	800248a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7c1a      	ldrb	r2, [r3, #16]
 8002526:	f88d 2000 	strb.w	r2, [sp]
 800252a:	3304      	adds	r3, #4
 800252c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800252e:	f004 f891 	bl	8006654 <USB_DevInit>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e013      	b.n	800256c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7b1b      	ldrb	r3, [r3, #12]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f80a 	bl	8002574 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f004 fa36 	bl	80069d6 <USB_DevDisconnect>

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	f043 0303 	orr.w	r3, r3, #3
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025c0:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40007000 	.word	0x40007000

080025dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025e0:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40007000 	.word	0x40007000

080025f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002606:	d130      	bne.n	800266a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002608:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002614:	d038      	beq.n	8002688 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002616:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800261e:	4a1e      	ldr	r2, [pc, #120]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002620:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002624:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002626:	4b1d      	ldr	r3, [pc, #116]	@ (800269c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2232      	movs	r2, #50	@ 0x32
 800262c:	fb02 f303 	mul.w	r3, r2, r3
 8002630:	4a1b      	ldr	r2, [pc, #108]	@ (80026a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0c9b      	lsrs	r3, r3, #18
 8002638:	3301      	adds	r3, #1
 800263a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800263c:	e002      	b.n	8002644 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3b01      	subs	r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002644:	4b14      	ldr	r3, [pc, #80]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002650:	d102      	bne.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f2      	bne.n	800263e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002658:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002664:	d110      	bne.n	8002688 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e00f      	b.n	800268a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800266a:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002676:	d007      	beq.n	8002688 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002678:	4b07      	ldr	r3, [pc, #28]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002680:	4a05      	ldr	r2, [pc, #20]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002682:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002686:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40007000 	.word	0x40007000
 800269c:	20000000 	.word	0x20000000
 80026a0:	431bde83 	.word	0x431bde83

080026a4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a04      	ldr	r2, [pc, #16]	@ (80026c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80026ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026b2:	6053      	str	r3, [r2, #4]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40007000 	.word	0x40007000

080026c4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff f8de 	bl	800188c <HAL_GetTick>
 80026d0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e063      	b.n	80027a4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10b      	bne.n	8002700 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7fe fce7 	bl	80010c4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80026f6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f858 	bl	80027b0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	3b01      	subs	r3, #1
 8002710:	021a      	lsls	r2, r3, #8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	2120      	movs	r1, #32
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f850 	bl	80027cc <QSPI_WaitFlagStateUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002730:	7afb      	ldrb	r3, [r7, #11]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d131      	bne.n	800279a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002740:	f023 0310 	bic.w	r3, r3, #16
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6852      	ldr	r2, [r2, #4]
 8002748:	0611      	lsls	r1, r2, #24
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68d2      	ldr	r2, [r2, #12]
 800274e:	4311      	orrs	r1, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	430b      	orrs	r3, r1
 8002756:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4b13      	ldr	r3, [pc, #76]	@ (80027ac <HAL_QSPI_Init+0xe8>)
 8002760:	4013      	ands	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6912      	ldr	r2, [r2, #16]
 8002766:	0411      	lsls	r1, r2, #16
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6952      	ldr	r2, [r2, #20]
 800276c:	4311      	orrs	r1, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6992      	ldr	r2, [r2, #24]
 8002772:	4311      	orrs	r1, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	430b      	orrs	r3, r1
 800277a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80027a2:	7afb      	ldrb	r3, [r7, #11]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	ffe0f8fe 	.word	0xffe0f8fe

080027b0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80027dc:	e01a      	b.n	8002814 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d016      	beq.n	8002814 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e6:	f7ff f851 	bl	800188c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d302      	bcc.n	80027fc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10b      	bne.n	8002814 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2204      	movs	r2, #4
 8002800:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e00e      	b.n	8002832 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	bf14      	ite	ne
 8002822:	2301      	movne	r3, #1
 8002824:	2300      	moveq	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	429a      	cmp	r2, r3
 800282e:	d1d6      	bne.n	80027de <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e3ca      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284e:	4b97      	ldr	r3, [pc, #604]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002858:	4b94      	ldr	r3, [pc, #592]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 80e4 	beq.w	8002a38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_RCC_OscConfig+0x4a>
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b0c      	cmp	r3, #12
 800287a:	f040 808b 	bne.w	8002994 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b01      	cmp	r3, #1
 8002882:	f040 8087 	bne.w	8002994 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002886:	4b89      	ldr	r3, [pc, #548]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_RCC_OscConfig+0x62>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e3a2      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1a      	ldr	r2, [r3, #32]
 80028a2:	4b82      	ldr	r3, [pc, #520]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d004      	beq.n	80028b8 <HAL_RCC_OscConfig+0x7c>
 80028ae:	4b7f      	ldr	r3, [pc, #508]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028b6:	e005      	b.n	80028c4 <HAL_RCC_OscConfig+0x88>
 80028b8:	4b7c      	ldr	r3, [pc, #496]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d223      	bcs.n	8002910 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fd55 	bl	800337c <RCC_SetFlashLatencyFromMSIRange>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e383      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028dc:	4b73      	ldr	r3, [pc, #460]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a72      	ldr	r2, [pc, #456]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b70      	ldr	r3, [pc, #448]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	496d      	ldr	r1, [pc, #436]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fa:	4b6c      	ldr	r3, [pc, #432]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	4968      	ldr	r1, [pc, #416]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
 800290e:	e025      	b.n	800295c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002910:	4b66      	ldr	r3, [pc, #408]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a65      	ldr	r2, [pc, #404]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002916:	f043 0308 	orr.w	r3, r3, #8
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b63      	ldr	r3, [pc, #396]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4960      	ldr	r1, [pc, #384]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800292e:	4b5f      	ldr	r3, [pc, #380]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	495b      	ldr	r1, [pc, #364]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fd15 	bl	800337c <RCC_SetFlashLatencyFromMSIRange>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e343      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800295c:	f000 fc4a 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b52      	ldr	r3, [pc, #328]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	4950      	ldr	r1, [pc, #320]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
 8002978:	4a4e      	ldr	r2, [pc, #312]	@ (8002ab4 <HAL_RCC_OscConfig+0x278>)
 800297a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800297c:	4b4e      	ldr	r3, [pc, #312]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe ff33 	bl	80017ec <HAL_InitTick>
 8002986:	4603      	mov	r3, r0
 8002988:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d052      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	e327      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d032      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800299c:	4b43      	ldr	r3, [pc, #268]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a42      	ldr	r2, [pc, #264]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029a8:	f7fe ff70 	bl	800188c <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b0:	f7fe ff6c 	bl	800188c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e310      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c2:	4b3a      	ldr	r3, [pc, #232]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ce:	4b37      	ldr	r3, [pc, #220]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a36      	ldr	r2, [pc, #216]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80029d4:	f043 0308 	orr.w	r3, r3, #8
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4931      	ldr	r1, [pc, #196]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ec:	4b2f      	ldr	r3, [pc, #188]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	492c      	ldr	r1, [pc, #176]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
 8002a00:	e01a      	b.n	8002a38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a02:	4b2a      	ldr	r3, [pc, #168]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a29      	ldr	r2, [pc, #164]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe ff3d 	bl	800188c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a16:	f7fe ff39 	bl	800188c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e2dd      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a28:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x1da>
 8002a34:	e000      	b.n	8002a38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d074      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d005      	beq.n	8002a56 <HAL_RCC_OscConfig+0x21a>
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	d10e      	bne.n	8002a6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d10b      	bne.n	8002a6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d064      	beq.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d160      	bne.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e2ba      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x24a>
 8002a78:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	e026      	b.n	8002ad4 <HAL_RCC_OscConfig+0x298>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a8e:	d115      	bne.n	8002abc <HAL_RCC_OscConfig+0x280>
 8002a90:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a05      	ldr	r2, [pc, #20]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b03      	ldr	r3, [pc, #12]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a02      	ldr	r2, [pc, #8]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	e014      	b.n	8002ad4 <HAL_RCC_OscConfig+0x298>
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	0800742c 	.word	0x0800742c
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000004 	.word	0x20000004
 8002abc:	4ba0      	ldr	r3, [pc, #640]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a9f      	ldr	r2, [pc, #636]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b9d      	ldr	r3, [pc, #628]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a9c      	ldr	r2, [pc, #624]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d013      	beq.n	8002b04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fed6 	bl	800188c <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe fed2 	bl	800188c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	@ 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e276      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af6:	4b92      	ldr	r3, [pc, #584]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x2a8>
 8002b02:	e014      	b.n	8002b2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fec2 	bl	800188c <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7fe febe 	bl	800188c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	@ 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e262      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b1e:	4b88      	ldr	r3, [pc, #544]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x2d0>
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d060      	beq.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_OscConfig+0x310>
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2b0c      	cmp	r3, #12
 8002b44:	d119      	bne.n	8002b7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d116      	bne.n	8002b7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b4c:	4b7c      	ldr	r3, [pc, #496]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_OscConfig+0x328>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e23f      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b76      	ldr	r3, [pc, #472]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	4973      	ldr	r1, [pc, #460]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b78:	e040      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d023      	beq.n	8002bca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b82:	4b6f      	ldr	r3, [pc, #444]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6e      	ldr	r2, [pc, #440]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fe7d 	bl	800188c <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b96:	f7fe fe79 	bl	800188c <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e21d      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba8:	4b65      	ldr	r3, [pc, #404]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb4:	4b62      	ldr	r3, [pc, #392]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	495f      	ldr	r1, [pc, #380]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
 8002bc8:	e018      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bca:	4b5d      	ldr	r3, [pc, #372]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a5c      	ldr	r2, [pc, #368]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fe59 	bl	800188c <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bde:	f7fe fe55 	bl	800188c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e1f9      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf0:	4b53      	ldr	r3, [pc, #332]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d03c      	beq.n	8002c82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01c      	beq.n	8002c4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c10:	4b4b      	ldr	r3, [pc, #300]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c16:	4a4a      	ldr	r2, [pc, #296]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe fe34 	bl	800188c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fe fe30 	bl	800188c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e1d4      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c3a:	4b41      	ldr	r3, [pc, #260]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ef      	beq.n	8002c28 <HAL_RCC_OscConfig+0x3ec>
 8002c48:	e01b      	b.n	8002c82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c50:	4a3b      	ldr	r2, [pc, #236]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fe17 	bl	800188c <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c62:	f7fe fe13 	bl	800188c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1b7      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c74:	4b32      	ldr	r3, [pc, #200]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1ef      	bne.n	8002c62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80a6 	beq.w	8002ddc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c90:	2300      	movs	r3, #0
 8002c92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c94:	4b2a      	ldr	r3, [pc, #168]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10d      	bne.n	8002cbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	4b27      	ldr	r3, [pc, #156]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca4:	4a26      	ldr	r2, [pc, #152]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cac:	4b24      	ldr	r3, [pc, #144]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cbc:	4b21      	ldr	r3, [pc, #132]	@ (8002d44 <HAL_RCC_OscConfig+0x508>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d118      	bne.n	8002cfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d44 <HAL_RCC_OscConfig+0x508>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8002d44 <HAL_RCC_OscConfig+0x508>)
 8002cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd4:	f7fe fdda 	bl	800188c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cdc:	f7fe fdd6 	bl	800188c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e17a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cee:	4b15      	ldr	r3, [pc, #84]	@ (8002d44 <HAL_RCC_OscConfig+0x508>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d108      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4d8>
 8002d02:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d08:	4a0d      	ldr	r2, [pc, #52]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d12:	e029      	b.n	8002d68 <HAL_RCC_OscConfig+0x52c>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d115      	bne.n	8002d48 <HAL_RCC_OscConfig+0x50c>
 8002d1c:	4b08      	ldr	r3, [pc, #32]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d22:	4a07      	ldr	r2, [pc, #28]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d2c:	4b04      	ldr	r3, [pc, #16]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d32:	4a03      	ldr	r2, [pc, #12]	@ (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d3c:	e014      	b.n	8002d68 <HAL_RCC_OscConfig+0x52c>
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40007000 	.word	0x40007000
 8002d48:	4b9c      	ldr	r3, [pc, #624]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4e:	4a9b      	ldr	r2, [pc, #620]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d58:	4b98      	ldr	r3, [pc, #608]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5e:	4a97      	ldr	r2, [pc, #604]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d016      	beq.n	8002d9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe fd8c 	bl	800188c <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f7fe fd88 	bl	800188c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e12a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8e:	4b8b      	ldr	r3, [pc, #556]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0ed      	beq.n	8002d78 <HAL_RCC_OscConfig+0x53c>
 8002d9c:	e015      	b.n	8002dca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fd75 	bl	800188c <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002da4:	e00a      	b.n	8002dbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7fe fd71 	bl	800188c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e113      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dbc:	4b7f      	ldr	r3, [pc, #508]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1ed      	bne.n	8002da6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d105      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd0:	4b7a      	ldr	r3, [pc, #488]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd4:	4a79      	ldr	r2, [pc, #484]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dda:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80fe 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	f040 80d0 	bne.w	8002f90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002df0:	4b72      	ldr	r3, [pc, #456]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 0203 	and.w	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d130      	bne.n	8002e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d127      	bne.n	8002e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d11f      	bne.n	8002e66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e30:	2a07      	cmp	r2, #7
 8002e32:	bf14      	ite	ne
 8002e34:	2201      	movne	r2, #1
 8002e36:	2200      	moveq	r2, #0
 8002e38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d113      	bne.n	8002e66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d06e      	beq.n	8002f44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d069      	beq.n	8002f40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e6c:	4b53      	ldr	r3, [pc, #332]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e78:	4b50      	ldr	r3, [pc, #320]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0ad      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e88:	4b4c      	ldr	r3, [pc, #304]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e94:	f7fe fcfa 	bl	800188c <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fe fcf6 	bl	800188c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e09a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eae:	4b43      	ldr	r3, [pc, #268]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eba:	4b40      	ldr	r3, [pc, #256]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	4b40      	ldr	r3, [pc, #256]	@ (8002fc0 <HAL_RCC_OscConfig+0x784>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	4311      	orrs	r1, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ed4:	0212      	lsls	r2, r2, #8
 8002ed6:	4311      	orrs	r1, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002edc:	0852      	lsrs	r2, r2, #1
 8002ede:	3a01      	subs	r2, #1
 8002ee0:	0552      	lsls	r2, r2, #21
 8002ee2:	4311      	orrs	r1, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ee8:	0852      	lsrs	r2, r2, #1
 8002eea:	3a01      	subs	r2, #1
 8002eec:	0652      	lsls	r2, r2, #25
 8002eee:	4311      	orrs	r1, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ef4:	0912      	lsrs	r2, r2, #4
 8002ef6:	0452      	lsls	r2, r2, #17
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	4930      	ldr	r1, [pc, #192]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f00:	4b2e      	ldr	r3, [pc, #184]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2d      	ldr	r2, [pc, #180]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a2a      	ldr	r2, [pc, #168]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f18:	f7fe fcb8 	bl	800188c <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fe fcb4 	bl	800188c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e058      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f32:	4b22      	ldr	r3, [pc, #136]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f3e:	e050      	b.n	8002fe2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e04f      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f44:	4b1d      	ldr	r3, [pc, #116]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d148      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f50:	4b1a      	ldr	r3, [pc, #104]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a19      	ldr	r2, [pc, #100]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f5c:	4b17      	ldr	r3, [pc, #92]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4a16      	ldr	r2, [pc, #88]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f68:	f7fe fc90 	bl	800188c <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe fc8c 	bl	800188c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e030      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f82:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x734>
 8002f8e:	e028      	b.n	8002fe2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b0c      	cmp	r3, #12
 8002f94:	d023      	beq.n	8002fde <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f96:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a08      	ldr	r2, [pc, #32]	@ (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fc73 	bl	800188c <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa8:	e00c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe fc6f 	bl	800188c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d905      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e013      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc4:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <HAL_RCC_OscConfig+0x7b0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ec      	bne.n	8002faa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fd0:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <HAL_RCC_OscConfig+0x7b0>)
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	4905      	ldr	r1, [pc, #20]	@ (8002fec <HAL_RCC_OscConfig+0x7b0>)
 8002fd6:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <HAL_RCC_OscConfig+0x7b4>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60cb      	str	r3, [r1, #12]
 8002fdc:	e001      	b.n	8002fe2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	feeefffc 	.word	0xfeeefffc

08002ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0e7      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003008:	4b75      	ldr	r3, [pc, #468]	@ (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d910      	bls.n	8003038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003016:	4b72      	ldr	r3, [pc, #456]	@ (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 0207 	bic.w	r2, r3, #7
 800301e:	4970      	ldr	r1, [pc, #448]	@ (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003026:	4b6e      	ldr	r3, [pc, #440]	@ (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0cf      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d010      	beq.n	8003066 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	4b66      	ldr	r3, [pc, #408]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003050:	429a      	cmp	r2, r3
 8003052:	d908      	bls.n	8003066 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003054:	4b63      	ldr	r3, [pc, #396]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4960      	ldr	r1, [pc, #384]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d04c      	beq.n	800310c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307a:	4b5a      	ldr	r3, [pc, #360]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d121      	bne.n	80030ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0a6      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003092:	4b54      	ldr	r3, [pc, #336]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d115      	bne.n	80030ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e09a      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d107      	bne.n	80030ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030aa:	4b4e      	ldr	r3, [pc, #312]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e08e      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ba:	4b4a      	ldr	r3, [pc, #296]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e086      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030ca:	4b46      	ldr	r3, [pc, #280]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f023 0203 	bic.w	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4943      	ldr	r1, [pc, #268]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030dc:	f7fe fbd6 	bl	800188c <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f7fe fbd2 	bl	800188c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e06e      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	4b3a      	ldr	r3, [pc, #232]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 020c 	and.w	r2, r3, #12
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	429a      	cmp	r2, r3
 800310a:	d1eb      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	4b31      	ldr	r3, [pc, #196]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003124:	429a      	cmp	r2, r3
 8003126:	d208      	bcs.n	800313a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b2e      	ldr	r3, [pc, #184]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	492b      	ldr	r1, [pc, #172]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800313a:	4b29      	ldr	r3, [pc, #164]	@ (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d210      	bcs.n	800316a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003148:	4b25      	ldr	r3, [pc, #148]	@ (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 0207 	bic.w	r2, r3, #7
 8003150:	4923      	ldr	r1, [pc, #140]	@ (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003158:	4b21      	ldr	r3, [pc, #132]	@ (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d001      	beq.n	800316a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e036      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003176:	4b1b      	ldr	r3, [pc, #108]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	4918      	ldr	r1, [pc, #96]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d009      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003194:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4910      	ldr	r1, [pc, #64]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031a8:	f000 f824 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b0d      	ldr	r3, [pc, #52]	@ (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	091b      	lsrs	r3, r3, #4
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	490b      	ldr	r1, [pc, #44]	@ (80031e8 <HAL_RCC_ClockConfig+0x1f4>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
 80031c4:	4a09      	ldr	r2, [pc, #36]	@ (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 80031c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031c8:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <HAL_RCC_ClockConfig+0x1fc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fe fb0d 	bl	80017ec <HAL_InitTick>
 80031d2:	4603      	mov	r3, r0
 80031d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80031d6:	7afb      	ldrb	r3, [r7, #11]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40022000 	.word	0x40022000
 80031e4:	40021000 	.word	0x40021000
 80031e8:	0800742c 	.word	0x0800742c
 80031ec:	20000000 	.word	0x20000000
 80031f0:	20000004 	.word	0x20000004

080031f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	@ 0x24
 80031f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	2300      	movs	r3, #0
 8003200:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003202:	4b3e      	ldr	r3, [pc, #248]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800320c:	4b3b      	ldr	r3, [pc, #236]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x34>
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d121      	bne.n	8003266 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d11e      	bne.n	8003266 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003228:	4b34      	ldr	r3, [pc, #208]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d107      	bne.n	8003244 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003234:	4b31      	ldr	r3, [pc, #196]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003236:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	e005      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003244:	4b2d      	ldr	r3, [pc, #180]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003250:	4a2b      	ldr	r2, [pc, #172]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003258:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10d      	bne.n	800327c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003264:	e00a      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d102      	bne.n	8003272 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800326c:	4b25      	ldr	r3, [pc, #148]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x110>)
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	e004      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d101      	bne.n	800327c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003278:	4b23      	ldr	r3, [pc, #140]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x114>)
 800327a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b0c      	cmp	r3, #12
 8003280:	d134      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003282:	4b1e      	ldr	r3, [pc, #120]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d003      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0xa6>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b03      	cmp	r3, #3
 8003296:	d003      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0xac>
 8003298:	e005      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800329a:	4b1a      	ldr	r3, [pc, #104]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x110>)
 800329c:	617b      	str	r3, [r7, #20]
      break;
 800329e:	e005      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032a0:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x114>)
 80032a2:	617b      	str	r3, [r7, #20]
      break;
 80032a4:	e002      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	617b      	str	r3, [r7, #20]
      break;
 80032aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032ac:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	3301      	adds	r3, #1
 80032b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032ba:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	fb03 f202 	mul.w	r2, r3, r2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032d2:	4b0a      	ldr	r3, [pc, #40]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	0e5b      	lsrs	r3, r3, #25
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	3301      	adds	r3, #1
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032ec:	69bb      	ldr	r3, [r7, #24]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	@ 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	08007444 	.word	0x08007444
 8003304:	00f42400 	.word	0x00f42400
 8003308:	007a1200 	.word	0x007a1200

0800330c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003310:	4b03      	ldr	r3, [pc, #12]	@ (8003320 <HAL_RCC_GetHCLKFreq+0x14>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000000 	.word	0x20000000

08003324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003328:	f7ff fff0 	bl	800330c <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4904      	ldr	r1, [pc, #16]	@ (800334c <HAL_RCC_GetPCLK1Freq+0x28>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	0800743c 	.word	0x0800743c

08003350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003354:	f7ff ffda 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	0adb      	lsrs	r3, r3, #11
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4904      	ldr	r1, [pc, #16]	@ (8003378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	0800743c 	.word	0x0800743c

0800337c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003384:	2300      	movs	r3, #0
 8003386:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003388:	4b2a      	ldr	r3, [pc, #168]	@ (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003394:	f7ff f922 	bl	80025dc <HAL_PWREx_GetVoltageRange>
 8003398:	6178      	str	r0, [r7, #20]
 800339a:	e014      	b.n	80033c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800339c:	4b25      	ldr	r3, [pc, #148]	@ (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a0:	4a24      	ldr	r2, [pc, #144]	@ (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033a8:	4b22      	ldr	r3, [pc, #136]	@ (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033b4:	f7ff f912 	bl	80025dc <HAL_PWREx_GetVoltageRange>
 80033b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033be:	4a1d      	ldr	r2, [pc, #116]	@ (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033cc:	d10b      	bne.n	80033e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b80      	cmp	r3, #128	@ 0x80
 80033d2:	d919      	bls.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80033d8:	d902      	bls.n	80033e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033da:	2302      	movs	r3, #2
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	e013      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033e0:	2301      	movs	r3, #1
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	e010      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b80      	cmp	r3, #128	@ 0x80
 80033ea:	d902      	bls.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033ec:	2303      	movs	r3, #3
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	e00a      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b80      	cmp	r3, #128	@ 0x80
 80033f6:	d102      	bne.n	80033fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033f8:	2302      	movs	r3, #2
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e004      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b70      	cmp	r3, #112	@ 0x70
 8003402:	d101      	bne.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003404:	2301      	movs	r3, #1
 8003406:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003408:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 0207 	bic.w	r2, r3, #7
 8003410:	4909      	ldr	r1, [pc, #36]	@ (8003438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003418:	4b07      	ldr	r3, [pc, #28]	@ (8003438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	429a      	cmp	r2, r3
 8003424:	d001      	beq.n	800342a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	40022000 	.word	0x40022000

0800343c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003444:	2300      	movs	r3, #0
 8003446:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003448:	2300      	movs	r3, #0
 800344a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003454:	2b00      	cmp	r3, #0
 8003456:	d041      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800345c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003460:	d02a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003462:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003466:	d824      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003468:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800346c:	d008      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800346e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003472:	d81e      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003478:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800347c:	d010      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800347e:	e018      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003480:	4b86      	ldr	r3, [pc, #536]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a85      	ldr	r2, [pc, #532]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800348c:	e015      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	2100      	movs	r1, #0
 8003494:	4618      	mov	r0, r3
 8003496:	f000 facb 	bl	8003a30 <RCCEx_PLLSAI1_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800349e:	e00c      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3320      	adds	r3, #32
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fbb6 	bl	8003c18 <RCCEx_PLLSAI2_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034b0:	e003      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	74fb      	strb	r3, [r7, #19]
      break;
 80034b6:	e000      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ba:	7cfb      	ldrb	r3, [r7, #19]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c0:	4b76      	ldr	r3, [pc, #472]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034ce:	4973      	ldr	r1, [pc, #460]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034d6:	e001      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
 80034da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d041      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034f0:	d02a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034f6:	d824      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034fc:	d008      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003502:	d81e      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003508:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800350c:	d010      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800350e:	e018      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003510:	4b62      	ldr	r3, [pc, #392]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4a61      	ldr	r2, [pc, #388]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800351a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800351c:	e015      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3304      	adds	r3, #4
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fa83 	bl	8003a30 <RCCEx_PLLSAI1_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800352e:	e00c      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3320      	adds	r3, #32
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fb6e 	bl	8003c18 <RCCEx_PLLSAI2_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003540:	e003      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	74fb      	strb	r3, [r7, #19]
      break;
 8003546:	e000      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003550:	4b52      	ldr	r3, [pc, #328]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003556:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800355e:	494f      	ldr	r1, [pc, #316]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003566:	e001      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80a0 	beq.w	80036ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357a:	2300      	movs	r3, #0
 800357c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800357e:	4b47      	ldr	r3, [pc, #284]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800358e:	2300      	movs	r3, #0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003594:	4b41      	ldr	r3, [pc, #260]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003598:	4a40      	ldr	r2, [pc, #256]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800359e:	6593      	str	r3, [r2, #88]	@ 0x58
 80035a0:	4b3e      	ldr	r3, [pc, #248]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ac:	2301      	movs	r3, #1
 80035ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b0:	4b3b      	ldr	r3, [pc, #236]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a3a      	ldr	r2, [pc, #232]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035bc:	f7fe f966 	bl	800188c <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035c2:	e009      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c4:	f7fe f962 	bl	800188c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d902      	bls.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	74fb      	strb	r3, [r7, #19]
        break;
 80035d6:	e005      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035d8:	4b31      	ldr	r3, [pc, #196]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ef      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d15c      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ea:	4b2c      	ldr	r3, [pc, #176]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01f      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	429a      	cmp	r2, r3
 8003606:	d019      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003608:	4b24      	ldr	r3, [pc, #144]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003612:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003614:	4b21      	ldr	r3, [pc, #132]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361a:	4a20      	ldr	r2, [pc, #128]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003624:	4b1d      	ldr	r3, [pc, #116]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	4a1c      	ldr	r2, [pc, #112]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003634:	4a19      	ldr	r2, [pc, #100]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7fe f921 	bl	800188c <HAL_GetTick>
 800364a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800364c:	e00b      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fe f91d 	bl	800188c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d902      	bls.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	74fb      	strb	r3, [r7, #19]
            break;
 8003664:	e006      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003666:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ec      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10c      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367a:	4b08      	ldr	r3, [pc, #32]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003680:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800368a:	4904      	ldr	r1, [pc, #16]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003692:	e009      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	74bb      	strb	r3, [r7, #18]
 8003698:	e006      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a8:	7c7b      	ldrb	r3, [r7, #17]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ae:	4b9e      	ldr	r3, [pc, #632]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b2:	4a9d      	ldr	r2, [pc, #628]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036c6:	4b98      	ldr	r3, [pc, #608]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036cc:	f023 0203 	bic.w	r2, r3, #3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d4:	4994      	ldr	r1, [pc, #592]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ee:	f023 020c 	bic.w	r2, r3, #12
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f6:	498c      	ldr	r1, [pc, #560]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800370a:	4b87      	ldr	r3, [pc, #540]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003710:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	4983      	ldr	r1, [pc, #524]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800372c:	4b7e      	ldr	r3, [pc, #504]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003732:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	497b      	ldr	r1, [pc, #492]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800374e:	4b76      	ldr	r3, [pc, #472]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003754:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800375c:	4972      	ldr	r1, [pc, #456]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003770:	4b6d      	ldr	r3, [pc, #436]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377e:	496a      	ldr	r1, [pc, #424]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003792:	4b65      	ldr	r3, [pc, #404]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003798:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a0:	4961      	ldr	r1, [pc, #388]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037b4:	4b5c      	ldr	r3, [pc, #368]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c2:	4959      	ldr	r1, [pc, #356]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037d6:	4b54      	ldr	r3, [pc, #336]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e4:	4950      	ldr	r1, [pc, #320]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003806:	4948      	ldr	r1, [pc, #288]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800381a:	4b43      	ldr	r3, [pc, #268]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003820:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003828:	493f      	ldr	r1, [pc, #252]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d028      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800383c:	4b3a      	ldr	r3, [pc, #232]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003842:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800384a:	4937      	ldr	r1, [pc, #220]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003856:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800385a:	d106      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800385c:	4b32      	ldr	r3, [pc, #200]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a31      	ldr	r2, [pc, #196]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003866:	60d3      	str	r3, [r2, #12]
 8003868:	e011      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800386e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003872:	d10c      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f8d8 	bl	8003a30 <RCCEx_PLLSAI1_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d028      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800389a:	4b23      	ldr	r3, [pc, #140]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a8:	491f      	ldr	r1, [pc, #124]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038b8:	d106      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	4a1a      	ldr	r2, [pc, #104]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038c4:	60d3      	str	r3, [r2, #12]
 80038c6:	e011      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	2101      	movs	r1, #1
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f8a9 	bl	8003a30 <RCCEx_PLLSAI1_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d02b      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003906:	4908      	ldr	r1, [pc, #32]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003912:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003916:	d109      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003918:	4b03      	ldr	r3, [pc, #12]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a02      	ldr	r2, [pc, #8]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003922:	60d3      	str	r3, [r2, #12]
 8003924:	e014      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003930:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003934:	d10c      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f877 	bl	8003a30 <RCCEx_PLLSAI1_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d02f      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800395c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003962:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800396a:	4928      	ldr	r1, [pc, #160]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800397a:	d10d      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	2102      	movs	r1, #2
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f854 	bl	8003a30 <RCCEx_PLLSAI1_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800398c:	7cfb      	ldrb	r3, [r7, #19]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d014      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003992:	7cfb      	ldrb	r3, [r7, #19]
 8003994:	74bb      	strb	r3, [r7, #18]
 8003996:	e011      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800399c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a0:	d10c      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3320      	adds	r3, #32
 80039a6:	2102      	movs	r1, #2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 f935 	bl	8003c18 <RCCEx_PLLSAI2_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039b8:	7cfb      	ldrb	r3, [r7, #19]
 80039ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039c8:	4b10      	ldr	r3, [pc, #64]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ce:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039d6:	490d      	ldr	r1, [pc, #52]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039ea:	4b08      	ldr	r3, [pc, #32]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039fa:	4904      	ldr	r1, [pc, #16]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a02:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000

08003a10 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a14:	4b05      	ldr	r3, [pc, #20]	@ (8003a2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a04      	ldr	r2, [pc, #16]	@ (8003a2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a1a:	f043 0304 	orr.w	r3, r3, #4
 8003a1e:	6013      	str	r3, [r2, #0]
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000

08003a30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a3e:	4b75      	ldr	r3, [pc, #468]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d018      	beq.n	8003a7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a4a:	4b72      	ldr	r3, [pc, #456]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0203 	and.w	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d10d      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a62:	4b6c      	ldr	r3, [pc, #432]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
       ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d047      	beq.n	8003b06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
 8003a7a:	e044      	b.n	8003b06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d018      	beq.n	8003ab6 <RCCEx_PLLSAI1_Config+0x86>
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d825      	bhi.n	8003ad4 <RCCEx_PLLSAI1_Config+0xa4>
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d002      	beq.n	8003a92 <RCCEx_PLLSAI1_Config+0x62>
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d009      	beq.n	8003aa4 <RCCEx_PLLSAI1_Config+0x74>
 8003a90:	e020      	b.n	8003ad4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a92:	4b60      	ldr	r3, [pc, #384]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d11d      	bne.n	8003ada <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa2:	e01a      	b.n	8003ada <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d116      	bne.n	8003ade <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab4:	e013      	b.n	8003ade <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ab6:	4b57      	ldr	r3, [pc, #348]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10f      	bne.n	8003ae2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ac2:	4b54      	ldr	r3, [pc, #336]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ad2:	e006      	b.n	8003ae2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad8:	e004      	b.n	8003ae4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ada:	bf00      	nop
 8003adc:	e002      	b.n	8003ae4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e000      	b.n	8003ae4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ae2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10d      	bne.n	8003b06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003aea:	4b4a      	ldr	r3, [pc, #296]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	430b      	orrs	r3, r1
 8003b00:	4944      	ldr	r1, [pc, #272]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d17d      	bne.n	8003c08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b0c:	4b41      	ldr	r3, [pc, #260]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a40      	ldr	r2, [pc, #256]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b18:	f7fd feb8 	bl	800188c <HAL_GetTick>
 8003b1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b1e:	e009      	b.n	8003b34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b20:	f7fd feb4 	bl	800188c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d902      	bls.n	8003b34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	73fb      	strb	r3, [r7, #15]
        break;
 8003b32:	e005      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b34:	4b37      	ldr	r3, [pc, #220]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1ef      	bne.n	8003b20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d160      	bne.n	8003c08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d111      	bne.n	8003b70 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b4c:	4b31      	ldr	r3, [pc, #196]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6892      	ldr	r2, [r2, #8]
 8003b5c:	0211      	lsls	r1, r2, #8
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68d2      	ldr	r2, [r2, #12]
 8003b62:	0912      	lsrs	r2, r2, #4
 8003b64:	0452      	lsls	r2, r2, #17
 8003b66:	430a      	orrs	r2, r1
 8003b68:	492a      	ldr	r1, [pc, #168]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	610b      	str	r3, [r1, #16]
 8003b6e:	e027      	b.n	8003bc0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d112      	bne.n	8003b9c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b76:	4b27      	ldr	r3, [pc, #156]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003b7e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6892      	ldr	r2, [r2, #8]
 8003b86:	0211      	lsls	r1, r2, #8
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6912      	ldr	r2, [r2, #16]
 8003b8c:	0852      	lsrs	r2, r2, #1
 8003b8e:	3a01      	subs	r2, #1
 8003b90:	0552      	lsls	r2, r2, #21
 8003b92:	430a      	orrs	r2, r1
 8003b94:	491f      	ldr	r1, [pc, #124]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	610b      	str	r3, [r1, #16]
 8003b9a:	e011      	b.n	8003bc0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ba4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6892      	ldr	r2, [r2, #8]
 8003bac:	0211      	lsls	r1, r2, #8
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6952      	ldr	r2, [r2, #20]
 8003bb2:	0852      	lsrs	r2, r2, #1
 8003bb4:	3a01      	subs	r2, #1
 8003bb6:	0652      	lsls	r2, r2, #25
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	4916      	ldr	r1, [pc, #88]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bc0:	4b14      	ldr	r3, [pc, #80]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a13      	ldr	r2, [pc, #76]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fd fe5e 	bl	800188c <HAL_GetTick>
 8003bd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bd2:	e009      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bd4:	f7fd fe5a 	bl	800188c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d902      	bls.n	8003be8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	73fb      	strb	r3, [r7, #15]
          break;
 8003be6:	e005      	b.n	8003bf4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003be8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ef      	beq.n	8003bd4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bfa:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	4904      	ldr	r1, [pc, #16]	@ (8003c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000

08003c18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c26:	4b6a      	ldr	r3, [pc, #424]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d018      	beq.n	8003c64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c32:	4b67      	ldr	r3, [pc, #412]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 0203 	and.w	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d10d      	bne.n	8003c5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
       ||
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d009      	beq.n	8003c5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c4a:	4b61      	ldr	r3, [pc, #388]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
       ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d047      	beq.n	8003cee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	73fb      	strb	r3, [r7, #15]
 8003c62:	e044      	b.n	8003cee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d018      	beq.n	8003c9e <RCCEx_PLLSAI2_Config+0x86>
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d825      	bhi.n	8003cbc <RCCEx_PLLSAI2_Config+0xa4>
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d002      	beq.n	8003c7a <RCCEx_PLLSAI2_Config+0x62>
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d009      	beq.n	8003c8c <RCCEx_PLLSAI2_Config+0x74>
 8003c78:	e020      	b.n	8003cbc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c7a:	4b55      	ldr	r3, [pc, #340]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d11d      	bne.n	8003cc2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c8a:	e01a      	b.n	8003cc2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c8c:	4b50      	ldr	r3, [pc, #320]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d116      	bne.n	8003cc6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c9c:	e013      	b.n	8003cc6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10f      	bne.n	8003cca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003caa:	4b49      	ldr	r3, [pc, #292]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cba:	e006      	b.n	8003cca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc0:	e004      	b.n	8003ccc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e002      	b.n	8003ccc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e000      	b.n	8003ccc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10d      	bne.n	8003cee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6819      	ldr	r1, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	430b      	orrs	r3, r1
 8003ce8:	4939      	ldr	r1, [pc, #228]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d167      	bne.n	8003dc4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003cf4:	4b36      	ldr	r3, [pc, #216]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a35      	ldr	r2, [pc, #212]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d00:	f7fd fdc4 	bl	800188c <HAL_GetTick>
 8003d04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d06:	e009      	b.n	8003d1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d08:	f7fd fdc0 	bl	800188c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d902      	bls.n	8003d1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	73fb      	strb	r3, [r7, #15]
        break;
 8003d1a:	e005      	b.n	8003d28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ef      	bne.n	8003d08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d14a      	bne.n	8003dc4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d111      	bne.n	8003d58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d34:	4b26      	ldr	r3, [pc, #152]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6892      	ldr	r2, [r2, #8]
 8003d44:	0211      	lsls	r1, r2, #8
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68d2      	ldr	r2, [r2, #12]
 8003d4a:	0912      	lsrs	r2, r2, #4
 8003d4c:	0452      	lsls	r2, r2, #17
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	491f      	ldr	r1, [pc, #124]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	614b      	str	r3, [r1, #20]
 8003d56:	e011      	b.n	8003d7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d58:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6892      	ldr	r2, [r2, #8]
 8003d68:	0211      	lsls	r1, r2, #8
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6912      	ldr	r2, [r2, #16]
 8003d6e:	0852      	lsrs	r2, r2, #1
 8003d70:	3a01      	subs	r2, #1
 8003d72:	0652      	lsls	r2, r2, #25
 8003d74:	430a      	orrs	r2, r1
 8003d76:	4916      	ldr	r1, [pc, #88]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d7c:	4b14      	ldr	r3, [pc, #80]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a13      	ldr	r2, [pc, #76]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fd fd80 	bl	800188c <HAL_GetTick>
 8003d8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d8e:	e009      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d90:	f7fd fd7c 	bl	800188c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d902      	bls.n	8003da4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	73fb      	strb	r3, [r7, #15]
          break;
 8003da2:	e005      	b.n	8003db0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003da4:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0ef      	beq.n	8003d90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003db6:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	4904      	ldr	r1, [pc, #16]	@ (8003dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000

08003dd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e095      	b.n	8003f12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d108      	bne.n	8003e00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003df6:	d009      	beq.n	8003e0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	61da      	str	r2, [r3, #28]
 8003dfe:	e005      	b.n	8003e0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fd f990 	bl	800114c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e4c:	d902      	bls.n	8003e54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	e002      	b.n	8003e5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003e62:	d007      	beq.n	8003e74 <HAL_SPI_Init+0xa0>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e6c:	d002      	beq.n	8003e74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb6:	ea42 0103 	orr.w	r1, r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	0c1b      	lsrs	r3, r3, #16
 8003ed0:	f003 0204 	and.w	r2, r3, #4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ef0:	ea42 0103 	orr.w	r1, r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e049      	b.n	8003fc0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d106      	bne.n	8003f46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7fd f947 	bl	80011d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f000 ff3f 	bl	8004ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e049      	b.n	800406e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f841 	bl	8004076 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f000 fee8 	bl	8004ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_TIM_PWM_Start+0x24>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e03c      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d109      	bne.n	80040ca <HAL_TIM_PWM_Start+0x3e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	bf14      	ite	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	2300      	moveq	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e02f      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d109      	bne.n	80040e4 <HAL_TIM_PWM_Start+0x58>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e022      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d109      	bne.n	80040fe <HAL_TIM_PWM_Start+0x72>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	e015      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b10      	cmp	r3, #16
 8004102:	d109      	bne.n	8004118 <HAL_TIM_PWM_Start+0x8c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	bf14      	ite	ne
 8004110:	2301      	movne	r3, #1
 8004112:	2300      	moveq	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e008      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e09c      	b.n	800426c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <HAL_TIM_PWM_Start+0xb6>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004140:	e023      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b04      	cmp	r3, #4
 8004146:	d104      	bne.n	8004152 <HAL_TIM_PWM_Start+0xc6>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004150:	e01b      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Start+0xd6>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004160:	e013      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	d104      	bne.n	8004172 <HAL_TIM_PWM_Start+0xe6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004170:	e00b      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b10      	cmp	r3, #16
 8004176:	d104      	bne.n	8004182 <HAL_TIM_PWM_Start+0xf6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004180:	e003      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2201      	movs	r2, #1
 8004190:	6839      	ldr	r1, [r7, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f001 fb5c 	bl	8005850 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a35      	ldr	r2, [pc, #212]	@ (8004274 <HAL_TIM_PWM_Start+0x1e8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_TIM_PWM_Start+0x13e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a34      	ldr	r2, [pc, #208]	@ (8004278 <HAL_TIM_PWM_Start+0x1ec>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00e      	beq.n	80041ca <HAL_TIM_PWM_Start+0x13e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a32      	ldr	r2, [pc, #200]	@ (800427c <HAL_TIM_PWM_Start+0x1f0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d009      	beq.n	80041ca <HAL_TIM_PWM_Start+0x13e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a31      	ldr	r2, [pc, #196]	@ (8004280 <HAL_TIM_PWM_Start+0x1f4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d004      	beq.n	80041ca <HAL_TIM_PWM_Start+0x13e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a2f      	ldr	r2, [pc, #188]	@ (8004284 <HAL_TIM_PWM_Start+0x1f8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <HAL_TIM_PWM_Start+0x142>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <HAL_TIM_PWM_Start+0x144>
 80041ce:	2300      	movs	r3, #0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a22      	ldr	r2, [pc, #136]	@ (8004274 <HAL_TIM_PWM_Start+0x1e8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01d      	beq.n	800422a <HAL_TIM_PWM_Start+0x19e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f6:	d018      	beq.n	800422a <HAL_TIM_PWM_Start+0x19e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a22      	ldr	r2, [pc, #136]	@ (8004288 <HAL_TIM_PWM_Start+0x1fc>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d013      	beq.n	800422a <HAL_TIM_PWM_Start+0x19e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a21      	ldr	r2, [pc, #132]	@ (800428c <HAL_TIM_PWM_Start+0x200>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00e      	beq.n	800422a <HAL_TIM_PWM_Start+0x19e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1f      	ldr	r2, [pc, #124]	@ (8004290 <HAL_TIM_PWM_Start+0x204>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d009      	beq.n	800422a <HAL_TIM_PWM_Start+0x19e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a17      	ldr	r2, [pc, #92]	@ (8004278 <HAL_TIM_PWM_Start+0x1ec>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d004      	beq.n	800422a <HAL_TIM_PWM_Start+0x19e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a15      	ldr	r2, [pc, #84]	@ (800427c <HAL_TIM_PWM_Start+0x1f0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d115      	bne.n	8004256 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4b18      	ldr	r3, [pc, #96]	@ (8004294 <HAL_TIM_PWM_Start+0x208>)
 8004232:	4013      	ands	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b06      	cmp	r3, #6
 800423a:	d015      	beq.n	8004268 <HAL_TIM_PWM_Start+0x1dc>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004242:	d011      	beq.n	8004268 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004254:	e008      	b.n	8004268 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e000      	b.n	800426a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004268:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40013400 	.word	0x40013400
 800427c:	40014000 	.word	0x40014000
 8004280:	40014400 	.word	0x40014400
 8004284:	40014800 	.word	0x40014800
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40000c00 	.word	0x40000c00
 8004294:	00010007 	.word	0x00010007

08004298 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <HAL_TIM_PWM_Start_IT+0x28>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	bf14      	ite	ne
 80042b8:	2301      	movne	r3, #1
 80042ba:	2300      	moveq	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	e03c      	b.n	800433a <HAL_TIM_PWM_Start_IT+0xa2>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d109      	bne.n	80042da <HAL_TIM_PWM_Start_IT+0x42>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	bf14      	ite	ne
 80042d2:	2301      	movne	r3, #1
 80042d4:	2300      	moveq	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	e02f      	b.n	800433a <HAL_TIM_PWM_Start_IT+0xa2>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d109      	bne.n	80042f4 <HAL_TIM_PWM_Start_IT+0x5c>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	bf14      	ite	ne
 80042ec:	2301      	movne	r3, #1
 80042ee:	2300      	moveq	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e022      	b.n	800433a <HAL_TIM_PWM_Start_IT+0xa2>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	d109      	bne.n	800430e <HAL_TIM_PWM_Start_IT+0x76>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	bf14      	ite	ne
 8004306:	2301      	movne	r3, #1
 8004308:	2300      	moveq	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	e015      	b.n	800433a <HAL_TIM_PWM_Start_IT+0xa2>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b10      	cmp	r3, #16
 8004312:	d109      	bne.n	8004328 <HAL_TIM_PWM_Start_IT+0x90>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	bf14      	ite	ne
 8004320:	2301      	movne	r3, #1
 8004322:	2300      	moveq	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e008      	b.n	800433a <HAL_TIM_PWM_Start_IT+0xa2>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e0e7      	b.n	8004512 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d104      	bne.n	8004352 <HAL_TIM_PWM_Start_IT+0xba>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004350:	e023      	b.n	800439a <HAL_TIM_PWM_Start_IT+0x102>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b04      	cmp	r3, #4
 8004356:	d104      	bne.n	8004362 <HAL_TIM_PWM_Start_IT+0xca>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004360:	e01b      	b.n	800439a <HAL_TIM_PWM_Start_IT+0x102>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d104      	bne.n	8004372 <HAL_TIM_PWM_Start_IT+0xda>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004370:	e013      	b.n	800439a <HAL_TIM_PWM_Start_IT+0x102>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b0c      	cmp	r3, #12
 8004376:	d104      	bne.n	8004382 <HAL_TIM_PWM_Start_IT+0xea>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004380:	e00b      	b.n	800439a <HAL_TIM_PWM_Start_IT+0x102>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b10      	cmp	r3, #16
 8004386:	d104      	bne.n	8004392 <HAL_TIM_PWM_Start_IT+0xfa>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004390:	e003      	b.n	800439a <HAL_TIM_PWM_Start_IT+0x102>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b0c      	cmp	r3, #12
 800439e:	d841      	bhi.n	8004424 <HAL_TIM_PWM_Start_IT+0x18c>
 80043a0:	a201      	add	r2, pc, #4	@ (adr r2, 80043a8 <HAL_TIM_PWM_Start_IT+0x110>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	080043dd 	.word	0x080043dd
 80043ac:	08004425 	.word	0x08004425
 80043b0:	08004425 	.word	0x08004425
 80043b4:	08004425 	.word	0x08004425
 80043b8:	080043ef 	.word	0x080043ef
 80043bc:	08004425 	.word	0x08004425
 80043c0:	08004425 	.word	0x08004425
 80043c4:	08004425 	.word	0x08004425
 80043c8:	08004401 	.word	0x08004401
 80043cc:	08004425 	.word	0x08004425
 80043d0:	08004425 	.word	0x08004425
 80043d4:	08004425 	.word	0x08004425
 80043d8:	08004413 	.word	0x08004413
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0202 	orr.w	r2, r2, #2
 80043ea:	60da      	str	r2, [r3, #12]
      break;
 80043ec:	e01d      	b.n	800442a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0204 	orr.w	r2, r2, #4
 80043fc:	60da      	str	r2, [r3, #12]
      break;
 80043fe:	e014      	b.n	800442a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0208 	orr.w	r2, r2, #8
 800440e:	60da      	str	r2, [r3, #12]
      break;
 8004410:	e00b      	b.n	800442a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0210 	orr.w	r2, r2, #16
 8004420:	60da      	str	r2, [r3, #12]
      break;
 8004422:	e002      	b.n	800442a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
      break;
 8004428:	bf00      	nop
  }

  if (status == HAL_OK)
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d16f      	bne.n	8004510 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2201      	movs	r2, #1
 8004436:	6839      	ldr	r1, [r7, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f001 fa09 	bl	8005850 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a36      	ldr	r2, [pc, #216]	@ (800451c <HAL_TIM_PWM_Start_IT+0x284>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d013      	beq.n	8004470 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a34      	ldr	r2, [pc, #208]	@ (8004520 <HAL_TIM_PWM_Start_IT+0x288>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00e      	beq.n	8004470 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a33      	ldr	r2, [pc, #204]	@ (8004524 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_TIM_PWM_Start_IT+0x1d8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a31      	ldr	r2, [pc, #196]	@ (8004528 <HAL_TIM_PWM_Start_IT+0x290>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a30      	ldr	r2, [pc, #192]	@ (800452c <HAL_TIM_PWM_Start_IT+0x294>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d101      	bne.n	8004474 <HAL_TIM_PWM_Start_IT+0x1dc>
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <HAL_TIM_PWM_Start_IT+0x1de>
 8004474:	2300      	movs	r3, #0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004488:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a23      	ldr	r2, [pc, #140]	@ (800451c <HAL_TIM_PWM_Start_IT+0x284>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d01d      	beq.n	80044d0 <HAL_TIM_PWM_Start_IT+0x238>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449c:	d018      	beq.n	80044d0 <HAL_TIM_PWM_Start_IT+0x238>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a23      	ldr	r2, [pc, #140]	@ (8004530 <HAL_TIM_PWM_Start_IT+0x298>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_TIM_PWM_Start_IT+0x238>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a21      	ldr	r2, [pc, #132]	@ (8004534 <HAL_TIM_PWM_Start_IT+0x29c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_TIM_PWM_Start_IT+0x238>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a20      	ldr	r2, [pc, #128]	@ (8004538 <HAL_TIM_PWM_Start_IT+0x2a0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_TIM_PWM_Start_IT+0x238>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a17      	ldr	r2, [pc, #92]	@ (8004520 <HAL_TIM_PWM_Start_IT+0x288>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_TIM_PWM_Start_IT+0x238>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a16      	ldr	r2, [pc, #88]	@ (8004524 <HAL_TIM_PWM_Start_IT+0x28c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d115      	bne.n	80044fc <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	4b19      	ldr	r3, [pc, #100]	@ (800453c <HAL_TIM_PWM_Start_IT+0x2a4>)
 80044d8:	4013      	ands	r3, r2
 80044da:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d015      	beq.n	800450e <HAL_TIM_PWM_Start_IT+0x276>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e8:	d011      	beq.n	800450e <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fa:	e008      	b.n	800450e <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e000      	b.n	8004510 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40012c00 	.word	0x40012c00
 8004520:	40013400 	.word	0x40013400
 8004524:	40014000 	.word	0x40014000
 8004528:	40014400 	.word	0x40014400
 800452c:	40014800 	.word	0x40014800
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	40000c00 	.word	0x40000c00
 800453c:	00010007 	.word	0x00010007

08004540 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e049      	b.n	80045e6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f841 	bl	80045ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f000 fc2c 	bl	8004ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d020      	beq.n	8004666 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01b      	beq.n	8004666 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f06f 0202 	mvn.w	r2, #2
 8004636:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7fc fbff 	bl	8000e50 <HAL_TIM_IC_CaptureCallback>
 8004652:	e005      	b.n	8004660 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fba3 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fbaa 	bl	8004db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d020      	beq.n	80046b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d01b      	beq.n	80046b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f06f 0204 	mvn.w	r2, #4
 8004682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7fc fbd9 	bl	8000e50 <HAL_TIM_IC_CaptureCallback>
 800469e:	e005      	b.n	80046ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fb7d 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fb84 	bl	8004db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d020      	beq.n	80046fe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d01b      	beq.n	80046fe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f06f 0208 	mvn.w	r2, #8
 80046ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2204      	movs	r2, #4
 80046d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7fc fbb3 	bl	8000e50 <HAL_TIM_IC_CaptureCallback>
 80046ea:	e005      	b.n	80046f8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fb57 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fb5e 	bl	8004db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b00      	cmp	r3, #0
 8004706:	d020      	beq.n	800474a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01b      	beq.n	800474a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f06f 0210 	mvn.w	r2, #16
 800471a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2208      	movs	r2, #8
 8004720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7fc fb8d 	bl	8000e50 <HAL_TIM_IC_CaptureCallback>
 8004736:	e005      	b.n	8004744 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fb31 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fb38 	bl	8004db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00c      	beq.n	800476e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f06f 0201 	mvn.w	r2, #1
 8004766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fb0f 	bl	8004d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00c      	beq.n	800479c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f001 f912 	bl	80059c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00c      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80047b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f001 f90a 	bl	80059d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00c      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 faf2 	bl	8004dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00c      	beq.n	8004808 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0220 	mvn.w	r2, #32
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f001 f8d2 	bl	80059ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_TIM_IC_ConfigChannel+0x1e>
 800482a:	2302      	movs	r3, #2
 800482c:	e088      	b.n	8004940 <HAL_TIM_IC_ConfigChannel+0x130>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d11b      	bne.n	8004874 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800484c:	f000 fe42 	bl	80054d4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 020c 	bic.w	r2, r2, #12
 800485e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6999      	ldr	r1, [r3, #24]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	619a      	str	r2, [r3, #24]
 8004872:	e060      	b.n	8004936 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b04      	cmp	r3, #4
 8004878:	d11c      	bne.n	80048b4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800488a:	f000 fec0 	bl	800560e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699a      	ldr	r2, [r3, #24]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800489c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6999      	ldr	r1, [r3, #24]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	021a      	lsls	r2, r3, #8
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	619a      	str	r2, [r3, #24]
 80048b2:	e040      	b.n	8004936 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d11b      	bne.n	80048f2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80048ca:	f000 ff0d 	bl	80056e8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 020c 	bic.w	r2, r2, #12
 80048dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69d9      	ldr	r1, [r3, #28]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	61da      	str	r2, [r3, #28]
 80048f0:	e021      	b.n	8004936 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b0c      	cmp	r3, #12
 80048f6:	d11c      	bne.n	8004932 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004908:	f000 ff2a 	bl	8005760 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800491a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69d9      	ldr	r1, [r3, #28]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	021a      	lsls	r2, r3, #8
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	61da      	str	r2, [r3, #28]
 8004930:	e001      	b.n	8004936 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800493e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004962:	2302      	movs	r3, #2
 8004964:	e0ff      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b14      	cmp	r3, #20
 8004972:	f200 80f0 	bhi.w	8004b56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049d1 	.word	0x080049d1
 8004980:	08004b57 	.word	0x08004b57
 8004984:	08004b57 	.word	0x08004b57
 8004988:	08004b57 	.word	0x08004b57
 800498c:	08004a11 	.word	0x08004a11
 8004990:	08004b57 	.word	0x08004b57
 8004994:	08004b57 	.word	0x08004b57
 8004998:	08004b57 	.word	0x08004b57
 800499c:	08004a53 	.word	0x08004a53
 80049a0:	08004b57 	.word	0x08004b57
 80049a4:	08004b57 	.word	0x08004b57
 80049a8:	08004b57 	.word	0x08004b57
 80049ac:	08004a93 	.word	0x08004a93
 80049b0:	08004b57 	.word	0x08004b57
 80049b4:	08004b57 	.word	0x08004b57
 80049b8:	08004b57 	.word	0x08004b57
 80049bc:	08004ad5 	.word	0x08004ad5
 80049c0:	08004b57 	.word	0x08004b57
 80049c4:	08004b57 	.word	0x08004b57
 80049c8:	08004b57 	.word	0x08004b57
 80049cc:	08004b15 	.word	0x08004b15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 faa6 	bl	8004f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0208 	orr.w	r2, r2, #8
 80049ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0204 	bic.w	r2, r2, #4
 80049fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6999      	ldr	r1, [r3, #24]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	619a      	str	r2, [r3, #24]
      break;
 8004a0e:	e0a5      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fb16 	bl	8005048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6999      	ldr	r1, [r3, #24]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	021a      	lsls	r2, r3, #8
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	619a      	str	r2, [r3, #24]
      break;
 8004a50:	e084      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fb7f 	bl	800515c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0208 	orr.w	r2, r2, #8
 8004a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0204 	bic.w	r2, r2, #4
 8004a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69d9      	ldr	r1, [r3, #28]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	61da      	str	r2, [r3, #28]
      break;
 8004a90:	e064      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fbe7 	bl	800526c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69d9      	ldr	r1, [r3, #28]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	021a      	lsls	r2, r3, #8
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	61da      	str	r2, [r3, #28]
      break;
 8004ad2:	e043      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fc30 	bl	8005340 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0208 	orr.w	r2, r2, #8
 8004aee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0204 	bic.w	r2, r2, #4
 8004afe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b12:	e023      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fc74 	bl	8005408 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	021a      	lsls	r2, r3, #8
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b54:	e002      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	75fb      	strb	r3, [r7, #23]
      break;
 8004b5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop

08004b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_TIM_ConfigClockSource+0x1c>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e0b6      	b.n	8004cfa <HAL_TIM_ConfigClockSource+0x18a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004baa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc8:	d03e      	beq.n	8004c48 <HAL_TIM_ConfigClockSource+0xd8>
 8004bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bce:	f200 8087 	bhi.w	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd6:	f000 8086 	beq.w	8004ce6 <HAL_TIM_ConfigClockSource+0x176>
 8004bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bde:	d87f      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004be0:	2b70      	cmp	r3, #112	@ 0x70
 8004be2:	d01a      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0xaa>
 8004be4:	2b70      	cmp	r3, #112	@ 0x70
 8004be6:	d87b      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004be8:	2b60      	cmp	r3, #96	@ 0x60
 8004bea:	d050      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0x11e>
 8004bec:	2b60      	cmp	r3, #96	@ 0x60
 8004bee:	d877      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004bf0:	2b50      	cmp	r3, #80	@ 0x50
 8004bf2:	d03c      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0xfe>
 8004bf4:	2b50      	cmp	r3, #80	@ 0x50
 8004bf6:	d873      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004bf8:	2b40      	cmp	r3, #64	@ 0x40
 8004bfa:	d058      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x13e>
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	d86f      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004c00:	2b30      	cmp	r3, #48	@ 0x30
 8004c02:	d064      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15e>
 8004c04:	2b30      	cmp	r3, #48	@ 0x30
 8004c06:	d86b      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d060      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15e>
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d867      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d05c      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15e>
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d05a      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15e>
 8004c18:	e062      	b.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c2a:	f000 fdf1 	bl	8005810 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	609a      	str	r2, [r3, #8]
      break;
 8004c46:	e04f      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c58:	f000 fdda 	bl	8005810 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c6a:	609a      	str	r2, [r3, #8]
      break;
 8004c6c:	e03c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f000 fc98 	bl	80055b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2150      	movs	r1, #80	@ 0x50
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fda7 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 8004c8c:	e02c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f000 fcf4 	bl	8005688 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2160      	movs	r1, #96	@ 0x60
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fd97 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 8004cac:	e01c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f000 fc78 	bl	80055b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2140      	movs	r1, #64	@ 0x40
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fd87 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 8004ccc:	e00c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f000 fd7e 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 8004cde:	e003      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce4:	e000      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b0c      	cmp	r3, #12
 8004d16:	d831      	bhi.n	8004d7c <HAL_TIM_ReadCapturedValue+0x78>
 8004d18:	a201      	add	r2, pc, #4	@ (adr r2, 8004d20 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d55 	.word	0x08004d55
 8004d24:	08004d7d 	.word	0x08004d7d
 8004d28:	08004d7d 	.word	0x08004d7d
 8004d2c:	08004d7d 	.word	0x08004d7d
 8004d30:	08004d5f 	.word	0x08004d5f
 8004d34:	08004d7d 	.word	0x08004d7d
 8004d38:	08004d7d 	.word	0x08004d7d
 8004d3c:	08004d7d 	.word	0x08004d7d
 8004d40:	08004d69 	.word	0x08004d69
 8004d44:	08004d7d 	.word	0x08004d7d
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004d7d 	.word	0x08004d7d
 8004d50:	08004d73 	.word	0x08004d73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d5a:	60fb      	str	r3, [r7, #12]

      break;
 8004d5c:	e00f      	b.n	8004d7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d64:	60fb      	str	r3, [r7, #12]

      break;
 8004d66:	e00a      	b.n	8004d7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6e:	60fb      	str	r3, [r7, #12]

      break;
 8004d70:	e005      	b.n	8004d7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	60fb      	str	r3, [r7, #12]

      break;
 8004d7a:	e000      	b.n	8004d7e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004d7c:	bf00      	nop
  }

  return tmpreg;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a46      	ldr	r2, [pc, #280]	@ (8004f08 <TIM_Base_SetConfig+0x12c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d013      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dfa:	d00f      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a43      	ldr	r2, [pc, #268]	@ (8004f0c <TIM_Base_SetConfig+0x130>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00b      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a42      	ldr	r2, [pc, #264]	@ (8004f10 <TIM_Base_SetConfig+0x134>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a41      	ldr	r2, [pc, #260]	@ (8004f14 <TIM_Base_SetConfig+0x138>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a40      	ldr	r2, [pc, #256]	@ (8004f18 <TIM_Base_SetConfig+0x13c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d108      	bne.n	8004e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a35      	ldr	r2, [pc, #212]	@ (8004f08 <TIM_Base_SetConfig+0x12c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01f      	beq.n	8004e76 <TIM_Base_SetConfig+0x9a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3c:	d01b      	beq.n	8004e76 <TIM_Base_SetConfig+0x9a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a32      	ldr	r2, [pc, #200]	@ (8004f0c <TIM_Base_SetConfig+0x130>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d017      	beq.n	8004e76 <TIM_Base_SetConfig+0x9a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a31      	ldr	r2, [pc, #196]	@ (8004f10 <TIM_Base_SetConfig+0x134>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d013      	beq.n	8004e76 <TIM_Base_SetConfig+0x9a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a30      	ldr	r2, [pc, #192]	@ (8004f14 <TIM_Base_SetConfig+0x138>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00f      	beq.n	8004e76 <TIM_Base_SetConfig+0x9a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2f      	ldr	r2, [pc, #188]	@ (8004f18 <TIM_Base_SetConfig+0x13c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <TIM_Base_SetConfig+0x9a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2e      	ldr	r2, [pc, #184]	@ (8004f1c <TIM_Base_SetConfig+0x140>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d007      	beq.n	8004e76 <TIM_Base_SetConfig+0x9a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2d      	ldr	r2, [pc, #180]	@ (8004f20 <TIM_Base_SetConfig+0x144>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_Base_SetConfig+0x9a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2c      	ldr	r2, [pc, #176]	@ (8004f24 <TIM_Base_SetConfig+0x148>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d108      	bne.n	8004e88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a16      	ldr	r2, [pc, #88]	@ (8004f08 <TIM_Base_SetConfig+0x12c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00f      	beq.n	8004ed4 <TIM_Base_SetConfig+0xf8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a18      	ldr	r2, [pc, #96]	@ (8004f18 <TIM_Base_SetConfig+0x13c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <TIM_Base_SetConfig+0xf8>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a17      	ldr	r2, [pc, #92]	@ (8004f1c <TIM_Base_SetConfig+0x140>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_Base_SetConfig+0xf8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a16      	ldr	r2, [pc, #88]	@ (8004f20 <TIM_Base_SetConfig+0x144>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_Base_SetConfig+0xf8>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a15      	ldr	r2, [pc, #84]	@ (8004f24 <TIM_Base_SetConfig+0x148>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d103      	bne.n	8004edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d105      	bne.n	8004efa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	611a      	str	r2, [r3, #16]
  }
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800
 8004f14:	40000c00 	.word	0x40000c00
 8004f18:	40013400 	.word	0x40013400
 8004f1c:	40014000 	.word	0x40014000
 8004f20:	40014400 	.word	0x40014400
 8004f24:	40014800 	.word	0x40014800

08004f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f023 0201 	bic.w	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 0302 	bic.w	r3, r3, #2
 8004f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a2c      	ldr	r2, [pc, #176]	@ (8005034 <TIM_OC1_SetConfig+0x10c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00f      	beq.n	8004fa8 <TIM_OC1_SetConfig+0x80>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8005038 <TIM_OC1_SetConfig+0x110>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <TIM_OC1_SetConfig+0x80>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a2a      	ldr	r2, [pc, #168]	@ (800503c <TIM_OC1_SetConfig+0x114>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <TIM_OC1_SetConfig+0x80>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a29      	ldr	r2, [pc, #164]	@ (8005040 <TIM_OC1_SetConfig+0x118>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_OC1_SetConfig+0x80>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a28      	ldr	r2, [pc, #160]	@ (8005044 <TIM_OC1_SetConfig+0x11c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d10c      	bne.n	8004fc2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f023 0308 	bic.w	r3, r3, #8
 8004fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f023 0304 	bic.w	r3, r3, #4
 8004fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005034 <TIM_OC1_SetConfig+0x10c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00f      	beq.n	8004fea <TIM_OC1_SetConfig+0xc2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8005038 <TIM_OC1_SetConfig+0x110>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00b      	beq.n	8004fea <TIM_OC1_SetConfig+0xc2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a19      	ldr	r2, [pc, #100]	@ (800503c <TIM_OC1_SetConfig+0x114>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <TIM_OC1_SetConfig+0xc2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a18      	ldr	r2, [pc, #96]	@ (8005040 <TIM_OC1_SetConfig+0x118>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_OC1_SetConfig+0xc2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a17      	ldr	r2, [pc, #92]	@ (8005044 <TIM_OC1_SetConfig+0x11c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d111      	bne.n	800500e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	621a      	str	r2, [r3, #32]
}
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40012c00 	.word	0x40012c00
 8005038:	40013400 	.word	0x40013400
 800503c:	40014000 	.word	0x40014000
 8005040:	40014400 	.word	0x40014400
 8005044:	40014800 	.word	0x40014800

08005048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f023 0210 	bic.w	r2, r3, #16
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005076:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800507a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f023 0320 	bic.w	r3, r3, #32
 8005096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a28      	ldr	r2, [pc, #160]	@ (8005148 <TIM_OC2_SetConfig+0x100>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d003      	beq.n	80050b4 <TIM_OC2_SetConfig+0x6c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a27      	ldr	r2, [pc, #156]	@ (800514c <TIM_OC2_SetConfig+0x104>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d10d      	bne.n	80050d0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005148 <TIM_OC2_SetConfig+0x100>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00f      	beq.n	80050f8 <TIM_OC2_SetConfig+0xb0>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a1c      	ldr	r2, [pc, #112]	@ (800514c <TIM_OC2_SetConfig+0x104>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00b      	beq.n	80050f8 <TIM_OC2_SetConfig+0xb0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005150 <TIM_OC2_SetConfig+0x108>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d007      	beq.n	80050f8 <TIM_OC2_SetConfig+0xb0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005154 <TIM_OC2_SetConfig+0x10c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_OC2_SetConfig+0xb0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a19      	ldr	r2, [pc, #100]	@ (8005158 <TIM_OC2_SetConfig+0x110>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d113      	bne.n	8005120 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40013400 	.word	0x40013400
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800

0800515c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800518a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0303 	bic.w	r3, r3, #3
 8005196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a27      	ldr	r2, [pc, #156]	@ (8005258 <TIM_OC3_SetConfig+0xfc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d003      	beq.n	80051c6 <TIM_OC3_SetConfig+0x6a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a26      	ldr	r2, [pc, #152]	@ (800525c <TIM_OC3_SetConfig+0x100>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d10d      	bne.n	80051e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005258 <TIM_OC3_SetConfig+0xfc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00f      	beq.n	800520a <TIM_OC3_SetConfig+0xae>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1b      	ldr	r2, [pc, #108]	@ (800525c <TIM_OC3_SetConfig+0x100>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00b      	beq.n	800520a <TIM_OC3_SetConfig+0xae>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005260 <TIM_OC3_SetConfig+0x104>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d007      	beq.n	800520a <TIM_OC3_SetConfig+0xae>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a19      	ldr	r2, [pc, #100]	@ (8005264 <TIM_OC3_SetConfig+0x108>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d003      	beq.n	800520a <TIM_OC3_SetConfig+0xae>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a18      	ldr	r2, [pc, #96]	@ (8005268 <TIM_OC3_SetConfig+0x10c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d113      	bne.n	8005232 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	621a      	str	r2, [r3, #32]
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	40012c00 	.word	0x40012c00
 800525c:	40013400 	.word	0x40013400
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800

0800526c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800529a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800529e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	031b      	lsls	r3, r3, #12
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a18      	ldr	r2, [pc, #96]	@ (800532c <TIM_OC4_SetConfig+0xc0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00f      	beq.n	80052f0 <TIM_OC4_SetConfig+0x84>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a17      	ldr	r2, [pc, #92]	@ (8005330 <TIM_OC4_SetConfig+0xc4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00b      	beq.n	80052f0 <TIM_OC4_SetConfig+0x84>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a16      	ldr	r2, [pc, #88]	@ (8005334 <TIM_OC4_SetConfig+0xc8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d007      	beq.n	80052f0 <TIM_OC4_SetConfig+0x84>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a15      	ldr	r2, [pc, #84]	@ (8005338 <TIM_OC4_SetConfig+0xcc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d003      	beq.n	80052f0 <TIM_OC4_SetConfig+0x84>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a14      	ldr	r2, [pc, #80]	@ (800533c <TIM_OC4_SetConfig+0xd0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d109      	bne.n	8005304 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	019b      	lsls	r3, r3, #6
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	621a      	str	r2, [r3, #32]
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40013400 	.word	0x40013400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800

08005340 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005384:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a17      	ldr	r2, [pc, #92]	@ (80053f4 <TIM_OC5_SetConfig+0xb4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00f      	beq.n	80053ba <TIM_OC5_SetConfig+0x7a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a16      	ldr	r2, [pc, #88]	@ (80053f8 <TIM_OC5_SetConfig+0xb8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_OC5_SetConfig+0x7a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a15      	ldr	r2, [pc, #84]	@ (80053fc <TIM_OC5_SetConfig+0xbc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_OC5_SetConfig+0x7a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a14      	ldr	r2, [pc, #80]	@ (8005400 <TIM_OC5_SetConfig+0xc0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_OC5_SetConfig+0x7a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a13      	ldr	r2, [pc, #76]	@ (8005404 <TIM_OC5_SetConfig+0xc4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d109      	bne.n	80053ce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	621a      	str	r2, [r3, #32]
}
 80053e8:	bf00      	nop
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40013400 	.word	0x40013400
 80053fc:	40014000 	.word	0x40014000
 8005400:	40014400 	.word	0x40014400
 8005404:	40014800 	.word	0x40014800

08005408 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800543a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800544e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	051b      	lsls	r3, r3, #20
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a18      	ldr	r2, [pc, #96]	@ (80054c0 <TIM_OC6_SetConfig+0xb8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00f      	beq.n	8005484 <TIM_OC6_SetConfig+0x7c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a17      	ldr	r2, [pc, #92]	@ (80054c4 <TIM_OC6_SetConfig+0xbc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <TIM_OC6_SetConfig+0x7c>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a16      	ldr	r2, [pc, #88]	@ (80054c8 <TIM_OC6_SetConfig+0xc0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d007      	beq.n	8005484 <TIM_OC6_SetConfig+0x7c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a15      	ldr	r2, [pc, #84]	@ (80054cc <TIM_OC6_SetConfig+0xc4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_OC6_SetConfig+0x7c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a14      	ldr	r2, [pc, #80]	@ (80054d0 <TIM_OC6_SetConfig+0xc8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d109      	bne.n	8005498 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800548a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	029b      	lsls	r3, r3, #10
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40012c00 	.word	0x40012c00
 80054c4:	40013400 	.word	0x40013400
 80054c8:	40014000 	.word	0x40014000
 80054cc:	40014400 	.word	0x40014400
 80054d0:	40014800 	.word	0x40014800

080054d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f023 0201 	bic.w	r2, r3, #1
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a26      	ldr	r2, [pc, #152]	@ (8005598 <TIM_TI1_SetConfig+0xc4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d017      	beq.n	8005532 <TIM_TI1_SetConfig+0x5e>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005508:	d013      	beq.n	8005532 <TIM_TI1_SetConfig+0x5e>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4a23      	ldr	r2, [pc, #140]	@ (800559c <TIM_TI1_SetConfig+0xc8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00f      	beq.n	8005532 <TIM_TI1_SetConfig+0x5e>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4a22      	ldr	r2, [pc, #136]	@ (80055a0 <TIM_TI1_SetConfig+0xcc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00b      	beq.n	8005532 <TIM_TI1_SetConfig+0x5e>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4a21      	ldr	r2, [pc, #132]	@ (80055a4 <TIM_TI1_SetConfig+0xd0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d007      	beq.n	8005532 <TIM_TI1_SetConfig+0x5e>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4a20      	ldr	r2, [pc, #128]	@ (80055a8 <TIM_TI1_SetConfig+0xd4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_TI1_SetConfig+0x5e>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4a1f      	ldr	r2, [pc, #124]	@ (80055ac <TIM_TI1_SetConfig+0xd8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d101      	bne.n	8005536 <TIM_TI1_SetConfig+0x62>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <TIM_TI1_SetConfig+0x64>
 8005536:	2300      	movs	r3, #0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f023 0303 	bic.w	r3, r3, #3
 8005542:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	e003      	b.n	8005556 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800555c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	b2db      	uxtb	r3, r3
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f023 030a 	bic.w	r3, r3, #10
 8005570:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f003 030a 	and.w	r3, r3, #10
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40012c00 	.word	0x40012c00
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800
 80055a4:	40000c00 	.word	0x40000c00
 80055a8:	40013400 	.word	0x40013400
 80055ac:	40014000 	.word	0x40014000

080055b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f023 0201 	bic.w	r2, r3, #1
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f023 030a 	bic.w	r3, r3, #10
 80055ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800560e:	b480      	push	{r7}
 8005610:	b087      	sub	sp, #28
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	607a      	str	r2, [r7, #4]
 800561a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f023 0210 	bic.w	r2, r3, #16
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800563a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	021b      	lsls	r3, r3, #8
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800564c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	031b      	lsls	r3, r3, #12
 8005652:	b29b      	uxth	r3, r3
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005660:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	621a      	str	r2, [r3, #32]
}
 800567c:	bf00      	nop
 800567e:	371c      	adds	r7, #28
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f023 0210 	bic.w	r2, r3, #16
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	031b      	lsls	r3, r3, #12
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	621a      	str	r2, [r3, #32]
}
 80056dc:	bf00      	nop
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f023 0303 	bic.w	r3, r3, #3
 8005714:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005724:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	b2db      	uxtb	r3, r3
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005738:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	621a      	str	r2, [r3, #32]
}
 8005754:	bf00      	nop
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800578c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800579e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	031b      	lsls	r3, r3, #12
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80057b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	031b      	lsls	r3, r3, #12
 80057b8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f043 0307 	orr.w	r3, r3, #7
 80057fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	609a      	str	r2, [r3, #8]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800582a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	021a      	lsls	r2, r3, #8
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	431a      	orrs	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4313      	orrs	r3, r2
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	609a      	str	r2, [r3, #8]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	2201      	movs	r2, #1
 8005864:	fa02 f303 	lsl.w	r3, r2, r3
 8005868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a1a      	ldr	r2, [r3, #32]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	43db      	mvns	r3, r3
 8005872:	401a      	ands	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1a      	ldr	r2, [r3, #32]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 031f 	and.w	r3, r3, #31
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	fa01 f303 	lsl.w	r3, r1, r3
 8005888:	431a      	orrs	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e068      	b.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005994 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a2d      	ldr	r2, [pc, #180]	@ (8005998 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d108      	bne.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005900:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1e      	ldr	r2, [pc, #120]	@ (8005994 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01d      	beq.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005926:	d018      	beq.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1b      	ldr	r2, [pc, #108]	@ (800599c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1a      	ldr	r2, [pc, #104]	@ (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00e      	beq.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a18      	ldr	r2, [pc, #96]	@ (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d009      	beq.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a13      	ldr	r2, [pc, #76]	@ (8005998 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d004      	beq.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a14      	ldr	r2, [pc, #80]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d10c      	bne.n	8005974 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	4313      	orrs	r3, r2
 800596a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40013400 	.word	0x40013400
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40000c00 	.word	0x40000c00
 80059a8:	40014000 	.word	0x40014000

080059ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e040      	b.n	8005a7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fb fc92 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2224      	movs	r2, #36	@ 0x24
 8005a14:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0201 	bic.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fb6a 	bl	8006108 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f8af 	bl	8005b98 <UART_SetConfig>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e01b      	b.n	8005a7c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fbe9 	bl	800624c <UART_CheckIdleState>
 8005a7a:	4603      	mov	r3, r0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	@ 0x28
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	4613      	mov	r3, r2
 8005a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d177      	bne.n	8005b8c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <HAL_UART_Transmit+0x24>
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e070      	b.n	8005b8e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2221      	movs	r2, #33	@ 0x21
 8005ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aba:	f7fb fee7 	bl	800188c <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad8:	d108      	bne.n	8005aec <HAL_UART_Transmit+0x68>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d104      	bne.n	8005aec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	e003      	b.n	8005af4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005af4:	e02f      	b.n	8005b56 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2200      	movs	r2, #0
 8005afe:	2180      	movs	r1, #128	@ 0x80
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fc4b 	bl	800639c <UART_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e03b      	b.n	8005b8e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10b      	bne.n	8005b34 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	881a      	ldrh	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b28:	b292      	uxth	r2, r2
 8005b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	3302      	adds	r3, #2
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	e007      	b.n	8005b44 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	781a      	ldrb	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	3301      	adds	r3, #1
 8005b42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1c9      	bne.n	8005af6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	2140      	movs	r1, #64	@ 0x40
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 fc15 	bl	800639c <UART_WaitOnFlagUntilTimeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d004      	beq.n	8005b82 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e005      	b.n	8005b8e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2220      	movs	r2, #32
 8005b86:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e000      	b.n	8005b8e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
  }
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b9c:	b08a      	sub	sp, #40	@ 0x28
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4ba4      	ldr	r3, [pc, #656]	@ (8005e58 <UART_SetConfig+0x2c0>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a99      	ldr	r2, [pc, #612]	@ (8005e5c <UART_SetConfig+0x2c4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d004      	beq.n	8005c04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c00:	4313      	orrs	r3, r2
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c14:	430a      	orrs	r2, r1
 8005c16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a90      	ldr	r2, [pc, #576]	@ (8005e60 <UART_SetConfig+0x2c8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d126      	bne.n	8005c70 <UART_SetConfig+0xd8>
 8005c22:	4b90      	ldr	r3, [pc, #576]	@ (8005e64 <UART_SetConfig+0x2cc>)
 8005c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d81b      	bhi.n	8005c68 <UART_SetConfig+0xd0>
 8005c30:	a201      	add	r2, pc, #4	@ (adr r2, 8005c38 <UART_SetConfig+0xa0>)
 8005c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c36:	bf00      	nop
 8005c38:	08005c49 	.word	0x08005c49
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	08005c51 	.word	0x08005c51
 8005c44:	08005c61 	.word	0x08005c61
 8005c48:	2301      	movs	r3, #1
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c4e:	e116      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005c50:	2302      	movs	r3, #2
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c56:	e112      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c5e:	e10e      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005c60:	2308      	movs	r3, #8
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c66:	e10a      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c6e:	e106      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a7c      	ldr	r2, [pc, #496]	@ (8005e68 <UART_SetConfig+0x2d0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d138      	bne.n	8005cec <UART_SetConfig+0x154>
 8005c7a:	4b7a      	ldr	r3, [pc, #488]	@ (8005e64 <UART_SetConfig+0x2cc>)
 8005c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c80:	f003 030c 	and.w	r3, r3, #12
 8005c84:	2b0c      	cmp	r3, #12
 8005c86:	d82d      	bhi.n	8005ce4 <UART_SetConfig+0x14c>
 8005c88:	a201      	add	r2, pc, #4	@ (adr r2, 8005c90 <UART_SetConfig+0xf8>)
 8005c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8e:	bf00      	nop
 8005c90:	08005cc5 	.word	0x08005cc5
 8005c94:	08005ce5 	.word	0x08005ce5
 8005c98:	08005ce5 	.word	0x08005ce5
 8005c9c:	08005ce5 	.word	0x08005ce5
 8005ca0:	08005cd5 	.word	0x08005cd5
 8005ca4:	08005ce5 	.word	0x08005ce5
 8005ca8:	08005ce5 	.word	0x08005ce5
 8005cac:	08005ce5 	.word	0x08005ce5
 8005cb0:	08005ccd 	.word	0x08005ccd
 8005cb4:	08005ce5 	.word	0x08005ce5
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	08005ce5 	.word	0x08005ce5
 8005cc0:	08005cdd 	.word	0x08005cdd
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cca:	e0d8      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cd2:	e0d4      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cda:	e0d0      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005cdc:	2308      	movs	r3, #8
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ce2:	e0cc      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cea:	e0c8      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a5e      	ldr	r2, [pc, #376]	@ (8005e6c <UART_SetConfig+0x2d4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d125      	bne.n	8005d42 <UART_SetConfig+0x1aa>
 8005cf6:	4b5b      	ldr	r3, [pc, #364]	@ (8005e64 <UART_SetConfig+0x2cc>)
 8005cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cfc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d00:	2b30      	cmp	r3, #48	@ 0x30
 8005d02:	d016      	beq.n	8005d32 <UART_SetConfig+0x19a>
 8005d04:	2b30      	cmp	r3, #48	@ 0x30
 8005d06:	d818      	bhi.n	8005d3a <UART_SetConfig+0x1a2>
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d00a      	beq.n	8005d22 <UART_SetConfig+0x18a>
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d814      	bhi.n	8005d3a <UART_SetConfig+0x1a2>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <UART_SetConfig+0x182>
 8005d14:	2b10      	cmp	r3, #16
 8005d16:	d008      	beq.n	8005d2a <UART_SetConfig+0x192>
 8005d18:	e00f      	b.n	8005d3a <UART_SetConfig+0x1a2>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d20:	e0ad      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005d22:	2302      	movs	r3, #2
 8005d24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d28:	e0a9      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005d2a:	2304      	movs	r3, #4
 8005d2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d30:	e0a5      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005d32:	2308      	movs	r3, #8
 8005d34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d38:	e0a1      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005d3a:	2310      	movs	r3, #16
 8005d3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d40:	e09d      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a4a      	ldr	r2, [pc, #296]	@ (8005e70 <UART_SetConfig+0x2d8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d125      	bne.n	8005d98 <UART_SetConfig+0x200>
 8005d4c:	4b45      	ldr	r3, [pc, #276]	@ (8005e64 <UART_SetConfig+0x2cc>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d58:	d016      	beq.n	8005d88 <UART_SetConfig+0x1f0>
 8005d5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d5c:	d818      	bhi.n	8005d90 <UART_SetConfig+0x1f8>
 8005d5e:	2b80      	cmp	r3, #128	@ 0x80
 8005d60:	d00a      	beq.n	8005d78 <UART_SetConfig+0x1e0>
 8005d62:	2b80      	cmp	r3, #128	@ 0x80
 8005d64:	d814      	bhi.n	8005d90 <UART_SetConfig+0x1f8>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <UART_SetConfig+0x1d8>
 8005d6a:	2b40      	cmp	r3, #64	@ 0x40
 8005d6c:	d008      	beq.n	8005d80 <UART_SetConfig+0x1e8>
 8005d6e:	e00f      	b.n	8005d90 <UART_SetConfig+0x1f8>
 8005d70:	2300      	movs	r3, #0
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d76:	e082      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d7e:	e07e      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005d80:	2304      	movs	r3, #4
 8005d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d86:	e07a      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8e:	e076      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005d90:	2310      	movs	r3, #16
 8005d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d96:	e072      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a35      	ldr	r2, [pc, #212]	@ (8005e74 <UART_SetConfig+0x2dc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d12a      	bne.n	8005df8 <UART_SetConfig+0x260>
 8005da2:	4b30      	ldr	r3, [pc, #192]	@ (8005e64 <UART_SetConfig+0x2cc>)
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005db0:	d01a      	beq.n	8005de8 <UART_SetConfig+0x250>
 8005db2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005db6:	d81b      	bhi.n	8005df0 <UART_SetConfig+0x258>
 8005db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dbc:	d00c      	beq.n	8005dd8 <UART_SetConfig+0x240>
 8005dbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dc2:	d815      	bhi.n	8005df0 <UART_SetConfig+0x258>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <UART_SetConfig+0x238>
 8005dc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dcc:	d008      	beq.n	8005de0 <UART_SetConfig+0x248>
 8005dce:	e00f      	b.n	8005df0 <UART_SetConfig+0x258>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dd6:	e052      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dde:	e04e      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005de0:	2304      	movs	r3, #4
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de6:	e04a      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005de8:	2308      	movs	r3, #8
 8005dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dee:	e046      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005df0:	2310      	movs	r3, #16
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df6:	e042      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a17      	ldr	r2, [pc, #92]	@ (8005e5c <UART_SetConfig+0x2c4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d13a      	bne.n	8005e78 <UART_SetConfig+0x2e0>
 8005e02:	4b18      	ldr	r3, [pc, #96]	@ (8005e64 <UART_SetConfig+0x2cc>)
 8005e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e10:	d01a      	beq.n	8005e48 <UART_SetConfig+0x2b0>
 8005e12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e16:	d81b      	bhi.n	8005e50 <UART_SetConfig+0x2b8>
 8005e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e1c:	d00c      	beq.n	8005e38 <UART_SetConfig+0x2a0>
 8005e1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e22:	d815      	bhi.n	8005e50 <UART_SetConfig+0x2b8>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <UART_SetConfig+0x298>
 8005e28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e2c:	d008      	beq.n	8005e40 <UART_SetConfig+0x2a8>
 8005e2e:	e00f      	b.n	8005e50 <UART_SetConfig+0x2b8>
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e36:	e022      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e3e:	e01e      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e46:	e01a      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e4e:	e016      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e56:	e012      	b.n	8005e7e <UART_SetConfig+0x2e6>
 8005e58:	efff69f3 	.word	0xefff69f3
 8005e5c:	40008000 	.word	0x40008000
 8005e60:	40013800 	.word	0x40013800
 8005e64:	40021000 	.word	0x40021000
 8005e68:	40004400 	.word	0x40004400
 8005e6c:	40004800 	.word	0x40004800
 8005e70:	40004c00 	.word	0x40004c00
 8005e74:	40005000 	.word	0x40005000
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a9f      	ldr	r2, [pc, #636]	@ (8006100 <UART_SetConfig+0x568>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d17a      	bne.n	8005f7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d824      	bhi.n	8005eda <UART_SetConfig+0x342>
 8005e90:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <UART_SetConfig+0x300>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ebd 	.word	0x08005ebd
 8005e9c:	08005edb 	.word	0x08005edb
 8005ea0:	08005ec5 	.word	0x08005ec5
 8005ea4:	08005edb 	.word	0x08005edb
 8005ea8:	08005ecb 	.word	0x08005ecb
 8005eac:	08005edb 	.word	0x08005edb
 8005eb0:	08005edb 	.word	0x08005edb
 8005eb4:	08005edb 	.word	0x08005edb
 8005eb8:	08005ed3 	.word	0x08005ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ebc:	f7fd fa32 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8005ec0:	61f8      	str	r0, [r7, #28]
        break;
 8005ec2:	e010      	b.n	8005ee6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ec4:	4b8f      	ldr	r3, [pc, #572]	@ (8006104 <UART_SetConfig+0x56c>)
 8005ec6:	61fb      	str	r3, [r7, #28]
        break;
 8005ec8:	e00d      	b.n	8005ee6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eca:	f7fd f993 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8005ece:	61f8      	str	r0, [r7, #28]
        break;
 8005ed0:	e009      	b.n	8005ee6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ed6:	61fb      	str	r3, [r7, #28]
        break;
 8005ed8:	e005      	b.n	8005ee6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ee4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80fb 	beq.w	80060e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	4413      	add	r3, r2
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d305      	bcc.n	8005f0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d903      	bls.n	8005f12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f10:	e0e8      	b.n	80060e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	2200      	movs	r2, #0
 8005f16:	461c      	mov	r4, r3
 8005f18:	4615      	mov	r5, r2
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	022b      	lsls	r3, r5, #8
 8005f24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f28:	0222      	lsls	r2, r4, #8
 8005f2a:	68f9      	ldr	r1, [r7, #12]
 8005f2c:	6849      	ldr	r1, [r1, #4]
 8005f2e:	0849      	lsrs	r1, r1, #1
 8005f30:	2000      	movs	r0, #0
 8005f32:	4688      	mov	r8, r1
 8005f34:	4681      	mov	r9, r0
 8005f36:	eb12 0a08 	adds.w	sl, r2, r8
 8005f3a:	eb43 0b09 	adc.w	fp, r3, r9
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	603b      	str	r3, [r7, #0]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f4c:	4650      	mov	r0, sl
 8005f4e:	4659      	mov	r1, fp
 8005f50:	f7fa f996 	bl	8000280 <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4613      	mov	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f62:	d308      	bcc.n	8005f76 <UART_SetConfig+0x3de>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f6a:	d204      	bcs.n	8005f76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	60da      	str	r2, [r3, #12]
 8005f74:	e0b6      	b.n	80060e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f7c:	e0b2      	b.n	80060e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f86:	d15e      	bne.n	8006046 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005f88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d828      	bhi.n	8005fe2 <UART_SetConfig+0x44a>
 8005f90:	a201      	add	r2, pc, #4	@ (adr r2, 8005f98 <UART_SetConfig+0x400>)
 8005f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f96:	bf00      	nop
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fc5 	.word	0x08005fc5
 8005fa0:	08005fcd 	.word	0x08005fcd
 8005fa4:	08005fe3 	.word	0x08005fe3
 8005fa8:	08005fd3 	.word	0x08005fd3
 8005fac:	08005fe3 	.word	0x08005fe3
 8005fb0:	08005fe3 	.word	0x08005fe3
 8005fb4:	08005fe3 	.word	0x08005fe3
 8005fb8:	08005fdb 	.word	0x08005fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fbc:	f7fd f9b2 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8005fc0:	61f8      	str	r0, [r7, #28]
        break;
 8005fc2:	e014      	b.n	8005fee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fc4:	f7fd f9c4 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 8005fc8:	61f8      	str	r0, [r7, #28]
        break;
 8005fca:	e010      	b.n	8005fee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8006104 <UART_SetConfig+0x56c>)
 8005fce:	61fb      	str	r3, [r7, #28]
        break;
 8005fd0:	e00d      	b.n	8005fee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fd2:	f7fd f90f 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8005fd6:	61f8      	str	r0, [r7, #28]
        break;
 8005fd8:	e009      	b.n	8005fee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fde:	61fb      	str	r3, [r7, #28]
        break;
 8005fe0:	e005      	b.n	8005fee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005fec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d077      	beq.n	80060e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	005a      	lsls	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	085b      	lsrs	r3, r3, #1
 8005ffe:	441a      	add	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	fbb2 f3f3 	udiv	r3, r2, r3
 8006008:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b0f      	cmp	r3, #15
 800600e:	d916      	bls.n	800603e <UART_SetConfig+0x4a6>
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006016:	d212      	bcs.n	800603e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	b29b      	uxth	r3, r3
 800601c:	f023 030f 	bic.w	r3, r3, #15
 8006020:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	085b      	lsrs	r3, r3, #1
 8006026:	b29b      	uxth	r3, r3
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	b29a      	uxth	r2, r3
 800602e:	8afb      	ldrh	r3, [r7, #22]
 8006030:	4313      	orrs	r3, r2
 8006032:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	8afa      	ldrh	r2, [r7, #22]
 800603a:	60da      	str	r2, [r3, #12]
 800603c:	e052      	b.n	80060e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006044:	e04e      	b.n	80060e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006046:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800604a:	2b08      	cmp	r3, #8
 800604c:	d827      	bhi.n	800609e <UART_SetConfig+0x506>
 800604e:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <UART_SetConfig+0x4bc>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	08006079 	.word	0x08006079
 8006058:	08006081 	.word	0x08006081
 800605c:	08006089 	.word	0x08006089
 8006060:	0800609f 	.word	0x0800609f
 8006064:	0800608f 	.word	0x0800608f
 8006068:	0800609f 	.word	0x0800609f
 800606c:	0800609f 	.word	0x0800609f
 8006070:	0800609f 	.word	0x0800609f
 8006074:	08006097 	.word	0x08006097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006078:	f7fd f954 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 800607c:	61f8      	str	r0, [r7, #28]
        break;
 800607e:	e014      	b.n	80060aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006080:	f7fd f966 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 8006084:	61f8      	str	r0, [r7, #28]
        break;
 8006086:	e010      	b.n	80060aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006088:	4b1e      	ldr	r3, [pc, #120]	@ (8006104 <UART_SetConfig+0x56c>)
 800608a:	61fb      	str	r3, [r7, #28]
        break;
 800608c:	e00d      	b.n	80060aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800608e:	f7fd f8b1 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8006092:	61f8      	str	r0, [r7, #28]
        break;
 8006094:	e009      	b.n	80060aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800609a:	61fb      	str	r3, [r7, #28]
        break;
 800609c:	e005      	b.n	80060aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060a8:	bf00      	nop
    }

    if (pclk != 0U)
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d019      	beq.n	80060e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	085a      	lsrs	r2, r3, #1
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	441a      	add	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	2b0f      	cmp	r3, #15
 80060c8:	d909      	bls.n	80060de <UART_SetConfig+0x546>
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d0:	d205      	bcs.n	80060de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60da      	str	r2, [r3, #12]
 80060dc:	e002      	b.n	80060e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80060f0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3728      	adds	r7, #40	@ 0x28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060fe:	bf00      	nop
 8006100:	40008000 	.word	0x40008000
 8006104:	00f42400 	.word	0x00f42400

08006108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01a      	beq.n	800621e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006206:	d10a      	bne.n	800621e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	605a      	str	r2, [r3, #4]
  }
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b098      	sub	sp, #96	@ 0x60
 8006250:	af02      	add	r7, sp, #8
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800625c:	f7fb fb16 	bl	800188c <HAL_GetTick>
 8006260:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0308 	and.w	r3, r3, #8
 800626c:	2b08      	cmp	r3, #8
 800626e:	d12e      	bne.n	80062ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006270:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006278:	2200      	movs	r2, #0
 800627a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f88c 	bl	800639c <UART_WaitOnFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d021      	beq.n	80062ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800629a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800629e:	653b      	str	r3, [r7, #80]	@ 0x50
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e6      	bne.n	800628a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e062      	b.n	8006394 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d149      	bne.n	8006370 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062e4:	2200      	movs	r2, #0
 80062e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f856 	bl	800639c <UART_WaitOnFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d03c      	beq.n	8006370 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	623b      	str	r3, [r7, #32]
   return(result);
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800630a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	461a      	mov	r2, r3
 8006312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006314:	633b      	str	r3, [r7, #48]	@ 0x30
 8006316:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800631a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e6      	bne.n	80062f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3308      	adds	r3, #8
 800632e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	e853 3f00 	ldrex	r3, [r3]
 8006336:	60fb      	str	r3, [r7, #12]
   return(result);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0301 	bic.w	r3, r3, #1
 800633e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3308      	adds	r3, #8
 8006346:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006348:	61fa      	str	r2, [r7, #28]
 800634a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	69b9      	ldr	r1, [r7, #24]
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	e841 2300 	strex	r3, r2, [r1]
 8006354:	617b      	str	r3, [r7, #20]
   return(result);
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e5      	bne.n	8006328 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e011      	b.n	8006394 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3758      	adds	r7, #88	@ 0x58
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ac:	e04f      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d04b      	beq.n	800644e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b6:	f7fb fa69 	bl	800188c <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d302      	bcc.n	80063cc <UART_WaitOnFlagUntilTimeout+0x30>
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e04e      	b.n	800646e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d037      	beq.n	800644e <UART_WaitOnFlagUntilTimeout+0xb2>
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b80      	cmp	r3, #128	@ 0x80
 80063e2:	d034      	beq.n	800644e <UART_WaitOnFlagUntilTimeout+0xb2>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b40      	cmp	r3, #64	@ 0x40
 80063e8:	d031      	beq.n	800644e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d110      	bne.n	800641a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2208      	movs	r2, #8
 80063fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 f838 	bl	8006476 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2208      	movs	r2, #8
 800640a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e029      	b.n	800646e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006424:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006428:	d111      	bne.n	800644e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006432:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 f81e 	bl	8006476 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e00f      	b.n	800646e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4013      	ands	r3, r2
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	429a      	cmp	r2, r3
 800645c:	bf0c      	ite	eq
 800645e:	2301      	moveq	r3, #1
 8006460:	2300      	movne	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	429a      	cmp	r2, r3
 800646a:	d0a0      	beq.n	80063ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006476:	b480      	push	{r7}
 8006478:	b095      	sub	sp, #84	@ 0x54
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006486:	e853 3f00 	ldrex	r3, [r3]
 800648a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800648c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800649c:	643b      	str	r3, [r7, #64]	@ 0x40
 800649e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064a4:	e841 2300 	strex	r3, r2, [r1]
 80064a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e6      	bne.n	800647e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3308      	adds	r3, #8
 80064b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	61fb      	str	r3, [r7, #28]
   return(result);
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	f023 0301 	bic.w	r3, r3, #1
 80064c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3308      	adds	r3, #8
 80064ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e5      	bne.n	80064b0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d118      	bne.n	800651e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f023 0310 	bic.w	r3, r3, #16
 8006500:	647b      	str	r3, [r7, #68]	@ 0x44
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	6979      	ldr	r1, [r7, #20]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	e841 2300 	strex	r3, r2, [r1]
 8006516:	613b      	str	r3, [r7, #16]
   return(result);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1e6      	bne.n	80064ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006532:	bf00      	nop
 8006534:	3754      	adds	r7, #84	@ 0x54
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800653e:	b084      	sub	sp, #16
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	f107 001c 	add.w	r0, r7, #28
 800654c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa69 	bl	8006a34 <USB_CoreReset>
 8006562:	4603      	mov	r3, r0
 8006564:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006566:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006572:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	639a      	str	r2, [r3, #56]	@ 0x38
 800657a:	e005      	b.n	8006588 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006580:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006588:	7bfb      	ldrb	r3, [r7, #15]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006594:	b004      	add	sp, #16
 8006596:	4770      	bx	lr

08006598 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f023 0201 	bic.w	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d115      	bne.n	8006608 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065e8:	200a      	movs	r0, #10
 80065ea:	f7fb f95b 	bl	80018a4 <HAL_Delay>
      ms += 10U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	330a      	adds	r3, #10
 80065f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fa0f 	bl	8006a18 <USB_GetMode>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d01e      	beq.n	800663e <USB_SetCurrentMode+0x84>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2bc7      	cmp	r3, #199	@ 0xc7
 8006604:	d9f0      	bls.n	80065e8 <USB_SetCurrentMode+0x2e>
 8006606:	e01a      	b.n	800663e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d115      	bne.n	800663a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800661a:	200a      	movs	r0, #10
 800661c:	f7fb f942 	bl	80018a4 <HAL_Delay>
      ms += 10U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	330a      	adds	r3, #10
 8006624:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f9f6 	bl	8006a18 <USB_GetMode>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <USB_SetCurrentMode+0x84>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2bc7      	cmp	r3, #199	@ 0xc7
 8006636:	d9f0      	bls.n	800661a <USB_SetCurrentMode+0x60>
 8006638:	e001      	b.n	800663e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e005      	b.n	800664a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2bc8      	cmp	r3, #200	@ 0xc8
 8006642:	d101      	bne.n	8006648 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e000      	b.n	800664a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006654:	b084      	sub	sp, #16
 8006656:	b580      	push	{r7, lr}
 8006658:	b086      	sub	sp, #24
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800666e:	2300      	movs	r3, #0
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	e009      	b.n	8006688 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	3340      	adds	r3, #64	@ 0x40
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	2200      	movs	r2, #0
 8006680:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	3301      	adds	r3, #1
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	2b0e      	cmp	r3, #14
 800668c:	d9f2      	bls.n	8006674 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800668e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006692:	2b00      	cmp	r3, #0
 8006694:	d11c      	bne.n	80066d0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066a4:	f043 0302 	orr.w	r3, r3, #2
 80066a8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	e005      	b.n	80066dc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066e2:	461a      	mov	r2, r3
 80066e4:	2300      	movs	r3, #0
 80066e6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066e8:	2103      	movs	r1, #3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f95a 	bl	80069a4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066f0:	2110      	movs	r1, #16
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f8f6 	bl	80068e4 <USB_FlushTxFifo>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f920 	bl	8006948 <USB_FlushRxFifo>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006718:	461a      	mov	r2, r3
 800671a:	2300      	movs	r3, #0
 800671c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006724:	461a      	mov	r2, r3
 8006726:	2300      	movs	r3, #0
 8006728:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006730:	461a      	mov	r2, r3
 8006732:	2300      	movs	r3, #0
 8006734:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006736:	2300      	movs	r3, #0
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	e043      	b.n	80067c4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800674e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006752:	d118      	bne.n	8006786 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006766:	461a      	mov	r2, r3
 8006768:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	e013      	b.n	8006798 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677c:	461a      	mov	r2, r3
 800677e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	e008      	b.n	8006798 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006792:	461a      	mov	r2, r3
 8006794:	2300      	movs	r3, #0
 8006796:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a4:	461a      	mov	r2, r3
 80067a6:	2300      	movs	r3, #0
 80067a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b6:	461a      	mov	r2, r3
 80067b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	3301      	adds	r3, #1
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067c8:	461a      	mov	r2, r3
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d3b5      	bcc.n	800673c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	613b      	str	r3, [r7, #16]
 80067d4:	e043      	b.n	800685e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067ec:	d118      	bne.n	8006820 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006800:	461a      	mov	r2, r3
 8006802:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	e013      	b.n	8006832 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006816:	461a      	mov	r2, r3
 8006818:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	e008      	b.n	8006832 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800682c:	461a      	mov	r2, r3
 800682e:	2300      	movs	r3, #0
 8006830:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683e:	461a      	mov	r2, r3
 8006840:	2300      	movs	r3, #0
 8006842:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006850:	461a      	mov	r2, r3
 8006852:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006856:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	3301      	adds	r3, #1
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006862:	461a      	mov	r2, r3
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	4293      	cmp	r3, r2
 8006868:	d3b5      	bcc.n	80067d6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800687c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800688a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	f043 0210 	orr.w	r2, r3, #16
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699a      	ldr	r2, [r3, #24]
 800689c:	4b10      	ldr	r3, [pc, #64]	@ (80068e0 <USB_DevInit+0x28c>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	f043 0208 	orr.w	r2, r3, #8
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d107      	bne.n	80068d0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068c8:	f043 0304 	orr.w	r3, r3, #4
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068dc:	b004      	add	sp, #16
 80068de:	4770      	bx	lr
 80068e0:	803c3800 	.word	0x803c3800

080068e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3301      	adds	r3, #1
 80068f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068fe:	d901      	bls.n	8006904 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e01b      	b.n	800693c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	daf2      	bge.n	80068f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	019b      	lsls	r3, r3, #6
 8006914:	f043 0220 	orr.w	r2, r3, #32
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3301      	adds	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006928:	d901      	bls.n	800692e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e006      	b.n	800693c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b20      	cmp	r3, #32
 8006938:	d0f0      	beq.n	800691c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3301      	adds	r3, #1
 8006958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006960:	d901      	bls.n	8006966 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e018      	b.n	8006998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	daf2      	bge.n	8006954 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2210      	movs	r2, #16
 8006976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006984:	d901      	bls.n	800698a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e006      	b.n	8006998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b10      	cmp	r3, #16
 8006994:	d0f0      	beq.n	8006978 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069c4:	4313      	orrs	r3, r2
 80069c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b085      	sub	sp, #20
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069f0:	f023 0303 	bic.w	r3, r3, #3
 80069f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a04:	f043 0302 	orr.w	r3, r3, #2
 8006a08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	f003 0301 	and.w	r3, r3, #1
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3301      	adds	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a4c:	d901      	bls.n	8006a52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e01b      	b.n	8006a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	daf2      	bge.n	8006a40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f043 0201 	orr.w	r2, r3, #1
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a76:	d901      	bls.n	8006a7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e006      	b.n	8006a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d0f0      	beq.n	8006a6a <USB_CoreReset+0x36>

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <_vsniprintf_r>:
 8006a96:	b530      	push	{r4, r5, lr}
 8006a98:	4614      	mov	r4, r2
 8006a9a:	2c00      	cmp	r4, #0
 8006a9c:	b09b      	sub	sp, #108	@ 0x6c
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	da05      	bge.n	8006ab0 <_vsniprintf_r+0x1a>
 8006aa4:	238b      	movs	r3, #139	@ 0x8b
 8006aa6:	6003      	str	r3, [r0, #0]
 8006aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aac:	b01b      	add	sp, #108	@ 0x6c
 8006aae:	bd30      	pop	{r4, r5, pc}
 8006ab0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ab4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006ab8:	bf14      	ite	ne
 8006aba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006abe:	4623      	moveq	r3, r4
 8006ac0:	9302      	str	r3, [sp, #8]
 8006ac2:	9305      	str	r3, [sp, #20]
 8006ac4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ac8:	9100      	str	r1, [sp, #0]
 8006aca:	9104      	str	r1, [sp, #16]
 8006acc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006ad0:	4669      	mov	r1, sp
 8006ad2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006ad4:	f000 f9a0 	bl	8006e18 <_svfiprintf_r>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	bfbc      	itt	lt
 8006adc:	238b      	movlt	r3, #139	@ 0x8b
 8006ade:	602b      	strlt	r3, [r5, #0]
 8006ae0:	2c00      	cmp	r4, #0
 8006ae2:	d0e3      	beq.n	8006aac <_vsniprintf_r+0x16>
 8006ae4:	9b00      	ldr	r3, [sp, #0]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	e7df      	b.n	8006aac <_vsniprintf_r+0x16>

08006aec <vsniprintf>:
 8006aec:	b507      	push	{r0, r1, r2, lr}
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	4613      	mov	r3, r2
 8006af2:	460a      	mov	r2, r1
 8006af4:	4601      	mov	r1, r0
 8006af6:	4803      	ldr	r0, [pc, #12]	@ (8006b04 <vsniprintf+0x18>)
 8006af8:	6800      	ldr	r0, [r0, #0]
 8006afa:	f7ff ffcc 	bl	8006a96 <_vsniprintf_r>
 8006afe:	b003      	add	sp, #12
 8006b00:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b04:	2000000c 	.word	0x2000000c

08006b08 <memset>:
 8006b08:	4402      	add	r2, r0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d100      	bne.n	8006b12 <memset+0xa>
 8006b10:	4770      	bx	lr
 8006b12:	f803 1b01 	strb.w	r1, [r3], #1
 8006b16:	e7f9      	b.n	8006b0c <memset+0x4>

08006b18 <__errno>:
 8006b18:	4b01      	ldr	r3, [pc, #4]	@ (8006b20 <__errno+0x8>)
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	2000000c 	.word	0x2000000c

08006b24 <__libc_init_array>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	4d0d      	ldr	r5, [pc, #52]	@ (8006b5c <__libc_init_array+0x38>)
 8006b28:	4c0d      	ldr	r4, [pc, #52]	@ (8006b60 <__libc_init_array+0x3c>)
 8006b2a:	1b64      	subs	r4, r4, r5
 8006b2c:	10a4      	asrs	r4, r4, #2
 8006b2e:	2600      	movs	r6, #0
 8006b30:	42a6      	cmp	r6, r4
 8006b32:	d109      	bne.n	8006b48 <__libc_init_array+0x24>
 8006b34:	4d0b      	ldr	r5, [pc, #44]	@ (8006b64 <__libc_init_array+0x40>)
 8006b36:	4c0c      	ldr	r4, [pc, #48]	@ (8006b68 <__libc_init_array+0x44>)
 8006b38:	f000 fc66 	bl	8007408 <_init>
 8006b3c:	1b64      	subs	r4, r4, r5
 8006b3e:	10a4      	asrs	r4, r4, #2
 8006b40:	2600      	movs	r6, #0
 8006b42:	42a6      	cmp	r6, r4
 8006b44:	d105      	bne.n	8006b52 <__libc_init_array+0x2e>
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4c:	4798      	blx	r3
 8006b4e:	3601      	adds	r6, #1
 8006b50:	e7ee      	b.n	8006b30 <__libc_init_array+0xc>
 8006b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b56:	4798      	blx	r3
 8006b58:	3601      	adds	r6, #1
 8006b5a:	e7f2      	b.n	8006b42 <__libc_init_array+0x1e>
 8006b5c:	080074b0 	.word	0x080074b0
 8006b60:	080074b0 	.word	0x080074b0
 8006b64:	080074b0 	.word	0x080074b0
 8006b68:	080074b4 	.word	0x080074b4

08006b6c <__retarget_lock_acquire_recursive>:
 8006b6c:	4770      	bx	lr

08006b6e <__retarget_lock_release_recursive>:
 8006b6e:	4770      	bx	lr

08006b70 <_free_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	4605      	mov	r5, r0
 8006b74:	2900      	cmp	r1, #0
 8006b76:	d041      	beq.n	8006bfc <_free_r+0x8c>
 8006b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b7c:	1f0c      	subs	r4, r1, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	bfb8      	it	lt
 8006b82:	18e4      	addlt	r4, r4, r3
 8006b84:	f000 f8e0 	bl	8006d48 <__malloc_lock>
 8006b88:	4a1d      	ldr	r2, [pc, #116]	@ (8006c00 <_free_r+0x90>)
 8006b8a:	6813      	ldr	r3, [r2, #0]
 8006b8c:	b933      	cbnz	r3, 8006b9c <_free_r+0x2c>
 8006b8e:	6063      	str	r3, [r4, #4]
 8006b90:	6014      	str	r4, [r2, #0]
 8006b92:	4628      	mov	r0, r5
 8006b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b98:	f000 b8dc 	b.w	8006d54 <__malloc_unlock>
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d908      	bls.n	8006bb2 <_free_r+0x42>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	1821      	adds	r1, r4, r0
 8006ba4:	428b      	cmp	r3, r1
 8006ba6:	bf01      	itttt	eq
 8006ba8:	6819      	ldreq	r1, [r3, #0]
 8006baa:	685b      	ldreq	r3, [r3, #4]
 8006bac:	1809      	addeq	r1, r1, r0
 8006bae:	6021      	streq	r1, [r4, #0]
 8006bb0:	e7ed      	b.n	8006b8e <_free_r+0x1e>
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	b10b      	cbz	r3, 8006bbc <_free_r+0x4c>
 8006bb8:	42a3      	cmp	r3, r4
 8006bba:	d9fa      	bls.n	8006bb2 <_free_r+0x42>
 8006bbc:	6811      	ldr	r1, [r2, #0]
 8006bbe:	1850      	adds	r0, r2, r1
 8006bc0:	42a0      	cmp	r0, r4
 8006bc2:	d10b      	bne.n	8006bdc <_free_r+0x6c>
 8006bc4:	6820      	ldr	r0, [r4, #0]
 8006bc6:	4401      	add	r1, r0
 8006bc8:	1850      	adds	r0, r2, r1
 8006bca:	4283      	cmp	r3, r0
 8006bcc:	6011      	str	r1, [r2, #0]
 8006bce:	d1e0      	bne.n	8006b92 <_free_r+0x22>
 8006bd0:	6818      	ldr	r0, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	6053      	str	r3, [r2, #4]
 8006bd6:	4408      	add	r0, r1
 8006bd8:	6010      	str	r0, [r2, #0]
 8006bda:	e7da      	b.n	8006b92 <_free_r+0x22>
 8006bdc:	d902      	bls.n	8006be4 <_free_r+0x74>
 8006bde:	230c      	movs	r3, #12
 8006be0:	602b      	str	r3, [r5, #0]
 8006be2:	e7d6      	b.n	8006b92 <_free_r+0x22>
 8006be4:	6820      	ldr	r0, [r4, #0]
 8006be6:	1821      	adds	r1, r4, r0
 8006be8:	428b      	cmp	r3, r1
 8006bea:	bf04      	itt	eq
 8006bec:	6819      	ldreq	r1, [r3, #0]
 8006bee:	685b      	ldreq	r3, [r3, #4]
 8006bf0:	6063      	str	r3, [r4, #4]
 8006bf2:	bf04      	itt	eq
 8006bf4:	1809      	addeq	r1, r1, r0
 8006bf6:	6021      	streq	r1, [r4, #0]
 8006bf8:	6054      	str	r4, [r2, #4]
 8006bfa:	e7ca      	b.n	8006b92 <_free_r+0x22>
 8006bfc:	bd38      	pop	{r3, r4, r5, pc}
 8006bfe:	bf00      	nop
 8006c00:	200009b8 	.word	0x200009b8

08006c04 <sbrk_aligned>:
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	4e0f      	ldr	r6, [pc, #60]	@ (8006c44 <sbrk_aligned+0x40>)
 8006c08:	460c      	mov	r4, r1
 8006c0a:	6831      	ldr	r1, [r6, #0]
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	b911      	cbnz	r1, 8006c16 <sbrk_aligned+0x12>
 8006c10:	f000 fba6 	bl	8007360 <_sbrk_r>
 8006c14:	6030      	str	r0, [r6, #0]
 8006c16:	4621      	mov	r1, r4
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f000 fba1 	bl	8007360 <_sbrk_r>
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	d103      	bne.n	8006c2a <sbrk_aligned+0x26>
 8006c22:	f04f 34ff 	mov.w	r4, #4294967295
 8006c26:	4620      	mov	r0, r4
 8006c28:	bd70      	pop	{r4, r5, r6, pc}
 8006c2a:	1cc4      	adds	r4, r0, #3
 8006c2c:	f024 0403 	bic.w	r4, r4, #3
 8006c30:	42a0      	cmp	r0, r4
 8006c32:	d0f8      	beq.n	8006c26 <sbrk_aligned+0x22>
 8006c34:	1a21      	subs	r1, r4, r0
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 fb92 	bl	8007360 <_sbrk_r>
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d1f2      	bne.n	8006c26 <sbrk_aligned+0x22>
 8006c40:	e7ef      	b.n	8006c22 <sbrk_aligned+0x1e>
 8006c42:	bf00      	nop
 8006c44:	200009b4 	.word	0x200009b4

08006c48 <_malloc_r>:
 8006c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c4c:	1ccd      	adds	r5, r1, #3
 8006c4e:	f025 0503 	bic.w	r5, r5, #3
 8006c52:	3508      	adds	r5, #8
 8006c54:	2d0c      	cmp	r5, #12
 8006c56:	bf38      	it	cc
 8006c58:	250c      	movcc	r5, #12
 8006c5a:	2d00      	cmp	r5, #0
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	db01      	blt.n	8006c64 <_malloc_r+0x1c>
 8006c60:	42a9      	cmp	r1, r5
 8006c62:	d904      	bls.n	8006c6e <_malloc_r+0x26>
 8006c64:	230c      	movs	r3, #12
 8006c66:	6033      	str	r3, [r6, #0]
 8006c68:	2000      	movs	r0, #0
 8006c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d44 <_malloc_r+0xfc>
 8006c72:	f000 f869 	bl	8006d48 <__malloc_lock>
 8006c76:	f8d8 3000 	ldr.w	r3, [r8]
 8006c7a:	461c      	mov	r4, r3
 8006c7c:	bb44      	cbnz	r4, 8006cd0 <_malloc_r+0x88>
 8006c7e:	4629      	mov	r1, r5
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7ff ffbf 	bl	8006c04 <sbrk_aligned>
 8006c86:	1c43      	adds	r3, r0, #1
 8006c88:	4604      	mov	r4, r0
 8006c8a:	d158      	bne.n	8006d3e <_malloc_r+0xf6>
 8006c8c:	f8d8 4000 	ldr.w	r4, [r8]
 8006c90:	4627      	mov	r7, r4
 8006c92:	2f00      	cmp	r7, #0
 8006c94:	d143      	bne.n	8006d1e <_malloc_r+0xd6>
 8006c96:	2c00      	cmp	r4, #0
 8006c98:	d04b      	beq.n	8006d32 <_malloc_r+0xea>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	eb04 0903 	add.w	r9, r4, r3
 8006ca4:	f000 fb5c 	bl	8007360 <_sbrk_r>
 8006ca8:	4581      	cmp	r9, r0
 8006caa:	d142      	bne.n	8006d32 <_malloc_r+0xea>
 8006cac:	6821      	ldr	r1, [r4, #0]
 8006cae:	1a6d      	subs	r5, r5, r1
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f7ff ffa6 	bl	8006c04 <sbrk_aligned>
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d03a      	beq.n	8006d32 <_malloc_r+0xea>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	442b      	add	r3, r5
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	bb62      	cbnz	r2, 8006d24 <_malloc_r+0xdc>
 8006cca:	f8c8 7000 	str.w	r7, [r8]
 8006cce:	e00f      	b.n	8006cf0 <_malloc_r+0xa8>
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	1b52      	subs	r2, r2, r5
 8006cd4:	d420      	bmi.n	8006d18 <_malloc_r+0xd0>
 8006cd6:	2a0b      	cmp	r2, #11
 8006cd8:	d917      	bls.n	8006d0a <_malloc_r+0xc2>
 8006cda:	1961      	adds	r1, r4, r5
 8006cdc:	42a3      	cmp	r3, r4
 8006cde:	6025      	str	r5, [r4, #0]
 8006ce0:	bf18      	it	ne
 8006ce2:	6059      	strne	r1, [r3, #4]
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	bf08      	it	eq
 8006ce8:	f8c8 1000 	streq.w	r1, [r8]
 8006cec:	5162      	str	r2, [r4, r5]
 8006cee:	604b      	str	r3, [r1, #4]
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f000 f82f 	bl	8006d54 <__malloc_unlock>
 8006cf6:	f104 000b 	add.w	r0, r4, #11
 8006cfa:	1d23      	adds	r3, r4, #4
 8006cfc:	f020 0007 	bic.w	r0, r0, #7
 8006d00:	1ac2      	subs	r2, r0, r3
 8006d02:	bf1c      	itt	ne
 8006d04:	1a1b      	subne	r3, r3, r0
 8006d06:	50a3      	strne	r3, [r4, r2]
 8006d08:	e7af      	b.n	8006c6a <_malloc_r+0x22>
 8006d0a:	6862      	ldr	r2, [r4, #4]
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	bf0c      	ite	eq
 8006d10:	f8c8 2000 	streq.w	r2, [r8]
 8006d14:	605a      	strne	r2, [r3, #4]
 8006d16:	e7eb      	b.n	8006cf0 <_malloc_r+0xa8>
 8006d18:	4623      	mov	r3, r4
 8006d1a:	6864      	ldr	r4, [r4, #4]
 8006d1c:	e7ae      	b.n	8006c7c <_malloc_r+0x34>
 8006d1e:	463c      	mov	r4, r7
 8006d20:	687f      	ldr	r7, [r7, #4]
 8006d22:	e7b6      	b.n	8006c92 <_malloc_r+0x4a>
 8006d24:	461a      	mov	r2, r3
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	d1fb      	bne.n	8006d24 <_malloc_r+0xdc>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	6053      	str	r3, [r2, #4]
 8006d30:	e7de      	b.n	8006cf0 <_malloc_r+0xa8>
 8006d32:	230c      	movs	r3, #12
 8006d34:	6033      	str	r3, [r6, #0]
 8006d36:	4630      	mov	r0, r6
 8006d38:	f000 f80c 	bl	8006d54 <__malloc_unlock>
 8006d3c:	e794      	b.n	8006c68 <_malloc_r+0x20>
 8006d3e:	6005      	str	r5, [r0, #0]
 8006d40:	e7d6      	b.n	8006cf0 <_malloc_r+0xa8>
 8006d42:	bf00      	nop
 8006d44:	200009b8 	.word	0x200009b8

08006d48 <__malloc_lock>:
 8006d48:	4801      	ldr	r0, [pc, #4]	@ (8006d50 <__malloc_lock+0x8>)
 8006d4a:	f7ff bf0f 	b.w	8006b6c <__retarget_lock_acquire_recursive>
 8006d4e:	bf00      	nop
 8006d50:	200009b0 	.word	0x200009b0

08006d54 <__malloc_unlock>:
 8006d54:	4801      	ldr	r0, [pc, #4]	@ (8006d5c <__malloc_unlock+0x8>)
 8006d56:	f7ff bf0a 	b.w	8006b6e <__retarget_lock_release_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	200009b0 	.word	0x200009b0

08006d60 <__ssputs_r>:
 8006d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d64:	688e      	ldr	r6, [r1, #8]
 8006d66:	461f      	mov	r7, r3
 8006d68:	42be      	cmp	r6, r7
 8006d6a:	680b      	ldr	r3, [r1, #0]
 8006d6c:	4682      	mov	sl, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	4690      	mov	r8, r2
 8006d72:	d82d      	bhi.n	8006dd0 <__ssputs_r+0x70>
 8006d74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d7c:	d026      	beq.n	8006dcc <__ssputs_r+0x6c>
 8006d7e:	6965      	ldr	r5, [r4, #20]
 8006d80:	6909      	ldr	r1, [r1, #16]
 8006d82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d86:	eba3 0901 	sub.w	r9, r3, r1
 8006d8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d8e:	1c7b      	adds	r3, r7, #1
 8006d90:	444b      	add	r3, r9
 8006d92:	106d      	asrs	r5, r5, #1
 8006d94:	429d      	cmp	r5, r3
 8006d96:	bf38      	it	cc
 8006d98:	461d      	movcc	r5, r3
 8006d9a:	0553      	lsls	r3, r2, #21
 8006d9c:	d527      	bpl.n	8006dee <__ssputs_r+0x8e>
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7ff ff52 	bl	8006c48 <_malloc_r>
 8006da4:	4606      	mov	r6, r0
 8006da6:	b360      	cbz	r0, 8006e02 <__ssputs_r+0xa2>
 8006da8:	6921      	ldr	r1, [r4, #16]
 8006daa:	464a      	mov	r2, r9
 8006dac:	f000 fae8 	bl	8007380 <memcpy>
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dba:	81a3      	strh	r3, [r4, #12]
 8006dbc:	6126      	str	r6, [r4, #16]
 8006dbe:	6165      	str	r5, [r4, #20]
 8006dc0:	444e      	add	r6, r9
 8006dc2:	eba5 0509 	sub.w	r5, r5, r9
 8006dc6:	6026      	str	r6, [r4, #0]
 8006dc8:	60a5      	str	r5, [r4, #8]
 8006dca:	463e      	mov	r6, r7
 8006dcc:	42be      	cmp	r6, r7
 8006dce:	d900      	bls.n	8006dd2 <__ssputs_r+0x72>
 8006dd0:	463e      	mov	r6, r7
 8006dd2:	6820      	ldr	r0, [r4, #0]
 8006dd4:	4632      	mov	r2, r6
 8006dd6:	4641      	mov	r1, r8
 8006dd8:	f000 faa8 	bl	800732c <memmove>
 8006ddc:	68a3      	ldr	r3, [r4, #8]
 8006dde:	1b9b      	subs	r3, r3, r6
 8006de0:	60a3      	str	r3, [r4, #8]
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	4433      	add	r3, r6
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	2000      	movs	r0, #0
 8006dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dee:	462a      	mov	r2, r5
 8006df0:	f000 fad4 	bl	800739c <_realloc_r>
 8006df4:	4606      	mov	r6, r0
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d1e0      	bne.n	8006dbc <__ssputs_r+0x5c>
 8006dfa:	6921      	ldr	r1, [r4, #16]
 8006dfc:	4650      	mov	r0, sl
 8006dfe:	f7ff feb7 	bl	8006b70 <_free_r>
 8006e02:	230c      	movs	r3, #12
 8006e04:	f8ca 3000 	str.w	r3, [sl]
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295
 8006e14:	e7e9      	b.n	8006dea <__ssputs_r+0x8a>
	...

08006e18 <_svfiprintf_r>:
 8006e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	4698      	mov	r8, r3
 8006e1e:	898b      	ldrh	r3, [r1, #12]
 8006e20:	061b      	lsls	r3, r3, #24
 8006e22:	b09d      	sub	sp, #116	@ 0x74
 8006e24:	4607      	mov	r7, r0
 8006e26:	460d      	mov	r5, r1
 8006e28:	4614      	mov	r4, r2
 8006e2a:	d510      	bpl.n	8006e4e <_svfiprintf_r+0x36>
 8006e2c:	690b      	ldr	r3, [r1, #16]
 8006e2e:	b973      	cbnz	r3, 8006e4e <_svfiprintf_r+0x36>
 8006e30:	2140      	movs	r1, #64	@ 0x40
 8006e32:	f7ff ff09 	bl	8006c48 <_malloc_r>
 8006e36:	6028      	str	r0, [r5, #0]
 8006e38:	6128      	str	r0, [r5, #16]
 8006e3a:	b930      	cbnz	r0, 8006e4a <_svfiprintf_r+0x32>
 8006e3c:	230c      	movs	r3, #12
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295
 8006e44:	b01d      	add	sp, #116	@ 0x74
 8006e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4a:	2340      	movs	r3, #64	@ 0x40
 8006e4c:	616b      	str	r3, [r5, #20]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e52:	2320      	movs	r3, #32
 8006e54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e5c:	2330      	movs	r3, #48	@ 0x30
 8006e5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ffc <_svfiprintf_r+0x1e4>
 8006e62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e66:	f04f 0901 	mov.w	r9, #1
 8006e6a:	4623      	mov	r3, r4
 8006e6c:	469a      	mov	sl, r3
 8006e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e72:	b10a      	cbz	r2, 8006e78 <_svfiprintf_r+0x60>
 8006e74:	2a25      	cmp	r2, #37	@ 0x25
 8006e76:	d1f9      	bne.n	8006e6c <_svfiprintf_r+0x54>
 8006e78:	ebba 0b04 	subs.w	fp, sl, r4
 8006e7c:	d00b      	beq.n	8006e96 <_svfiprintf_r+0x7e>
 8006e7e:	465b      	mov	r3, fp
 8006e80:	4622      	mov	r2, r4
 8006e82:	4629      	mov	r1, r5
 8006e84:	4638      	mov	r0, r7
 8006e86:	f7ff ff6b 	bl	8006d60 <__ssputs_r>
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	f000 80a7 	beq.w	8006fde <_svfiprintf_r+0x1c6>
 8006e90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e92:	445a      	add	r2, fp
 8006e94:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e96:	f89a 3000 	ldrb.w	r3, [sl]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 809f 	beq.w	8006fde <_svfiprintf_r+0x1c6>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eaa:	f10a 0a01 	add.w	sl, sl, #1
 8006eae:	9304      	str	r3, [sp, #16]
 8006eb0:	9307      	str	r3, [sp, #28]
 8006eb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006eb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006eb8:	4654      	mov	r4, sl
 8006eba:	2205      	movs	r2, #5
 8006ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec0:	484e      	ldr	r0, [pc, #312]	@ (8006ffc <_svfiprintf_r+0x1e4>)
 8006ec2:	f7f9 f98d 	bl	80001e0 <memchr>
 8006ec6:	9a04      	ldr	r2, [sp, #16]
 8006ec8:	b9d8      	cbnz	r0, 8006f02 <_svfiprintf_r+0xea>
 8006eca:	06d0      	lsls	r0, r2, #27
 8006ecc:	bf44      	itt	mi
 8006ece:	2320      	movmi	r3, #32
 8006ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ed4:	0711      	lsls	r1, r2, #28
 8006ed6:	bf44      	itt	mi
 8006ed8:	232b      	movmi	r3, #43	@ 0x2b
 8006eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ede:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ee4:	d015      	beq.n	8006f12 <_svfiprintf_r+0xfa>
 8006ee6:	9a07      	ldr	r2, [sp, #28]
 8006ee8:	4654      	mov	r4, sl
 8006eea:	2000      	movs	r0, #0
 8006eec:	f04f 0c0a 	mov.w	ip, #10
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ef6:	3b30      	subs	r3, #48	@ 0x30
 8006ef8:	2b09      	cmp	r3, #9
 8006efa:	d94b      	bls.n	8006f94 <_svfiprintf_r+0x17c>
 8006efc:	b1b0      	cbz	r0, 8006f2c <_svfiprintf_r+0x114>
 8006efe:	9207      	str	r2, [sp, #28]
 8006f00:	e014      	b.n	8006f2c <_svfiprintf_r+0x114>
 8006f02:	eba0 0308 	sub.w	r3, r0, r8
 8006f06:	fa09 f303 	lsl.w	r3, r9, r3
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	9304      	str	r3, [sp, #16]
 8006f0e:	46a2      	mov	sl, r4
 8006f10:	e7d2      	b.n	8006eb8 <_svfiprintf_r+0xa0>
 8006f12:	9b03      	ldr	r3, [sp, #12]
 8006f14:	1d19      	adds	r1, r3, #4
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	9103      	str	r1, [sp, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	bfbb      	ittet	lt
 8006f1e:	425b      	neglt	r3, r3
 8006f20:	f042 0202 	orrlt.w	r2, r2, #2
 8006f24:	9307      	strge	r3, [sp, #28]
 8006f26:	9307      	strlt	r3, [sp, #28]
 8006f28:	bfb8      	it	lt
 8006f2a:	9204      	strlt	r2, [sp, #16]
 8006f2c:	7823      	ldrb	r3, [r4, #0]
 8006f2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f30:	d10a      	bne.n	8006f48 <_svfiprintf_r+0x130>
 8006f32:	7863      	ldrb	r3, [r4, #1]
 8006f34:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f36:	d132      	bne.n	8006f9e <_svfiprintf_r+0x186>
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	1d1a      	adds	r2, r3, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	9203      	str	r2, [sp, #12]
 8006f40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f44:	3402      	adds	r4, #2
 8006f46:	9305      	str	r3, [sp, #20]
 8006f48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800700c <_svfiprintf_r+0x1f4>
 8006f4c:	7821      	ldrb	r1, [r4, #0]
 8006f4e:	2203      	movs	r2, #3
 8006f50:	4650      	mov	r0, sl
 8006f52:	f7f9 f945 	bl	80001e0 <memchr>
 8006f56:	b138      	cbz	r0, 8006f68 <_svfiprintf_r+0x150>
 8006f58:	9b04      	ldr	r3, [sp, #16]
 8006f5a:	eba0 000a 	sub.w	r0, r0, sl
 8006f5e:	2240      	movs	r2, #64	@ 0x40
 8006f60:	4082      	lsls	r2, r0
 8006f62:	4313      	orrs	r3, r2
 8006f64:	3401      	adds	r4, #1
 8006f66:	9304      	str	r3, [sp, #16]
 8006f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f6c:	4824      	ldr	r0, [pc, #144]	@ (8007000 <_svfiprintf_r+0x1e8>)
 8006f6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f72:	2206      	movs	r2, #6
 8006f74:	f7f9 f934 	bl	80001e0 <memchr>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d036      	beq.n	8006fea <_svfiprintf_r+0x1d2>
 8006f7c:	4b21      	ldr	r3, [pc, #132]	@ (8007004 <_svfiprintf_r+0x1ec>)
 8006f7e:	bb1b      	cbnz	r3, 8006fc8 <_svfiprintf_r+0x1b0>
 8006f80:	9b03      	ldr	r3, [sp, #12]
 8006f82:	3307      	adds	r3, #7
 8006f84:	f023 0307 	bic.w	r3, r3, #7
 8006f88:	3308      	adds	r3, #8
 8006f8a:	9303      	str	r3, [sp, #12]
 8006f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f8e:	4433      	add	r3, r6
 8006f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f92:	e76a      	b.n	8006e6a <_svfiprintf_r+0x52>
 8006f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f98:	460c      	mov	r4, r1
 8006f9a:	2001      	movs	r0, #1
 8006f9c:	e7a8      	b.n	8006ef0 <_svfiprintf_r+0xd8>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	3401      	adds	r4, #1
 8006fa2:	9305      	str	r3, [sp, #20]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	f04f 0c0a 	mov.w	ip, #10
 8006faa:	4620      	mov	r0, r4
 8006fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fb0:	3a30      	subs	r2, #48	@ 0x30
 8006fb2:	2a09      	cmp	r2, #9
 8006fb4:	d903      	bls.n	8006fbe <_svfiprintf_r+0x1a6>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0c6      	beq.n	8006f48 <_svfiprintf_r+0x130>
 8006fba:	9105      	str	r1, [sp, #20]
 8006fbc:	e7c4      	b.n	8006f48 <_svfiprintf_r+0x130>
 8006fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e7f0      	b.n	8006faa <_svfiprintf_r+0x192>
 8006fc8:	ab03      	add	r3, sp, #12
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	462a      	mov	r2, r5
 8006fce:	4b0e      	ldr	r3, [pc, #56]	@ (8007008 <_svfiprintf_r+0x1f0>)
 8006fd0:	a904      	add	r1, sp, #16
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	f3af 8000 	nop.w
 8006fd8:	1c42      	adds	r2, r0, #1
 8006fda:	4606      	mov	r6, r0
 8006fdc:	d1d6      	bne.n	8006f8c <_svfiprintf_r+0x174>
 8006fde:	89ab      	ldrh	r3, [r5, #12]
 8006fe0:	065b      	lsls	r3, r3, #25
 8006fe2:	f53f af2d 	bmi.w	8006e40 <_svfiprintf_r+0x28>
 8006fe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fe8:	e72c      	b.n	8006e44 <_svfiprintf_r+0x2c>
 8006fea:	ab03      	add	r3, sp, #12
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	462a      	mov	r2, r5
 8006ff0:	4b05      	ldr	r3, [pc, #20]	@ (8007008 <_svfiprintf_r+0x1f0>)
 8006ff2:	a904      	add	r1, sp, #16
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f000 f879 	bl	80070ec <_printf_i>
 8006ffa:	e7ed      	b.n	8006fd8 <_svfiprintf_r+0x1c0>
 8006ffc:	08007474 	.word	0x08007474
 8007000:	0800747e 	.word	0x0800747e
 8007004:	00000000 	.word	0x00000000
 8007008:	08006d61 	.word	0x08006d61
 800700c:	0800747a 	.word	0x0800747a

08007010 <_printf_common>:
 8007010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007014:	4616      	mov	r6, r2
 8007016:	4698      	mov	r8, r3
 8007018:	688a      	ldr	r2, [r1, #8]
 800701a:	690b      	ldr	r3, [r1, #16]
 800701c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007020:	4293      	cmp	r3, r2
 8007022:	bfb8      	it	lt
 8007024:	4613      	movlt	r3, r2
 8007026:	6033      	str	r3, [r6, #0]
 8007028:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800702c:	4607      	mov	r7, r0
 800702e:	460c      	mov	r4, r1
 8007030:	b10a      	cbz	r2, 8007036 <_printf_common+0x26>
 8007032:	3301      	adds	r3, #1
 8007034:	6033      	str	r3, [r6, #0]
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	0699      	lsls	r1, r3, #26
 800703a:	bf42      	ittt	mi
 800703c:	6833      	ldrmi	r3, [r6, #0]
 800703e:	3302      	addmi	r3, #2
 8007040:	6033      	strmi	r3, [r6, #0]
 8007042:	6825      	ldr	r5, [r4, #0]
 8007044:	f015 0506 	ands.w	r5, r5, #6
 8007048:	d106      	bne.n	8007058 <_printf_common+0x48>
 800704a:	f104 0a19 	add.w	sl, r4, #25
 800704e:	68e3      	ldr	r3, [r4, #12]
 8007050:	6832      	ldr	r2, [r6, #0]
 8007052:	1a9b      	subs	r3, r3, r2
 8007054:	42ab      	cmp	r3, r5
 8007056:	dc26      	bgt.n	80070a6 <_printf_common+0x96>
 8007058:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800705c:	6822      	ldr	r2, [r4, #0]
 800705e:	3b00      	subs	r3, #0
 8007060:	bf18      	it	ne
 8007062:	2301      	movne	r3, #1
 8007064:	0692      	lsls	r2, r2, #26
 8007066:	d42b      	bmi.n	80070c0 <_printf_common+0xb0>
 8007068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800706c:	4641      	mov	r1, r8
 800706e:	4638      	mov	r0, r7
 8007070:	47c8      	blx	r9
 8007072:	3001      	adds	r0, #1
 8007074:	d01e      	beq.n	80070b4 <_printf_common+0xa4>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	6922      	ldr	r2, [r4, #16]
 800707a:	f003 0306 	and.w	r3, r3, #6
 800707e:	2b04      	cmp	r3, #4
 8007080:	bf02      	ittt	eq
 8007082:	68e5      	ldreq	r5, [r4, #12]
 8007084:	6833      	ldreq	r3, [r6, #0]
 8007086:	1aed      	subeq	r5, r5, r3
 8007088:	68a3      	ldr	r3, [r4, #8]
 800708a:	bf0c      	ite	eq
 800708c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007090:	2500      	movne	r5, #0
 8007092:	4293      	cmp	r3, r2
 8007094:	bfc4      	itt	gt
 8007096:	1a9b      	subgt	r3, r3, r2
 8007098:	18ed      	addgt	r5, r5, r3
 800709a:	2600      	movs	r6, #0
 800709c:	341a      	adds	r4, #26
 800709e:	42b5      	cmp	r5, r6
 80070a0:	d11a      	bne.n	80070d8 <_printf_common+0xc8>
 80070a2:	2000      	movs	r0, #0
 80070a4:	e008      	b.n	80070b8 <_printf_common+0xa8>
 80070a6:	2301      	movs	r3, #1
 80070a8:	4652      	mov	r2, sl
 80070aa:	4641      	mov	r1, r8
 80070ac:	4638      	mov	r0, r7
 80070ae:	47c8      	blx	r9
 80070b0:	3001      	adds	r0, #1
 80070b2:	d103      	bne.n	80070bc <_printf_common+0xac>
 80070b4:	f04f 30ff 	mov.w	r0, #4294967295
 80070b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070bc:	3501      	adds	r5, #1
 80070be:	e7c6      	b.n	800704e <_printf_common+0x3e>
 80070c0:	18e1      	adds	r1, r4, r3
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	2030      	movs	r0, #48	@ 0x30
 80070c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070ca:	4422      	add	r2, r4
 80070cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070d4:	3302      	adds	r3, #2
 80070d6:	e7c7      	b.n	8007068 <_printf_common+0x58>
 80070d8:	2301      	movs	r3, #1
 80070da:	4622      	mov	r2, r4
 80070dc:	4641      	mov	r1, r8
 80070de:	4638      	mov	r0, r7
 80070e0:	47c8      	blx	r9
 80070e2:	3001      	adds	r0, #1
 80070e4:	d0e6      	beq.n	80070b4 <_printf_common+0xa4>
 80070e6:	3601      	adds	r6, #1
 80070e8:	e7d9      	b.n	800709e <_printf_common+0x8e>
	...

080070ec <_printf_i>:
 80070ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070f0:	7e0f      	ldrb	r7, [r1, #24]
 80070f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070f4:	2f78      	cmp	r7, #120	@ 0x78
 80070f6:	4691      	mov	r9, r2
 80070f8:	4680      	mov	r8, r0
 80070fa:	460c      	mov	r4, r1
 80070fc:	469a      	mov	sl, r3
 80070fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007102:	d807      	bhi.n	8007114 <_printf_i+0x28>
 8007104:	2f62      	cmp	r7, #98	@ 0x62
 8007106:	d80a      	bhi.n	800711e <_printf_i+0x32>
 8007108:	2f00      	cmp	r7, #0
 800710a:	f000 80d2 	beq.w	80072b2 <_printf_i+0x1c6>
 800710e:	2f58      	cmp	r7, #88	@ 0x58
 8007110:	f000 80b9 	beq.w	8007286 <_printf_i+0x19a>
 8007114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007118:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800711c:	e03a      	b.n	8007194 <_printf_i+0xa8>
 800711e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007122:	2b15      	cmp	r3, #21
 8007124:	d8f6      	bhi.n	8007114 <_printf_i+0x28>
 8007126:	a101      	add	r1, pc, #4	@ (adr r1, 800712c <_printf_i+0x40>)
 8007128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800712c:	08007185 	.word	0x08007185
 8007130:	08007199 	.word	0x08007199
 8007134:	08007115 	.word	0x08007115
 8007138:	08007115 	.word	0x08007115
 800713c:	08007115 	.word	0x08007115
 8007140:	08007115 	.word	0x08007115
 8007144:	08007199 	.word	0x08007199
 8007148:	08007115 	.word	0x08007115
 800714c:	08007115 	.word	0x08007115
 8007150:	08007115 	.word	0x08007115
 8007154:	08007115 	.word	0x08007115
 8007158:	08007299 	.word	0x08007299
 800715c:	080071c3 	.word	0x080071c3
 8007160:	08007253 	.word	0x08007253
 8007164:	08007115 	.word	0x08007115
 8007168:	08007115 	.word	0x08007115
 800716c:	080072bb 	.word	0x080072bb
 8007170:	08007115 	.word	0x08007115
 8007174:	080071c3 	.word	0x080071c3
 8007178:	08007115 	.word	0x08007115
 800717c:	08007115 	.word	0x08007115
 8007180:	0800725b 	.word	0x0800725b
 8007184:	6833      	ldr	r3, [r6, #0]
 8007186:	1d1a      	adds	r2, r3, #4
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6032      	str	r2, [r6, #0]
 800718c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007190:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007194:	2301      	movs	r3, #1
 8007196:	e09d      	b.n	80072d4 <_printf_i+0x1e8>
 8007198:	6833      	ldr	r3, [r6, #0]
 800719a:	6820      	ldr	r0, [r4, #0]
 800719c:	1d19      	adds	r1, r3, #4
 800719e:	6031      	str	r1, [r6, #0]
 80071a0:	0606      	lsls	r6, r0, #24
 80071a2:	d501      	bpl.n	80071a8 <_printf_i+0xbc>
 80071a4:	681d      	ldr	r5, [r3, #0]
 80071a6:	e003      	b.n	80071b0 <_printf_i+0xc4>
 80071a8:	0645      	lsls	r5, r0, #25
 80071aa:	d5fb      	bpl.n	80071a4 <_printf_i+0xb8>
 80071ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071b0:	2d00      	cmp	r5, #0
 80071b2:	da03      	bge.n	80071bc <_printf_i+0xd0>
 80071b4:	232d      	movs	r3, #45	@ 0x2d
 80071b6:	426d      	negs	r5, r5
 80071b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071bc:	4859      	ldr	r0, [pc, #356]	@ (8007324 <_printf_i+0x238>)
 80071be:	230a      	movs	r3, #10
 80071c0:	e011      	b.n	80071e6 <_printf_i+0xfa>
 80071c2:	6821      	ldr	r1, [r4, #0]
 80071c4:	6833      	ldr	r3, [r6, #0]
 80071c6:	0608      	lsls	r0, r1, #24
 80071c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80071cc:	d402      	bmi.n	80071d4 <_printf_i+0xe8>
 80071ce:	0649      	lsls	r1, r1, #25
 80071d0:	bf48      	it	mi
 80071d2:	b2ad      	uxthmi	r5, r5
 80071d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80071d6:	4853      	ldr	r0, [pc, #332]	@ (8007324 <_printf_i+0x238>)
 80071d8:	6033      	str	r3, [r6, #0]
 80071da:	bf14      	ite	ne
 80071dc:	230a      	movne	r3, #10
 80071de:	2308      	moveq	r3, #8
 80071e0:	2100      	movs	r1, #0
 80071e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071e6:	6866      	ldr	r6, [r4, #4]
 80071e8:	60a6      	str	r6, [r4, #8]
 80071ea:	2e00      	cmp	r6, #0
 80071ec:	bfa2      	ittt	ge
 80071ee:	6821      	ldrge	r1, [r4, #0]
 80071f0:	f021 0104 	bicge.w	r1, r1, #4
 80071f4:	6021      	strge	r1, [r4, #0]
 80071f6:	b90d      	cbnz	r5, 80071fc <_printf_i+0x110>
 80071f8:	2e00      	cmp	r6, #0
 80071fa:	d04b      	beq.n	8007294 <_printf_i+0x1a8>
 80071fc:	4616      	mov	r6, r2
 80071fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007202:	fb03 5711 	mls	r7, r3, r1, r5
 8007206:	5dc7      	ldrb	r7, [r0, r7]
 8007208:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800720c:	462f      	mov	r7, r5
 800720e:	42bb      	cmp	r3, r7
 8007210:	460d      	mov	r5, r1
 8007212:	d9f4      	bls.n	80071fe <_printf_i+0x112>
 8007214:	2b08      	cmp	r3, #8
 8007216:	d10b      	bne.n	8007230 <_printf_i+0x144>
 8007218:	6823      	ldr	r3, [r4, #0]
 800721a:	07df      	lsls	r7, r3, #31
 800721c:	d508      	bpl.n	8007230 <_printf_i+0x144>
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	6861      	ldr	r1, [r4, #4]
 8007222:	4299      	cmp	r1, r3
 8007224:	bfde      	ittt	le
 8007226:	2330      	movle	r3, #48	@ 0x30
 8007228:	f806 3c01 	strble.w	r3, [r6, #-1]
 800722c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007230:	1b92      	subs	r2, r2, r6
 8007232:	6122      	str	r2, [r4, #16]
 8007234:	f8cd a000 	str.w	sl, [sp]
 8007238:	464b      	mov	r3, r9
 800723a:	aa03      	add	r2, sp, #12
 800723c:	4621      	mov	r1, r4
 800723e:	4640      	mov	r0, r8
 8007240:	f7ff fee6 	bl	8007010 <_printf_common>
 8007244:	3001      	adds	r0, #1
 8007246:	d14a      	bne.n	80072de <_printf_i+0x1f2>
 8007248:	f04f 30ff 	mov.w	r0, #4294967295
 800724c:	b004      	add	sp, #16
 800724e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	f043 0320 	orr.w	r3, r3, #32
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	4833      	ldr	r0, [pc, #204]	@ (8007328 <_printf_i+0x23c>)
 800725c:	2778      	movs	r7, #120	@ 0x78
 800725e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	6831      	ldr	r1, [r6, #0]
 8007266:	061f      	lsls	r7, r3, #24
 8007268:	f851 5b04 	ldr.w	r5, [r1], #4
 800726c:	d402      	bmi.n	8007274 <_printf_i+0x188>
 800726e:	065f      	lsls	r7, r3, #25
 8007270:	bf48      	it	mi
 8007272:	b2ad      	uxthmi	r5, r5
 8007274:	6031      	str	r1, [r6, #0]
 8007276:	07d9      	lsls	r1, r3, #31
 8007278:	bf44      	itt	mi
 800727a:	f043 0320 	orrmi.w	r3, r3, #32
 800727e:	6023      	strmi	r3, [r4, #0]
 8007280:	b11d      	cbz	r5, 800728a <_printf_i+0x19e>
 8007282:	2310      	movs	r3, #16
 8007284:	e7ac      	b.n	80071e0 <_printf_i+0xf4>
 8007286:	4827      	ldr	r0, [pc, #156]	@ (8007324 <_printf_i+0x238>)
 8007288:	e7e9      	b.n	800725e <_printf_i+0x172>
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	f023 0320 	bic.w	r3, r3, #32
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	e7f6      	b.n	8007282 <_printf_i+0x196>
 8007294:	4616      	mov	r6, r2
 8007296:	e7bd      	b.n	8007214 <_printf_i+0x128>
 8007298:	6833      	ldr	r3, [r6, #0]
 800729a:	6825      	ldr	r5, [r4, #0]
 800729c:	6961      	ldr	r1, [r4, #20]
 800729e:	1d18      	adds	r0, r3, #4
 80072a0:	6030      	str	r0, [r6, #0]
 80072a2:	062e      	lsls	r6, r5, #24
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	d501      	bpl.n	80072ac <_printf_i+0x1c0>
 80072a8:	6019      	str	r1, [r3, #0]
 80072aa:	e002      	b.n	80072b2 <_printf_i+0x1c6>
 80072ac:	0668      	lsls	r0, r5, #25
 80072ae:	d5fb      	bpl.n	80072a8 <_printf_i+0x1bc>
 80072b0:	8019      	strh	r1, [r3, #0]
 80072b2:	2300      	movs	r3, #0
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	4616      	mov	r6, r2
 80072b8:	e7bc      	b.n	8007234 <_printf_i+0x148>
 80072ba:	6833      	ldr	r3, [r6, #0]
 80072bc:	1d1a      	adds	r2, r3, #4
 80072be:	6032      	str	r2, [r6, #0]
 80072c0:	681e      	ldr	r6, [r3, #0]
 80072c2:	6862      	ldr	r2, [r4, #4]
 80072c4:	2100      	movs	r1, #0
 80072c6:	4630      	mov	r0, r6
 80072c8:	f7f8 ff8a 	bl	80001e0 <memchr>
 80072cc:	b108      	cbz	r0, 80072d2 <_printf_i+0x1e6>
 80072ce:	1b80      	subs	r0, r0, r6
 80072d0:	6060      	str	r0, [r4, #4]
 80072d2:	6863      	ldr	r3, [r4, #4]
 80072d4:	6123      	str	r3, [r4, #16]
 80072d6:	2300      	movs	r3, #0
 80072d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072dc:	e7aa      	b.n	8007234 <_printf_i+0x148>
 80072de:	6923      	ldr	r3, [r4, #16]
 80072e0:	4632      	mov	r2, r6
 80072e2:	4649      	mov	r1, r9
 80072e4:	4640      	mov	r0, r8
 80072e6:	47d0      	blx	sl
 80072e8:	3001      	adds	r0, #1
 80072ea:	d0ad      	beq.n	8007248 <_printf_i+0x15c>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	079b      	lsls	r3, r3, #30
 80072f0:	d413      	bmi.n	800731a <_printf_i+0x22e>
 80072f2:	68e0      	ldr	r0, [r4, #12]
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	4298      	cmp	r0, r3
 80072f8:	bfb8      	it	lt
 80072fa:	4618      	movlt	r0, r3
 80072fc:	e7a6      	b.n	800724c <_printf_i+0x160>
 80072fe:	2301      	movs	r3, #1
 8007300:	4632      	mov	r2, r6
 8007302:	4649      	mov	r1, r9
 8007304:	4640      	mov	r0, r8
 8007306:	47d0      	blx	sl
 8007308:	3001      	adds	r0, #1
 800730a:	d09d      	beq.n	8007248 <_printf_i+0x15c>
 800730c:	3501      	adds	r5, #1
 800730e:	68e3      	ldr	r3, [r4, #12]
 8007310:	9903      	ldr	r1, [sp, #12]
 8007312:	1a5b      	subs	r3, r3, r1
 8007314:	42ab      	cmp	r3, r5
 8007316:	dcf2      	bgt.n	80072fe <_printf_i+0x212>
 8007318:	e7eb      	b.n	80072f2 <_printf_i+0x206>
 800731a:	2500      	movs	r5, #0
 800731c:	f104 0619 	add.w	r6, r4, #25
 8007320:	e7f5      	b.n	800730e <_printf_i+0x222>
 8007322:	bf00      	nop
 8007324:	08007485 	.word	0x08007485
 8007328:	08007496 	.word	0x08007496

0800732c <memmove>:
 800732c:	4288      	cmp	r0, r1
 800732e:	b510      	push	{r4, lr}
 8007330:	eb01 0402 	add.w	r4, r1, r2
 8007334:	d902      	bls.n	800733c <memmove+0x10>
 8007336:	4284      	cmp	r4, r0
 8007338:	4623      	mov	r3, r4
 800733a:	d807      	bhi.n	800734c <memmove+0x20>
 800733c:	1e43      	subs	r3, r0, #1
 800733e:	42a1      	cmp	r1, r4
 8007340:	d008      	beq.n	8007354 <memmove+0x28>
 8007342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800734a:	e7f8      	b.n	800733e <memmove+0x12>
 800734c:	4402      	add	r2, r0
 800734e:	4601      	mov	r1, r0
 8007350:	428a      	cmp	r2, r1
 8007352:	d100      	bne.n	8007356 <memmove+0x2a>
 8007354:	bd10      	pop	{r4, pc}
 8007356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800735a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800735e:	e7f7      	b.n	8007350 <memmove+0x24>

08007360 <_sbrk_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4d06      	ldr	r5, [pc, #24]	@ (800737c <_sbrk_r+0x1c>)
 8007364:	2300      	movs	r3, #0
 8007366:	4604      	mov	r4, r0
 8007368:	4608      	mov	r0, r1
 800736a:	602b      	str	r3, [r5, #0]
 800736c:	f7fa f984 	bl	8001678 <_sbrk>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_sbrk_r+0x1a>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_sbrk_r+0x1a>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	200009ac 	.word	0x200009ac

08007380 <memcpy>:
 8007380:	440a      	add	r2, r1
 8007382:	4291      	cmp	r1, r2
 8007384:	f100 33ff 	add.w	r3, r0, #4294967295
 8007388:	d100      	bne.n	800738c <memcpy+0xc>
 800738a:	4770      	bx	lr
 800738c:	b510      	push	{r4, lr}
 800738e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007396:	4291      	cmp	r1, r2
 8007398:	d1f9      	bne.n	800738e <memcpy+0xe>
 800739a:	bd10      	pop	{r4, pc}

0800739c <_realloc_r>:
 800739c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a0:	4680      	mov	r8, r0
 80073a2:	4615      	mov	r5, r2
 80073a4:	460c      	mov	r4, r1
 80073a6:	b921      	cbnz	r1, 80073b2 <_realloc_r+0x16>
 80073a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ac:	4611      	mov	r1, r2
 80073ae:	f7ff bc4b 	b.w	8006c48 <_malloc_r>
 80073b2:	b92a      	cbnz	r2, 80073c0 <_realloc_r+0x24>
 80073b4:	f7ff fbdc 	bl	8006b70 <_free_r>
 80073b8:	2400      	movs	r4, #0
 80073ba:	4620      	mov	r0, r4
 80073bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c0:	f000 f81a 	bl	80073f8 <_malloc_usable_size_r>
 80073c4:	4285      	cmp	r5, r0
 80073c6:	4606      	mov	r6, r0
 80073c8:	d802      	bhi.n	80073d0 <_realloc_r+0x34>
 80073ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80073ce:	d8f4      	bhi.n	80073ba <_realloc_r+0x1e>
 80073d0:	4629      	mov	r1, r5
 80073d2:	4640      	mov	r0, r8
 80073d4:	f7ff fc38 	bl	8006c48 <_malloc_r>
 80073d8:	4607      	mov	r7, r0
 80073da:	2800      	cmp	r0, #0
 80073dc:	d0ec      	beq.n	80073b8 <_realloc_r+0x1c>
 80073de:	42b5      	cmp	r5, r6
 80073e0:	462a      	mov	r2, r5
 80073e2:	4621      	mov	r1, r4
 80073e4:	bf28      	it	cs
 80073e6:	4632      	movcs	r2, r6
 80073e8:	f7ff ffca 	bl	8007380 <memcpy>
 80073ec:	4621      	mov	r1, r4
 80073ee:	4640      	mov	r0, r8
 80073f0:	f7ff fbbe 	bl	8006b70 <_free_r>
 80073f4:	463c      	mov	r4, r7
 80073f6:	e7e0      	b.n	80073ba <_realloc_r+0x1e>

080073f8 <_malloc_usable_size_r>:
 80073f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073fc:	1f18      	subs	r0, r3, #4
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bfbc      	itt	lt
 8007402:	580b      	ldrlt	r3, [r1, r0]
 8007404:	18c0      	addlt	r0, r0, r3
 8007406:	4770      	bx	lr

08007408 <_init>:
 8007408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740a:	bf00      	nop
 800740c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800740e:	bc08      	pop	{r3}
 8007410:	469e      	mov	lr, r3
 8007412:	4770      	bx	lr

08007414 <_fini>:
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007416:	bf00      	nop
 8007418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741a:	bc08      	pop	{r3}
 800741c:	469e      	mov	lr, r3
 800741e:	4770      	bx	lr
