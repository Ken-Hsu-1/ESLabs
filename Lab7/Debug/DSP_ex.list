
DSP_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011438  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d0c  080115c8  080115c8  000125c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122d4  080122d4  00014218  2**0
                  CONTENTS
  4 .ARM          00000008  080122d4  080122d4  000132d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122dc  080122dc  00014218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122dc  080122dc  000132dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080122e0  080122e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  080122e4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f50  20000218  080124fc  00014218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003168  080124fc  00015168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000281a4  00000000  00000000  00014248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050a0  00000000  00000000  0003c3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002300  00000000  00000000  00041490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b44  00000000  00000000  00043790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006bcc  00000000  00000000  000452d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028d1e  00000000  00000000  0004bea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d543  00000000  00000000  00074bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182101  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab2c  00000000  00000000  00182144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0018cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080115b0 	.word	0x080115b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	080115b0 	.word	0x080115b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000fec:	1d39      	adds	r1, r7, #4
 8000fee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <__io_putchar+0x20>)
 8000ff6:	f007 fe5b 	bl	8008cb0 <HAL_UART_Transmit>
	return ch;
 8000ffa:	687b      	ldr	r3, [r7, #4]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000280 	.word	0x20000280

08001008 <WIFI_init_connect>:

void WIFI_init_connect(void)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af04      	add	r7, sp, #16
	if(WIFI_Init() ==  WIFI_STATUS_OK)
 800100e:	f002 f9eb 	bl	80033e8 <WIFI_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	f040 8091 	bne.w	800113c <WIFI_init_connect+0x134>
	  {
	    printf("> WIFI Module Initialized.\n");
 800101a:	484b      	ldr	r0, [pc, #300]	@ (8001148 <WIFI_init_connect+0x140>)
 800101c:	f00c fdf2 	bl	800dc04 <puts>
	    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 8001020:	2106      	movs	r1, #6
 8001022:	484a      	ldr	r0, [pc, #296]	@ (800114c <WIFI_init_connect+0x144>)
 8001024:	f002 fa2e 	bl	8003484 <WIFI_GetMAC_Address>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d11a      	bne.n	8001064 <WIFI_init_connect+0x5c>
	    {
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
	               MAC_Addr[0],
 800102e:	4b47      	ldr	r3, [pc, #284]	@ (800114c <WIFI_init_connect+0x144>)
 8001030:	781b      	ldrb	r3, [r3, #0]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001032:	4618      	mov	r0, r3
	               MAC_Addr[1],
 8001034:	4b45      	ldr	r3, [pc, #276]	@ (800114c <WIFI_init_connect+0x144>)
 8001036:	785b      	ldrb	r3, [r3, #1]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001038:	461c      	mov	r4, r3
	               MAC_Addr[2],
 800103a:	4b44      	ldr	r3, [pc, #272]	@ (800114c <WIFI_init_connect+0x144>)
 800103c:	789b      	ldrb	r3, [r3, #2]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 800103e:	461d      	mov	r5, r3
	               MAC_Addr[3],
 8001040:	4b42      	ldr	r3, [pc, #264]	@ (800114c <WIFI_init_connect+0x144>)
 8001042:	78db      	ldrb	r3, [r3, #3]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001044:	461a      	mov	r2, r3
	               MAC_Addr[4],
 8001046:	4b41      	ldr	r3, [pc, #260]	@ (800114c <WIFI_init_connect+0x144>)
 8001048:	791b      	ldrb	r3, [r3, #4]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 800104a:	4619      	mov	r1, r3
	               MAC_Addr[5]);
 800104c:	4b3f      	ldr	r3, [pc, #252]	@ (800114c <WIFI_init_connect+0x144>)
 800104e:	795b      	ldrb	r3, [r3, #5]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	9101      	str	r1, [sp, #4]
 8001054:	9200      	str	r2, [sp, #0]
 8001056:	462b      	mov	r3, r5
 8001058:	4622      	mov	r2, r4
 800105a:	4601      	mov	r1, r0
 800105c:	483c      	ldr	r0, [pc, #240]	@ (8001150 <WIFI_init_connect+0x148>)
 800105e:	f00c fd69 	bl	800db34 <iprintf>
 8001062:	e002      	b.n	800106a <WIFI_init_connect+0x62>
	    }
	    else
	    {
	      printf("> ERROR : CANNOT get MAC address\n");
 8001064:	483b      	ldr	r0, [pc, #236]	@ (8001154 <WIFI_init_connect+0x14c>)
 8001066:	f00c fdcd 	bl	800dc04 <puts>
	      //BSP_LED_On(LED2);
	    }

	    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 800106a:	2203      	movs	r2, #3
 800106c:	493a      	ldr	r1, [pc, #232]	@ (8001158 <WIFI_init_connect+0x150>)
 800106e:	483b      	ldr	r0, [pc, #236]	@ (800115c <WIFI_init_connect+0x154>)
 8001070:	f002 f9e6 	bl	8003440 <WIFI_Connect>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d15c      	bne.n	8001134 <WIFI_init_connect+0x12c>
	    {
	      printf("> es-wifi module connected \n");
 800107a:	4839      	ldr	r0, [pc, #228]	@ (8001160 <WIFI_init_connect+0x158>)
 800107c:	f00c fdc2 	bl	800dc04 <puts>
	      if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8001080:	2104      	movs	r1, #4
 8001082:	4838      	ldr	r0, [pc, #224]	@ (8001164 <WIFI_init_connect+0x15c>)
 8001084:	f002 fa1e 	bl	80034c4 <WIFI_GetIP_Address>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d14e      	bne.n	800112c <WIFI_init_connect+0x124>
	      {
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
	               IP_Addr[0],
 800108e:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <WIFI_init_connect+0x15c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8001092:	4619      	mov	r1, r3
	               IP_Addr[1],
 8001094:	4b33      	ldr	r3, [pc, #204]	@ (8001164 <WIFI_init_connect+0x15c>)
 8001096:	785b      	ldrb	r3, [r3, #1]
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8001098:	461a      	mov	r2, r3
	               IP_Addr[2],
 800109a:	4b32      	ldr	r3, [pc, #200]	@ (8001164 <WIFI_init_connect+0x15c>)
 800109c:	789b      	ldrb	r3, [r3, #2]
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 800109e:	4618      	mov	r0, r3
	               IP_Addr[3]);
 80010a0:	4b30      	ldr	r3, [pc, #192]	@ (8001164 <WIFI_init_connect+0x15c>)
 80010a2:	78db      	ldrb	r3, [r3, #3]
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	4603      	mov	r3, r0
 80010a8:	482f      	ldr	r0, [pc, #188]	@ (8001168 <WIFI_init_connect+0x160>)
 80010aa:	f00c fd43 	bl	800db34 <iprintf>

	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
	               RemoteIP[0],
 80010ae:	4b2f      	ldr	r3, [pc, #188]	@ (800116c <WIFI_init_connect+0x164>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80010b2:	4619      	mov	r1, r3
	               RemoteIP[1],
 80010b4:	4b2d      	ldr	r3, [pc, #180]	@ (800116c <WIFI_init_connect+0x164>)
 80010b6:	785b      	ldrb	r3, [r3, #1]
	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80010b8:	4618      	mov	r0, r3
	               RemoteIP[2],
 80010ba:	4b2c      	ldr	r3, [pc, #176]	@ (800116c <WIFI_init_connect+0x164>)
 80010bc:	789b      	ldrb	r3, [r3, #2]
	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80010be:	461c      	mov	r4, r3
	               RemoteIP[3],
 80010c0:	4b2a      	ldr	r3, [pc, #168]	@ (800116c <WIFI_init_connect+0x164>)
 80010c2:	78db      	ldrb	r3, [r3, #3]
	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80010c4:	461a      	mov	r2, r3
 80010c6:	f641 7342 	movw	r3, #8002	@ 0x1f42
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	9200      	str	r2, [sp, #0]
 80010ce:	4623      	mov	r3, r4
 80010d0:	4602      	mov	r2, r0
 80010d2:	4827      	ldr	r0, [pc, #156]	@ (8001170 <WIFI_init_connect+0x168>)
 80010d4:	f00c fd2e 	bl	800db34 <iprintf>
								 RemotePORT);

	        while (Trials--)
 80010d8:	e014      	b.n	8001104 <WIFI_init_connect+0xfc>
	        {
	          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 80010da:	2300      	movs	r3, #0
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	f641 7342 	movw	r3, #8002	@ 0x1f42
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	4b21      	ldr	r3, [pc, #132]	@ (800116c <WIFI_init_connect+0x164>)
 80010e6:	4a23      	ldr	r2, [pc, #140]	@ (8001174 <WIFI_init_connect+0x16c>)
 80010e8:	2100      	movs	r1, #0
 80010ea:	2000      	movs	r0, #0
 80010ec:	f002 fa0e 	bl	800350c <WIFI_OpenClientConnection>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d106      	bne.n	8001104 <WIFI_init_connect+0xfc>
	          {
	            printf("> TCP Connection opened successfully.\n");
 80010f6:	4820      	ldr	r0, [pc, #128]	@ (8001178 <WIFI_init_connect+0x170>)
 80010f8:	f00c fd84 	bl	800dc04 <puts>
	            Socket = 0;
 80010fc:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <WIFI_init_connect+0x174>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
	            break;
 8001102:	e00a      	b.n	800111a <WIFI_init_connect+0x112>
	        while (Trials--)
 8001104:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <WIFI_init_connect+0x178>)
 8001106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110a:	b29a      	uxth	r2, r3
 800110c:	3a01      	subs	r2, #1
 800110e:	b292      	uxth	r2, r2
 8001110:	b211      	sxth	r1, r2
 8001112:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <WIFI_init_connect+0x178>)
 8001114:	8011      	strh	r1, [r2, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1df      	bne.n	80010da <WIFI_init_connect+0xd2>
	          }
	        }
	        if(Socket == -1)
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <WIFI_init_connect+0x174>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001122:	d10e      	bne.n	8001142 <WIFI_init_connect+0x13a>
	        {
	          printf("> ERROR : Cannot open Connection\n");
 8001124:	4817      	ldr	r0, [pc, #92]	@ (8001184 <WIFI_init_connect+0x17c>)
 8001126:	f00c fd6d 	bl	800dc04 <puts>
	  {
	    printf("> ERROR : WIFI Module cannot be initialized.\n");
	    //BSP_LED_On(LED2);
	  }

}
 800112a:	e00a      	b.n	8001142 <WIFI_init_connect+0x13a>
	        printf("> ERROR : es-wifi module CANNOT get IP address\n");
 800112c:	4816      	ldr	r0, [pc, #88]	@ (8001188 <WIFI_init_connect+0x180>)
 800112e:	f00c fd69 	bl	800dc04 <puts>
}
 8001132:	e006      	b.n	8001142 <WIFI_init_connect+0x13a>
	      printf("> ERROR : es-wifi module NOT connected\n");
 8001134:	4815      	ldr	r0, [pc, #84]	@ (800118c <WIFI_init_connect+0x184>)
 8001136:	f00c fd65 	bl	800dc04 <puts>
}
 800113a:	e002      	b.n	8001142 <WIFI_init_connect+0x13a>
	    printf("> ERROR : WIFI Module cannot be initialized.\n");
 800113c:	4814      	ldr	r0, [pc, #80]	@ (8001190 <WIFI_init_connect+0x188>)
 800113e:	f00c fd61 	bl	800dc04 <puts>
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bdb0      	pop	{r4, r5, r7, pc}
 8001148:	0801160c 	.word	0x0801160c
 800114c:	20000d18 	.word	0x20000d18
 8001150:	08011628 	.word	0x08011628
 8001154:	0801165c 	.word	0x0801165c
 8001158:	08011680 	.word	0x08011680
 800115c:	0801168c 	.word	0x0801168c
 8001160:	08011690 	.word	0x08011690
 8001164:	20000d20 	.word	0x20000d20
 8001168:	080116ac 	.word	0x080116ac
 800116c:	20000000 	.word	0x20000000
 8001170:	080116dc 	.word	0x080116dc
 8001174:	08011710 	.word	0x08011710
 8001178:	0801171c 	.word	0x0801171c
 800117c:	20000004 	.word	0x20000004
 8001180:	20000008 	.word	0x20000008
 8001184:	08011744 	.word	0x08011744
 8001188:	08011768 	.word	0x08011768
 800118c:	08011798 	.word	0x08011798
 8001190:	080117c0 	.word	0x080117c0

08001194 <my_inital>:

void my_inital(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
	for(int i=0; i<moving_num; i=i+1)
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	e007      	b.n	80011b0 <my_inital+0x1c>
		acc_x[i] = 0;
 80011a0:	4a0c      	ldr	r2, [pc, #48]	@ (80011d4 <my_inital+0x40>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2100      	movs	r1, #0
 80011a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<moving_num; i=i+1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3301      	adds	r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	ddf4      	ble.n	80011a0 <my_inital+0xc>
	count = 0;
 80011b6:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <my_inital+0x44>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
	ma_x[0] = 0;
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <my_inital+0x48>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
	ma_x[1] = 0;
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <my_inital+0x48>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	805a      	strh	r2, [r3, #2]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	20000d2c 	.word	0x20000d2c
 80011d8:	20000d36 	.word	0x20000d36
 80011dc:	20000d38 	.word	0x20000d38

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e4:	f002 fcce 	bl	8003b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e8:	f000 f868 	bl	80012bc <SystemClock_Config>
  //MX_GPIO_Init();
  //MX_DFSDM1_Init();
  //MX_I2C2_Init();
  //MX_QUADSPI_Init();
  //MX_SPI3_Init();
  MX_USART1_UART_Init();
 80011ec:	f000 f900 	bl	80013f0 <MX_USART1_UART_Init>
  //MX_USART3_UART_Init();
  //MX_USB_OTG_FS_PCD_Init();
  MX_TIM6_Init();
 80011f0:	f000 f8c6 	bl	8001380 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  BSP_ACCELERO_Init();
 80011f4:	f002 fb5a 	bl	80038ac <BSP_ACCELERO_Init>

  WIFI_init_connect();
 80011f8:	f7ff ff06 	bl	8001008 <WIFI_init_connect>
  printf("wifi init finish\n");
 80011fc:	481e      	ldr	r0, [pc, #120]	@ (8001278 <main+0x98>)
 80011fe:	f00c fd01 	bl	800dc04 <puts>

  my_inital();
 8001202:	f7ff ffc7 	bl	8001194 <my_inital>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001206:	f008 fae5 	bl	80097d4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of timerEvt */
  timerEvtHandle = osSemaphoreNew(1, 0, &timerEvt_attributes);
 800120a:	4a1c      	ldr	r2, [pc, #112]	@ (800127c <main+0x9c>)
 800120c:	2100      	movs	r1, #0
 800120e:	2001      	movs	r0, #1
 8001210:	f008 fbbc 	bl	800998c <osSemaphoreNew>
 8001214:	4603      	mov	r3, r0
 8001216:	4a1a      	ldr	r2, [pc, #104]	@ (8001280 <main+0xa0>)
 8001218:	6013      	str	r3, [r2, #0]

  /* creation of convStart */
  convStartHandle = osSemaphoreNew(1, 0, &convStart_attributes);
 800121a:	4a1a      	ldr	r2, [pc, #104]	@ (8001284 <main+0xa4>)
 800121c:	2100      	movs	r1, #0
 800121e:	2001      	movs	r0, #1
 8001220:	f008 fbb4 	bl	800998c <osSemaphoreNew>
 8001224:	4603      	mov	r3, r0
 8001226:	4a18      	ldr	r2, [pc, #96]	@ (8001288 <main+0xa8>)
 8001228:	6013      	str	r3, [r2, #0]

  /* creation of commStart */
  commStartHandle = osSemaphoreNew(1, 0, &commStart_attributes);
 800122a:	4a18      	ldr	r2, [pc, #96]	@ (800128c <main+0xac>)
 800122c:	2100      	movs	r1, #0
 800122e:	2001      	movs	r0, #1
 8001230:	f008 fbac 	bl	800998c <osSemaphoreNew>
 8001234:	4603      	mov	r3, r0
 8001236:	4a16      	ldr	r2, [pc, #88]	@ (8001290 <main+0xb0>)
 8001238:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  HAL_TIM_Base_Start_IT(&htim6);
 800123a:	4816      	ldr	r0, [pc, #88]	@ (8001294 <main+0xb4>)
 800123c:	f007 f9fe 	bl	800863c <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001240:	4a15      	ldr	r2, [pc, #84]	@ (8001298 <main+0xb8>)
 8001242:	2100      	movs	r1, #0
 8001244:	4815      	ldr	r0, [pc, #84]	@ (800129c <main+0xbc>)
 8001246:	f008 fb0f 	bl	8009868 <osThreadNew>
 800124a:	4603      	mov	r3, r0
 800124c:	4a14      	ldr	r2, [pc, #80]	@ (80012a0 <main+0xc0>)
 800124e:	6013      	str	r3, [r2, #0]

  /* creation of acqTask */
  acqTaskHandle = osThreadNew(StartacqTask, NULL, &acqTask_attributes);
 8001250:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <main+0xc4>)
 8001252:	2100      	movs	r1, #0
 8001254:	4814      	ldr	r0, [pc, #80]	@ (80012a8 <main+0xc8>)
 8001256:	f008 fb07 	bl	8009868 <osThreadNew>
 800125a:	4603      	mov	r3, r0
 800125c:	4a13      	ldr	r2, [pc, #76]	@ (80012ac <main+0xcc>)
 800125e:	6013      	str	r3, [r2, #0]

  /* creation of commTask */
  commTaskHandle = osThreadNew(StartcommTask, NULL, &commTask_attributes);
 8001260:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <main+0xd0>)
 8001262:	2100      	movs	r1, #0
 8001264:	4813      	ldr	r0, [pc, #76]	@ (80012b4 <main+0xd4>)
 8001266:	f008 faff 	bl	8009868 <osThreadNew>
 800126a:	4603      	mov	r3, r0
 800126c:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <main+0xd8>)
 800126e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001270:	f008 fad4 	bl	800981c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <main+0x94>
 8001278:	080117f0 	.word	0x080117f0
 800127c:	08011dd4 	.word	0x08011dd4
 8001280:	20000a28 	.word	0x20000a28
 8001284:	08011de4 	.word	0x08011de4
 8001288:	20000a7c 	.word	0x20000a7c
 800128c:	08011df4 	.word	0x08011df4
 8001290:	20000ad0 	.word	0x20000ad0
 8001294:	20000234 	.word	0x20000234
 8001298:	08011d68 	.word	0x08011d68
 800129c:	080014b1 	.word	0x080014b1
 80012a0:	20000308 	.word	0x20000308
 80012a4:	08011d8c 	.word	0x08011d8c
 80012a8:	08001539 	.word	0x08001539
 80012ac:	20000568 	.word	0x20000568
 80012b0:	08011db0 	.word	0x08011db0
 80012b4:	080015bd 	.word	0x080015bd
 80012b8:	200007c8 	.word	0x200007c8

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b096      	sub	sp, #88	@ 0x58
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2244      	movs	r2, #68	@ 0x44
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00c fdaa 	bl	800de24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	463b      	mov	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012e2:	f003 ff43 	bl	800516c <HAL_PWREx_ControlVoltageScaling>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012ec:	f000 f9ca 	bl	8001684 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012f0:	f003 ff1e 	bl	8005130 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012f4:	4b21      	ldr	r3, [pc, #132]	@ (800137c <SystemClock_Config+0xc0>)
 80012f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012fa:	4a20      	ldr	r2, [pc, #128]	@ (800137c <SystemClock_Config+0xc0>)
 80012fc:	f023 0318 	bic.w	r3, r3, #24
 8001300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001304:	2314      	movs	r3, #20
 8001306:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001308:	2301      	movs	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800130c:	2301      	movs	r3, #1
 800130e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001314:	2360      	movs	r3, #96	@ 0x60
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001318:	2302      	movs	r3, #2
 800131a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800131c:	2301      	movs	r3, #1
 800131e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001320:	2301      	movs	r3, #1
 8001322:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001324:	2328      	movs	r3, #40	@ 0x28
 8001326:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001328:	2307      	movs	r3, #7
 800132a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800132c:	2302      	movs	r3, #2
 800132e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001330:	2302      	movs	r3, #2
 8001332:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4618      	mov	r0, r3
 800133a:	f003 ff6d 	bl	8005218 <HAL_RCC_OscConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001344:	f000 f99e 	bl	8001684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001348:	230f      	movs	r3, #15
 800134a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134c:	2303      	movs	r3, #3
 800134e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	2104      	movs	r1, #4
 8001360:	4618      	mov	r0, r3
 8001362:	f004 fb35 	bl	80059d0 <HAL_RCC_ClockConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800136c:	f000 f98a 	bl	8001684 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001370:	f005 f83c 	bl	80063ec <HAL_RCCEx_EnableMSIPLLMode>
}
 8001374:	bf00      	nop
 8001376:	3758      	adds	r7, #88	@ 0x58
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000

08001380 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001390:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <MX_TIM6_Init+0x68>)
 8001392:	4a16      	ldr	r2, [pc, #88]	@ (80013ec <MX_TIM6_Init+0x6c>)
 8001394:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4000-1;
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <MX_TIM6_Init+0x68>)
 8001398:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800139c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <MX_TIM6_Init+0x68>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80013a4:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <MX_TIM6_Init+0x68>)
 80013a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <MX_TIM6_Init+0x68>)
 80013ae:	2280      	movs	r2, #128	@ 0x80
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013b2:	480d      	ldr	r0, [pc, #52]	@ (80013e8 <MX_TIM6_Init+0x68>)
 80013b4:	f007 f8eb 	bl	800858e <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80013be:	f000 f961 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	@ (80013e8 <MX_TIM6_Init+0x68>)
 80013d0:	f007 fb7a 	bl	8008ac8 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80013da:	f000 f953 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000234 	.word	0x20000234
 80013ec:	40001000 	.word	0x40001000

080013f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f4:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <MX_USART1_UART_Init+0x58>)
 80013f6:	4a15      	ldr	r2, [pc, #84]	@ (800144c <MX_USART1_UART_Init+0x5c>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013fa:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <MX_USART1_UART_Init+0x58>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <MX_USART1_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <MX_USART1_UART_Init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <MX_USART1_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_USART1_UART_Init+0x58>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <MX_USART1_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_USART1_UART_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <MX_USART1_UART_Init+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <MX_USART1_UART_Init+0x58>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	@ (8001448 <MX_USART1_UART_Init+0x58>)
 8001434:	f007 fbee 	bl	8008c14 <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800143e:	f000 f921 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000280 	.word	0x20000280
 800144c:	40013800 	.word	0x40013800

08001450 <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d102      	bne.n	8001466 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8001460:	f001 ffb2 	bl	80033c8 <SPI_WIFI_ISR>
      break;
 8001464:	e000      	b.n	8001468 <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8001466:	bf00      	nop
    }
  }
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <SPI3_IRQHandler+0x10>)
 8001476:	f006 fa13 	bl	80078a0 <HAL_SPI_IRQHandler>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000d44 	.word	0x20000d44

08001484 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a06      	ldr	r2, [pc, #24]	@ (80014a8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d104      	bne.n	800149e <HAL_TIM_PeriodElapsedCallback+0x1a>
		osSemaphoreRelease(timerEvtHandle);
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f008 fb53 	bl	8009b44 <osSemaphoreRelease>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000234 	.word	0x20000234
 80014ac:	20000a28 	.word	0x20000a28

080014b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(convStartHandle, osWaitForever);
 80014b8:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <StartDefaultTask+0x70>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	4618      	mov	r0, r3
 80014c2:	f008 faed 	bl	8009aa0 <osSemaphoreAcquire>
	int16_t total = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<moving_num; i=i+1)
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	e00b      	b.n	80014e8 <StartDefaultTask+0x38>
		total = total + acc_x[i];
 80014d0:	4a14      	ldr	r2, [pc, #80]	@ (8001524 <StartDefaultTask+0x74>)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80014d8:	b29a      	uxth	r2, r3
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	4413      	add	r3, r2
 80014de:	b29b      	uxth	r3, r3
 80014e0:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<moving_num; i=i+1)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3301      	adds	r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	ddf0      	ble.n	80014d0 <StartDefaultTask+0x20>
    ma_x[1] = total/moving_num;
 80014ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <StartDefaultTask+0x78>)
 80014f4:	fb82 1203 	smull	r1, r2, r2, r3
 80014f8:	1052      	asrs	r2, r2, #1
 80014fa:	17db      	asrs	r3, r3, #31
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	b21a      	sxth	r2, r3
 8001500:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <StartDefaultTask+0x7c>)
 8001502:	805a      	strh	r2, [r3, #2]
    printf("after_ma_x: %d\n",ma_x[1]);
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <StartDefaultTask+0x7c>)
 8001506:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800150a:	4619      	mov	r1, r3
 800150c:	4808      	ldr	r0, [pc, #32]	@ (8001530 <StartDefaultTask+0x80>)
 800150e:	f00c fb11 	bl	800db34 <iprintf>
    osSemaphoreRelease(commStartHandle);
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <StartDefaultTask+0x84>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f008 fb14 	bl	8009b44 <osSemaphoreRelease>
  {
 800151c:	e7cc      	b.n	80014b8 <StartDefaultTask+0x8>
 800151e:	bf00      	nop
 8001520:	20000a7c 	.word	0x20000a7c
 8001524:	20000d2c 	.word	0x20000d2c
 8001528:	66666667 	.word	0x66666667
 800152c:	20000d38 	.word	0x20000d38
 8001530:	08011804 	.word	0x08011804
 8001534:	20000ad0 	.word	0x20000ad0

08001538 <StartacqTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartacqTask */
void StartacqTask(void *argument)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartacqTask */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(timerEvtHandle, osWaitForever);
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <StartacqTask+0x6c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	4618      	mov	r0, r3
 800154a:	f008 faa9 	bl	8009aa0 <osSemaphoreAcquire>
	int16_t pDataXYZ[3];
	BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	4618      	mov	r0, r3
 8001554:	f002 f9e8 	bl	8003928 <BSP_ACCELERO_AccGetXYZ>
	acc_x[count] = pDataXYZ[0];
 8001558:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <StartacqTask+0x70>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <StartacqTask+0x74>)
 8001564:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ma_x[0] = pDataXYZ[0];
 8001568:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800156c:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <StartacqTask+0x78>)
 800156e:	801a      	strh	r2, [r3, #0]
	printf("acc_x: %d\n",pDataXYZ[0]);
 8001570:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001574:	4619      	mov	r1, r3
 8001576:	480f      	ldr	r0, [pc, #60]	@ (80015b4 <StartacqTask+0x7c>)
 8001578:	f00c fadc 	bl	800db34 <iprintf>
	count = count+1;
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <StartacqTask+0x70>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <StartacqTask+0x70>)
 8001586:	701a      	strb	r2, [r3, #0]
	if(count >= moving_num) count = 0;
 8001588:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <StartacqTask+0x70>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b04      	cmp	r3, #4
 800158e:	d902      	bls.n	8001596 <StartacqTask+0x5e>
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <StartacqTask+0x70>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
	osSemaphoreRelease(convStartHandle);
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <StartacqTask+0x80>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f008 fad2 	bl	8009b44 <osSemaphoreRelease>
  {
 80015a0:	e7ce      	b.n	8001540 <StartacqTask+0x8>
 80015a2:	bf00      	nop
 80015a4:	20000a28 	.word	0x20000a28
 80015a8:	20000d36 	.word	0x20000d36
 80015ac:	20000d2c 	.word	0x20000d2c
 80015b0:	20000d38 	.word	0x20000d38
 80015b4:	08011814 	.word	0x08011814
 80015b8:	20000a7c 	.word	0x20000a7c

080015bc <StartcommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartcommTask */
void StartcommTask(void *argument)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartcommTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(commStartHandle, osWaitForever);
 80015c4:	4b26      	ldr	r3, [pc, #152]	@ (8001660 <StartcommTask+0xa4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	4618      	mov	r0, r3
 80015ce:	f008 fa67 	bl	8009aa0 <osSemaphoreAcquire>
	  if(Socket != -1)
 80015d2:	4b24      	ldr	r3, [pc, #144]	@ (8001664 <StartcommTask+0xa8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015da:	d0f3      	beq.n	80015c4 <StartcommTask+0x8>
	      {
	        ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 80015dc:	4b21      	ldr	r3, [pc, #132]	@ (8001664 <StartcommTask+0xa8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <StartcommTask+0xac>)
 80015ea:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80015ee:	491f      	ldr	r1, [pc, #124]	@ (800166c <StartcommTask+0xb0>)
 80015f0:	f001 ffea 	bl	80035c8 <WIFI_ReceiveData>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <StartcommTask+0xb4>)
 80015fa:	601a      	str	r2, [r3, #0]
	        if(ret == WIFI_STATUS_OK)
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <StartcommTask+0xb4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d126      	bne.n	8001652 <StartcommTask+0x96>
	        {
	          if(Datalen > 0)
 8001604:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <StartcommTask+0xac>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0db      	beq.n	80015c4 <StartcommTask+0x8>
	          {
	            RxData[Datalen]=0;
 800160c:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <StartcommTask+0xac>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b16      	ldr	r3, [pc, #88]	@ (800166c <StartcommTask+0xb0>)
 8001614:	2100      	movs	r1, #0
 8001616:	5499      	strb	r1, [r3, r2]
	            printf("Received: %s\n",RxData);
 8001618:	4914      	ldr	r1, [pc, #80]	@ (800166c <StartcommTask+0xb0>)
 800161a:	4816      	ldr	r0, [pc, #88]	@ (8001674 <StartcommTask+0xb8>)
 800161c:	f00c fa8a 	bl	800db34 <iprintf>

	            uint8_t* acc_data = (uint8_t*) &ma_x[0];
 8001620:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <StartcommTask+0xbc>)
 8001622:	60fb      	str	r3, [r7, #12]

	            ret = WIFI_SendData(Socket, acc_data, 4, &Datalen, WIFI_WRITE_TIMEOUT);
 8001624:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <StartcommTask+0xa8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <StartcommTask+0xac>)
 8001632:	2204      	movs	r2, #4
 8001634:	68f9      	ldr	r1, [r7, #12]
 8001636:	f001 ffa5 	bl	8003584 <WIFI_SendData>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <StartcommTask+0xb4>)
 8001640:	601a      	str	r2, [r3, #0]
	            if (ret != WIFI_STATUS_OK)
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <StartcommTask+0xb4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0bc      	beq.n	80015c4 <StartcommTask+0x8>
	            {
	              printf("> ERROR : Failed to Send Data, connection closed\n");
 800164a:	480c      	ldr	r0, [pc, #48]	@ (800167c <StartcommTask+0xc0>)
 800164c:	f00c fada 	bl	800dc04 <puts>
	              break;
 8001650:	e002      	b.n	8001658 <StartcommTask+0x9c>
	            }
	          }
	        }
	        else
	        {
	          printf("> ERROR : Failed to Receive Data, connection closed\n");
 8001652:	480b      	ldr	r0, [pc, #44]	@ (8001680 <StartcommTask+0xc4>)
 8001654:	f00c fad6 	bl	800dc04 <puts>
	          break;
	        }
	      }
  }
  /* USER CODE END StartcommTask */
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000ad0 	.word	0x20000ad0
 8001664:	20000004 	.word	0x20000004
 8001668:	20000d24 	.word	0x20000d24
 800166c:	20000b24 	.word	0x20000b24
 8001670:	20000d28 	.word	0x20000d28
 8001674:	08011820 	.word	0x08011820
 8001678:	20000d38 	.word	0x20000d38
 800167c:	08011830 	.word	0x08011830
 8001680:	08011864 	.word	0x08011864

08001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <Error_Handler+0x8>

08001690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_MspInit+0x4c>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800169a:	4a10      	ldr	r2, [pc, #64]	@ (80016dc <HAL_MspInit+0x4c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <HAL_MspInit+0x4c>)
 80016a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <HAL_MspInit+0x4c>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <HAL_MspInit+0x4c>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_MspInit+0x4c>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	210f      	movs	r1, #15
 80016ca:	f06f 0001 	mvn.w	r0, #1
 80016ce:	f002 fbcc 	bl	8003e6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b0ac      	sub	sp, #176	@ 0xb0
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2288      	movs	r2, #136	@ 0x88
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f00c fb8f 	bl	800de24 <memset>
  if(hi2c->Instance==I2C2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a21      	ldr	r2, [pc, #132]	@ (8001790 <HAL_I2C_MspInit+0xb0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d13b      	bne.n	8001788 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001710:	2380      	movs	r3, #128	@ 0x80
 8001712:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001714:	2300      	movs	r3, #0
 8001716:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4618      	mov	r0, r3
 800171e:	f004 fb7b 	bl	8005e18 <HAL_RCCEx_PeriphCLKConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001728:	f7ff ffac 	bl	8001684 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_I2C_MspInit+0xb4>)
 800172e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001730:	4a18      	ldr	r2, [pc, #96]	@ (8001794 <HAL_I2C_MspInit+0xb4>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <HAL_I2C_MspInit+0xb4>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001744:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001748:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174c:	2312      	movs	r3, #18
 800174e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001752:	2301      	movs	r3, #1
 8001754:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800175e:	2304      	movs	r3, #4
 8001760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001768:	4619      	mov	r1, r3
 800176a:	480b      	ldr	r0, [pc, #44]	@ (8001798 <HAL_I2C_MspInit+0xb8>)
 800176c:	f002 fbf4 	bl	8003f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_I2C_MspInit+0xb4>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001774:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <HAL_I2C_MspInit+0xb4>)
 8001776:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800177a:	6593      	str	r3, [r2, #88]	@ 0x58
 800177c:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_I2C_MspInit+0xb4>)
 800177e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001780:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001788:	bf00      	nop
 800178a:	37b0      	adds	r7, #176	@ 0xb0
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40005800 	.word	0x40005800
 8001794:	40021000 	.word	0x40021000
 8001798:	48000400 	.word	0x48000400

0800179c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <HAL_I2C_MspDeInit+0x3c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10f      	bne.n	80017ce <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80017ae:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_I2C_MspDeInit+0x40>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b2:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <HAL_I2C_MspDeInit+0x40>)
 80017b4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80017b8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80017ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017be:	4808      	ldr	r0, [pc, #32]	@ (80017e0 <HAL_I2C_MspDeInit+0x44>)
 80017c0:	f002 fd74 	bl	80042ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80017c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017c8:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <HAL_I2C_MspDeInit+0x44>)
 80017ca:	f002 fd6f 	bl	80042ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40005800 	.word	0x40005800
 80017dc:	40021000 	.word	0x40021000
 80017e0:	48000400 	.word	0x48000400

080017e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <HAL_SPI_MspInit+0x7c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d128      	bne.n	8001858 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001806:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <HAL_SPI_MspInit+0x80>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	4a16      	ldr	r2, [pc, #88]	@ (8001864 <HAL_SPI_MspInit+0x80>)
 800180c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001810:	6593      	str	r3, [r2, #88]	@ 0x58
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <HAL_SPI_MspInit+0x80>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <HAL_SPI_MspInit+0x80>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	4a10      	ldr	r2, [pc, #64]	@ (8001864 <HAL_SPI_MspInit+0x80>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <HAL_SPI_MspInit+0x80>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001836:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001848:	2306      	movs	r3, #6
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4805      	ldr	r0, [pc, #20]	@ (8001868 <HAL_SPI_MspInit+0x84>)
 8001854:	f002 fb80 	bl	8003f58 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	@ 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40003c00 	.word	0x40003c00
 8001864:	40021000 	.word	0x40021000
 8001868:	48000800 	.word	0x48000800

0800186c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a08      	ldr	r2, [pc, #32]	@ (800189c <HAL_SPI_MspDeInit+0x30>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10a      	bne.n	8001894 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <HAL_SPI_MspDeInit+0x34>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001882:	4a07      	ldr	r2, [pc, #28]	@ (80018a0 <HAL_SPI_MspDeInit+0x34>)
 8001884:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001888:	6593      	str	r3, [r2, #88]	@ 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800188a:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800188e:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <HAL_SPI_MspDeInit+0x38>)
 8001890:	f002 fd0c 	bl	80042ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40003c00 	.word	0x40003c00
 80018a0:	40021000 	.word	0x40021000
 80018a4:	48000800 	.word	0x48000800

080018a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <HAL_TIM_Base_MspInit+0x44>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d113      	bne.n	80018e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <HAL_TIM_Base_MspInit+0x48>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018be:	4a0c      	ldr	r2, [pc, #48]	@ (80018f0 <HAL_TIM_Base_MspInit+0x48>)
 80018c0:	f043 0310 	orr.w	r3, r3, #16
 80018c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_TIM_Base_MspInit+0x48>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2105      	movs	r1, #5
 80018d6:	2036      	movs	r0, #54	@ 0x36
 80018d8:	f002 fac7 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018dc:	2036      	movs	r0, #54	@ 0x36
 80018de:	f002 fae0 	bl	8003ea2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40001000 	.word	0x40001000
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0ae      	sub	sp, #184	@ 0xb8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	2288      	movs	r2, #136	@ 0x88
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f00c fa85 	bl	800de24 <memset>
  if(huart->Instance==USART1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a42      	ldr	r2, [pc, #264]	@ (8001a28 <HAL_UART_MspInit+0x134>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d13b      	bne.n	800199c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001924:	2301      	movs	r3, #1
 8001926:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001928:	2300      	movs	r3, #0
 800192a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	4618      	mov	r0, r3
 8001932:	f004 fa71 	bl	8005e18 <HAL_RCCEx_PeriphCLKConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800193c:	f7ff fea2 	bl	8001684 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001940:	4b3a      	ldr	r3, [pc, #232]	@ (8001a2c <HAL_UART_MspInit+0x138>)
 8001942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001944:	4a39      	ldr	r2, [pc, #228]	@ (8001a2c <HAL_UART_MspInit+0x138>)
 8001946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194a:	6613      	str	r3, [r2, #96]	@ 0x60
 800194c:	4b37      	ldr	r3, [pc, #220]	@ (8001a2c <HAL_UART_MspInit+0x138>)
 800194e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001958:	4b34      	ldr	r3, [pc, #208]	@ (8001a2c <HAL_UART_MspInit+0x138>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195c:	4a33      	ldr	r2, [pc, #204]	@ (8001a2c <HAL_UART_MspInit+0x138>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001964:	4b31      	ldr	r3, [pc, #196]	@ (8001a2c <HAL_UART_MspInit+0x138>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001970:	23c0      	movs	r3, #192	@ 0xc0
 8001972:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001988:	2307      	movs	r3, #7
 800198a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001992:	4619      	mov	r1, r3
 8001994:	4826      	ldr	r0, [pc, #152]	@ (8001a30 <HAL_UART_MspInit+0x13c>)
 8001996:	f002 fadf 	bl	8003f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800199a:	e040      	b.n	8001a1e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a24      	ldr	r2, [pc, #144]	@ (8001a34 <HAL_UART_MspInit+0x140>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d13b      	bne.n	8001a1e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019a6:	2304      	movs	r3, #4
 80019a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 fa30 	bl	8005e18 <HAL_RCCEx_PeriphCLKConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80019be:	f7ff fe61 	bl	8001684 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019c2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <HAL_UART_MspInit+0x138>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c6:	4a19      	ldr	r2, [pc, #100]	@ (8001a2c <HAL_UART_MspInit+0x138>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ce:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <HAL_UART_MspInit+0x138>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019da:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <HAL_UART_MspInit+0x138>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	4a13      	ldr	r2, [pc, #76]	@ (8001a2c <HAL_UART_MspInit+0x138>)
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_UART_MspInit+0x138>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80019f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a0c:	2307      	movs	r3, #7
 8001a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a12:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a16:	4619      	mov	r1, r3
 8001a18:	4807      	ldr	r0, [pc, #28]	@ (8001a38 <HAL_UART_MspInit+0x144>)
 8001a1a:	f002 fa9d 	bl	8003f58 <HAL_GPIO_Init>
}
 8001a1e:	bf00      	nop
 8001a20:	37b8      	adds	r7, #184	@ 0xb8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48000400 	.word	0x48000400
 8001a34:	40004800 	.word	0x40004800
 8001a38:	48000c00 	.word	0x48000c00

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <NMI_Handler+0x4>

08001a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <MemManage_Handler+0x4>

08001a54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a76:	f002 f8d9 	bl	8003c2c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a7a:	f009 ffaf 	bl	800b9dc <xTaskGetSchedulerState>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d001      	beq.n	8001a88 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a84:	f00a fea8 	bl	800c7d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001a90:	2020      	movs	r0, #32
 8001a92:	f002 fd2f 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001a96:	2040      	movs	r0, #64	@ 0x40
 8001a98:	f002 fd2c 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001a9c:	2080      	movs	r0, #128	@ 0x80
 8001a9e:	f002 fd29 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001aa2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001aa6:	f002 fd25 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}

08001aae <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001ab2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ab6:	f002 fd1d 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001aba:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001abe:	f002 fd19 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001ac2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ac6:	f002 fd15 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001aca:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001ace:	f002 fd11 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001ad2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001ad6:	f002 fd0d 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <TIM6_DAC_IRQHandler+0x10>)
 8001ae6:	f006 fe19 	bl	800871c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000234 	.word	0x20000234

08001af4 <EXTI1_IRQHandler>:
//void PendSV_Handler(void)
//{
//}

void EXTI1_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001af8:	2002      	movs	r0, #2
 8001afa:	f002 fcfb 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  return 1;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_kill>:

int _kill(int pid, int sig)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b1c:	f00c fa6c 	bl	800dff8 <__errno>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2216      	movs	r2, #22
 8001b24:	601a      	str	r2, [r3, #0]
  return -1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_exit>:

void _exit (int status)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffe7 	bl	8001b12 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <_exit+0x12>

08001b48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e00a      	b.n	8001b70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b5a:	f3af 8000 	nop.w
 8001b5e:	4601      	mov	r1, r0
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	60ba      	str	r2, [r7, #8]
 8001b66:	b2ca      	uxtb	r2, r1
 8001b68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbf0      	blt.n	8001b5a <_read+0x12>
  }

  return len;
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e009      	b.n	8001ba8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	60ba      	str	r2, [r7, #8]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fa21 	bl	8000fe4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dbf1      	blt.n	8001b94 <_write+0x12>
  }
  return len;
 8001bb0:	687b      	ldr	r3, [r7, #4]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_close>:

int _close(int file)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001be2:	605a      	str	r2, [r3, #4]
  return 0;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <_isatty>:

int _isatty(int file)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c2c:	4a14      	ldr	r2, [pc, #80]	@ (8001c80 <_sbrk+0x5c>)
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <_sbrk+0x60>)
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c40:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <_sbrk+0x64>)
 8001c42:	4a12      	ldr	r2, [pc, #72]	@ (8001c8c <_sbrk+0x68>)
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d207      	bcs.n	8001c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c54:	f00c f9d0 	bl	800dff8 <__errno>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	e009      	b.n	8001c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c64:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <_sbrk+0x64>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a05      	ldr	r2, [pc, #20]	@ (8001c88 <_sbrk+0x64>)
 8001c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20018000 	.word	0x20018000
 8001c84:	00000400 	.word	0x00000400
 8001c88:	20000d3c 	.word	0x20000d3c
 8001c8c:	20003168 	.word	0x20003168

08001c90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <SystemInit+0x20>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9a:	4a05      	ldr	r2, [pc, #20]	@ (8001cb0 <SystemInit+0x20>)
 8001c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb8:	f7ff ffea 	bl	8001c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cbc:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cbe:	490d      	ldr	r1, [pc, #52]	@ (8001cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf8 <LoopForever+0xe>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001d00 <LoopForever+0x16>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f00c f98f 	bl	800e004 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ce6:	f7ff fa7b 	bl	80011e0 <main>

08001cea <LoopForever>:

LoopForever:
    b LoopForever
 8001cea:	e7fe      	b.n	8001cea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001cf8:	080122e4 	.word	0x080122e4
  ldr r2, =_sbss
 8001cfc:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001d00:	20003168 	.word	0x20003168

08001d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC1_2_IRQHandler>

08001d06 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d14:	d906      	bls.n	8001d24 <Hex2Num+0x1e>
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b39      	cmp	r3, #57	@ 0x39
 8001d1a:	d803      	bhi.n	8001d24 <Hex2Num+0x1e>
        return a - '0';
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	3b30      	subs	r3, #48	@ 0x30
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	e014      	b.n	8001d4e <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	2b60      	cmp	r3, #96	@ 0x60
 8001d28:	d906      	bls.n	8001d38 <Hex2Num+0x32>
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	2b66      	cmp	r3, #102	@ 0x66
 8001d2e:	d803      	bhi.n	8001d38 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	3b57      	subs	r3, #87	@ 0x57
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	e00a      	b.n	8001d4e <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	2b40      	cmp	r3, #64	@ 0x40
 8001d3c:	d906      	bls.n	8001d4c <Hex2Num+0x46>
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	2b46      	cmp	r3, #70	@ 0x46
 8001d42:	d803      	bhi.n	8001d4c <Hex2Num+0x46>
        return (a - 'A') + 10;
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	3b37      	subs	r3, #55	@ 0x37
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	e000      	b.n	8001d4e <Hex2Num+0x48>
    }

    return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001d6c:	e012      	b.n	8001d94 <ParseHexNumber+0x3a>
        sum <<= 4;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ffc4 	bl	8001d06 <Hex2Num>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	4413      	add	r3, r2
 8001d86:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	607b      	str	r3, [r7, #4]
        done_count++;
 8001d8e:	7bbb      	ldrb	r3, [r7, #14]
 8001d90:	3301      	adds	r3, #1
 8001d92:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d9a:	d903      	bls.n	8001da4 <ParseHexNumber+0x4a>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b39      	cmp	r3, #57	@ 0x39
 8001da2:	d90f      	bls.n	8001dc4 <ParseHexNumber+0x6a>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b60      	cmp	r3, #96	@ 0x60
 8001daa:	d903      	bls.n	8001db4 <ParseHexNumber+0x5a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b66      	cmp	r3, #102	@ 0x66
 8001db2:	d907      	bls.n	8001dc4 <ParseHexNumber+0x6a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b40      	cmp	r3, #64	@ 0x40
 8001dba:	d906      	bls.n	8001dca <ParseHexNumber+0x70>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b46      	cmp	r3, #70	@ 0x46
 8001dc2:	d802      	bhi.n	8001dca <ParseHexNumber+0x70>
 8001dc4:	7bbb      	ldrb	r3, [r7, #14]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d9d1      	bls.n	8001d6e <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <ParseHexNumber+0x7c>
        *cnt = done_count;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	7bba      	ldrb	r2, [r7, #14]
 8001dd4:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b2d      	cmp	r3, #45	@ 0x2d
 8001dfc:	d119      	bne.n	8001e32 <ParseNumber+0x52>
        minus = 1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3301      	adds	r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
        done_count++;
 8001e08:	7bbb      	ldrb	r3, [r7, #14]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001e0e:	e010      	b.n	8001e32 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	3b30      	subs	r3, #48	@ 0x30
 8001e22:	4413      	add	r3, r2
 8001e24:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	607b      	str	r3, [r7, #4]
        done_count++;
 8001e2c:	7bbb      	ldrb	r3, [r7, #14]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b2f      	cmp	r3, #47	@ 0x2f
 8001e38:	d903      	bls.n	8001e42 <ParseNumber+0x62>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b39      	cmp	r3, #57	@ 0x39
 8001e40:	d9e6      	bls.n	8001e10 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <ParseNumber+0x6e>
        *cnt = done_count;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	7bba      	ldrb	r2, [r7, #14]
 8001e4c:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <ParseNumber+0x7a>
        return 0 - sum;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	425b      	negs	r3, r3
 8001e58:	e000      	b.n	8001e5c <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8001e5a:	68bb      	ldr	r3, [r7, #8]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d027      	beq.n	8001ece <ParseMAC+0x66>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d024      	beq.n	8001ece <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001e84:	e018      	b.n	8001eb8 <ParseMAC+0x50>
    uint8_t done_count = 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001e90:	d00d      	beq.n	8001eae <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	75fa      	strb	r2, [r7, #23]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	189c      	adds	r4, r3, r2
 8001e9e:	f107 0316 	add.w	r3, r7, #22
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff ff58 	bl	8001d5a <ParseHexNumber>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 8001eae:	7dbb      	ldrb	r3, [r7, #22]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d906      	bls.n	8001ece <ParseMAC+0x66>
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d803      	bhi.n	8001ece <ParseMAC+0x66>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1db      	bne.n	8001e86 <ParseMAC+0x1e>
   }
  }
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd90      	pop	{r4, r7, pc}

08001ed6 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d027      	beq.n	8001f3c <ParseIP+0x66>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d024      	beq.n	8001f3c <ParseIP+0x66>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d921      	bls.n	8001f3c <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001ef8:	e019      	b.n	8001f2e <ParseIP+0x58>
    uint8_t done_count = 1;
 8001efa:	2301      	movs	r3, #1
 8001efc:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f04:	d00e      	beq.n	8001f24 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8001f06:	f107 0316 	add.w	r3, r7, #22
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f7ff ff67 	bl	8001de0 <ParseNumber>
 8001f12:	4601      	mov	r1, r0
 8001f14:	7dfb      	ldrb	r3, [r7, #23]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	75fa      	strb	r2, [r7, #23]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4413      	add	r3, r2
 8001f20:	b2ca      	uxtb	r2, r1
 8001f22:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8001f24:	7dbb      	ldrb	r3, [r7, #22]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d803      	bhi.n	8001f3c <ParseIP+0x66>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1de      	bne.n	8001efa <ParseIP+0x24>
   }
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	3302      	adds	r3, #2
 8001f56:	4940      	ldr	r1, [pc, #256]	@ (8002058 <AT_ParseInfo+0x114>)
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00b ff91 	bl	800de80 <strtok>
 8001f5e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001f60:	e071      	b.n	8002046 <AT_ParseInfo+0x102>
    switch (num++) {
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	72fa      	strb	r2, [r7, #11]
 8001f68:	2b06      	cmp	r3, #6
 8001f6a:	d866      	bhi.n	800203a <AT_ParseInfo+0xf6>
 8001f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f74 <AT_ParseInfo+0x30>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001f91 	.word	0x08001f91
 8001f78:	08001fa5 	.word	0x08001fa5
 8001f7c:	08001fbd 	.word	0x08001fbd
 8001f80:	08001fd5 	.word	0x08001fd5
 8001f84:	08001fed 	.word	0x08001fed
 8001f88:	08002005 	.word	0x08002005
 8001f8c:	08002019 	.word	0x08002019
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	221f      	movs	r2, #31
 8001f94:	68f9      	ldr	r1, [r7, #12]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00b ff5e 	bl	800de58 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	77da      	strb	r2, [r3, #31]
      break;
 8001fa2:	e04b      	b.n	800203c <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3320      	adds	r3, #32
 8001fa8:	2217      	movs	r2, #23
 8001faa:	68f9      	ldr	r1, [r7, #12]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f00b ff53 	bl	800de58 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      break;
 8001fba:	e03f      	b.n	800203c <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3338      	adds	r3, #56	@ 0x38
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	68f9      	ldr	r1, [r7, #12]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00b ff47 	bl	800de58 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8001fd2:	e033      	b.n	800203c <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3348      	adds	r3, #72	@ 0x48
 8001fd8:	220f      	movs	r2, #15
 8001fda:	68f9      	ldr	r1, [r7, #12]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00b ff3b 	bl	800de58 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 8001fea:	e027      	b.n	800203c <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3358      	adds	r3, #88	@ 0x58
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	68f9      	ldr	r1, [r7, #12]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f00b ff2f 	bl	800de58 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      break;
 8002002:	e01b      	b.n	800203c <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8002004:	2100      	movs	r1, #0
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f7ff feea 	bl	8001de0 <ParseNumber>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 8002016:	e011      	b.n	800203c <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8002018:	4910      	ldr	r1, [pc, #64]	@ (800205c <AT_ParseInfo+0x118>)
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f00b ff30 	bl	800de80 <strtok>
 8002020:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3368      	adds	r3, #104	@ 0x68
 8002026:	221f      	movs	r2, #31
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	f00b ff14 	bl	800de58 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
      break;
 8002038:	e000      	b.n	800203c <AT_ParseInfo+0xf8>

    default: break;
 800203a:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800203c:	4906      	ldr	r1, [pc, #24]	@ (8002058 <AT_ParseInfo+0x114>)
 800203e:	2000      	movs	r0, #0
 8002040:	f00b ff1e 	bl	800de80 <strtok>
 8002044:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d18a      	bne.n	8001f62 <AT_ParseInfo+0x1e>
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	080118c8 	.word	0x080118c8
 800205c:	080118cc 	.word	0x080118cc

08002060 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3302      	adds	r3, #2
 8002072:	4959      	ldr	r1, [pc, #356]	@ (80021d8 <AT_ParseConnSettings+0x178>)
 8002074:	4618      	mov	r0, r3
 8002076:	f00b ff03 	bl	800de80 <strtok>
 800207a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800207c:	e0a2      	b.n	80021c4 <AT_ParseConnSettings+0x164>
    switch (num++) {
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	73fa      	strb	r2, [r7, #15]
 8002084:	2b0b      	cmp	r3, #11
 8002086:	f200 808c 	bhi.w	80021a2 <AT_ParseConnSettings+0x142>
 800208a:	a201      	add	r2, pc, #4	@ (adr r2, 8002090 <AT_ParseConnSettings+0x30>)
 800208c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002090:	080020c1 	.word	0x080020c1
 8002094:	080020d7 	.word	0x080020d7
 8002098:	080020ef 	.word	0x080020ef
 800209c:	08002103 	.word	0x08002103
 80020a0:	08002117 	.word	0x08002117
 80020a4:	0800212b 	.word	0x0800212b
 80020a8:	0800213b 	.word	0x0800213b
 80020ac:	0800214b 	.word	0x0800214b
 80020b0:	0800215b 	.word	0x0800215b
 80020b4:	0800216b 	.word	0x0800216b
 80020b8:	0800217b 	.word	0x0800217b
 80020bc:	0800218f 	.word	0x0800218f
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2220      	movs	r2, #32
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f00b fec6 	bl	800de58 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 80020d4:	e066      	b.n	80021a4 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	3321      	adds	r3, #33	@ 0x21
 80020da:	2220      	movs	r2, #32
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	4618      	mov	r0, r3
 80020e0:	f00b feba 	bl	800de58 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      break;
 80020ec:	e05a      	b.n	80021a4 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80020ee:	2100      	movs	r1, #0
 80020f0:	68b8      	ldr	r0, [r7, #8]
 80020f2:	f7ff fe75 	bl	8001de0 <ParseNumber>
 80020f6:	4603      	mov	r3, r0
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 8002100:	e050      	b.n	80021a4 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8002102:	2100      	movs	r1, #0
 8002104:	68b8      	ldr	r0, [r7, #8]
 8002106:	f7ff fe6b 	bl	8001de0 <ParseNumber>
 800210a:	4603      	mov	r3, r0
 800210c:	b2da      	uxtb	r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 8002114:	e046      	b.n	80021a4 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8002116:	2100      	movs	r1, #0
 8002118:	68b8      	ldr	r0, [r7, #8]
 800211a:	f7ff fe61 	bl	8001de0 <ParseNumber>
 800211e:	4603      	mov	r3, r0
 8002120:	b2da      	uxtb	r2, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8002128:	e03c      	b.n	80021a4 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	3348      	adds	r3, #72	@ 0x48
 800212e:	2204      	movs	r2, #4
 8002130:	4619      	mov	r1, r3
 8002132:	68b8      	ldr	r0, [r7, #8]
 8002134:	f7ff fecf 	bl	8001ed6 <ParseIP>
      break;
 8002138:	e034      	b.n	80021a4 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	334c      	adds	r3, #76	@ 0x4c
 800213e:	2204      	movs	r2, #4
 8002140:	4619      	mov	r1, r3
 8002142:	68b8      	ldr	r0, [r7, #8]
 8002144:	f7ff fec7 	bl	8001ed6 <ParseIP>
      break;
 8002148:	e02c      	b.n	80021a4 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	3350      	adds	r3, #80	@ 0x50
 800214e:	2204      	movs	r2, #4
 8002150:	4619      	mov	r1, r3
 8002152:	68b8      	ldr	r0, [r7, #8]
 8002154:	f7ff febf 	bl	8001ed6 <ParseIP>
      break;
 8002158:	e024      	b.n	80021a4 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	3354      	adds	r3, #84	@ 0x54
 800215e:	2204      	movs	r2, #4
 8002160:	4619      	mov	r1, r3
 8002162:	68b8      	ldr	r0, [r7, #8]
 8002164:	f7ff feb7 	bl	8001ed6 <ParseIP>
      break;
 8002168:	e01c      	b.n	80021a4 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	3358      	adds	r3, #88	@ 0x58
 800216e:	2204      	movs	r2, #4
 8002170:	4619      	mov	r1, r3
 8002172:	68b8      	ldr	r0, [r7, #8]
 8002174:	f7ff feaf 	bl	8001ed6 <ParseIP>
      break;
 8002178:	e014      	b.n	80021a4 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 800217a:	2100      	movs	r1, #0
 800217c:	68b8      	ldr	r0, [r7, #8]
 800217e:	f7ff fe2f 	bl	8001de0 <ParseNumber>
 8002182:	4603      	mov	r3, r0
 8002184:	b2da      	uxtb	r2, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 800218c:	e00a      	b.n	80021a4 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 800218e:	2100      	movs	r1, #0
 8002190:	68b8      	ldr	r0, [r7, #8]
 8002192:	f7ff fe25 	bl	8001de0 <ParseNumber>
 8002196:	4603      	mov	r3, r0
 8002198:	b2da      	uxtb	r2, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 80021a0:	e000      	b.n	80021a4 <AT_ParseConnSettings+0x144>

    default:
      break;
 80021a2:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80021a4:	490c      	ldr	r1, [pc, #48]	@ (80021d8 <AT_ParseConnSettings+0x178>)
 80021a6:	2000      	movs	r0, #0
 80021a8:	f00b fe6a 	bl	800de80 <strtok>
 80021ac:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <AT_ParseConnSettings+0x164>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b2c      	cmp	r3, #44	@ 0x2c
 80021bc:	d102      	bne.n	80021c4 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	3301      	adds	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f47f af59 	bne.w	800207e <AT_ParseConnSettings+0x1e>
    }
  }
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	080118c8 	.word	0x080118c8

080021dc <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d056      	beq.n	80022a8 <AT_ExecuteCommand+0xcc>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002200:	2b00      	cmp	r3, #0
 8002202:	d051      	beq.n	80022a8 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 800220a:	68b8      	ldr	r0, [r7, #8]
 800220c:	f7fe f830 	bl	8000270 <strlen>
 8002210:	4603      	mov	r3, r0
 8002212:	b299      	uxth	r1, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 800221a:	461a      	mov	r2, r3
 800221c:	68b8      	ldr	r0, [r7, #8]
 800221e:	47a0      	blx	r4
 8002220:	4603      	mov	r3, r0
 8002222:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	dd3e      	ble.n	80022a8 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8002236:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4798      	blx	r3
 800223e:	4603      	mov	r3, r0
 8002240:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8002242:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002246:	2b00      	cmp	r3, #0
 8002248:	dd27      	ble.n	800229a <AT_ExecuteCommand+0xbe>
 800224a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800224e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002252:	dc22      	bgt.n	800229a <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8002254:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002258:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800225c:	d105      	bne.n	800226a <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 800225e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29b      	uxth	r3, r3
 8002268:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800226a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8002276:	490f      	ldr	r1, [pc, #60]	@ (80022b4 <AT_ExecuteCommand+0xd8>)
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f00b fe5d 	bl	800df38 <strstr>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e010      	b.n	80022aa <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8002288:	490b      	ldr	r1, [pc, #44]	@ (80022b8 <AT_ExecuteCommand+0xdc>)
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f00b fe54 	bl	800df38 <strstr>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8002296:	2305      	movs	r3, #5
 8002298:	e007      	b.n	80022aa <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 800229a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800229e:	f113 0f04 	cmn.w	r3, #4
 80022a2:	d101      	bne.n	80022a8 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80022a4:	2306      	movs	r3, #6
 80022a6:	e000      	b.n	80022aa <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80022a8:	2304      	movs	r3, #4
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd90      	pop	{r4, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	080118e0 	.word	0x080118e0
 80022b8:	080118ec 	.word	0x080118ec

080022bc <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 80022d6:	68b8      	ldr	r0, [r7, #8]
 80022d8:	f7fd ffca 	bl	8000270 <strlen>
 80022dc:	4603      	mov	r3, r0
 80022de:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80022e0:	8a7b      	ldrh	r3, [r7, #18]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <AT_RequestSendData+0x32>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e05d      	b.n	80023aa <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d057      	beq.n	80023a8 <AT_RequestSendData+0xec>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d052      	beq.n	80023a8 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 800230e:	8a79      	ldrh	r1, [r7, #18]
 8002310:	68b8      	ldr	r0, [r7, #8]
 8002312:	4798      	blx	r3
 8002314:	4603      	mov	r3, r0
 8002316:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8002318:	8a3a      	ldrh	r2, [r7, #16]
 800231a:	8a7b      	ldrh	r3, [r7, #18]
 800231c:	429a      	cmp	r2, r3
 800231e:	d143      	bne.n	80023a8 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 800232c:	8879      	ldrh	r1, [r7, #2]
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	4798      	blx	r3
 8002332:	4603      	mov	r3, r0
 8002334:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8002336:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	429a      	cmp	r2, r3
 800233e:	d131      	bne.n	80023a4 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 800234c:	2100      	movs	r1, #0
 800234e:	6a38      	ldr	r0, [r7, #32]
 8002350:	4798      	blx	r3
 8002352:	4603      	mov	r3, r0
 8002354:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8002356:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	dd19      	ble.n	8002392 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 800235e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002362:	6a3a      	ldr	r2, [r7, #32]
 8002364:	4413      	add	r3, r2
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800236a:	4912      	ldr	r1, [pc, #72]	@ (80023b4 <AT_RequestSendData+0xf8>)
 800236c:	6a38      	ldr	r0, [r7, #32]
 800236e:	f00b fde3 	bl	800df38 <strstr>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e016      	b.n	80023aa <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800237c:	490e      	ldr	r1, [pc, #56]	@ (80023b8 <AT_RequestSendData+0xfc>)
 800237e:	6a38      	ldr	r0, [r7, #32]
 8002380:	f00b fdda 	bl	800df38 <strstr>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800238a:	2305      	movs	r3, #5
 800238c:	e00d      	b.n	80023aa <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800238e:	2302      	movs	r3, #2
 8002390:	e00b      	b.n	80023aa <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8002392:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002396:	f113 0f04 	cmn.w	r3, #4
 800239a:	d101      	bne.n	80023a0 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800239c:	2306      	movs	r3, #6
 800239e:	e004      	b.n	80023aa <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 80023a0:	2302      	movs	r3, #2
 80023a2:	e002      	b.n	80023aa <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80023a4:	2302      	movs	r3, #2
 80023a6:	e000      	b.n	80023aa <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 80023a8:	2304      	movs	r3, #4
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	080118e0 	.word	0x080118e0
 80023b8:	080118ec 	.word	0x080118ec

080023bc <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80023d0:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8087 	beq.w	80024ec <AT_RequestReceiveData+0x130>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8081 	beq.w	80024ec <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 80023f0:	68b8      	ldr	r0, [r7, #8]
 80023f2:	f7fd ff3d 	bl	8000270 <strlen>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b299      	uxth	r1, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8002400:	461a      	mov	r2, r3
 8002402:	68b8      	ldr	r0, [r7, #8]
 8002404:	47a0      	blx	r4
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	dd6f      	ble.n	80024ec <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8002418:	2100      	movs	r1, #0
 800241a:	6938      	ldr	r0, [r7, #16]
 800241c:	4798      	blx	r3
 800241e:	4603      	mov	r3, r0
 8002420:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b0d      	cmp	r3, #13
 8002428:	d104      	bne.n	8002434 <AT_RequestReceiveData+0x78>
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	3301      	adds	r3, #1
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b0a      	cmp	r3, #10
 8002432:	d001      	beq.n	8002438 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 8002434:	2304      	movs	r3, #4
 8002436:	e05a      	b.n	80024ee <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3b02      	subs	r3, #2
 800243c:	617b      	str	r3, [r7, #20]
    p += 2;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	3302      	adds	r3, #2
 8002442:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b07      	cmp	r3, #7
 8002448:	d94a      	bls.n	80024e0 <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 800244a:	e002      	b.n	8002452 <AT_RequestReceiveData+0x96>
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3b01      	subs	r3, #1
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <AT_RequestReceiveData+0xaa>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	3b01      	subs	r3, #1
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b15      	cmp	r3, #21
 8002464:	d0f2      	beq.n	800244c <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4413      	add	r3, r2
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3b08      	subs	r3, #8
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4413      	add	r3, r2
 8002478:	491f      	ldr	r1, [pc, #124]	@ (80024f8 <AT_RequestReceiveData+0x13c>)
 800247a:	4618      	mov	r0, r3
 800247c:	f00b fd5c 	bl	800df38 <strstr>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d016      	beq.n	80024b4 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b08      	subs	r3, #8
 800248c:	b29a      	uxth	r2, r3
 800248e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002490:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	887a      	ldrh	r2, [r7, #2]
 8002498:	429a      	cmp	r2, r3
 800249a:	d202      	bcs.n	80024a2 <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 800249c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 80024a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	6939      	ldr	r1, [r7, #16]
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f00b fdd1 	bl	800e052 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	e01c      	b.n	80024ee <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	3b04      	subs	r3, #4
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	2204      	movs	r2, #4
 80024be:	490f      	ldr	r1, [pc, #60]	@ (80024fc <AT_RequestReceiveData+0x140>)
 80024c0:	4618      	mov	r0, r3
 80024c2:	f00b fc9f 	bl	800de04 <memcmp>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d104      	bne.n	80024d6 <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 80024cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ce:	2200      	movs	r2, #0
 80024d0:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80024d2:	2305      	movs	r3, #5
 80024d4:	e00b      	b.n	80024ee <AT_RequestReceiveData+0x132>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 80024d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d8:	2200      	movs	r2, #0
 80024da:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80024dc:	2305      	movs	r3, #5
 80024de:	e006      	b.n	80024ee <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f113 0f04 	cmn.w	r3, #4
 80024e6:	d101      	bne.n	80024ec <AT_RequestReceiveData+0x130>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80024e8:	2306      	movs	r3, #6
 80024ea:	e000      	b.n	80024ee <AT_RequestReceiveData+0x132>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80024ec:	2304      	movs	r3, #4
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	bf00      	nop
 80024f8:	080118e0 	.word	0x080118e0
 80024fc:	080118f4 	.word	0x080118f4

08002500 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002508:	2302      	movs	r3, #2
 800250a:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002512:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01b      	beq.n	8002558 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002526:	2000      	movs	r0, #0
 8002528:	4798      	blx	r3
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d113      	bne.n	8002558 <ES_WIFI_Init+0x58>
  {

    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002536:	461a      	mov	r2, r3
 8002538:	490a      	ldr	r1, [pc, #40]	@ (8002564 <ES_WIFI_Init+0x64>)
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff fe4e 	bl	80021dc <AT_ExecuteCommand>
 8002540:	4603      	mov	r3, r0
 8002542:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002550:	4619      	mov	r1, r3
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fcf6 	bl	8001f44 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	080118fc 	.word	0x080118fc

08002568 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00b      	beq.n	8002594 <ES_WIFI_RegisterBusIO+0x2c>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <ES_WIFI_RegisterBusIO+0x2c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <ES_WIFI_RegisterBusIO+0x2c>
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <ES_WIFI_RegisterBusIO+0x2c>
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8002594:	2302      	movs	r3, #2
 8002596:	e014      	b.n	80025c2 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	4932      	ldr	r1, [pc, #200]	@ (80026b0 <ES_WIFI_Connect+0xe0>)
 80025e8:	4618      	mov	r0, r3
 80025ea:	f00b fb13 	bl	800dc14 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80025fa:	461a      	mov	r2, r3
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff fded 	bl	80021dc <AT_ExecuteCommand>
 8002602:	4603      	mov	r3, r0
 8002604:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8002606:	7dfb      	ldrb	r3, [r7, #23]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d14b      	bne.n	80026a4 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4927      	ldr	r1, [pc, #156]	@ (80026b4 <ES_WIFI_Connect+0xe4>)
 8002616:	4618      	mov	r0, r3
 8002618:	f00b fafc 	bl	800dc14 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002628:	461a      	mov	r2, r3
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f7ff fdd6 	bl	80021dc <AT_ExecuteCommand>
 8002630:	4603      	mov	r3, r0
 8002632:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8002634:	7dfb      	ldrb	r3, [r7, #23]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d134      	bne.n	80026a4 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	491b      	ldr	r1, [pc, #108]	@ (80026b8 <ES_WIFI_Connect+0xe8>)
 800264c:	4618      	mov	r0, r3
 800264e:	f00b fae1 	bl	800dc14 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800265e:	461a      	mov	r2, r3
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f7ff fdbb 	bl	80021dc <AT_ExecuteCommand>
 8002666:	4603      	mov	r3, r0
 8002668:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800266a:	7dfb      	ldrb	r3, [r7, #23]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d119      	bne.n	80026a4 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002676:	4911      	ldr	r1, [pc, #68]	@ (80026bc <ES_WIFI_Connect+0xec>)
 8002678:	4618      	mov	r0, r3
 800267a:	f00b facb 	bl	800dc14 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800268a:	461a      	mov	r2, r3
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7ff fda5 	bl	80021dc <AT_ExecuteCommand>
 8002692:	4603      	mov	r3, r0
 8002694:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8002696:	7dfb      	ldrb	r3, [r7, #23]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d103      	bne.n	80026a4 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	08011914 	.word	0x08011914
 80026b4:	0801191c 	.word	0x0801191c
 80026b8:	08011924 	.word	0x08011924
 80026bc:	0801192c 	.word	0x0801192c

080026c0 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80026ce:	4913      	ldr	r1, [pc, #76]	@ (800271c <ES_WIFI_IsConnected+0x5c>)
 80026d0:	4618      	mov	r0, r3
 80026d2:	f00b fa9f 	bl	800dc14 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80026e2:	461a      	mov	r2, r3
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff fd79 	bl	80021dc <AT_ExecuteCommand>
 80026ea:	4603      	mov	r3, r0
 80026ec:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 80026fa:	2b31      	cmp	r3, #49	@ 0x31
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	08011930 	.word	0x08011930

08002720 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800272e:	4910      	ldr	r1, [pc, #64]	@ (8002770 <ES_WIFI_GetNetworkSettings+0x50>)
 8002730:	4618      	mov	r0, r3
 8002732:	f00b fa6f 	bl	800dc14 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002742:	461a      	mov	r2, r3
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fd49 	bl	80021dc <AT_ExecuteCommand>
 800274a:	4603      	mov	r3, r0
 800274c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d108      	bne.n	8002766 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	338d      	adds	r3, #141	@ 0x8d
 800275e:	4619      	mov	r1, r3
 8002760:	4610      	mov	r0, r2
 8002762:	f7ff fc7d 	bl	8002060 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	08011938 	.word	0x08011938

08002774 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	4613      	mov	r3, r2
 8002780:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002788:	4913      	ldr	r1, [pc, #76]	@ (80027d8 <ES_WIFI_GetMACAddress+0x64>)
 800278a:	4618      	mov	r0, r3
 800278c:	f00b fa42 	bl	800dc14 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800279c:	461a      	mov	r2, r3
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7ff fd1c 	bl	80021dc <AT_ExecuteCommand>
 80027a4:	4603      	mov	r3, r0
 80027a6:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10e      	bne.n	80027cc <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80027b4:	3302      	adds	r3, #2
 80027b6:	4909      	ldr	r1, [pc, #36]	@ (80027dc <ES_WIFI_GetMACAddress+0x68>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f00b fb61 	bl	800de80 <strtok>
 80027be:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	6938      	ldr	r0, [r7, #16]
 80027c8:	f7ff fb4e 	bl	8001e68 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	08011988 	.word	0x08011988
 80027dc:	0801198c 	.word	0x0801198c

080027e0 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <ES_WIFI_StartClientConnection+0x1e>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d105      	bne.n	800280a <ES_WIFI_StartClientConnection+0x2a>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	885b      	ldrh	r3, [r3, #2]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <ES_WIFI_StartClientConnection+0x2a>
 8002806:	2302      	movs	r3, #2
 8002808:	e0c1      	b.n	800298e <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	785b      	ldrb	r3, [r3, #1]
 8002814:	461a      	mov	r2, r3
 8002816:	4960      	ldr	r1, [pc, #384]	@ (8002998 <ES_WIFI_StartClientConnection+0x1b8>)
 8002818:	f00b f9fc 	bl	800dc14 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002828:	461a      	mov	r2, r3
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff fcd6 	bl	80021dc <AT_ExecuteCommand>
 8002830:	4603      	mov	r3, r0
 8002832:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d114      	bne.n	8002864 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	4955      	ldr	r1, [pc, #340]	@ (800299c <ES_WIFI_StartClientConnection+0x1bc>)
 8002848:	f00b f9e4 	bl	800dc14 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002858:	461a      	mov	r2, r3
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fcbe 	bl	80021dc <AT_ExecuteCommand>
 8002860:	4603      	mov	r3, r0
 8002862:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d114      	bne.n	8002894 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	889b      	ldrh	r3, [r3, #4]
 8002874:	461a      	mov	r2, r3
 8002876:	494a      	ldr	r1, [pc, #296]	@ (80029a0 <ES_WIFI_StartClientConnection+0x1c0>)
 8002878:	f00b f9cc 	bl	800dc14 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002888:	461a      	mov	r2, r3
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff fca6 	bl	80021dc <AT_ExecuteCommand>
 8002890:	4603      	mov	r3, r0
 8002892:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d11c      	bne.n	80028d4 <ES_WIFI_StartClientConnection+0xf4>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <ES_WIFI_StartClientConnection+0xca>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d114      	bne.n	80028d4 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	885b      	ldrh	r3, [r3, #2]
 80028b4:	461a      	mov	r2, r3
 80028b6:	493b      	ldr	r1, [pc, #236]	@ (80029a4 <ES_WIFI_StartClientConnection+0x1c4>)
 80028b8:	f00b f9ac 	bl	800dc14 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80028c8:	461a      	mov	r2, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff fc86 	bl	80021dc <AT_ExecuteCommand>
 80028d0:	4603      	mov	r3, r0
 80028d2:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d128      	bne.n	800292c <ES_WIFI_StartClientConnection+0x14c>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <ES_WIFI_StartClientConnection+0x10a>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d120      	bne.n	800292c <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	799b      	ldrb	r3, [r3, #6]
 80028f4:	4619      	mov	r1, r3
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	79db      	ldrb	r3, [r3, #7]
 80028fa:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8002900:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	9200      	str	r2, [sp, #0]
 800290a:	4623      	mov	r3, r4
 800290c:	460a      	mov	r2, r1
 800290e:	4926      	ldr	r1, [pc, #152]	@ (80029a8 <ES_WIFI_StartClientConnection+0x1c8>)
 8002910:	f00b f980 	bl	800dc14 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002920:	461a      	mov	r2, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fc5a 	bl	80021dc <AT_ExecuteCommand>
 8002928:	4603      	mov	r3, r0
 800292a:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d116      	bne.n	8002960 <ES_WIFI_StartClientConnection+0x180>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d112      	bne.n	8002960 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002940:	491a      	ldr	r1, [pc, #104]	@ (80029ac <ES_WIFI_StartClientConnection+0x1cc>)
 8002942:	4618      	mov	r0, r3
 8002944:	f00b f966 	bl	800dc14 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002954:	461a      	mov	r2, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fc40 	bl	80021dc <AT_ExecuteCommand>
 800295c:	4603      	mov	r3, r0
 800295e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d112      	bne.n	800298c <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800296c:	4910      	ldr	r1, [pc, #64]	@ (80029b0 <ES_WIFI_StartClientConnection+0x1d0>)
 800296e:	4618      	mov	r0, r3
 8002970:	f00b f950 	bl	800dc14 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002980:	461a      	mov	r2, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff fc2a 	bl	80021dc <AT_ExecuteCommand>
 8002988:	4603      	mov	r3, r0
 800298a:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800298c:	7bfb      	ldrb	r3, [r7, #15]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}
 8002996:	bf00      	nop
 8002998:	080119f0 	.word	0x080119f0
 800299c:	080119f8 	.word	0x080119f8
 80029a0:	08011a00 	.word	0x08011a00
 80029a4:	08011a08 	.word	0x08011a08
 80029a8:	08011a10 	.word	0x08011a10
 80029ac:	08011a20 	.word	0x08011a20
 80029b0:	08011a28 	.word	0x08011a28

080029b4 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	461a      	mov	r2, r3
 80029c0:	460b      	mov	r3, r1
 80029c2:	72fb      	strb	r3, [r7, #11]
 80029c4:	4613      	mov	r3, r2
 80029c6:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80029c8:	2302      	movs	r3, #2
 80029ca:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80029d2:	2301      	movs	r3, #1
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e001      	b.n	80029dc <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 80029dc:	893b      	ldrh	r3, [r7, #8]
 80029de:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80029e2:	d302      	bcc.n	80029ea <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 80029e4:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80029e8:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	893a      	ldrh	r2, [r7, #8]
 80029ee:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80029f6:	7afa      	ldrb	r2, [r7, #11]
 80029f8:	4942      	ldr	r1, [pc, #264]	@ (8002b04 <ES_WIFI_SendData+0x150>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	f00b f90a 	bl	800dc14 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7ff fbe4 	bl	80021dc <AT_ExecuteCommand>
 8002a14:	4603      	mov	r3, r0
 8002a16:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d15e      	bne.n	8002adc <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4938      	ldr	r1, [pc, #224]	@ (8002b08 <ES_WIFI_SendData+0x154>)
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f00b f8f3 	bl	800dc14 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fbcd 	bl	80021dc <AT_ExecuteCommand>
 8002a42:	4603      	mov	r3, r0
 8002a44:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002a46:	7cfb      	ldrb	r3, [r7, #19]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d13d      	bne.n	8002ac8 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a52:	893a      	ldrh	r2, [r7, #8]
 8002a54:	492d      	ldr	r1, [pc, #180]	@ (8002b0c <ES_WIFI_SendData+0x158>)
 8002a56:	4618      	mov	r0, r3
 8002a58:	f00b f8dc 	bl	800dc14 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a68:	893a      	ldrh	r2, [r7, #8]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7ff fc23 	bl	80022bc <AT_RequestSendData>
 8002a76:	4603      	mov	r3, r0
 8002a78:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d119      	bne.n	8002ab4 <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a86:	4922      	ldr	r1, [pc, #136]	@ (8002b10 <ES_WIFI_SendData+0x15c>)
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f00b fa55 	bl	800df38 <strstr>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d02c      	beq.n	8002aee <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8002a94:	f640 1202 	movw	r2, #2306	@ 0x902
 8002a98:	491e      	ldr	r1, [pc, #120]	@ (8002b14 <ES_WIFI_SendData+0x160>)
 8002a9a:	481f      	ldr	r0, [pc, #124]	@ (8002b18 <ES_WIFI_SendData+0x164>)
 8002a9c:	f00b f84a 	bl	800db34 <iprintf>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	481c      	ldr	r0, [pc, #112]	@ (8002b1c <ES_WIFI_SendData+0x168>)
 8002aaa:	f00b f843 	bl	800db34 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	74fb      	strb	r3, [r7, #19]
 8002ab2:	e01c      	b.n	8002aee <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8002ab4:	f640 1208 	movw	r2, #2312	@ 0x908
 8002ab8:	4916      	ldr	r1, [pc, #88]	@ (8002b14 <ES_WIFI_SendData+0x160>)
 8002aba:	4817      	ldr	r0, [pc, #92]	@ (8002b18 <ES_WIFI_SendData+0x164>)
 8002abc:	f00b f83a 	bl	800db34 <iprintf>
 8002ac0:	4817      	ldr	r0, [pc, #92]	@ (8002b20 <ES_WIFI_SendData+0x16c>)
 8002ac2:	f00b f89f 	bl	800dc04 <puts>
 8002ac6:	e012      	b.n	8002aee <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8002ac8:	f640 120d 	movw	r2, #2317	@ 0x90d
 8002acc:	4911      	ldr	r1, [pc, #68]	@ (8002b14 <ES_WIFI_SendData+0x160>)
 8002ace:	4812      	ldr	r0, [pc, #72]	@ (8002b18 <ES_WIFI_SendData+0x164>)
 8002ad0:	f00b f830 	bl	800db34 <iprintf>
 8002ad4:	4813      	ldr	r0, [pc, #76]	@ (8002b24 <ES_WIFI_SendData+0x170>)
 8002ad6:	f00b f895 	bl	800dc04 <puts>
 8002ada:	e008      	b.n	8002aee <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8002adc:	f640 1212 	movw	r2, #2322	@ 0x912
 8002ae0:	490c      	ldr	r1, [pc, #48]	@ (8002b14 <ES_WIFI_SendData+0x160>)
 8002ae2:	480d      	ldr	r0, [pc, #52]	@ (8002b18 <ES_WIFI_SendData+0x164>)
 8002ae4:	f00b f826 	bl	800db34 <iprintf>
 8002ae8:	480f      	ldr	r0, [pc, #60]	@ (8002b28 <ES_WIFI_SendData+0x174>)
 8002aea:	f00b f88b 	bl	800dc04 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8002aee:	7cfb      	ldrb	r3, [r7, #19]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d102      	bne.n	8002afa <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	2200      	movs	r2, #0
 8002af8:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	080119f0 	.word	0x080119f0
 8002b08:	08011ba4 	.word	0x08011ba4
 8002b0c:	08011bac 	.word	0x08011bac
 8002b10:	08011bb8 	.word	0x08011bb8
 8002b14:	08011a80 	.word	0x08011a80
 8002b18:	08011a98 	.word	0x08011a98
 8002b1c:	08011bc0 	.word	0x08011bc0
 8002b20:	08011bdc 	.word	0x08011bdc
 8002b24:	08011bf8 	.word	0x08011bf8
 8002b28:	08011c0c 	.word	0x08011c0c

08002b2c <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	461a      	mov	r2, r3
 8002b38:	460b      	mov	r3, r1
 8002b3a:	72fb      	strb	r3, [r7, #11]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002b40:	2302      	movs	r3, #2
 8002b42:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d102      	bne.n	8002b50 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	e001      	b.n	8002b54 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8002b54:	893b      	ldrh	r3, [r7, #8]
 8002b56:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8002b5a:	f200 808b 	bhi.w	8002c74 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002b64:	7afa      	ldrb	r2, [r7, #11]
 8002b66:	4946      	ldr	r1, [pc, #280]	@ (8002c80 <ES_WIFI_ReceiveData+0x154>)
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f00b f853 	bl	800dc14 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f7ff fb2d 	bl	80021dc <AT_ExecuteCommand>
 8002b82:	4603      	mov	r3, r0
 8002b84:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d165      	bne.n	8002c58 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002b92:	893a      	ldrh	r2, [r7, #8]
 8002b94:	493b      	ldr	r1, [pc, #236]	@ (8002c84 <ES_WIFI_ReceiveData+0x158>)
 8002b96:	4618      	mov	r0, r3
 8002b98:	f00b f83c 	bl	800dc14 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff fb16 	bl	80021dc <AT_ExecuteCommand>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d141      	bne.n	8002c3e <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4931      	ldr	r1, [pc, #196]	@ (8002c88 <ES_WIFI_ReceiveData+0x15c>)
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f00b f825 	bl	800dc14 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7ff faff 	bl	80021dc <AT_ExecuteCommand>
 8002bde:	4603      	mov	r3, r0
 8002be0:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d120      	bne.n	8002c2a <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002bee:	4927      	ldr	r1, [pc, #156]	@ (8002c8c <ES_WIFI_ReceiveData+0x160>)
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f00b f80f 	bl	800dc14 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002bfc:	893a      	ldrh	r2, [r7, #8]
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	4613      	mov	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f7ff fbd8 	bl	80023bc <AT_RequestReceiveData>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d02e      	beq.n	8002c74 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 8002c16:	f640 12aa 	movw	r2, #2474	@ 0x9aa
 8002c1a:	491d      	ldr	r1, [pc, #116]	@ (8002c90 <ES_WIFI_ReceiveData+0x164>)
 8002c1c:	481d      	ldr	r0, [pc, #116]	@ (8002c94 <ES_WIFI_ReceiveData+0x168>)
 8002c1e:	f00a ff89 	bl	800db34 <iprintf>
 8002c22:	481d      	ldr	r0, [pc, #116]	@ (8002c98 <ES_WIFI_ReceiveData+0x16c>)
 8002c24:	f00a ffee 	bl	800dc04 <puts>
 8002c28:	e024      	b.n	8002c74 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 8002c2a:	f640 12af 	movw	r2, #2479	@ 0x9af
 8002c2e:	4918      	ldr	r1, [pc, #96]	@ (8002c90 <ES_WIFI_ReceiveData+0x164>)
 8002c30:	4818      	ldr	r0, [pc, #96]	@ (8002c94 <ES_WIFI_ReceiveData+0x168>)
 8002c32:	f00a ff7f 	bl	800db34 <iprintf>
 8002c36:	4819      	ldr	r0, [pc, #100]	@ (8002c9c <ES_WIFI_ReceiveData+0x170>)
 8002c38:	f00a ffe4 	bl	800dc04 <puts>
 8002c3c:	e01a      	b.n	8002c74 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
 8002c3e:	f640 12b4 	movw	r2, #2484	@ 0x9b4
 8002c42:	4913      	ldr	r1, [pc, #76]	@ (8002c90 <ES_WIFI_ReceiveData+0x164>)
 8002c44:	4813      	ldr	r0, [pc, #76]	@ (8002c94 <ES_WIFI_ReceiveData+0x168>)
 8002c46:	f00a ff75 	bl	800db34 <iprintf>
 8002c4a:	4815      	ldr	r0, [pc, #84]	@ (8002ca0 <ES_WIFI_ReceiveData+0x174>)
 8002c4c:	f00a ffda 	bl	800dc04 <puts>
        *Receivedlen = 0;
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	2200      	movs	r2, #0
 8002c54:	801a      	strh	r2, [r3, #0]
 8002c56:	e00d      	b.n	8002c74 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
 8002c58:	f640 12ba 	movw	r2, #2490	@ 0x9ba
 8002c5c:	490c      	ldr	r1, [pc, #48]	@ (8002c90 <ES_WIFI_ReceiveData+0x164>)
 8002c5e:	480d      	ldr	r0, [pc, #52]	@ (8002c94 <ES_WIFI_ReceiveData+0x168>)
 8002c60:	f00a ff68 	bl	800db34 <iprintf>
 8002c64:	480f      	ldr	r0, [pc, #60]	@ (8002ca4 <ES_WIFI_ReceiveData+0x178>)
 8002c66:	f00a ffcd 	bl	800dc04 <puts>
      issue15++;
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <ES_WIFI_ReceiveData+0x17c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca8 <ES_WIFI_ReceiveData+0x17c>)
 8002c72:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	080119f0 	.word	0x080119f0
 8002c84:	08011c30 	.word	0x08011c30
 8002c88:	08011c38 	.word	0x08011c38
 8002c8c:	08011c40 	.word	0x08011c40
 8002c90:	08011a80 	.word	0x08011a80
 8002c94:	08011a98 	.word	0x08011a98
 8002c98:	08011c44 	.word	0x08011c44
 8002c9c:	08011c64 	.word	0x08011c64
 8002ca0:	08011c7c 	.word	0x08011c7c
 8002ca4:	08011c9c 	.word	0x08011c9c
 8002ca8:	20000d40 	.word	0x20000d40

08002cac <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	@ 0x30
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8002cb4:	4b57      	ldr	r3, [pc, #348]	@ (8002e14 <SPI_WIFI_MspInit+0x168>)
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	4a56      	ldr	r2, [pc, #344]	@ (8002e14 <SPI_WIFI_MspInit+0x168>)
 8002cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cc0:	4b54      	ldr	r3, [pc, #336]	@ (8002e14 <SPI_WIFI_MspInit+0x168>)
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ccc:	4b51      	ldr	r3, [pc, #324]	@ (8002e14 <SPI_WIFI_MspInit+0x168>)
 8002cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd0:	4a50      	ldr	r2, [pc, #320]	@ (8002e14 <SPI_WIFI_MspInit+0x168>)
 8002cd2:	f043 0302 	orr.w	r3, r3, #2
 8002cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cd8:	4b4e      	ldr	r3, [pc, #312]	@ (8002e14 <SPI_WIFI_MspInit+0x168>)
 8002cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8002e14 <SPI_WIFI_MspInit+0x168>)
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce8:	4a4a      	ldr	r2, [pc, #296]	@ (8002e14 <SPI_WIFI_MspInit+0x168>)
 8002cea:	f043 0304 	orr.w	r3, r3, #4
 8002cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cf0:	4b48      	ldr	r3, [pc, #288]	@ (8002e14 <SPI_WIFI_MspInit+0x168>)
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cfc:	4b45      	ldr	r3, [pc, #276]	@ (8002e14 <SPI_WIFI_MspInit+0x168>)
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d00:	4a44      	ldr	r2, [pc, #272]	@ (8002e14 <SPI_WIFI_MspInit+0x168>)
 8002d02:	f043 0310 	orr.w	r3, r3, #16
 8002d06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d08:	4b42      	ldr	r3, [pc, #264]	@ (8002e14 <SPI_WIFI_MspInit+0x168>)
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002d14:	2200      	movs	r2, #0
 8002d16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d1a:	483f      	ldr	r0, [pc, #252]	@ (8002e18 <SPI_WIFI_MspInit+0x16c>)
 8002d1c:	f001 fbd2 	bl	80044c4 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002d20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d24:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002d26:	2301      	movs	r3, #1
 8002d28:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002d32:	f107 031c 	add.w	r3, r7, #28
 8002d36:	4619      	mov	r1, r3
 8002d38:	4837      	ldr	r0, [pc, #220]	@ (8002e18 <SPI_WIFI_MspInit+0x16c>)
 8002d3a:	f001 f90d 	bl	8003f58 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002d42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d46:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	4619      	mov	r1, r3
 8002d56:	4831      	ldr	r0, [pc, #196]	@ (8002e1c <SPI_WIFI_MspInit+0x170>)
 8002d58:	f001 f8fe 	bl	8003f58 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8002d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d60:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002d62:	2301      	movs	r3, #1
 8002d64:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002d72:	f107 031c 	add.w	r3, r7, #28
 8002d76:	4619      	mov	r1, r3
 8002d78:	4828      	ldr	r0, [pc, #160]	@ (8002e1c <SPI_WIFI_MspInit+0x170>)
 8002d7a:	f001 f8ed 	bl	8003f58 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8002d7e:	2201      	movs	r2, #1
 8002d80:	2101      	movs	r1, #1
 8002d82:	4826      	ldr	r0, [pc, #152]	@ (8002e1c <SPI_WIFI_MspInit+0x170>)
 8002d84:	f001 fb9e 	bl	80044c4 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002d94:	2301      	movs	r3, #1
 8002d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8002d98:	f107 031c 	add.w	r3, r7, #28
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	481f      	ldr	r0, [pc, #124]	@ (8002e1c <SPI_WIFI_MspInit+0x170>)
 8002da0:	f001 f8da 	bl	8003f58 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8002da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002da8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002daa:	2302      	movs	r3, #2
 8002dac:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002db2:	2301      	movs	r3, #1
 8002db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002db6:	2306      	movs	r3, #6
 8002db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8002dba:	f107 031c 	add.w	r3, r7, #28
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4817      	ldr	r0, [pc, #92]	@ (8002e20 <SPI_WIFI_MspInit+0x174>)
 8002dc2:	f001 f8c9 	bl	8003f58 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dca:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002dd8:	2306      	movs	r3, #6
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002ddc:	f107 031c 	add.w	r3, r7, #28
 8002de0:	4619      	mov	r1, r3
 8002de2:	480f      	ldr	r0, [pc, #60]	@ (8002e20 <SPI_WIFI_MspInit+0x174>)
 8002de4:	f001 f8b8 	bl	8003f58 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002de8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002dec:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002dee:	2302      	movs	r3, #2
 8002df0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002df2:	2301      	movs	r3, #1
 8002df4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002df6:	2301      	movs	r3, #1
 8002df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002dfa:	2306      	movs	r3, #6
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8002dfe:	f107 031c 	add.w	r3, r7, #28
 8002e02:	4619      	mov	r1, r3
 8002e04:	4806      	ldr	r0, [pc, #24]	@ (8002e20 <SPI_WIFI_MspInit+0x174>)
 8002e06:	f001 f8a7 	bl	8003f58 <HAL_GPIO_Init>
}
 8002e0a:	bf00      	nop
 8002e0c:	3730      	adds	r7, #48	@ 0x30
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	48000400 	.word	0x48000400
 8002e1c:	48001000 	.word	0x48001000
 8002e20:	48000800 	.word	0x48000800

08002e24 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d145      	bne.n	8002ec4 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8002e38:	4b27      	ldr	r3, [pc, #156]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e3a:	4a28      	ldr	r2, [pc, #160]	@ (8002edc <SPI_WIFI_Init+0xb8>)
 8002e3c:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8002e3e:	4826      	ldr	r0, [pc, #152]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e40:	f7ff ff34 	bl	8002cac <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8002e44:	4b24      	ldr	r3, [pc, #144]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e46:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e4a:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8002e4c:	4b22      	ldr	r3, [pc, #136]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002e52:	4b21      	ldr	r3, [pc, #132]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e54:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002e58:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002e60:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8002e66:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6c:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e70:	2210      	movs	r2, #16
 8002e72:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002e74:	4b18      	ldr	r3, [pc, #96]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002e7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002e80:	4b15      	ldr	r3, [pc, #84]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 8002e86:	4b14      	ldr	r3, [pc, #80]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8002e8c:	4812      	ldr	r0, [pc, #72]	@ (8002ed8 <SPI_WIFI_Init+0xb4>)
 8002e8e:	f003 fc8f 	bl	80067b0 <HAL_SPI_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9c:	e018      	b.n	8002ed0 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	2007      	movs	r0, #7
 8002ea4:	f000 ffe1 	bl	8003e6a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8002ea8:	2007      	movs	r0, #7
 8002eaa:	f000 fffa 	bl	8003ea2 <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	2033      	movs	r0, #51	@ 0x33
 8002eb4:	f000 ffd9 	bl	8003e6a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8002eb8:	2033      	movs	r0, #51	@ 0x33
 8002eba:	f000 fff2 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8002ebe:	200a      	movs	r0, #10
 8002ec0:	f000 fa08 	bl	80032d4 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8002ec4:	f000 f80c 	bl	8002ee0 <SPI_WIFI_ResetModule>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	73fb      	strb	r3, [r7, #15]

  return rc;
 8002ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000d44 	.word	0x20000d44
 8002edc:	40003c00 	.word	0x40003c00

08002ee0 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8002ee6:	f000 feb5 	bl	8003c54 <HAL_GetTick>
 8002eea:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ef6:	4835      	ldr	r0, [pc, #212]	@ (8002fcc <SPI_WIFI_ResetModule+0xec>)
 8002ef8:	f001 fae4 	bl	80044c4 <HAL_GPIO_WritePin>
 8002efc:	200a      	movs	r0, #10
 8002efe:	f000 feb5 	bl	8003c6c <HAL_Delay>
 8002f02:	2201      	movs	r2, #1
 8002f04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f08:	4830      	ldr	r0, [pc, #192]	@ (8002fcc <SPI_WIFI_ResetModule+0xec>)
 8002f0a:	f001 fadb 	bl	80044c4 <HAL_GPIO_WritePin>
 8002f0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f12:	f000 feab 	bl	8003c6c <HAL_Delay>
  WIFI_ENABLE_NSS();
 8002f16:	2200      	movs	r2, #0
 8002f18:	2101      	movs	r1, #1
 8002f1a:	482c      	ldr	r0, [pc, #176]	@ (8002fcc <SPI_WIFI_ResetModule+0xec>)
 8002f1c:	f001 fad2 	bl	80044c4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002f20:	200f      	movs	r0, #15
 8002f22:	f000 f9d7 	bl	80032d4 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8002f26:	e02b      	b.n	8002f80 <SPI_WIFI_ResetModule+0xa0>
  {
    if (count > 4)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d907      	bls.n	8002f3e <SPI_WIFI_ResetModule+0x5e>
    {
      WIFI_DISABLE_NSS();
 8002f2e:	2201      	movs	r2, #1
 8002f30:	2101      	movs	r1, #1
 8002f32:	4826      	ldr	r0, [pc, #152]	@ (8002fcc <SPI_WIFI_ResetModule+0xec>)
 8002f34:	f001 fac6 	bl	80044c4 <HAL_GPIO_WritePin>
      return -1;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3c:	e042      	b.n	8002fc4 <SPI_WIFI_ResetModule+0xe4>
    }
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	463a      	mov	r2, r7
 8002f42:	18d1      	adds	r1, r2, r3
 8002f44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4821      	ldr	r0, [pc, #132]	@ (8002fd0 <SPI_WIFI_ResetModule+0xf0>)
 8002f4c:	f003 fd24 	bl	8006998 <HAL_SPI_Receive>
 8002f50:	4603      	mov	r3, r0
 8002f52:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	3302      	adds	r3, #2
 8002f58:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8002f5a:	f000 fe7b 	bl	8003c54 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f68:	d202      	bcs.n	8002f70 <SPI_WIFI_ResetModule+0x90>
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <SPI_WIFI_ResetModule+0xa0>
    {
      WIFI_DISABLE_NSS();
 8002f70:	2201      	movs	r2, #1
 8002f72:	2101      	movs	r1, #1
 8002f74:	4815      	ldr	r0, [pc, #84]	@ (8002fcc <SPI_WIFI_ResetModule+0xec>)
 8002f76:	f001 faa5 	bl	80044c4 <HAL_GPIO_WritePin>
      return -1;
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	e021      	b.n	8002fc4 <SPI_WIFI_ResetModule+0xe4>
  while (WIFI_IS_CMDDATA_READY())
 8002f80:	2102      	movs	r1, #2
 8002f82:	4812      	ldr	r0, [pc, #72]	@ (8002fcc <SPI_WIFI_ResetModule+0xec>)
 8002f84:	f001 fa86 	bl	8004494 <HAL_GPIO_ReadPin>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d0cc      	beq.n	8002f28 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8002f8e:	2201      	movs	r2, #1
 8002f90:	2101      	movs	r1, #1
 8002f92:	480e      	ldr	r0, [pc, #56]	@ (8002fcc <SPI_WIFI_ResetModule+0xec>)
 8002f94:	f001 fa96 	bl	80044c4 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002f98:	783b      	ldrb	r3, [r7, #0]
 8002f9a:	2b15      	cmp	r3, #21
 8002f9c:	d10e      	bne.n	8002fbc <SPI_WIFI_ResetModule+0xdc>
 8002f9e:	787b      	ldrb	r3, [r7, #1]
 8002fa0:	2b15      	cmp	r3, #21
 8002fa2:	d10b      	bne.n	8002fbc <SPI_WIFI_ResetModule+0xdc>
 8002fa4:	78bb      	ldrb	r3, [r7, #2]
 8002fa6:	2b0d      	cmp	r3, #13
 8002fa8:	d108      	bne.n	8002fbc <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002faa:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002fac:	2b0a      	cmp	r3, #10
 8002fae:	d105      	bne.n	8002fbc <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002fb0:	793b      	ldrb	r3, [r7, #4]
 8002fb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8002fb4:	d102      	bne.n	8002fbc <SPI_WIFI_ResetModule+0xdc>
 8002fb6:	797b      	ldrb	r3, [r7, #5]
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d002      	beq.n	8002fc2 <SPI_WIFI_ResetModule+0xe2>
  {
    return -1;
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc0:	e000      	b.n	8002fc4 <SPI_WIFI_ResetModule+0xe4>
  }
  return 0;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	48001000 	.word	0x48001000
 8002fd0:	20000d44 	.word	0x20000d44

08002fd4 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8002fd8:	4802      	ldr	r0, [pc, #8]	@ (8002fe4 <SPI_WIFI_DeInit+0x10>)
 8002fda:	f003 fcb5 	bl	8006948 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000d44 	.word	0x20000d44

08002fe8 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002ff0:	f000 fe30 	bl	8003c54 <HAL_GetTick>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002ff8:	e00a      	b.n	8003010 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002ffa:	f000 fe2b 	bl	8003c54 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1ad2      	subs	r2, r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	d902      	bls.n	8003010 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
 800300e:	e007      	b.n	8003020 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8003010:	2102      	movs	r1, #2
 8003012:	4805      	ldr	r0, [pc, #20]	@ (8003028 <wait_cmddata_rdy_high+0x40>)
 8003014:	f001 fa3e 	bl	8004494 <HAL_GPIO_ReadPin>
 8003018:	4603      	mov	r3, r0
 800301a:	2b01      	cmp	r3, #1
 800301c:	d1ed      	bne.n	8002ffa <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	48001000 	.word	0x48001000

0800302c <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8003034:	f000 fe0e 	bl	8003c54 <HAL_GetTick>
 8003038:	4603      	mov	r3, r0
 800303a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 800303c:	e00a      	b.n	8003054 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800303e:	f000 fe09 	bl	8003c54 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1ad2      	subs	r2, r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	429a      	cmp	r2, r3
 800304c:	d902      	bls.n	8003054 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
 8003052:	e004      	b.n	800305e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8003054:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <wait_cmddata_rdy_rising_event+0x3c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d0f0      	beq.n	800303e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800305c:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000db0 	.word	0x20000db0

0800306c <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8003074:	f000 fdee 	bl	8003c54 <HAL_GetTick>
 8003078:	4603      	mov	r3, r0
 800307a:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 800307c:	e00a      	b.n	8003094 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800307e:	f000 fde9 	bl	8003c54 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1ad2      	subs	r2, r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	429a      	cmp	r2, r3
 800308c:	d902      	bls.n	8003094 <wait_spi_rx_event+0x28>
    {
      return -1;
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
 8003092:	e004      	b.n	800309e <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8003094:	4b04      	ldr	r3, [pc, #16]	@ (80030a8 <wait_spi_rx_event+0x3c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d0f0      	beq.n	800307e <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800309c:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000da8 	.word	0x20000da8

080030ac <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80030b4:	f000 fdce 	bl	8003c54 <HAL_GetTick>
 80030b8:	4603      	mov	r3, r0
 80030ba:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 80030bc:	e00a      	b.n	80030d4 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80030be:	f000 fdc9 	bl	8003c54 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1ad2      	subs	r2, r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d902      	bls.n	80030d4 <wait_spi_tx_event+0x28>
    {
      return -1;
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295
 80030d2:	e004      	b.n	80030de <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 80030d4:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <wait_spi_tx_event+0x3c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d0f0      	beq.n	80030be <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 80030dc:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000dac 	.word	0x20000dac

080030ec <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	460b      	mov	r3, r1
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 80030fe:	2201      	movs	r2, #1
 8003100:	2101      	movs	r1, #1
 8003102:	4834      	ldr	r0, [pc, #208]	@ (80031d4 <SPI_WIFI_ReceiveData+0xe8>)
 8003104:	f001 f9de 	bl	80044c4 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8003108:	2003      	movs	r0, #3
 800310a:	f000 f8e3 	bl	80032d4 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff8b 	bl	800302c <wait_cmddata_rdy_rising_event>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	da02      	bge.n	8003122 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800311c:	f06f 0302 	mvn.w	r3, #2
 8003120:	e054      	b.n	80031cc <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8003122:	2200      	movs	r2, #0
 8003124:	2101      	movs	r1, #1
 8003126:	482b      	ldr	r0, [pc, #172]	@ (80031d4 <SPI_WIFI_ReceiveData+0xe8>)
 8003128:	f001 f9cc 	bl	80044c4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800312c:	200f      	movs	r0, #15
 800312e:	f000 f8d1 	bl	80032d4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8003132:	e03d      	b.n	80031b0 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8003134:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003138:	897b      	ldrh	r3, [r7, #10]
 800313a:	429a      	cmp	r2, r3
 800313c:	db02      	blt.n	8003144 <SPI_WIFI_ReceiveData+0x58>
 800313e:	897b      	ldrh	r3, [r7, #10]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d13c      	bne.n	80031be <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8003144:	4b24      	ldr	r3, [pc, #144]	@ (80031d8 <SPI_WIFI_ReceiveData+0xec>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	2201      	movs	r2, #1
 8003150:	4619      	mov	r1, r3
 8003152:	4822      	ldr	r0, [pc, #136]	@ (80031dc <SPI_WIFI_ReceiveData+0xf0>)
 8003154:	f004 fa00 	bl	8007558 <HAL_SPI_Receive_IT>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800315e:	2201      	movs	r2, #1
 8003160:	2101      	movs	r1, #1
 8003162:	481c      	ldr	r0, [pc, #112]	@ (80031d4 <SPI_WIFI_ReceiveData+0xe8>)
 8003164:	f001 f9ae 	bl	80044c4 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8003168:	f04f 33ff 	mov.w	r3, #4294967295
 800316c:	e02e      	b.n	80031cc <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff7b 	bl	800306c <wait_spi_rx_event>

      pData[0] = tmp[0];
 8003176:	7d3a      	ldrb	r2, [r7, #20]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3301      	adds	r3, #1
 8003180:	7d7a      	ldrb	r2, [r7, #21]
 8003182:	701a      	strb	r2, [r3, #0]
      length += 2;
 8003184:	8afb      	ldrh	r3, [r7, #22]
 8003186:	3302      	adds	r3, #2
 8003188:	b29b      	uxth	r3, r3
 800318a:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3302      	adds	r3, #2
 8003190:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 8003192:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003196:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800319a:	db09      	blt.n	80031b0 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800319c:	2201      	movs	r2, #1
 800319e:	2101      	movs	r1, #1
 80031a0:	480c      	ldr	r0, [pc, #48]	@ (80031d4 <SPI_WIFI_ReceiveData+0xe8>)
 80031a2:	f001 f98f 	bl	80044c4 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80031a6:	f7ff fe9b 	bl	8002ee0 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80031aa:	f06f 0303 	mvn.w	r3, #3
 80031ae:	e00d      	b.n	80031cc <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80031b0:	2102      	movs	r1, #2
 80031b2:	4808      	ldr	r0, [pc, #32]	@ (80031d4 <SPI_WIFI_ReceiveData+0xe8>)
 80031b4:	f001 f96e 	bl	8004494 <HAL_GPIO_ReadPin>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d0ba      	beq.n	8003134 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80031be:	2201      	movs	r2, #1
 80031c0:	2101      	movs	r1, #1
 80031c2:	4804      	ldr	r0, [pc, #16]	@ (80031d4 <SPI_WIFI_ReceiveData+0xe8>)
 80031c4:	f001 f97e 	bl	80044c4 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80031c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	48001000 	.word	0x48001000
 80031d8:	20000da8 	.word	0x20000da8
 80031dc:	20000d44 	.word	0x20000d44

080031e0 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	460b      	mov	r3, r1
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fef9 	bl	8002fe8 <wait_cmddata_rdy_high>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	da02      	bge.n	8003202 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003200:	e04f      	b.n	80032a2 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8003202:	4b2a      	ldr	r3, [pc, #168]	@ (80032ac <SPI_WIFI_SendData+0xcc>)
 8003204:	2201      	movs	r2, #1
 8003206:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8003208:	2200      	movs	r2, #0
 800320a:	2101      	movs	r1, #1
 800320c:	4828      	ldr	r0, [pc, #160]	@ (80032b0 <SPI_WIFI_SendData+0xd0>)
 800320e:	f001 f959 	bl	80044c4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8003212:	200f      	movs	r0, #15
 8003214:	f000 f85e 	bl	80032d4 <SPI_WIFI_DelayUs>
  if (len > 1)
 8003218:	897b      	ldrh	r3, [r7, #10]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d919      	bls.n	8003252 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 800321e:	4b25      	ldr	r3, [pc, #148]	@ (80032b4 <SPI_WIFI_SendData+0xd4>)
 8003220:	2201      	movs	r2, #1
 8003222:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8003224:	897b      	ldrh	r3, [r7, #10]
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	b29b      	uxth	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	68f9      	ldr	r1, [r7, #12]
 800322e:	4822      	ldr	r0, [pc, #136]	@ (80032b8 <SPI_WIFI_SendData+0xd8>)
 8003230:	f004 f8f6 	bl	8007420 <HAL_SPI_Transmit_IT>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d007      	beq.n	800324a <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800323a:	2201      	movs	r2, #1
 800323c:	2101      	movs	r1, #1
 800323e:	481c      	ldr	r0, [pc, #112]	@ (80032b0 <SPI_WIFI_SendData+0xd0>)
 8003240:	f001 f940 	bl	80044c4 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
 8003248:	e02b      	b.n	80032a2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff2d 	bl	80030ac <wait_spi_tx_event>
  }

  if (len & 1)
 8003252:	897b      	ldrh	r3, [r7, #10]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 800325c:	897b      	ldrh	r3, [r7, #10]
 800325e:	3b01      	subs	r3, #1
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8003268:	230a      	movs	r3, #10
 800326a:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800326c:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <SPI_WIFI_SendData+0xd4>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	2201      	movs	r2, #1
 8003278:	4619      	mov	r1, r3
 800327a:	480f      	ldr	r0, [pc, #60]	@ (80032b8 <SPI_WIFI_SendData+0xd8>)
 800327c:	f004 f8d0 	bl	8007420 <HAL_SPI_Transmit_IT>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8003286:	2201      	movs	r2, #1
 8003288:	2101      	movs	r1, #1
 800328a:	4809      	ldr	r0, [pc, #36]	@ (80032b0 <SPI_WIFI_SendData+0xd0>)
 800328c:	f001 f91a 	bl	80044c4 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8003290:	f04f 33ff 	mov.w	r3, #4294967295
 8003294:	e005      	b.n	80032a2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff07 	bl	80030ac <wait_spi_tx_event>
  }
  return len;
 800329e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000db0 	.word	0x20000db0
 80032b0:	48001000 	.word	0x48001000
 80032b4:	20000dac 	.word	0x20000dac
 80032b8:	20000d44 	.word	0x20000d44

080032bc <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fcd1 	bl	8003c6c <HAL_Delay>
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 80032e4:	4b20      	ldr	r3, [pc, #128]	@ (8003368 <SPI_WIFI_DelayUs+0x94>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d122      	bne.n	8003332 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 80032ec:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <SPI_WIFI_DelayUs+0x98>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003370 <SPI_WIFI_DelayUs+0x9c>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	099b      	lsrs	r3, r3, #6
 80032f8:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8003302:	f000 fca7 	bl	8003c54 <HAL_GetTick>
 8003306:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8003308:	e002      	b.n	8003310 <SPI_WIFI_DelayUs+0x3c>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	3b01      	subs	r3, #1
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f9      	bne.n	800330a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8003316:	f000 fc9d 	bl	8003c54 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	4a11      	ldr	r2, [pc, #68]	@ (8003368 <SPI_WIFI_DelayUs+0x94>)
 8003322:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8003324:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <SPI_WIFI_DelayUs+0x94>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <SPI_WIFI_DelayUs+0x5e>
 800332c:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <SPI_WIFI_DelayUs+0x94>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8003332:	4b0e      	ldr	r3, [pc, #56]	@ (800336c <SPI_WIFI_DelayUs+0x98>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a0f      	ldr	r2, [pc, #60]	@ (8003374 <SPI_WIFI_DelayUs+0xa0>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	0c9a      	lsrs	r2, r3, #18
 800333e:	4b0a      	ldr	r3, [pc, #40]	@ (8003368 <SPI_WIFI_DelayUs+0x94>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	fb02 f303 	mul.w	r3, r2, r3
 8003350:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8003352:	e002      	b.n	800335a <SPI_WIFI_DelayUs+0x86>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	3b01      	subs	r3, #1
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f9      	bne.n	8003354 <SPI_WIFI_DelayUs+0x80>
  return;
 8003360:	bf00      	nop
}
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000db4 	.word	0x20000db4
 800336c:	2000000c 	.word	0x2000000c
 8003370:	10624dd3 	.word	0x10624dd3
 8003374:	431bde83 	.word	0x431bde83

08003378 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8003380:	4b06      	ldr	r3, [pc, #24]	@ (800339c <HAL_SPI_RxCpltCallback+0x24>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8003388:	4b04      	ldr	r3, [pc, #16]	@ (800339c <HAL_SPI_RxCpltCallback+0x24>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
  }
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000da8 	.word	0x20000da8

080033a0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80033a8:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <HAL_SPI_TxCpltCallback+0x24>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 80033b0:	4b04      	ldr	r3, [pc, #16]	@ (80033c4 <HAL_SPI_TxCpltCallback+0x24>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
  }
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000dac 	.word	0x20000dac

080033c8 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 80033cc:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <SPI_WIFI_ISR+0x1c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d102      	bne.n	80033da <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80033d4:	4b03      	ldr	r3, [pc, #12]	@ (80033e4 <SPI_WIFI_ISR+0x1c>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
   }
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	20000db0 	.word	0x20000db0

080033e8 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <WIFI_Init+0x40>)
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <WIFI_Init+0x44>)
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003430 <WIFI_Init+0x48>)
 80033fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003434 <WIFI_Init+0x4c>)
 80033fe:	490e      	ldr	r1, [pc, #56]	@ (8003438 <WIFI_Init+0x50>)
 8003400:	480e      	ldr	r0, [pc, #56]	@ (800343c <WIFI_Init+0x54>)
 8003402:	f7ff f8b1 	bl	8002568 <ES_WIFI_RegisterBusIO>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d107      	bne.n	800341c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800340c:	480b      	ldr	r0, [pc, #44]	@ (800343c <WIFI_Init+0x54>)
 800340e:	f7ff f877 	bl	8002500 <ES_WIFI_Init>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800341c:	79fb      	ldrb	r3, [r7, #7]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	080030ed 	.word	0x080030ed
 800342c:	080031e1 	.word	0x080031e1
 8003430:	080032bd 	.word	0x080032bd
 8003434:	08002fd5 	.word	0x08002fd5
 8003438:	08002e25 	.word	0x08002e25
 800343c:	20000db8 	.word	0x20000db8

08003440 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	4613      	mov	r3, r2
 800344c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	4809      	ldr	r0, [pc, #36]	@ (8003480 <WIFI_Connect+0x40>)
 800345a:	f7ff f8b9 	bl	80025d0 <ES_WIFI_Connect>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d107      	bne.n	8003474 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003464:	4806      	ldr	r0, [pc, #24]	@ (8003480 <WIFI_Connect+0x40>)
 8003466:	f7ff f95b 	bl	8002720 <ES_WIFI_GetNetworkSettings>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8003474:	7dfb      	ldrb	r3, [r7, #23]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000db8 	.word	0x20000db8

08003484 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00d      	beq.n	80034b6 <WIFI_GetMAC_Address+0x32>
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	461a      	mov	r2, r3
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4806      	ldr	r0, [pc, #24]	@ (80034c0 <WIFI_GetMAC_Address+0x3c>)
 80034a8:	f7ff f964 	bl	8002774 <ES_WIFI_GetMACAddress>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000db8 	.word	0x20000db8

080034c4 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d010      	beq.n	80034fc <WIFI_GetIP_Address+0x38>
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d90d      	bls.n	80034fc <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80034e0:	4809      	ldr	r0, [pc, #36]	@ (8003508 <WIFI_GetIP_Address+0x44>)
 80034e2:	f7ff f8ed 	bl	80026c0 <ES_WIFI_IsConnected>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d107      	bne.n	80034fc <WIFI_GetIP_Address+0x38>
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80034ec:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <WIFI_GetIP_Address+0x44>)
 80034ee:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 80034f2:	461a      	mov	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000db8 	.word	0x20000db8

0800350c <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	@ 0x28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	460b      	mov	r3, r1
 800351a:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8003528:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800352a:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800352c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800352e:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003530:	7afb      	ldrb	r3, [r7, #11]
 8003532:	2b00      	cmp	r3, #0
 8003534:	bf14      	ite	ne
 8003536:	2301      	movne	r3, #1
 8003538:	2300      	moveq	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	3301      	adds	r3, #1
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	3302      	adds	r3, #2
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	3303      	adds	r3, #3
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	767b      	strb	r3, [r7, #25]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800355c:	f107 0310 	add.w	r3, r7, #16
 8003560:	4619      	mov	r1, r3
 8003562:	4807      	ldr	r0, [pc, #28]	@ (8003580 <WIFI_OpenClientConnection+0x74>)
 8003564:	f7ff f93c 	bl	80027e0 <ES_WIFI_StartClientConnection>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8003574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003578:	4618      	mov	r0, r3
 800357a:	3728      	adds	r7, #40	@ 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000db8 	.word	0x20000db8

08003584 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	b2d9      	uxtb	r1, r3
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	4613      	mov	r3, r2
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	4806      	ldr	r0, [pc, #24]	@ (80035c4 <WIFI_SendData+0x40>)
 80035ac:	f7ff fa02 	bl	80029b4 <ES_WIFI_SendData>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000db8 	.word	0x20000db8

080035c8 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	b2d9      	uxtb	r1, r3
 80035e0:	88fa      	ldrh	r2, [r7, #6]
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	4613      	mov	r3, r2
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	4806      	ldr	r0, [pc, #24]	@ (8003608 <WIFI_ReceiveData+0x40>)
 80035f0:	f7ff fa9c 	bl	8002b2c <ES_WIFI_ReceiveData>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000db8 	.word	0x20000db8

0800360c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	@ 0x28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003614:	4b27      	ldr	r3, [pc, #156]	@ (80036b4 <I2Cx_MspInit+0xa8>)
 8003616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003618:	4a26      	ldr	r2, [pc, #152]	@ (80036b4 <I2Cx_MspInit+0xa8>)
 800361a:	f043 0302 	orr.w	r3, r3, #2
 800361e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003620:	4b24      	ldr	r3, [pc, #144]	@ (80036b4 <I2Cx_MspInit+0xa8>)
 8003622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800362c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003630:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003632:	2312      	movs	r3, #18
 8003634:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003636:	2301      	movs	r3, #1
 8003638:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363a:	2303      	movs	r3, #3
 800363c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800363e:	2304      	movs	r3, #4
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	481b      	ldr	r0, [pc, #108]	@ (80036b8 <I2Cx_MspInit+0xac>)
 800364a:	f000 fc85 	bl	8003f58 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800364e:	f107 0314 	add.w	r3, r7, #20
 8003652:	4619      	mov	r1, r3
 8003654:	4818      	ldr	r0, [pc, #96]	@ (80036b8 <I2Cx_MspInit+0xac>)
 8003656:	f000 fc7f 	bl	8003f58 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800365a:	4b16      	ldr	r3, [pc, #88]	@ (80036b4 <I2Cx_MspInit+0xa8>)
 800365c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365e:	4a15      	ldr	r2, [pc, #84]	@ (80036b4 <I2Cx_MspInit+0xa8>)
 8003660:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003664:	6593      	str	r3, [r2, #88]	@ 0x58
 8003666:	4b13      	ldr	r3, [pc, #76]	@ (80036b4 <I2Cx_MspInit+0xa8>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003672:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <I2Cx_MspInit+0xa8>)
 8003674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003676:	4a0f      	ldr	r2, [pc, #60]	@ (80036b4 <I2Cx_MspInit+0xa8>)
 8003678:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800367c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800367e:	4b0d      	ldr	r3, [pc, #52]	@ (80036b4 <I2Cx_MspInit+0xa8>)
 8003680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003682:	4a0c      	ldr	r2, [pc, #48]	@ (80036b4 <I2Cx_MspInit+0xa8>)
 8003684:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003688:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800368a:	2200      	movs	r2, #0
 800368c:	210f      	movs	r1, #15
 800368e:	2021      	movs	r0, #33	@ 0x21
 8003690:	f000 fbeb 	bl	8003e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003694:	2021      	movs	r0, #33	@ 0x21
 8003696:	f000 fc04 	bl	8003ea2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800369a:	2200      	movs	r2, #0
 800369c:	210f      	movs	r1, #15
 800369e:	2022      	movs	r0, #34	@ 0x22
 80036a0:	f000 fbe3 	bl	8003e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80036a4:	2022      	movs	r0, #34	@ 0x22
 80036a6:	f000 fbfc 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
}
 80036aa:	bf00      	nop
 80036ac:	3728      	adds	r7, #40	@ 0x28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
 80036b8:	48000400 	.word	0x48000400

080036bc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a12      	ldr	r2, [pc, #72]	@ (8003710 <I2Cx_Init+0x54>)
 80036c8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a11      	ldr	r2, [pc, #68]	@ (8003714 <I2Cx_Init+0x58>)
 80036ce:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff89 	bl	800360c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 ff12 	bl	8004524 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003700:	2100      	movs	r1, #0
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f001 fcc8 	bl	8005098 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40005800 	.word	0x40005800
 8003714:	00702681 	.word	0x00702681

08003718 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	@ 0x28
 800371c:	af04      	add	r7, sp, #16
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	461a      	mov	r2, r3
 8003726:	4603      	mov	r3, r0
 8003728:	72fb      	strb	r3, [r7, #11]
 800372a:	460b      	mov	r3, r1
 800372c:	813b      	strh	r3, [r7, #8]
 800372e:	4613      	mov	r3, r2
 8003730:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003736:	7afb      	ldrb	r3, [r7, #11]
 8003738:	b299      	uxth	r1, r3
 800373a:	88f8      	ldrh	r0, [r7, #6]
 800373c:	893a      	ldrh	r2, [r7, #8]
 800373e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003742:	9302      	str	r3, [sp, #8]
 8003744:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	4603      	mov	r3, r0
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f001 f8c6 	bl	80048e0 <HAL_I2C_Mem_Read>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800375e:	7afb      	ldrb	r3, [r7, #11]
 8003760:	4619      	mov	r1, r3
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f832 	bl	80037cc <I2Cx_Error>
  }
  return status;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b08a      	sub	sp, #40	@ 0x28
 8003776:	af04      	add	r7, sp, #16
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	4608      	mov	r0, r1
 800377c:	4611      	mov	r1, r2
 800377e:	461a      	mov	r2, r3
 8003780:	4603      	mov	r3, r0
 8003782:	72fb      	strb	r3, [r7, #11]
 8003784:	460b      	mov	r3, r1
 8003786:	813b      	strh	r3, [r7, #8]
 8003788:	4613      	mov	r3, r2
 800378a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003790:	7afb      	ldrb	r3, [r7, #11]
 8003792:	b299      	uxth	r1, r3
 8003794:	88f8      	ldrh	r0, [r7, #6]
 8003796:	893a      	ldrh	r2, [r7, #8]
 8003798:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800379c:	9302      	str	r3, [sp, #8]
 800379e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	4603      	mov	r3, r0
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 ff85 	bl	80046b8 <HAL_I2C_Mem_Write>
 80037ae:	4603      	mov	r3, r0
 80037b0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80037b8:	7afb      	ldrb	r3, [r7, #11]
 80037ba:	4619      	mov	r1, r3
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f805 	bl	80037cc <I2Cx_Error>
  }
  return status;
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 ff3e 	bl	800465a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ff6c 	bl	80036bc <I2Cx_Init>
}
 80037e4:	bf00      	nop
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80037f0:	4802      	ldr	r0, [pc, #8]	@ (80037fc <SENSOR_IO_Init+0x10>)
 80037f2:	f7ff ff63 	bl	80036bc <I2Cx_Init>
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200016b8 	.word	0x200016b8

08003800 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af02      	add	r7, sp, #8
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
 800380a:	460b      	mov	r3, r1
 800380c:	71bb      	strb	r3, [r7, #6]
 800380e:	4613      	mov	r3, r2
 8003810:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003812:	79bb      	ldrb	r3, [r7, #6]
 8003814:	b29a      	uxth	r2, r3
 8003816:	79f9      	ldrb	r1, [r7, #7]
 8003818:	2301      	movs	r3, #1
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	1d7b      	adds	r3, r7, #5
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	2301      	movs	r3, #1
 8003822:	4803      	ldr	r0, [pc, #12]	@ (8003830 <SENSOR_IO_Write+0x30>)
 8003824:	f7ff ffa5 	bl	8003772 <I2Cx_WriteMultiple>
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	200016b8 	.word	0x200016b8

08003834 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af02      	add	r7, sp, #8
 800383a:	4603      	mov	r3, r0
 800383c:	460a      	mov	r2, r1
 800383e:	71fb      	strb	r3, [r7, #7]
 8003840:	4613      	mov	r3, r2
 8003842:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003848:	79bb      	ldrb	r3, [r7, #6]
 800384a:	b29a      	uxth	r2, r3
 800384c:	79f9      	ldrb	r1, [r7, #7]
 800384e:	2301      	movs	r3, #1
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	f107 030f 	add.w	r3, r7, #15
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2301      	movs	r3, #1
 800385a:	4804      	ldr	r0, [pc, #16]	@ (800386c <SENSOR_IO_Read+0x38>)
 800385c:	f7ff ff5c 	bl	8003718 <I2Cx_ReadMultiple>

  return read_value;
 8003860:	7bfb      	ldrb	r3, [r7, #15]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	200016b8 	.word	0x200016b8

08003870 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af02      	add	r7, sp, #8
 8003876:	603a      	str	r2, [r7, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	4603      	mov	r3, r0
 800387c:	71fb      	strb	r3, [r7, #7]
 800387e:	460b      	mov	r3, r1
 8003880:	71bb      	strb	r3, [r7, #6]
 8003882:	4613      	mov	r3, r2
 8003884:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003886:	79bb      	ldrb	r3, [r7, #6]
 8003888:	b29a      	uxth	r2, r3
 800388a:	79f9      	ldrb	r1, [r7, #7]
 800388c:	88bb      	ldrh	r3, [r7, #4]
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	2301      	movs	r3, #1
 8003896:	4804      	ldr	r0, [pc, #16]	@ (80038a8 <SENSOR_IO_ReadMultiple+0x38>)
 8003898:	f7ff ff3e 	bl	8003718 <I2Cx_ReadMultiple>
 800389c:	4603      	mov	r3, r0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	200016b8 	.word	0x200016b8

080038ac <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80038b6:	2300      	movs	r3, #0
 80038b8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80038ba:	4b19      	ldr	r3, [pc, #100]	@ (8003920 <BSP_ACCELERO_Init+0x74>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	4798      	blx	r3
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b6a      	cmp	r3, #106	@ 0x6a
 80038c4:	d002      	beq.n	80038cc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	e024      	b.n	8003916 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80038cc:	4b15      	ldr	r3, [pc, #84]	@ (8003924 <BSP_ACCELERO_Init+0x78>)
 80038ce:	4a14      	ldr	r2, [pc, #80]	@ (8003920 <BSP_ACCELERO_Init+0x74>)
 80038d0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80038d2:	2330      	movs	r3, #48	@ 0x30
 80038d4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80038da:	2300      	movs	r3, #0
 80038dc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80038de:	2340      	movs	r3, #64	@ 0x40
 80038e0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80038ea:	797a      	ldrb	r2, [r7, #5]
 80038ec:	7abb      	ldrb	r3, [r7, #10]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80038f4:	7a3b      	ldrb	r3, [r7, #8]
 80038f6:	f043 0304 	orr.w	r3, r3, #4
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	b21a      	sxth	r2, r3
 8003900:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	b21b      	sxth	r3, r3
 8003908:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800390a:	4b06      	ldr	r3, [pc, #24]	@ (8003924 <BSP_ACCELERO_Init+0x78>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	89ba      	ldrh	r2, [r7, #12]
 8003912:	4610      	mov	r0, r2
 8003914:	4798      	blx	r3
  }  

  return ret;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000010 	.word	0x20000010
 8003924:	2000170c 	.word	0x2000170c

08003928 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8003930:	4b08      	ldr	r3, [pc, #32]	@ (8003954 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d009      	beq.n	800394c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003938:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	2b00      	cmp	r3, #0
 8003940:	d004      	beq.n	800394c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8003942:	4b04      	ldr	r3, [pc, #16]	@ (8003954 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
    }
  }
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	2000170c 	.word	0x2000170c

08003958 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003966:	2110      	movs	r1, #16
 8003968:	20d4      	movs	r0, #212	@ 0xd4
 800396a:	f7ff ff63 	bl	8003834 <SENSOR_IO_Read>
 800396e:	4603      	mov	r3, r0
 8003970:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003976:	7bbb      	ldrb	r3, [r7, #14]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800397e:	7bba      	ldrb	r2, [r7, #14]
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	4313      	orrs	r3, r2
 8003984:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003986:	7bbb      	ldrb	r3, [r7, #14]
 8003988:	461a      	mov	r2, r3
 800398a:	2110      	movs	r1, #16
 800398c:	20d4      	movs	r0, #212	@ 0xd4
 800398e:	f7ff ff37 	bl	8003800 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003992:	2112      	movs	r1, #18
 8003994:	20d4      	movs	r0, #212	@ 0xd4
 8003996:	f7ff ff4d 	bl	8003834 <SENSOR_IO_Read>
 800399a:	4603      	mov	r3, r0
 800399c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	0a1b      	lsrs	r3, r3, #8
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80039a6:	7bbb      	ldrb	r3, [r7, #14]
 80039a8:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80039ac:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80039ae:	7bba      	ldrb	r2, [r7, #14]
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80039b6:	7bbb      	ldrb	r3, [r7, #14]
 80039b8:	461a      	mov	r2, r3
 80039ba:	2112      	movs	r1, #18
 80039bc:	20d4      	movs	r0, #212	@ 0xd4
 80039be:	f7ff ff1f 	bl	8003800 <SENSOR_IO_Write>
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80039d0:	2300      	movs	r3, #0
 80039d2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80039d4:	2110      	movs	r1, #16
 80039d6:	20d4      	movs	r0, #212	@ 0xd4
 80039d8:	f7ff ff2c 	bl	8003834 <SENSOR_IO_Read>
 80039dc:	4603      	mov	r3, r0
 80039de:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	461a      	mov	r2, r3
 80039ec:	2110      	movs	r1, #16
 80039ee:	20d4      	movs	r0, #212	@ 0xd4
 80039f0:	f7ff ff06 	bl	8003800 <SENSOR_IO_Write>
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003a00:	f7ff fef4 	bl	80037ec <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003a04:	210f      	movs	r1, #15
 8003a06:	20d4      	movs	r0, #212	@ 0xd4
 8003a08:	f7ff ff14 	bl	8003834 <SENSOR_IO_Read>
 8003a0c:	4603      	mov	r3, r0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	4603      	mov	r3, r0
 8003a1a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003a20:	2115      	movs	r1, #21
 8003a22:	20d4      	movs	r0, #212	@ 0xd4
 8003a24:	f7ff ff06 	bl	8003834 <SENSOR_IO_Read>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	f023 0310 	bic.w	r3, r3, #16
 8003a32:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	f043 0310 	orr.w	r3, r3, #16
 8003a40:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	461a      	mov	r2, r3
 8003a46:	2115      	movs	r1, #21
 8003a48:	20d4      	movs	r0, #212	@ 0xd4
 8003a4a:	f7ff fed9 	bl	8003800 <SENSOR_IO_Write>
}
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003a6e:	2110      	movs	r1, #16
 8003a70:	20d4      	movs	r0, #212	@ 0xd4
 8003a72:	f7ff fedf 	bl	8003834 <SENSOR_IO_Read>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003a7a:	f107 0208 	add.w	r2, r7, #8
 8003a7e:	2306      	movs	r3, #6
 8003a80:	2128      	movs	r1, #40	@ 0x28
 8003a82:	20d4      	movs	r0, #212	@ 0xd4
 8003a84:	f7ff fef4 	bl	8003870 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	e01a      	b.n	8003ac4 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003a8e:	7ffb      	ldrb	r3, [r7, #31]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	3301      	adds	r3, #1
 8003a94:	3320      	adds	r3, #32
 8003a96:	443b      	add	r3, r7
 8003a98:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	7ffa      	ldrb	r2, [r7, #31]
 8003aa2:	0052      	lsls	r2, r2, #1
 8003aa4:	3220      	adds	r2, #32
 8003aa6:	443a      	add	r2, r7
 8003aa8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003aac:	4413      	add	r3, r2
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	7ffb      	ldrb	r3, [r7, #31]
 8003ab2:	b212      	sxth	r2, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	3320      	adds	r3, #32
 8003ab8:	443b      	add	r3, r7
 8003aba:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003abe:	7ffb      	ldrb	r3, [r7, #31]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	7ffb      	ldrb	r3, [r7, #31]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d9e1      	bls.n	8003a8e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b0c      	cmp	r3, #12
 8003ad2:	d829      	bhi.n	8003b28 <LSM6DSL_AccReadXYZ+0xd0>
 8003ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8003adc <LSM6DSL_AccReadXYZ+0x84>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003b11 	.word	0x08003b11
 8003ae0:	08003b29 	.word	0x08003b29
 8003ae4:	08003b29 	.word	0x08003b29
 8003ae8:	08003b29 	.word	0x08003b29
 8003aec:	08003b23 	.word	0x08003b23
 8003af0:	08003b29 	.word	0x08003b29
 8003af4:	08003b29 	.word	0x08003b29
 8003af8:	08003b29 	.word	0x08003b29
 8003afc:	08003b17 	.word	0x08003b17
 8003b00:	08003b29 	.word	0x08003b29
 8003b04:	08003b29 	.word	0x08003b29
 8003b08:	08003b29 	.word	0x08003b29
 8003b0c:	08003b1d 	.word	0x08003b1d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003b10:	4b18      	ldr	r3, [pc, #96]	@ (8003b74 <LSM6DSL_AccReadXYZ+0x11c>)
 8003b12:	61bb      	str	r3, [r7, #24]
    break;
 8003b14:	e008      	b.n	8003b28 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003b16:	4b18      	ldr	r3, [pc, #96]	@ (8003b78 <LSM6DSL_AccReadXYZ+0x120>)
 8003b18:	61bb      	str	r3, [r7, #24]
    break;
 8003b1a:	e005      	b.n	8003b28 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003b1c:	4b17      	ldr	r3, [pc, #92]	@ (8003b7c <LSM6DSL_AccReadXYZ+0x124>)
 8003b1e:	61bb      	str	r3, [r7, #24]
    break;
 8003b20:	e002      	b.n	8003b28 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003b22:	4b17      	ldr	r3, [pc, #92]	@ (8003b80 <LSM6DSL_AccReadXYZ+0x128>)
 8003b24:	61bb      	str	r3, [r7, #24]
    break;    
 8003b26:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e01a      	b.n	8003b64 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003b2e:	7ffb      	ldrb	r3, [r7, #31]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	3320      	adds	r3, #32
 8003b34:	443b      	add	r3, r7
 8003b36:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4a:	7ffb      	ldrb	r3, [r7, #31]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	4413      	add	r3, r2
 8003b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b56:	ee17 2a90 	vmov	r2, s15
 8003b5a:	b212      	sxth	r2, r2
 8003b5c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003b5e:	7ffb      	ldrb	r3, [r7, #31]
 8003b60:	3301      	adds	r3, #1
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	7ffb      	ldrb	r3, [r7, #31]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d9e1      	bls.n	8003b2e <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	3d79db23 	.word	0x3d79db23
 8003b78:	3df9db23 	.word	0x3df9db23
 8003b7c:	3e79db23 	.word	0x3e79db23
 8003b80:	3ef9db23 	.word	0x3ef9db23

08003b84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b8e:	2003      	movs	r0, #3
 8003b90:	f000 f960 	bl	8003e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b94:	200f      	movs	r0, #15
 8003b96:	f000 f80d 	bl	8003bb4 <HAL_InitTick>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	71fb      	strb	r3, [r7, #7]
 8003ba4:	e001      	b.n	8003baa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ba6:	f7fd fd73 	bl	8001690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003baa:	79fb      	ldrb	r3, [r7, #7]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003bc0:	4b17      	ldr	r3, [pc, #92]	@ (8003c20 <HAL_InitTick+0x6c>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d023      	beq.n	8003c10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003bc8:	4b16      	ldr	r3, [pc, #88]	@ (8003c24 <HAL_InitTick+0x70>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4b14      	ldr	r3, [pc, #80]	@ (8003c20 <HAL_InitTick+0x6c>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f96d 	bl	8003ebe <HAL_SYSTICK_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b0f      	cmp	r3, #15
 8003bee:	d809      	bhi.n	8003c04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf8:	f000 f937 	bl	8003e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8003c28 <HAL_InitTick+0x74>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e007      	b.n	8003c14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	e004      	b.n	8003c14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	e001      	b.n	8003c14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000048 	.word	0x20000048
 8003c24:	2000000c 	.word	0x2000000c
 8003c28:	20000044 	.word	0x20000044

08003c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c30:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <HAL_IncTick+0x20>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <HAL_IncTick+0x24>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a04      	ldr	r2, [pc, #16]	@ (8003c50 <HAL_IncTick+0x24>)
 8003c3e:	6013      	str	r3, [r2, #0]
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000048 	.word	0x20000048
 8003c50:	20001710 	.word	0x20001710

08003c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return uwTick;
 8003c58:	4b03      	ldr	r3, [pc, #12]	@ (8003c68 <HAL_GetTick+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20001710 	.word	0x20001710

08003c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c74:	f7ff ffee 	bl	8003c54 <HAL_GetTick>
 8003c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d005      	beq.n	8003c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003c86:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb0 <HAL_Delay+0x44>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c92:	bf00      	nop
 8003c94:	f7ff ffde 	bl	8003c54 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d8f7      	bhi.n	8003c94 <HAL_Delay+0x28>
  {
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000048 	.word	0x20000048

08003cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ce6:	4a04      	ldr	r2, [pc, #16]	@ (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	60d3      	str	r3, [r2, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d00:	4b04      	ldr	r3, [pc, #16]	@ (8003d14 <__NVIC_GetPriorityGrouping+0x18>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	f003 0307 	and.w	r3, r3, #7
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	db0b      	blt.n	8003d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	4907      	ldr	r1, [pc, #28]	@ (8003d50 <__NVIC_EnableIRQ+0x38>)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2001      	movs	r0, #1
 8003d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000e100 	.word	0xe000e100

08003d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	db0a      	blt.n	8003d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	490c      	ldr	r1, [pc, #48]	@ (8003da0 <__NVIC_SetPriority+0x4c>)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	0112      	lsls	r2, r2, #4
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	440b      	add	r3, r1
 8003d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d7c:	e00a      	b.n	8003d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	4908      	ldr	r1, [pc, #32]	@ (8003da4 <__NVIC_SetPriority+0x50>)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	3b04      	subs	r3, #4
 8003d8c:	0112      	lsls	r2, r2, #4
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	440b      	add	r3, r1
 8003d92:	761a      	strb	r2, [r3, #24]
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	e000e100 	.word	0xe000e100
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	@ 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f1c3 0307 	rsb	r3, r3, #7
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	bf28      	it	cs
 8003dc6:	2304      	movcs	r3, #4
 8003dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2b06      	cmp	r3, #6
 8003dd0:	d902      	bls.n	8003dd8 <NVIC_EncodePriority+0x30>
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3b03      	subs	r3, #3
 8003dd6:	e000      	b.n	8003dda <NVIC_EncodePriority+0x32>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43da      	mvns	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	401a      	ands	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df0:	f04f 31ff 	mov.w	r1, #4294967295
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfa:	43d9      	mvns	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	4313      	orrs	r3, r2
         );
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3724      	adds	r7, #36	@ 0x24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e20:	d301      	bcc.n	8003e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00f      	b.n	8003e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e26:	4a0a      	ldr	r2, [pc, #40]	@ (8003e50 <SysTick_Config+0x40>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e2e:	210f      	movs	r1, #15
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295
 8003e34:	f7ff ff8e 	bl	8003d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e38:	4b05      	ldr	r3, [pc, #20]	@ (8003e50 <SysTick_Config+0x40>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e3e:	4b04      	ldr	r3, [pc, #16]	@ (8003e50 <SysTick_Config+0x40>)
 8003e40:	2207      	movs	r2, #7
 8003e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	e000e010 	.word	0xe000e010

08003e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff29 	bl	8003cb4 <__NVIC_SetPriorityGrouping>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	4603      	mov	r3, r0
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e7c:	f7ff ff3e 	bl	8003cfc <__NVIC_GetPriorityGrouping>
 8003e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	f7ff ff8e 	bl	8003da8 <NVIC_EncodePriority>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff5d 	bl	8003d54 <__NVIC_SetPriority>
}
 8003e9a:	bf00      	nop
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff31 	bl	8003d18 <__NVIC_EnableIRQ>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ffa2 	bl	8003e10 <SysTick_Config>
 8003ecc:	4603      	mov	r3, r0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d005      	beq.n	8003efa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
 8003ef8:	e029      	b.n	8003f4e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 020e 	bic.w	r2, r2, #14
 8003f08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f003 021c 	and.w	r2, r3, #28
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	2101      	movs	r1, #1
 8003f28:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	4798      	blx	r3
    }
  }
  return status;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f66:	e17f      	b.n	8004268 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	fa01 f303 	lsl.w	r3, r1, r3
 8003f74:	4013      	ands	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8171 	beq.w	8004262 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d005      	beq.n	8003f98 <HAL_GPIO_Init+0x40>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d130      	bne.n	8003ffa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4013      	ands	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fce:	2201      	movs	r2, #1
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	f003 0201 	and.w	r2, r3, #1
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	2b03      	cmp	r3, #3
 8004004:	d118      	bne.n	8004038 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800400c:	2201      	movs	r2, #1
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	08db      	lsrs	r3, r3, #3
 8004022:	f003 0201 	and.w	r2, r3, #1
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b03      	cmp	r3, #3
 8004042:	d017      	beq.n	8004074 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	2203      	movs	r2, #3
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d123      	bne.n	80040c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	08da      	lsrs	r2, r3, #3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3208      	adds	r2, #8
 8004088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800408c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	220f      	movs	r2, #15
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	08da      	lsrs	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3208      	adds	r2, #8
 80040c2:	6939      	ldr	r1, [r7, #16]
 80040c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	2203      	movs	r2, #3
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 0203 	and.w	r2, r3, #3
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80ac 	beq.w	8004262 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800410a:	4b5f      	ldr	r3, [pc, #380]	@ (8004288 <HAL_GPIO_Init+0x330>)
 800410c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410e:	4a5e      	ldr	r2, [pc, #376]	@ (8004288 <HAL_GPIO_Init+0x330>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	6613      	str	r3, [r2, #96]	@ 0x60
 8004116:	4b5c      	ldr	r3, [pc, #368]	@ (8004288 <HAL_GPIO_Init+0x330>)
 8004118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004122:	4a5a      	ldr	r2, [pc, #360]	@ (800428c <HAL_GPIO_Init+0x334>)
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	089b      	lsrs	r3, r3, #2
 8004128:	3302      	adds	r3, #2
 800412a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800412e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	220f      	movs	r2, #15
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800414c:	d025      	beq.n	800419a <HAL_GPIO_Init+0x242>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a4f      	ldr	r2, [pc, #316]	@ (8004290 <HAL_GPIO_Init+0x338>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d01f      	beq.n	8004196 <HAL_GPIO_Init+0x23e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a4e      	ldr	r2, [pc, #312]	@ (8004294 <HAL_GPIO_Init+0x33c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d019      	beq.n	8004192 <HAL_GPIO_Init+0x23a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a4d      	ldr	r2, [pc, #308]	@ (8004298 <HAL_GPIO_Init+0x340>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d013      	beq.n	800418e <HAL_GPIO_Init+0x236>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a4c      	ldr	r2, [pc, #304]	@ (800429c <HAL_GPIO_Init+0x344>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00d      	beq.n	800418a <HAL_GPIO_Init+0x232>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a4b      	ldr	r2, [pc, #300]	@ (80042a0 <HAL_GPIO_Init+0x348>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d007      	beq.n	8004186 <HAL_GPIO_Init+0x22e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a4a      	ldr	r2, [pc, #296]	@ (80042a4 <HAL_GPIO_Init+0x34c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d101      	bne.n	8004182 <HAL_GPIO_Init+0x22a>
 800417e:	2306      	movs	r3, #6
 8004180:	e00c      	b.n	800419c <HAL_GPIO_Init+0x244>
 8004182:	2307      	movs	r3, #7
 8004184:	e00a      	b.n	800419c <HAL_GPIO_Init+0x244>
 8004186:	2305      	movs	r3, #5
 8004188:	e008      	b.n	800419c <HAL_GPIO_Init+0x244>
 800418a:	2304      	movs	r3, #4
 800418c:	e006      	b.n	800419c <HAL_GPIO_Init+0x244>
 800418e:	2303      	movs	r3, #3
 8004190:	e004      	b.n	800419c <HAL_GPIO_Init+0x244>
 8004192:	2302      	movs	r3, #2
 8004194:	e002      	b.n	800419c <HAL_GPIO_Init+0x244>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_GPIO_Init+0x244>
 800419a:	2300      	movs	r3, #0
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	f002 0203 	and.w	r2, r2, #3
 80041a2:	0092      	lsls	r2, r2, #2
 80041a4:	4093      	lsls	r3, r2
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041ac:	4937      	ldr	r1, [pc, #220]	@ (800428c <HAL_GPIO_Init+0x334>)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	089b      	lsrs	r3, r3, #2
 80041b2:	3302      	adds	r3, #2
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041ba:	4b3b      	ldr	r3, [pc, #236]	@ (80042a8 <HAL_GPIO_Init+0x350>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	43db      	mvns	r3, r3
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4013      	ands	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041de:	4a32      	ldr	r2, [pc, #200]	@ (80042a8 <HAL_GPIO_Init+0x350>)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041e4:	4b30      	ldr	r3, [pc, #192]	@ (80042a8 <HAL_GPIO_Init+0x350>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	43db      	mvns	r3, r3
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004208:	4a27      	ldr	r2, [pc, #156]	@ (80042a8 <HAL_GPIO_Init+0x350>)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800420e:	4b26      	ldr	r3, [pc, #152]	@ (80042a8 <HAL_GPIO_Init+0x350>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	43db      	mvns	r3, r3
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4013      	ands	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004232:	4a1d      	ldr	r2, [pc, #116]	@ (80042a8 <HAL_GPIO_Init+0x350>)
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004238:	4b1b      	ldr	r3, [pc, #108]	@ (80042a8 <HAL_GPIO_Init+0x350>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	43db      	mvns	r3, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4013      	ands	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800425c:	4a12      	ldr	r2, [pc, #72]	@ (80042a8 <HAL_GPIO_Init+0x350>)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	3301      	adds	r3, #1
 8004266:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	fa22 f303 	lsr.w	r3, r2, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	f47f ae78 	bne.w	8003f68 <HAL_GPIO_Init+0x10>
  }
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
 800428c:	40010000 	.word	0x40010000
 8004290:	48000400 	.word	0x48000400
 8004294:	48000800 	.word	0x48000800
 8004298:	48000c00 	.word	0x48000c00
 800429c:	48001000 	.word	0x48001000
 80042a0:	48001400 	.word	0x48001400
 80042a4:	48001800 	.word	0x48001800
 80042a8:	40010400 	.word	0x40010400

080042ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80042ba:	e0cd      	b.n	8004458 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80042bc:	2201      	movs	r2, #1
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	4013      	ands	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80c0 	beq.w	8004452 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80042d2:	4a68      	ldr	r2, [pc, #416]	@ (8004474 <HAL_GPIO_DeInit+0x1c8>)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	089b      	lsrs	r3, r3, #2
 80042d8:	3302      	adds	r3, #2
 80042da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042de:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	220f      	movs	r2, #15
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4013      	ands	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042fa:	d025      	beq.n	8004348 <HAL_GPIO_DeInit+0x9c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004478 <HAL_GPIO_DeInit+0x1cc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d01f      	beq.n	8004344 <HAL_GPIO_DeInit+0x98>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a5d      	ldr	r2, [pc, #372]	@ (800447c <HAL_GPIO_DeInit+0x1d0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d019      	beq.n	8004340 <HAL_GPIO_DeInit+0x94>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a5c      	ldr	r2, [pc, #368]	@ (8004480 <HAL_GPIO_DeInit+0x1d4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d013      	beq.n	800433c <HAL_GPIO_DeInit+0x90>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a5b      	ldr	r2, [pc, #364]	@ (8004484 <HAL_GPIO_DeInit+0x1d8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00d      	beq.n	8004338 <HAL_GPIO_DeInit+0x8c>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a5a      	ldr	r2, [pc, #360]	@ (8004488 <HAL_GPIO_DeInit+0x1dc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d007      	beq.n	8004334 <HAL_GPIO_DeInit+0x88>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a59      	ldr	r2, [pc, #356]	@ (800448c <HAL_GPIO_DeInit+0x1e0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d101      	bne.n	8004330 <HAL_GPIO_DeInit+0x84>
 800432c:	2306      	movs	r3, #6
 800432e:	e00c      	b.n	800434a <HAL_GPIO_DeInit+0x9e>
 8004330:	2307      	movs	r3, #7
 8004332:	e00a      	b.n	800434a <HAL_GPIO_DeInit+0x9e>
 8004334:	2305      	movs	r3, #5
 8004336:	e008      	b.n	800434a <HAL_GPIO_DeInit+0x9e>
 8004338:	2304      	movs	r3, #4
 800433a:	e006      	b.n	800434a <HAL_GPIO_DeInit+0x9e>
 800433c:	2303      	movs	r3, #3
 800433e:	e004      	b.n	800434a <HAL_GPIO_DeInit+0x9e>
 8004340:	2302      	movs	r3, #2
 8004342:	e002      	b.n	800434a <HAL_GPIO_DeInit+0x9e>
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <HAL_GPIO_DeInit+0x9e>
 8004348:	2300      	movs	r3, #0
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	f002 0203 	and.w	r2, r2, #3
 8004350:	0092      	lsls	r2, r2, #2
 8004352:	4093      	lsls	r3, r2
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	429a      	cmp	r2, r3
 8004358:	d132      	bne.n	80043c0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800435a:	4b4d      	ldr	r3, [pc, #308]	@ (8004490 <HAL_GPIO_DeInit+0x1e4>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	43db      	mvns	r3, r3
 8004362:	494b      	ldr	r1, [pc, #300]	@ (8004490 <HAL_GPIO_DeInit+0x1e4>)
 8004364:	4013      	ands	r3, r2
 8004366:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004368:	4b49      	ldr	r3, [pc, #292]	@ (8004490 <HAL_GPIO_DeInit+0x1e4>)
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	43db      	mvns	r3, r3
 8004370:	4947      	ldr	r1, [pc, #284]	@ (8004490 <HAL_GPIO_DeInit+0x1e4>)
 8004372:	4013      	ands	r3, r2
 8004374:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004376:	4b46      	ldr	r3, [pc, #280]	@ (8004490 <HAL_GPIO_DeInit+0x1e4>)
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	43db      	mvns	r3, r3
 800437e:	4944      	ldr	r1, [pc, #272]	@ (8004490 <HAL_GPIO_DeInit+0x1e4>)
 8004380:	4013      	ands	r3, r2
 8004382:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004384:	4b42      	ldr	r3, [pc, #264]	@ (8004490 <HAL_GPIO_DeInit+0x1e4>)
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	43db      	mvns	r3, r3
 800438c:	4940      	ldr	r1, [pc, #256]	@ (8004490 <HAL_GPIO_DeInit+0x1e4>)
 800438e:	4013      	ands	r3, r2
 8004390:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	220f      	movs	r2, #15
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80043a2:	4a34      	ldr	r2, [pc, #208]	@ (8004474 <HAL_GPIO_DeInit+0x1c8>)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	089b      	lsrs	r3, r3, #2
 80043a8:	3302      	adds	r3, #2
 80043aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	43da      	mvns	r2, r3
 80043b2:	4830      	ldr	r0, [pc, #192]	@ (8004474 <HAL_GPIO_DeInit+0x1c8>)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	089b      	lsrs	r3, r3, #2
 80043b8:	400a      	ands	r2, r1
 80043ba:	3302      	adds	r3, #2
 80043bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	2103      	movs	r1, #3
 80043ca:	fa01 f303 	lsl.w	r3, r1, r3
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	08da      	lsrs	r2, r3, #3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3208      	adds	r2, #8
 80043dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	220f      	movs	r2, #15
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	08d2      	lsrs	r2, r2, #3
 80043f4:	4019      	ands	r1, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3208      	adds	r2, #8
 80043fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2103      	movs	r1, #3
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	401a      	ands	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	2101      	movs	r1, #1
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	fa01 f303 	lsl.w	r3, r1, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	401a      	ands	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	2103      	movs	r1, #3
 8004432:	fa01 f303 	lsl.w	r3, r1, r3
 8004436:	43db      	mvns	r3, r3
 8004438:	401a      	ands	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004442:	2101      	movs	r1, #1
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	fa01 f303 	lsl.w	r3, r1, r3
 800444a:	43db      	mvns	r3, r3
 800444c:	401a      	ands	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	3301      	adds	r3, #1
 8004456:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	f47f af2b 	bne.w	80042bc <HAL_GPIO_DeInit+0x10>
  }
}
 8004466:	bf00      	nop
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	40010000 	.word	0x40010000
 8004478:	48000400 	.word	0x48000400
 800447c:	48000800 	.word	0x48000800
 8004480:	48000c00 	.word	0x48000c00
 8004484:	48001000 	.word	0x48001000
 8004488:	48001400 	.word	0x48001400
 800448c:	48001800 	.word	0x48001800
 8004490:	40010400 	.word	0x40010400

08004494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	887b      	ldrh	r3, [r7, #2]
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
 80044b0:	e001      	b.n	80044b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	807b      	strh	r3, [r7, #2]
 80044d0:	4613      	mov	r3, r2
 80044d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044d4:	787b      	ldrb	r3, [r7, #1]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044da:	887a      	ldrh	r2, [r7, #2]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044e0:	e002      	b.n	80044e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044e2:	887a      	ldrh	r2, [r7, #2]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044fe:	4b08      	ldr	r3, [pc, #32]	@ (8004520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d006      	beq.n	8004518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800450a:	4a05      	ldr	r2, [pc, #20]	@ (8004520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fc ff9c 	bl	8001450 <HAL_GPIO_EXTI_Callback>
  }
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40010400 	.word	0x40010400

08004524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e08d      	b.n	8004652 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fd f8c8 	bl	80016e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2224      	movs	r2, #36	@ 0x24
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0201 	bic.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004574:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004584:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d107      	bne.n	800459e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800459a:	609a      	str	r2, [r3, #8]
 800459c:	e006      	b.n	80045ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80045aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d108      	bne.n	80045c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045c2:	605a      	str	r2, [r3, #4]
 80045c4:	e007      	b.n	80045d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69d9      	ldr	r1, [r3, #28]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1a      	ldr	r2, [r3, #32]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e021      	b.n	80046b0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	@ 0x24
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7fd f889 	bl	800179c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	4608      	mov	r0, r1
 80046c2:	4611      	mov	r1, r2
 80046c4:	461a      	mov	r2, r3
 80046c6:	4603      	mov	r3, r0
 80046c8:	817b      	strh	r3, [r7, #10]
 80046ca:	460b      	mov	r3, r1
 80046cc:	813b      	strh	r3, [r7, #8]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b20      	cmp	r3, #32
 80046dc:	f040 80f9 	bne.w	80048d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_I2C_Mem_Write+0x34>
 80046e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0ed      	b.n	80048d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_I2C_Mem_Write+0x4e>
 8004702:	2302      	movs	r3, #2
 8004704:	e0e6      	b.n	80048d4 <HAL_I2C_Mem_Write+0x21c>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800470e:	f7ff faa1 	bl	8003c54 <HAL_GetTick>
 8004712:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	2319      	movs	r3, #25
 800471a:	2201      	movs	r2, #1
 800471c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 fac3 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0d1      	b.n	80048d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2221      	movs	r2, #33	@ 0x21
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2240      	movs	r2, #64	@ 0x40
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a3a      	ldr	r2, [r7, #32]
 800474a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004750:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004758:	88f8      	ldrh	r0, [r7, #6]
 800475a:	893a      	ldrh	r2, [r7, #8]
 800475c:	8979      	ldrh	r1, [r7, #10]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	9301      	str	r3, [sp, #4]
 8004762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	4603      	mov	r3, r0
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f9d3 	bl	8004b14 <I2C_RequestMemoryWrite>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0a9      	b.n	80048d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004784:	b29b      	uxth	r3, r3
 8004786:	2bff      	cmp	r3, #255	@ 0xff
 8004788:	d90e      	bls.n	80047a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	22ff      	movs	r2, #255	@ 0xff
 800478e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004794:	b2da      	uxtb	r2, r3
 8004796:	8979      	ldrh	r1, [r7, #10]
 8004798:	2300      	movs	r3, #0
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fc47 	bl	8005034 <I2C_TransferConfig>
 80047a6:	e00f      	b.n	80047c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	8979      	ldrh	r1, [r7, #10]
 80047ba:	2300      	movs	r3, #0
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 fc36 	bl	8005034 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fac6 	bl	8004d5e <I2C_WaitOnTXISFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e07b      	b.n	80048d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d034      	beq.n	8004880 <HAL_I2C_Mem_Write+0x1c8>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481a:	2b00      	cmp	r3, #0
 800481c:	d130      	bne.n	8004880 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004824:	2200      	movs	r2, #0
 8004826:	2180      	movs	r1, #128	@ 0x80
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 fa3f 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e04d      	b.n	80048d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	2bff      	cmp	r3, #255	@ 0xff
 8004840:	d90e      	bls.n	8004860 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	22ff      	movs	r2, #255	@ 0xff
 8004846:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800484c:	b2da      	uxtb	r2, r3
 800484e:	8979      	ldrh	r1, [r7, #10]
 8004850:	2300      	movs	r3, #0
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fbeb 	bl	8005034 <I2C_TransferConfig>
 800485e:	e00f      	b.n	8004880 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486e:	b2da      	uxtb	r2, r3
 8004870:	8979      	ldrh	r1, [r7, #10]
 8004872:	2300      	movs	r3, #0
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fbda 	bl	8005034 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d19e      	bne.n	80047c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 faac 	bl	8004dec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e01a      	b.n	80048d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2220      	movs	r2, #32
 80048a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6859      	ldr	r1, [r3, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <HAL_I2C_Mem_Write+0x224>)
 80048b2:	400b      	ands	r3, r1
 80048b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	fe00e800 	.word	0xfe00e800

080048e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	4608      	mov	r0, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	4603      	mov	r3, r0
 80048f0:	817b      	strh	r3, [r7, #10]
 80048f2:	460b      	mov	r3, r1
 80048f4:	813b      	strh	r3, [r7, #8]
 80048f6:	4613      	mov	r3, r2
 80048f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b20      	cmp	r3, #32
 8004904:	f040 80fd 	bne.w	8004b02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_I2C_Mem_Read+0x34>
 800490e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004910:	2b00      	cmp	r3, #0
 8004912:	d105      	bne.n	8004920 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800491a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0f1      	b.n	8004b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_I2C_Mem_Read+0x4e>
 800492a:	2302      	movs	r3, #2
 800492c:	e0ea      	b.n	8004b04 <HAL_I2C_Mem_Read+0x224>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004936:	f7ff f98d 	bl	8003c54 <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2319      	movs	r3, #25
 8004942:	2201      	movs	r2, #1
 8004944:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f9af 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0d5      	b.n	8004b04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2222      	movs	r2, #34	@ 0x22
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2240      	movs	r2, #64	@ 0x40
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004978:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004980:	88f8      	ldrh	r0, [r7, #6]
 8004982:	893a      	ldrh	r2, [r7, #8]
 8004984:	8979      	ldrh	r1, [r7, #10]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	4603      	mov	r3, r0
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f913 	bl	8004bbc <I2C_RequestMemoryRead>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0ad      	b.n	8004b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2bff      	cmp	r3, #255	@ 0xff
 80049b0:	d90e      	bls.n	80049d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	8979      	ldrh	r1, [r7, #10]
 80049c0:	4b52      	ldr	r3, [pc, #328]	@ (8004b0c <HAL_I2C_Mem_Read+0x22c>)
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fb33 	bl	8005034 <I2C_TransferConfig>
 80049ce:	e00f      	b.n	80049f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	8979      	ldrh	r1, [r7, #10]
 80049e2:	4b4a      	ldr	r3, [pc, #296]	@ (8004b0c <HAL_I2C_Mem_Read+0x22c>)
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 fb22 	bl	8005034 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	2200      	movs	r2, #0
 80049f8:	2104      	movs	r1, #4
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f956 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e07c      	b.n	8004b04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d034      	beq.n	8004ab0 <HAL_I2C_Mem_Read+0x1d0>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d130      	bne.n	8004ab0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a54:	2200      	movs	r2, #0
 8004a56:	2180      	movs	r1, #128	@ 0x80
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f927 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e04d      	b.n	8004b04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2bff      	cmp	r3, #255	@ 0xff
 8004a70:	d90e      	bls.n	8004a90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	8979      	ldrh	r1, [r7, #10]
 8004a80:	2300      	movs	r3, #0
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fad3 	bl	8005034 <I2C_TransferConfig>
 8004a8e:	e00f      	b.n	8004ab0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	8979      	ldrh	r1, [r7, #10]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 fac2 	bl	8005034 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d19a      	bne.n	80049f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f994 	bl	8004dec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e01a      	b.n	8004b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6859      	ldr	r1, [r3, #4]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_I2C_Mem_Read+0x230>)
 8004ae2:	400b      	ands	r3, r1
 8004ae4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e000      	b.n	8004b04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
  }
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	80002400 	.word	0x80002400
 8004b10:	fe00e800 	.word	0xfe00e800

08004b14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	461a      	mov	r2, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	817b      	strh	r3, [r7, #10]
 8004b26:	460b      	mov	r3, r1
 8004b28:	813b      	strh	r3, [r7, #8]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	8979      	ldrh	r1, [r7, #10]
 8004b34:	4b20      	ldr	r3, [pc, #128]	@ (8004bb8 <I2C_RequestMemoryWrite+0xa4>)
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fa79 	bl	8005034 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	69b9      	ldr	r1, [r7, #24]
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f909 	bl	8004d5e <I2C_WaitOnTXISFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e02c      	b.n	8004bb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d105      	bne.n	8004b68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b5c:	893b      	ldrh	r3, [r7, #8]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b66:	e015      	b.n	8004b94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b68:	893b      	ldrh	r3, [r7, #8]
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	69b9      	ldr	r1, [r7, #24]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 f8ef 	bl	8004d5e <I2C_WaitOnTXISFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e012      	b.n	8004bb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b8a:	893b      	ldrh	r3, [r7, #8]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2180      	movs	r1, #128	@ 0x80
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f884 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	80002000 	.word	0x80002000

08004bbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4603      	mov	r3, r0
 8004bcc:	817b      	strh	r3, [r7, #10]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	813b      	strh	r3, [r7, #8]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	8979      	ldrh	r1, [r7, #10]
 8004bdc:	4b20      	ldr	r3, [pc, #128]	@ (8004c60 <I2C_RequestMemoryRead+0xa4>)
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2300      	movs	r3, #0
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fa26 	bl	8005034 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	69b9      	ldr	r1, [r7, #24]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f8b6 	bl	8004d5e <I2C_WaitOnTXISFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e02c      	b.n	8004c56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bfc:	88fb      	ldrh	r3, [r7, #6]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d105      	bne.n	8004c0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c02:	893b      	ldrh	r3, [r7, #8]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c0c:	e015      	b.n	8004c3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c0e:	893b      	ldrh	r3, [r7, #8]
 8004c10:	0a1b      	lsrs	r3, r3, #8
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	69b9      	ldr	r1, [r7, #24]
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f89c 	bl	8004d5e <I2C_WaitOnTXISFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e012      	b.n	8004c56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c30:	893b      	ldrh	r3, [r7, #8]
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2200      	movs	r2, #0
 8004c42:	2140      	movs	r1, #64	@ 0x40
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f831 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	80002000 	.word	0x80002000

08004c64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d103      	bne.n	8004c82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d007      	beq.n	8004ca0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	619a      	str	r2, [r3, #24]
  }
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cbc:	e03b      	b.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	6839      	ldr	r1, [r7, #0]
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f8d6 	bl	8004e74 <I2C_IsErrorOccurred>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e041      	b.n	8004d56 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d02d      	beq.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cda:	f7fe ffbb 	bl	8003c54 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d302      	bcc.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d122      	bne.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	bf0c      	ite	eq
 8004d00:	2301      	moveq	r3, #1
 8004d02:	2300      	movne	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	461a      	mov	r2, r3
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d113      	bne.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d12:	f043 0220 	orr.w	r2, r3, #32
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e00f      	b.n	8004d56 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	bf0c      	ite	eq
 8004d46:	2301      	moveq	r3, #1
 8004d48:	2300      	movne	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d0b4      	beq.n	8004cbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d6a:	e033      	b.n	8004dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f87f 	bl	8004e74 <I2C_IsErrorOccurred>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e031      	b.n	8004de4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	d025      	beq.n	8004dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d88:	f7fe ff64 	bl	8003c54 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d302      	bcc.n	8004d9e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d11a      	bne.n	8004dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d013      	beq.n	8004dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e007      	b.n	8004de4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d1c4      	bne.n	8004d6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004df8:	e02f      	b.n	8004e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f838 	bl	8004e74 <I2C_IsErrorOccurred>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e02d      	b.n	8004e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0e:	f7fe ff21 	bl	8003c54 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d11a      	bne.n	8004e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d013      	beq.n	8004e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e007      	b.n	8004e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d1c8      	bne.n	8004dfa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	@ 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d068      	beq.n	8004f72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2210      	movs	r2, #16
 8004ea6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ea8:	e049      	b.n	8004f3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d045      	beq.n	8004f3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004eb2:	f7fe fecf 	bl	8003c54 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d302      	bcc.n	8004ec8 <I2C_IsErrorOccurred+0x54>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d13a      	bne.n	8004f3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ed2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004eda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ee6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eea:	d121      	bne.n	8004f30 <I2C_IsErrorOccurred+0xbc>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ef2:	d01d      	beq.n	8004f30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ef4:	7cfb      	ldrb	r3, [r7, #19]
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d01a      	beq.n	8004f30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f0a:	f7fe fea3 	bl	8003c54 <HAL_GetTick>
 8004f0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f10:	e00e      	b.n	8004f30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f12:	f7fe fe9f 	bl	8003c54 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b19      	cmp	r3, #25
 8004f1e:	d907      	bls.n	8004f30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	f043 0320 	orr.w	r3, r3, #32
 8004f26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004f2e:	e006      	b.n	8004f3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d1e9      	bne.n	8004f12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d003      	beq.n	8004f54 <I2C_IsErrorOccurred+0xe0>
 8004f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0aa      	beq.n	8004eaa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2220      	movs	r2, #32
 8004f62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	f043 0304 	orr.w	r3, r3, #4
 8004f6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00b      	beq.n	8004f9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	f043 0308 	orr.w	r3, r3, #8
 8004fac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00b      	beq.n	8004fe0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	f043 0302 	orr.w	r3, r3, #2
 8004fce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01c      	beq.n	8005022 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff fe3b 	bl	8004c64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6859      	ldr	r1, [r3, #4]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8005030 <I2C_IsErrorOccurred+0x1bc>)
 8004ffa:	400b      	ands	r3, r1
 8004ffc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005022:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005026:	4618      	mov	r0, r3
 8005028:	3728      	adds	r7, #40	@ 0x28
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	fe00e800 	.word	0xfe00e800

08005034 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	607b      	str	r3, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	817b      	strh	r3, [r7, #10]
 8005042:	4613      	mov	r3, r2
 8005044:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005046:	897b      	ldrh	r3, [r7, #10]
 8005048:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800504c:	7a7b      	ldrb	r3, [r7, #9]
 800504e:	041b      	lsls	r3, r3, #16
 8005050:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005054:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	4313      	orrs	r3, r2
 800505e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005062:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	0d5b      	lsrs	r3, r3, #21
 800506e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005072:	4b08      	ldr	r3, [pc, #32]	@ (8005094 <I2C_TransferConfig+0x60>)
 8005074:	430b      	orrs	r3, r1
 8005076:	43db      	mvns	r3, r3
 8005078:	ea02 0103 	and.w	r1, r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	03ff63ff 	.word	0x03ff63ff

08005098 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d138      	bne.n	8005120 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e032      	b.n	8005122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2224      	movs	r2, #36	@ 0x24
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0201 	bic.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6819      	ldr	r1, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	e000      	b.n	8005122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005120:	2302      	movs	r3, #2
  }
}
 8005122:	4618      	mov	r0, r3
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005134:	4b05      	ldr	r3, [pc, #20]	@ (800514c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a04      	ldr	r2, [pc, #16]	@ (800514c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800513a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800513e:	6013      	str	r3, [r2, #0]
}
 8005140:	bf00      	nop
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40007000 	.word	0x40007000

08005150 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005154:	4b04      	ldr	r3, [pc, #16]	@ (8005168 <HAL_PWREx_GetVoltageRange+0x18>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800515c:	4618      	mov	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40007000 	.word	0x40007000

0800516c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800517a:	d130      	bne.n	80051de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800517c:	4b23      	ldr	r3, [pc, #140]	@ (800520c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005188:	d038      	beq.n	80051fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800518a:	4b20      	ldr	r3, [pc, #128]	@ (800520c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005192:	4a1e      	ldr	r2, [pc, #120]	@ (800520c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005194:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005198:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800519a:	4b1d      	ldr	r3, [pc, #116]	@ (8005210 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2232      	movs	r2, #50	@ 0x32
 80051a0:	fb02 f303 	mul.w	r3, r2, r3
 80051a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005214 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	0c9b      	lsrs	r3, r3, #18
 80051ac:	3301      	adds	r3, #1
 80051ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051b0:	e002      	b.n	80051b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051b8:	4b14      	ldr	r3, [pc, #80]	@ (800520c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c4:	d102      	bne.n	80051cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f2      	bne.n	80051b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051cc:	4b0f      	ldr	r3, [pc, #60]	@ (800520c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d8:	d110      	bne.n	80051fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e00f      	b.n	80051fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80051de:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ea:	d007      	beq.n	80051fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051ec:	4b07      	ldr	r3, [pc, #28]	@ (800520c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051f4:	4a05      	ldr	r2, [pc, #20]	@ (800520c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40007000 	.word	0x40007000
 8005210:	2000000c 	.word	0x2000000c
 8005214:	431bde83 	.word	0x431bde83

08005218 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e3ca      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800522a:	4b97      	ldr	r3, [pc, #604]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005234:	4b94      	ldr	r3, [pc, #592]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 80e4 	beq.w	8005414 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <HAL_RCC_OscConfig+0x4a>
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	2b0c      	cmp	r3, #12
 8005256:	f040 808b 	bne.w	8005370 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b01      	cmp	r3, #1
 800525e:	f040 8087 	bne.w	8005370 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005262:	4b89      	ldr	r3, [pc, #548]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <HAL_RCC_OscConfig+0x62>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e3a2      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1a      	ldr	r2, [r3, #32]
 800527e:	4b82      	ldr	r3, [pc, #520]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d004      	beq.n	8005294 <HAL_RCC_OscConfig+0x7c>
 800528a:	4b7f      	ldr	r3, [pc, #508]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005292:	e005      	b.n	80052a0 <HAL_RCC_OscConfig+0x88>
 8005294:	4b7c      	ldr	r3, [pc, #496]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 8005296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800529a:	091b      	lsrs	r3, r3, #4
 800529c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d223      	bcs.n	80052ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fd55 	bl	8005d58 <RCC_SetFlashLatencyFromMSIRange>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e383      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052b8:	4b73      	ldr	r3, [pc, #460]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a72      	ldr	r2, [pc, #456]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80052be:	f043 0308 	orr.w	r3, r3, #8
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	4b70      	ldr	r3, [pc, #448]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	496d      	ldr	r1, [pc, #436]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052d6:	4b6c      	ldr	r3, [pc, #432]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	4968      	ldr	r1, [pc, #416]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	604b      	str	r3, [r1, #4]
 80052ea:	e025      	b.n	8005338 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ec:	4b66      	ldr	r3, [pc, #408]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a65      	ldr	r2, [pc, #404]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80052f2:	f043 0308 	orr.w	r3, r3, #8
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	4b63      	ldr	r3, [pc, #396]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	4960      	ldr	r1, [pc, #384]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 8005306:	4313      	orrs	r3, r2
 8005308:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800530a:	4b5f      	ldr	r3, [pc, #380]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	495b      	ldr	r1, [pc, #364]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 800531a:	4313      	orrs	r3, r2
 800531c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fd15 	bl	8005d58 <RCC_SetFlashLatencyFromMSIRange>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e343      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005338:	f000 fc4a 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 800533c:	4602      	mov	r2, r0
 800533e:	4b52      	ldr	r3, [pc, #328]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	091b      	lsrs	r3, r3, #4
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	4950      	ldr	r1, [pc, #320]	@ (800548c <HAL_RCC_OscConfig+0x274>)
 800534a:	5ccb      	ldrb	r3, [r1, r3]
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	fa22 f303 	lsr.w	r3, r2, r3
 8005354:	4a4e      	ldr	r2, [pc, #312]	@ (8005490 <HAL_RCC_OscConfig+0x278>)
 8005356:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005358:	4b4e      	ldr	r3, [pc, #312]	@ (8005494 <HAL_RCC_OscConfig+0x27c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	f7fe fc29 	bl	8003bb4 <HAL_InitTick>
 8005362:	4603      	mov	r3, r0
 8005364:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005366:	7bfb      	ldrb	r3, [r7, #15]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d052      	beq.n	8005412 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	e327      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d032      	beq.n	80053de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005378:	4b43      	ldr	r3, [pc, #268]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a42      	ldr	r2, [pc, #264]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005384:	f7fe fc66 	bl	8003c54 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800538c:	f7fe fc62 	bl	8003c54 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e310      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800539e:	4b3a      	ldr	r3, [pc, #232]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053aa:	4b37      	ldr	r3, [pc, #220]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a36      	ldr	r2, [pc, #216]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80053b0:	f043 0308 	orr.w	r3, r3, #8
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	4b34      	ldr	r3, [pc, #208]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	4931      	ldr	r1, [pc, #196]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	492c      	ldr	r1, [pc, #176]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	604b      	str	r3, [r1, #4]
 80053dc:	e01a      	b.n	8005414 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053de:	4b2a      	ldr	r3, [pc, #168]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a29      	ldr	r2, [pc, #164]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053ea:	f7fe fc33 	bl	8003c54 <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053f0:	e008      	b.n	8005404 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053f2:	f7fe fc2f 	bl	8003c54 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e2dd      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005404:	4b20      	ldr	r3, [pc, #128]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1f0      	bne.n	80053f2 <HAL_RCC_OscConfig+0x1da>
 8005410:	e000      	b.n	8005414 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005412:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d074      	beq.n	800550a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b08      	cmp	r3, #8
 8005424:	d005      	beq.n	8005432 <HAL_RCC_OscConfig+0x21a>
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b0c      	cmp	r3, #12
 800542a:	d10e      	bne.n	800544a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2b03      	cmp	r3, #3
 8005430:	d10b      	bne.n	800544a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005432:	4b15      	ldr	r3, [pc, #84]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d064      	beq.n	8005508 <HAL_RCC_OscConfig+0x2f0>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d160      	bne.n	8005508 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e2ba      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005452:	d106      	bne.n	8005462 <HAL_RCC_OscConfig+0x24a>
 8005454:	4b0c      	ldr	r3, [pc, #48]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a0b      	ldr	r2, [pc, #44]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 800545a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	e026      	b.n	80054b0 <HAL_RCC_OscConfig+0x298>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800546a:	d115      	bne.n	8005498 <HAL_RCC_OscConfig+0x280>
 800546c:	4b06      	ldr	r3, [pc, #24]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a05      	ldr	r2, [pc, #20]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 8005472:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	4b03      	ldr	r3, [pc, #12]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a02      	ldr	r2, [pc, #8]	@ (8005488 <HAL_RCC_OscConfig+0x270>)
 800547e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e014      	b.n	80054b0 <HAL_RCC_OscConfig+0x298>
 8005486:	bf00      	nop
 8005488:	40021000 	.word	0x40021000
 800548c:	08011e04 	.word	0x08011e04
 8005490:	2000000c 	.word	0x2000000c
 8005494:	20000044 	.word	0x20000044
 8005498:	4ba0      	ldr	r3, [pc, #640]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a9f      	ldr	r2, [pc, #636]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 800549e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	4b9d      	ldr	r3, [pc, #628]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a9c      	ldr	r2, [pc, #624]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 80054aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d013      	beq.n	80054e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b8:	f7fe fbcc 	bl	8003c54 <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054c0:	f7fe fbc8 	bl	8003c54 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b64      	cmp	r3, #100	@ 0x64
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e276      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054d2:	4b92      	ldr	r3, [pc, #584]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f0      	beq.n	80054c0 <HAL_RCC_OscConfig+0x2a8>
 80054de:	e014      	b.n	800550a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e0:	f7fe fbb8 	bl	8003c54 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054e8:	f7fe fbb4 	bl	8003c54 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b64      	cmp	r3, #100	@ 0x64
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e262      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054fa:	4b88      	ldr	r3, [pc, #544]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0x2d0>
 8005506:	e000      	b.n	800550a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d060      	beq.n	80055d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b04      	cmp	r3, #4
 800551a:	d005      	beq.n	8005528 <HAL_RCC_OscConfig+0x310>
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d119      	bne.n	8005556 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b02      	cmp	r3, #2
 8005526:	d116      	bne.n	8005556 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005528:	4b7c      	ldr	r3, [pc, #496]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_RCC_OscConfig+0x328>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e23f      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005540:	4b76      	ldr	r3, [pc, #472]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	061b      	lsls	r3, r3, #24
 800554e:	4973      	ldr	r1, [pc, #460]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 8005550:	4313      	orrs	r3, r2
 8005552:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005554:	e040      	b.n	80055d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d023      	beq.n	80055a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800555e:	4b6f      	ldr	r3, [pc, #444]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a6e      	ldr	r2, [pc, #440]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 8005564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556a:	f7fe fb73 	bl	8003c54 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005572:	f7fe fb6f 	bl	8003c54 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e21d      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005584:	4b65      	ldr	r3, [pc, #404]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005590:	4b62      	ldr	r3, [pc, #392]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	061b      	lsls	r3, r3, #24
 800559e:	495f      	ldr	r1, [pc, #380]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	604b      	str	r3, [r1, #4]
 80055a4:	e018      	b.n	80055d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055a6:	4b5d      	ldr	r3, [pc, #372]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a5c      	ldr	r2, [pc, #368]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 80055ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b2:	f7fe fb4f 	bl	8003c54 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ba:	f7fe fb4b 	bl	8003c54 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e1f9      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055cc:	4b53      	ldr	r3, [pc, #332]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f0      	bne.n	80055ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d03c      	beq.n	800565e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01c      	beq.n	8005626 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ec:	4b4b      	ldr	r3, [pc, #300]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 80055ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055f2:	4a4a      	ldr	r2, [pc, #296]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fe fb2a 	bl	8003c54 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005604:	f7fe fb26 	bl	8003c54 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e1d4      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005616:	4b41      	ldr	r3, [pc, #260]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 8005618:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0ef      	beq.n	8005604 <HAL_RCC_OscConfig+0x3ec>
 8005624:	e01b      	b.n	800565e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005626:	4b3d      	ldr	r3, [pc, #244]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 8005628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800562c:	4a3b      	ldr	r2, [pc, #236]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005636:	f7fe fb0d 	bl	8003c54 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800563e:	f7fe fb09 	bl	8003c54 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e1b7      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005650:	4b32      	ldr	r3, [pc, #200]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 8005652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1ef      	bne.n	800563e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 80a6 	beq.w	80057b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800566c:	2300      	movs	r3, #0
 800566e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005670:	4b2a      	ldr	r3, [pc, #168]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 8005672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10d      	bne.n	8005698 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800567c:	4b27      	ldr	r3, [pc, #156]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 800567e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005680:	4a26      	ldr	r2, [pc, #152]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 8005682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005686:	6593      	str	r3, [r2, #88]	@ 0x58
 8005688:	4b24      	ldr	r3, [pc, #144]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005694:	2301      	movs	r3, #1
 8005696:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005698:	4b21      	ldr	r3, [pc, #132]	@ (8005720 <HAL_RCC_OscConfig+0x508>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d118      	bne.n	80056d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005720 <HAL_RCC_OscConfig+0x508>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005720 <HAL_RCC_OscConfig+0x508>)
 80056aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b0:	f7fe fad0 	bl	8003c54 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b8:	f7fe facc 	bl	8003c54 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e17a      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ca:	4b15      	ldr	r3, [pc, #84]	@ (8005720 <HAL_RCC_OscConfig+0x508>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d108      	bne.n	80056f0 <HAL_RCC_OscConfig+0x4d8>
 80056de:	4b0f      	ldr	r3, [pc, #60]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 80056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e4:	4a0d      	ldr	r2, [pc, #52]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056ee:	e029      	b.n	8005744 <HAL_RCC_OscConfig+0x52c>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b05      	cmp	r3, #5
 80056f6:	d115      	bne.n	8005724 <HAL_RCC_OscConfig+0x50c>
 80056f8:	4b08      	ldr	r3, [pc, #32]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 80056fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fe:	4a07      	ldr	r2, [pc, #28]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 8005700:	f043 0304 	orr.w	r3, r3, #4
 8005704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005708:	4b04      	ldr	r3, [pc, #16]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570e:	4a03      	ldr	r2, [pc, #12]	@ (800571c <HAL_RCC_OscConfig+0x504>)
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005718:	e014      	b.n	8005744 <HAL_RCC_OscConfig+0x52c>
 800571a:	bf00      	nop
 800571c:	40021000 	.word	0x40021000
 8005720:	40007000 	.word	0x40007000
 8005724:	4b9c      	ldr	r3, [pc, #624]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572a:	4a9b      	ldr	r2, [pc, #620]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005734:	4b98      	ldr	r3, [pc, #608]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 8005736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800573a:	4a97      	ldr	r2, [pc, #604]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 800573c:	f023 0304 	bic.w	r3, r3, #4
 8005740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d016      	beq.n	800577a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574c:	f7fe fa82 	bl	8003c54 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005752:	e00a      	b.n	800576a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005754:	f7fe fa7e 	bl	8003c54 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005762:	4293      	cmp	r3, r2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e12a      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800576a:	4b8b      	ldr	r3, [pc, #556]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 800576c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ed      	beq.n	8005754 <HAL_RCC_OscConfig+0x53c>
 8005778:	e015      	b.n	80057a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577a:	f7fe fa6b 	bl	8003c54 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005780:	e00a      	b.n	8005798 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005782:	f7fe fa67 	bl	8003c54 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005790:	4293      	cmp	r3, r2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e113      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005798:	4b7f      	ldr	r3, [pc, #508]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1ed      	bne.n	8005782 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057a6:	7ffb      	ldrb	r3, [r7, #31]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d105      	bne.n	80057b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ac:	4b7a      	ldr	r3, [pc, #488]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 80057ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b0:	4a79      	ldr	r2, [pc, #484]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 80057b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057b6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80fe 	beq.w	80059be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	f040 80d0 	bne.w	800596c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80057cc:	4b72      	ldr	r3, [pc, #456]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f003 0203 	and.w	r2, r3, #3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057dc:	429a      	cmp	r2, r3
 80057de:	d130      	bne.n	8005842 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	3b01      	subs	r3, #1
 80057ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d127      	bne.n	8005842 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057fe:	429a      	cmp	r2, r3
 8005800:	d11f      	bne.n	8005842 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800580c:	2a07      	cmp	r2, #7
 800580e:	bf14      	ite	ne
 8005810:	2201      	movne	r2, #1
 8005812:	2200      	moveq	r2, #0
 8005814:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005816:	4293      	cmp	r3, r2
 8005818:	d113      	bne.n	8005842 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005824:	085b      	lsrs	r3, r3, #1
 8005826:	3b01      	subs	r3, #1
 8005828:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800582a:	429a      	cmp	r2, r3
 800582c:	d109      	bne.n	8005842 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	3b01      	subs	r3, #1
 800583c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800583e:	429a      	cmp	r2, r3
 8005840:	d06e      	beq.n	8005920 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	2b0c      	cmp	r3, #12
 8005846:	d069      	beq.n	800591c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005848:	4b53      	ldr	r3, [pc, #332]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005854:	4b50      	ldr	r3, [pc, #320]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0ad      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005864:	4b4c      	ldr	r3, [pc, #304]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a4b      	ldr	r2, [pc, #300]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 800586a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800586e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005870:	f7fe f9f0 	bl	8003c54 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005878:	f7fe f9ec 	bl	8003c54 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e09a      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800588a:	4b43      	ldr	r3, [pc, #268]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f0      	bne.n	8005878 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005896:	4b40      	ldr	r3, [pc, #256]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	4b40      	ldr	r3, [pc, #256]	@ (800599c <HAL_RCC_OscConfig+0x784>)
 800589c:	4013      	ands	r3, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058a6:	3a01      	subs	r2, #1
 80058a8:	0112      	lsls	r2, r2, #4
 80058aa:	4311      	orrs	r1, r2
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058b0:	0212      	lsls	r2, r2, #8
 80058b2:	4311      	orrs	r1, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058b8:	0852      	lsrs	r2, r2, #1
 80058ba:	3a01      	subs	r2, #1
 80058bc:	0552      	lsls	r2, r2, #21
 80058be:	4311      	orrs	r1, r2
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80058c4:	0852      	lsrs	r2, r2, #1
 80058c6:	3a01      	subs	r2, #1
 80058c8:	0652      	lsls	r2, r2, #25
 80058ca:	4311      	orrs	r1, r2
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80058d0:	0912      	lsrs	r2, r2, #4
 80058d2:	0452      	lsls	r2, r2, #17
 80058d4:	430a      	orrs	r2, r1
 80058d6:	4930      	ldr	r1, [pc, #192]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80058dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 80058e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 80058ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058f4:	f7fe f9ae 	bl	8003c54 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058fc:	f7fe f9aa 	bl	8003c54 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e058      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800590e:	4b22      	ldr	r3, [pc, #136]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800591a:	e050      	b.n	80059be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e04f      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005920:	4b1d      	ldr	r3, [pc, #116]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d148      	bne.n	80059be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800592c:	4b1a      	ldr	r3, [pc, #104]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a19      	ldr	r2, [pc, #100]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 8005932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005936:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005938:	4b17      	ldr	r3, [pc, #92]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4a16      	ldr	r2, [pc, #88]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 800593e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005942:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005944:	f7fe f986 	bl	8003c54 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800594c:	f7fe f982 	bl	8003c54 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e030      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800595e:	4b0e      	ldr	r3, [pc, #56]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0f0      	beq.n	800594c <HAL_RCC_OscConfig+0x734>
 800596a:	e028      	b.n	80059be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b0c      	cmp	r3, #12
 8005970:	d023      	beq.n	80059ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005972:	4b09      	ldr	r3, [pc, #36]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a08      	ldr	r2, [pc, #32]	@ (8005998 <HAL_RCC_OscConfig+0x780>)
 8005978:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800597c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597e:	f7fe f969 	bl	8003c54 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005984:	e00c      	b.n	80059a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005986:	f7fe f965 	bl	8003c54 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d905      	bls.n	80059a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e013      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
 8005998:	40021000 	.word	0x40021000
 800599c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059a0:	4b09      	ldr	r3, [pc, #36]	@ (80059c8 <HAL_RCC_OscConfig+0x7b0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1ec      	bne.n	8005986 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80059ac:	4b06      	ldr	r3, [pc, #24]	@ (80059c8 <HAL_RCC_OscConfig+0x7b0>)
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	4905      	ldr	r1, [pc, #20]	@ (80059c8 <HAL_RCC_OscConfig+0x7b0>)
 80059b2:	4b06      	ldr	r3, [pc, #24]	@ (80059cc <HAL_RCC_OscConfig+0x7b4>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	60cb      	str	r3, [r1, #12]
 80059b8:	e001      	b.n	80059be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3720      	adds	r7, #32
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40021000 	.word	0x40021000
 80059cc:	feeefffc 	.word	0xfeeefffc

080059d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e0e7      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059e4:	4b75      	ldr	r3, [pc, #468]	@ (8005bbc <HAL_RCC_ClockConfig+0x1ec>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d910      	bls.n	8005a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f2:	4b72      	ldr	r3, [pc, #456]	@ (8005bbc <HAL_RCC_ClockConfig+0x1ec>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f023 0207 	bic.w	r2, r3, #7
 80059fa:	4970      	ldr	r1, [pc, #448]	@ (8005bbc <HAL_RCC_ClockConfig+0x1ec>)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a02:	4b6e      	ldr	r3, [pc, #440]	@ (8005bbc <HAL_RCC_ClockConfig+0x1ec>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0cf      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d010      	beq.n	8005a42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	4b66      	ldr	r3, [pc, #408]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d908      	bls.n	8005a42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a30:	4b63      	ldr	r3, [pc, #396]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	4960      	ldr	r1, [pc, #384]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d04c      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d107      	bne.n	8005a66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a56:	4b5a      	ldr	r3, [pc, #360]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d121      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e0a6      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d107      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a6e:	4b54      	ldr	r3, [pc, #336]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d115      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e09a      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d107      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a86:	4b4e      	ldr	r3, [pc, #312]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e08e      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a96:	4b4a      	ldr	r3, [pc, #296]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e086      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005aa6:	4b46      	ldr	r3, [pc, #280]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f023 0203 	bic.w	r2, r3, #3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	4943      	ldr	r1, [pc, #268]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab8:	f7fe f8cc 	bl	8003c54 <HAL_GetTick>
 8005abc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005abe:	e00a      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac0:	f7fe f8c8 	bl	8003c54 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e06e      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad6:	4b3a      	ldr	r3, [pc, #232]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 020c 	and.w	r2, r3, #12
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d1eb      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d010      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	4b31      	ldr	r3, [pc, #196]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d208      	bcs.n	8005b16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b04:	4b2e      	ldr	r3, [pc, #184]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	492b      	ldr	r1, [pc, #172]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b16:	4b29      	ldr	r3, [pc, #164]	@ (8005bbc <HAL_RCC_ClockConfig+0x1ec>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d210      	bcs.n	8005b46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b24:	4b25      	ldr	r3, [pc, #148]	@ (8005bbc <HAL_RCC_ClockConfig+0x1ec>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f023 0207 	bic.w	r2, r3, #7
 8005b2c:	4923      	ldr	r1, [pc, #140]	@ (8005bbc <HAL_RCC_ClockConfig+0x1ec>)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b34:	4b21      	ldr	r3, [pc, #132]	@ (8005bbc <HAL_RCC_ClockConfig+0x1ec>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d001      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e036      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d008      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b52:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	4918      	ldr	r1, [pc, #96]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d009      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b70:	4b13      	ldr	r3, [pc, #76]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4910      	ldr	r1, [pc, #64]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b84:	f000 f824 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	490b      	ldr	r1, [pc, #44]	@ (8005bc4 <HAL_RCC_ClockConfig+0x1f4>)
 8005b96:	5ccb      	ldrb	r3, [r1, r3]
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba0:	4a09      	ldr	r2, [pc, #36]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1f8>)
 8005ba2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ba4:	4b09      	ldr	r3, [pc, #36]	@ (8005bcc <HAL_RCC_ClockConfig+0x1fc>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe f803 	bl	8003bb4 <HAL_InitTick>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8005bb2:	7afb      	ldrb	r3, [r7, #11]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40022000 	.word	0x40022000
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	08011e04 	.word	0x08011e04
 8005bc8:	2000000c 	.word	0x2000000c
 8005bcc:	20000044 	.word	0x20000044

08005bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b089      	sub	sp, #36	@ 0x24
 8005bd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bde:	4b3e      	ldr	r3, [pc, #248]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 030c 	and.w	r3, r3, #12
 8005be6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005be8:	4b3b      	ldr	r3, [pc, #236]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0303 	and.w	r3, r3, #3
 8005bf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_GetSysClockFreq+0x34>
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2b0c      	cmp	r3, #12
 8005bfc:	d121      	bne.n	8005c42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d11e      	bne.n	8005c42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c04:	4b34      	ldr	r3, [pc, #208]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d107      	bne.n	8005c20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c10:	4b31      	ldr	r3, [pc, #196]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	e005      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c20:	4b2d      	ldr	r3, [pc, #180]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	091b      	lsrs	r3, r3, #4
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10d      	bne.n	8005c58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c40:	e00a      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d102      	bne.n	8005c4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c48:	4b25      	ldr	r3, [pc, #148]	@ (8005ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	e004      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d101      	bne.n	8005c58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c54:	4b23      	ldr	r3, [pc, #140]	@ (8005ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b0c      	cmp	r3, #12
 8005c5c:	d134      	bne.n	8005cc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d003      	beq.n	8005c76 <HAL_RCC_GetSysClockFreq+0xa6>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d003      	beq.n	8005c7c <HAL_RCC_GetSysClockFreq+0xac>
 8005c74:	e005      	b.n	8005c82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c76:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c78:	617b      	str	r3, [r7, #20]
      break;
 8005c7a:	e005      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c7c:	4b19      	ldr	r3, [pc, #100]	@ (8005ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c7e:	617b      	str	r3, [r7, #20]
      break;
 8005c80:	e002      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	617b      	str	r3, [r7, #20]
      break;
 8005c86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c88:	4b13      	ldr	r3, [pc, #76]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	091b      	lsrs	r3, r3, #4
 8005c8e:	f003 0307 	and.w	r3, r3, #7
 8005c92:	3301      	adds	r3, #1
 8005c94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c96:	4b10      	ldr	r3, [pc, #64]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	fb03 f202 	mul.w	r2, r3, r2
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cae:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	0e5b      	lsrs	r3, r3, #25
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	3301      	adds	r3, #1
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005cc8:	69bb      	ldr	r3, [r7, #24]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3724      	adds	r7, #36	@ 0x24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	08011e1c 	.word	0x08011e1c
 8005ce0:	00f42400 	.word	0x00f42400
 8005ce4:	007a1200 	.word	0x007a1200

08005ce8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cec:	4b03      	ldr	r3, [pc, #12]	@ (8005cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8005cee:	681b      	ldr	r3, [r3, #0]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	2000000c 	.word	0x2000000c

08005d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d04:	f7ff fff0 	bl	8005ce8 <HAL_RCC_GetHCLKFreq>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4b06      	ldr	r3, [pc, #24]	@ (8005d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	4904      	ldr	r1, [pc, #16]	@ (8005d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d16:	5ccb      	ldrb	r3, [r1, r3]
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40021000 	.word	0x40021000
 8005d28:	08011e14 	.word	0x08011e14

08005d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d30:	f7ff ffda 	bl	8005ce8 <HAL_RCC_GetHCLKFreq>
 8005d34:	4602      	mov	r2, r0
 8005d36:	4b06      	ldr	r3, [pc, #24]	@ (8005d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	0adb      	lsrs	r3, r3, #11
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	4904      	ldr	r1, [pc, #16]	@ (8005d54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d42:	5ccb      	ldrb	r3, [r1, r3]
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40021000 	.word	0x40021000
 8005d54:	08011e14 	.word	0x08011e14

08005d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d60:	2300      	movs	r3, #0
 8005d62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d64:	4b2a      	ldr	r3, [pc, #168]	@ (8005e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d70:	f7ff f9ee 	bl	8005150 <HAL_PWREx_GetVoltageRange>
 8005d74:	6178      	str	r0, [r7, #20]
 8005d76:	e014      	b.n	8005da2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d78:	4b25      	ldr	r3, [pc, #148]	@ (8005e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d7c:	4a24      	ldr	r2, [pc, #144]	@ (8005e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d84:	4b22      	ldr	r3, [pc, #136]	@ (8005e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d90:	f7ff f9de 	bl	8005150 <HAL_PWREx_GetVoltageRange>
 8005d94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d96:	4b1e      	ldr	r3, [pc, #120]	@ (8005e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8005e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005da0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005da8:	d10b      	bne.n	8005dc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b80      	cmp	r3, #128	@ 0x80
 8005dae:	d919      	bls.n	8005de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2ba0      	cmp	r3, #160	@ 0xa0
 8005db4:	d902      	bls.n	8005dbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005db6:	2302      	movs	r3, #2
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	e013      	b.n	8005de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	e010      	b.n	8005de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b80      	cmp	r3, #128	@ 0x80
 8005dc6:	d902      	bls.n	8005dce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005dc8:	2303      	movs	r3, #3
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	e00a      	b.n	8005de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b80      	cmp	r3, #128	@ 0x80
 8005dd2:	d102      	bne.n	8005dda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	e004      	b.n	8005de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b70      	cmp	r3, #112	@ 0x70
 8005dde:	d101      	bne.n	8005de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005de0:	2301      	movs	r3, #1
 8005de2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005de4:	4b0b      	ldr	r3, [pc, #44]	@ (8005e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f023 0207 	bic.w	r2, r3, #7
 8005dec:	4909      	ldr	r1, [pc, #36]	@ (8005e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005df4:	4b07      	ldr	r3, [pc, #28]	@ (8005e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d001      	beq.n	8005e06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40021000 	.word	0x40021000
 8005e14:	40022000 	.word	0x40022000

08005e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e20:	2300      	movs	r3, #0
 8005e22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e24:	2300      	movs	r3, #0
 8005e26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d041      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005e3c:	d02a      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005e3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005e42:	d824      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e48:	d008      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e4e:	d81e      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005e54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e58:	d010      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e5a:	e018      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e5c:	4b86      	ldr	r3, [pc, #536]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	4a85      	ldr	r2, [pc, #532]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e68:	e015      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 facb 	bl	800640c <RCCEx_PLLSAI1_Config>
 8005e76:	4603      	mov	r3, r0
 8005e78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e7a:	e00c      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3320      	adds	r3, #32
 8005e80:	2100      	movs	r1, #0
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fbb6 	bl	80065f4 <RCCEx_PLLSAI2_Config>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e8c:	e003      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	74fb      	strb	r3, [r7, #19]
      break;
 8005e92:	e000      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e96:	7cfb      	ldrb	r3, [r7, #19]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e9c:	4b76      	ldr	r3, [pc, #472]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eaa:	4973      	ldr	r1, [pc, #460]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005eb2:	e001      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb4:	7cfb      	ldrb	r3, [r7, #19]
 8005eb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d041      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ec8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ecc:	d02a      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005ece:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ed2:	d824      	bhi.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ed4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ed8:	d008      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005eda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ede:	d81e      	bhi.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ee8:	d010      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005eea:	e018      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005eec:	4b62      	ldr	r3, [pc, #392]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4a61      	ldr	r2, [pc, #388]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ef6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ef8:	e015      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	3304      	adds	r3, #4
 8005efe:	2100      	movs	r1, #0
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 fa83 	bl	800640c <RCCEx_PLLSAI1_Config>
 8005f06:	4603      	mov	r3, r0
 8005f08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f0a:	e00c      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3320      	adds	r3, #32
 8005f10:	2100      	movs	r1, #0
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fb6e 	bl	80065f4 <RCCEx_PLLSAI2_Config>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f1c:	e003      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	74fb      	strb	r3, [r7, #19]
      break;
 8005f22:	e000      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f26:	7cfb      	ldrb	r3, [r7, #19]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10b      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f2c:	4b52      	ldr	r3, [pc, #328]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f3a:	494f      	ldr	r1, [pc, #316]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005f42:	e001      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f44:	7cfb      	ldrb	r3, [r7, #19]
 8005f46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80a0 	beq.w	8006096 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f56:	2300      	movs	r3, #0
 8005f58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f5a:	4b47      	ldr	r3, [pc, #284]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00d      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f70:	4b41      	ldr	r3, [pc, #260]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f74:	4a40      	ldr	r2, [pc, #256]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f84:	60bb      	str	r3, [r7, #8]
 8005f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a3a      	ldr	r2, [pc, #232]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f98:	f7fd fe5c 	bl	8003c54 <HAL_GetTick>
 8005f9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f9e:	e009      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa0:	f7fd fe58 	bl	8003c54 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d902      	bls.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	74fb      	strb	r3, [r7, #19]
        break;
 8005fb2:	e005      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005fb4:	4b31      	ldr	r3, [pc, #196]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0ef      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005fc0:	7cfb      	ldrb	r3, [r7, #19]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d15c      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01f      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d019      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fe4:	4b24      	ldr	r3, [pc, #144]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ff0:	4b21      	ldr	r3, [pc, #132]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff6:	4a20      	ldr	r2, [pc, #128]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006000:	4b1d      	ldr	r3, [pc, #116]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006006:	4a1c      	ldr	r2, [pc, #112]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800600c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006010:	4a19      	ldr	r2, [pc, #100]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d016      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006022:	f7fd fe17 	bl	8003c54 <HAL_GetTick>
 8006026:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006028:	e00b      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800602a:	f7fd fe13 	bl	8003c54 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006038:	4293      	cmp	r3, r2
 800603a:	d902      	bls.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	74fb      	strb	r3, [r7, #19]
            break;
 8006040:	e006      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006042:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0ec      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006050:	7cfb      	ldrb	r3, [r7, #19]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10c      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006056:	4b08      	ldr	r3, [pc, #32]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006066:	4904      	ldr	r1, [pc, #16]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800606e:	e009      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006070:	7cfb      	ldrb	r3, [r7, #19]
 8006072:	74bb      	strb	r3, [r7, #18]
 8006074:	e006      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006076:	bf00      	nop
 8006078:	40021000 	.word	0x40021000
 800607c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006080:	7cfb      	ldrb	r3, [r7, #19]
 8006082:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006084:	7c7b      	ldrb	r3, [r7, #17]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d105      	bne.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800608a:	4b9e      	ldr	r3, [pc, #632]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608e:	4a9d      	ldr	r2, [pc, #628]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006094:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060a2:	4b98      	ldr	r3, [pc, #608]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a8:	f023 0203 	bic.w	r2, r3, #3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b0:	4994      	ldr	r1, [pc, #592]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060c4:	4b8f      	ldr	r3, [pc, #572]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ca:	f023 020c 	bic.w	r2, r3, #12
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d2:	498c      	ldr	r1, [pc, #560]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060e6:	4b87      	ldr	r3, [pc, #540]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f4:	4983      	ldr	r1, [pc, #524]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006108:	4b7e      	ldr	r3, [pc, #504]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800610a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800610e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006116:	497b      	ldr	r1, [pc, #492]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800612a:	4b76      	ldr	r3, [pc, #472]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800612c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006130:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006138:	4972      	ldr	r1, [pc, #456]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800614c:	4b6d      	ldr	r3, [pc, #436]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006152:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800615a:	496a      	ldr	r1, [pc, #424]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800616e:	4b65      	ldr	r3, [pc, #404]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006174:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800617c:	4961      	ldr	r1, [pc, #388]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006190:	4b5c      	ldr	r3, [pc, #368]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006196:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800619e:	4959      	ldr	r1, [pc, #356]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061b2:	4b54      	ldr	r3, [pc, #336]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c0:	4950      	ldr	r1, [pc, #320]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061d4:	4b4b      	ldr	r3, [pc, #300]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e2:	4948      	ldr	r1, [pc, #288]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061f6:	4b43      	ldr	r3, [pc, #268]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006204:	493f      	ldr	r1, [pc, #252]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d028      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006218:	4b3a      	ldr	r3, [pc, #232]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006226:	4937      	ldr	r1, [pc, #220]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006232:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006236:	d106      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006238:	4b32      	ldr	r3, [pc, #200]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	4a31      	ldr	r2, [pc, #196]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800623e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006242:	60d3      	str	r3, [r2, #12]
 8006244:	e011      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800624a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800624e:	d10c      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3304      	adds	r3, #4
 8006254:	2101      	movs	r1, #1
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f8d8 	bl	800640c <RCCEx_PLLSAI1_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006260:	7cfb      	ldrb	r3, [r7, #19]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006266:	7cfb      	ldrb	r3, [r7, #19]
 8006268:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d028      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006276:	4b23      	ldr	r3, [pc, #140]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800627c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006284:	491f      	ldr	r1, [pc, #124]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006286:	4313      	orrs	r3, r2
 8006288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006290:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006294:	d106      	bne.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006296:	4b1b      	ldr	r3, [pc, #108]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	4a1a      	ldr	r2, [pc, #104]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800629c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062a0:	60d3      	str	r3, [r2, #12]
 80062a2:	e011      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062ac:	d10c      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3304      	adds	r3, #4
 80062b2:	2101      	movs	r1, #1
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 f8a9 	bl	800640c <RCCEx_PLLSAI1_Config>
 80062ba:	4603      	mov	r3, r0
 80062bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062be:	7cfb      	ldrb	r3, [r7, #19]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80062c4:	7cfb      	ldrb	r3, [r7, #19]
 80062c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d02b      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062e2:	4908      	ldr	r1, [pc, #32]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062f2:	d109      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062f4:	4b03      	ldr	r3, [pc, #12]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	4a02      	ldr	r2, [pc, #8]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062fe:	60d3      	str	r3, [r2, #12]
 8006300:	e014      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006302:	bf00      	nop
 8006304:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800630c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006310:	d10c      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3304      	adds	r3, #4
 8006316:	2101      	movs	r1, #1
 8006318:	4618      	mov	r0, r3
 800631a:	f000 f877 	bl	800640c <RCCEx_PLLSAI1_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006322:	7cfb      	ldrb	r3, [r7, #19]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006328:	7cfb      	ldrb	r3, [r7, #19]
 800632a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d02f      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006338:	4b2b      	ldr	r3, [pc, #172]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800633a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800633e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006346:	4928      	ldr	r1, [pc, #160]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006348:	4313      	orrs	r3, r2
 800634a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006352:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006356:	d10d      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3304      	adds	r3, #4
 800635c:	2102      	movs	r1, #2
 800635e:	4618      	mov	r0, r3
 8006360:	f000 f854 	bl	800640c <RCCEx_PLLSAI1_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006368:	7cfb      	ldrb	r3, [r7, #19]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d014      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800636e:	7cfb      	ldrb	r3, [r7, #19]
 8006370:	74bb      	strb	r3, [r7, #18]
 8006372:	e011      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800637c:	d10c      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3320      	adds	r3, #32
 8006382:	2102      	movs	r1, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f000 f935 	bl	80065f4 <RCCEx_PLLSAI2_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800638e:	7cfb      	ldrb	r3, [r7, #19]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006394:	7cfb      	ldrb	r3, [r7, #19]
 8006396:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80063a4:	4b10      	ldr	r3, [pc, #64]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063aa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063b2:	490d      	ldr	r1, [pc, #52]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00b      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063c6:	4b08      	ldr	r3, [pc, #32]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063d6:	4904      	ldr	r1, [pc, #16]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063de:	7cbb      	ldrb	r3, [r7, #18]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40021000 	.word	0x40021000

080063ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80063f0:	4b05      	ldr	r3, [pc, #20]	@ (8006408 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a04      	ldr	r2, [pc, #16]	@ (8006408 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80063f6:	f043 0304 	orr.w	r3, r3, #4
 80063fa:	6013      	str	r3, [r2, #0]
}
 80063fc:	bf00      	nop
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	40021000 	.word	0x40021000

0800640c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800641a:	4b75      	ldr	r3, [pc, #468]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d018      	beq.n	8006458 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006426:	4b72      	ldr	r3, [pc, #456]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f003 0203 	and.w	r2, r3, #3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d10d      	bne.n	8006452 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
       ||
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800643e:	4b6c      	ldr	r3, [pc, #432]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	091b      	lsrs	r3, r3, #4
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
       ||
 800644e:	429a      	cmp	r2, r3
 8006450:	d047      	beq.n	80064e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	73fb      	strb	r3, [r7, #15]
 8006456:	e044      	b.n	80064e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b03      	cmp	r3, #3
 800645e:	d018      	beq.n	8006492 <RCCEx_PLLSAI1_Config+0x86>
 8006460:	2b03      	cmp	r3, #3
 8006462:	d825      	bhi.n	80064b0 <RCCEx_PLLSAI1_Config+0xa4>
 8006464:	2b01      	cmp	r3, #1
 8006466:	d002      	beq.n	800646e <RCCEx_PLLSAI1_Config+0x62>
 8006468:	2b02      	cmp	r3, #2
 800646a:	d009      	beq.n	8006480 <RCCEx_PLLSAI1_Config+0x74>
 800646c:	e020      	b.n	80064b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800646e:	4b60      	ldr	r3, [pc, #384]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d11d      	bne.n	80064b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800647e:	e01a      	b.n	80064b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006480:	4b5b      	ldr	r3, [pc, #364]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006488:	2b00      	cmp	r3, #0
 800648a:	d116      	bne.n	80064ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006490:	e013      	b.n	80064ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006492:	4b57      	ldr	r3, [pc, #348]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10f      	bne.n	80064be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800649e:	4b54      	ldr	r3, [pc, #336]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064ae:	e006      	b.n	80064be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	73fb      	strb	r3, [r7, #15]
      break;
 80064b4:	e004      	b.n	80064c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80064b6:	bf00      	nop
 80064b8:	e002      	b.n	80064c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80064ba:	bf00      	nop
 80064bc:	e000      	b.n	80064c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80064be:	bf00      	nop
    }

    if(status == HAL_OK)
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10d      	bne.n	80064e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80064c6:	4b4a      	ldr	r3, [pc, #296]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6819      	ldr	r1, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	430b      	orrs	r3, r1
 80064dc:	4944      	ldr	r1, [pc, #272]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d17d      	bne.n	80065e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064e8:	4b41      	ldr	r3, [pc, #260]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a40      	ldr	r2, [pc, #256]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064f4:	f7fd fbae 	bl	8003c54 <HAL_GetTick>
 80064f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064fa:	e009      	b.n	8006510 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064fc:	f7fd fbaa 	bl	8003c54 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d902      	bls.n	8006510 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	73fb      	strb	r3, [r7, #15]
        break;
 800650e:	e005      	b.n	800651c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006510:	4b37      	ldr	r3, [pc, #220]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1ef      	bne.n	80064fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d160      	bne.n	80065e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d111      	bne.n	800654c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006528:	4b31      	ldr	r3, [pc, #196]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6892      	ldr	r2, [r2, #8]
 8006538:	0211      	lsls	r1, r2, #8
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	68d2      	ldr	r2, [r2, #12]
 800653e:	0912      	lsrs	r2, r2, #4
 8006540:	0452      	lsls	r2, r2, #17
 8006542:	430a      	orrs	r2, r1
 8006544:	492a      	ldr	r1, [pc, #168]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006546:	4313      	orrs	r3, r2
 8006548:	610b      	str	r3, [r1, #16]
 800654a:	e027      	b.n	800659c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d112      	bne.n	8006578 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006552:	4b27      	ldr	r3, [pc, #156]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800655a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6892      	ldr	r2, [r2, #8]
 8006562:	0211      	lsls	r1, r2, #8
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6912      	ldr	r2, [r2, #16]
 8006568:	0852      	lsrs	r2, r2, #1
 800656a:	3a01      	subs	r2, #1
 800656c:	0552      	lsls	r2, r2, #21
 800656e:	430a      	orrs	r2, r1
 8006570:	491f      	ldr	r1, [pc, #124]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006572:	4313      	orrs	r3, r2
 8006574:	610b      	str	r3, [r1, #16]
 8006576:	e011      	b.n	800659c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006578:	4b1d      	ldr	r3, [pc, #116]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006580:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6892      	ldr	r2, [r2, #8]
 8006588:	0211      	lsls	r1, r2, #8
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6952      	ldr	r2, [r2, #20]
 800658e:	0852      	lsrs	r2, r2, #1
 8006590:	3a01      	subs	r2, #1
 8006592:	0652      	lsls	r2, r2, #25
 8006594:	430a      	orrs	r2, r1
 8006596:	4916      	ldr	r1, [pc, #88]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006598:	4313      	orrs	r3, r2
 800659a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800659c:	4b14      	ldr	r3, [pc, #80]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a13      	ldr	r2, [pc, #76]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a8:	f7fd fb54 	bl	8003c54 <HAL_GetTick>
 80065ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065ae:	e009      	b.n	80065c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065b0:	f7fd fb50 	bl	8003c54 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d902      	bls.n	80065c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	73fb      	strb	r3, [r7, #15]
          break;
 80065c2:	e005      	b.n	80065d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065c4:	4b0a      	ldr	r3, [pc, #40]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0ef      	beq.n	80065b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d106      	bne.n	80065e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80065d6:	4b06      	ldr	r3, [pc, #24]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065d8:	691a      	ldr	r2, [r3, #16]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	4904      	ldr	r1, [pc, #16]	@ (80065f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	40021000 	.word	0x40021000

080065f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006602:	4b6a      	ldr	r3, [pc, #424]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d018      	beq.n	8006640 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800660e:	4b67      	ldr	r3, [pc, #412]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f003 0203 	and.w	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	d10d      	bne.n	800663a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
       ||
 8006622:	2b00      	cmp	r3, #0
 8006624:	d009      	beq.n	800663a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006626:	4b61      	ldr	r3, [pc, #388]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	091b      	lsrs	r3, r3, #4
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
       ||
 8006636:	429a      	cmp	r2, r3
 8006638:	d047      	beq.n	80066ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	73fb      	strb	r3, [r7, #15]
 800663e:	e044      	b.n	80066ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b03      	cmp	r3, #3
 8006646:	d018      	beq.n	800667a <RCCEx_PLLSAI2_Config+0x86>
 8006648:	2b03      	cmp	r3, #3
 800664a:	d825      	bhi.n	8006698 <RCCEx_PLLSAI2_Config+0xa4>
 800664c:	2b01      	cmp	r3, #1
 800664e:	d002      	beq.n	8006656 <RCCEx_PLLSAI2_Config+0x62>
 8006650:	2b02      	cmp	r3, #2
 8006652:	d009      	beq.n	8006668 <RCCEx_PLLSAI2_Config+0x74>
 8006654:	e020      	b.n	8006698 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006656:	4b55      	ldr	r3, [pc, #340]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d11d      	bne.n	800669e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006666:	e01a      	b.n	800669e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006668:	4b50      	ldr	r3, [pc, #320]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006670:	2b00      	cmp	r3, #0
 8006672:	d116      	bne.n	80066a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006678:	e013      	b.n	80066a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800667a:	4b4c      	ldr	r3, [pc, #304]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10f      	bne.n	80066a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006686:	4b49      	ldr	r3, [pc, #292]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d109      	bne.n	80066a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006696:	e006      	b.n	80066a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]
      break;
 800669c:	e004      	b.n	80066a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800669e:	bf00      	nop
 80066a0:	e002      	b.n	80066a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80066a2:	bf00      	nop
 80066a4:	e000      	b.n	80066a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80066a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10d      	bne.n	80066ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80066ae:	4b3f      	ldr	r3, [pc, #252]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6819      	ldr	r1, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	3b01      	subs	r3, #1
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	430b      	orrs	r3, r1
 80066c4:	4939      	ldr	r1, [pc, #228]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d167      	bne.n	80067a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80066d0:	4b36      	ldr	r3, [pc, #216]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a35      	ldr	r2, [pc, #212]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80066d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066dc:	f7fd faba 	bl	8003c54 <HAL_GetTick>
 80066e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066e2:	e009      	b.n	80066f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066e4:	f7fd fab6 	bl	8003c54 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d902      	bls.n	80066f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	73fb      	strb	r3, [r7, #15]
        break;
 80066f6:	e005      	b.n	8006704 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066f8:	4b2c      	ldr	r3, [pc, #176]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1ef      	bne.n	80066e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d14a      	bne.n	80067a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d111      	bne.n	8006734 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006710:	4b26      	ldr	r3, [pc, #152]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6892      	ldr	r2, [r2, #8]
 8006720:	0211      	lsls	r1, r2, #8
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	68d2      	ldr	r2, [r2, #12]
 8006726:	0912      	lsrs	r2, r2, #4
 8006728:	0452      	lsls	r2, r2, #17
 800672a:	430a      	orrs	r2, r1
 800672c:	491f      	ldr	r1, [pc, #124]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800672e:	4313      	orrs	r3, r2
 8006730:	614b      	str	r3, [r1, #20]
 8006732:	e011      	b.n	8006758 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006734:	4b1d      	ldr	r3, [pc, #116]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800673c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6892      	ldr	r2, [r2, #8]
 8006744:	0211      	lsls	r1, r2, #8
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6912      	ldr	r2, [r2, #16]
 800674a:	0852      	lsrs	r2, r2, #1
 800674c:	3a01      	subs	r2, #1
 800674e:	0652      	lsls	r2, r2, #25
 8006750:	430a      	orrs	r2, r1
 8006752:	4916      	ldr	r1, [pc, #88]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006754:	4313      	orrs	r3, r2
 8006756:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006758:	4b14      	ldr	r3, [pc, #80]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a13      	ldr	r2, [pc, #76]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800675e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006762:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006764:	f7fd fa76 	bl	8003c54 <HAL_GetTick>
 8006768:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800676a:	e009      	b.n	8006780 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800676c:	f7fd fa72 	bl	8003c54 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d902      	bls.n	8006780 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	73fb      	strb	r3, [r7, #15]
          break;
 800677e:	e005      	b.n	800678c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006780:	4b0a      	ldr	r3, [pc, #40]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0ef      	beq.n	800676c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006792:	4b06      	ldr	r3, [pc, #24]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	4904      	ldr	r1, [pc, #16]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800679c:	4313      	orrs	r3, r2
 800679e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	40021000 	.word	0x40021000

080067b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e0be      	b.n	8006940 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d108      	bne.n	80067dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067d2:	d009      	beq.n	80067e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	61da      	str	r2, [r3, #28]
 80067da:	e005      	b.n	80067e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d106      	bne.n	8006802 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7fa fff1 	bl	80017e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2202      	movs	r2, #2
 8006806:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006818:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006822:	d902      	bls.n	800682a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	e002      	b.n	8006830 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800682a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800682e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006838:	d007      	beq.n	800684a <HAL_SPI_Init+0x9a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006842:	d002      	beq.n	800684a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	431a      	orrs	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800688c:	ea42 0103 	orr.w	r1, r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006894:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068a8:	d11b      	bne.n	80068e2 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10b      	bne.n	80068ca <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068ba:	d903      	bls.n	80068c4 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80068c2:	e002      	b.n	80068ca <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d107      	bne.n	80068e2 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	0c1b      	lsrs	r3, r3, #16
 80068e8:	f003 0204 	and.w	r2, r3, #4
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006908:	ea42 0103 	orr.w	r1, r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006922:	d105      	bne.n	8006930 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	b292      	uxth	r2, r2
 800692e:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e01a      	b.n	8006990 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006970:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fa ff7a 	bl	800186c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08a      	sub	sp, #40	@ 0x28
 800699c:	af02      	add	r7, sp, #8
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	4613      	mov	r3, r2
 80069a6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	617b      	str	r3, [r7, #20]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d001      	beq.n	80069c0 <HAL_SPI_Receive+0x28>
  {
    return HAL_BUSY;
 80069bc:	2302      	movs	r3, #2
 80069be:	e1e0      	b.n	8006d82 <HAL_SPI_Receive+0x3ea>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069c8:	d112      	bne.n	80069f0 <HAL_SPI_Receive+0x58>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10e      	bne.n	80069f0 <HAL_SPI_Receive+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2204      	movs	r2, #4
 80069d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80069da:	88fa      	ldrh	r2, [r7, #6]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	4613      	mov	r3, r2
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 f9cf 	bl	8006d8a <HAL_SPI_TransmitReceive>
 80069ec:	4603      	mov	r3, r0
 80069ee:	e1c8      	b.n	8006d82 <HAL_SPI_Receive+0x3ea>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069f0:	f7fd f930 	bl	8003c54 <HAL_GetTick>
 80069f4:	61f8      	str	r0, [r7, #28]

  if ((pData == NULL) || (Size == 0U))
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <HAL_SPI_Receive+0x6a>
 80069fc:	88fb      	ldrh	r3, [r7, #6]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_SPI_Receive+0x6e>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e1bd      	b.n	8006d82 <HAL_SPI_Receive+0x3ea>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <HAL_SPI_Receive+0x7c>
 8006a10:	2302      	movs	r3, #2
 8006a12:	e1b6      	b.n	8006d82 <HAL_SPI_Receive+0x3ea>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2204      	movs	r2, #4
 8006a20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	88fa      	ldrh	r2, [r7, #6]
 8006a34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	88fa      	ldrh	r2, [r7, #6]
 8006a3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a66:	d118      	bne.n	8006a9a <HAL_SPI_Receive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a86:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006aa2:	d908      	bls.n	8006ab6 <HAL_SPI_Receive+0x11e>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ab2:	605a      	str	r2, [r3, #4]
 8006ab4:	e007      	b.n	8006ac6 <HAL_SPI_Receive+0x12e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ac4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ace:	d10f      	bne.n	8006af0 <HAL_SPI_Receive+0x158>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ade:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006aee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b40      	cmp	r3, #64	@ 0x40
 8006afc:	d007      	beq.n	8006b0e <HAL_SPI_Receive+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b0c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b16:	d875      	bhi.n	8006c04 <HAL_SPI_Receive+0x26c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b18:	e037      	b.n	8006b8a <HAL_SPI_Receive+0x1f2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d117      	bne.n	8006b58 <HAL_SPI_Receive+0x1c0>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f103 020c 	add.w	r2, r3, #12
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b34:	7812      	ldrb	r2, [r2, #0]
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006b56:	e018      	b.n	8006b8a <HAL_SPI_Receive+0x1f2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b58:	f7fd f87c 	bl	8003c54 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d803      	bhi.n	8006b70 <HAL_SPI_Receive+0x1d8>
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6e:	d102      	bne.n	8006b76 <HAL_SPI_Receive+0x1de>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <HAL_SPI_Receive+0x1f2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e0fb      	b.n	8006d82 <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1c1      	bne.n	8006b1a <HAL_SPI_Receive+0x182>
 8006b96:	e03b      	b.n	8006c10 <HAL_SPI_Receive+0x278>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d115      	bne.n	8006bd2 <HAL_SPI_Receive+0x23a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb0:	b292      	uxth	r2, r2
 8006bb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb8:	1c9a      	adds	r2, r3, #2
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006bd0:	e018      	b.n	8006c04 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bd2:	f7fd f83f 	bl	8003c54 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d803      	bhi.n	8006bea <HAL_SPI_Receive+0x252>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be8:	d102      	bne.n	8006bf0 <HAL_SPI_Receive+0x258>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d109      	bne.n	8006c04 <HAL_SPI_Receive+0x26c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e0be      	b.n	8006d82 <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1c3      	bne.n	8006b98 <HAL_SPI_Receive+0x200>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c18:	f040 8087 	bne.w	8006d2a <HAL_SPI_Receive+0x392>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c2a:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2201      	movs	r2, #1
 8006c34:	2101      	movs	r1, #1
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f001 fa0c 	bl	8008054 <SPI_WaitFlagStateUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      __HAL_UNLOCK(hspi);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e099      	b.n	8006d82 <HAL_SPI_Receive+0x3ea>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c56:	d907      	bls.n	8006c68 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c62:	b292      	uxth	r2, r2
 8006c64:	801a      	strh	r2, [r3, #0]
 8006c66:	e008      	b.n	8006c7a <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f103 020c 	add.w	r2, r3, #12
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c74:	7812      	ldrb	r2, [r2, #0]
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2201      	movs	r2, #1
 8006c82:	2101      	movs	r1, #1
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f001 f9e5 	bl	8008054 <SPI_WaitFlagStateUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00f      	beq.n	8006cb0 <HAL_SPI_Receive+0x318>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c94:	f043 0202 	orr.w	r2, r3, #2
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e068      	b.n	8006d82 <HAL_SPI_Receive+0x3ea>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006cb8:	d105      	bne.n	8006cc6 <HAL_SPI_Receive+0x32e>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	e031      	b.n	8006d2a <HAL_SPI_Receive+0x392>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006cd6:	7cfb      	ldrb	r3, [r7, #19]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ce0:	d123      	bne.n	8006d2a <HAL_SPI_Receive+0x392>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d11f      	bne.n	8006d2a <HAL_SPI_Receive+0x392>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f001 f9ad 	bl	8008054 <SPI_WaitFlagStateUntilTimeout>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00f      	beq.n	8006d20 <HAL_SPI_Receive+0x388>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d04:	f043 0202 	orr.w	r2, r3, #2
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e030      	b.n	8006d82 <HAL_SPI_Receive+0x3ea>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8006d28:	7cfb      	ldrb	r3, [r7, #19]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f001 faae 	bl	8008290 <SPI_EndRxTransaction>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_SPI_Receive+0x3a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 0310 	and.w	r3, r3, #16
 8006d4a:	2b10      	cmp	r3, #16
 8006d4c:	d10a      	bne.n	8006d64 <HAL_SPI_Receive+0x3cc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d52:	f043 0202 	orr.w	r2, r3, #2
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8006d62:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <HAL_SPI_Receive+0x3e8>
  {
    return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e000      	b.n	8006d82 <HAL_SPI_Receive+0x3ea>
  }
  else
  {
    return HAL_OK;
 8006d80:	2300      	movs	r3, #0
  }
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3720      	adds	r7, #32
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b090      	sub	sp, #64	@ 0x40
 8006d8e:	af02      	add	r7, sp, #8
 8006d90:	60f8      	str	r0, [r7, #12]
 8006d92:	60b9      	str	r1, [r7, #8]
 8006d94:	607a      	str	r2, [r7, #4]
 8006d96:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006da0:	2301      	movs	r3, #1
 8006da2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006da4:	f7fc ff56 	bl	8003c54 <HAL_GetTick>
 8006da8:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006db0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  tmp_mode            = hspi->Init.Mode;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  initial_TxXferCount = Size;
 8006dba:	887b      	ldrh	r3, [r7, #2]
 8006dbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 8006dbe:	887b      	ldrh	r3, [r7, #2]
 8006dc0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	623b      	str	r3, [r7, #32]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	61fb      	str	r3, [r7, #28]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d00d      	beq.n	8006df6 <HAL_SPI_TransmitReceive+0x6c>
 8006dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ddc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006de0:	d107      	bne.n	8006df2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d103      	bne.n	8006df2 <HAL_SPI_TransmitReceive+0x68>
 8006dea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d001      	beq.n	8006df6 <HAL_SPI_TransmitReceive+0x6c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006df2:	2302      	movs	r3, #2
 8006df4:	e30f      	b.n	8007416 <HAL_SPI_TransmitReceive+0x68c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <HAL_SPI_TransmitReceive+0x7e>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <HAL_SPI_TransmitReceive+0x7e>
 8006e02:	887b      	ldrh	r3, [r7, #2]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e304      	b.n	8007416 <HAL_SPI_TransmitReceive+0x68c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <HAL_SPI_TransmitReceive+0x90>
 8006e16:	2302      	movs	r3, #2
 8006e18:	e2fd      	b.n	8007416 <HAL_SPI_TransmitReceive+0x68c>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d003      	beq.n	8006e36 <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2205      	movs	r2, #5
 8006e32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	887a      	ldrh	r2, [r7, #2]
 8006e46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	887a      	ldrh	r2, [r7, #2]
 8006e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	887a      	ldrh	r2, [r7, #2]
 8006e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	887a      	ldrh	r2, [r7, #2]
 8006e62:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e78:	d10f      	bne.n	8006e9a <HAL_SPI_TransmitReceive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e98:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ea2:	d802      	bhi.n	8006eaa <HAL_SPI_TransmitReceive+0x120>
 8006ea4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d908      	bls.n	8006ebc <HAL_SPI_TransmitReceive+0x132>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006eb8:	605a      	str	r2, [r3, #4]
 8006eba:	e007      	b.n	8006ecc <HAL_SPI_TransmitReceive+0x142>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006eca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed6:	2b40      	cmp	r3, #64	@ 0x40
 8006ed8:	d007      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ef2:	f240 80d0 	bls.w	8007096 <HAL_SPI_TransmitReceive+0x30c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_SPI_TransmitReceive+0x17c>
 8006efe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	f040 80ba 	bne.w	800707a <HAL_SPI_TransmitReceive+0x2f0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0a:	881a      	ldrh	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f16:	1c9a      	adds	r2, r3, #2
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f040 80a2 	bne.w	800707a <HAL_SPI_TransmitReceive+0x2f0>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f3e:	f040 809c 	bne.w	800707a <HAL_SPI_TransmitReceive+0x2f0>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10c      	bne.n	8006f66 <HAL_SPI_TransmitReceive+0x1dc>
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d007      	beq.n	8006f66 <HAL_SPI_TransmitReceive+0x1dc>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f64:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f74:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f76:	e080      	b.n	800707a <HAL_SPI_TransmitReceive+0x2f0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d13f      	bne.n	8007006 <HAL_SPI_TransmitReceive+0x27c>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d03a      	beq.n	8007006 <HAL_SPI_TransmitReceive+0x27c>
 8006f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d137      	bne.n	8007006 <HAL_SPI_TransmitReceive+0x27c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9a:	881a      	ldrh	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa6:	1c9a      	adds	r2, r3, #2
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d11e      	bne.n	8007006 <HAL_SPI_TransmitReceive+0x27c>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fd0:	d119      	bne.n	8007006 <HAL_SPI_TransmitReceive+0x27c>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10c      	bne.n	8006ff6 <HAL_SPI_TransmitReceive+0x26c>
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	f003 0308 	and.w	r3, r3, #8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <HAL_SPI_TransmitReceive+0x26c>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ff4:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007004:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b01      	cmp	r3, #1
 8007012:	d11c      	bne.n	800704e <HAL_SPI_TransmitReceive+0x2c4>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800701a:	b29b      	uxth	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d016      	beq.n	800704e <HAL_SPI_TransmitReceive+0x2c4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702a:	b292      	uxth	r2, r2
 800702c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007032:	1c9a      	adds	r2, r3, #2
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800704a:	2301      	movs	r3, #1
 800704c:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800704e:	f7fc fe01 	bl	8003c54 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800705a:	429a      	cmp	r2, r3
 800705c:	d80d      	bhi.n	800707a <HAL_SPI_TransmitReceive+0x2f0>
 800705e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007064:	d009      	beq.n	800707a <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e1cd      	b.n	8007416 <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800707e:	b29b      	uxth	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	f47f af79 	bne.w	8006f78 <HAL_SPI_TransmitReceive+0x1ee>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	f47f af72 	bne.w	8006f78 <HAL_SPI_TransmitReceive+0x1ee>
 8007094:	e12f      	b.n	80072f6 <HAL_SPI_TransmitReceive+0x56c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <HAL_SPI_TransmitReceive+0x31c>
 800709e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	f040 811b 	bne.w	80072dc <HAL_SPI_TransmitReceive+0x552>
    {
      if (hspi->TxXferCount > 1U)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d912      	bls.n	80070d6 <HAL_SPI_TransmitReceive+0x34c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b4:	881a      	ldrh	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c0:	1c9a      	adds	r2, r3, #2
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b02      	subs	r3, #2
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070d4:	e102      	b.n	80072dc <HAL_SPI_TransmitReceive+0x552>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	330c      	adds	r3, #12
 80070e0:	7812      	ldrb	r2, [r2, #0]
 80070e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007100:	b29b      	uxth	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	f040 80ea 	bne.w	80072dc <HAL_SPI_TransmitReceive+0x552>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007110:	f040 80e4 	bne.w	80072dc <HAL_SPI_TransmitReceive+0x552>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10c      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x3ae>
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d007      	beq.n	8007138 <HAL_SPI_TransmitReceive+0x3ae>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007136:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007146:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007148:	e0c8      	b.n	80072dc <HAL_SPI_TransmitReceive+0x552>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b02      	cmp	r3, #2
 8007156:	d158      	bne.n	800720a <HAL_SPI_TransmitReceive+0x480>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d053      	beq.n	800720a <HAL_SPI_TransmitReceive+0x480>
 8007162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007164:	2b01      	cmp	r3, #1
 8007166:	d150      	bne.n	800720a <HAL_SPI_TransmitReceive+0x480>
      {
        if (hspi->TxXferCount > 1U)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800716c:	b29b      	uxth	r3, r3
 800716e:	2b01      	cmp	r3, #1
 8007170:	d912      	bls.n	8007198 <HAL_SPI_TransmitReceive+0x40e>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007176:	881a      	ldrh	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007182:	1c9a      	adds	r2, r3, #2
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800718c:	b29b      	uxth	r3, r3
 800718e:	3b02      	subs	r3, #2
 8007190:	b29a      	uxth	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007196:	e012      	b.n	80071be <HAL_SPI_TransmitReceive+0x434>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	330c      	adds	r3, #12
 80071a2:	7812      	ldrb	r2, [r2, #0]
 80071a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b01      	subs	r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d11e      	bne.n	800720a <HAL_SPI_TransmitReceive+0x480>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071d4:	d119      	bne.n	800720a <HAL_SPI_TransmitReceive+0x480>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10c      	bne.n	80071fa <HAL_SPI_TransmitReceive+0x470>
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	f003 0308 	and.w	r3, r3, #8
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d007      	beq.n	80071fa <HAL_SPI_TransmitReceive+0x470>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071f8:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007208:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	2b01      	cmp	r3, #1
 8007216:	d148      	bne.n	80072aa <HAL_SPI_TransmitReceive+0x520>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d042      	beq.n	80072aa <HAL_SPI_TransmitReceive+0x520>
      {
        if (hspi->RxXferCount > 1U)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800722a:	b29b      	uxth	r3, r3
 800722c:	2b01      	cmp	r3, #1
 800722e:	d923      	bls.n	8007278 <HAL_SPI_TransmitReceive+0x4ee>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723a:	b292      	uxth	r2, r2
 800723c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007242:	1c9a      	adds	r2, r3, #2
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800724e:	b29b      	uxth	r3, r3
 8007250:	3b02      	subs	r3, #2
 8007252:	b29a      	uxth	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b01      	cmp	r3, #1
 8007264:	d81f      	bhi.n	80072a6 <HAL_SPI_TransmitReceive+0x51c>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007274:	605a      	str	r2, [r3, #4]
 8007276:	e016      	b.n	80072a6 <HAL_SPI_TransmitReceive+0x51c>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f103 020c 	add.w	r2, r3, #12
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007284:	7812      	ldrb	r2, [r2, #0]
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800729a:	b29b      	uxth	r3, r3
 800729c:	3b01      	subs	r3, #1
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072a6:	2301      	movs	r3, #1
 80072a8:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072aa:	f7fc fcd3 	bl	8003c54 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d803      	bhi.n	80072c2 <HAL_SPI_TransmitReceive+0x538>
 80072ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c0:	d102      	bne.n	80072c8 <HAL_SPI_TransmitReceive+0x53e>
 80072c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d109      	bne.n	80072dc <HAL_SPI_TransmitReceive+0x552>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e09c      	b.n	8007416 <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f47f af31 	bne.w	800714a <HAL_SPI_TransmitReceive+0x3c0>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f47f af2a 	bne.w	800714a <HAL_SPI_TransmitReceive+0x3c0>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072fe:	d152      	bne.n	80073a6 <HAL_SPI_TransmitReceive+0x61c>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007306:	2201      	movs	r2, #1
 8007308:	2101      	movs	r1, #1
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 fea2 	bl	8008054 <SPI_WaitFlagStateUntilTimeout>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00f      	beq.n	8007336 <HAL_SPI_TransmitReceive+0x5ac>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800731a:	f043 0202 	orr.w	r2, r3, #2
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e06f      	b.n	8007416 <HAL_SPI_TransmitReceive+0x68c>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800733e:	d105      	bne.n	800734c <HAL_SPI_TransmitReceive+0x5c2>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	e02c      	b.n	80073a6 <HAL_SPI_TransmitReceive+0x61c>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	330c      	adds	r3, #12
 8007352:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800735c:	7cfb      	ldrb	r3, [r7, #19]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007362:	2b02      	cmp	r3, #2
 8007364:	d11f      	bne.n	80073a6 <HAL_SPI_TransmitReceive+0x61c>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800736c:	2201      	movs	r2, #1
 800736e:	2101      	movs	r1, #1
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 fe6f 	bl	8008054 <SPI_WaitFlagStateUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00f      	beq.n	800739c <HAL_SPI_TransmitReceive+0x612>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007380:	f043 0202 	orr.w	r2, r3, #2
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e03c      	b.n	8007416 <HAL_SPI_TransmitReceive+0x68c>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80073a4:	7cfb      	ldrb	r3, [r7, #19]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f003 0310 	and.w	r3, r3, #16
 80073b0:	2b10      	cmp	r3, #16
 80073b2:	d110      	bne.n	80073d6 <HAL_SPI_TransmitReceive+0x64c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073b8:	f043 0202 	orr.w	r2, r3, #2
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80073c8:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e01f      	b.n	8007416 <HAL_SPI_TransmitReceive+0x68c>
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 ffb0 	bl	8008340 <SPI_EndRxTxTransaction>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d008      	beq.n	80073f8 <HAL_SPI_TransmitReceive+0x66e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2220      	movs	r2, #32
 80073ea:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e00e      	b.n	8007416 <HAL_SPI_TransmitReceive+0x68c>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <HAL_SPI_TransmitReceive+0x68a>
  {
    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <HAL_SPI_TransmitReceive+0x68c>
  }
  else
  {
    return HAL_OK;
 8007414:	2300      	movs	r3, #0
  }
}
 8007416:	4618      	mov	r0, r3
 8007418:	3738      	adds	r7, #56	@ 0x38
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	4613      	mov	r3, r2
 800742c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <HAL_SPI_Transmit_IT+0x1a>
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e082      	b.n	8007544 <HAL_SPI_Transmit_IT+0x124>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	d001      	beq.n	800744e <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 800744a:	2302      	movs	r3, #2
 800744c:	e07a      	b.n	8007544 <HAL_SPI_Transmit_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_SPI_Transmit_IT+0x3c>
 8007458:	2302      	movs	r3, #2
 800745a:	e073      	b.n	8007544 <HAL_SPI_Transmit_IT+0x124>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2203      	movs	r2, #3
 8007468:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	88fa      	ldrh	r2, [r7, #6]
 8007482:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80074a8:	d903      	bls.n	80074b2 <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4a28      	ldr	r2, [pc, #160]	@ (8007550 <HAL_SPI_Transmit_IT+0x130>)
 80074ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80074b0:	e002      	b.n	80074b8 <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4a27      	ldr	r2, [pc, #156]	@ (8007554 <HAL_SPI_Transmit_IT+0x134>)
 80074b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074c0:	d10f      	bne.n	80074e2 <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074e0:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074ea:	d10f      	bne.n	800750c <HAL_SPI_Transmit_IT+0xec>
  {
    SPI_RESET_CRC(hspi);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800750a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007516:	2b40      	cmp	r3, #64	@ 0x40
 8007518:	d007      	beq.n	800752a <HAL_SPI_Transmit_IT+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007528:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8007540:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	08007ff5 	.word	0x08007ff5
 8007554:	08007f95 	.word	0x08007f95

08007558 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	4613      	mov	r3, r2
 8007564:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b01      	cmp	r3, #1
 8007570:	d001      	beq.n	8007576 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8007572:	2302      	movs	r3, #2
 8007574:	e0ba      	b.n	80076ec <HAL_SPI_Receive_IT+0x194>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d110      	bne.n	80075a0 <HAL_SPI_Receive_IT+0x48>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007586:	d10b      	bne.n	80075a0 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2204      	movs	r2, #4
 800758c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007590:	88fb      	ldrh	r3, [r7, #6]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 f8b0 	bl	80076fc <HAL_SPI_TransmitReceive_IT>
 800759c:	4603      	mov	r3, r0
 800759e:	e0a5      	b.n	80076ec <HAL_SPI_Receive_IT+0x194>
  }


  if ((pData == NULL) || (Size == 0U))
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <HAL_SPI_Receive_IT+0x54>
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e09d      	b.n	80076ec <HAL_SPI_Receive_IT+0x194>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <HAL_SPI_Receive_IT+0x66>
 80075ba:	2302      	movs	r3, #2
 80075bc:	e096      	b.n	80076ec <HAL_SPI_Receive_IT+0x194>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2204      	movs	r2, #4
 80075ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	88fa      	ldrh	r2, [r7, #6]
 80075de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	88fa      	ldrh	r2, [r7, #6]
 80075e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800760a:	d90b      	bls.n	8007624 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800761a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4a35      	ldr	r2, [pc, #212]	@ (80076f4 <HAL_SPI_Receive_IT+0x19c>)
 8007620:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007622:	e00a      	b.n	800763a <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007632:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4a30      	ldr	r2, [pc, #192]	@ (80076f8 <HAL_SPI_Receive_IT+0x1a0>)
 8007638:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007642:	d10f      	bne.n	8007664 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007652:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007662:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800766c:	d11f      	bne.n	80076ae <HAL_SPI_Receive_IT+0x156>
  {
    hspi->CRCSize = 1U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800767c:	d806      	bhi.n	800768c <HAL_SPI_Receive_IT+0x134>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007682:	2b02      	cmp	r3, #2
 8007684:	d102      	bne.n	800768c <HAL_SPI_Receive_IT+0x134>
    {
      hspi->CRCSize = 2U;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2202      	movs	r2, #2
 800768a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	e002      	b.n	80076b4 <HAL_SPI_Receive_IT+0x15c>
  }
  else
  {
    hspi->CRCSize = 0U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076be:	2b40      	cmp	r3, #64	@ 0x40
 80076c0:	d007      	beq.n	80076d2 <HAL_SPI_Receive_IT+0x17a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076d0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80076e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	08007f0d 	.word	0x08007f0d
 80076f8:	08007e4d 	.word	0x08007e4d

080076fc <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007710:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d00c      	beq.n	8007738 <HAL_SPI_TransmitReceive_IT+0x3c>
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007724:	d106      	bne.n	8007734 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d102      	bne.n	8007734 <HAL_SPI_TransmitReceive_IT+0x38>
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	2b04      	cmp	r3, #4
 8007732:	d001      	beq.n	8007738 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007734:	2302      	movs	r3, #2
 8007736:	e0a5      	b.n	8007884 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <HAL_SPI_TransmitReceive_IT+0x4e>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <HAL_SPI_TransmitReceive_IT+0x4e>
 8007744:	887b      	ldrh	r3, [r7, #2]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e09a      	b.n	8007884 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_SPI_TransmitReceive_IT+0x60>
 8007758:	2302      	movs	r3, #2
 800775a:	e093      	b.n	8007884 <HAL_SPI_TransmitReceive_IT+0x188>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b04      	cmp	r3, #4
 800776e:	d003      	beq.n	8007778 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2205      	movs	r2, #5
 8007774:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	887a      	ldrh	r2, [r7, #2]
 8007788:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	887a      	ldrh	r2, [r7, #2]
 800778e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	887a      	ldrh	r2, [r7, #2]
 800779a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	887a      	ldrh	r2, [r7, #2]
 80077a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077ae:	d906      	bls.n	80077be <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4a37      	ldr	r2, [pc, #220]	@ (8007890 <HAL_SPI_TransmitReceive_IT+0x194>)
 80077b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4a36      	ldr	r2, [pc, #216]	@ (8007894 <HAL_SPI_TransmitReceive_IT+0x198>)
 80077ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80077bc:	e005      	b.n	80077ca <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4a35      	ldr	r2, [pc, #212]	@ (8007898 <HAL_SPI_TransmitReceive_IT+0x19c>)
 80077c2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4a35      	ldr	r2, [pc, #212]	@ (800789c <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80077c8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077d2:	d11f      	bne.n	8007814 <HAL_SPI_TransmitReceive_IT+0x118>
  {
    hspi->CRCSize = 1U;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077e2:	d806      	bhi.n	80077f2 <HAL_SPI_TransmitReceive_IT+0xf6>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d102      	bne.n	80077f2 <HAL_SPI_TransmitReceive_IT+0xf6>
    {
      hspi->CRCSize = 2U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2202      	movs	r2, #2
 80077f0:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	e002      	b.n	800781a <HAL_SPI_TransmitReceive_IT+0x11e>
  }
  else
  {
    hspi->CRCSize = 0U;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007822:	d802      	bhi.n	800782a <HAL_SPI_TransmitReceive_IT+0x12e>
 8007824:	887b      	ldrh	r3, [r7, #2]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d908      	bls.n	800783c <HAL_SPI_TransmitReceive_IT+0x140>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007838:	605a      	str	r2, [r3, #4]
 800783a:	e007      	b.n	800784c <HAL_SPI_TransmitReceive_IT+0x150>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800784a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007856:	2b40      	cmp	r3, #64	@ 0x40
 8007858:	d007      	beq.n	800786a <HAL_SPI_TransmitReceive_IT+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007868:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8007880:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	371c      	adds	r7, #28
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	08007cd5 	.word	0x08007cd5
 8007894:	08007d85 	.word	0x08007d85
 8007898:	08007add 	.word	0x08007add
 800789c:	08007c19 	.word	0x08007c19

080078a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10e      	bne.n	80078e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d009      	beq.n	80078e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d004      	beq.n	80078e0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	4798      	blx	r3
    return;
 80078de:	e0ce      	b.n	8007a7e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d009      	beq.n	80078fe <HAL_SPI_IRQHandler+0x5e>
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d004      	beq.n	80078fe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	4798      	blx	r3
    return;
 80078fc:	e0bf      	b.n	8007a7e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <HAL_SPI_IRQHandler+0x7e>
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	d105      	bne.n	800791e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 80b0 	beq.w	8007a7e <HAL_SPI_IRQHandler+0x1de>
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 80aa 	beq.w	8007a7e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007930:	2b00      	cmp	r3, #0
 8007932:	d023      	beq.n	800797c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b03      	cmp	r3, #3
 800793e:	d011      	beq.n	8007964 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007944:	f043 0204 	orr.w	r2, r3, #4
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800794c:	2300      	movs	r3, #0
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	e00b      	b.n	800797c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007964:	2300      	movs	r3, #0
 8007966:	613b      	str	r3, [r7, #16]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	613b      	str	r3, [r7, #16]
 8007978:	693b      	ldr	r3, [r7, #16]
        return;
 800797a:	e080      	b.n	8007a7e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b00      	cmp	r3, #0
 8007984:	d014      	beq.n	80079b0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800798a:	f043 0201 	orr.w	r2, r3, #1
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00c      	beq.n	80079d4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079be:	f043 0208 	orr.w	r2, r3, #8
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079c6:	2300      	movs	r3, #0
 80079c8:	60bb      	str	r3, [r7, #8]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d04f      	beq.n	8007a7c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80079ea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d104      	bne.n	8007a08 <HAL_SPI_IRQHandler+0x168>
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d034      	beq.n	8007a72 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0203 	bic.w	r2, r2, #3
 8007a16:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d011      	beq.n	8007a44 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a24:	4a17      	ldr	r2, [pc, #92]	@ (8007a84 <HAL_SPI_IRQHandler+0x1e4>)
 8007a26:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fc fa52 	bl	8003ed6 <HAL_DMA_Abort_IT>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d005      	beq.n	8007a44 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d016      	beq.n	8007a7a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a50:	4a0c      	ldr	r2, [pc, #48]	@ (8007a84 <HAL_SPI_IRQHandler+0x1e4>)
 8007a52:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fc fa3c 	bl	8003ed6 <HAL_DMA_Abort_IT>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00a      	beq.n	8007a7a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007a70:	e003      	b.n	8007a7a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f812 	bl	8007a9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007a78:	e000      	b.n	8007a7c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007a7a:	bf00      	nop
    return;
 8007a7c:	bf00      	nop
  }
}
 8007a7e:	3720      	adds	r7, #32
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	08007ab1 	.word	0x08007ab1

08007a88 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f7ff ffe5 	bl	8007a9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ad2:	bf00      	nop
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
	...

08007adc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d923      	bls.n	8007b38 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afa:	b292      	uxth	r2, r2
 8007afc:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b02:	1c9a      	adds	r2, r3, #2
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	3b02      	subs	r3, #2
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d11f      	bne.n	8007b66 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b34:	605a      	str	r2, [r3, #4]
 8007b36:	e016      	b.n	8007b66 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f103 020c 	add.w	r2, r3, #12
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b44:	7812      	ldrb	r2, [r2, #0]
 8007b46:	b2d2      	uxtb	r2, r2
 8007b48:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d120      	bne.n	8007bb4 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b7a:	d10b      	bne.n	8007b94 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b8a:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8007bbc <SPI_2linesRxISR_8BIT+0xe0>)
 8007b90:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8007b92:	e00f      	b.n	8007bb4 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007ba2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d102      	bne.n	8007bb4 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fc0c 	bl	80083cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	08007bc1 	.word	0x08007bc1

08007bc0 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8007bdc:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007be2:	1e5a      	subs	r2, r3, #1
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10f      	bne.n	8007c10 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007bfe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d102      	bne.n	8007c10 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fbde 	bl	80083cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8007c10:	bf00      	nop
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d912      	bls.n	8007c50 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2e:	881a      	ldrh	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3a:	1c9a      	adds	r2, r3, #2
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	3b02      	subs	r3, #2
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c4e:	e012      	b.n	8007c76 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	330c      	adds	r3, #12
 8007c5a:	7812      	ldrb	r2, [r2, #0]
 8007c5c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d126      	bne.n	8007cce <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c88:	d110      	bne.n	8007cac <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c98:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ca8:	605a      	str	r2, [r3, #4]
      return;
 8007caa:	e010      	b.n	8007cce <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007cba:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d102      	bne.n	8007cce <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fb7f 	bl	80083cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce6:	b292      	uxth	r2, r2
 8007ce8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cee:	1c9a      	adds	r2, r3, #2
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d118      	bne.n	8007d44 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d1a:	d103      	bne.n	8007d24 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8007d4c <SPI_2linesRxISR_16BIT+0x78>)
 8007d20:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8007d22:	e00f      	b.n	8007d44 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685a      	ldr	r2, [r3, #4]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d32:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d102      	bne.n	8007d44 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fb44 	bl	80083cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	08007d51 	.word	0x08007d51

08007d50 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8007d64:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d74:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fb28 	bl	80083cc <SPI_CloseRxTx_ISR>
}
 8007d7c:	bf00      	nop
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	881a      	ldrh	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9c:	1c9a      	adds	r2, r3, #2
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	3b01      	subs	r3, #1
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d126      	bne.n	8007e08 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dc2:	d110      	bne.n	8007de6 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007dd2:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007de2:	605a      	str	r2, [r3, #4]
      return;
 8007de4:	e010      	b.n	8007e08 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007df4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d102      	bne.n	8007e08 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fae2 	bl	80083cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	330c      	adds	r3, #12
 8007e20:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8007e2a:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e30:	1e5a      	subs	r2, r3, #1
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	649a      	str	r2, [r3, #72]	@ 0x48

  if (hspi->CRCSize == 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d102      	bne.n	8007e44 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fb20 	bl	8008484 <SPI_CloseRx_ISR>
  }
}
 8007e44:	bf00      	nop
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f103 020c 	add.w	r2, r3, #12
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e60:	7812      	ldrb	r2, [r2, #0]
 8007e62:	b2d2      	uxtb	r2, r2
 8007e64:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d10c      	bne.n	8007ea8 <SPI_RxISR_8BIT+0x5c>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e96:	d107      	bne.n	8007ea8 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ea6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10b      	bne.n	8007ecc <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ebc:	d103      	bne.n	8007ec6 <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a04      	ldr	r2, [pc, #16]	@ (8007ed4 <SPI_RxISR_8BIT+0x88>)
 8007ec2:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8007ec4:	e002      	b.n	8007ecc <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fadc 	bl	8008484 <SPI_CloseRx_ISR>
  }
}
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	08007e0f 	.word	0x08007e0f

08007ed8 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8007eec:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007efc:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fac0 	bl	8008484 <SPI_CloseRx_ISR>
}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1e:	b292      	uxth	r2, r2
 8007f20:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f26:	1c9a      	adds	r2, r3, #2
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	3b01      	subs	r3, #1
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d10c      	bne.n	8007f64 <SPI_RxISR_16BIT+0x58>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f52:	d107      	bne.n	8007f64 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f62:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10b      	bne.n	8007f88 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f78:	d103      	bne.n	8007f82 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a04      	ldr	r2, [pc, #16]	@ (8007f90 <SPI_RxISR_16BIT+0x84>)
 8007f7e:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8007f80:	e002      	b.n	8007f88 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fa7e 	bl	8008484 <SPI_CloseRx_ISR>
  }
}
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	08007ed9 	.word	0x08007ed9

08007f94 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	330c      	adds	r3, #12
 8007fa6:	7812      	ldrb	r2, [r2, #0]
 8007fa8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10f      	bne.n	8007fec <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fd4:	d107      	bne.n	8007fe6 <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007fe4:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fa92 	bl	8008510 <SPI_CloseTx_ISR>
  }
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008000:	881a      	ldrh	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800c:	1c9a      	adds	r2, r3, #2
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008016:	b29b      	uxth	r3, r3
 8008018:	3b01      	subs	r3, #1
 800801a:	b29a      	uxth	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008024:	b29b      	uxth	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10f      	bne.n	800804a <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008032:	d107      	bne.n	8008044 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008042:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fa63 	bl	8008510 <SPI_CloseTx_ISR>
  }
}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	4613      	mov	r3, r2
 8008062:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008064:	f7fb fdf6 	bl	8003c54 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806c:	1a9b      	subs	r3, r3, r2
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	4413      	add	r3, r2
 8008072:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008074:	f7fb fdee 	bl	8003c54 <HAL_GetTick>
 8008078:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800807a:	4b39      	ldr	r3, [pc, #228]	@ (8008160 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	015b      	lsls	r3, r3, #5
 8008080:	0d1b      	lsrs	r3, r3, #20
 8008082:	69fa      	ldr	r2, [r7, #28]
 8008084:	fb02 f303 	mul.w	r3, r2, r3
 8008088:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800808a:	e054      	b.n	8008136 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008092:	d050      	beq.n	8008136 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008094:	f7fb fdde 	bl	8003c54 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	69fa      	ldr	r2, [r7, #28]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d902      	bls.n	80080aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d13d      	bne.n	8008126 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80080b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080c2:	d111      	bne.n	80080e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080cc:	d004      	beq.n	80080d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080d6:	d107      	bne.n	80080e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080f0:	d10f      	bne.n	8008112 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e017      	b.n	8008156 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800812c:	2300      	movs	r3, #0
 800812e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	3b01      	subs	r3, #1
 8008134:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689a      	ldr	r2, [r3, #8]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	4013      	ands	r3, r2
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	429a      	cmp	r2, r3
 8008144:	bf0c      	ite	eq
 8008146:	2301      	moveq	r3, #1
 8008148:	2300      	movne	r3, #0
 800814a:	b2db      	uxtb	r3, r3
 800814c:	461a      	mov	r2, r3
 800814e:	79fb      	ldrb	r3, [r7, #7]
 8008150:	429a      	cmp	r2, r3
 8008152:	d19b      	bne.n	800808c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3720      	adds	r7, #32
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	2000000c 	.word	0x2000000c

08008164 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08a      	sub	sp, #40	@ 0x28
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008176:	f7fb fd6d 	bl	8003c54 <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817e:	1a9b      	subs	r3, r3, r2
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	4413      	add	r3, r2
 8008184:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008186:	f7fb fd65 	bl	8003c54 <HAL_GetTick>
 800818a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	330c      	adds	r3, #12
 8008192:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008194:	4b3d      	ldr	r3, [pc, #244]	@ (800828c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	00da      	lsls	r2, r3, #3
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	0d1b      	lsrs	r3, r3, #20
 80081a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a6:	fb02 f303 	mul.w	r3, r2, r3
 80081aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80081ac:	e060      	b.n	8008270 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80081b4:	d107      	bne.n	80081c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d104      	bne.n	80081c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081cc:	d050      	beq.n	8008270 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081ce:	f7fb fd41 	bl	8003c54 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081da:	429a      	cmp	r2, r3
 80081dc:	d902      	bls.n	80081e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80081de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d13d      	bne.n	8008260 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80081f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081fc:	d111      	bne.n	8008222 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008206:	d004      	beq.n	8008212 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008210:	d107      	bne.n	8008222 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008220:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800822a:	d10f      	bne.n	800824c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800824a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e010      	b.n	8008282 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	3b01      	subs	r3, #1
 800826e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689a      	ldr	r2, [r3, #8]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	4013      	ands	r3, r2
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	429a      	cmp	r2, r3
 800827e:	d196      	bne.n	80081ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3728      	adds	r7, #40	@ 0x28
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	2000000c 	.word	0x2000000c

08008290 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af02      	add	r7, sp, #8
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082a4:	d111      	bne.n	80082ca <SPI_EndRxTransaction+0x3a>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ae:	d004      	beq.n	80082ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082b8:	d107      	bne.n	80082ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	2180      	movs	r1, #128	@ 0x80
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f7ff febd 	bl	8008054 <SPI_WaitFlagStateUntilTimeout>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d007      	beq.n	80082f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082e4:	f043 0220 	orr.w	r2, r3, #32
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e023      	b.n	8008338 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082f8:	d11d      	bne.n	8008336 <SPI_EndRxTransaction+0xa6>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008302:	d004      	beq.n	800830e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800830c:	d113      	bne.n	8008336 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2200      	movs	r2, #0
 8008316:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f7ff ff22 	bl	8008164 <SPI_WaitFifoStateUntilTimeout>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d007      	beq.n	8008336 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800832a:	f043 0220 	orr.w	r2, r3, #32
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e000      	b.n	8008338 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af02      	add	r7, sp, #8
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2200      	movs	r2, #0
 8008354:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f7ff ff03 	bl	8008164 <SPI_WaitFifoStateUntilTimeout>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d007      	beq.n	8008374 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008368:	f043 0220 	orr.w	r2, r3, #32
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e027      	b.n	80083c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2200      	movs	r2, #0
 800837c:	2180      	movs	r1, #128	@ 0x80
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f7ff fe68 	bl	8008054 <SPI_WaitFlagStateUntilTimeout>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800838e:	f043 0220 	orr.w	r2, r3, #32
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e014      	b.n	80083c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f7ff fedc 	bl	8008164 <SPI_WaitFifoStateUntilTimeout>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d007      	beq.n	80083c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083b6:	f043 0220 	orr.w	r2, r3, #32
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e000      	b.n	80083c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083d4:	f7fb fc3e 	bl	8003c54 <HAL_GetTick>
 80083d8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 0220 	bic.w	r2, r2, #32
 80083e8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	2164      	movs	r1, #100	@ 0x64
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff ffa6 	bl	8008340 <SPI_EndRxTxTransaction>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083fe:	f043 0220 	orr.w	r2, r3, #32
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f003 0310 	and.w	r3, r3, #16
 8008410:	2b10      	cmp	r3, #16
 8008412:	d112      	bne.n	800843a <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008420:	f043 0202 	orr.w	r2, r3, #2
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008430:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7ff fb32 	bl	8007a9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008438:	e020      	b.n	800847c <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800843e:	2b00      	cmp	r3, #0
 8008440:	d115      	bne.n	800846e <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b04      	cmp	r3, #4
 800844c:	d107      	bne.n	800845e <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7fa ff8e 	bl	8003378 <HAL_SPI_RxCpltCallback>
}
 800845c:	e00e      	b.n	800847c <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff fb0e 	bl	8007a88 <HAL_SPI_TxRxCpltCallback>
}
 800846c:	e006      	b.n	800847c <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff fb10 	bl	8007a9c <HAL_SPI_ErrorCallback>
}
 800847c:	bf00      	nop
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800849a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800849c:	f7fb fbda 	bl	8003c54 <HAL_GetTick>
 80084a0:	4603      	mov	r3, r0
 80084a2:	461a      	mov	r2, r3
 80084a4:	2164      	movs	r1, #100	@ 0x64
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7ff fef2 	bl	8008290 <SPI_EndRxTransaction>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d005      	beq.n	80084be <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084b6:	f043 0220 	orr.w	r2, r3, #32
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f003 0310 	and.w	r3, r3, #16
 80084d0:	2b10      	cmp	r3, #16
 80084d2:	d10e      	bne.n	80084f2 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084d8:	f043 0202 	orr.w	r2, r3, #2
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80084e8:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7ff fad6 	bl	8007a9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80084f0:	e00a      	b.n	8008508 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d103      	bne.n	8008502 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7fa ff3c 	bl	8003378 <HAL_SPI_RxCpltCallback>
}
 8008500:	e002      	b.n	8008508 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff faca 	bl	8007a9c <HAL_SPI_ErrorCallback>
}
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008518:	f7fb fb9c 	bl	8003c54 <HAL_GetTick>
 800851c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800852c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	2164      	movs	r1, #100	@ 0x64
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff ff04 	bl	8008340 <SPI_EndRxTxTransaction>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d005      	beq.n	800854a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008542:	f043 0220 	orr.w	r2, r3, #32
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10a      	bne.n	8008568 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008552:	2300      	movs	r3, #0
 8008554:	60bb      	str	r3, [r7, #8]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	60bb      	str	r3, [r7, #8]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	60bb      	str	r3, [r7, #8]
 8008566:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff fa8f 	bl	8007a9c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800857e:	e002      	b.n	8008586 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f7fa ff0d 	bl	80033a0 <HAL_SPI_TxCpltCallback>
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b082      	sub	sp, #8
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e049      	b.n	8008634 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d106      	bne.n	80085ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7f9 f977 	bl	80018a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2202      	movs	r2, #2
 80085be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3304      	adds	r3, #4
 80085ca:	4619      	mov	r1, r3
 80085cc:	4610      	mov	r0, r2
 80085ce:	f000 f9d5 	bl	800897c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b01      	cmp	r3, #1
 800864e:	d001      	beq.n	8008654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e04f      	b.n	80086f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2202      	movs	r2, #2
 8008658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68da      	ldr	r2, [r3, #12]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f042 0201 	orr.w	r2, r2, #1
 800866a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a23      	ldr	r2, [pc, #140]	@ (8008700 <HAL_TIM_Base_Start_IT+0xc4>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d01d      	beq.n	80086b2 <HAL_TIM_Base_Start_IT+0x76>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800867e:	d018      	beq.n	80086b2 <HAL_TIM_Base_Start_IT+0x76>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a1f      	ldr	r2, [pc, #124]	@ (8008704 <HAL_TIM_Base_Start_IT+0xc8>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d013      	beq.n	80086b2 <HAL_TIM_Base_Start_IT+0x76>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a1e      	ldr	r2, [pc, #120]	@ (8008708 <HAL_TIM_Base_Start_IT+0xcc>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00e      	beq.n	80086b2 <HAL_TIM_Base_Start_IT+0x76>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a1c      	ldr	r2, [pc, #112]	@ (800870c <HAL_TIM_Base_Start_IT+0xd0>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d009      	beq.n	80086b2 <HAL_TIM_Base_Start_IT+0x76>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008710 <HAL_TIM_Base_Start_IT+0xd4>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d004      	beq.n	80086b2 <HAL_TIM_Base_Start_IT+0x76>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a19      	ldr	r2, [pc, #100]	@ (8008714 <HAL_TIM_Base_Start_IT+0xd8>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d115      	bne.n	80086de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	4b17      	ldr	r3, [pc, #92]	@ (8008718 <HAL_TIM_Base_Start_IT+0xdc>)
 80086ba:	4013      	ands	r3, r2
 80086bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b06      	cmp	r3, #6
 80086c2:	d015      	beq.n	80086f0 <HAL_TIM_Base_Start_IT+0xb4>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086ca:	d011      	beq.n	80086f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0201 	orr.w	r2, r2, #1
 80086da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086dc:	e008      	b.n	80086f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f042 0201 	orr.w	r2, r2, #1
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	e000      	b.n	80086f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	40012c00 	.word	0x40012c00
 8008704:	40000400 	.word	0x40000400
 8008708:	40000800 	.word	0x40000800
 800870c:	40000c00 	.word	0x40000c00
 8008710:	40013400 	.word	0x40013400
 8008714:	40014000 	.word	0x40014000
 8008718:	00010007 	.word	0x00010007

0800871c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d020      	beq.n	8008780 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d01b      	beq.n	8008780 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f06f 0202 	mvn.w	r2, #2
 8008750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f8e9 	bl	800893e <HAL_TIM_IC_CaptureCallback>
 800876c:	e005      	b.n	800877a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f8db 	bl	800892a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f8ec 	bl	8008952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f003 0304 	and.w	r3, r3, #4
 8008786:	2b00      	cmp	r3, #0
 8008788:	d020      	beq.n	80087cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b00      	cmp	r3, #0
 8008792:	d01b      	beq.n	80087cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f06f 0204 	mvn.w	r2, #4
 800879c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2202      	movs	r2, #2
 80087a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f8c3 	bl	800893e <HAL_TIM_IC_CaptureCallback>
 80087b8:	e005      	b.n	80087c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f8b5 	bl	800892a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f8c6 	bl	8008952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	f003 0308 	and.w	r3, r3, #8
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d020      	beq.n	8008818 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f003 0308 	and.w	r3, r3, #8
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d01b      	beq.n	8008818 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f06f 0208 	mvn.w	r2, #8
 80087e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2204      	movs	r2, #4
 80087ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f89d 	bl	800893e <HAL_TIM_IC_CaptureCallback>
 8008804:	e005      	b.n	8008812 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f88f 	bl	800892a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f8a0 	bl	8008952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f003 0310 	and.w	r3, r3, #16
 800881e:	2b00      	cmp	r3, #0
 8008820:	d020      	beq.n	8008864 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f003 0310 	and.w	r3, r3, #16
 8008828:	2b00      	cmp	r3, #0
 800882a:	d01b      	beq.n	8008864 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f06f 0210 	mvn.w	r2, #16
 8008834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2208      	movs	r2, #8
 800883a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f877 	bl	800893e <HAL_TIM_IC_CaptureCallback>
 8008850:	e005      	b.n	800885e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f869 	bl	800892a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f87a 	bl	8008952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00c      	beq.n	8008888 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b00      	cmp	r3, #0
 8008876:	d007      	beq.n	8008888 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f06f 0201 	mvn.w	r2, #1
 8008880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7f8 fdfe 	bl	8001484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800888e:	2b00      	cmp	r3, #0
 8008890:	d104      	bne.n	800889c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00c      	beq.n	80088b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d007      	beq.n	80088b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80088ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f99b 	bl	8008bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00c      	beq.n	80088da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d007      	beq.n	80088da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80088d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f993 	bl	8008c00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00c      	beq.n	80088fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d007      	beq.n	80088fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80088f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f834 	bl	8008966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	f003 0320 	and.w	r3, r3, #32
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00c      	beq.n	8008922 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f003 0320 	and.w	r3, r3, #32
 800890e:	2b00      	cmp	r3, #0
 8008910:	d007      	beq.n	8008922 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f06f 0220 	mvn.w	r2, #32
 800891a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f95b 	bl	8008bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008922:	bf00      	nop
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800892a:	b480      	push	{r7}
 800892c:	b083      	sub	sp, #12
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008932:	bf00      	nop
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008952:	b480      	push	{r7}
 8008954:	b083      	sub	sp, #12
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800895a:	bf00      	nop
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008966:	b480      	push	{r7}
 8008968:	b083      	sub	sp, #12
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800896e:	bf00      	nop
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
	...

0800897c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a46      	ldr	r2, [pc, #280]	@ (8008aa8 <TIM_Base_SetConfig+0x12c>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d013      	beq.n	80089bc <TIM_Base_SetConfig+0x40>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800899a:	d00f      	beq.n	80089bc <TIM_Base_SetConfig+0x40>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a43      	ldr	r2, [pc, #268]	@ (8008aac <TIM_Base_SetConfig+0x130>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00b      	beq.n	80089bc <TIM_Base_SetConfig+0x40>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a42      	ldr	r2, [pc, #264]	@ (8008ab0 <TIM_Base_SetConfig+0x134>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d007      	beq.n	80089bc <TIM_Base_SetConfig+0x40>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a41      	ldr	r2, [pc, #260]	@ (8008ab4 <TIM_Base_SetConfig+0x138>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d003      	beq.n	80089bc <TIM_Base_SetConfig+0x40>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a40      	ldr	r2, [pc, #256]	@ (8008ab8 <TIM_Base_SetConfig+0x13c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d108      	bne.n	80089ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a35      	ldr	r2, [pc, #212]	@ (8008aa8 <TIM_Base_SetConfig+0x12c>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d01f      	beq.n	8008a16 <TIM_Base_SetConfig+0x9a>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089dc:	d01b      	beq.n	8008a16 <TIM_Base_SetConfig+0x9a>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a32      	ldr	r2, [pc, #200]	@ (8008aac <TIM_Base_SetConfig+0x130>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d017      	beq.n	8008a16 <TIM_Base_SetConfig+0x9a>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a31      	ldr	r2, [pc, #196]	@ (8008ab0 <TIM_Base_SetConfig+0x134>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d013      	beq.n	8008a16 <TIM_Base_SetConfig+0x9a>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a30      	ldr	r2, [pc, #192]	@ (8008ab4 <TIM_Base_SetConfig+0x138>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d00f      	beq.n	8008a16 <TIM_Base_SetConfig+0x9a>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a2f      	ldr	r2, [pc, #188]	@ (8008ab8 <TIM_Base_SetConfig+0x13c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d00b      	beq.n	8008a16 <TIM_Base_SetConfig+0x9a>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a2e      	ldr	r2, [pc, #184]	@ (8008abc <TIM_Base_SetConfig+0x140>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d007      	beq.n	8008a16 <TIM_Base_SetConfig+0x9a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a2d      	ldr	r2, [pc, #180]	@ (8008ac0 <TIM_Base_SetConfig+0x144>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d003      	beq.n	8008a16 <TIM_Base_SetConfig+0x9a>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a2c      	ldr	r2, [pc, #176]	@ (8008ac4 <TIM_Base_SetConfig+0x148>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d108      	bne.n	8008a28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	689a      	ldr	r2, [r3, #8]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a16      	ldr	r2, [pc, #88]	@ (8008aa8 <TIM_Base_SetConfig+0x12c>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d00f      	beq.n	8008a74 <TIM_Base_SetConfig+0xf8>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a18      	ldr	r2, [pc, #96]	@ (8008ab8 <TIM_Base_SetConfig+0x13c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d00b      	beq.n	8008a74 <TIM_Base_SetConfig+0xf8>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a17      	ldr	r2, [pc, #92]	@ (8008abc <TIM_Base_SetConfig+0x140>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d007      	beq.n	8008a74 <TIM_Base_SetConfig+0xf8>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a16      	ldr	r2, [pc, #88]	@ (8008ac0 <TIM_Base_SetConfig+0x144>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d003      	beq.n	8008a74 <TIM_Base_SetConfig+0xf8>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a15      	ldr	r2, [pc, #84]	@ (8008ac4 <TIM_Base_SetConfig+0x148>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d103      	bne.n	8008a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	691a      	ldr	r2, [r3, #16]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d105      	bne.n	8008a9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	f023 0201 	bic.w	r2, r3, #1
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	611a      	str	r2, [r3, #16]
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	40012c00 	.word	0x40012c00
 8008aac:	40000400 	.word	0x40000400
 8008ab0:	40000800 	.word	0x40000800
 8008ab4:	40000c00 	.word	0x40000c00
 8008ab8:	40013400 	.word	0x40013400
 8008abc:	40014000 	.word	0x40014000
 8008ac0:	40014400 	.word	0x40014400
 8008ac4:	40014800 	.word	0x40014800

08008ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e068      	b.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2202      	movs	r2, #2
 8008aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a2e      	ldr	r2, [pc, #184]	@ (8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d004      	beq.n	8008b14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d108      	bne.n	8008b26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a1e      	ldr	r2, [pc, #120]	@ (8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d01d      	beq.n	8008b86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b52:	d018      	beq.n	8008b86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a1b      	ldr	r2, [pc, #108]	@ (8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d013      	beq.n	8008b86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a1a      	ldr	r2, [pc, #104]	@ (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d00e      	beq.n	8008b86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a18      	ldr	r2, [pc, #96]	@ (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d009      	beq.n	8008b86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a13      	ldr	r2, [pc, #76]	@ (8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d004      	beq.n	8008b86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a14      	ldr	r2, [pc, #80]	@ (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d10c      	bne.n	8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	40012c00 	.word	0x40012c00
 8008bc4:	40013400 	.word	0x40013400
 8008bc8:	40000400 	.word	0x40000400
 8008bcc:	40000800 	.word	0x40000800
 8008bd0:	40000c00 	.word	0x40000c00
 8008bd4:	40014000 	.word	0x40014000

08008bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e040      	b.n	8008ca8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d106      	bne.n	8008c3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7f8 fe5c 	bl	80018f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2224      	movs	r2, #36	@ 0x24
 8008c40:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 0201 	bic.w	r2, r2, #1
 8008c50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fb6a 	bl	8009334 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f8af 	bl	8008dc4 <UART_SetConfig>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d101      	bne.n	8008c70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e01b      	b.n	8008ca8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689a      	ldr	r2, [r3, #8]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f042 0201 	orr.w	r2, r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fbe9 	bl	8009478 <UART_CheckIdleState>
 8008ca6:	4603      	mov	r3, r0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b08a      	sub	sp, #40	@ 0x28
 8008cb4:	af02      	add	r7, sp, #8
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cc4:	2b20      	cmp	r3, #32
 8008cc6:	d177      	bne.n	8008db8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <HAL_UART_Transmit+0x24>
 8008cce:	88fb      	ldrh	r3, [r7, #6]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e070      	b.n	8008dba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2221      	movs	r2, #33	@ 0x21
 8008ce4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ce6:	f7fa ffb5 	bl	8003c54 <HAL_GetTick>
 8008cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	88fa      	ldrh	r2, [r7, #6]
 8008cf0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	88fa      	ldrh	r2, [r7, #6]
 8008cf8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d04:	d108      	bne.n	8008d18 <HAL_UART_Transmit+0x68>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d104      	bne.n	8008d18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	61bb      	str	r3, [r7, #24]
 8008d16:	e003      	b.n	8008d20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d20:	e02f      	b.n	8008d82 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2180      	movs	r1, #128	@ 0x80
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 fc4b 	bl	80095c8 <UART_WaitOnFlagUntilTimeout>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d004      	beq.n	8008d42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e03b      	b.n	8008dba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10b      	bne.n	8008d60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	881a      	ldrh	r2, [r3, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d54:	b292      	uxth	r2, r2
 8008d56:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	3302      	adds	r3, #2
 8008d5c:	61bb      	str	r3, [r7, #24]
 8008d5e:	e007      	b.n	8008d70 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	781a      	ldrb	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1c9      	bne.n	8008d22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2200      	movs	r2, #0
 8008d96:	2140      	movs	r1, #64	@ 0x40
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 fc15 	bl	80095c8 <UART_WaitOnFlagUntilTimeout>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d004      	beq.n	8008dae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2220      	movs	r2, #32
 8008da8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e005      	b.n	8008dba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2220      	movs	r2, #32
 8008db2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	e000      	b.n	8008dba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008db8:	2302      	movs	r3, #2
  }
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3720      	adds	r7, #32
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dc8:	b08a      	sub	sp, #40	@ 0x28
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	689a      	ldr	r2, [r3, #8]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	431a      	orrs	r2, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	431a      	orrs	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	4ba4      	ldr	r3, [pc, #656]	@ (8009084 <UART_SetConfig+0x2c0>)
 8008df4:	4013      	ands	r3, r2
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	6812      	ldr	r2, [r2, #0]
 8008dfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008dfc:	430b      	orrs	r3, r1
 8008dfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a99      	ldr	r2, [pc, #612]	@ (8009088 <UART_SetConfig+0x2c4>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d004      	beq.n	8008e30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e40:	430a      	orrs	r2, r1
 8008e42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a90      	ldr	r2, [pc, #576]	@ (800908c <UART_SetConfig+0x2c8>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d126      	bne.n	8008e9c <UART_SetConfig+0xd8>
 8008e4e:	4b90      	ldr	r3, [pc, #576]	@ (8009090 <UART_SetConfig+0x2cc>)
 8008e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e54:	f003 0303 	and.w	r3, r3, #3
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d81b      	bhi.n	8008e94 <UART_SetConfig+0xd0>
 8008e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e64 <UART_SetConfig+0xa0>)
 8008e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e62:	bf00      	nop
 8008e64:	08008e75 	.word	0x08008e75
 8008e68:	08008e85 	.word	0x08008e85
 8008e6c:	08008e7d 	.word	0x08008e7d
 8008e70:	08008e8d 	.word	0x08008e8d
 8008e74:	2301      	movs	r3, #1
 8008e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e7a:	e116      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e82:	e112      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008e84:	2304      	movs	r3, #4
 8008e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e8a:	e10e      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008e8c:	2308      	movs	r3, #8
 8008e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e92:	e10a      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008e94:	2310      	movs	r3, #16
 8008e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e9a:	e106      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a7c      	ldr	r2, [pc, #496]	@ (8009094 <UART_SetConfig+0x2d0>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d138      	bne.n	8008f18 <UART_SetConfig+0x154>
 8008ea6:	4b7a      	ldr	r3, [pc, #488]	@ (8009090 <UART_SetConfig+0x2cc>)
 8008ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eac:	f003 030c 	and.w	r3, r3, #12
 8008eb0:	2b0c      	cmp	r3, #12
 8008eb2:	d82d      	bhi.n	8008f10 <UART_SetConfig+0x14c>
 8008eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ebc <UART_SetConfig+0xf8>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008ef1 	.word	0x08008ef1
 8008ec0:	08008f11 	.word	0x08008f11
 8008ec4:	08008f11 	.word	0x08008f11
 8008ec8:	08008f11 	.word	0x08008f11
 8008ecc:	08008f01 	.word	0x08008f01
 8008ed0:	08008f11 	.word	0x08008f11
 8008ed4:	08008f11 	.word	0x08008f11
 8008ed8:	08008f11 	.word	0x08008f11
 8008edc:	08008ef9 	.word	0x08008ef9
 8008ee0:	08008f11 	.word	0x08008f11
 8008ee4:	08008f11 	.word	0x08008f11
 8008ee8:	08008f11 	.word	0x08008f11
 8008eec:	08008f09 	.word	0x08008f09
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ef6:	e0d8      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008efe:	e0d4      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008f00:	2304      	movs	r3, #4
 8008f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f06:	e0d0      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008f08:	2308      	movs	r3, #8
 8008f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f0e:	e0cc      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008f10:	2310      	movs	r3, #16
 8008f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f16:	e0c8      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a5e      	ldr	r2, [pc, #376]	@ (8009098 <UART_SetConfig+0x2d4>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d125      	bne.n	8008f6e <UART_SetConfig+0x1aa>
 8008f22:	4b5b      	ldr	r3, [pc, #364]	@ (8009090 <UART_SetConfig+0x2cc>)
 8008f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008f2c:	2b30      	cmp	r3, #48	@ 0x30
 8008f2e:	d016      	beq.n	8008f5e <UART_SetConfig+0x19a>
 8008f30:	2b30      	cmp	r3, #48	@ 0x30
 8008f32:	d818      	bhi.n	8008f66 <UART_SetConfig+0x1a2>
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	d00a      	beq.n	8008f4e <UART_SetConfig+0x18a>
 8008f38:	2b20      	cmp	r3, #32
 8008f3a:	d814      	bhi.n	8008f66 <UART_SetConfig+0x1a2>
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <UART_SetConfig+0x182>
 8008f40:	2b10      	cmp	r3, #16
 8008f42:	d008      	beq.n	8008f56 <UART_SetConfig+0x192>
 8008f44:	e00f      	b.n	8008f66 <UART_SetConfig+0x1a2>
 8008f46:	2300      	movs	r3, #0
 8008f48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f4c:	e0ad      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008f4e:	2302      	movs	r3, #2
 8008f50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f54:	e0a9      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008f56:	2304      	movs	r3, #4
 8008f58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f5c:	e0a5      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008f5e:	2308      	movs	r3, #8
 8008f60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f64:	e0a1      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008f66:	2310      	movs	r3, #16
 8008f68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f6c:	e09d      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a4a      	ldr	r2, [pc, #296]	@ (800909c <UART_SetConfig+0x2d8>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d125      	bne.n	8008fc4 <UART_SetConfig+0x200>
 8008f78:	4b45      	ldr	r3, [pc, #276]	@ (8009090 <UART_SetConfig+0x2cc>)
 8008f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f84:	d016      	beq.n	8008fb4 <UART_SetConfig+0x1f0>
 8008f86:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f88:	d818      	bhi.n	8008fbc <UART_SetConfig+0x1f8>
 8008f8a:	2b80      	cmp	r3, #128	@ 0x80
 8008f8c:	d00a      	beq.n	8008fa4 <UART_SetConfig+0x1e0>
 8008f8e:	2b80      	cmp	r3, #128	@ 0x80
 8008f90:	d814      	bhi.n	8008fbc <UART_SetConfig+0x1f8>
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d002      	beq.n	8008f9c <UART_SetConfig+0x1d8>
 8008f96:	2b40      	cmp	r3, #64	@ 0x40
 8008f98:	d008      	beq.n	8008fac <UART_SetConfig+0x1e8>
 8008f9a:	e00f      	b.n	8008fbc <UART_SetConfig+0x1f8>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fa2:	e082      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008faa:	e07e      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008fac:	2304      	movs	r3, #4
 8008fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fb2:	e07a      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fba:	e076      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fc2:	e072      	b.n	80090aa <UART_SetConfig+0x2e6>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a35      	ldr	r2, [pc, #212]	@ (80090a0 <UART_SetConfig+0x2dc>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d12a      	bne.n	8009024 <UART_SetConfig+0x260>
 8008fce:	4b30      	ldr	r3, [pc, #192]	@ (8009090 <UART_SetConfig+0x2cc>)
 8008fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fdc:	d01a      	beq.n	8009014 <UART_SetConfig+0x250>
 8008fde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fe2:	d81b      	bhi.n	800901c <UART_SetConfig+0x258>
 8008fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fe8:	d00c      	beq.n	8009004 <UART_SetConfig+0x240>
 8008fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fee:	d815      	bhi.n	800901c <UART_SetConfig+0x258>
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d003      	beq.n	8008ffc <UART_SetConfig+0x238>
 8008ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ff8:	d008      	beq.n	800900c <UART_SetConfig+0x248>
 8008ffa:	e00f      	b.n	800901c <UART_SetConfig+0x258>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009002:	e052      	b.n	80090aa <UART_SetConfig+0x2e6>
 8009004:	2302      	movs	r3, #2
 8009006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800900a:	e04e      	b.n	80090aa <UART_SetConfig+0x2e6>
 800900c:	2304      	movs	r3, #4
 800900e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009012:	e04a      	b.n	80090aa <UART_SetConfig+0x2e6>
 8009014:	2308      	movs	r3, #8
 8009016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800901a:	e046      	b.n	80090aa <UART_SetConfig+0x2e6>
 800901c:	2310      	movs	r3, #16
 800901e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009022:	e042      	b.n	80090aa <UART_SetConfig+0x2e6>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a17      	ldr	r2, [pc, #92]	@ (8009088 <UART_SetConfig+0x2c4>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d13a      	bne.n	80090a4 <UART_SetConfig+0x2e0>
 800902e:	4b18      	ldr	r3, [pc, #96]	@ (8009090 <UART_SetConfig+0x2cc>)
 8009030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009034:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009038:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800903c:	d01a      	beq.n	8009074 <UART_SetConfig+0x2b0>
 800903e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009042:	d81b      	bhi.n	800907c <UART_SetConfig+0x2b8>
 8009044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009048:	d00c      	beq.n	8009064 <UART_SetConfig+0x2a0>
 800904a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800904e:	d815      	bhi.n	800907c <UART_SetConfig+0x2b8>
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <UART_SetConfig+0x298>
 8009054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009058:	d008      	beq.n	800906c <UART_SetConfig+0x2a8>
 800905a:	e00f      	b.n	800907c <UART_SetConfig+0x2b8>
 800905c:	2300      	movs	r3, #0
 800905e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009062:	e022      	b.n	80090aa <UART_SetConfig+0x2e6>
 8009064:	2302      	movs	r3, #2
 8009066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800906a:	e01e      	b.n	80090aa <UART_SetConfig+0x2e6>
 800906c:	2304      	movs	r3, #4
 800906e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009072:	e01a      	b.n	80090aa <UART_SetConfig+0x2e6>
 8009074:	2308      	movs	r3, #8
 8009076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800907a:	e016      	b.n	80090aa <UART_SetConfig+0x2e6>
 800907c:	2310      	movs	r3, #16
 800907e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009082:	e012      	b.n	80090aa <UART_SetConfig+0x2e6>
 8009084:	efff69f3 	.word	0xefff69f3
 8009088:	40008000 	.word	0x40008000
 800908c:	40013800 	.word	0x40013800
 8009090:	40021000 	.word	0x40021000
 8009094:	40004400 	.word	0x40004400
 8009098:	40004800 	.word	0x40004800
 800909c:	40004c00 	.word	0x40004c00
 80090a0:	40005000 	.word	0x40005000
 80090a4:	2310      	movs	r3, #16
 80090a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a9f      	ldr	r2, [pc, #636]	@ (800932c <UART_SetConfig+0x568>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d17a      	bne.n	80091aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80090b8:	2b08      	cmp	r3, #8
 80090ba:	d824      	bhi.n	8009106 <UART_SetConfig+0x342>
 80090bc:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <UART_SetConfig+0x300>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	080090e9 	.word	0x080090e9
 80090c8:	08009107 	.word	0x08009107
 80090cc:	080090f1 	.word	0x080090f1
 80090d0:	08009107 	.word	0x08009107
 80090d4:	080090f7 	.word	0x080090f7
 80090d8:	08009107 	.word	0x08009107
 80090dc:	08009107 	.word	0x08009107
 80090e0:	08009107 	.word	0x08009107
 80090e4:	080090ff 	.word	0x080090ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090e8:	f7fc fe0a 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 80090ec:	61f8      	str	r0, [r7, #28]
        break;
 80090ee:	e010      	b.n	8009112 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090f0:	4b8f      	ldr	r3, [pc, #572]	@ (8009330 <UART_SetConfig+0x56c>)
 80090f2:	61fb      	str	r3, [r7, #28]
        break;
 80090f4:	e00d      	b.n	8009112 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090f6:	f7fc fd6b 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 80090fa:	61f8      	str	r0, [r7, #28]
        break;
 80090fc:	e009      	b.n	8009112 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009102:	61fb      	str	r3, [r7, #28]
        break;
 8009104:	e005      	b.n	8009112 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009110:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 80fb 	beq.w	8009310 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	4613      	mov	r3, r2
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	4413      	add	r3, r2
 8009124:	69fa      	ldr	r2, [r7, #28]
 8009126:	429a      	cmp	r2, r3
 8009128:	d305      	bcc.n	8009136 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009130:	69fa      	ldr	r2, [r7, #28]
 8009132:	429a      	cmp	r2, r3
 8009134:	d903      	bls.n	800913e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800913c:	e0e8      	b.n	8009310 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	2200      	movs	r2, #0
 8009142:	461c      	mov	r4, r3
 8009144:	4615      	mov	r5, r2
 8009146:	f04f 0200 	mov.w	r2, #0
 800914a:	f04f 0300 	mov.w	r3, #0
 800914e:	022b      	lsls	r3, r5, #8
 8009150:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009154:	0222      	lsls	r2, r4, #8
 8009156:	68f9      	ldr	r1, [r7, #12]
 8009158:	6849      	ldr	r1, [r1, #4]
 800915a:	0849      	lsrs	r1, r1, #1
 800915c:	2000      	movs	r0, #0
 800915e:	4688      	mov	r8, r1
 8009160:	4681      	mov	r9, r0
 8009162:	eb12 0a08 	adds.w	sl, r2, r8
 8009166:	eb43 0b09 	adc.w	fp, r3, r9
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	603b      	str	r3, [r7, #0]
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009178:	4650      	mov	r0, sl
 800917a:	4659      	mov	r1, fp
 800917c:	f7f7 fd84 	bl	8000c88 <__aeabi_uldivmod>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4613      	mov	r3, r2
 8009186:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800918e:	d308      	bcc.n	80091a2 <UART_SetConfig+0x3de>
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009196:	d204      	bcs.n	80091a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	60da      	str	r2, [r3, #12]
 80091a0:	e0b6      	b.n	8009310 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80091a8:	e0b2      	b.n	8009310 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091b2:	d15e      	bne.n	8009272 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80091b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80091b8:	2b08      	cmp	r3, #8
 80091ba:	d828      	bhi.n	800920e <UART_SetConfig+0x44a>
 80091bc:	a201      	add	r2, pc, #4	@ (adr r2, 80091c4 <UART_SetConfig+0x400>)
 80091be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c2:	bf00      	nop
 80091c4:	080091e9 	.word	0x080091e9
 80091c8:	080091f1 	.word	0x080091f1
 80091cc:	080091f9 	.word	0x080091f9
 80091d0:	0800920f 	.word	0x0800920f
 80091d4:	080091ff 	.word	0x080091ff
 80091d8:	0800920f 	.word	0x0800920f
 80091dc:	0800920f 	.word	0x0800920f
 80091e0:	0800920f 	.word	0x0800920f
 80091e4:	08009207 	.word	0x08009207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091e8:	f7fc fd8a 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 80091ec:	61f8      	str	r0, [r7, #28]
        break;
 80091ee:	e014      	b.n	800921a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091f0:	f7fc fd9c 	bl	8005d2c <HAL_RCC_GetPCLK2Freq>
 80091f4:	61f8      	str	r0, [r7, #28]
        break;
 80091f6:	e010      	b.n	800921a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091f8:	4b4d      	ldr	r3, [pc, #308]	@ (8009330 <UART_SetConfig+0x56c>)
 80091fa:	61fb      	str	r3, [r7, #28]
        break;
 80091fc:	e00d      	b.n	800921a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091fe:	f7fc fce7 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8009202:	61f8      	str	r0, [r7, #28]
        break;
 8009204:	e009      	b.n	800921a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800920a:	61fb      	str	r3, [r7, #28]
        break;
 800920c:	e005      	b.n	800921a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009218:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d077      	beq.n	8009310 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	005a      	lsls	r2, r3, #1
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	085b      	lsrs	r3, r3, #1
 800922a:	441a      	add	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	fbb2 f3f3 	udiv	r3, r2, r3
 8009234:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	2b0f      	cmp	r3, #15
 800923a:	d916      	bls.n	800926a <UART_SetConfig+0x4a6>
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009242:	d212      	bcs.n	800926a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	b29b      	uxth	r3, r3
 8009248:	f023 030f 	bic.w	r3, r3, #15
 800924c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	085b      	lsrs	r3, r3, #1
 8009252:	b29b      	uxth	r3, r3
 8009254:	f003 0307 	and.w	r3, r3, #7
 8009258:	b29a      	uxth	r2, r3
 800925a:	8afb      	ldrh	r3, [r7, #22]
 800925c:	4313      	orrs	r3, r2
 800925e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	8afa      	ldrh	r2, [r7, #22]
 8009266:	60da      	str	r2, [r3, #12]
 8009268:	e052      	b.n	8009310 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009270:	e04e      	b.n	8009310 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009272:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009276:	2b08      	cmp	r3, #8
 8009278:	d827      	bhi.n	80092ca <UART_SetConfig+0x506>
 800927a:	a201      	add	r2, pc, #4	@ (adr r2, 8009280 <UART_SetConfig+0x4bc>)
 800927c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009280:	080092a5 	.word	0x080092a5
 8009284:	080092ad 	.word	0x080092ad
 8009288:	080092b5 	.word	0x080092b5
 800928c:	080092cb 	.word	0x080092cb
 8009290:	080092bb 	.word	0x080092bb
 8009294:	080092cb 	.word	0x080092cb
 8009298:	080092cb 	.word	0x080092cb
 800929c:	080092cb 	.word	0x080092cb
 80092a0:	080092c3 	.word	0x080092c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092a4:	f7fc fd2c 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 80092a8:	61f8      	str	r0, [r7, #28]
        break;
 80092aa:	e014      	b.n	80092d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092ac:	f7fc fd3e 	bl	8005d2c <HAL_RCC_GetPCLK2Freq>
 80092b0:	61f8      	str	r0, [r7, #28]
        break;
 80092b2:	e010      	b.n	80092d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092b4:	4b1e      	ldr	r3, [pc, #120]	@ (8009330 <UART_SetConfig+0x56c>)
 80092b6:	61fb      	str	r3, [r7, #28]
        break;
 80092b8:	e00d      	b.n	80092d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092ba:	f7fc fc89 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 80092be:	61f8      	str	r0, [r7, #28]
        break;
 80092c0:	e009      	b.n	80092d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092c6:	61fb      	str	r3, [r7, #28]
        break;
 80092c8:	e005      	b.n	80092d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80092d4:	bf00      	nop
    }

    if (pclk != 0U)
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d019      	beq.n	8009310 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	085a      	lsrs	r2, r3, #1
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	441a      	add	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80092ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	2b0f      	cmp	r3, #15
 80092f4:	d909      	bls.n	800930a <UART_SetConfig+0x546>
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092fc:	d205      	bcs.n	800930a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	b29a      	uxth	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	60da      	str	r2, [r3, #12]
 8009308:	e002      	b.n	8009310 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800931c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009320:	4618      	mov	r0, r3
 8009322:	3728      	adds	r7, #40	@ 0x28
 8009324:	46bd      	mov	sp, r7
 8009326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800932a:	bf00      	nop
 800932c:	40008000 	.word	0x40008000
 8009330:	00f42400 	.word	0x00f42400

08009334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009340:	f003 0308 	and.w	r3, r3, #8
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00a      	beq.n	800935e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	430a      	orrs	r2, r1
 800937e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009384:	f003 0302 	and.w	r3, r3, #2
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00a      	beq.n	80093a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a6:	f003 0304 	and.w	r3, r3, #4
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	430a      	orrs	r2, r1
 80093c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c8:	f003 0310 	and.w	r3, r3, #16
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00a      	beq.n	80093e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	430a      	orrs	r2, r1
 80093e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ea:	f003 0320 	and.w	r3, r3, #32
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00a      	beq.n	8009408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	430a      	orrs	r2, r1
 8009406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800940c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009410:	2b00      	cmp	r3, #0
 8009412:	d01a      	beq.n	800944a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800942e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009432:	d10a      	bne.n	800944a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	430a      	orrs	r2, r1
 8009448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00a      	beq.n	800946c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	430a      	orrs	r2, r1
 800946a:	605a      	str	r2, [r3, #4]
  }
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b098      	sub	sp, #96	@ 0x60
 800947c:	af02      	add	r7, sp, #8
 800947e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009488:	f7fa fbe4 	bl	8003c54 <HAL_GetTick>
 800948c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0308 	and.w	r3, r3, #8
 8009498:	2b08      	cmp	r3, #8
 800949a:	d12e      	bne.n	80094fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800949c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094a4:	2200      	movs	r2, #0
 80094a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f88c 	bl	80095c8 <UART_WaitOnFlagUntilTimeout>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d021      	beq.n	80094fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094be:	e853 3f00 	ldrex	r3, [r3]
 80094c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	461a      	mov	r2, r3
 80094d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80094d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094dc:	e841 2300 	strex	r3, r2, [r1]
 80094e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e6      	bne.n	80094b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2220      	movs	r2, #32
 80094ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e062      	b.n	80095c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	2b04      	cmp	r3, #4
 8009506:	d149      	bne.n	800959c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009508:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009510:	2200      	movs	r2, #0
 8009512:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f856 	bl	80095c8 <UART_WaitOnFlagUntilTimeout>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d03c      	beq.n	800959c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952a:	e853 3f00 	ldrex	r3, [r3]
 800952e:	623b      	str	r3, [r7, #32]
   return(result);
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	461a      	mov	r2, r3
 800953e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009540:	633b      	str	r3, [r7, #48]	@ 0x30
 8009542:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009544:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009548:	e841 2300 	strex	r3, r2, [r1]
 800954c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800954e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1e6      	bne.n	8009522 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	3308      	adds	r3, #8
 800955a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	e853 3f00 	ldrex	r3, [r3]
 8009562:	60fb      	str	r3, [r7, #12]
   return(result);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f023 0301 	bic.w	r3, r3, #1
 800956a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3308      	adds	r3, #8
 8009572:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009574:	61fa      	str	r2, [r7, #28]
 8009576:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	69b9      	ldr	r1, [r7, #24]
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	617b      	str	r3, [r7, #20]
   return(result);
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e5      	bne.n	8009554 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2220      	movs	r2, #32
 800958c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e011      	b.n	80095c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2220      	movs	r2, #32
 80095a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2220      	movs	r2, #32
 80095a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3758      	adds	r7, #88	@ 0x58
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	603b      	str	r3, [r7, #0]
 80095d4:	4613      	mov	r3, r2
 80095d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095d8:	e04f      	b.n	800967a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e0:	d04b      	beq.n	800967a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095e2:	f7fa fb37 	bl	8003c54 <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d302      	bcc.n	80095f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e04e      	b.n	800969a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0304 	and.w	r3, r3, #4
 8009606:	2b00      	cmp	r3, #0
 8009608:	d037      	beq.n	800967a <UART_WaitOnFlagUntilTimeout+0xb2>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2b80      	cmp	r3, #128	@ 0x80
 800960e:	d034      	beq.n	800967a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	2b40      	cmp	r3, #64	@ 0x40
 8009614:	d031      	beq.n	800967a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	69db      	ldr	r3, [r3, #28]
 800961c:	f003 0308 	and.w	r3, r3, #8
 8009620:	2b08      	cmp	r3, #8
 8009622:	d110      	bne.n	8009646 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2208      	movs	r2, #8
 800962a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 f838 	bl	80096a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2208      	movs	r2, #8
 8009636:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e029      	b.n	800969a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	69db      	ldr	r3, [r3, #28]
 800964c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009654:	d111      	bne.n	800967a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800965e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 f81e 	bl	80096a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2220      	movs	r2, #32
 800966a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009676:	2303      	movs	r3, #3
 8009678:	e00f      	b.n	800969a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69da      	ldr	r2, [r3, #28]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	4013      	ands	r3, r2
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	429a      	cmp	r2, r3
 8009688:	bf0c      	ite	eq
 800968a:	2301      	moveq	r3, #1
 800968c:	2300      	movne	r3, #0
 800968e:	b2db      	uxtb	r3, r3
 8009690:	461a      	mov	r2, r3
 8009692:	79fb      	ldrb	r3, [r7, #7]
 8009694:	429a      	cmp	r2, r3
 8009696:	d0a0      	beq.n	80095da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b095      	sub	sp, #84	@ 0x54
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b2:	e853 3f00 	ldrex	r3, [r3]
 80096b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	461a      	mov	r2, r3
 80096c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80096ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096d0:	e841 2300 	strex	r3, r2, [r1]
 80096d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1e6      	bne.n	80096aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3308      	adds	r3, #8
 80096e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	e853 3f00 	ldrex	r3, [r3]
 80096ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	f023 0301 	bic.w	r3, r3, #1
 80096f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3308      	adds	r3, #8
 80096fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e5      	bne.n	80096dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009714:	2b01      	cmp	r3, #1
 8009716:	d118      	bne.n	800974a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	e853 3f00 	ldrex	r3, [r3]
 8009724:	60bb      	str	r3, [r7, #8]
   return(result);
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	f023 0310 	bic.w	r3, r3, #16
 800972c:	647b      	str	r3, [r7, #68]	@ 0x44
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009736:	61bb      	str	r3, [r7, #24]
 8009738:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973a:	6979      	ldr	r1, [r7, #20]
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	e841 2300 	strex	r3, r2, [r1]
 8009742:	613b      	str	r3, [r7, #16]
   return(result);
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1e6      	bne.n	8009718 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2220      	movs	r2, #32
 800974e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800975e:	bf00      	nop
 8009760:	3754      	adds	r7, #84	@ 0x54
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
	...

0800976c <__NVIC_SetPriority>:
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	6039      	str	r1, [r7, #0]
 8009776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800977c:	2b00      	cmp	r3, #0
 800977e:	db0a      	blt.n	8009796 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	b2da      	uxtb	r2, r3
 8009784:	490c      	ldr	r1, [pc, #48]	@ (80097b8 <__NVIC_SetPriority+0x4c>)
 8009786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800978a:	0112      	lsls	r2, r2, #4
 800978c:	b2d2      	uxtb	r2, r2
 800978e:	440b      	add	r3, r1
 8009790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009794:	e00a      	b.n	80097ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	b2da      	uxtb	r2, r3
 800979a:	4908      	ldr	r1, [pc, #32]	@ (80097bc <__NVIC_SetPriority+0x50>)
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	3b04      	subs	r3, #4
 80097a4:	0112      	lsls	r2, r2, #4
 80097a6:	b2d2      	uxtb	r2, r2
 80097a8:	440b      	add	r3, r1
 80097aa:	761a      	strb	r2, [r3, #24]
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	e000e100 	.word	0xe000e100
 80097bc:	e000ed00 	.word	0xe000ed00

080097c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80097c4:	2100      	movs	r1, #0
 80097c6:	f06f 0004 	mvn.w	r0, #4
 80097ca:	f7ff ffcf 	bl	800976c <__NVIC_SetPriority>
#endif
}
 80097ce:	bf00      	nop
 80097d0:	bd80      	pop	{r7, pc}
	...

080097d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097da:	f3ef 8305 	mrs	r3, IPSR
 80097de:	603b      	str	r3, [r7, #0]
  return(result);
 80097e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80097e6:	f06f 0305 	mvn.w	r3, #5
 80097ea:	607b      	str	r3, [r7, #4]
 80097ec:	e00c      	b.n	8009808 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80097ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009818 <osKernelInitialize+0x44>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d105      	bne.n	8009802 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80097f6:	4b08      	ldr	r3, [pc, #32]	@ (8009818 <osKernelInitialize+0x44>)
 80097f8:	2201      	movs	r2, #1
 80097fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	607b      	str	r3, [r7, #4]
 8009800:	e002      	b.n	8009808 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009802:	f04f 33ff 	mov.w	r3, #4294967295
 8009806:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009808:	687b      	ldr	r3, [r7, #4]
}
 800980a:	4618      	mov	r0, r3
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	20001714 	.word	0x20001714

0800981c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009822:	f3ef 8305 	mrs	r3, IPSR
 8009826:	603b      	str	r3, [r7, #0]
  return(result);
 8009828:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <osKernelStart+0x1a>
    stat = osErrorISR;
 800982e:	f06f 0305 	mvn.w	r3, #5
 8009832:	607b      	str	r3, [r7, #4]
 8009834:	e010      	b.n	8009858 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009836:	4b0b      	ldr	r3, [pc, #44]	@ (8009864 <osKernelStart+0x48>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d109      	bne.n	8009852 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800983e:	f7ff ffbf 	bl	80097c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009842:	4b08      	ldr	r3, [pc, #32]	@ (8009864 <osKernelStart+0x48>)
 8009844:	2202      	movs	r2, #2
 8009846:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009848:	f001 fc7a 	bl	800b140 <vTaskStartScheduler>
      stat = osOK;
 800984c:	2300      	movs	r3, #0
 800984e:	607b      	str	r3, [r7, #4]
 8009850:	e002      	b.n	8009858 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009852:	f04f 33ff 	mov.w	r3, #4294967295
 8009856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009858:	687b      	ldr	r3, [r7, #4]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20001714 	.word	0x20001714

08009868 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009868:	b580      	push	{r7, lr}
 800986a:	b08e      	sub	sp, #56	@ 0x38
 800986c:	af04      	add	r7, sp, #16
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009874:	2300      	movs	r3, #0
 8009876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009878:	f3ef 8305 	mrs	r3, IPSR
 800987c:	617b      	str	r3, [r7, #20]
  return(result);
 800987e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009880:	2b00      	cmp	r3, #0
 8009882:	d17e      	bne.n	8009982 <osThreadNew+0x11a>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d07b      	beq.n	8009982 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800988a:	2380      	movs	r3, #128	@ 0x80
 800988c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800988e:	2318      	movs	r3, #24
 8009890:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009892:	2300      	movs	r3, #0
 8009894:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009896:	f04f 33ff 	mov.w	r3, #4294967295
 800989a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d045      	beq.n	800992e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <osThreadNew+0x48>
        name = attr->name;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d008      	beq.n	80098d6 <osThreadNew+0x6e>
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	2b38      	cmp	r3, #56	@ 0x38
 80098c8:	d805      	bhi.n	80098d6 <osThreadNew+0x6e>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <osThreadNew+0x72>
        return (NULL);
 80098d6:	2300      	movs	r3, #0
 80098d8:	e054      	b.n	8009984 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	089b      	lsrs	r3, r3, #2
 80098e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00e      	beq.n	8009910 <osThreadNew+0xa8>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	2b5b      	cmp	r3, #91	@ 0x5b
 80098f8:	d90a      	bls.n	8009910 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d006      	beq.n	8009910 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <osThreadNew+0xa8>
        mem = 1;
 800990a:	2301      	movs	r3, #1
 800990c:	61bb      	str	r3, [r7, #24]
 800990e:	e010      	b.n	8009932 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10c      	bne.n	8009932 <osThreadNew+0xca>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d108      	bne.n	8009932 <osThreadNew+0xca>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d104      	bne.n	8009932 <osThreadNew+0xca>
          mem = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	61bb      	str	r3, [r7, #24]
 800992c:	e001      	b.n	8009932 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d110      	bne.n	800995a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009940:	9202      	str	r2, [sp, #8]
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	6a3a      	ldr	r2, [r7, #32]
 800994c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f001 fa50 	bl	800adf4 <xTaskCreateStatic>
 8009954:	4603      	mov	r3, r0
 8009956:	613b      	str	r3, [r7, #16]
 8009958:	e013      	b.n	8009982 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d110      	bne.n	8009982 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	b29a      	uxth	r2, r3
 8009964:	f107 0310 	add.w	r3, r7, #16
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f001 fa9e 	bl	800aeb4 <xTaskCreate>
 8009978:	4603      	mov	r3, r0
 800997a:	2b01      	cmp	r3, #1
 800997c:	d001      	beq.n	8009982 <osThreadNew+0x11a>
            hTask = NULL;
 800997e:	2300      	movs	r3, #0
 8009980:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009982:	693b      	ldr	r3, [r7, #16]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3728      	adds	r7, #40	@ 0x28
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800998c:	b580      	push	{r7, lr}
 800998e:	b08a      	sub	sp, #40	@ 0x28
 8009990:	af02      	add	r7, sp, #8
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009998:	2300      	movs	r3, #0
 800999a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800999c:	f3ef 8305 	mrs	r3, IPSR
 80099a0:	613b      	str	r3, [r7, #16]
  return(result);
 80099a2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d175      	bne.n	8009a94 <osSemaphoreNew+0x108>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d072      	beq.n	8009a94 <osSemaphoreNew+0x108>
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d86e      	bhi.n	8009a94 <osSemaphoreNew+0x108>
    mem = -1;
 80099b6:	f04f 33ff 	mov.w	r3, #4294967295
 80099ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d015      	beq.n	80099ee <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d006      	beq.n	80099d8 <osSemaphoreNew+0x4c>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	2b4f      	cmp	r3, #79	@ 0x4f
 80099d0:	d902      	bls.n	80099d8 <osSemaphoreNew+0x4c>
        mem = 1;
 80099d2:	2301      	movs	r3, #1
 80099d4:	61bb      	str	r3, [r7, #24]
 80099d6:	e00c      	b.n	80099f2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d108      	bne.n	80099f2 <osSemaphoreNew+0x66>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d104      	bne.n	80099f2 <osSemaphoreNew+0x66>
          mem = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61bb      	str	r3, [r7, #24]
 80099ec:	e001      	b.n	80099f2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f8:	d04c      	beq.n	8009a94 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d128      	bne.n	8009a52 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d10a      	bne.n	8009a1c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	2203      	movs	r2, #3
 8009a0c:	9200      	str	r2, [sp, #0]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2100      	movs	r1, #0
 8009a12:	2001      	movs	r0, #1
 8009a14:	f000 fa2c 	bl	8009e70 <xQueueGenericCreateStatic>
 8009a18:	61f8      	str	r0, [r7, #28]
 8009a1a:	e005      	b.n	8009a28 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009a1c:	2203      	movs	r2, #3
 8009a1e:	2100      	movs	r1, #0
 8009a20:	2001      	movs	r0, #1
 8009a22:	f000 faa2 	bl	8009f6a <xQueueGenericCreate>
 8009a26:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d022      	beq.n	8009a74 <osSemaphoreNew+0xe8>
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d01f      	beq.n	8009a74 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009a34:	2300      	movs	r3, #0
 8009a36:	2200      	movs	r2, #0
 8009a38:	2100      	movs	r1, #0
 8009a3a:	69f8      	ldr	r0, [r7, #28]
 8009a3c:	f000 fb62 	bl	800a104 <xQueueGenericSend>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d016      	beq.n	8009a74 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009a46:	69f8      	ldr	r0, [r7, #28]
 8009a48:	f001 f800 	bl	800aa4c <vQueueDelete>
            hSemaphore = NULL;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	61fb      	str	r3, [r7, #28]
 8009a50:	e010      	b.n	8009a74 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d108      	bne.n	8009a6a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 fae0 	bl	800a026 <xQueueCreateCountingSemaphoreStatic>
 8009a66:	61f8      	str	r0, [r7, #28]
 8009a68:	e004      	b.n	8009a74 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009a6a:	68b9      	ldr	r1, [r7, #8]
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f000 fb13 	bl	800a098 <xQueueCreateCountingSemaphore>
 8009a72:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00c      	beq.n	8009a94 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d003      	beq.n	8009a88 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	617b      	str	r3, [r7, #20]
 8009a86:	e001      	b.n	8009a8c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009a8c:	6979      	ldr	r1, [r7, #20]
 8009a8e:	69f8      	ldr	r0, [r7, #28]
 8009a90:	f001 f928 	bl	800ace4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009a94:	69fb      	ldr	r3, [r7, #28]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3720      	adds	r7, #32
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d103      	bne.n	8009ac0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009ab8:	f06f 0303 	mvn.w	r3, #3
 8009abc:	617b      	str	r3, [r7, #20]
 8009abe:	e039      	b.n	8009b34 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ac0:	f3ef 8305 	mrs	r3, IPSR
 8009ac4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d022      	beq.n	8009b12 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009ad2:	f06f 0303 	mvn.w	r3, #3
 8009ad6:	617b      	str	r3, [r7, #20]
 8009ad8:	e02c      	b.n	8009b34 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009ade:	f107 0308 	add.w	r3, r7, #8
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	6938      	ldr	r0, [r7, #16]
 8009ae8:	f000 ff2e 	bl	800a948 <xQueueReceiveFromISR>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d003      	beq.n	8009afa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009af2:	f06f 0302 	mvn.w	r3, #2
 8009af6:	617b      	str	r3, [r7, #20]
 8009af8:	e01c      	b.n	8009b34 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d019      	beq.n	8009b34 <osSemaphoreAcquire+0x94>
 8009b00:	4b0f      	ldr	r3, [pc, #60]	@ (8009b40 <osSemaphoreAcquire+0xa0>)
 8009b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	e010      	b.n	8009b34 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6938      	ldr	r0, [r7, #16]
 8009b16:	f000 fe07 	bl	800a728 <xQueueSemaphoreTake>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d009      	beq.n	8009b34 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009b26:	f06f 0301 	mvn.w	r3, #1
 8009b2a:	617b      	str	r3, [r7, #20]
 8009b2c:	e002      	b.n	8009b34 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009b2e:	f06f 0302 	mvn.w	r3, #2
 8009b32:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009b34:	697b      	ldr	r3, [r7, #20]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	e000ed04 	.word	0xe000ed04

08009b44 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d103      	bne.n	8009b62 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009b5a:	f06f 0303 	mvn.w	r3, #3
 8009b5e:	617b      	str	r3, [r7, #20]
 8009b60:	e02c      	b.n	8009bbc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b62:	f3ef 8305 	mrs	r3, IPSR
 8009b66:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b68:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d01a      	beq.n	8009ba4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009b72:	f107 0308 	add.w	r3, r7, #8
 8009b76:	4619      	mov	r1, r3
 8009b78:	6938      	ldr	r0, [r7, #16]
 8009b7a:	f000 fc63 	bl	800a444 <xQueueGiveFromISR>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d003      	beq.n	8009b8c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009b84:	f06f 0302 	mvn.w	r3, #2
 8009b88:	617b      	str	r3, [r7, #20]
 8009b8a:	e017      	b.n	8009bbc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d014      	beq.n	8009bbc <osSemaphoreRelease+0x78>
 8009b92:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc8 <osSemaphoreRelease+0x84>)
 8009b94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	e00b      	b.n	8009bbc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2100      	movs	r1, #0
 8009baa:	6938      	ldr	r0, [r7, #16]
 8009bac:	f000 faaa 	bl	800a104 <xQueueGenericSend>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d002      	beq.n	8009bbc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009bb6:	f06f 0302 	mvn.w	r3, #2
 8009bba:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009bbc:	697b      	ldr	r3, [r7, #20]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3718      	adds	r7, #24
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	e000ed04 	.word	0xe000ed04

08009bcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	4a07      	ldr	r2, [pc, #28]	@ (8009bf8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009bdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	4a06      	ldr	r2, [pc, #24]	@ (8009bfc <vApplicationGetIdleTaskMemory+0x30>)
 8009be2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2280      	movs	r2, #128	@ 0x80
 8009be8:	601a      	str	r2, [r3, #0]
}
 8009bea:	bf00      	nop
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	20001718 	.word	0x20001718
 8009bfc:	20001774 	.word	0x20001774

08009c00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	4a07      	ldr	r2, [pc, #28]	@ (8009c2c <vApplicationGetTimerTaskMemory+0x2c>)
 8009c10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	4a06      	ldr	r2, [pc, #24]	@ (8009c30 <vApplicationGetTimerTaskMemory+0x30>)
 8009c16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c1e:	601a      	str	r2, [r3, #0]
}
 8009c20:	bf00      	nop
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	20001974 	.word	0x20001974
 8009c30:	200019d0 	.word	0x200019d0

08009c34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f103 0208 	add.w	r2, r3, #8
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f103 0208 	add.w	r2, r3, #8
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f103 0208 	add.w	r2, r3, #8
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c82:	bf00      	nop
 8009c84:	370c      	adds	r7, #12
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b085      	sub	sp, #20
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	1c5a      	adds	r2, r3, #1
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	601a      	str	r2, [r3, #0]
}
 8009cca:	bf00      	nop
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b085      	sub	sp, #20
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cec:	d103      	bne.n	8009cf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	e00c      	b.n	8009d10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	3308      	adds	r3, #8
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	e002      	b.n	8009d04 <vListInsert+0x2e>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d2f6      	bcs.n	8009cfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	601a      	str	r2, [r3, #0]
}
 8009d3c:	bf00      	nop
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	6892      	ldr	r2, [r2, #8]
 8009d5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	6852      	ldr	r2, [r2, #4]
 8009d68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d103      	bne.n	8009d7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	689a      	ldr	r2, [r3, #8]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	1e5a      	subs	r2, r3, #1
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10b      	bne.n	8009dc8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009dc2:	bf00      	nop
 8009dc4:	bf00      	nop
 8009dc6:	e7fd      	b.n	8009dc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009dc8:	f002 fc76 	bl	800c6b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dd4:	68f9      	ldr	r1, [r7, #12]
 8009dd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009dd8:	fb01 f303 	mul.w	r3, r1, r3
 8009ddc:	441a      	add	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	68f9      	ldr	r1, [r7, #12]
 8009dfc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009dfe:	fb01 f303 	mul.w	r3, r1, r3
 8009e02:	441a      	add	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	22ff      	movs	r2, #255	@ 0xff
 8009e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	22ff      	movs	r2, #255	@ 0xff
 8009e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d114      	bne.n	8009e48 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d01a      	beq.n	8009e5c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3310      	adds	r3, #16
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 fc16 	bl	800b65c <xTaskRemoveFromEventList>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d012      	beq.n	8009e5c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e36:	4b0d      	ldr	r3, [pc, #52]	@ (8009e6c <xQueueGenericReset+0xd0>)
 8009e38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	e009      	b.n	8009e5c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	3310      	adds	r3, #16
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7ff fef1 	bl	8009c34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3324      	adds	r3, #36	@ 0x24
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7ff feec 	bl	8009c34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e5c:	f002 fc5e 	bl	800c71c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e60:	2301      	movs	r3, #1
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	e000ed04 	.word	0xe000ed04

08009e70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08e      	sub	sp, #56	@ 0x38
 8009e74:	af02      	add	r7, sp, #8
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10b      	bne.n	8009e9c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e96:	bf00      	nop
 8009e98:	bf00      	nop
 8009e9a:	e7fd      	b.n	8009e98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10b      	bne.n	8009eba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009eb4:	bf00      	nop
 8009eb6:	bf00      	nop
 8009eb8:	e7fd      	b.n	8009eb6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <xQueueGenericCreateStatic+0x56>
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <xQueueGenericCreateStatic+0x5a>
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e000      	b.n	8009ecc <xQueueGenericCreateStatic+0x5c>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d10b      	bne.n	8009ee8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	623b      	str	r3, [r7, #32]
}
 8009ee2:	bf00      	nop
 8009ee4:	bf00      	nop
 8009ee6:	e7fd      	b.n	8009ee4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d102      	bne.n	8009ef4 <xQueueGenericCreateStatic+0x84>
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <xQueueGenericCreateStatic+0x88>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e000      	b.n	8009efa <xQueueGenericCreateStatic+0x8a>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10b      	bne.n	8009f16 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	61fb      	str	r3, [r7, #28]
}
 8009f10:	bf00      	nop
 8009f12:	bf00      	nop
 8009f14:	e7fd      	b.n	8009f12 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f16:	2350      	movs	r3, #80	@ 0x50
 8009f18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	2b50      	cmp	r3, #80	@ 0x50
 8009f1e:	d00b      	beq.n	8009f38 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	61bb      	str	r3, [r7, #24]
}
 8009f32:	bf00      	nop
 8009f34:	bf00      	nop
 8009f36:	e7fd      	b.n	8009f34 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00d      	beq.n	8009f60 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f4c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	4613      	mov	r3, r2
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	68b9      	ldr	r1, [r7, #8]
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f000 f840 	bl	8009fe0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3730      	adds	r7, #48	@ 0x30
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b08a      	sub	sp, #40	@ 0x28
 8009f6e:	af02      	add	r7, sp, #8
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	4613      	mov	r3, r2
 8009f76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10b      	bne.n	8009f96 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	613b      	str	r3, [r7, #16]
}
 8009f90:	bf00      	nop
 8009f92:	bf00      	nop
 8009f94:	e7fd      	b.n	8009f92 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	fb02 f303 	mul.w	r3, r2, r3
 8009f9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	3350      	adds	r3, #80	@ 0x50
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f002 fca9 	bl	800c8fc <pvPortMalloc>
 8009faa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d011      	beq.n	8009fd6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	3350      	adds	r3, #80	@ 0x50
 8009fba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fc4:	79fa      	ldrb	r2, [r7, #7]
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	697a      	ldr	r2, [r7, #20]
 8009fce:	68b9      	ldr	r1, [r7, #8]
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 f805 	bl	8009fe0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fd6:	69bb      	ldr	r3, [r7, #24]
	}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3720      	adds	r7, #32
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d103      	bne.n	8009ffc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	69ba      	ldr	r2, [r7, #24]
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	e002      	b.n	800a002 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a00e:	2101      	movs	r1, #1
 800a010:	69b8      	ldr	r0, [r7, #24]
 800a012:	f7ff fec3 	bl	8009d9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	78fa      	ldrb	r2, [r7, #3]
 800a01a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a026:	b580      	push	{r7, lr}
 800a028:	b08a      	sub	sp, #40	@ 0x28
 800a02a:	af02      	add	r7, sp, #8
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	60b9      	str	r1, [r7, #8]
 800a030:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10b      	bne.n	800a050 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	61bb      	str	r3, [r7, #24]
}
 800a04a:	bf00      	nop
 800a04c:	bf00      	nop
 800a04e:	e7fd      	b.n	800a04c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	429a      	cmp	r2, r3
 800a056:	d90b      	bls.n	800a070 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	617b      	str	r3, [r7, #20]
}
 800a06a:	bf00      	nop
 800a06c:	bf00      	nop
 800a06e:	e7fd      	b.n	800a06c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a070:	2302      	movs	r3, #2
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	2100      	movs	r1, #0
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f7ff fef8 	bl	8009e70 <xQueueGenericCreateStatic>
 800a080:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a08e:	69fb      	ldr	r3, [r7, #28]
	}
 800a090:	4618      	mov	r0, r3
 800a092:	3720      	adds	r7, #32
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10b      	bne.n	800a0c0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ac:	f383 8811 	msr	BASEPRI, r3
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	613b      	str	r3, [r7, #16]
}
 800a0ba:	bf00      	nop
 800a0bc:	bf00      	nop
 800a0be:	e7fd      	b.n	800a0bc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d90b      	bls.n	800a0e0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	60fb      	str	r3, [r7, #12]
}
 800a0da:	bf00      	nop
 800a0dc:	bf00      	nop
 800a0de:	e7fd      	b.n	800a0dc <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f7ff ff40 	bl	8009f6a <xQueueGenericCreate>
 800a0ea:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d002      	beq.n	800a0f8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a0f8:	697b      	ldr	r3, [r7, #20]
	}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
	...

0800a104 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08e      	sub	sp, #56	@ 0x38
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a112:	2300      	movs	r3, #0
 800a114:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10b      	bne.n	800a138 <xQueueGenericSend+0x34>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a132:	bf00      	nop
 800a134:	bf00      	nop
 800a136:	e7fd      	b.n	800a134 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d103      	bne.n	800a146 <xQueueGenericSend+0x42>
 800a13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <xQueueGenericSend+0x46>
 800a146:	2301      	movs	r3, #1
 800a148:	e000      	b.n	800a14c <xQueueGenericSend+0x48>
 800a14a:	2300      	movs	r3, #0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10b      	bne.n	800a168 <xQueueGenericSend+0x64>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a162:	bf00      	nop
 800a164:	bf00      	nop
 800a166:	e7fd      	b.n	800a164 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d103      	bne.n	800a176 <xQueueGenericSend+0x72>
 800a16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a172:	2b01      	cmp	r3, #1
 800a174:	d101      	bne.n	800a17a <xQueueGenericSend+0x76>
 800a176:	2301      	movs	r3, #1
 800a178:	e000      	b.n	800a17c <xQueueGenericSend+0x78>
 800a17a:	2300      	movs	r3, #0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10b      	bne.n	800a198 <xQueueGenericSend+0x94>
	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	623b      	str	r3, [r7, #32]
}
 800a192:	bf00      	nop
 800a194:	bf00      	nop
 800a196:	e7fd      	b.n	800a194 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a198:	f001 fc20 	bl	800b9dc <xTaskGetSchedulerState>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d102      	bne.n	800a1a8 <xQueueGenericSend+0xa4>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d101      	bne.n	800a1ac <xQueueGenericSend+0xa8>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e000      	b.n	800a1ae <xQueueGenericSend+0xaa>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10b      	bne.n	800a1ca <xQueueGenericSend+0xc6>
	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	61fb      	str	r3, [r7, #28]
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop
 800a1c8:	e7fd      	b.n	800a1c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1ca:	f002 fa75 	bl	800c6b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d302      	bcc.n	800a1e0 <xQueueGenericSend+0xdc>
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d129      	bne.n	800a234 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1e0:	683a      	ldr	r2, [r7, #0]
 800a1e2:	68b9      	ldr	r1, [r7, #8]
 800a1e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1e6:	f000 fc6d 	bl	800aac4 <prvCopyDataToQueue>
 800a1ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d010      	beq.n	800a216 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f6:	3324      	adds	r3, #36	@ 0x24
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f001 fa2f 	bl	800b65c <xTaskRemoveFromEventList>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d013      	beq.n	800a22c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a204:	4b3f      	ldr	r3, [pc, #252]	@ (800a304 <xQueueGenericSend+0x200>)
 800a206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	e00a      	b.n	800a22c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d007      	beq.n	800a22c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a21c:	4b39      	ldr	r3, [pc, #228]	@ (800a304 <xQueueGenericSend+0x200>)
 800a21e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a22c:	f002 fa76 	bl	800c71c <vPortExitCritical>
				return pdPASS;
 800a230:	2301      	movs	r3, #1
 800a232:	e063      	b.n	800a2fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d103      	bne.n	800a242 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a23a:	f002 fa6f 	bl	800c71c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a23e:	2300      	movs	r3, #0
 800a240:	e05c      	b.n	800a2fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a244:	2b00      	cmp	r3, #0
 800a246:	d106      	bne.n	800a256 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a248:	f107 0314 	add.w	r3, r7, #20
 800a24c:	4618      	mov	r0, r3
 800a24e:	f001 fa69 	bl	800b724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a252:	2301      	movs	r3, #1
 800a254:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a256:	f002 fa61 	bl	800c71c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a25a:	f000 ffd9 	bl	800b210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a25e:	f002 fa2b 	bl	800c6b8 <vPortEnterCritical>
 800a262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a264:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a268:	b25b      	sxtb	r3, r3
 800a26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a26e:	d103      	bne.n	800a278 <xQueueGenericSend+0x174>
 800a270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a27e:	b25b      	sxtb	r3, r3
 800a280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a284:	d103      	bne.n	800a28e <xQueueGenericSend+0x18a>
 800a286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a28e:	f002 fa45 	bl	800c71c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a292:	1d3a      	adds	r2, r7, #4
 800a294:	f107 0314 	add.w	r3, r7, #20
 800a298:	4611      	mov	r1, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f001 fa58 	bl	800b750 <xTaskCheckForTimeOut>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d124      	bne.n	800a2f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2a8:	f000 fd04 	bl	800acb4 <prvIsQueueFull>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d018      	beq.n	800a2e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	3310      	adds	r3, #16
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f001 f97c 	bl	800b5b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2c2:	f000 fc8f 	bl	800abe4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2c6:	f000 ffb1 	bl	800b22c <xTaskResumeAll>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f47f af7c 	bne.w	800a1ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a2d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a304 <xQueueGenericSend+0x200>)
 800a2d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2d8:	601a      	str	r2, [r3, #0]
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	e772      	b.n	800a1ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2e6:	f000 fc7d 	bl	800abe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2ea:	f000 ff9f 	bl	800b22c <xTaskResumeAll>
 800a2ee:	e76c      	b.n	800a1ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2f2:	f000 fc77 	bl	800abe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2f6:	f000 ff99 	bl	800b22c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3738      	adds	r7, #56	@ 0x38
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	e000ed04 	.word	0xe000ed04

0800a308 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b090      	sub	sp, #64	@ 0x40
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
 800a314:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10b      	bne.n	800a338 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d103      	bne.n	800a346 <xQueueGenericSendFromISR+0x3e>
 800a33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <xQueueGenericSendFromISR+0x42>
 800a346:	2301      	movs	r3, #1
 800a348:	e000      	b.n	800a34c <xQueueGenericSendFromISR+0x44>
 800a34a:	2300      	movs	r3, #0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10b      	bne.n	800a368 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a362:	bf00      	nop
 800a364:	bf00      	nop
 800a366:	e7fd      	b.n	800a364 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d103      	bne.n	800a376 <xQueueGenericSendFromISR+0x6e>
 800a36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a372:	2b01      	cmp	r3, #1
 800a374:	d101      	bne.n	800a37a <xQueueGenericSendFromISR+0x72>
 800a376:	2301      	movs	r3, #1
 800a378:	e000      	b.n	800a37c <xQueueGenericSendFromISR+0x74>
 800a37a:	2300      	movs	r3, #0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10b      	bne.n	800a398 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	623b      	str	r3, [r7, #32]
}
 800a392:	bf00      	nop
 800a394:	bf00      	nop
 800a396:	e7fd      	b.n	800a394 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a398:	f002 fa6e 	bl	800c878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a39c:	f3ef 8211 	mrs	r2, BASEPRI
 800a3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	61fa      	str	r2, [r7, #28]
 800a3b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d302      	bcc.n	800a3ca <xQueueGenericSendFromISR+0xc2>
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d12f      	bne.n	800a42a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	68b9      	ldr	r1, [r7, #8]
 800a3de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a3e0:	f000 fb70 	bl	800aac4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ec:	d112      	bne.n	800a414 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d016      	beq.n	800a424 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f8:	3324      	adds	r3, #36	@ 0x24
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f001 f92e 	bl	800b65c <xTaskRemoveFromEventList>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00e      	beq.n	800a424 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00b      	beq.n	800a424 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	601a      	str	r2, [r3, #0]
 800a412:	e007      	b.n	800a424 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a414:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a418:	3301      	adds	r3, #1
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	b25a      	sxtb	r2, r3
 800a41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a424:	2301      	movs	r3, #1
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a428:	e001      	b.n	800a42e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a42a:	2300      	movs	r3, #0
 800a42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a42e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a430:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a438:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3740      	adds	r7, #64	@ 0x40
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b08e      	sub	sp, #56	@ 0x38
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10b      	bne.n	800a470 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	623b      	str	r3, [r7, #32]
}
 800a46a:	bf00      	nop
 800a46c:	bf00      	nop
 800a46e:	e7fd      	b.n	800a46c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00b      	beq.n	800a490 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	61fb      	str	r3, [r7, #28]
}
 800a48a:	bf00      	nop
 800a48c:	bf00      	nop
 800a48e:	e7fd      	b.n	800a48c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d103      	bne.n	800a4a0 <xQueueGiveFromISR+0x5c>
 800a498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <xQueueGiveFromISR+0x60>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e000      	b.n	800a4a6 <xQueueGiveFromISR+0x62>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10b      	bne.n	800a4c2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	61bb      	str	r3, [r7, #24]
}
 800a4bc:	bf00      	nop
 800a4be:	bf00      	nop
 800a4c0:	e7fd      	b.n	800a4be <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4c2:	f002 f9d9 	bl	800c878 <vPortValidateInterruptPriority>
	__asm volatile
 800a4c6:	f3ef 8211 	mrs	r2, BASEPRI
 800a4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	617a      	str	r2, [r7, #20]
 800a4dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a4de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4e6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d22b      	bcs.n	800a54a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a502:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a504:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50c:	d112      	bne.n	800a534 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a512:	2b00      	cmp	r3, #0
 800a514:	d016      	beq.n	800a544 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a518:	3324      	adds	r3, #36	@ 0x24
 800a51a:	4618      	mov	r0, r3
 800a51c:	f001 f89e 	bl	800b65c <xTaskRemoveFromEventList>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00e      	beq.n	800a544 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00b      	beq.n	800a544 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	2201      	movs	r2, #1
 800a530:	601a      	str	r2, [r3, #0]
 800a532:	e007      	b.n	800a544 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a538:	3301      	adds	r3, #1
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	b25a      	sxtb	r2, r3
 800a53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a544:	2301      	movs	r3, #1
 800a546:	637b      	str	r3, [r7, #52]	@ 0x34
 800a548:	e001      	b.n	800a54e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a550:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f383 8811 	msr	BASEPRI, r3
}
 800a558:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a55a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3738      	adds	r7, #56	@ 0x38
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b08c      	sub	sp, #48	@ 0x30
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a570:	2300      	movs	r3, #0
 800a572:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10b      	bne.n	800a596 <xQueueReceive+0x32>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	623b      	str	r3, [r7, #32]
}
 800a590:	bf00      	nop
 800a592:	bf00      	nop
 800a594:	e7fd      	b.n	800a592 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d103      	bne.n	800a5a4 <xQueueReceive+0x40>
 800a59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d101      	bne.n	800a5a8 <xQueueReceive+0x44>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e000      	b.n	800a5aa <xQueueReceive+0x46>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10b      	bne.n	800a5c6 <xQueueReceive+0x62>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	61fb      	str	r3, [r7, #28]
}
 800a5c0:	bf00      	nop
 800a5c2:	bf00      	nop
 800a5c4:	e7fd      	b.n	800a5c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5c6:	f001 fa09 	bl	800b9dc <xTaskGetSchedulerState>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d102      	bne.n	800a5d6 <xQueueReceive+0x72>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <xQueueReceive+0x76>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e000      	b.n	800a5dc <xQueueReceive+0x78>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10b      	bne.n	800a5f8 <xQueueReceive+0x94>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	61bb      	str	r3, [r7, #24]
}
 800a5f2:	bf00      	nop
 800a5f4:	bf00      	nop
 800a5f6:	e7fd      	b.n	800a5f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5f8:	f002 f85e 	bl	800c6b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a600:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01f      	beq.n	800a648 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a608:	68b9      	ldr	r1, [r7, #8]
 800a60a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a60c:	f000 fac4 	bl	800ab98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a612:	1e5a      	subs	r2, r3, #1
 800a614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a616:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00f      	beq.n	800a640 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a622:	3310      	adds	r3, #16
 800a624:	4618      	mov	r0, r3
 800a626:	f001 f819 	bl	800b65c <xTaskRemoveFromEventList>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d007      	beq.n	800a640 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a630:	4b3c      	ldr	r3, [pc, #240]	@ (800a724 <xQueueReceive+0x1c0>)
 800a632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a636:	601a      	str	r2, [r3, #0]
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a640:	f002 f86c 	bl	800c71c <vPortExitCritical>
				return pdPASS;
 800a644:	2301      	movs	r3, #1
 800a646:	e069      	b.n	800a71c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d103      	bne.n	800a656 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a64e:	f002 f865 	bl	800c71c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a652:	2300      	movs	r3, #0
 800a654:	e062      	b.n	800a71c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d106      	bne.n	800a66a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a65c:	f107 0310 	add.w	r3, r7, #16
 800a660:	4618      	mov	r0, r3
 800a662:	f001 f85f 	bl	800b724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a666:	2301      	movs	r3, #1
 800a668:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a66a:	f002 f857 	bl	800c71c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a66e:	f000 fdcf 	bl	800b210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a672:	f002 f821 	bl	800c6b8 <vPortEnterCritical>
 800a676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a678:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a67c:	b25b      	sxtb	r3, r3
 800a67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a682:	d103      	bne.n	800a68c <xQueueReceive+0x128>
 800a684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a686:	2200      	movs	r2, #0
 800a688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a692:	b25b      	sxtb	r3, r3
 800a694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a698:	d103      	bne.n	800a6a2 <xQueueReceive+0x13e>
 800a69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6a2:	f002 f83b 	bl	800c71c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6a6:	1d3a      	adds	r2, r7, #4
 800a6a8:	f107 0310 	add.w	r3, r7, #16
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f001 f84e 	bl	800b750 <xTaskCheckForTimeOut>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d123      	bne.n	800a702 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6bc:	f000 fae4 	bl	800ac88 <prvIsQueueEmpty>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d017      	beq.n	800a6f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c8:	3324      	adds	r3, #36	@ 0x24
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 ff72 	bl	800b5b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a6d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6d6:	f000 fa85 	bl	800abe4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a6da:	f000 fda7 	bl	800b22c <xTaskResumeAll>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d189      	bne.n	800a5f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a6e4:	4b0f      	ldr	r3, [pc, #60]	@ (800a724 <xQueueReceive+0x1c0>)
 800a6e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	e780      	b.n	800a5f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a6f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6f8:	f000 fa74 	bl	800abe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6fc:	f000 fd96 	bl	800b22c <xTaskResumeAll>
 800a700:	e77a      	b.n	800a5f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a704:	f000 fa6e 	bl	800abe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a708:	f000 fd90 	bl	800b22c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a70c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a70e:	f000 fabb 	bl	800ac88 <prvIsQueueEmpty>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	f43f af6f 	beq.w	800a5f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a71a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3730      	adds	r7, #48	@ 0x30
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	e000ed04 	.word	0xe000ed04

0800a728 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b08e      	sub	sp, #56	@ 0x38
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a732:	2300      	movs	r3, #0
 800a734:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a73a:	2300      	movs	r3, #0
 800a73c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10b      	bne.n	800a75c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	623b      	str	r3, [r7, #32]
}
 800a756:	bf00      	nop
 800a758:	bf00      	nop
 800a75a:	e7fd      	b.n	800a758 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00b      	beq.n	800a77c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	61fb      	str	r3, [r7, #28]
}
 800a776:	bf00      	nop
 800a778:	bf00      	nop
 800a77a:	e7fd      	b.n	800a778 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a77c:	f001 f92e 	bl	800b9dc <xTaskGetSchedulerState>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d102      	bne.n	800a78c <xQueueSemaphoreTake+0x64>
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <xQueueSemaphoreTake+0x68>
 800a78c:	2301      	movs	r3, #1
 800a78e:	e000      	b.n	800a792 <xQueueSemaphoreTake+0x6a>
 800a790:	2300      	movs	r3, #0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10b      	bne.n	800a7ae <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	61bb      	str	r3, [r7, #24]
}
 800a7a8:	bf00      	nop
 800a7aa:	bf00      	nop
 800a7ac:	e7fd      	b.n	800a7aa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7ae:	f001 ff83 	bl	800c6b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d024      	beq.n	800a808 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c0:	1e5a      	subs	r2, r3, #1
 800a7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d104      	bne.n	800a7d8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a7ce:	f001 fa7f 	bl	800bcd0 <pvTaskIncrementMutexHeldCount>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00f      	beq.n	800a800 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e2:	3310      	adds	r3, #16
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 ff39 	bl	800b65c <xTaskRemoveFromEventList>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d007      	beq.n	800a800 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7f0:	4b54      	ldr	r3, [pc, #336]	@ (800a944 <xQueueSemaphoreTake+0x21c>)
 800a7f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a800:	f001 ff8c 	bl	800c71c <vPortExitCritical>
				return pdPASS;
 800a804:	2301      	movs	r3, #1
 800a806:	e098      	b.n	800a93a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d112      	bne.n	800a834 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00b      	beq.n	800a82c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	617b      	str	r3, [r7, #20]
}
 800a826:	bf00      	nop
 800a828:	bf00      	nop
 800a82a:	e7fd      	b.n	800a828 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a82c:	f001 ff76 	bl	800c71c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a830:	2300      	movs	r3, #0
 800a832:	e082      	b.n	800a93a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a836:	2b00      	cmp	r3, #0
 800a838:	d106      	bne.n	800a848 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a83a:	f107 030c 	add.w	r3, r7, #12
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 ff70 	bl	800b724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a844:	2301      	movs	r3, #1
 800a846:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a848:	f001 ff68 	bl	800c71c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a84c:	f000 fce0 	bl	800b210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a850:	f001 ff32 	bl	800c6b8 <vPortEnterCritical>
 800a854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a856:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a85a:	b25b      	sxtb	r3, r3
 800a85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a860:	d103      	bne.n	800a86a <xQueueSemaphoreTake+0x142>
 800a862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a864:	2200      	movs	r2, #0
 800a866:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a870:	b25b      	sxtb	r3, r3
 800a872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a876:	d103      	bne.n	800a880 <xQueueSemaphoreTake+0x158>
 800a878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a880:	f001 ff4c 	bl	800c71c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a884:	463a      	mov	r2, r7
 800a886:	f107 030c 	add.w	r3, r7, #12
 800a88a:	4611      	mov	r1, r2
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 ff5f 	bl	800b750 <xTaskCheckForTimeOut>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d132      	bne.n	800a8fe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a898:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a89a:	f000 f9f5 	bl	800ac88 <prvIsQueueEmpty>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d026      	beq.n	800a8f2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d109      	bne.n	800a8c0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a8ac:	f001 ff04 	bl	800c6b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f001 f8af 	bl	800ba18 <xTaskPriorityInherit>
 800a8ba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a8bc:	f001 ff2e 	bl	800c71c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c2:	3324      	adds	r3, #36	@ 0x24
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 fe75 	bl	800b5b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8d0:	f000 f988 	bl	800abe4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8d4:	f000 fcaa 	bl	800b22c <xTaskResumeAll>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f47f af67 	bne.w	800a7ae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a8e0:	4b18      	ldr	r3, [pc, #96]	@ (800a944 <xQueueSemaphoreTake+0x21c>)
 800a8e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8e6:	601a      	str	r2, [r3, #0]
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	e75d      	b.n	800a7ae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a8f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8f4:	f000 f976 	bl	800abe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8f8:	f000 fc98 	bl	800b22c <xTaskResumeAll>
 800a8fc:	e757      	b.n	800a7ae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a8fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a900:	f000 f970 	bl	800abe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a904:	f000 fc92 	bl	800b22c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a908:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a90a:	f000 f9bd 	bl	800ac88 <prvIsQueueEmpty>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	f43f af4c 	beq.w	800a7ae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00d      	beq.n	800a938 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a91c:	f001 fecc 	bl	800c6b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a920:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a922:	f000 f8b7 	bl	800aa94 <prvGetDisinheritPriorityAfterTimeout>
 800a926:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a92e:	4618      	mov	r0, r3
 800a930:	f001 f94a 	bl	800bbc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a934:	f001 fef2 	bl	800c71c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a938:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3738      	adds	r7, #56	@ 0x38
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	e000ed04 	.word	0xe000ed04

0800a948 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08e      	sub	sp, #56	@ 0x38
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10b      	bne.n	800a976 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	623b      	str	r3, [r7, #32]
}
 800a970:	bf00      	nop
 800a972:	bf00      	nop
 800a974:	e7fd      	b.n	800a972 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d103      	bne.n	800a984 <xQueueReceiveFromISR+0x3c>
 800a97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <xQueueReceiveFromISR+0x40>
 800a984:	2301      	movs	r3, #1
 800a986:	e000      	b.n	800a98a <xQueueReceiveFromISR+0x42>
 800a988:	2300      	movs	r3, #0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10b      	bne.n	800a9a6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	61fb      	str	r3, [r7, #28]
}
 800a9a0:	bf00      	nop
 800a9a2:	bf00      	nop
 800a9a4:	e7fd      	b.n	800a9a2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9a6:	f001 ff67 	bl	800c878 <vPortValidateInterruptPriority>
	__asm volatile
 800a9aa:	f3ef 8211 	mrs	r2, BASEPRI
 800a9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	61ba      	str	r2, [r7, #24]
 800a9c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a9c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d02f      	beq.n	800aa32 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9dc:	68b9      	ldr	r1, [r7, #8]
 800a9de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9e0:	f000 f8da 	bl	800ab98 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e6:	1e5a      	subs	r2, r3, #1
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a9ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f4:	d112      	bne.n	800aa1c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d016      	beq.n	800aa2c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa00:	3310      	adds	r3, #16
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 fe2a 	bl	800b65c <xTaskRemoveFromEventList>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00e      	beq.n	800aa2c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00b      	beq.n	800aa2c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	e007      	b.n	800aa2c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aa1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa20:	3301      	adds	r3, #1
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	b25a      	sxtb	r2, r3
 800aa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa30:	e001      	b.n	800aa36 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa38:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	f383 8811 	msr	BASEPRI, r3
}
 800aa40:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3738      	adds	r7, #56	@ 0x38
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10b      	bne.n	800aa76 <vQueueDelete+0x2a>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	60bb      	str	r3, [r7, #8]
}
 800aa70:	bf00      	nop
 800aa72:	bf00      	nop
 800aa74:	e7fd      	b.n	800aa72 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f000 f95e 	bl	800ad38 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d102      	bne.n	800aa8c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f002 f806 	bl	800ca98 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aa8c:	bf00      	nop
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d006      	beq.n	800aab2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800aaae:	60fb      	str	r3, [r7, #12]
 800aab0:	e001      	b.n	800aab6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aab2:	2300      	movs	r3, #0
 800aab4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aab6:	68fb      	ldr	r3, [r7, #12]
	}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aad0:	2300      	movs	r3, #0
 800aad2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aad8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10d      	bne.n	800aafe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d14d      	bne.n	800ab86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 fffa 	bl	800bae8 <xTaskPriorityDisinherit>
 800aaf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	609a      	str	r2, [r3, #8]
 800aafc:	e043      	b.n	800ab86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d119      	bne.n	800ab38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6858      	ldr	r0, [r3, #4]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	f003 fa9f 	bl	800e052 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab1c:	441a      	add	r2, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	685a      	ldr	r2, [r3, #4]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d32b      	bcc.n	800ab86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	605a      	str	r2, [r3, #4]
 800ab36:	e026      	b.n	800ab86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	68d8      	ldr	r0, [r3, #12]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab40:	461a      	mov	r2, r3
 800ab42:	68b9      	ldr	r1, [r7, #8]
 800ab44:	f003 fa85 	bl	800e052 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	68da      	ldr	r2, [r3, #12]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab50:	425b      	negs	r3, r3
 800ab52:	441a      	add	r2, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	68da      	ldr	r2, [r3, #12]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d207      	bcs.n	800ab74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	689a      	ldr	r2, [r3, #8]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab6c:	425b      	negs	r3, r3
 800ab6e:	441a      	add	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d105      	bne.n	800ab86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	3b01      	subs	r3, #1
 800ab84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ab8e:	697b      	ldr	r3, [r7, #20]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3718      	adds	r7, #24
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d018      	beq.n	800abdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	68da      	ldr	r2, [r3, #12]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abb2:	441a      	add	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	68da      	ldr	r2, [r3, #12]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d303      	bcc.n	800abcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68d9      	ldr	r1, [r3, #12]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd4:	461a      	mov	r2, r3
 800abd6:	6838      	ldr	r0, [r7, #0]
 800abd8:	f003 fa3b 	bl	800e052 <memcpy>
	}
}
 800abdc:	bf00      	nop
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800abec:	f001 fd64 	bl	800c6b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abf8:	e011      	b.n	800ac1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d012      	beq.n	800ac28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	3324      	adds	r3, #36	@ 0x24
 800ac06:	4618      	mov	r0, r3
 800ac08:	f000 fd28 	bl	800b65c <xTaskRemoveFromEventList>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d001      	beq.n	800ac16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac12:	f000 fe01 	bl	800b818 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	dce9      	bgt.n	800abfa <prvUnlockQueue+0x16>
 800ac26:	e000      	b.n	800ac2a <prvUnlockQueue+0x46>
					break;
 800ac28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	22ff      	movs	r2, #255	@ 0xff
 800ac2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ac32:	f001 fd73 	bl	800c71c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac36:	f001 fd3f 	bl	800c6b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac42:	e011      	b.n	800ac68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d012      	beq.n	800ac72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3310      	adds	r3, #16
 800ac50:	4618      	mov	r0, r3
 800ac52:	f000 fd03 	bl	800b65c <xTaskRemoveFromEventList>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac5c:	f000 fddc 	bl	800b818 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	3b01      	subs	r3, #1
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	dce9      	bgt.n	800ac44 <prvUnlockQueue+0x60>
 800ac70:	e000      	b.n	800ac74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	22ff      	movs	r2, #255	@ 0xff
 800ac78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ac7c:	f001 fd4e 	bl	800c71c <vPortExitCritical>
}
 800ac80:	bf00      	nop
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac90:	f001 fd12 	bl	800c6b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d102      	bne.n	800aca2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	60fb      	str	r3, [r7, #12]
 800aca0:	e001      	b.n	800aca6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aca2:	2300      	movs	r3, #0
 800aca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aca6:	f001 fd39 	bl	800c71c <vPortExitCritical>

	return xReturn;
 800acaa:	68fb      	ldr	r3, [r7, #12]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acbc:	f001 fcfc 	bl	800c6b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acc8:	429a      	cmp	r2, r3
 800acca:	d102      	bne.n	800acd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800accc:	2301      	movs	r3, #1
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	e001      	b.n	800acd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800acd2:	2300      	movs	r3, #0
 800acd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acd6:	f001 fd21 	bl	800c71c <vPortExitCritical>

	return xReturn;
 800acda:	68fb      	ldr	r3, [r7, #12]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acee:	2300      	movs	r3, #0
 800acf0:	60fb      	str	r3, [r7, #12]
 800acf2:	e014      	b.n	800ad1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800acf4:	4a0f      	ldr	r2, [pc, #60]	@ (800ad34 <vQueueAddToRegistry+0x50>)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10b      	bne.n	800ad18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad00:	490c      	ldr	r1, [pc, #48]	@ (800ad34 <vQueueAddToRegistry+0x50>)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	683a      	ldr	r2, [r7, #0]
 800ad06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad0a:	4a0a      	ldr	r2, [pc, #40]	@ (800ad34 <vQueueAddToRegistry+0x50>)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	00db      	lsls	r3, r3, #3
 800ad10:	4413      	add	r3, r2
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad16:	e006      	b.n	800ad26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b07      	cmp	r3, #7
 800ad22:	d9e7      	bls.n	800acf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad24:	bf00      	nop
 800ad26:	bf00      	nop
 800ad28:	3714      	adds	r7, #20
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	20001dd0 	.word	0x20001dd0

0800ad38 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad40:	2300      	movs	r3, #0
 800ad42:	60fb      	str	r3, [r7, #12]
 800ad44:	e016      	b.n	800ad74 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ad46:	4a10      	ldr	r2, [pc, #64]	@ (800ad88 <vQueueUnregisterQueue+0x50>)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	00db      	lsls	r3, r3, #3
 800ad4c:	4413      	add	r3, r2
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d10b      	bne.n	800ad6e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ad56:	4a0c      	ldr	r2, [pc, #48]	@ (800ad88 <vQueueUnregisterQueue+0x50>)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ad60:	4a09      	ldr	r2, [pc, #36]	@ (800ad88 <vQueueUnregisterQueue+0x50>)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	00db      	lsls	r3, r3, #3
 800ad66:	4413      	add	r3, r2
 800ad68:	2200      	movs	r2, #0
 800ad6a:	605a      	str	r2, [r3, #4]
				break;
 800ad6c:	e006      	b.n	800ad7c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	3301      	adds	r3, #1
 800ad72:	60fb      	str	r3, [r7, #12]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2b07      	cmp	r3, #7
 800ad78:	d9e5      	bls.n	800ad46 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ad7a:	bf00      	nop
 800ad7c:	bf00      	nop
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	20001dd0 	.word	0x20001dd0

0800ad8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad9c:	f001 fc8c 	bl	800c6b8 <vPortEnterCritical>
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ada6:	b25b      	sxtb	r3, r3
 800ada8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adac:	d103      	bne.n	800adb6 <vQueueWaitForMessageRestricted+0x2a>
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adbc:	b25b      	sxtb	r3, r3
 800adbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc2:	d103      	bne.n	800adcc <vQueueWaitForMessageRestricted+0x40>
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adcc:	f001 fca6 	bl	800c71c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800add4:	2b00      	cmp	r3, #0
 800add6:	d106      	bne.n	800ade6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	3324      	adds	r3, #36	@ 0x24
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	68b9      	ldr	r1, [r7, #8]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 fc0f 	bl	800b604 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ade6:	6978      	ldr	r0, [r7, #20]
 800ade8:	f7ff fefc 	bl	800abe4 <prvUnlockQueue>
	}
 800adec:	bf00      	nop
 800adee:	3718      	adds	r7, #24
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08e      	sub	sp, #56	@ 0x38
 800adf8:	af04      	add	r7, sp, #16
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10b      	bne.n	800ae20 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ae08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0c:	f383 8811 	msr	BASEPRI, r3
 800ae10:	f3bf 8f6f 	isb	sy
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	623b      	str	r3, [r7, #32]
}
 800ae1a:	bf00      	nop
 800ae1c:	bf00      	nop
 800ae1e:	e7fd      	b.n	800ae1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10b      	bne.n	800ae3e <xTaskCreateStatic+0x4a>
	__asm volatile
 800ae26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae2a:	f383 8811 	msr	BASEPRI, r3
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	f3bf 8f4f 	dsb	sy
 800ae36:	61fb      	str	r3, [r7, #28]
}
 800ae38:	bf00      	nop
 800ae3a:	bf00      	nop
 800ae3c:	e7fd      	b.n	800ae3a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae3e:	235c      	movs	r3, #92	@ 0x5c
 800ae40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	2b5c      	cmp	r3, #92	@ 0x5c
 800ae46:	d00b      	beq.n	800ae60 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ae48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4c:	f383 8811 	msr	BASEPRI, r3
 800ae50:	f3bf 8f6f 	isb	sy
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	61bb      	str	r3, [r7, #24]
}
 800ae5a:	bf00      	nop
 800ae5c:	bf00      	nop
 800ae5e:	e7fd      	b.n	800ae5c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d01e      	beq.n	800aea6 <xTaskCreateStatic+0xb2>
 800ae68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d01b      	beq.n	800aea6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae70:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae76:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7a:	2202      	movs	r2, #2
 800ae7c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae80:	2300      	movs	r3, #0
 800ae82:	9303      	str	r3, [sp, #12]
 800ae84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae86:	9302      	str	r3, [sp, #8]
 800ae88:	f107 0314 	add.w	r3, r7, #20
 800ae8c:	9301      	str	r3, [sp, #4]
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	68b9      	ldr	r1, [r7, #8]
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f000 f850 	bl	800af3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aea0:	f000 f8de 	bl	800b060 <prvAddNewTaskToReadyList>
 800aea4:	e001      	b.n	800aeaa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aeaa:	697b      	ldr	r3, [r7, #20]
	}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3728      	adds	r7, #40	@ 0x28
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b08c      	sub	sp, #48	@ 0x30
 800aeb8:	af04      	add	r7, sp, #16
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	603b      	str	r3, [r7, #0]
 800aec0:	4613      	mov	r3, r2
 800aec2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aec4:	88fb      	ldrh	r3, [r7, #6]
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4618      	mov	r0, r3
 800aeca:	f001 fd17 	bl	800c8fc <pvPortMalloc>
 800aece:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00e      	beq.n	800aef4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aed6:	205c      	movs	r0, #92	@ 0x5c
 800aed8:	f001 fd10 	bl	800c8fc <pvPortMalloc>
 800aedc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d003      	beq.n	800aeec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	631a      	str	r2, [r3, #48]	@ 0x30
 800aeea:	e005      	b.n	800aef8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aeec:	6978      	ldr	r0, [r7, #20]
 800aeee:	f001 fdd3 	bl	800ca98 <vPortFree>
 800aef2:	e001      	b.n	800aef8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aef4:	2300      	movs	r3, #0
 800aef6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d017      	beq.n	800af2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af06:	88fa      	ldrh	r2, [r7, #6]
 800af08:	2300      	movs	r3, #0
 800af0a:	9303      	str	r3, [sp, #12]
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	9302      	str	r3, [sp, #8]
 800af10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	68b9      	ldr	r1, [r7, #8]
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f000 f80e 	bl	800af3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af22:	69f8      	ldr	r0, [r7, #28]
 800af24:	f000 f89c 	bl	800b060 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af28:	2301      	movs	r3, #1
 800af2a:	61bb      	str	r3, [r7, #24]
 800af2c:	e002      	b.n	800af34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af2e:	f04f 33ff 	mov.w	r3, #4294967295
 800af32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af34:	69bb      	ldr	r3, [r7, #24]
	}
 800af36:	4618      	mov	r0, r3
 800af38:	3720      	adds	r7, #32
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b088      	sub	sp, #32
 800af42:	af00      	add	r7, sp, #0
 800af44:	60f8      	str	r0, [r7, #12]
 800af46:	60b9      	str	r1, [r7, #8]
 800af48:	607a      	str	r2, [r7, #4]
 800af4a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	461a      	mov	r2, r3
 800af56:	21a5      	movs	r1, #165	@ 0xa5
 800af58:	f002 ff64 	bl	800de24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af66:	3b01      	subs	r3, #1
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	f023 0307 	bic.w	r3, r3, #7
 800af74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	f003 0307 	and.w	r3, r3, #7
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00b      	beq.n	800af98 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800af80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	617b      	str	r3, [r7, #20]
}
 800af92:	bf00      	nop
 800af94:	bf00      	nop
 800af96:	e7fd      	b.n	800af94 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d01f      	beq.n	800afde <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af9e:	2300      	movs	r3, #0
 800afa0:	61fb      	str	r3, [r7, #28]
 800afa2:	e012      	b.n	800afca <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	4413      	add	r3, r2
 800afaa:	7819      	ldrb	r1, [r3, #0]
 800afac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	4413      	add	r3, r2
 800afb2:	3334      	adds	r3, #52	@ 0x34
 800afb4:	460a      	mov	r2, r1
 800afb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	4413      	add	r3, r2
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d006      	beq.n	800afd2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	3301      	adds	r3, #1
 800afc8:	61fb      	str	r3, [r7, #28]
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	2b0f      	cmp	r3, #15
 800afce:	d9e9      	bls.n	800afa4 <prvInitialiseNewTask+0x66>
 800afd0:	e000      	b.n	800afd4 <prvInitialiseNewTask+0x96>
			{
				break;
 800afd2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800afdc:	e003      	b.n	800afe6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800afde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800afe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe8:	2b37      	cmp	r3, #55	@ 0x37
 800afea:	d901      	bls.n	800aff0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800afec:	2337      	movs	r3, #55	@ 0x37
 800afee:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aff4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800affa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800affc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affe:	2200      	movs	r2, #0
 800b000:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b004:	3304      	adds	r3, #4
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe fe34 	bl	8009c74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00e:	3318      	adds	r3, #24
 800b010:	4618      	mov	r0, r3
 800b012:	f7fe fe2f 	bl	8009c74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b01a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b01e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b024:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b02a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02e:	2200      	movs	r2, #0
 800b030:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b034:	2200      	movs	r2, #0
 800b036:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	68f9      	ldr	r1, [r7, #12]
 800b03e:	69b8      	ldr	r0, [r7, #24]
 800b040:	f001 fa08 	bl	800c454 <pxPortInitialiseStack>
 800b044:	4602      	mov	r2, r0
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d002      	beq.n	800b056 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b056:	bf00      	nop
 800b058:	3720      	adds	r7, #32
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
	...

0800b060 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b068:	f001 fb26 	bl	800c6b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b06c:	4b2d      	ldr	r3, [pc, #180]	@ (800b124 <prvAddNewTaskToReadyList+0xc4>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3301      	adds	r3, #1
 800b072:	4a2c      	ldr	r2, [pc, #176]	@ (800b124 <prvAddNewTaskToReadyList+0xc4>)
 800b074:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b076:	4b2c      	ldr	r3, [pc, #176]	@ (800b128 <prvAddNewTaskToReadyList+0xc8>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d109      	bne.n	800b092 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b07e:	4a2a      	ldr	r2, [pc, #168]	@ (800b128 <prvAddNewTaskToReadyList+0xc8>)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b084:	4b27      	ldr	r3, [pc, #156]	@ (800b124 <prvAddNewTaskToReadyList+0xc4>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d110      	bne.n	800b0ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b08c:	f000 fbe8 	bl	800b860 <prvInitialiseTaskLists>
 800b090:	e00d      	b.n	800b0ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b092:	4b26      	ldr	r3, [pc, #152]	@ (800b12c <prvAddNewTaskToReadyList+0xcc>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d109      	bne.n	800b0ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b09a:	4b23      	ldr	r3, [pc, #140]	@ (800b128 <prvAddNewTaskToReadyList+0xc8>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d802      	bhi.n	800b0ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0a8:	4a1f      	ldr	r2, [pc, #124]	@ (800b128 <prvAddNewTaskToReadyList+0xc8>)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0ae:	4b20      	ldr	r3, [pc, #128]	@ (800b130 <prvAddNewTaskToReadyList+0xd0>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	4a1e      	ldr	r2, [pc, #120]	@ (800b130 <prvAddNewTaskToReadyList+0xd0>)
 800b0b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0b8:	4b1d      	ldr	r3, [pc, #116]	@ (800b130 <prvAddNewTaskToReadyList+0xd0>)
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0c4:	4b1b      	ldr	r3, [pc, #108]	@ (800b134 <prvAddNewTaskToReadyList+0xd4>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d903      	bls.n	800b0d4 <prvAddNewTaskToReadyList+0x74>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d0:	4a18      	ldr	r2, [pc, #96]	@ (800b134 <prvAddNewTaskToReadyList+0xd4>)
 800b0d2:	6013      	str	r3, [r2, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0d8:	4613      	mov	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4413      	add	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4a15      	ldr	r2, [pc, #84]	@ (800b138 <prvAddNewTaskToReadyList+0xd8>)
 800b0e2:	441a      	add	r2, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	f7fe fdcf 	bl	8009c8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0f0:	f001 fb14 	bl	800c71c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0f4:	4b0d      	ldr	r3, [pc, #52]	@ (800b12c <prvAddNewTaskToReadyList+0xcc>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00e      	beq.n	800b11a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b128 <prvAddNewTaskToReadyList+0xc8>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b106:	429a      	cmp	r2, r3
 800b108:	d207      	bcs.n	800b11a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b10a:	4b0c      	ldr	r3, [pc, #48]	@ (800b13c <prvAddNewTaskToReadyList+0xdc>)
 800b10c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b110:	601a      	str	r2, [r3, #0]
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b11a:	bf00      	nop
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	200022e4 	.word	0x200022e4
 800b128:	20001e10 	.word	0x20001e10
 800b12c:	200022f0 	.word	0x200022f0
 800b130:	20002300 	.word	0x20002300
 800b134:	200022ec 	.word	0x200022ec
 800b138:	20001e14 	.word	0x20001e14
 800b13c:	e000ed04 	.word	0xe000ed04

0800b140 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b08a      	sub	sp, #40	@ 0x28
 800b144:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b146:	2300      	movs	r3, #0
 800b148:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b14e:	463a      	mov	r2, r7
 800b150:	1d39      	adds	r1, r7, #4
 800b152:	f107 0308 	add.w	r3, r7, #8
 800b156:	4618      	mov	r0, r3
 800b158:	f7fe fd38 	bl	8009bcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	9202      	str	r2, [sp, #8]
 800b164:	9301      	str	r3, [sp, #4]
 800b166:	2300      	movs	r3, #0
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	2300      	movs	r3, #0
 800b16c:	460a      	mov	r2, r1
 800b16e:	4922      	ldr	r1, [pc, #136]	@ (800b1f8 <vTaskStartScheduler+0xb8>)
 800b170:	4822      	ldr	r0, [pc, #136]	@ (800b1fc <vTaskStartScheduler+0xbc>)
 800b172:	f7ff fe3f 	bl	800adf4 <xTaskCreateStatic>
 800b176:	4603      	mov	r3, r0
 800b178:	4a21      	ldr	r2, [pc, #132]	@ (800b200 <vTaskStartScheduler+0xc0>)
 800b17a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b17c:	4b20      	ldr	r3, [pc, #128]	@ (800b200 <vTaskStartScheduler+0xc0>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b184:	2301      	movs	r3, #1
 800b186:	617b      	str	r3, [r7, #20]
 800b188:	e001      	b.n	800b18e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b18a:	2300      	movs	r3, #0
 800b18c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d102      	bne.n	800b19a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b194:	f000 fe04 	bl	800bda0 <xTimerCreateTimerTask>
 800b198:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d116      	bne.n	800b1ce <vTaskStartScheduler+0x8e>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	613b      	str	r3, [r7, #16]
}
 800b1b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1b4:	4b13      	ldr	r3, [pc, #76]	@ (800b204 <vTaskStartScheduler+0xc4>)
 800b1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1bc:	4b12      	ldr	r3, [pc, #72]	@ (800b208 <vTaskStartScheduler+0xc8>)
 800b1be:	2201      	movs	r2, #1
 800b1c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1c2:	4b12      	ldr	r3, [pc, #72]	@ (800b20c <vTaskStartScheduler+0xcc>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1c8:	f001 f9d2 	bl	800c570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1cc:	e00f      	b.n	800b1ee <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d4:	d10b      	bne.n	800b1ee <vTaskStartScheduler+0xae>
	__asm volatile
 800b1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	60fb      	str	r3, [r7, #12]
}
 800b1e8:	bf00      	nop
 800b1ea:	bf00      	nop
 800b1ec:	e7fd      	b.n	800b1ea <vTaskStartScheduler+0xaa>
}
 800b1ee:	bf00      	nop
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	08011d50 	.word	0x08011d50
 800b1fc:	0800b831 	.word	0x0800b831
 800b200:	20002308 	.word	0x20002308
 800b204:	20002304 	.word	0x20002304
 800b208:	200022f0 	.word	0x200022f0
 800b20c:	200022e8 	.word	0x200022e8

0800b210 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b210:	b480      	push	{r7}
 800b212:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b214:	4b04      	ldr	r3, [pc, #16]	@ (800b228 <vTaskSuspendAll+0x18>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3301      	adds	r3, #1
 800b21a:	4a03      	ldr	r2, [pc, #12]	@ (800b228 <vTaskSuspendAll+0x18>)
 800b21c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b21e:	bf00      	nop
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr
 800b228:	2000230c 	.word	0x2000230c

0800b22c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b232:	2300      	movs	r3, #0
 800b234:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b236:	2300      	movs	r3, #0
 800b238:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b23a:	4b42      	ldr	r3, [pc, #264]	@ (800b344 <xTaskResumeAll+0x118>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d10b      	bne.n	800b25a <xTaskResumeAll+0x2e>
	__asm volatile
 800b242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b246:	f383 8811 	msr	BASEPRI, r3
 800b24a:	f3bf 8f6f 	isb	sy
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	603b      	str	r3, [r7, #0]
}
 800b254:	bf00      	nop
 800b256:	bf00      	nop
 800b258:	e7fd      	b.n	800b256 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b25a:	f001 fa2d 	bl	800c6b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b25e:	4b39      	ldr	r3, [pc, #228]	@ (800b344 <xTaskResumeAll+0x118>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	3b01      	subs	r3, #1
 800b264:	4a37      	ldr	r2, [pc, #220]	@ (800b344 <xTaskResumeAll+0x118>)
 800b266:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b268:	4b36      	ldr	r3, [pc, #216]	@ (800b344 <xTaskResumeAll+0x118>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d162      	bne.n	800b336 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b270:	4b35      	ldr	r3, [pc, #212]	@ (800b348 <xTaskResumeAll+0x11c>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d05e      	beq.n	800b336 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b278:	e02f      	b.n	800b2da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b27a:	4b34      	ldr	r3, [pc, #208]	@ (800b34c <xTaskResumeAll+0x120>)
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3318      	adds	r3, #24
 800b286:	4618      	mov	r0, r3
 800b288:	f7fe fd5e 	bl	8009d48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	3304      	adds	r3, #4
 800b290:	4618      	mov	r0, r3
 800b292:	f7fe fd59 	bl	8009d48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b29a:	4b2d      	ldr	r3, [pc, #180]	@ (800b350 <xTaskResumeAll+0x124>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d903      	bls.n	800b2aa <xTaskResumeAll+0x7e>
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a6:	4a2a      	ldr	r2, [pc, #168]	@ (800b350 <xTaskResumeAll+0x124>)
 800b2a8:	6013      	str	r3, [r2, #0]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4a27      	ldr	r2, [pc, #156]	@ (800b354 <xTaskResumeAll+0x128>)
 800b2b8:	441a      	add	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	4619      	mov	r1, r3
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	f7fe fce4 	bl	8009c8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ca:	4b23      	ldr	r3, [pc, #140]	@ (800b358 <xTaskResumeAll+0x12c>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d302      	bcc.n	800b2da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b2d4:	4b21      	ldr	r3, [pc, #132]	@ (800b35c <xTaskResumeAll+0x130>)
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2da:	4b1c      	ldr	r3, [pc, #112]	@ (800b34c <xTaskResumeAll+0x120>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1cb      	bne.n	800b27a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2e8:	f000 fb58 	bl	800b99c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b2ec:	4b1c      	ldr	r3, [pc, #112]	@ (800b360 <xTaskResumeAll+0x134>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d010      	beq.n	800b31a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2f8:	f000 f846 	bl	800b388 <xTaskIncrementTick>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d002      	beq.n	800b308 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b302:	4b16      	ldr	r3, [pc, #88]	@ (800b35c <xTaskResumeAll+0x130>)
 800b304:	2201      	movs	r2, #1
 800b306:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	3b01      	subs	r3, #1
 800b30c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1f1      	bne.n	800b2f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b314:	4b12      	ldr	r3, [pc, #72]	@ (800b360 <xTaskResumeAll+0x134>)
 800b316:	2200      	movs	r2, #0
 800b318:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b31a:	4b10      	ldr	r3, [pc, #64]	@ (800b35c <xTaskResumeAll+0x130>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d009      	beq.n	800b336 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b322:	2301      	movs	r3, #1
 800b324:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b326:	4b0f      	ldr	r3, [pc, #60]	@ (800b364 <xTaskResumeAll+0x138>)
 800b328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b32c:	601a      	str	r2, [r3, #0]
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b336:	f001 f9f1 	bl	800c71c <vPortExitCritical>

	return xAlreadyYielded;
 800b33a:	68bb      	ldr	r3, [r7, #8]
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	2000230c 	.word	0x2000230c
 800b348:	200022e4 	.word	0x200022e4
 800b34c:	200022a4 	.word	0x200022a4
 800b350:	200022ec 	.word	0x200022ec
 800b354:	20001e14 	.word	0x20001e14
 800b358:	20001e10 	.word	0x20001e10
 800b35c:	200022f8 	.word	0x200022f8
 800b360:	200022f4 	.word	0x200022f4
 800b364:	e000ed04 	.word	0xe000ed04

0800b368 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b36e:	4b05      	ldr	r3, [pc, #20]	@ (800b384 <xTaskGetTickCount+0x1c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b374:	687b      	ldr	r3, [r7, #4]
}
 800b376:	4618      	mov	r0, r3
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	200022e8 	.word	0x200022e8

0800b388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b38e:	2300      	movs	r3, #0
 800b390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b392:	4b4f      	ldr	r3, [pc, #316]	@ (800b4d0 <xTaskIncrementTick+0x148>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	f040 8090 	bne.w	800b4bc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b39c:	4b4d      	ldr	r3, [pc, #308]	@ (800b4d4 <xTaskIncrementTick+0x14c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3a4:	4a4b      	ldr	r2, [pc, #300]	@ (800b4d4 <xTaskIncrementTick+0x14c>)
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d121      	bne.n	800b3f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3b0:	4b49      	ldr	r3, [pc, #292]	@ (800b4d8 <xTaskIncrementTick+0x150>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00b      	beq.n	800b3d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	603b      	str	r3, [r7, #0]
}
 800b3cc:	bf00      	nop
 800b3ce:	bf00      	nop
 800b3d0:	e7fd      	b.n	800b3ce <xTaskIncrementTick+0x46>
 800b3d2:	4b41      	ldr	r3, [pc, #260]	@ (800b4d8 <xTaskIncrementTick+0x150>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	60fb      	str	r3, [r7, #12]
 800b3d8:	4b40      	ldr	r3, [pc, #256]	@ (800b4dc <xTaskIncrementTick+0x154>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a3e      	ldr	r2, [pc, #248]	@ (800b4d8 <xTaskIncrementTick+0x150>)
 800b3de:	6013      	str	r3, [r2, #0]
 800b3e0:	4a3e      	ldr	r2, [pc, #248]	@ (800b4dc <xTaskIncrementTick+0x154>)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6013      	str	r3, [r2, #0]
 800b3e6:	4b3e      	ldr	r3, [pc, #248]	@ (800b4e0 <xTaskIncrementTick+0x158>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	4a3c      	ldr	r2, [pc, #240]	@ (800b4e0 <xTaskIncrementTick+0x158>)
 800b3ee:	6013      	str	r3, [r2, #0]
 800b3f0:	f000 fad4 	bl	800b99c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b3f4:	4b3b      	ldr	r3, [pc, #236]	@ (800b4e4 <xTaskIncrementTick+0x15c>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d349      	bcc.n	800b492 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3fe:	4b36      	ldr	r3, [pc, #216]	@ (800b4d8 <xTaskIncrementTick+0x150>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d104      	bne.n	800b412 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b408:	4b36      	ldr	r3, [pc, #216]	@ (800b4e4 <xTaskIncrementTick+0x15c>)
 800b40a:	f04f 32ff 	mov.w	r2, #4294967295
 800b40e:	601a      	str	r2, [r3, #0]
					break;
 800b410:	e03f      	b.n	800b492 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b412:	4b31      	ldr	r3, [pc, #196]	@ (800b4d8 <xTaskIncrementTick+0x150>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b422:	693a      	ldr	r2, [r7, #16]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	429a      	cmp	r2, r3
 800b428:	d203      	bcs.n	800b432 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b42a:	4a2e      	ldr	r2, [pc, #184]	@ (800b4e4 <xTaskIncrementTick+0x15c>)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b430:	e02f      	b.n	800b492 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	3304      	adds	r3, #4
 800b436:	4618      	mov	r0, r3
 800b438:	f7fe fc86 	bl	8009d48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b440:	2b00      	cmp	r3, #0
 800b442:	d004      	beq.n	800b44e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	3318      	adds	r3, #24
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fe fc7d 	bl	8009d48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b452:	4b25      	ldr	r3, [pc, #148]	@ (800b4e8 <xTaskIncrementTick+0x160>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	429a      	cmp	r2, r3
 800b458:	d903      	bls.n	800b462 <xTaskIncrementTick+0xda>
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b45e:	4a22      	ldr	r2, [pc, #136]	@ (800b4e8 <xTaskIncrementTick+0x160>)
 800b460:	6013      	str	r3, [r2, #0]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b466:	4613      	mov	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4a1f      	ldr	r2, [pc, #124]	@ (800b4ec <xTaskIncrementTick+0x164>)
 800b470:	441a      	add	r2, r3
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	3304      	adds	r3, #4
 800b476:	4619      	mov	r1, r3
 800b478:	4610      	mov	r0, r2
 800b47a:	f7fe fc08 	bl	8009c8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b482:	4b1b      	ldr	r3, [pc, #108]	@ (800b4f0 <xTaskIncrementTick+0x168>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b488:	429a      	cmp	r2, r3
 800b48a:	d3b8      	bcc.n	800b3fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b48c:	2301      	movs	r3, #1
 800b48e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b490:	e7b5      	b.n	800b3fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b492:	4b17      	ldr	r3, [pc, #92]	@ (800b4f0 <xTaskIncrementTick+0x168>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b498:	4914      	ldr	r1, [pc, #80]	@ (800b4ec <xTaskIncrementTick+0x164>)
 800b49a:	4613      	mov	r3, r2
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	4413      	add	r3, r2
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	440b      	add	r3, r1
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d901      	bls.n	800b4ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b4ae:	4b11      	ldr	r3, [pc, #68]	@ (800b4f4 <xTaskIncrementTick+0x16c>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d007      	beq.n	800b4c6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	617b      	str	r3, [r7, #20]
 800b4ba:	e004      	b.n	800b4c6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b4bc:	4b0e      	ldr	r3, [pc, #56]	@ (800b4f8 <xTaskIncrementTick+0x170>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	4a0d      	ldr	r2, [pc, #52]	@ (800b4f8 <xTaskIncrementTick+0x170>)
 800b4c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4c6:	697b      	ldr	r3, [r7, #20]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3718      	adds	r7, #24
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	2000230c 	.word	0x2000230c
 800b4d4:	200022e8 	.word	0x200022e8
 800b4d8:	2000229c 	.word	0x2000229c
 800b4dc:	200022a0 	.word	0x200022a0
 800b4e0:	200022fc 	.word	0x200022fc
 800b4e4:	20002304 	.word	0x20002304
 800b4e8:	200022ec 	.word	0x200022ec
 800b4ec:	20001e14 	.word	0x20001e14
 800b4f0:	20001e10 	.word	0x20001e10
 800b4f4:	200022f8 	.word	0x200022f8
 800b4f8:	200022f4 	.word	0x200022f4

0800b4fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b502:	4b28      	ldr	r3, [pc, #160]	@ (800b5a4 <vTaskSwitchContext+0xa8>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b50a:	4b27      	ldr	r3, [pc, #156]	@ (800b5a8 <vTaskSwitchContext+0xac>)
 800b50c:	2201      	movs	r2, #1
 800b50e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b510:	e042      	b.n	800b598 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b512:	4b25      	ldr	r3, [pc, #148]	@ (800b5a8 <vTaskSwitchContext+0xac>)
 800b514:	2200      	movs	r2, #0
 800b516:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b518:	4b24      	ldr	r3, [pc, #144]	@ (800b5ac <vTaskSwitchContext+0xb0>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	60fb      	str	r3, [r7, #12]
 800b51e:	e011      	b.n	800b544 <vTaskSwitchContext+0x48>
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10b      	bne.n	800b53e <vTaskSwitchContext+0x42>
	__asm volatile
 800b526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b52a:	f383 8811 	msr	BASEPRI, r3
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	607b      	str	r3, [r7, #4]
}
 800b538:	bf00      	nop
 800b53a:	bf00      	nop
 800b53c:	e7fd      	b.n	800b53a <vTaskSwitchContext+0x3e>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	3b01      	subs	r3, #1
 800b542:	60fb      	str	r3, [r7, #12]
 800b544:	491a      	ldr	r1, [pc, #104]	@ (800b5b0 <vTaskSwitchContext+0xb4>)
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	4613      	mov	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4413      	add	r3, r2
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	440b      	add	r3, r1
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d0e3      	beq.n	800b520 <vTaskSwitchContext+0x24>
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	4613      	mov	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4a13      	ldr	r2, [pc, #76]	@ (800b5b0 <vTaskSwitchContext+0xb4>)
 800b564:	4413      	add	r3, r2
 800b566:	60bb      	str	r3, [r7, #8]
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	685a      	ldr	r2, [r3, #4]
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	605a      	str	r2, [r3, #4]
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	3308      	adds	r3, #8
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d104      	bne.n	800b588 <vTaskSwitchContext+0x8c>
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	605a      	str	r2, [r3, #4]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	4a09      	ldr	r2, [pc, #36]	@ (800b5b4 <vTaskSwitchContext+0xb8>)
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	4a06      	ldr	r2, [pc, #24]	@ (800b5ac <vTaskSwitchContext+0xb0>)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6013      	str	r3, [r2, #0]
}
 800b598:	bf00      	nop
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	2000230c 	.word	0x2000230c
 800b5a8:	200022f8 	.word	0x200022f8
 800b5ac:	200022ec 	.word	0x200022ec
 800b5b0:	20001e14 	.word	0x20001e14
 800b5b4:	20001e10 	.word	0x20001e10

0800b5b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10b      	bne.n	800b5e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5cc:	f383 8811 	msr	BASEPRI, r3
 800b5d0:	f3bf 8f6f 	isb	sy
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	60fb      	str	r3, [r7, #12]
}
 800b5da:	bf00      	nop
 800b5dc:	bf00      	nop
 800b5de:	e7fd      	b.n	800b5dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5e0:	4b07      	ldr	r3, [pc, #28]	@ (800b600 <vTaskPlaceOnEventList+0x48>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3318      	adds	r3, #24
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7fe fb74 	bl	8009cd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5ee:	2101      	movs	r1, #1
 800b5f0:	6838      	ldr	r0, [r7, #0]
 800b5f2:	f000 fb81 	bl	800bcf8 <prvAddCurrentTaskToDelayedList>
}
 800b5f6:	bf00      	nop
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	20001e10 	.word	0x20001e10

0800b604 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10b      	bne.n	800b62e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	617b      	str	r3, [r7, #20]
}
 800b628:	bf00      	nop
 800b62a:	bf00      	nop
 800b62c:	e7fd      	b.n	800b62a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b62e:	4b0a      	ldr	r3, [pc, #40]	@ (800b658 <vTaskPlaceOnEventListRestricted+0x54>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3318      	adds	r3, #24
 800b634:	4619      	mov	r1, r3
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f7fe fb29 	bl	8009c8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d002      	beq.n	800b648 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b642:	f04f 33ff 	mov.w	r3, #4294967295
 800b646:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b648:	6879      	ldr	r1, [r7, #4]
 800b64a:	68b8      	ldr	r0, [r7, #8]
 800b64c:	f000 fb54 	bl	800bcf8 <prvAddCurrentTaskToDelayedList>
	}
 800b650:	bf00      	nop
 800b652:	3718      	adds	r7, #24
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	20001e10 	.word	0x20001e10

0800b65c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10b      	bne.n	800b68a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	60fb      	str	r3, [r7, #12]
}
 800b684:	bf00      	nop
 800b686:	bf00      	nop
 800b688:	e7fd      	b.n	800b686 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	3318      	adds	r3, #24
 800b68e:	4618      	mov	r0, r3
 800b690:	f7fe fb5a 	bl	8009d48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b694:	4b1d      	ldr	r3, [pc, #116]	@ (800b70c <xTaskRemoveFromEventList+0xb0>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d11d      	bne.n	800b6d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	3304      	adds	r3, #4
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe fb51 	bl	8009d48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6aa:	4b19      	ldr	r3, [pc, #100]	@ (800b710 <xTaskRemoveFromEventList+0xb4>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d903      	bls.n	800b6ba <xTaskRemoveFromEventList+0x5e>
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b6:	4a16      	ldr	r2, [pc, #88]	@ (800b710 <xTaskRemoveFromEventList+0xb4>)
 800b6b8:	6013      	str	r3, [r2, #0]
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6be:	4613      	mov	r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	4413      	add	r3, r2
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	4a13      	ldr	r2, [pc, #76]	@ (800b714 <xTaskRemoveFromEventList+0xb8>)
 800b6c8:	441a      	add	r2, r3
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	f7fe fadc 	bl	8009c8e <vListInsertEnd>
 800b6d6:	e005      	b.n	800b6e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	3318      	adds	r3, #24
 800b6dc:	4619      	mov	r1, r3
 800b6de:	480e      	ldr	r0, [pc, #56]	@ (800b718 <xTaskRemoveFromEventList+0xbc>)
 800b6e0:	f7fe fad5 	bl	8009c8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6e8:	4b0c      	ldr	r3, [pc, #48]	@ (800b71c <xTaskRemoveFromEventList+0xc0>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d905      	bls.n	800b6fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b6f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b720 <xTaskRemoveFromEventList+0xc4>)
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	e001      	b.n	800b702 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b6fe:	2300      	movs	r3, #0
 800b700:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b702:	697b      	ldr	r3, [r7, #20]
}
 800b704:	4618      	mov	r0, r3
 800b706:	3718      	adds	r7, #24
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	2000230c 	.word	0x2000230c
 800b710:	200022ec 	.word	0x200022ec
 800b714:	20001e14 	.word	0x20001e14
 800b718:	200022a4 	.word	0x200022a4
 800b71c:	20001e10 	.word	0x20001e10
 800b720:	200022f8 	.word	0x200022f8

0800b724 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b72c:	4b06      	ldr	r3, [pc, #24]	@ (800b748 <vTaskInternalSetTimeOutState+0x24>)
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b734:	4b05      	ldr	r3, [pc, #20]	@ (800b74c <vTaskInternalSetTimeOutState+0x28>)
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	605a      	str	r2, [r3, #4]
}
 800b73c:	bf00      	nop
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	200022fc 	.word	0x200022fc
 800b74c:	200022e8 	.word	0x200022e8

0800b750 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b088      	sub	sp, #32
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d10b      	bne.n	800b778 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b764:	f383 8811 	msr	BASEPRI, r3
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	613b      	str	r3, [r7, #16]
}
 800b772:	bf00      	nop
 800b774:	bf00      	nop
 800b776:	e7fd      	b.n	800b774 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d10b      	bne.n	800b796 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b782:	f383 8811 	msr	BASEPRI, r3
 800b786:	f3bf 8f6f 	isb	sy
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	60fb      	str	r3, [r7, #12]
}
 800b790:	bf00      	nop
 800b792:	bf00      	nop
 800b794:	e7fd      	b.n	800b792 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b796:	f000 ff8f 	bl	800c6b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b79a:	4b1d      	ldr	r3, [pc, #116]	@ (800b810 <xTaskCheckForTimeOut+0xc0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	69ba      	ldr	r2, [r7, #24]
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b2:	d102      	bne.n	800b7ba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	61fb      	str	r3, [r7, #28]
 800b7b8:	e023      	b.n	800b802 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	4b15      	ldr	r3, [pc, #84]	@ (800b814 <xTaskCheckForTimeOut+0xc4>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d007      	beq.n	800b7d6 <xTaskCheckForTimeOut+0x86>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	69ba      	ldr	r2, [r7, #24]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d302      	bcc.n	800b7d6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	61fb      	str	r3, [r7, #28]
 800b7d4:	e015      	b.n	800b802 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d20b      	bcs.n	800b7f8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	1ad2      	subs	r2, r2, r3
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7ff ff99 	bl	800b724 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	61fb      	str	r3, [r7, #28]
 800b7f6:	e004      	b.n	800b802 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7fe:	2301      	movs	r3, #1
 800b800:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b802:	f000 ff8b 	bl	800c71c <vPortExitCritical>

	return xReturn;
 800b806:	69fb      	ldr	r3, [r7, #28]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3720      	adds	r7, #32
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	200022e8 	.word	0x200022e8
 800b814:	200022fc 	.word	0x200022fc

0800b818 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b818:	b480      	push	{r7}
 800b81a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b81c:	4b03      	ldr	r3, [pc, #12]	@ (800b82c <vTaskMissedYield+0x14>)
 800b81e:	2201      	movs	r2, #1
 800b820:	601a      	str	r2, [r3, #0]
}
 800b822:	bf00      	nop
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	200022f8 	.word	0x200022f8

0800b830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b838:	f000 f852 	bl	800b8e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b83c:	4b06      	ldr	r3, [pc, #24]	@ (800b858 <prvIdleTask+0x28>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d9f9      	bls.n	800b838 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b844:	4b05      	ldr	r3, [pc, #20]	@ (800b85c <prvIdleTask+0x2c>)
 800b846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b84a:	601a      	str	r2, [r3, #0]
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b854:	e7f0      	b.n	800b838 <prvIdleTask+0x8>
 800b856:	bf00      	nop
 800b858:	20001e14 	.word	0x20001e14
 800b85c:	e000ed04 	.word	0xe000ed04

0800b860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b866:	2300      	movs	r3, #0
 800b868:	607b      	str	r3, [r7, #4]
 800b86a:	e00c      	b.n	800b886 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	4613      	mov	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	4413      	add	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	4a12      	ldr	r2, [pc, #72]	@ (800b8c0 <prvInitialiseTaskLists+0x60>)
 800b878:	4413      	add	r3, r2
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fe f9da 	bl	8009c34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	3301      	adds	r3, #1
 800b884:	607b      	str	r3, [r7, #4]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b37      	cmp	r3, #55	@ 0x37
 800b88a:	d9ef      	bls.n	800b86c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b88c:	480d      	ldr	r0, [pc, #52]	@ (800b8c4 <prvInitialiseTaskLists+0x64>)
 800b88e:	f7fe f9d1 	bl	8009c34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b892:	480d      	ldr	r0, [pc, #52]	@ (800b8c8 <prvInitialiseTaskLists+0x68>)
 800b894:	f7fe f9ce 	bl	8009c34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b898:	480c      	ldr	r0, [pc, #48]	@ (800b8cc <prvInitialiseTaskLists+0x6c>)
 800b89a:	f7fe f9cb 	bl	8009c34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b89e:	480c      	ldr	r0, [pc, #48]	@ (800b8d0 <prvInitialiseTaskLists+0x70>)
 800b8a0:	f7fe f9c8 	bl	8009c34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b8a4:	480b      	ldr	r0, [pc, #44]	@ (800b8d4 <prvInitialiseTaskLists+0x74>)
 800b8a6:	f7fe f9c5 	bl	8009c34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b8aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b8d8 <prvInitialiseTaskLists+0x78>)
 800b8ac:	4a05      	ldr	r2, [pc, #20]	@ (800b8c4 <prvInitialiseTaskLists+0x64>)
 800b8ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b8dc <prvInitialiseTaskLists+0x7c>)
 800b8b2:	4a05      	ldr	r2, [pc, #20]	@ (800b8c8 <prvInitialiseTaskLists+0x68>)
 800b8b4:	601a      	str	r2, [r3, #0]
}
 800b8b6:	bf00      	nop
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	20001e14 	.word	0x20001e14
 800b8c4:	20002274 	.word	0x20002274
 800b8c8:	20002288 	.word	0x20002288
 800b8cc:	200022a4 	.word	0x200022a4
 800b8d0:	200022b8 	.word	0x200022b8
 800b8d4:	200022d0 	.word	0x200022d0
 800b8d8:	2000229c 	.word	0x2000229c
 800b8dc:	200022a0 	.word	0x200022a0

0800b8e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8e6:	e019      	b.n	800b91c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b8e8:	f000 fee6 	bl	800c6b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ec:	4b10      	ldr	r3, [pc, #64]	@ (800b930 <prvCheckTasksWaitingTermination+0x50>)
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fe fa25 	bl	8009d48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b934 <prvCheckTasksWaitingTermination+0x54>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3b01      	subs	r3, #1
 800b904:	4a0b      	ldr	r2, [pc, #44]	@ (800b934 <prvCheckTasksWaitingTermination+0x54>)
 800b906:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b908:	4b0b      	ldr	r3, [pc, #44]	@ (800b938 <prvCheckTasksWaitingTermination+0x58>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	4a0a      	ldr	r2, [pc, #40]	@ (800b938 <prvCheckTasksWaitingTermination+0x58>)
 800b910:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b912:	f000 ff03 	bl	800c71c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f810 	bl	800b93c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b91c:	4b06      	ldr	r3, [pc, #24]	@ (800b938 <prvCheckTasksWaitingTermination+0x58>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1e1      	bne.n	800b8e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	200022b8 	.word	0x200022b8
 800b934:	200022e4 	.word	0x200022e4
 800b938:	200022cc 	.word	0x200022cc

0800b93c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d108      	bne.n	800b960 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b952:	4618      	mov	r0, r3
 800b954:	f001 f8a0 	bl	800ca98 <vPortFree>
				vPortFree( pxTCB );
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f001 f89d 	bl	800ca98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b95e:	e019      	b.n	800b994 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b966:	2b01      	cmp	r3, #1
 800b968:	d103      	bne.n	800b972 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f001 f894 	bl	800ca98 <vPortFree>
	}
 800b970:	e010      	b.n	800b994 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d00b      	beq.n	800b994 <prvDeleteTCB+0x58>
	__asm volatile
 800b97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b980:	f383 8811 	msr	BASEPRI, r3
 800b984:	f3bf 8f6f 	isb	sy
 800b988:	f3bf 8f4f 	dsb	sy
 800b98c:	60fb      	str	r3, [r7, #12]
}
 800b98e:	bf00      	nop
 800b990:	bf00      	nop
 800b992:	e7fd      	b.n	800b990 <prvDeleteTCB+0x54>
	}
 800b994:	bf00      	nop
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d4 <prvResetNextTaskUnblockTime+0x38>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d104      	bne.n	800b9b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d8 <prvResetNextTaskUnblockTime+0x3c>)
 800b9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b9b4:	e008      	b.n	800b9c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9b6:	4b07      	ldr	r3, [pc, #28]	@ (800b9d4 <prvResetNextTaskUnblockTime+0x38>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	4a04      	ldr	r2, [pc, #16]	@ (800b9d8 <prvResetNextTaskUnblockTime+0x3c>)
 800b9c6:	6013      	str	r3, [r2, #0]
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	2000229c 	.word	0x2000229c
 800b9d8:	20002304 	.word	0x20002304

0800b9dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b9e2:	4b0b      	ldr	r3, [pc, #44]	@ (800ba10 <xTaskGetSchedulerState+0x34>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d102      	bne.n	800b9f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	607b      	str	r3, [r7, #4]
 800b9ee:	e008      	b.n	800ba02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9f0:	4b08      	ldr	r3, [pc, #32]	@ (800ba14 <xTaskGetSchedulerState+0x38>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d102      	bne.n	800b9fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	607b      	str	r3, [r7, #4]
 800b9fc:	e001      	b.n	800ba02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba02:	687b      	ldr	r3, [r7, #4]
	}
 800ba04:	4618      	mov	r0, r3
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr
 800ba10:	200022f0 	.word	0x200022f0
 800ba14:	2000230c 	.word	0x2000230c

0800ba18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ba24:	2300      	movs	r3, #0
 800ba26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d051      	beq.n	800bad2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba32:	4b2a      	ldr	r3, [pc, #168]	@ (800badc <xTaskPriorityInherit+0xc4>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d241      	bcs.n	800bac0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	699b      	ldr	r3, [r3, #24]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	db06      	blt.n	800ba52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba44:	4b25      	ldr	r3, [pc, #148]	@ (800badc <xTaskPriorityInherit+0xc4>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba4a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	6959      	ldr	r1, [r3, #20]
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4a1f      	ldr	r2, [pc, #124]	@ (800bae0 <xTaskPriorityInherit+0xc8>)
 800ba64:	4413      	add	r3, r2
 800ba66:	4299      	cmp	r1, r3
 800ba68:	d122      	bne.n	800bab0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	3304      	adds	r3, #4
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fe f96a 	bl	8009d48 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba74:	4b19      	ldr	r3, [pc, #100]	@ (800badc <xTaskPriorityInherit+0xc4>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba82:	4b18      	ldr	r3, [pc, #96]	@ (800bae4 <xTaskPriorityInherit+0xcc>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d903      	bls.n	800ba92 <xTaskPriorityInherit+0x7a>
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba8e:	4a15      	ldr	r2, [pc, #84]	@ (800bae4 <xTaskPriorityInherit+0xcc>)
 800ba90:	6013      	str	r3, [r2, #0]
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba96:	4613      	mov	r3, r2
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4413      	add	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4a10      	ldr	r2, [pc, #64]	@ (800bae0 <xTaskPriorityInherit+0xc8>)
 800baa0:	441a      	add	r2, r3
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	3304      	adds	r3, #4
 800baa6:	4619      	mov	r1, r3
 800baa8:	4610      	mov	r0, r2
 800baaa:	f7fe f8f0 	bl	8009c8e <vListInsertEnd>
 800baae:	e004      	b.n	800baba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bab0:	4b0a      	ldr	r3, [pc, #40]	@ (800badc <xTaskPriorityInherit+0xc4>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800baba:	2301      	movs	r3, #1
 800babc:	60fb      	str	r3, [r7, #12]
 800babe:	e008      	b.n	800bad2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bac4:	4b05      	ldr	r3, [pc, #20]	@ (800badc <xTaskPriorityInherit+0xc4>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baca:	429a      	cmp	r2, r3
 800bacc:	d201      	bcs.n	800bad2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bace:	2301      	movs	r3, #1
 800bad0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bad2:	68fb      	ldr	r3, [r7, #12]
	}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	20001e10 	.word	0x20001e10
 800bae0:	20001e14 	.word	0x20001e14
 800bae4:	200022ec 	.word	0x200022ec

0800bae8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800baf4:	2300      	movs	r3, #0
 800baf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d058      	beq.n	800bbb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bafe:	4b2f      	ldr	r3, [pc, #188]	@ (800bbbc <xTaskPriorityDisinherit+0xd4>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d00b      	beq.n	800bb20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bb08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb0c:	f383 8811 	msr	BASEPRI, r3
 800bb10:	f3bf 8f6f 	isb	sy
 800bb14:	f3bf 8f4f 	dsb	sy
 800bb18:	60fb      	str	r3, [r7, #12]
}
 800bb1a:	bf00      	nop
 800bb1c:	bf00      	nop
 800bb1e:	e7fd      	b.n	800bb1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10b      	bne.n	800bb40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	60bb      	str	r3, [r7, #8]
}
 800bb3a:	bf00      	nop
 800bb3c:	bf00      	nop
 800bb3e:	e7fd      	b.n	800bb3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb44:	1e5a      	subs	r2, r3, #1
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d02c      	beq.n	800bbb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d128      	bne.n	800bbb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	3304      	adds	r3, #4
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fe f8f0 	bl	8009d48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb80:	4b0f      	ldr	r3, [pc, #60]	@ (800bbc0 <xTaskPriorityDisinherit+0xd8>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d903      	bls.n	800bb90 <xTaskPriorityDisinherit+0xa8>
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb8c:	4a0c      	ldr	r2, [pc, #48]	@ (800bbc0 <xTaskPriorityDisinherit+0xd8>)
 800bb8e:	6013      	str	r3, [r2, #0]
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb94:	4613      	mov	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4413      	add	r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	4a09      	ldr	r2, [pc, #36]	@ (800bbc4 <xTaskPriorityDisinherit+0xdc>)
 800bb9e:	441a      	add	r2, r3
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	3304      	adds	r3, #4
 800bba4:	4619      	mov	r1, r3
 800bba6:	4610      	mov	r0, r2
 800bba8:	f7fe f871 	bl	8009c8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bbac:	2301      	movs	r3, #1
 800bbae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbb0:	697b      	ldr	r3, [r7, #20]
	}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3718      	adds	r7, #24
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20001e10 	.word	0x20001e10
 800bbc0:	200022ec 	.word	0x200022ec
 800bbc4:	20001e14 	.word	0x20001e14

0800bbc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b088      	sub	sp, #32
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d06c      	beq.n	800bcba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10b      	bne.n	800bc00 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bbe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbec:	f383 8811 	msr	BASEPRI, r3
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	60fb      	str	r3, [r7, #12]
}
 800bbfa:	bf00      	nop
 800bbfc:	bf00      	nop
 800bbfe:	e7fd      	b.n	800bbfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d902      	bls.n	800bc10 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	61fb      	str	r3, [r7, #28]
 800bc0e:	e002      	b.n	800bc16 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc10:	69bb      	ldr	r3, [r7, #24]
 800bc12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc1a:	69fa      	ldr	r2, [r7, #28]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d04c      	beq.n	800bcba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d147      	bne.n	800bcba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bc2a:	4b26      	ldr	r3, [pc, #152]	@ (800bcc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	69ba      	ldr	r2, [r7, #24]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d10b      	bne.n	800bc4c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	60bb      	str	r3, [r7, #8]
}
 800bc46:	bf00      	nop
 800bc48:	bf00      	nop
 800bc4a:	e7fd      	b.n	800bc48 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	69fa      	ldr	r2, [r7, #28]
 800bc56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	699b      	ldr	r3, [r3, #24]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	db04      	blt.n	800bc6a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	6959      	ldr	r1, [r3, #20]
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	4613      	mov	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4a13      	ldr	r2, [pc, #76]	@ (800bcc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bc7a:	4413      	add	r3, r2
 800bc7c:	4299      	cmp	r1, r3
 800bc7e:	d11c      	bne.n	800bcba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc80:	69bb      	ldr	r3, [r7, #24]
 800bc82:	3304      	adds	r3, #4
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7fe f85f 	bl	8009d48 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc8e:	4b0f      	ldr	r3, [pc, #60]	@ (800bccc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d903      	bls.n	800bc9e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc9a:	4a0c      	ldr	r2, [pc, #48]	@ (800bccc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bc9c:	6013      	str	r3, [r2, #0]
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bca2:	4613      	mov	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	4a07      	ldr	r2, [pc, #28]	@ (800bcc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bcac:	441a      	add	r2, r3
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	3304      	adds	r3, #4
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	4610      	mov	r0, r2
 800bcb6:	f7fd ffea 	bl	8009c8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcba:	bf00      	nop
 800bcbc:	3720      	adds	r7, #32
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20001e10 	.word	0x20001e10
 800bcc8:	20001e14 	.word	0x20001e14
 800bccc:	200022ec 	.word	0x200022ec

0800bcd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bcd0:	b480      	push	{r7}
 800bcd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bcd4:	4b07      	ldr	r3, [pc, #28]	@ (800bcf4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d004      	beq.n	800bce6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bcdc:	4b05      	ldr	r3, [pc, #20]	@ (800bcf4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bce2:	3201      	adds	r2, #1
 800bce4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bce6:	4b03      	ldr	r3, [pc, #12]	@ (800bcf4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bce8:	681b      	ldr	r3, [r3, #0]
	}
 800bcea:	4618      	mov	r0, r3
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr
 800bcf4:	20001e10 	.word	0x20001e10

0800bcf8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd02:	4b21      	ldr	r3, [pc, #132]	@ (800bd88 <prvAddCurrentTaskToDelayedList+0x90>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd08:	4b20      	ldr	r3, [pc, #128]	@ (800bd8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fe f81a 	bl	8009d48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd1a:	d10a      	bne.n	800bd32 <prvAddCurrentTaskToDelayedList+0x3a>
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d007      	beq.n	800bd32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd22:	4b1a      	ldr	r3, [pc, #104]	@ (800bd8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	3304      	adds	r3, #4
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4819      	ldr	r0, [pc, #100]	@ (800bd90 <prvAddCurrentTaskToDelayedList+0x98>)
 800bd2c:	f7fd ffaf 	bl	8009c8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd30:	e026      	b.n	800bd80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4413      	add	r3, r2
 800bd38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd3a:	4b14      	ldr	r3, [pc, #80]	@ (800bd8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd42:	68ba      	ldr	r2, [r7, #8]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d209      	bcs.n	800bd5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd4a:	4b12      	ldr	r3, [pc, #72]	@ (800bd94 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	4b0f      	ldr	r3, [pc, #60]	@ (800bd8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	3304      	adds	r3, #4
 800bd54:	4619      	mov	r1, r3
 800bd56:	4610      	mov	r0, r2
 800bd58:	f7fd ffbd 	bl	8009cd6 <vListInsert>
}
 800bd5c:	e010      	b.n	800bd80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd5e:	4b0e      	ldr	r3, [pc, #56]	@ (800bd98 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	4b0a      	ldr	r3, [pc, #40]	@ (800bd8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	3304      	adds	r3, #4
 800bd68:	4619      	mov	r1, r3
 800bd6a:	4610      	mov	r0, r2
 800bd6c:	f7fd ffb3 	bl	8009cd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd70:	4b0a      	ldr	r3, [pc, #40]	@ (800bd9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d202      	bcs.n	800bd80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bd7a:	4a08      	ldr	r2, [pc, #32]	@ (800bd9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	6013      	str	r3, [r2, #0]
}
 800bd80:	bf00      	nop
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	200022e8 	.word	0x200022e8
 800bd8c:	20001e10 	.word	0x20001e10
 800bd90:	200022d0 	.word	0x200022d0
 800bd94:	200022a0 	.word	0x200022a0
 800bd98:	2000229c 	.word	0x2000229c
 800bd9c:	20002304 	.word	0x20002304

0800bda0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b08a      	sub	sp, #40	@ 0x28
 800bda4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bdaa:	f000 fb13 	bl	800c3d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bdae:	4b1d      	ldr	r3, [pc, #116]	@ (800be24 <xTimerCreateTimerTask+0x84>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d021      	beq.n	800bdfa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bdbe:	1d3a      	adds	r2, r7, #4
 800bdc0:	f107 0108 	add.w	r1, r7, #8
 800bdc4:	f107 030c 	add.w	r3, r7, #12
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fd ff19 	bl	8009c00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bdce:	6879      	ldr	r1, [r7, #4]
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	9202      	str	r2, [sp, #8]
 800bdd6:	9301      	str	r3, [sp, #4]
 800bdd8:	2302      	movs	r3, #2
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	2300      	movs	r3, #0
 800bdde:	460a      	mov	r2, r1
 800bde0:	4911      	ldr	r1, [pc, #68]	@ (800be28 <xTimerCreateTimerTask+0x88>)
 800bde2:	4812      	ldr	r0, [pc, #72]	@ (800be2c <xTimerCreateTimerTask+0x8c>)
 800bde4:	f7ff f806 	bl	800adf4 <xTaskCreateStatic>
 800bde8:	4603      	mov	r3, r0
 800bdea:	4a11      	ldr	r2, [pc, #68]	@ (800be30 <xTimerCreateTimerTask+0x90>)
 800bdec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bdee:	4b10      	ldr	r3, [pc, #64]	@ (800be30 <xTimerCreateTimerTask+0x90>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d001      	beq.n	800bdfa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10b      	bne.n	800be18 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800be00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	613b      	str	r3, [r7, #16]
}
 800be12:	bf00      	nop
 800be14:	bf00      	nop
 800be16:	e7fd      	b.n	800be14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800be18:	697b      	ldr	r3, [r7, #20]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3718      	adds	r7, #24
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	20002340 	.word	0x20002340
 800be28:	08011d58 	.word	0x08011d58
 800be2c:	0800bf6d 	.word	0x0800bf6d
 800be30:	20002344 	.word	0x20002344

0800be34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b08a      	sub	sp, #40	@ 0x28
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
 800be40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800be42:	2300      	movs	r3, #0
 800be44:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10b      	bne.n	800be64 <xTimerGenericCommand+0x30>
	__asm volatile
 800be4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	623b      	str	r3, [r7, #32]
}
 800be5e:	bf00      	nop
 800be60:	bf00      	nop
 800be62:	e7fd      	b.n	800be60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be64:	4b19      	ldr	r3, [pc, #100]	@ (800becc <xTimerGenericCommand+0x98>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d02a      	beq.n	800bec2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2b05      	cmp	r3, #5
 800be7c:	dc18      	bgt.n	800beb0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be7e:	f7ff fdad 	bl	800b9dc <xTaskGetSchedulerState>
 800be82:	4603      	mov	r3, r0
 800be84:	2b02      	cmp	r3, #2
 800be86:	d109      	bne.n	800be9c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be88:	4b10      	ldr	r3, [pc, #64]	@ (800becc <xTimerGenericCommand+0x98>)
 800be8a:	6818      	ldr	r0, [r3, #0]
 800be8c:	f107 0110 	add.w	r1, r7, #16
 800be90:	2300      	movs	r3, #0
 800be92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be94:	f7fe f936 	bl	800a104 <xQueueGenericSend>
 800be98:	6278      	str	r0, [r7, #36]	@ 0x24
 800be9a:	e012      	b.n	800bec2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800be9c:	4b0b      	ldr	r3, [pc, #44]	@ (800becc <xTimerGenericCommand+0x98>)
 800be9e:	6818      	ldr	r0, [r3, #0]
 800bea0:	f107 0110 	add.w	r1, r7, #16
 800bea4:	2300      	movs	r3, #0
 800bea6:	2200      	movs	r2, #0
 800bea8:	f7fe f92c 	bl	800a104 <xQueueGenericSend>
 800beac:	6278      	str	r0, [r7, #36]	@ 0x24
 800beae:	e008      	b.n	800bec2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800beb0:	4b06      	ldr	r3, [pc, #24]	@ (800becc <xTimerGenericCommand+0x98>)
 800beb2:	6818      	ldr	r0, [r3, #0]
 800beb4:	f107 0110 	add.w	r1, r7, #16
 800beb8:	2300      	movs	r3, #0
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	f7fe fa24 	bl	800a308 <xQueueGenericSendFromISR>
 800bec0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3728      	adds	r7, #40	@ 0x28
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	20002340 	.word	0x20002340

0800bed0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b088      	sub	sp, #32
 800bed4:	af02      	add	r7, sp, #8
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beda:	4b23      	ldr	r3, [pc, #140]	@ (800bf68 <prvProcessExpiredTimer+0x98>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	3304      	adds	r3, #4
 800bee8:	4618      	mov	r0, r3
 800beea:	f7fd ff2d 	bl	8009d48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bef4:	f003 0304 	and.w	r3, r3, #4
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d023      	beq.n	800bf44 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	699a      	ldr	r2, [r3, #24]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	18d1      	adds	r1, r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	6978      	ldr	r0, [r7, #20]
 800bf0a:	f000 f8d5 	bl	800c0b8 <prvInsertTimerInActiveList>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d020      	beq.n	800bf56 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf14:	2300      	movs	r3, #0
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	2300      	movs	r3, #0
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	6978      	ldr	r0, [r7, #20]
 800bf20:	f7ff ff88 	bl	800be34 <xTimerGenericCommand>
 800bf24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d114      	bne.n	800bf56 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bf2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf30:	f383 8811 	msr	BASEPRI, r3
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	f3bf 8f4f 	dsb	sy
 800bf3c:	60fb      	str	r3, [r7, #12]
}
 800bf3e:	bf00      	nop
 800bf40:	bf00      	nop
 800bf42:	e7fd      	b.n	800bf40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf4a:	f023 0301 	bic.w	r3, r3, #1
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	6a1b      	ldr	r3, [r3, #32]
 800bf5a:	6978      	ldr	r0, [r7, #20]
 800bf5c:	4798      	blx	r3
}
 800bf5e:	bf00      	nop
 800bf60:	3718      	adds	r7, #24
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	20002338 	.word	0x20002338

0800bf6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf74:	f107 0308 	add.w	r3, r7, #8
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 f859 	bl	800c030 <prvGetNextExpireTime>
 800bf7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	4619      	mov	r1, r3
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f000 f805 	bl	800bf94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bf8a:	f000 f8d7 	bl	800c13c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf8e:	bf00      	nop
 800bf90:	e7f0      	b.n	800bf74 <prvTimerTask+0x8>
	...

0800bf94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bf9e:	f7ff f937 	bl	800b210 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfa2:	f107 0308 	add.w	r3, r7, #8
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f000 f866 	bl	800c078 <prvSampleTimeNow>
 800bfac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d130      	bne.n	800c016 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10a      	bne.n	800bfd0 <prvProcessTimerOrBlockTask+0x3c>
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d806      	bhi.n	800bfd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bfc2:	f7ff f933 	bl	800b22c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bfc6:	68f9      	ldr	r1, [r7, #12]
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f7ff ff81 	bl	800bed0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bfce:	e024      	b.n	800c01a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d008      	beq.n	800bfe8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bfd6:	4b13      	ldr	r3, [pc, #76]	@ (800c024 <prvProcessTimerOrBlockTask+0x90>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d101      	bne.n	800bfe4 <prvProcessTimerOrBlockTask+0x50>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e000      	b.n	800bfe6 <prvProcessTimerOrBlockTask+0x52>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bfe8:	4b0f      	ldr	r3, [pc, #60]	@ (800c028 <prvProcessTimerOrBlockTask+0x94>)
 800bfea:	6818      	ldr	r0, [r3, #0]
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	683a      	ldr	r2, [r7, #0]
 800bff4:	4619      	mov	r1, r3
 800bff6:	f7fe fec9 	bl	800ad8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bffa:	f7ff f917 	bl	800b22c <xTaskResumeAll>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10a      	bne.n	800c01a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c004:	4b09      	ldr	r3, [pc, #36]	@ (800c02c <prvProcessTimerOrBlockTask+0x98>)
 800c006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c00a:	601a      	str	r2, [r3, #0]
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	f3bf 8f6f 	isb	sy
}
 800c014:	e001      	b.n	800c01a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c016:	f7ff f909 	bl	800b22c <xTaskResumeAll>
}
 800c01a:	bf00      	nop
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	2000233c 	.word	0x2000233c
 800c028:	20002340 	.word	0x20002340
 800c02c:	e000ed04 	.word	0xe000ed04

0800c030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c038:	4b0e      	ldr	r3, [pc, #56]	@ (800c074 <prvGetNextExpireTime+0x44>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d101      	bne.n	800c046 <prvGetNextExpireTime+0x16>
 800c042:	2201      	movs	r2, #1
 800c044:	e000      	b.n	800c048 <prvGetNextExpireTime+0x18>
 800c046:	2200      	movs	r2, #0
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d105      	bne.n	800c060 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c054:	4b07      	ldr	r3, [pc, #28]	@ (800c074 <prvGetNextExpireTime+0x44>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	60fb      	str	r3, [r7, #12]
 800c05e:	e001      	b.n	800c064 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c060:	2300      	movs	r3, #0
 800c062:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c064:	68fb      	ldr	r3, [r7, #12]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3714      	adds	r7, #20
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	20002338 	.word	0x20002338

0800c078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c080:	f7ff f972 	bl	800b368 <xTaskGetTickCount>
 800c084:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c086:	4b0b      	ldr	r3, [pc, #44]	@ (800c0b4 <prvSampleTimeNow+0x3c>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d205      	bcs.n	800c09c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c090:	f000 f93a 	bl	800c308 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	601a      	str	r2, [r3, #0]
 800c09a:	e002      	b.n	800c0a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c0a2:	4a04      	ldr	r2, [pc, #16]	@ (800c0b4 <prvSampleTimeNow+0x3c>)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	20002348 	.word	0x20002348

0800c0b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b086      	sub	sp, #24
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
 800c0c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c0d6:	68ba      	ldr	r2, [r7, #8]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d812      	bhi.n	800c104 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	1ad2      	subs	r2, r2, r3
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	699b      	ldr	r3, [r3, #24]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d302      	bcc.n	800c0f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	617b      	str	r3, [r7, #20]
 800c0f0:	e01b      	b.n	800c12a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c0f2:	4b10      	ldr	r3, [pc, #64]	@ (800c134 <prvInsertTimerInActiveList+0x7c>)
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	f7fd fdea 	bl	8009cd6 <vListInsert>
 800c102:	e012      	b.n	800c12a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d206      	bcs.n	800c11a <prvInsertTimerInActiveList+0x62>
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	429a      	cmp	r2, r3
 800c112:	d302      	bcc.n	800c11a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c114:	2301      	movs	r3, #1
 800c116:	617b      	str	r3, [r7, #20]
 800c118:	e007      	b.n	800c12a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c11a:	4b07      	ldr	r3, [pc, #28]	@ (800c138 <prvInsertTimerInActiveList+0x80>)
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	3304      	adds	r3, #4
 800c122:	4619      	mov	r1, r3
 800c124:	4610      	mov	r0, r2
 800c126:	f7fd fdd6 	bl	8009cd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c12a:	697b      	ldr	r3, [r7, #20]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3718      	adds	r7, #24
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	2000233c 	.word	0x2000233c
 800c138:	20002338 	.word	0x20002338

0800c13c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b08e      	sub	sp, #56	@ 0x38
 800c140:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c142:	e0ce      	b.n	800c2e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	da19      	bge.n	800c17e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c14a:	1d3b      	adds	r3, r7, #4
 800c14c:	3304      	adds	r3, #4
 800c14e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c152:	2b00      	cmp	r3, #0
 800c154:	d10b      	bne.n	800c16e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	61fb      	str	r3, [r7, #28]
}
 800c168:	bf00      	nop
 800c16a:	bf00      	nop
 800c16c:	e7fd      	b.n	800c16a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c174:	6850      	ldr	r0, [r2, #4]
 800c176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c178:	6892      	ldr	r2, [r2, #8]
 800c17a:	4611      	mov	r1, r2
 800c17c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2b00      	cmp	r3, #0
 800c182:	f2c0 80ae 	blt.w	800c2e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d004      	beq.n	800c19c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c194:	3304      	adds	r3, #4
 800c196:	4618      	mov	r0, r3
 800c198:	f7fd fdd6 	bl	8009d48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c19c:	463b      	mov	r3, r7
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7ff ff6a 	bl	800c078 <prvSampleTimeNow>
 800c1a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2b09      	cmp	r3, #9
 800c1aa:	f200 8097 	bhi.w	800c2dc <prvProcessReceivedCommands+0x1a0>
 800c1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c1b4 <prvProcessReceivedCommands+0x78>)
 800c1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b4:	0800c1dd 	.word	0x0800c1dd
 800c1b8:	0800c1dd 	.word	0x0800c1dd
 800c1bc:	0800c1dd 	.word	0x0800c1dd
 800c1c0:	0800c253 	.word	0x0800c253
 800c1c4:	0800c267 	.word	0x0800c267
 800c1c8:	0800c2b3 	.word	0x0800c2b3
 800c1cc:	0800c1dd 	.word	0x0800c1dd
 800c1d0:	0800c1dd 	.word	0x0800c1dd
 800c1d4:	0800c253 	.word	0x0800c253
 800c1d8:	0800c267 	.word	0x0800c267
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1e2:	f043 0301 	orr.w	r3, r3, #1
 800c1e6:	b2da      	uxtb	r2, r3
 800c1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c1ee:	68ba      	ldr	r2, [r7, #8]
 800c1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f2:	699b      	ldr	r3, [r3, #24]
 800c1f4:	18d1      	adds	r1, r2, r3
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1fc:	f7ff ff5c 	bl	800c0b8 <prvInsertTimerInActiveList>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d06c      	beq.n	800c2e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c208:	6a1b      	ldr	r3, [r3, #32]
 800c20a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c20c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c214:	f003 0304 	and.w	r3, r3, #4
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d061      	beq.n	800c2e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c21c:	68ba      	ldr	r2, [r7, #8]
 800c21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	441a      	add	r2, r3
 800c224:	2300      	movs	r3, #0
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	2300      	movs	r3, #0
 800c22a:	2100      	movs	r1, #0
 800c22c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c22e:	f7ff fe01 	bl	800be34 <xTimerGenericCommand>
 800c232:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c234:	6a3b      	ldr	r3, [r7, #32]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d152      	bne.n	800c2e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c23a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c23e:	f383 8811 	msr	BASEPRI, r3
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	f3bf 8f4f 	dsb	sy
 800c24a:	61bb      	str	r3, [r7, #24]
}
 800c24c:	bf00      	nop
 800c24e:	bf00      	nop
 800c250:	e7fd      	b.n	800c24e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c254:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c258:	f023 0301 	bic.w	r3, r3, #1
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c260:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c264:	e03d      	b.n	800c2e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c26c:	f043 0301 	orr.w	r3, r3, #1
 800c270:	b2da      	uxtb	r2, r3
 800c272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c274:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c27c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c280:	699b      	ldr	r3, [r3, #24]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10b      	bne.n	800c29e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	617b      	str	r3, [r7, #20]
}
 800c298:	bf00      	nop
 800c29a:	bf00      	nop
 800c29c:	e7fd      	b.n	800c29a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a0:	699a      	ldr	r2, [r3, #24]
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a4:	18d1      	adds	r1, r2, r3
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2ac:	f7ff ff04 	bl	800c0b8 <prvInsertTimerInActiveList>
					break;
 800c2b0:	e017      	b.n	800c2e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2b8:	f003 0302 	and.w	r3, r3, #2
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d103      	bne.n	800c2c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c2c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2c2:	f000 fbe9 	bl	800ca98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c2c6:	e00c      	b.n	800c2e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2ce:	f023 0301 	bic.w	r3, r3, #1
 800c2d2:	b2da      	uxtb	r2, r3
 800c2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c2da:	e002      	b.n	800c2e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c2dc:	bf00      	nop
 800c2de:	e000      	b.n	800c2e2 <prvProcessReceivedCommands+0x1a6>
					break;
 800c2e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2e2:	4b08      	ldr	r3, [pc, #32]	@ (800c304 <prvProcessReceivedCommands+0x1c8>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	1d39      	adds	r1, r7, #4
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fe f93a 	bl	800a564 <xQueueReceive>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	f47f af26 	bne.w	800c144 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c2f8:	bf00      	nop
 800c2fa:	bf00      	nop
 800c2fc:	3730      	adds	r7, #48	@ 0x30
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	20002340 	.word	0x20002340

0800c308 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b088      	sub	sp, #32
 800c30c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c30e:	e049      	b.n	800c3a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c310:	4b2e      	ldr	r3, [pc, #184]	@ (800c3cc <prvSwitchTimerLists+0xc4>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c31a:	4b2c      	ldr	r3, [pc, #176]	@ (800c3cc <prvSwitchTimerLists+0xc4>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	3304      	adds	r3, #4
 800c328:	4618      	mov	r0, r3
 800c32a:	f7fd fd0d 	bl	8009d48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6a1b      	ldr	r3, [r3, #32]
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c33c:	f003 0304 	and.w	r3, r3, #4
 800c340:	2b00      	cmp	r3, #0
 800c342:	d02f      	beq.n	800c3a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	699b      	ldr	r3, [r3, #24]
 800c348:	693a      	ldr	r2, [r7, #16]
 800c34a:	4413      	add	r3, r2
 800c34c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c34e:	68ba      	ldr	r2, [r7, #8]
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	429a      	cmp	r2, r3
 800c354:	d90e      	bls.n	800c374 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	68ba      	ldr	r2, [r7, #8]
 800c35a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c362:	4b1a      	ldr	r3, [pc, #104]	@ (800c3cc <prvSwitchTimerLists+0xc4>)
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3304      	adds	r3, #4
 800c36a:	4619      	mov	r1, r3
 800c36c:	4610      	mov	r0, r2
 800c36e:	f7fd fcb2 	bl	8009cd6 <vListInsert>
 800c372:	e017      	b.n	800c3a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c374:	2300      	movs	r3, #0
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	2300      	movs	r3, #0
 800c37a:	693a      	ldr	r2, [r7, #16]
 800c37c:	2100      	movs	r1, #0
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f7ff fd58 	bl	800be34 <xTimerGenericCommand>
 800c384:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10b      	bne.n	800c3a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c390:	f383 8811 	msr	BASEPRI, r3
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	603b      	str	r3, [r7, #0]
}
 800c39e:	bf00      	nop
 800c3a0:	bf00      	nop
 800c3a2:	e7fd      	b.n	800c3a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3a4:	4b09      	ldr	r3, [pc, #36]	@ (800c3cc <prvSwitchTimerLists+0xc4>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1b0      	bne.n	800c310 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c3ae:	4b07      	ldr	r3, [pc, #28]	@ (800c3cc <prvSwitchTimerLists+0xc4>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c3b4:	4b06      	ldr	r3, [pc, #24]	@ (800c3d0 <prvSwitchTimerLists+0xc8>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a04      	ldr	r2, [pc, #16]	@ (800c3cc <prvSwitchTimerLists+0xc4>)
 800c3ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c3bc:	4a04      	ldr	r2, [pc, #16]	@ (800c3d0 <prvSwitchTimerLists+0xc8>)
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	6013      	str	r3, [r2, #0]
}
 800c3c2:	bf00      	nop
 800c3c4:	3718      	adds	r7, #24
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	20002338 	.word	0x20002338
 800c3d0:	2000233c 	.word	0x2000233c

0800c3d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c3da:	f000 f96d 	bl	800c6b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c3de:	4b15      	ldr	r3, [pc, #84]	@ (800c434 <prvCheckForValidListAndQueue+0x60>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d120      	bne.n	800c428 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c3e6:	4814      	ldr	r0, [pc, #80]	@ (800c438 <prvCheckForValidListAndQueue+0x64>)
 800c3e8:	f7fd fc24 	bl	8009c34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c3ec:	4813      	ldr	r0, [pc, #76]	@ (800c43c <prvCheckForValidListAndQueue+0x68>)
 800c3ee:	f7fd fc21 	bl	8009c34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c3f2:	4b13      	ldr	r3, [pc, #76]	@ (800c440 <prvCheckForValidListAndQueue+0x6c>)
 800c3f4:	4a10      	ldr	r2, [pc, #64]	@ (800c438 <prvCheckForValidListAndQueue+0x64>)
 800c3f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c3f8:	4b12      	ldr	r3, [pc, #72]	@ (800c444 <prvCheckForValidListAndQueue+0x70>)
 800c3fa:	4a10      	ldr	r2, [pc, #64]	@ (800c43c <prvCheckForValidListAndQueue+0x68>)
 800c3fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c3fe:	2300      	movs	r3, #0
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	4b11      	ldr	r3, [pc, #68]	@ (800c448 <prvCheckForValidListAndQueue+0x74>)
 800c404:	4a11      	ldr	r2, [pc, #68]	@ (800c44c <prvCheckForValidListAndQueue+0x78>)
 800c406:	2110      	movs	r1, #16
 800c408:	200a      	movs	r0, #10
 800c40a:	f7fd fd31 	bl	8009e70 <xQueueGenericCreateStatic>
 800c40e:	4603      	mov	r3, r0
 800c410:	4a08      	ldr	r2, [pc, #32]	@ (800c434 <prvCheckForValidListAndQueue+0x60>)
 800c412:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c414:	4b07      	ldr	r3, [pc, #28]	@ (800c434 <prvCheckForValidListAndQueue+0x60>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d005      	beq.n	800c428 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c41c:	4b05      	ldr	r3, [pc, #20]	@ (800c434 <prvCheckForValidListAndQueue+0x60>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	490b      	ldr	r1, [pc, #44]	@ (800c450 <prvCheckForValidListAndQueue+0x7c>)
 800c422:	4618      	mov	r0, r3
 800c424:	f7fe fc5e 	bl	800ace4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c428:	f000 f978 	bl	800c71c <vPortExitCritical>
}
 800c42c:	bf00      	nop
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	20002340 	.word	0x20002340
 800c438:	20002310 	.word	0x20002310
 800c43c:	20002324 	.word	0x20002324
 800c440:	20002338 	.word	0x20002338
 800c444:	2000233c 	.word	0x2000233c
 800c448:	200023ec 	.word	0x200023ec
 800c44c:	2000234c 	.word	0x2000234c
 800c450:	08011d60 	.word	0x08011d60

0800c454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	3b04      	subs	r3, #4
 800c464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c46c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	3b04      	subs	r3, #4
 800c472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	f023 0201 	bic.w	r2, r3, #1
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3b04      	subs	r3, #4
 800c482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c484:	4a0c      	ldr	r2, [pc, #48]	@ (800c4b8 <pxPortInitialiseStack+0x64>)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	3b14      	subs	r3, #20
 800c48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	3b04      	subs	r3, #4
 800c49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f06f 0202 	mvn.w	r2, #2
 800c4a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	3b20      	subs	r3, #32
 800c4a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	0800c4bd 	.word	0x0800c4bd

0800c4bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c4c6:	4b13      	ldr	r3, [pc, #76]	@ (800c514 <prvTaskExitError+0x58>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ce:	d00b      	beq.n	800c4e8 <prvTaskExitError+0x2c>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	60fb      	str	r3, [r7, #12]
}
 800c4e2:	bf00      	nop
 800c4e4:	bf00      	nop
 800c4e6:	e7fd      	b.n	800c4e4 <prvTaskExitError+0x28>
	__asm volatile
 800c4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ec:	f383 8811 	msr	BASEPRI, r3
 800c4f0:	f3bf 8f6f 	isb	sy
 800c4f4:	f3bf 8f4f 	dsb	sy
 800c4f8:	60bb      	str	r3, [r7, #8]
}
 800c4fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c4fc:	bf00      	nop
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d0fc      	beq.n	800c4fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c504:	bf00      	nop
 800c506:	bf00      	nop
 800c508:	3714      	adds	r7, #20
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop
 800c514:	2000004c 	.word	0x2000004c
	...

0800c520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c520:	4b07      	ldr	r3, [pc, #28]	@ (800c540 <pxCurrentTCBConst2>)
 800c522:	6819      	ldr	r1, [r3, #0]
 800c524:	6808      	ldr	r0, [r1, #0]
 800c526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52a:	f380 8809 	msr	PSP, r0
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f04f 0000 	mov.w	r0, #0
 800c536:	f380 8811 	msr	BASEPRI, r0
 800c53a:	4770      	bx	lr
 800c53c:	f3af 8000 	nop.w

0800c540 <pxCurrentTCBConst2>:
 800c540:	20001e10 	.word	0x20001e10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c544:	bf00      	nop
 800c546:	bf00      	nop

0800c548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c548:	4808      	ldr	r0, [pc, #32]	@ (800c56c <prvPortStartFirstTask+0x24>)
 800c54a:	6800      	ldr	r0, [r0, #0]
 800c54c:	6800      	ldr	r0, [r0, #0]
 800c54e:	f380 8808 	msr	MSP, r0
 800c552:	f04f 0000 	mov.w	r0, #0
 800c556:	f380 8814 	msr	CONTROL, r0
 800c55a:	b662      	cpsie	i
 800c55c:	b661      	cpsie	f
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	df00      	svc	0
 800c568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c56a:	bf00      	nop
 800c56c:	e000ed08 	.word	0xe000ed08

0800c570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c576:	4b47      	ldr	r3, [pc, #284]	@ (800c694 <xPortStartScheduler+0x124>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a47      	ldr	r2, [pc, #284]	@ (800c698 <xPortStartScheduler+0x128>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d10b      	bne.n	800c598 <xPortStartScheduler+0x28>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	613b      	str	r3, [r7, #16]
}
 800c592:	bf00      	nop
 800c594:	bf00      	nop
 800c596:	e7fd      	b.n	800c594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c598:	4b3e      	ldr	r3, [pc, #248]	@ (800c694 <xPortStartScheduler+0x124>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a3f      	ldr	r2, [pc, #252]	@ (800c69c <xPortStartScheduler+0x12c>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d10b      	bne.n	800c5ba <xPortStartScheduler+0x4a>
	__asm volatile
 800c5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	60fb      	str	r3, [r7, #12]
}
 800c5b4:	bf00      	nop
 800c5b6:	bf00      	nop
 800c5b8:	e7fd      	b.n	800c5b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5ba:	4b39      	ldr	r3, [pc, #228]	@ (800c6a0 <xPortStartScheduler+0x130>)
 800c5bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	22ff      	movs	r2, #255	@ 0xff
 800c5ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c5d4:	78fb      	ldrb	r3, [r7, #3]
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	4b31      	ldr	r3, [pc, #196]	@ (800c6a4 <xPortStartScheduler+0x134>)
 800c5e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5e2:	4b31      	ldr	r3, [pc, #196]	@ (800c6a8 <xPortStartScheduler+0x138>)
 800c5e4:	2207      	movs	r2, #7
 800c5e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5e8:	e009      	b.n	800c5fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c5ea:	4b2f      	ldr	r3, [pc, #188]	@ (800c6a8 <xPortStartScheduler+0x138>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	4a2d      	ldr	r2, [pc, #180]	@ (800c6a8 <xPortStartScheduler+0x138>)
 800c5f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5f4:	78fb      	ldrb	r3, [r7, #3]
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5fe:	78fb      	ldrb	r3, [r7, #3]
 800c600:	b2db      	uxtb	r3, r3
 800c602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c606:	2b80      	cmp	r3, #128	@ 0x80
 800c608:	d0ef      	beq.n	800c5ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c60a:	4b27      	ldr	r3, [pc, #156]	@ (800c6a8 <xPortStartScheduler+0x138>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f1c3 0307 	rsb	r3, r3, #7
 800c612:	2b04      	cmp	r3, #4
 800c614:	d00b      	beq.n	800c62e <xPortStartScheduler+0xbe>
	__asm volatile
 800c616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	60bb      	str	r3, [r7, #8]
}
 800c628:	bf00      	nop
 800c62a:	bf00      	nop
 800c62c:	e7fd      	b.n	800c62a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c62e:	4b1e      	ldr	r3, [pc, #120]	@ (800c6a8 <xPortStartScheduler+0x138>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	021b      	lsls	r3, r3, #8
 800c634:	4a1c      	ldr	r2, [pc, #112]	@ (800c6a8 <xPortStartScheduler+0x138>)
 800c636:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c638:	4b1b      	ldr	r3, [pc, #108]	@ (800c6a8 <xPortStartScheduler+0x138>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c640:	4a19      	ldr	r2, [pc, #100]	@ (800c6a8 <xPortStartScheduler+0x138>)
 800c642:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	b2da      	uxtb	r2, r3
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c64c:	4b17      	ldr	r3, [pc, #92]	@ (800c6ac <xPortStartScheduler+0x13c>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a16      	ldr	r2, [pc, #88]	@ (800c6ac <xPortStartScheduler+0x13c>)
 800c652:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c656:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c658:	4b14      	ldr	r3, [pc, #80]	@ (800c6ac <xPortStartScheduler+0x13c>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a13      	ldr	r2, [pc, #76]	@ (800c6ac <xPortStartScheduler+0x13c>)
 800c65e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c662:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c664:	f000 f8da 	bl	800c81c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c668:	4b11      	ldr	r3, [pc, #68]	@ (800c6b0 <xPortStartScheduler+0x140>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c66e:	f000 f8f9 	bl	800c864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c672:	4b10      	ldr	r3, [pc, #64]	@ (800c6b4 <xPortStartScheduler+0x144>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a0f      	ldr	r2, [pc, #60]	@ (800c6b4 <xPortStartScheduler+0x144>)
 800c678:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c67c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c67e:	f7ff ff63 	bl	800c548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c682:	f7fe ff3b 	bl	800b4fc <vTaskSwitchContext>
	prvTaskExitError();
 800c686:	f7ff ff19 	bl	800c4bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3718      	adds	r7, #24
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	e000ed00 	.word	0xe000ed00
 800c698:	410fc271 	.word	0x410fc271
 800c69c:	410fc270 	.word	0x410fc270
 800c6a0:	e000e400 	.word	0xe000e400
 800c6a4:	2000243c 	.word	0x2000243c
 800c6a8:	20002440 	.word	0x20002440
 800c6ac:	e000ed20 	.word	0xe000ed20
 800c6b0:	2000004c 	.word	0x2000004c
 800c6b4:	e000ef34 	.word	0xe000ef34

0800c6b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	607b      	str	r3, [r7, #4]
}
 800c6d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c6d2:	4b10      	ldr	r3, [pc, #64]	@ (800c714 <vPortEnterCritical+0x5c>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	4a0e      	ldr	r2, [pc, #56]	@ (800c714 <vPortEnterCritical+0x5c>)
 800c6da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c714 <vPortEnterCritical+0x5c>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d110      	bne.n	800c706 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c718 <vPortEnterCritical+0x60>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00b      	beq.n	800c706 <vPortEnterCritical+0x4e>
	__asm volatile
 800c6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f2:	f383 8811 	msr	BASEPRI, r3
 800c6f6:	f3bf 8f6f 	isb	sy
 800c6fa:	f3bf 8f4f 	dsb	sy
 800c6fe:	603b      	str	r3, [r7, #0]
}
 800c700:	bf00      	nop
 800c702:	bf00      	nop
 800c704:	e7fd      	b.n	800c702 <vPortEnterCritical+0x4a>
	}
}
 800c706:	bf00      	nop
 800c708:	370c      	adds	r7, #12
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	2000004c 	.word	0x2000004c
 800c718:	e000ed04 	.word	0xe000ed04

0800c71c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c722:	4b12      	ldr	r3, [pc, #72]	@ (800c76c <vPortExitCritical+0x50>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10b      	bne.n	800c742 <vPortExitCritical+0x26>
	__asm volatile
 800c72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72e:	f383 8811 	msr	BASEPRI, r3
 800c732:	f3bf 8f6f 	isb	sy
 800c736:	f3bf 8f4f 	dsb	sy
 800c73a:	607b      	str	r3, [r7, #4]
}
 800c73c:	bf00      	nop
 800c73e:	bf00      	nop
 800c740:	e7fd      	b.n	800c73e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c742:	4b0a      	ldr	r3, [pc, #40]	@ (800c76c <vPortExitCritical+0x50>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	3b01      	subs	r3, #1
 800c748:	4a08      	ldr	r2, [pc, #32]	@ (800c76c <vPortExitCritical+0x50>)
 800c74a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c74c:	4b07      	ldr	r3, [pc, #28]	@ (800c76c <vPortExitCritical+0x50>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d105      	bne.n	800c760 <vPortExitCritical+0x44>
 800c754:	2300      	movs	r3, #0
 800c756:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	f383 8811 	msr	BASEPRI, r3
}
 800c75e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	2000004c 	.word	0x2000004c

0800c770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c770:	f3ef 8009 	mrs	r0, PSP
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	4b15      	ldr	r3, [pc, #84]	@ (800c7d0 <pxCurrentTCBConst>)
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	f01e 0f10 	tst.w	lr, #16
 800c780:	bf08      	it	eq
 800c782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78a:	6010      	str	r0, [r2, #0]
 800c78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c790:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c794:	f380 8811 	msr	BASEPRI, r0
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f7fe feac 	bl	800b4fc <vTaskSwitchContext>
 800c7a4:	f04f 0000 	mov.w	r0, #0
 800c7a8:	f380 8811 	msr	BASEPRI, r0
 800c7ac:	bc09      	pop	{r0, r3}
 800c7ae:	6819      	ldr	r1, [r3, #0]
 800c7b0:	6808      	ldr	r0, [r1, #0]
 800c7b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b6:	f01e 0f10 	tst.w	lr, #16
 800c7ba:	bf08      	it	eq
 800c7bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c7c0:	f380 8809 	msr	PSP, r0
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	f3af 8000 	nop.w

0800c7d0 <pxCurrentTCBConst>:
 800c7d0:	20001e10 	.word	0x20001e10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c7d4:	bf00      	nop
 800c7d6:	bf00      	nop

0800c7d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	607b      	str	r3, [r7, #4]
}
 800c7f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7f2:	f7fe fdc9 	bl	800b388 <xTaskIncrementTick>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7fc:	4b06      	ldr	r3, [pc, #24]	@ (800c818 <xPortSysTickHandler+0x40>)
 800c7fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	2300      	movs	r3, #0
 800c806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	f383 8811 	msr	BASEPRI, r3
}
 800c80e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c810:	bf00      	nop
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	e000ed04 	.word	0xe000ed04

0800c81c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c81c:	b480      	push	{r7}
 800c81e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c820:	4b0b      	ldr	r3, [pc, #44]	@ (800c850 <vPortSetupTimerInterrupt+0x34>)
 800c822:	2200      	movs	r2, #0
 800c824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c826:	4b0b      	ldr	r3, [pc, #44]	@ (800c854 <vPortSetupTimerInterrupt+0x38>)
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c82c:	4b0a      	ldr	r3, [pc, #40]	@ (800c858 <vPortSetupTimerInterrupt+0x3c>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a0a      	ldr	r2, [pc, #40]	@ (800c85c <vPortSetupTimerInterrupt+0x40>)
 800c832:	fba2 2303 	umull	r2, r3, r2, r3
 800c836:	099b      	lsrs	r3, r3, #6
 800c838:	4a09      	ldr	r2, [pc, #36]	@ (800c860 <vPortSetupTimerInterrupt+0x44>)
 800c83a:	3b01      	subs	r3, #1
 800c83c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c83e:	4b04      	ldr	r3, [pc, #16]	@ (800c850 <vPortSetupTimerInterrupt+0x34>)
 800c840:	2207      	movs	r2, #7
 800c842:	601a      	str	r2, [r3, #0]
}
 800c844:	bf00      	nop
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	e000e010 	.word	0xe000e010
 800c854:	e000e018 	.word	0xe000e018
 800c858:	2000000c 	.word	0x2000000c
 800c85c:	10624dd3 	.word	0x10624dd3
 800c860:	e000e014 	.word	0xe000e014

0800c864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c864:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c874 <vPortEnableVFP+0x10>
 800c868:	6801      	ldr	r1, [r0, #0]
 800c86a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c86e:	6001      	str	r1, [r0, #0]
 800c870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c872:	bf00      	nop
 800c874:	e000ed88 	.word	0xe000ed88

0800c878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c87e:	f3ef 8305 	mrs	r3, IPSR
 800c882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2b0f      	cmp	r3, #15
 800c888:	d915      	bls.n	800c8b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c88a:	4a18      	ldr	r2, [pc, #96]	@ (800c8ec <vPortValidateInterruptPriority+0x74>)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	4413      	add	r3, r2
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c894:	4b16      	ldr	r3, [pc, #88]	@ (800c8f0 <vPortValidateInterruptPriority+0x78>)
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	7afa      	ldrb	r2, [r7, #11]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d20b      	bcs.n	800c8b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	607b      	str	r3, [r7, #4]
}
 800c8b0:	bf00      	nop
 800c8b2:	bf00      	nop
 800c8b4:	e7fd      	b.n	800c8b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c8b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c8f4 <vPortValidateInterruptPriority+0x7c>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c8be:	4b0e      	ldr	r3, [pc, #56]	@ (800c8f8 <vPortValidateInterruptPriority+0x80>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d90b      	bls.n	800c8de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ca:	f383 8811 	msr	BASEPRI, r3
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	603b      	str	r3, [r7, #0]
}
 800c8d8:	bf00      	nop
 800c8da:	bf00      	nop
 800c8dc:	e7fd      	b.n	800c8da <vPortValidateInterruptPriority+0x62>
	}
 800c8de:	bf00      	nop
 800c8e0:	3714      	adds	r7, #20
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	e000e3f0 	.word	0xe000e3f0
 800c8f0:	2000243c 	.word	0x2000243c
 800c8f4:	e000ed0c 	.word	0xe000ed0c
 800c8f8:	20002440 	.word	0x20002440

0800c8fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b08a      	sub	sp, #40	@ 0x28
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c904:	2300      	movs	r3, #0
 800c906:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c908:	f7fe fc82 	bl	800b210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c90c:	4b5c      	ldr	r3, [pc, #368]	@ (800ca80 <pvPortMalloc+0x184>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d101      	bne.n	800c918 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c914:	f000 f924 	bl	800cb60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c918:	4b5a      	ldr	r3, [pc, #360]	@ (800ca84 <pvPortMalloc+0x188>)
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4013      	ands	r3, r2
 800c920:	2b00      	cmp	r3, #0
 800c922:	f040 8095 	bne.w	800ca50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d01e      	beq.n	800c96a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c92c:	2208      	movs	r2, #8
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	4413      	add	r3, r2
 800c932:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f003 0307 	and.w	r3, r3, #7
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d015      	beq.n	800c96a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f023 0307 	bic.w	r3, r3, #7
 800c944:	3308      	adds	r3, #8
 800c946:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f003 0307 	and.w	r3, r3, #7
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00b      	beq.n	800c96a <pvPortMalloc+0x6e>
	__asm volatile
 800c952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c956:	f383 8811 	msr	BASEPRI, r3
 800c95a:	f3bf 8f6f 	isb	sy
 800c95e:	f3bf 8f4f 	dsb	sy
 800c962:	617b      	str	r3, [r7, #20]
}
 800c964:	bf00      	nop
 800c966:	bf00      	nop
 800c968:	e7fd      	b.n	800c966 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d06f      	beq.n	800ca50 <pvPortMalloc+0x154>
 800c970:	4b45      	ldr	r3, [pc, #276]	@ (800ca88 <pvPortMalloc+0x18c>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	429a      	cmp	r2, r3
 800c978:	d86a      	bhi.n	800ca50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c97a:	4b44      	ldr	r3, [pc, #272]	@ (800ca8c <pvPortMalloc+0x190>)
 800c97c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c97e:	4b43      	ldr	r3, [pc, #268]	@ (800ca8c <pvPortMalloc+0x190>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c984:	e004      	b.n	800c990 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c988:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	429a      	cmp	r2, r3
 800c998:	d903      	bls.n	800c9a2 <pvPortMalloc+0xa6>
 800c99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1f1      	bne.n	800c986 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c9a2:	4b37      	ldr	r3, [pc, #220]	@ (800ca80 <pvPortMalloc+0x184>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d051      	beq.n	800ca50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c9ac:	6a3b      	ldr	r3, [r7, #32]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2208      	movs	r2, #8
 800c9b2:	4413      	add	r3, r2
 800c9b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	6a3b      	ldr	r3, [r7, #32]
 800c9bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c0:	685a      	ldr	r2, [r3, #4]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	1ad2      	subs	r2, r2, r3
 800c9c6:	2308      	movs	r3, #8
 800c9c8:	005b      	lsls	r3, r3, #1
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d920      	bls.n	800ca10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c9ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	f003 0307 	and.w	r3, r3, #7
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00b      	beq.n	800c9f8 <pvPortMalloc+0xfc>
	__asm volatile
 800c9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e4:	f383 8811 	msr	BASEPRI, r3
 800c9e8:	f3bf 8f6f 	isb	sy
 800c9ec:	f3bf 8f4f 	dsb	sy
 800c9f0:	613b      	str	r3, [r7, #16]
}
 800c9f2:	bf00      	nop
 800c9f4:	bf00      	nop
 800c9f6:	e7fd      	b.n	800c9f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	1ad2      	subs	r2, r2, r3
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca0a:	69b8      	ldr	r0, [r7, #24]
 800ca0c:	f000 f90a 	bl	800cc24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca10:	4b1d      	ldr	r3, [pc, #116]	@ (800ca88 <pvPortMalloc+0x18c>)
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	1ad3      	subs	r3, r2, r3
 800ca1a:	4a1b      	ldr	r2, [pc, #108]	@ (800ca88 <pvPortMalloc+0x18c>)
 800ca1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ca88 <pvPortMalloc+0x18c>)
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	4b1b      	ldr	r3, [pc, #108]	@ (800ca90 <pvPortMalloc+0x194>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d203      	bcs.n	800ca32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca2a:	4b17      	ldr	r3, [pc, #92]	@ (800ca88 <pvPortMalloc+0x18c>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a18      	ldr	r2, [pc, #96]	@ (800ca90 <pvPortMalloc+0x194>)
 800ca30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca34:	685a      	ldr	r2, [r3, #4]
 800ca36:	4b13      	ldr	r3, [pc, #76]	@ (800ca84 <pvPortMalloc+0x188>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	431a      	orrs	r2, r3
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca42:	2200      	movs	r2, #0
 800ca44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca46:	4b13      	ldr	r3, [pc, #76]	@ (800ca94 <pvPortMalloc+0x198>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	4a11      	ldr	r2, [pc, #68]	@ (800ca94 <pvPortMalloc+0x198>)
 800ca4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca50:	f7fe fbec 	bl	800b22c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	f003 0307 	and.w	r3, r3, #7
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00b      	beq.n	800ca76 <pvPortMalloc+0x17a>
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	60fb      	str	r3, [r7, #12]
}
 800ca70:	bf00      	nop
 800ca72:	bf00      	nop
 800ca74:	e7fd      	b.n	800ca72 <pvPortMalloc+0x176>
	return pvReturn;
 800ca76:	69fb      	ldr	r3, [r7, #28]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3728      	adds	r7, #40	@ 0x28
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	20003004 	.word	0x20003004
 800ca84:	20003018 	.word	0x20003018
 800ca88:	20003008 	.word	0x20003008
 800ca8c:	20002ffc 	.word	0x20002ffc
 800ca90:	2000300c 	.word	0x2000300c
 800ca94:	20003010 	.word	0x20003010

0800ca98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d04f      	beq.n	800cb4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800caaa:	2308      	movs	r3, #8
 800caac:	425b      	negs	r3, r3
 800caae:	697a      	ldr	r2, [r7, #20]
 800cab0:	4413      	add	r3, r2
 800cab2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	685a      	ldr	r2, [r3, #4]
 800cabc:	4b25      	ldr	r3, [pc, #148]	@ (800cb54 <vPortFree+0xbc>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4013      	ands	r3, r2
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10b      	bne.n	800cade <vPortFree+0x46>
	__asm volatile
 800cac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caca:	f383 8811 	msr	BASEPRI, r3
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f3bf 8f4f 	dsb	sy
 800cad6:	60fb      	str	r3, [r7, #12]
}
 800cad8:	bf00      	nop
 800cada:	bf00      	nop
 800cadc:	e7fd      	b.n	800cada <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00b      	beq.n	800cafe <vPortFree+0x66>
	__asm volatile
 800cae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caea:	f383 8811 	msr	BASEPRI, r3
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	60bb      	str	r3, [r7, #8]
}
 800caf8:	bf00      	nop
 800cafa:	bf00      	nop
 800cafc:	e7fd      	b.n	800cafa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	685a      	ldr	r2, [r3, #4]
 800cb02:	4b14      	ldr	r3, [pc, #80]	@ (800cb54 <vPortFree+0xbc>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4013      	ands	r3, r2
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d01e      	beq.n	800cb4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d11a      	bne.n	800cb4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	4b0e      	ldr	r3, [pc, #56]	@ (800cb54 <vPortFree+0xbc>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	43db      	mvns	r3, r3
 800cb1e:	401a      	ands	r2, r3
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb24:	f7fe fb74 	bl	800b210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	685a      	ldr	r2, [r3, #4]
 800cb2c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb58 <vPortFree+0xc0>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4413      	add	r3, r2
 800cb32:	4a09      	ldr	r2, [pc, #36]	@ (800cb58 <vPortFree+0xc0>)
 800cb34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb36:	6938      	ldr	r0, [r7, #16]
 800cb38:	f000 f874 	bl	800cc24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cb3c:	4b07      	ldr	r3, [pc, #28]	@ (800cb5c <vPortFree+0xc4>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	3301      	adds	r3, #1
 800cb42:	4a06      	ldr	r2, [pc, #24]	@ (800cb5c <vPortFree+0xc4>)
 800cb44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb46:	f7fe fb71 	bl	800b22c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb4a:	bf00      	nop
 800cb4c:	3718      	adds	r7, #24
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	20003018 	.word	0x20003018
 800cb58:	20003008 	.word	0x20003008
 800cb5c:	20003014 	.word	0x20003014

0800cb60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb66:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800cb6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb6c:	4b27      	ldr	r3, [pc, #156]	@ (800cc0c <prvHeapInit+0xac>)
 800cb6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f003 0307 	and.w	r3, r3, #7
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00c      	beq.n	800cb94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	3307      	adds	r3, #7
 800cb7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f023 0307 	bic.w	r3, r3, #7
 800cb86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	1ad3      	subs	r3, r2, r3
 800cb8e:	4a1f      	ldr	r2, [pc, #124]	@ (800cc0c <prvHeapInit+0xac>)
 800cb90:	4413      	add	r3, r2
 800cb92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb98:	4a1d      	ldr	r2, [pc, #116]	@ (800cc10 <prvHeapInit+0xb0>)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb9e:	4b1c      	ldr	r3, [pc, #112]	@ (800cc10 <prvHeapInit+0xb0>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	68ba      	ldr	r2, [r7, #8]
 800cba8:	4413      	add	r3, r2
 800cbaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cbac:	2208      	movs	r2, #8
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	1a9b      	subs	r3, r3, r2
 800cbb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f023 0307 	bic.w	r3, r3, #7
 800cbba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	4a15      	ldr	r2, [pc, #84]	@ (800cc14 <prvHeapInit+0xb4>)
 800cbc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cbc2:	4b14      	ldr	r3, [pc, #80]	@ (800cc14 <prvHeapInit+0xb4>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cbca:	4b12      	ldr	r3, [pc, #72]	@ (800cc14 <prvHeapInit+0xb4>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	1ad2      	subs	r2, r2, r3
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cbe0:	4b0c      	ldr	r3, [pc, #48]	@ (800cc14 <prvHeapInit+0xb4>)
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	4a0a      	ldr	r2, [pc, #40]	@ (800cc18 <prvHeapInit+0xb8>)
 800cbee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	4a09      	ldr	r2, [pc, #36]	@ (800cc1c <prvHeapInit+0xbc>)
 800cbf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbf8:	4b09      	ldr	r3, [pc, #36]	@ (800cc20 <prvHeapInit+0xc0>)
 800cbfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cbfe:	601a      	str	r2, [r3, #0]
}
 800cc00:	bf00      	nop
 800cc02:	3714      	adds	r7, #20
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr
 800cc0c:	20002444 	.word	0x20002444
 800cc10:	20002ffc 	.word	0x20002ffc
 800cc14:	20003004 	.word	0x20003004
 800cc18:	2000300c 	.word	0x2000300c
 800cc1c:	20003008 	.word	0x20003008
 800cc20:	20003018 	.word	0x20003018

0800cc24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc24:	b480      	push	{r7}
 800cc26:	b085      	sub	sp, #20
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc2c:	4b28      	ldr	r3, [pc, #160]	@ (800ccd0 <prvInsertBlockIntoFreeList+0xac>)
 800cc2e:	60fb      	str	r3, [r7, #12]
 800cc30:	e002      	b.n	800cc38 <prvInsertBlockIntoFreeList+0x14>
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	60fb      	str	r3, [r7, #12]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d8f7      	bhi.n	800cc32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	68ba      	ldr	r2, [r7, #8]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d108      	bne.n	800cc66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	685a      	ldr	r2, [r3, #4]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	441a      	add	r2, r3
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	68ba      	ldr	r2, [r7, #8]
 800cc70:	441a      	add	r2, r3
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d118      	bne.n	800ccac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	4b15      	ldr	r3, [pc, #84]	@ (800ccd4 <prvInsertBlockIntoFreeList+0xb0>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d00d      	beq.n	800cca2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	685a      	ldr	r2, [r3, #4]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	441a      	add	r2, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	e008      	b.n	800ccb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cca2:	4b0c      	ldr	r3, [pc, #48]	@ (800ccd4 <prvInsertBlockIntoFreeList+0xb0>)
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	e003      	b.n	800ccb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d002      	beq.n	800ccc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccc2:	bf00      	nop
 800ccc4:	3714      	adds	r7, #20
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	20002ffc 	.word	0x20002ffc
 800ccd4:	20003004 	.word	0x20003004

0800ccd8 <__cvt>:
 800ccd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccdc:	ec57 6b10 	vmov	r6, r7, d0
 800cce0:	2f00      	cmp	r7, #0
 800cce2:	460c      	mov	r4, r1
 800cce4:	4619      	mov	r1, r3
 800cce6:	463b      	mov	r3, r7
 800cce8:	bfbb      	ittet	lt
 800ccea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ccee:	461f      	movlt	r7, r3
 800ccf0:	2300      	movge	r3, #0
 800ccf2:	232d      	movlt	r3, #45	@ 0x2d
 800ccf4:	700b      	strb	r3, [r1, #0]
 800ccf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ccf8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ccfc:	4691      	mov	r9, r2
 800ccfe:	f023 0820 	bic.w	r8, r3, #32
 800cd02:	bfbc      	itt	lt
 800cd04:	4632      	movlt	r2, r6
 800cd06:	4616      	movlt	r6, r2
 800cd08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cd0c:	d005      	beq.n	800cd1a <__cvt+0x42>
 800cd0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cd12:	d100      	bne.n	800cd16 <__cvt+0x3e>
 800cd14:	3401      	adds	r4, #1
 800cd16:	2102      	movs	r1, #2
 800cd18:	e000      	b.n	800cd1c <__cvt+0x44>
 800cd1a:	2103      	movs	r1, #3
 800cd1c:	ab03      	add	r3, sp, #12
 800cd1e:	9301      	str	r3, [sp, #4]
 800cd20:	ab02      	add	r3, sp, #8
 800cd22:	9300      	str	r3, [sp, #0]
 800cd24:	ec47 6b10 	vmov	d0, r6, r7
 800cd28:	4653      	mov	r3, sl
 800cd2a:	4622      	mov	r2, r4
 800cd2c:	f001 fa4c 	bl	800e1c8 <_dtoa_r>
 800cd30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cd34:	4605      	mov	r5, r0
 800cd36:	d119      	bne.n	800cd6c <__cvt+0x94>
 800cd38:	f019 0f01 	tst.w	r9, #1
 800cd3c:	d00e      	beq.n	800cd5c <__cvt+0x84>
 800cd3e:	eb00 0904 	add.w	r9, r0, r4
 800cd42:	2200      	movs	r2, #0
 800cd44:	2300      	movs	r3, #0
 800cd46:	4630      	mov	r0, r6
 800cd48:	4639      	mov	r1, r7
 800cd4a:	f7f3 febd 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd4e:	b108      	cbz	r0, 800cd54 <__cvt+0x7c>
 800cd50:	f8cd 900c 	str.w	r9, [sp, #12]
 800cd54:	2230      	movs	r2, #48	@ 0x30
 800cd56:	9b03      	ldr	r3, [sp, #12]
 800cd58:	454b      	cmp	r3, r9
 800cd5a:	d31e      	bcc.n	800cd9a <__cvt+0xc2>
 800cd5c:	9b03      	ldr	r3, [sp, #12]
 800cd5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd60:	1b5b      	subs	r3, r3, r5
 800cd62:	4628      	mov	r0, r5
 800cd64:	6013      	str	r3, [r2, #0]
 800cd66:	b004      	add	sp, #16
 800cd68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cd70:	eb00 0904 	add.w	r9, r0, r4
 800cd74:	d1e5      	bne.n	800cd42 <__cvt+0x6a>
 800cd76:	7803      	ldrb	r3, [r0, #0]
 800cd78:	2b30      	cmp	r3, #48	@ 0x30
 800cd7a:	d10a      	bne.n	800cd92 <__cvt+0xba>
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	2300      	movs	r3, #0
 800cd80:	4630      	mov	r0, r6
 800cd82:	4639      	mov	r1, r7
 800cd84:	f7f3 fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd88:	b918      	cbnz	r0, 800cd92 <__cvt+0xba>
 800cd8a:	f1c4 0401 	rsb	r4, r4, #1
 800cd8e:	f8ca 4000 	str.w	r4, [sl]
 800cd92:	f8da 3000 	ldr.w	r3, [sl]
 800cd96:	4499      	add	r9, r3
 800cd98:	e7d3      	b.n	800cd42 <__cvt+0x6a>
 800cd9a:	1c59      	adds	r1, r3, #1
 800cd9c:	9103      	str	r1, [sp, #12]
 800cd9e:	701a      	strb	r2, [r3, #0]
 800cda0:	e7d9      	b.n	800cd56 <__cvt+0x7e>

0800cda2 <__exponent>:
 800cda2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cda4:	2900      	cmp	r1, #0
 800cda6:	bfba      	itte	lt
 800cda8:	4249      	neglt	r1, r1
 800cdaa:	232d      	movlt	r3, #45	@ 0x2d
 800cdac:	232b      	movge	r3, #43	@ 0x2b
 800cdae:	2909      	cmp	r1, #9
 800cdb0:	7002      	strb	r2, [r0, #0]
 800cdb2:	7043      	strb	r3, [r0, #1]
 800cdb4:	dd29      	ble.n	800ce0a <__exponent+0x68>
 800cdb6:	f10d 0307 	add.w	r3, sp, #7
 800cdba:	461d      	mov	r5, r3
 800cdbc:	270a      	movs	r7, #10
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	fbb1 f6f7 	udiv	r6, r1, r7
 800cdc4:	fb07 1416 	mls	r4, r7, r6, r1
 800cdc8:	3430      	adds	r4, #48	@ 0x30
 800cdca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cdce:	460c      	mov	r4, r1
 800cdd0:	2c63      	cmp	r4, #99	@ 0x63
 800cdd2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	dcf1      	bgt.n	800cdbe <__exponent+0x1c>
 800cdda:	3130      	adds	r1, #48	@ 0x30
 800cddc:	1e94      	subs	r4, r2, #2
 800cdde:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cde2:	1c41      	adds	r1, r0, #1
 800cde4:	4623      	mov	r3, r4
 800cde6:	42ab      	cmp	r3, r5
 800cde8:	d30a      	bcc.n	800ce00 <__exponent+0x5e>
 800cdea:	f10d 0309 	add.w	r3, sp, #9
 800cdee:	1a9b      	subs	r3, r3, r2
 800cdf0:	42ac      	cmp	r4, r5
 800cdf2:	bf88      	it	hi
 800cdf4:	2300      	movhi	r3, #0
 800cdf6:	3302      	adds	r3, #2
 800cdf8:	4403      	add	r3, r0
 800cdfa:	1a18      	subs	r0, r3, r0
 800cdfc:	b003      	add	sp, #12
 800cdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce00:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ce04:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ce08:	e7ed      	b.n	800cde6 <__exponent+0x44>
 800ce0a:	2330      	movs	r3, #48	@ 0x30
 800ce0c:	3130      	adds	r1, #48	@ 0x30
 800ce0e:	7083      	strb	r3, [r0, #2]
 800ce10:	70c1      	strb	r1, [r0, #3]
 800ce12:	1d03      	adds	r3, r0, #4
 800ce14:	e7f1      	b.n	800cdfa <__exponent+0x58>
	...

0800ce18 <_printf_float>:
 800ce18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1c:	b08d      	sub	sp, #52	@ 0x34
 800ce1e:	460c      	mov	r4, r1
 800ce20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ce24:	4616      	mov	r6, r2
 800ce26:	461f      	mov	r7, r3
 800ce28:	4605      	mov	r5, r0
 800ce2a:	f001 f89b 	bl	800df64 <_localeconv_r>
 800ce2e:	6803      	ldr	r3, [r0, #0]
 800ce30:	9304      	str	r3, [sp, #16]
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7f3 fa1c 	bl	8000270 <strlen>
 800ce38:	2300      	movs	r3, #0
 800ce3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ce40:	9005      	str	r0, [sp, #20]
 800ce42:	3307      	adds	r3, #7
 800ce44:	f023 0307 	bic.w	r3, r3, #7
 800ce48:	f103 0208 	add.w	r2, r3, #8
 800ce4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ce50:	f8d4 b000 	ldr.w	fp, [r4]
 800ce54:	f8c8 2000 	str.w	r2, [r8]
 800ce58:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ce60:	9307      	str	r3, [sp, #28]
 800ce62:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ce6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce6e:	4b9c      	ldr	r3, [pc, #624]	@ (800d0e0 <_printf_float+0x2c8>)
 800ce70:	f04f 32ff 	mov.w	r2, #4294967295
 800ce74:	f7f3 fe5a 	bl	8000b2c <__aeabi_dcmpun>
 800ce78:	bb70      	cbnz	r0, 800ced8 <_printf_float+0xc0>
 800ce7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce7e:	4b98      	ldr	r3, [pc, #608]	@ (800d0e0 <_printf_float+0x2c8>)
 800ce80:	f04f 32ff 	mov.w	r2, #4294967295
 800ce84:	f7f3 fe34 	bl	8000af0 <__aeabi_dcmple>
 800ce88:	bb30      	cbnz	r0, 800ced8 <_printf_float+0xc0>
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	4640      	mov	r0, r8
 800ce90:	4649      	mov	r1, r9
 800ce92:	f7f3 fe23 	bl	8000adc <__aeabi_dcmplt>
 800ce96:	b110      	cbz	r0, 800ce9e <_printf_float+0x86>
 800ce98:	232d      	movs	r3, #45	@ 0x2d
 800ce9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce9e:	4a91      	ldr	r2, [pc, #580]	@ (800d0e4 <_printf_float+0x2cc>)
 800cea0:	4b91      	ldr	r3, [pc, #580]	@ (800d0e8 <_printf_float+0x2d0>)
 800cea2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cea6:	bf94      	ite	ls
 800cea8:	4690      	movls	r8, r2
 800ceaa:	4698      	movhi	r8, r3
 800ceac:	2303      	movs	r3, #3
 800ceae:	6123      	str	r3, [r4, #16]
 800ceb0:	f02b 0304 	bic.w	r3, fp, #4
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	f04f 0900 	mov.w	r9, #0
 800ceba:	9700      	str	r7, [sp, #0]
 800cebc:	4633      	mov	r3, r6
 800cebe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cec0:	4621      	mov	r1, r4
 800cec2:	4628      	mov	r0, r5
 800cec4:	f000 f9d2 	bl	800d26c <_printf_common>
 800cec8:	3001      	adds	r0, #1
 800ceca:	f040 808d 	bne.w	800cfe8 <_printf_float+0x1d0>
 800cece:	f04f 30ff 	mov.w	r0, #4294967295
 800ced2:	b00d      	add	sp, #52	@ 0x34
 800ced4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced8:	4642      	mov	r2, r8
 800ceda:	464b      	mov	r3, r9
 800cedc:	4640      	mov	r0, r8
 800cede:	4649      	mov	r1, r9
 800cee0:	f7f3 fe24 	bl	8000b2c <__aeabi_dcmpun>
 800cee4:	b140      	cbz	r0, 800cef8 <_printf_float+0xe0>
 800cee6:	464b      	mov	r3, r9
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	bfbc      	itt	lt
 800ceec:	232d      	movlt	r3, #45	@ 0x2d
 800ceee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cef2:	4a7e      	ldr	r2, [pc, #504]	@ (800d0ec <_printf_float+0x2d4>)
 800cef4:	4b7e      	ldr	r3, [pc, #504]	@ (800d0f0 <_printf_float+0x2d8>)
 800cef6:	e7d4      	b.n	800cea2 <_printf_float+0x8a>
 800cef8:	6863      	ldr	r3, [r4, #4]
 800cefa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cefe:	9206      	str	r2, [sp, #24]
 800cf00:	1c5a      	adds	r2, r3, #1
 800cf02:	d13b      	bne.n	800cf7c <_printf_float+0x164>
 800cf04:	2306      	movs	r3, #6
 800cf06:	6063      	str	r3, [r4, #4]
 800cf08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	6022      	str	r2, [r4, #0]
 800cf10:	9303      	str	r3, [sp, #12]
 800cf12:	ab0a      	add	r3, sp, #40	@ 0x28
 800cf14:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cf18:	ab09      	add	r3, sp, #36	@ 0x24
 800cf1a:	9300      	str	r3, [sp, #0]
 800cf1c:	6861      	ldr	r1, [r4, #4]
 800cf1e:	ec49 8b10 	vmov	d0, r8, r9
 800cf22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cf26:	4628      	mov	r0, r5
 800cf28:	f7ff fed6 	bl	800ccd8 <__cvt>
 800cf2c:	9b06      	ldr	r3, [sp, #24]
 800cf2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf30:	2b47      	cmp	r3, #71	@ 0x47
 800cf32:	4680      	mov	r8, r0
 800cf34:	d129      	bne.n	800cf8a <_printf_float+0x172>
 800cf36:	1cc8      	adds	r0, r1, #3
 800cf38:	db02      	blt.n	800cf40 <_printf_float+0x128>
 800cf3a:	6863      	ldr	r3, [r4, #4]
 800cf3c:	4299      	cmp	r1, r3
 800cf3e:	dd41      	ble.n	800cfc4 <_printf_float+0x1ac>
 800cf40:	f1aa 0a02 	sub.w	sl, sl, #2
 800cf44:	fa5f fa8a 	uxtb.w	sl, sl
 800cf48:	3901      	subs	r1, #1
 800cf4a:	4652      	mov	r2, sl
 800cf4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cf50:	9109      	str	r1, [sp, #36]	@ 0x24
 800cf52:	f7ff ff26 	bl	800cda2 <__exponent>
 800cf56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf58:	1813      	adds	r3, r2, r0
 800cf5a:	2a01      	cmp	r2, #1
 800cf5c:	4681      	mov	r9, r0
 800cf5e:	6123      	str	r3, [r4, #16]
 800cf60:	dc02      	bgt.n	800cf68 <_printf_float+0x150>
 800cf62:	6822      	ldr	r2, [r4, #0]
 800cf64:	07d2      	lsls	r2, r2, #31
 800cf66:	d501      	bpl.n	800cf6c <_printf_float+0x154>
 800cf68:	3301      	adds	r3, #1
 800cf6a:	6123      	str	r3, [r4, #16]
 800cf6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d0a2      	beq.n	800ceba <_printf_float+0xa2>
 800cf74:	232d      	movs	r3, #45	@ 0x2d
 800cf76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf7a:	e79e      	b.n	800ceba <_printf_float+0xa2>
 800cf7c:	9a06      	ldr	r2, [sp, #24]
 800cf7e:	2a47      	cmp	r2, #71	@ 0x47
 800cf80:	d1c2      	bne.n	800cf08 <_printf_float+0xf0>
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1c0      	bne.n	800cf08 <_printf_float+0xf0>
 800cf86:	2301      	movs	r3, #1
 800cf88:	e7bd      	b.n	800cf06 <_printf_float+0xee>
 800cf8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cf8e:	d9db      	bls.n	800cf48 <_printf_float+0x130>
 800cf90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cf94:	d118      	bne.n	800cfc8 <_printf_float+0x1b0>
 800cf96:	2900      	cmp	r1, #0
 800cf98:	6863      	ldr	r3, [r4, #4]
 800cf9a:	dd0b      	ble.n	800cfb4 <_printf_float+0x19c>
 800cf9c:	6121      	str	r1, [r4, #16]
 800cf9e:	b913      	cbnz	r3, 800cfa6 <_printf_float+0x18e>
 800cfa0:	6822      	ldr	r2, [r4, #0]
 800cfa2:	07d0      	lsls	r0, r2, #31
 800cfa4:	d502      	bpl.n	800cfac <_printf_float+0x194>
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	440b      	add	r3, r1
 800cfaa:	6123      	str	r3, [r4, #16]
 800cfac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cfae:	f04f 0900 	mov.w	r9, #0
 800cfb2:	e7db      	b.n	800cf6c <_printf_float+0x154>
 800cfb4:	b913      	cbnz	r3, 800cfbc <_printf_float+0x1a4>
 800cfb6:	6822      	ldr	r2, [r4, #0]
 800cfb8:	07d2      	lsls	r2, r2, #31
 800cfba:	d501      	bpl.n	800cfc0 <_printf_float+0x1a8>
 800cfbc:	3302      	adds	r3, #2
 800cfbe:	e7f4      	b.n	800cfaa <_printf_float+0x192>
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e7f2      	b.n	800cfaa <_printf_float+0x192>
 800cfc4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cfc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfca:	4299      	cmp	r1, r3
 800cfcc:	db05      	blt.n	800cfda <_printf_float+0x1c2>
 800cfce:	6823      	ldr	r3, [r4, #0]
 800cfd0:	6121      	str	r1, [r4, #16]
 800cfd2:	07d8      	lsls	r0, r3, #31
 800cfd4:	d5ea      	bpl.n	800cfac <_printf_float+0x194>
 800cfd6:	1c4b      	adds	r3, r1, #1
 800cfd8:	e7e7      	b.n	800cfaa <_printf_float+0x192>
 800cfda:	2900      	cmp	r1, #0
 800cfdc:	bfd4      	ite	le
 800cfde:	f1c1 0202 	rsble	r2, r1, #2
 800cfe2:	2201      	movgt	r2, #1
 800cfe4:	4413      	add	r3, r2
 800cfe6:	e7e0      	b.n	800cfaa <_printf_float+0x192>
 800cfe8:	6823      	ldr	r3, [r4, #0]
 800cfea:	055a      	lsls	r2, r3, #21
 800cfec:	d407      	bmi.n	800cffe <_printf_float+0x1e6>
 800cfee:	6923      	ldr	r3, [r4, #16]
 800cff0:	4642      	mov	r2, r8
 800cff2:	4631      	mov	r1, r6
 800cff4:	4628      	mov	r0, r5
 800cff6:	47b8      	blx	r7
 800cff8:	3001      	adds	r0, #1
 800cffa:	d12b      	bne.n	800d054 <_printf_float+0x23c>
 800cffc:	e767      	b.n	800cece <_printf_float+0xb6>
 800cffe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d002:	f240 80dd 	bls.w	800d1c0 <_printf_float+0x3a8>
 800d006:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d00a:	2200      	movs	r2, #0
 800d00c:	2300      	movs	r3, #0
 800d00e:	f7f3 fd5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d012:	2800      	cmp	r0, #0
 800d014:	d033      	beq.n	800d07e <_printf_float+0x266>
 800d016:	4a37      	ldr	r2, [pc, #220]	@ (800d0f4 <_printf_float+0x2dc>)
 800d018:	2301      	movs	r3, #1
 800d01a:	4631      	mov	r1, r6
 800d01c:	4628      	mov	r0, r5
 800d01e:	47b8      	blx	r7
 800d020:	3001      	adds	r0, #1
 800d022:	f43f af54 	beq.w	800cece <_printf_float+0xb6>
 800d026:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d02a:	4543      	cmp	r3, r8
 800d02c:	db02      	blt.n	800d034 <_printf_float+0x21c>
 800d02e:	6823      	ldr	r3, [r4, #0]
 800d030:	07d8      	lsls	r0, r3, #31
 800d032:	d50f      	bpl.n	800d054 <_printf_float+0x23c>
 800d034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d038:	4631      	mov	r1, r6
 800d03a:	4628      	mov	r0, r5
 800d03c:	47b8      	blx	r7
 800d03e:	3001      	adds	r0, #1
 800d040:	f43f af45 	beq.w	800cece <_printf_float+0xb6>
 800d044:	f04f 0900 	mov.w	r9, #0
 800d048:	f108 38ff 	add.w	r8, r8, #4294967295
 800d04c:	f104 0a1a 	add.w	sl, r4, #26
 800d050:	45c8      	cmp	r8, r9
 800d052:	dc09      	bgt.n	800d068 <_printf_float+0x250>
 800d054:	6823      	ldr	r3, [r4, #0]
 800d056:	079b      	lsls	r3, r3, #30
 800d058:	f100 8103 	bmi.w	800d262 <_printf_float+0x44a>
 800d05c:	68e0      	ldr	r0, [r4, #12]
 800d05e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d060:	4298      	cmp	r0, r3
 800d062:	bfb8      	it	lt
 800d064:	4618      	movlt	r0, r3
 800d066:	e734      	b.n	800ced2 <_printf_float+0xba>
 800d068:	2301      	movs	r3, #1
 800d06a:	4652      	mov	r2, sl
 800d06c:	4631      	mov	r1, r6
 800d06e:	4628      	mov	r0, r5
 800d070:	47b8      	blx	r7
 800d072:	3001      	adds	r0, #1
 800d074:	f43f af2b 	beq.w	800cece <_printf_float+0xb6>
 800d078:	f109 0901 	add.w	r9, r9, #1
 800d07c:	e7e8      	b.n	800d050 <_printf_float+0x238>
 800d07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d080:	2b00      	cmp	r3, #0
 800d082:	dc39      	bgt.n	800d0f8 <_printf_float+0x2e0>
 800d084:	4a1b      	ldr	r2, [pc, #108]	@ (800d0f4 <_printf_float+0x2dc>)
 800d086:	2301      	movs	r3, #1
 800d088:	4631      	mov	r1, r6
 800d08a:	4628      	mov	r0, r5
 800d08c:	47b8      	blx	r7
 800d08e:	3001      	adds	r0, #1
 800d090:	f43f af1d 	beq.w	800cece <_printf_float+0xb6>
 800d094:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d098:	ea59 0303 	orrs.w	r3, r9, r3
 800d09c:	d102      	bne.n	800d0a4 <_printf_float+0x28c>
 800d09e:	6823      	ldr	r3, [r4, #0]
 800d0a0:	07d9      	lsls	r1, r3, #31
 800d0a2:	d5d7      	bpl.n	800d054 <_printf_float+0x23c>
 800d0a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0a8:	4631      	mov	r1, r6
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	47b8      	blx	r7
 800d0ae:	3001      	adds	r0, #1
 800d0b0:	f43f af0d 	beq.w	800cece <_printf_float+0xb6>
 800d0b4:	f04f 0a00 	mov.w	sl, #0
 800d0b8:	f104 0b1a 	add.w	fp, r4, #26
 800d0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0be:	425b      	negs	r3, r3
 800d0c0:	4553      	cmp	r3, sl
 800d0c2:	dc01      	bgt.n	800d0c8 <_printf_float+0x2b0>
 800d0c4:	464b      	mov	r3, r9
 800d0c6:	e793      	b.n	800cff0 <_printf_float+0x1d8>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	465a      	mov	r2, fp
 800d0cc:	4631      	mov	r1, r6
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	47b8      	blx	r7
 800d0d2:	3001      	adds	r0, #1
 800d0d4:	f43f aefb 	beq.w	800cece <_printf_float+0xb6>
 800d0d8:	f10a 0a01 	add.w	sl, sl, #1
 800d0dc:	e7ee      	b.n	800d0bc <_printf_float+0x2a4>
 800d0de:	bf00      	nop
 800d0e0:	7fefffff 	.word	0x7fefffff
 800d0e4:	08011e4c 	.word	0x08011e4c
 800d0e8:	08011e50 	.word	0x08011e50
 800d0ec:	08011e54 	.word	0x08011e54
 800d0f0:	08011e58 	.word	0x08011e58
 800d0f4:	08011e5c 	.word	0x08011e5c
 800d0f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d0fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d0fe:	4553      	cmp	r3, sl
 800d100:	bfa8      	it	ge
 800d102:	4653      	movge	r3, sl
 800d104:	2b00      	cmp	r3, #0
 800d106:	4699      	mov	r9, r3
 800d108:	dc36      	bgt.n	800d178 <_printf_float+0x360>
 800d10a:	f04f 0b00 	mov.w	fp, #0
 800d10e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d112:	f104 021a 	add.w	r2, r4, #26
 800d116:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d118:	9306      	str	r3, [sp, #24]
 800d11a:	eba3 0309 	sub.w	r3, r3, r9
 800d11e:	455b      	cmp	r3, fp
 800d120:	dc31      	bgt.n	800d186 <_printf_float+0x36e>
 800d122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d124:	459a      	cmp	sl, r3
 800d126:	dc3a      	bgt.n	800d19e <_printf_float+0x386>
 800d128:	6823      	ldr	r3, [r4, #0]
 800d12a:	07da      	lsls	r2, r3, #31
 800d12c:	d437      	bmi.n	800d19e <_printf_float+0x386>
 800d12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d130:	ebaa 0903 	sub.w	r9, sl, r3
 800d134:	9b06      	ldr	r3, [sp, #24]
 800d136:	ebaa 0303 	sub.w	r3, sl, r3
 800d13a:	4599      	cmp	r9, r3
 800d13c:	bfa8      	it	ge
 800d13e:	4699      	movge	r9, r3
 800d140:	f1b9 0f00 	cmp.w	r9, #0
 800d144:	dc33      	bgt.n	800d1ae <_printf_float+0x396>
 800d146:	f04f 0800 	mov.w	r8, #0
 800d14a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d14e:	f104 0b1a 	add.w	fp, r4, #26
 800d152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d154:	ebaa 0303 	sub.w	r3, sl, r3
 800d158:	eba3 0309 	sub.w	r3, r3, r9
 800d15c:	4543      	cmp	r3, r8
 800d15e:	f77f af79 	ble.w	800d054 <_printf_float+0x23c>
 800d162:	2301      	movs	r3, #1
 800d164:	465a      	mov	r2, fp
 800d166:	4631      	mov	r1, r6
 800d168:	4628      	mov	r0, r5
 800d16a:	47b8      	blx	r7
 800d16c:	3001      	adds	r0, #1
 800d16e:	f43f aeae 	beq.w	800cece <_printf_float+0xb6>
 800d172:	f108 0801 	add.w	r8, r8, #1
 800d176:	e7ec      	b.n	800d152 <_printf_float+0x33a>
 800d178:	4642      	mov	r2, r8
 800d17a:	4631      	mov	r1, r6
 800d17c:	4628      	mov	r0, r5
 800d17e:	47b8      	blx	r7
 800d180:	3001      	adds	r0, #1
 800d182:	d1c2      	bne.n	800d10a <_printf_float+0x2f2>
 800d184:	e6a3      	b.n	800cece <_printf_float+0xb6>
 800d186:	2301      	movs	r3, #1
 800d188:	4631      	mov	r1, r6
 800d18a:	4628      	mov	r0, r5
 800d18c:	9206      	str	r2, [sp, #24]
 800d18e:	47b8      	blx	r7
 800d190:	3001      	adds	r0, #1
 800d192:	f43f ae9c 	beq.w	800cece <_printf_float+0xb6>
 800d196:	9a06      	ldr	r2, [sp, #24]
 800d198:	f10b 0b01 	add.w	fp, fp, #1
 800d19c:	e7bb      	b.n	800d116 <_printf_float+0x2fe>
 800d19e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1a2:	4631      	mov	r1, r6
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	47b8      	blx	r7
 800d1a8:	3001      	adds	r0, #1
 800d1aa:	d1c0      	bne.n	800d12e <_printf_float+0x316>
 800d1ac:	e68f      	b.n	800cece <_printf_float+0xb6>
 800d1ae:	9a06      	ldr	r2, [sp, #24]
 800d1b0:	464b      	mov	r3, r9
 800d1b2:	4442      	add	r2, r8
 800d1b4:	4631      	mov	r1, r6
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	47b8      	blx	r7
 800d1ba:	3001      	adds	r0, #1
 800d1bc:	d1c3      	bne.n	800d146 <_printf_float+0x32e>
 800d1be:	e686      	b.n	800cece <_printf_float+0xb6>
 800d1c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d1c4:	f1ba 0f01 	cmp.w	sl, #1
 800d1c8:	dc01      	bgt.n	800d1ce <_printf_float+0x3b6>
 800d1ca:	07db      	lsls	r3, r3, #31
 800d1cc:	d536      	bpl.n	800d23c <_printf_float+0x424>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	4642      	mov	r2, r8
 800d1d2:	4631      	mov	r1, r6
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	47b8      	blx	r7
 800d1d8:	3001      	adds	r0, #1
 800d1da:	f43f ae78 	beq.w	800cece <_printf_float+0xb6>
 800d1de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1e2:	4631      	mov	r1, r6
 800d1e4:	4628      	mov	r0, r5
 800d1e6:	47b8      	blx	r7
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	f43f ae70 	beq.w	800cece <_printf_float+0xb6>
 800d1ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1fa:	f7f3 fc65 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1fe:	b9c0      	cbnz	r0, 800d232 <_printf_float+0x41a>
 800d200:	4653      	mov	r3, sl
 800d202:	f108 0201 	add.w	r2, r8, #1
 800d206:	4631      	mov	r1, r6
 800d208:	4628      	mov	r0, r5
 800d20a:	47b8      	blx	r7
 800d20c:	3001      	adds	r0, #1
 800d20e:	d10c      	bne.n	800d22a <_printf_float+0x412>
 800d210:	e65d      	b.n	800cece <_printf_float+0xb6>
 800d212:	2301      	movs	r3, #1
 800d214:	465a      	mov	r2, fp
 800d216:	4631      	mov	r1, r6
 800d218:	4628      	mov	r0, r5
 800d21a:	47b8      	blx	r7
 800d21c:	3001      	adds	r0, #1
 800d21e:	f43f ae56 	beq.w	800cece <_printf_float+0xb6>
 800d222:	f108 0801 	add.w	r8, r8, #1
 800d226:	45d0      	cmp	r8, sl
 800d228:	dbf3      	blt.n	800d212 <_printf_float+0x3fa>
 800d22a:	464b      	mov	r3, r9
 800d22c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d230:	e6df      	b.n	800cff2 <_printf_float+0x1da>
 800d232:	f04f 0800 	mov.w	r8, #0
 800d236:	f104 0b1a 	add.w	fp, r4, #26
 800d23a:	e7f4      	b.n	800d226 <_printf_float+0x40e>
 800d23c:	2301      	movs	r3, #1
 800d23e:	4642      	mov	r2, r8
 800d240:	e7e1      	b.n	800d206 <_printf_float+0x3ee>
 800d242:	2301      	movs	r3, #1
 800d244:	464a      	mov	r2, r9
 800d246:	4631      	mov	r1, r6
 800d248:	4628      	mov	r0, r5
 800d24a:	47b8      	blx	r7
 800d24c:	3001      	adds	r0, #1
 800d24e:	f43f ae3e 	beq.w	800cece <_printf_float+0xb6>
 800d252:	f108 0801 	add.w	r8, r8, #1
 800d256:	68e3      	ldr	r3, [r4, #12]
 800d258:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d25a:	1a5b      	subs	r3, r3, r1
 800d25c:	4543      	cmp	r3, r8
 800d25e:	dcf0      	bgt.n	800d242 <_printf_float+0x42a>
 800d260:	e6fc      	b.n	800d05c <_printf_float+0x244>
 800d262:	f04f 0800 	mov.w	r8, #0
 800d266:	f104 0919 	add.w	r9, r4, #25
 800d26a:	e7f4      	b.n	800d256 <_printf_float+0x43e>

0800d26c <_printf_common>:
 800d26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d270:	4616      	mov	r6, r2
 800d272:	4698      	mov	r8, r3
 800d274:	688a      	ldr	r2, [r1, #8]
 800d276:	690b      	ldr	r3, [r1, #16]
 800d278:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d27c:	4293      	cmp	r3, r2
 800d27e:	bfb8      	it	lt
 800d280:	4613      	movlt	r3, r2
 800d282:	6033      	str	r3, [r6, #0]
 800d284:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d288:	4607      	mov	r7, r0
 800d28a:	460c      	mov	r4, r1
 800d28c:	b10a      	cbz	r2, 800d292 <_printf_common+0x26>
 800d28e:	3301      	adds	r3, #1
 800d290:	6033      	str	r3, [r6, #0]
 800d292:	6823      	ldr	r3, [r4, #0]
 800d294:	0699      	lsls	r1, r3, #26
 800d296:	bf42      	ittt	mi
 800d298:	6833      	ldrmi	r3, [r6, #0]
 800d29a:	3302      	addmi	r3, #2
 800d29c:	6033      	strmi	r3, [r6, #0]
 800d29e:	6825      	ldr	r5, [r4, #0]
 800d2a0:	f015 0506 	ands.w	r5, r5, #6
 800d2a4:	d106      	bne.n	800d2b4 <_printf_common+0x48>
 800d2a6:	f104 0a19 	add.w	sl, r4, #25
 800d2aa:	68e3      	ldr	r3, [r4, #12]
 800d2ac:	6832      	ldr	r2, [r6, #0]
 800d2ae:	1a9b      	subs	r3, r3, r2
 800d2b0:	42ab      	cmp	r3, r5
 800d2b2:	dc26      	bgt.n	800d302 <_printf_common+0x96>
 800d2b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d2b8:	6822      	ldr	r2, [r4, #0]
 800d2ba:	3b00      	subs	r3, #0
 800d2bc:	bf18      	it	ne
 800d2be:	2301      	movne	r3, #1
 800d2c0:	0692      	lsls	r2, r2, #26
 800d2c2:	d42b      	bmi.n	800d31c <_printf_common+0xb0>
 800d2c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d2c8:	4641      	mov	r1, r8
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	47c8      	blx	r9
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	d01e      	beq.n	800d310 <_printf_common+0xa4>
 800d2d2:	6823      	ldr	r3, [r4, #0]
 800d2d4:	6922      	ldr	r2, [r4, #16]
 800d2d6:	f003 0306 	and.w	r3, r3, #6
 800d2da:	2b04      	cmp	r3, #4
 800d2dc:	bf02      	ittt	eq
 800d2de:	68e5      	ldreq	r5, [r4, #12]
 800d2e0:	6833      	ldreq	r3, [r6, #0]
 800d2e2:	1aed      	subeq	r5, r5, r3
 800d2e4:	68a3      	ldr	r3, [r4, #8]
 800d2e6:	bf0c      	ite	eq
 800d2e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2ec:	2500      	movne	r5, #0
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	bfc4      	itt	gt
 800d2f2:	1a9b      	subgt	r3, r3, r2
 800d2f4:	18ed      	addgt	r5, r5, r3
 800d2f6:	2600      	movs	r6, #0
 800d2f8:	341a      	adds	r4, #26
 800d2fa:	42b5      	cmp	r5, r6
 800d2fc:	d11a      	bne.n	800d334 <_printf_common+0xc8>
 800d2fe:	2000      	movs	r0, #0
 800d300:	e008      	b.n	800d314 <_printf_common+0xa8>
 800d302:	2301      	movs	r3, #1
 800d304:	4652      	mov	r2, sl
 800d306:	4641      	mov	r1, r8
 800d308:	4638      	mov	r0, r7
 800d30a:	47c8      	blx	r9
 800d30c:	3001      	adds	r0, #1
 800d30e:	d103      	bne.n	800d318 <_printf_common+0xac>
 800d310:	f04f 30ff 	mov.w	r0, #4294967295
 800d314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d318:	3501      	adds	r5, #1
 800d31a:	e7c6      	b.n	800d2aa <_printf_common+0x3e>
 800d31c:	18e1      	adds	r1, r4, r3
 800d31e:	1c5a      	adds	r2, r3, #1
 800d320:	2030      	movs	r0, #48	@ 0x30
 800d322:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d326:	4422      	add	r2, r4
 800d328:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d32c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d330:	3302      	adds	r3, #2
 800d332:	e7c7      	b.n	800d2c4 <_printf_common+0x58>
 800d334:	2301      	movs	r3, #1
 800d336:	4622      	mov	r2, r4
 800d338:	4641      	mov	r1, r8
 800d33a:	4638      	mov	r0, r7
 800d33c:	47c8      	blx	r9
 800d33e:	3001      	adds	r0, #1
 800d340:	d0e6      	beq.n	800d310 <_printf_common+0xa4>
 800d342:	3601      	adds	r6, #1
 800d344:	e7d9      	b.n	800d2fa <_printf_common+0x8e>
	...

0800d348 <_printf_i>:
 800d348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d34c:	7e0f      	ldrb	r7, [r1, #24]
 800d34e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d350:	2f78      	cmp	r7, #120	@ 0x78
 800d352:	4691      	mov	r9, r2
 800d354:	4680      	mov	r8, r0
 800d356:	460c      	mov	r4, r1
 800d358:	469a      	mov	sl, r3
 800d35a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d35e:	d807      	bhi.n	800d370 <_printf_i+0x28>
 800d360:	2f62      	cmp	r7, #98	@ 0x62
 800d362:	d80a      	bhi.n	800d37a <_printf_i+0x32>
 800d364:	2f00      	cmp	r7, #0
 800d366:	f000 80d2 	beq.w	800d50e <_printf_i+0x1c6>
 800d36a:	2f58      	cmp	r7, #88	@ 0x58
 800d36c:	f000 80b9 	beq.w	800d4e2 <_printf_i+0x19a>
 800d370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d374:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d378:	e03a      	b.n	800d3f0 <_printf_i+0xa8>
 800d37a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d37e:	2b15      	cmp	r3, #21
 800d380:	d8f6      	bhi.n	800d370 <_printf_i+0x28>
 800d382:	a101      	add	r1, pc, #4	@ (adr r1, 800d388 <_printf_i+0x40>)
 800d384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d388:	0800d3e1 	.word	0x0800d3e1
 800d38c:	0800d3f5 	.word	0x0800d3f5
 800d390:	0800d371 	.word	0x0800d371
 800d394:	0800d371 	.word	0x0800d371
 800d398:	0800d371 	.word	0x0800d371
 800d39c:	0800d371 	.word	0x0800d371
 800d3a0:	0800d3f5 	.word	0x0800d3f5
 800d3a4:	0800d371 	.word	0x0800d371
 800d3a8:	0800d371 	.word	0x0800d371
 800d3ac:	0800d371 	.word	0x0800d371
 800d3b0:	0800d371 	.word	0x0800d371
 800d3b4:	0800d4f5 	.word	0x0800d4f5
 800d3b8:	0800d41f 	.word	0x0800d41f
 800d3bc:	0800d4af 	.word	0x0800d4af
 800d3c0:	0800d371 	.word	0x0800d371
 800d3c4:	0800d371 	.word	0x0800d371
 800d3c8:	0800d517 	.word	0x0800d517
 800d3cc:	0800d371 	.word	0x0800d371
 800d3d0:	0800d41f 	.word	0x0800d41f
 800d3d4:	0800d371 	.word	0x0800d371
 800d3d8:	0800d371 	.word	0x0800d371
 800d3dc:	0800d4b7 	.word	0x0800d4b7
 800d3e0:	6833      	ldr	r3, [r6, #0]
 800d3e2:	1d1a      	adds	r2, r3, #4
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6032      	str	r2, [r6, #0]
 800d3e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e09d      	b.n	800d530 <_printf_i+0x1e8>
 800d3f4:	6833      	ldr	r3, [r6, #0]
 800d3f6:	6820      	ldr	r0, [r4, #0]
 800d3f8:	1d19      	adds	r1, r3, #4
 800d3fa:	6031      	str	r1, [r6, #0]
 800d3fc:	0606      	lsls	r6, r0, #24
 800d3fe:	d501      	bpl.n	800d404 <_printf_i+0xbc>
 800d400:	681d      	ldr	r5, [r3, #0]
 800d402:	e003      	b.n	800d40c <_printf_i+0xc4>
 800d404:	0645      	lsls	r5, r0, #25
 800d406:	d5fb      	bpl.n	800d400 <_printf_i+0xb8>
 800d408:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d40c:	2d00      	cmp	r5, #0
 800d40e:	da03      	bge.n	800d418 <_printf_i+0xd0>
 800d410:	232d      	movs	r3, #45	@ 0x2d
 800d412:	426d      	negs	r5, r5
 800d414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d418:	4859      	ldr	r0, [pc, #356]	@ (800d580 <_printf_i+0x238>)
 800d41a:	230a      	movs	r3, #10
 800d41c:	e011      	b.n	800d442 <_printf_i+0xfa>
 800d41e:	6821      	ldr	r1, [r4, #0]
 800d420:	6833      	ldr	r3, [r6, #0]
 800d422:	0608      	lsls	r0, r1, #24
 800d424:	f853 5b04 	ldr.w	r5, [r3], #4
 800d428:	d402      	bmi.n	800d430 <_printf_i+0xe8>
 800d42a:	0649      	lsls	r1, r1, #25
 800d42c:	bf48      	it	mi
 800d42e:	b2ad      	uxthmi	r5, r5
 800d430:	2f6f      	cmp	r7, #111	@ 0x6f
 800d432:	4853      	ldr	r0, [pc, #332]	@ (800d580 <_printf_i+0x238>)
 800d434:	6033      	str	r3, [r6, #0]
 800d436:	bf14      	ite	ne
 800d438:	230a      	movne	r3, #10
 800d43a:	2308      	moveq	r3, #8
 800d43c:	2100      	movs	r1, #0
 800d43e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d442:	6866      	ldr	r6, [r4, #4]
 800d444:	60a6      	str	r6, [r4, #8]
 800d446:	2e00      	cmp	r6, #0
 800d448:	bfa2      	ittt	ge
 800d44a:	6821      	ldrge	r1, [r4, #0]
 800d44c:	f021 0104 	bicge.w	r1, r1, #4
 800d450:	6021      	strge	r1, [r4, #0]
 800d452:	b90d      	cbnz	r5, 800d458 <_printf_i+0x110>
 800d454:	2e00      	cmp	r6, #0
 800d456:	d04b      	beq.n	800d4f0 <_printf_i+0x1a8>
 800d458:	4616      	mov	r6, r2
 800d45a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d45e:	fb03 5711 	mls	r7, r3, r1, r5
 800d462:	5dc7      	ldrb	r7, [r0, r7]
 800d464:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d468:	462f      	mov	r7, r5
 800d46a:	42bb      	cmp	r3, r7
 800d46c:	460d      	mov	r5, r1
 800d46e:	d9f4      	bls.n	800d45a <_printf_i+0x112>
 800d470:	2b08      	cmp	r3, #8
 800d472:	d10b      	bne.n	800d48c <_printf_i+0x144>
 800d474:	6823      	ldr	r3, [r4, #0]
 800d476:	07df      	lsls	r7, r3, #31
 800d478:	d508      	bpl.n	800d48c <_printf_i+0x144>
 800d47a:	6923      	ldr	r3, [r4, #16]
 800d47c:	6861      	ldr	r1, [r4, #4]
 800d47e:	4299      	cmp	r1, r3
 800d480:	bfde      	ittt	le
 800d482:	2330      	movle	r3, #48	@ 0x30
 800d484:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d488:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d48c:	1b92      	subs	r2, r2, r6
 800d48e:	6122      	str	r2, [r4, #16]
 800d490:	f8cd a000 	str.w	sl, [sp]
 800d494:	464b      	mov	r3, r9
 800d496:	aa03      	add	r2, sp, #12
 800d498:	4621      	mov	r1, r4
 800d49a:	4640      	mov	r0, r8
 800d49c:	f7ff fee6 	bl	800d26c <_printf_common>
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	d14a      	bne.n	800d53a <_printf_i+0x1f2>
 800d4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a8:	b004      	add	sp, #16
 800d4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ae:	6823      	ldr	r3, [r4, #0]
 800d4b0:	f043 0320 	orr.w	r3, r3, #32
 800d4b4:	6023      	str	r3, [r4, #0]
 800d4b6:	4833      	ldr	r0, [pc, #204]	@ (800d584 <_printf_i+0x23c>)
 800d4b8:	2778      	movs	r7, #120	@ 0x78
 800d4ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d4be:	6823      	ldr	r3, [r4, #0]
 800d4c0:	6831      	ldr	r1, [r6, #0]
 800d4c2:	061f      	lsls	r7, r3, #24
 800d4c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800d4c8:	d402      	bmi.n	800d4d0 <_printf_i+0x188>
 800d4ca:	065f      	lsls	r7, r3, #25
 800d4cc:	bf48      	it	mi
 800d4ce:	b2ad      	uxthmi	r5, r5
 800d4d0:	6031      	str	r1, [r6, #0]
 800d4d2:	07d9      	lsls	r1, r3, #31
 800d4d4:	bf44      	itt	mi
 800d4d6:	f043 0320 	orrmi.w	r3, r3, #32
 800d4da:	6023      	strmi	r3, [r4, #0]
 800d4dc:	b11d      	cbz	r5, 800d4e6 <_printf_i+0x19e>
 800d4de:	2310      	movs	r3, #16
 800d4e0:	e7ac      	b.n	800d43c <_printf_i+0xf4>
 800d4e2:	4827      	ldr	r0, [pc, #156]	@ (800d580 <_printf_i+0x238>)
 800d4e4:	e7e9      	b.n	800d4ba <_printf_i+0x172>
 800d4e6:	6823      	ldr	r3, [r4, #0]
 800d4e8:	f023 0320 	bic.w	r3, r3, #32
 800d4ec:	6023      	str	r3, [r4, #0]
 800d4ee:	e7f6      	b.n	800d4de <_printf_i+0x196>
 800d4f0:	4616      	mov	r6, r2
 800d4f2:	e7bd      	b.n	800d470 <_printf_i+0x128>
 800d4f4:	6833      	ldr	r3, [r6, #0]
 800d4f6:	6825      	ldr	r5, [r4, #0]
 800d4f8:	6961      	ldr	r1, [r4, #20]
 800d4fa:	1d18      	adds	r0, r3, #4
 800d4fc:	6030      	str	r0, [r6, #0]
 800d4fe:	062e      	lsls	r6, r5, #24
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	d501      	bpl.n	800d508 <_printf_i+0x1c0>
 800d504:	6019      	str	r1, [r3, #0]
 800d506:	e002      	b.n	800d50e <_printf_i+0x1c6>
 800d508:	0668      	lsls	r0, r5, #25
 800d50a:	d5fb      	bpl.n	800d504 <_printf_i+0x1bc>
 800d50c:	8019      	strh	r1, [r3, #0]
 800d50e:	2300      	movs	r3, #0
 800d510:	6123      	str	r3, [r4, #16]
 800d512:	4616      	mov	r6, r2
 800d514:	e7bc      	b.n	800d490 <_printf_i+0x148>
 800d516:	6833      	ldr	r3, [r6, #0]
 800d518:	1d1a      	adds	r2, r3, #4
 800d51a:	6032      	str	r2, [r6, #0]
 800d51c:	681e      	ldr	r6, [r3, #0]
 800d51e:	6862      	ldr	r2, [r4, #4]
 800d520:	2100      	movs	r1, #0
 800d522:	4630      	mov	r0, r6
 800d524:	f7f2 fe54 	bl	80001d0 <memchr>
 800d528:	b108      	cbz	r0, 800d52e <_printf_i+0x1e6>
 800d52a:	1b80      	subs	r0, r0, r6
 800d52c:	6060      	str	r0, [r4, #4]
 800d52e:	6863      	ldr	r3, [r4, #4]
 800d530:	6123      	str	r3, [r4, #16]
 800d532:	2300      	movs	r3, #0
 800d534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d538:	e7aa      	b.n	800d490 <_printf_i+0x148>
 800d53a:	6923      	ldr	r3, [r4, #16]
 800d53c:	4632      	mov	r2, r6
 800d53e:	4649      	mov	r1, r9
 800d540:	4640      	mov	r0, r8
 800d542:	47d0      	blx	sl
 800d544:	3001      	adds	r0, #1
 800d546:	d0ad      	beq.n	800d4a4 <_printf_i+0x15c>
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	079b      	lsls	r3, r3, #30
 800d54c:	d413      	bmi.n	800d576 <_printf_i+0x22e>
 800d54e:	68e0      	ldr	r0, [r4, #12]
 800d550:	9b03      	ldr	r3, [sp, #12]
 800d552:	4298      	cmp	r0, r3
 800d554:	bfb8      	it	lt
 800d556:	4618      	movlt	r0, r3
 800d558:	e7a6      	b.n	800d4a8 <_printf_i+0x160>
 800d55a:	2301      	movs	r3, #1
 800d55c:	4632      	mov	r2, r6
 800d55e:	4649      	mov	r1, r9
 800d560:	4640      	mov	r0, r8
 800d562:	47d0      	blx	sl
 800d564:	3001      	adds	r0, #1
 800d566:	d09d      	beq.n	800d4a4 <_printf_i+0x15c>
 800d568:	3501      	adds	r5, #1
 800d56a:	68e3      	ldr	r3, [r4, #12]
 800d56c:	9903      	ldr	r1, [sp, #12]
 800d56e:	1a5b      	subs	r3, r3, r1
 800d570:	42ab      	cmp	r3, r5
 800d572:	dcf2      	bgt.n	800d55a <_printf_i+0x212>
 800d574:	e7eb      	b.n	800d54e <_printf_i+0x206>
 800d576:	2500      	movs	r5, #0
 800d578:	f104 0619 	add.w	r6, r4, #25
 800d57c:	e7f5      	b.n	800d56a <_printf_i+0x222>
 800d57e:	bf00      	nop
 800d580:	08011e5e 	.word	0x08011e5e
 800d584:	08011e6f 	.word	0x08011e6f

0800d588 <_scanf_float>:
 800d588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d58c:	b087      	sub	sp, #28
 800d58e:	4617      	mov	r7, r2
 800d590:	9303      	str	r3, [sp, #12]
 800d592:	688b      	ldr	r3, [r1, #8]
 800d594:	1e5a      	subs	r2, r3, #1
 800d596:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d59a:	bf81      	itttt	hi
 800d59c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d5a0:	eb03 0b05 	addhi.w	fp, r3, r5
 800d5a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d5a8:	608b      	strhi	r3, [r1, #8]
 800d5aa:	680b      	ldr	r3, [r1, #0]
 800d5ac:	460a      	mov	r2, r1
 800d5ae:	f04f 0500 	mov.w	r5, #0
 800d5b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d5b6:	f842 3b1c 	str.w	r3, [r2], #28
 800d5ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d5be:	4680      	mov	r8, r0
 800d5c0:	460c      	mov	r4, r1
 800d5c2:	bf98      	it	ls
 800d5c4:	f04f 0b00 	movls.w	fp, #0
 800d5c8:	9201      	str	r2, [sp, #4]
 800d5ca:	4616      	mov	r6, r2
 800d5cc:	46aa      	mov	sl, r5
 800d5ce:	46a9      	mov	r9, r5
 800d5d0:	9502      	str	r5, [sp, #8]
 800d5d2:	68a2      	ldr	r2, [r4, #8]
 800d5d4:	b152      	cbz	r2, 800d5ec <_scanf_float+0x64>
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	2b4e      	cmp	r3, #78	@ 0x4e
 800d5dc:	d864      	bhi.n	800d6a8 <_scanf_float+0x120>
 800d5de:	2b40      	cmp	r3, #64	@ 0x40
 800d5e0:	d83c      	bhi.n	800d65c <_scanf_float+0xd4>
 800d5e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d5e6:	b2c8      	uxtb	r0, r1
 800d5e8:	280e      	cmp	r0, #14
 800d5ea:	d93a      	bls.n	800d662 <_scanf_float+0xda>
 800d5ec:	f1b9 0f00 	cmp.w	r9, #0
 800d5f0:	d003      	beq.n	800d5fa <_scanf_float+0x72>
 800d5f2:	6823      	ldr	r3, [r4, #0]
 800d5f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5fe:	f1ba 0f01 	cmp.w	sl, #1
 800d602:	f200 8117 	bhi.w	800d834 <_scanf_float+0x2ac>
 800d606:	9b01      	ldr	r3, [sp, #4]
 800d608:	429e      	cmp	r6, r3
 800d60a:	f200 8108 	bhi.w	800d81e <_scanf_float+0x296>
 800d60e:	2001      	movs	r0, #1
 800d610:	b007      	add	sp, #28
 800d612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d616:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d61a:	2a0d      	cmp	r2, #13
 800d61c:	d8e6      	bhi.n	800d5ec <_scanf_float+0x64>
 800d61e:	a101      	add	r1, pc, #4	@ (adr r1, 800d624 <_scanf_float+0x9c>)
 800d620:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d624:	0800d76b 	.word	0x0800d76b
 800d628:	0800d5ed 	.word	0x0800d5ed
 800d62c:	0800d5ed 	.word	0x0800d5ed
 800d630:	0800d5ed 	.word	0x0800d5ed
 800d634:	0800d7cb 	.word	0x0800d7cb
 800d638:	0800d7a3 	.word	0x0800d7a3
 800d63c:	0800d5ed 	.word	0x0800d5ed
 800d640:	0800d5ed 	.word	0x0800d5ed
 800d644:	0800d779 	.word	0x0800d779
 800d648:	0800d5ed 	.word	0x0800d5ed
 800d64c:	0800d5ed 	.word	0x0800d5ed
 800d650:	0800d5ed 	.word	0x0800d5ed
 800d654:	0800d5ed 	.word	0x0800d5ed
 800d658:	0800d731 	.word	0x0800d731
 800d65c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d660:	e7db      	b.n	800d61a <_scanf_float+0x92>
 800d662:	290e      	cmp	r1, #14
 800d664:	d8c2      	bhi.n	800d5ec <_scanf_float+0x64>
 800d666:	a001      	add	r0, pc, #4	@ (adr r0, 800d66c <_scanf_float+0xe4>)
 800d668:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d66c:	0800d721 	.word	0x0800d721
 800d670:	0800d5ed 	.word	0x0800d5ed
 800d674:	0800d721 	.word	0x0800d721
 800d678:	0800d7b7 	.word	0x0800d7b7
 800d67c:	0800d5ed 	.word	0x0800d5ed
 800d680:	0800d6c9 	.word	0x0800d6c9
 800d684:	0800d707 	.word	0x0800d707
 800d688:	0800d707 	.word	0x0800d707
 800d68c:	0800d707 	.word	0x0800d707
 800d690:	0800d707 	.word	0x0800d707
 800d694:	0800d707 	.word	0x0800d707
 800d698:	0800d707 	.word	0x0800d707
 800d69c:	0800d707 	.word	0x0800d707
 800d6a0:	0800d707 	.word	0x0800d707
 800d6a4:	0800d707 	.word	0x0800d707
 800d6a8:	2b6e      	cmp	r3, #110	@ 0x6e
 800d6aa:	d809      	bhi.n	800d6c0 <_scanf_float+0x138>
 800d6ac:	2b60      	cmp	r3, #96	@ 0x60
 800d6ae:	d8b2      	bhi.n	800d616 <_scanf_float+0x8e>
 800d6b0:	2b54      	cmp	r3, #84	@ 0x54
 800d6b2:	d07b      	beq.n	800d7ac <_scanf_float+0x224>
 800d6b4:	2b59      	cmp	r3, #89	@ 0x59
 800d6b6:	d199      	bne.n	800d5ec <_scanf_float+0x64>
 800d6b8:	2d07      	cmp	r5, #7
 800d6ba:	d197      	bne.n	800d5ec <_scanf_float+0x64>
 800d6bc:	2508      	movs	r5, #8
 800d6be:	e02c      	b.n	800d71a <_scanf_float+0x192>
 800d6c0:	2b74      	cmp	r3, #116	@ 0x74
 800d6c2:	d073      	beq.n	800d7ac <_scanf_float+0x224>
 800d6c4:	2b79      	cmp	r3, #121	@ 0x79
 800d6c6:	e7f6      	b.n	800d6b6 <_scanf_float+0x12e>
 800d6c8:	6821      	ldr	r1, [r4, #0]
 800d6ca:	05c8      	lsls	r0, r1, #23
 800d6cc:	d51b      	bpl.n	800d706 <_scanf_float+0x17e>
 800d6ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d6d2:	6021      	str	r1, [r4, #0]
 800d6d4:	f109 0901 	add.w	r9, r9, #1
 800d6d8:	f1bb 0f00 	cmp.w	fp, #0
 800d6dc:	d003      	beq.n	800d6e6 <_scanf_float+0x15e>
 800d6de:	3201      	adds	r2, #1
 800d6e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d6e4:	60a2      	str	r2, [r4, #8]
 800d6e6:	68a3      	ldr	r3, [r4, #8]
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	60a3      	str	r3, [r4, #8]
 800d6ec:	6923      	ldr	r3, [r4, #16]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	6123      	str	r3, [r4, #16]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	607b      	str	r3, [r7, #4]
 800d6fa:	f340 8087 	ble.w	800d80c <_scanf_float+0x284>
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	3301      	adds	r3, #1
 800d702:	603b      	str	r3, [r7, #0]
 800d704:	e765      	b.n	800d5d2 <_scanf_float+0x4a>
 800d706:	eb1a 0105 	adds.w	r1, sl, r5
 800d70a:	f47f af6f 	bne.w	800d5ec <_scanf_float+0x64>
 800d70e:	6822      	ldr	r2, [r4, #0]
 800d710:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d714:	6022      	str	r2, [r4, #0]
 800d716:	460d      	mov	r5, r1
 800d718:	468a      	mov	sl, r1
 800d71a:	f806 3b01 	strb.w	r3, [r6], #1
 800d71e:	e7e2      	b.n	800d6e6 <_scanf_float+0x15e>
 800d720:	6822      	ldr	r2, [r4, #0]
 800d722:	0610      	lsls	r0, r2, #24
 800d724:	f57f af62 	bpl.w	800d5ec <_scanf_float+0x64>
 800d728:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d72c:	6022      	str	r2, [r4, #0]
 800d72e:	e7f4      	b.n	800d71a <_scanf_float+0x192>
 800d730:	f1ba 0f00 	cmp.w	sl, #0
 800d734:	d10e      	bne.n	800d754 <_scanf_float+0x1cc>
 800d736:	f1b9 0f00 	cmp.w	r9, #0
 800d73a:	d10e      	bne.n	800d75a <_scanf_float+0x1d2>
 800d73c:	6822      	ldr	r2, [r4, #0]
 800d73e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d742:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d746:	d108      	bne.n	800d75a <_scanf_float+0x1d2>
 800d748:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d74c:	6022      	str	r2, [r4, #0]
 800d74e:	f04f 0a01 	mov.w	sl, #1
 800d752:	e7e2      	b.n	800d71a <_scanf_float+0x192>
 800d754:	f1ba 0f02 	cmp.w	sl, #2
 800d758:	d055      	beq.n	800d806 <_scanf_float+0x27e>
 800d75a:	2d01      	cmp	r5, #1
 800d75c:	d002      	beq.n	800d764 <_scanf_float+0x1dc>
 800d75e:	2d04      	cmp	r5, #4
 800d760:	f47f af44 	bne.w	800d5ec <_scanf_float+0x64>
 800d764:	3501      	adds	r5, #1
 800d766:	b2ed      	uxtb	r5, r5
 800d768:	e7d7      	b.n	800d71a <_scanf_float+0x192>
 800d76a:	f1ba 0f01 	cmp.w	sl, #1
 800d76e:	f47f af3d 	bne.w	800d5ec <_scanf_float+0x64>
 800d772:	f04f 0a02 	mov.w	sl, #2
 800d776:	e7d0      	b.n	800d71a <_scanf_float+0x192>
 800d778:	b97d      	cbnz	r5, 800d79a <_scanf_float+0x212>
 800d77a:	f1b9 0f00 	cmp.w	r9, #0
 800d77e:	f47f af38 	bne.w	800d5f2 <_scanf_float+0x6a>
 800d782:	6822      	ldr	r2, [r4, #0]
 800d784:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d788:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d78c:	f040 8108 	bne.w	800d9a0 <_scanf_float+0x418>
 800d790:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d794:	6022      	str	r2, [r4, #0]
 800d796:	2501      	movs	r5, #1
 800d798:	e7bf      	b.n	800d71a <_scanf_float+0x192>
 800d79a:	2d03      	cmp	r5, #3
 800d79c:	d0e2      	beq.n	800d764 <_scanf_float+0x1dc>
 800d79e:	2d05      	cmp	r5, #5
 800d7a0:	e7de      	b.n	800d760 <_scanf_float+0x1d8>
 800d7a2:	2d02      	cmp	r5, #2
 800d7a4:	f47f af22 	bne.w	800d5ec <_scanf_float+0x64>
 800d7a8:	2503      	movs	r5, #3
 800d7aa:	e7b6      	b.n	800d71a <_scanf_float+0x192>
 800d7ac:	2d06      	cmp	r5, #6
 800d7ae:	f47f af1d 	bne.w	800d5ec <_scanf_float+0x64>
 800d7b2:	2507      	movs	r5, #7
 800d7b4:	e7b1      	b.n	800d71a <_scanf_float+0x192>
 800d7b6:	6822      	ldr	r2, [r4, #0]
 800d7b8:	0591      	lsls	r1, r2, #22
 800d7ba:	f57f af17 	bpl.w	800d5ec <_scanf_float+0x64>
 800d7be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d7c2:	6022      	str	r2, [r4, #0]
 800d7c4:	f8cd 9008 	str.w	r9, [sp, #8]
 800d7c8:	e7a7      	b.n	800d71a <_scanf_float+0x192>
 800d7ca:	6822      	ldr	r2, [r4, #0]
 800d7cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d7d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d7d4:	d006      	beq.n	800d7e4 <_scanf_float+0x25c>
 800d7d6:	0550      	lsls	r0, r2, #21
 800d7d8:	f57f af08 	bpl.w	800d5ec <_scanf_float+0x64>
 800d7dc:	f1b9 0f00 	cmp.w	r9, #0
 800d7e0:	f000 80de 	beq.w	800d9a0 <_scanf_float+0x418>
 800d7e4:	0591      	lsls	r1, r2, #22
 800d7e6:	bf58      	it	pl
 800d7e8:	9902      	ldrpl	r1, [sp, #8]
 800d7ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d7ee:	bf58      	it	pl
 800d7f0:	eba9 0101 	subpl.w	r1, r9, r1
 800d7f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d7f8:	bf58      	it	pl
 800d7fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d7fe:	6022      	str	r2, [r4, #0]
 800d800:	f04f 0900 	mov.w	r9, #0
 800d804:	e789      	b.n	800d71a <_scanf_float+0x192>
 800d806:	f04f 0a03 	mov.w	sl, #3
 800d80a:	e786      	b.n	800d71a <_scanf_float+0x192>
 800d80c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d810:	4639      	mov	r1, r7
 800d812:	4640      	mov	r0, r8
 800d814:	4798      	blx	r3
 800d816:	2800      	cmp	r0, #0
 800d818:	f43f aedb 	beq.w	800d5d2 <_scanf_float+0x4a>
 800d81c:	e6e6      	b.n	800d5ec <_scanf_float+0x64>
 800d81e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d822:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d826:	463a      	mov	r2, r7
 800d828:	4640      	mov	r0, r8
 800d82a:	4798      	blx	r3
 800d82c:	6923      	ldr	r3, [r4, #16]
 800d82e:	3b01      	subs	r3, #1
 800d830:	6123      	str	r3, [r4, #16]
 800d832:	e6e8      	b.n	800d606 <_scanf_float+0x7e>
 800d834:	1e6b      	subs	r3, r5, #1
 800d836:	2b06      	cmp	r3, #6
 800d838:	d824      	bhi.n	800d884 <_scanf_float+0x2fc>
 800d83a:	2d02      	cmp	r5, #2
 800d83c:	d836      	bhi.n	800d8ac <_scanf_float+0x324>
 800d83e:	9b01      	ldr	r3, [sp, #4]
 800d840:	429e      	cmp	r6, r3
 800d842:	f67f aee4 	bls.w	800d60e <_scanf_float+0x86>
 800d846:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d84a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d84e:	463a      	mov	r2, r7
 800d850:	4640      	mov	r0, r8
 800d852:	4798      	blx	r3
 800d854:	6923      	ldr	r3, [r4, #16]
 800d856:	3b01      	subs	r3, #1
 800d858:	6123      	str	r3, [r4, #16]
 800d85a:	e7f0      	b.n	800d83e <_scanf_float+0x2b6>
 800d85c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d860:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d864:	463a      	mov	r2, r7
 800d866:	4640      	mov	r0, r8
 800d868:	4798      	blx	r3
 800d86a:	6923      	ldr	r3, [r4, #16]
 800d86c:	3b01      	subs	r3, #1
 800d86e:	6123      	str	r3, [r4, #16]
 800d870:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d874:	fa5f fa8a 	uxtb.w	sl, sl
 800d878:	f1ba 0f02 	cmp.w	sl, #2
 800d87c:	d1ee      	bne.n	800d85c <_scanf_float+0x2d4>
 800d87e:	3d03      	subs	r5, #3
 800d880:	b2ed      	uxtb	r5, r5
 800d882:	1b76      	subs	r6, r6, r5
 800d884:	6823      	ldr	r3, [r4, #0]
 800d886:	05da      	lsls	r2, r3, #23
 800d888:	d530      	bpl.n	800d8ec <_scanf_float+0x364>
 800d88a:	055b      	lsls	r3, r3, #21
 800d88c:	d511      	bpl.n	800d8b2 <_scanf_float+0x32a>
 800d88e:	9b01      	ldr	r3, [sp, #4]
 800d890:	429e      	cmp	r6, r3
 800d892:	f67f aebc 	bls.w	800d60e <_scanf_float+0x86>
 800d896:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d89a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d89e:	463a      	mov	r2, r7
 800d8a0:	4640      	mov	r0, r8
 800d8a2:	4798      	blx	r3
 800d8a4:	6923      	ldr	r3, [r4, #16]
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	6123      	str	r3, [r4, #16]
 800d8aa:	e7f0      	b.n	800d88e <_scanf_float+0x306>
 800d8ac:	46aa      	mov	sl, r5
 800d8ae:	46b3      	mov	fp, r6
 800d8b0:	e7de      	b.n	800d870 <_scanf_float+0x2e8>
 800d8b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d8b6:	6923      	ldr	r3, [r4, #16]
 800d8b8:	2965      	cmp	r1, #101	@ 0x65
 800d8ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800d8be:	f106 35ff 	add.w	r5, r6, #4294967295
 800d8c2:	6123      	str	r3, [r4, #16]
 800d8c4:	d00c      	beq.n	800d8e0 <_scanf_float+0x358>
 800d8c6:	2945      	cmp	r1, #69	@ 0x45
 800d8c8:	d00a      	beq.n	800d8e0 <_scanf_float+0x358>
 800d8ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d8ce:	463a      	mov	r2, r7
 800d8d0:	4640      	mov	r0, r8
 800d8d2:	4798      	blx	r3
 800d8d4:	6923      	ldr	r3, [r4, #16]
 800d8d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	1eb5      	subs	r5, r6, #2
 800d8de:	6123      	str	r3, [r4, #16]
 800d8e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d8e4:	463a      	mov	r2, r7
 800d8e6:	4640      	mov	r0, r8
 800d8e8:	4798      	blx	r3
 800d8ea:	462e      	mov	r6, r5
 800d8ec:	6822      	ldr	r2, [r4, #0]
 800d8ee:	f012 0210 	ands.w	r2, r2, #16
 800d8f2:	d001      	beq.n	800d8f8 <_scanf_float+0x370>
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	e68b      	b.n	800d610 <_scanf_float+0x88>
 800d8f8:	7032      	strb	r2, [r6, #0]
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d904:	d11c      	bne.n	800d940 <_scanf_float+0x3b8>
 800d906:	9b02      	ldr	r3, [sp, #8]
 800d908:	454b      	cmp	r3, r9
 800d90a:	eba3 0209 	sub.w	r2, r3, r9
 800d90e:	d123      	bne.n	800d958 <_scanf_float+0x3d0>
 800d910:	9901      	ldr	r1, [sp, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	4640      	mov	r0, r8
 800d916:	f002 fdcf 	bl	80104b8 <_strtod_r>
 800d91a:	9b03      	ldr	r3, [sp, #12]
 800d91c:	6821      	ldr	r1, [r4, #0]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f011 0f02 	tst.w	r1, #2
 800d924:	ec57 6b10 	vmov	r6, r7, d0
 800d928:	f103 0204 	add.w	r2, r3, #4
 800d92c:	d01f      	beq.n	800d96e <_scanf_float+0x3e6>
 800d92e:	9903      	ldr	r1, [sp, #12]
 800d930:	600a      	str	r2, [r1, #0]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	e9c3 6700 	strd	r6, r7, [r3]
 800d938:	68e3      	ldr	r3, [r4, #12]
 800d93a:	3301      	adds	r3, #1
 800d93c:	60e3      	str	r3, [r4, #12]
 800d93e:	e7d9      	b.n	800d8f4 <_scanf_float+0x36c>
 800d940:	9b04      	ldr	r3, [sp, #16]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d0e4      	beq.n	800d910 <_scanf_float+0x388>
 800d946:	9905      	ldr	r1, [sp, #20]
 800d948:	230a      	movs	r3, #10
 800d94a:	3101      	adds	r1, #1
 800d94c:	4640      	mov	r0, r8
 800d94e:	f002 fe33 	bl	80105b8 <_strtol_r>
 800d952:	9b04      	ldr	r3, [sp, #16]
 800d954:	9e05      	ldr	r6, [sp, #20]
 800d956:	1ac2      	subs	r2, r0, r3
 800d958:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d95c:	429e      	cmp	r6, r3
 800d95e:	bf28      	it	cs
 800d960:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d964:	4910      	ldr	r1, [pc, #64]	@ (800d9a8 <_scanf_float+0x420>)
 800d966:	4630      	mov	r0, r6
 800d968:	f000 f954 	bl	800dc14 <siprintf>
 800d96c:	e7d0      	b.n	800d910 <_scanf_float+0x388>
 800d96e:	f011 0f04 	tst.w	r1, #4
 800d972:	9903      	ldr	r1, [sp, #12]
 800d974:	600a      	str	r2, [r1, #0]
 800d976:	d1dc      	bne.n	800d932 <_scanf_float+0x3aa>
 800d978:	681d      	ldr	r5, [r3, #0]
 800d97a:	4632      	mov	r2, r6
 800d97c:	463b      	mov	r3, r7
 800d97e:	4630      	mov	r0, r6
 800d980:	4639      	mov	r1, r7
 800d982:	f7f3 f8d3 	bl	8000b2c <__aeabi_dcmpun>
 800d986:	b128      	cbz	r0, 800d994 <_scanf_float+0x40c>
 800d988:	4808      	ldr	r0, [pc, #32]	@ (800d9ac <_scanf_float+0x424>)
 800d98a:	f000 fb71 	bl	800e070 <nanf>
 800d98e:	ed85 0a00 	vstr	s0, [r5]
 800d992:	e7d1      	b.n	800d938 <_scanf_float+0x3b0>
 800d994:	4630      	mov	r0, r6
 800d996:	4639      	mov	r1, r7
 800d998:	f7f3 f926 	bl	8000be8 <__aeabi_d2f>
 800d99c:	6028      	str	r0, [r5, #0]
 800d99e:	e7cb      	b.n	800d938 <_scanf_float+0x3b0>
 800d9a0:	f04f 0900 	mov.w	r9, #0
 800d9a4:	e629      	b.n	800d5fa <_scanf_float+0x72>
 800d9a6:	bf00      	nop
 800d9a8:	08011e80 	.word	0x08011e80
 800d9ac:	08011f31 	.word	0x08011f31

0800d9b0 <std>:
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	b510      	push	{r4, lr}
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	e9c0 3300 	strd	r3, r3, [r0]
 800d9ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9be:	6083      	str	r3, [r0, #8]
 800d9c0:	8181      	strh	r1, [r0, #12]
 800d9c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d9c4:	81c2      	strh	r2, [r0, #14]
 800d9c6:	6183      	str	r3, [r0, #24]
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	2208      	movs	r2, #8
 800d9cc:	305c      	adds	r0, #92	@ 0x5c
 800d9ce:	f000 fa29 	bl	800de24 <memset>
 800d9d2:	4b0d      	ldr	r3, [pc, #52]	@ (800da08 <std+0x58>)
 800d9d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d9d6:	4b0d      	ldr	r3, [pc, #52]	@ (800da0c <std+0x5c>)
 800d9d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d9da:	4b0d      	ldr	r3, [pc, #52]	@ (800da10 <std+0x60>)
 800d9dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d9de:	4b0d      	ldr	r3, [pc, #52]	@ (800da14 <std+0x64>)
 800d9e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800da18 <std+0x68>)
 800d9e4:	6224      	str	r4, [r4, #32]
 800d9e6:	429c      	cmp	r4, r3
 800d9e8:	d006      	beq.n	800d9f8 <std+0x48>
 800d9ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d9ee:	4294      	cmp	r4, r2
 800d9f0:	d002      	beq.n	800d9f8 <std+0x48>
 800d9f2:	33d0      	adds	r3, #208	@ 0xd0
 800d9f4:	429c      	cmp	r4, r3
 800d9f6:	d105      	bne.n	800da04 <std+0x54>
 800d9f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da00:	f000 bb24 	b.w	800e04c <__retarget_lock_init_recursive>
 800da04:	bd10      	pop	{r4, pc}
 800da06:	bf00      	nop
 800da08:	0800dc55 	.word	0x0800dc55
 800da0c:	0800dc77 	.word	0x0800dc77
 800da10:	0800dcaf 	.word	0x0800dcaf
 800da14:	0800dcd3 	.word	0x0800dcd3
 800da18:	2000301c 	.word	0x2000301c

0800da1c <stdio_exit_handler>:
 800da1c:	4a02      	ldr	r2, [pc, #8]	@ (800da28 <stdio_exit_handler+0xc>)
 800da1e:	4903      	ldr	r1, [pc, #12]	@ (800da2c <stdio_exit_handler+0x10>)
 800da20:	4803      	ldr	r0, [pc, #12]	@ (800da30 <stdio_exit_handler+0x14>)
 800da22:	f000 b869 	b.w	800daf8 <_fwalk_sglue>
 800da26:	bf00      	nop
 800da28:	20000050 	.word	0x20000050
 800da2c:	08010bf9 	.word	0x08010bf9
 800da30:	20000060 	.word	0x20000060

0800da34 <cleanup_stdio>:
 800da34:	6841      	ldr	r1, [r0, #4]
 800da36:	4b0c      	ldr	r3, [pc, #48]	@ (800da68 <cleanup_stdio+0x34>)
 800da38:	4299      	cmp	r1, r3
 800da3a:	b510      	push	{r4, lr}
 800da3c:	4604      	mov	r4, r0
 800da3e:	d001      	beq.n	800da44 <cleanup_stdio+0x10>
 800da40:	f003 f8da 	bl	8010bf8 <_fflush_r>
 800da44:	68a1      	ldr	r1, [r4, #8]
 800da46:	4b09      	ldr	r3, [pc, #36]	@ (800da6c <cleanup_stdio+0x38>)
 800da48:	4299      	cmp	r1, r3
 800da4a:	d002      	beq.n	800da52 <cleanup_stdio+0x1e>
 800da4c:	4620      	mov	r0, r4
 800da4e:	f003 f8d3 	bl	8010bf8 <_fflush_r>
 800da52:	68e1      	ldr	r1, [r4, #12]
 800da54:	4b06      	ldr	r3, [pc, #24]	@ (800da70 <cleanup_stdio+0x3c>)
 800da56:	4299      	cmp	r1, r3
 800da58:	d004      	beq.n	800da64 <cleanup_stdio+0x30>
 800da5a:	4620      	mov	r0, r4
 800da5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da60:	f003 b8ca 	b.w	8010bf8 <_fflush_r>
 800da64:	bd10      	pop	{r4, pc}
 800da66:	bf00      	nop
 800da68:	2000301c 	.word	0x2000301c
 800da6c:	20003084 	.word	0x20003084
 800da70:	200030ec 	.word	0x200030ec

0800da74 <global_stdio_init.part.0>:
 800da74:	b510      	push	{r4, lr}
 800da76:	4b0b      	ldr	r3, [pc, #44]	@ (800daa4 <global_stdio_init.part.0+0x30>)
 800da78:	4c0b      	ldr	r4, [pc, #44]	@ (800daa8 <global_stdio_init.part.0+0x34>)
 800da7a:	4a0c      	ldr	r2, [pc, #48]	@ (800daac <global_stdio_init.part.0+0x38>)
 800da7c:	601a      	str	r2, [r3, #0]
 800da7e:	4620      	mov	r0, r4
 800da80:	2200      	movs	r2, #0
 800da82:	2104      	movs	r1, #4
 800da84:	f7ff ff94 	bl	800d9b0 <std>
 800da88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da8c:	2201      	movs	r2, #1
 800da8e:	2109      	movs	r1, #9
 800da90:	f7ff ff8e 	bl	800d9b0 <std>
 800da94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800da98:	2202      	movs	r2, #2
 800da9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da9e:	2112      	movs	r1, #18
 800daa0:	f7ff bf86 	b.w	800d9b0 <std>
 800daa4:	20003154 	.word	0x20003154
 800daa8:	2000301c 	.word	0x2000301c
 800daac:	0800da1d 	.word	0x0800da1d

0800dab0 <__sfp_lock_acquire>:
 800dab0:	4801      	ldr	r0, [pc, #4]	@ (800dab8 <__sfp_lock_acquire+0x8>)
 800dab2:	f000 bacc 	b.w	800e04e <__retarget_lock_acquire_recursive>
 800dab6:	bf00      	nop
 800dab8:	2000315d 	.word	0x2000315d

0800dabc <__sfp_lock_release>:
 800dabc:	4801      	ldr	r0, [pc, #4]	@ (800dac4 <__sfp_lock_release+0x8>)
 800dabe:	f000 bac7 	b.w	800e050 <__retarget_lock_release_recursive>
 800dac2:	bf00      	nop
 800dac4:	2000315d 	.word	0x2000315d

0800dac8 <__sinit>:
 800dac8:	b510      	push	{r4, lr}
 800daca:	4604      	mov	r4, r0
 800dacc:	f7ff fff0 	bl	800dab0 <__sfp_lock_acquire>
 800dad0:	6a23      	ldr	r3, [r4, #32]
 800dad2:	b11b      	cbz	r3, 800dadc <__sinit+0x14>
 800dad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dad8:	f7ff bff0 	b.w	800dabc <__sfp_lock_release>
 800dadc:	4b04      	ldr	r3, [pc, #16]	@ (800daf0 <__sinit+0x28>)
 800dade:	6223      	str	r3, [r4, #32]
 800dae0:	4b04      	ldr	r3, [pc, #16]	@ (800daf4 <__sinit+0x2c>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d1f5      	bne.n	800dad4 <__sinit+0xc>
 800dae8:	f7ff ffc4 	bl	800da74 <global_stdio_init.part.0>
 800daec:	e7f2      	b.n	800dad4 <__sinit+0xc>
 800daee:	bf00      	nop
 800daf0:	0800da35 	.word	0x0800da35
 800daf4:	20003154 	.word	0x20003154

0800daf8 <_fwalk_sglue>:
 800daf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dafc:	4607      	mov	r7, r0
 800dafe:	4688      	mov	r8, r1
 800db00:	4614      	mov	r4, r2
 800db02:	2600      	movs	r6, #0
 800db04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db08:	f1b9 0901 	subs.w	r9, r9, #1
 800db0c:	d505      	bpl.n	800db1a <_fwalk_sglue+0x22>
 800db0e:	6824      	ldr	r4, [r4, #0]
 800db10:	2c00      	cmp	r4, #0
 800db12:	d1f7      	bne.n	800db04 <_fwalk_sglue+0xc>
 800db14:	4630      	mov	r0, r6
 800db16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db1a:	89ab      	ldrh	r3, [r5, #12]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d907      	bls.n	800db30 <_fwalk_sglue+0x38>
 800db20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db24:	3301      	adds	r3, #1
 800db26:	d003      	beq.n	800db30 <_fwalk_sglue+0x38>
 800db28:	4629      	mov	r1, r5
 800db2a:	4638      	mov	r0, r7
 800db2c:	47c0      	blx	r8
 800db2e:	4306      	orrs	r6, r0
 800db30:	3568      	adds	r5, #104	@ 0x68
 800db32:	e7e9      	b.n	800db08 <_fwalk_sglue+0x10>

0800db34 <iprintf>:
 800db34:	b40f      	push	{r0, r1, r2, r3}
 800db36:	b507      	push	{r0, r1, r2, lr}
 800db38:	4906      	ldr	r1, [pc, #24]	@ (800db54 <iprintf+0x20>)
 800db3a:	ab04      	add	r3, sp, #16
 800db3c:	6808      	ldr	r0, [r1, #0]
 800db3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800db42:	6881      	ldr	r1, [r0, #8]
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	f002 febb 	bl	80108c0 <_vfiprintf_r>
 800db4a:	b003      	add	sp, #12
 800db4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800db50:	b004      	add	sp, #16
 800db52:	4770      	bx	lr
 800db54:	2000005c 	.word	0x2000005c

0800db58 <_puts_r>:
 800db58:	6a03      	ldr	r3, [r0, #32]
 800db5a:	b570      	push	{r4, r5, r6, lr}
 800db5c:	6884      	ldr	r4, [r0, #8]
 800db5e:	4605      	mov	r5, r0
 800db60:	460e      	mov	r6, r1
 800db62:	b90b      	cbnz	r3, 800db68 <_puts_r+0x10>
 800db64:	f7ff ffb0 	bl	800dac8 <__sinit>
 800db68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db6a:	07db      	lsls	r3, r3, #31
 800db6c:	d405      	bmi.n	800db7a <_puts_r+0x22>
 800db6e:	89a3      	ldrh	r3, [r4, #12]
 800db70:	0598      	lsls	r0, r3, #22
 800db72:	d402      	bmi.n	800db7a <_puts_r+0x22>
 800db74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db76:	f000 fa6a 	bl	800e04e <__retarget_lock_acquire_recursive>
 800db7a:	89a3      	ldrh	r3, [r4, #12]
 800db7c:	0719      	lsls	r1, r3, #28
 800db7e:	d502      	bpl.n	800db86 <_puts_r+0x2e>
 800db80:	6923      	ldr	r3, [r4, #16]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d135      	bne.n	800dbf2 <_puts_r+0x9a>
 800db86:	4621      	mov	r1, r4
 800db88:	4628      	mov	r0, r5
 800db8a:	f000 f8e5 	bl	800dd58 <__swsetup_r>
 800db8e:	b380      	cbz	r0, 800dbf2 <_puts_r+0x9a>
 800db90:	f04f 35ff 	mov.w	r5, #4294967295
 800db94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db96:	07da      	lsls	r2, r3, #31
 800db98:	d405      	bmi.n	800dba6 <_puts_r+0x4e>
 800db9a:	89a3      	ldrh	r3, [r4, #12]
 800db9c:	059b      	lsls	r3, r3, #22
 800db9e:	d402      	bmi.n	800dba6 <_puts_r+0x4e>
 800dba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dba2:	f000 fa55 	bl	800e050 <__retarget_lock_release_recursive>
 800dba6:	4628      	mov	r0, r5
 800dba8:	bd70      	pop	{r4, r5, r6, pc}
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	da04      	bge.n	800dbb8 <_puts_r+0x60>
 800dbae:	69a2      	ldr	r2, [r4, #24]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	dc17      	bgt.n	800dbe4 <_puts_r+0x8c>
 800dbb4:	290a      	cmp	r1, #10
 800dbb6:	d015      	beq.n	800dbe4 <_puts_r+0x8c>
 800dbb8:	6823      	ldr	r3, [r4, #0]
 800dbba:	1c5a      	adds	r2, r3, #1
 800dbbc:	6022      	str	r2, [r4, #0]
 800dbbe:	7019      	strb	r1, [r3, #0]
 800dbc0:	68a3      	ldr	r3, [r4, #8]
 800dbc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dbc6:	3b01      	subs	r3, #1
 800dbc8:	60a3      	str	r3, [r4, #8]
 800dbca:	2900      	cmp	r1, #0
 800dbcc:	d1ed      	bne.n	800dbaa <_puts_r+0x52>
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	da11      	bge.n	800dbf6 <_puts_r+0x9e>
 800dbd2:	4622      	mov	r2, r4
 800dbd4:	210a      	movs	r1, #10
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	f000 f87f 	bl	800dcda <__swbuf_r>
 800dbdc:	3001      	adds	r0, #1
 800dbde:	d0d7      	beq.n	800db90 <_puts_r+0x38>
 800dbe0:	250a      	movs	r5, #10
 800dbe2:	e7d7      	b.n	800db94 <_puts_r+0x3c>
 800dbe4:	4622      	mov	r2, r4
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	f000 f877 	bl	800dcda <__swbuf_r>
 800dbec:	3001      	adds	r0, #1
 800dbee:	d1e7      	bne.n	800dbc0 <_puts_r+0x68>
 800dbf0:	e7ce      	b.n	800db90 <_puts_r+0x38>
 800dbf2:	3e01      	subs	r6, #1
 800dbf4:	e7e4      	b.n	800dbc0 <_puts_r+0x68>
 800dbf6:	6823      	ldr	r3, [r4, #0]
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	6022      	str	r2, [r4, #0]
 800dbfc:	220a      	movs	r2, #10
 800dbfe:	701a      	strb	r2, [r3, #0]
 800dc00:	e7ee      	b.n	800dbe0 <_puts_r+0x88>
	...

0800dc04 <puts>:
 800dc04:	4b02      	ldr	r3, [pc, #8]	@ (800dc10 <puts+0xc>)
 800dc06:	4601      	mov	r1, r0
 800dc08:	6818      	ldr	r0, [r3, #0]
 800dc0a:	f7ff bfa5 	b.w	800db58 <_puts_r>
 800dc0e:	bf00      	nop
 800dc10:	2000005c 	.word	0x2000005c

0800dc14 <siprintf>:
 800dc14:	b40e      	push	{r1, r2, r3}
 800dc16:	b500      	push	{lr}
 800dc18:	b09c      	sub	sp, #112	@ 0x70
 800dc1a:	ab1d      	add	r3, sp, #116	@ 0x74
 800dc1c:	9002      	str	r0, [sp, #8]
 800dc1e:	9006      	str	r0, [sp, #24]
 800dc20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dc24:	4809      	ldr	r0, [pc, #36]	@ (800dc4c <siprintf+0x38>)
 800dc26:	9107      	str	r1, [sp, #28]
 800dc28:	9104      	str	r1, [sp, #16]
 800dc2a:	4909      	ldr	r1, [pc, #36]	@ (800dc50 <siprintf+0x3c>)
 800dc2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc30:	9105      	str	r1, [sp, #20]
 800dc32:	6800      	ldr	r0, [r0, #0]
 800dc34:	9301      	str	r3, [sp, #4]
 800dc36:	a902      	add	r1, sp, #8
 800dc38:	f002 fd1c 	bl	8010674 <_svfiprintf_r>
 800dc3c:	9b02      	ldr	r3, [sp, #8]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	701a      	strb	r2, [r3, #0]
 800dc42:	b01c      	add	sp, #112	@ 0x70
 800dc44:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc48:	b003      	add	sp, #12
 800dc4a:	4770      	bx	lr
 800dc4c:	2000005c 	.word	0x2000005c
 800dc50:	ffff0208 	.word	0xffff0208

0800dc54 <__sread>:
 800dc54:	b510      	push	{r4, lr}
 800dc56:	460c      	mov	r4, r1
 800dc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc5c:	f000 f9a8 	bl	800dfb0 <_read_r>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	bfab      	itete	ge
 800dc64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dc66:	89a3      	ldrhlt	r3, [r4, #12]
 800dc68:	181b      	addge	r3, r3, r0
 800dc6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dc6e:	bfac      	ite	ge
 800dc70:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dc72:	81a3      	strhlt	r3, [r4, #12]
 800dc74:	bd10      	pop	{r4, pc}

0800dc76 <__swrite>:
 800dc76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc7a:	461f      	mov	r7, r3
 800dc7c:	898b      	ldrh	r3, [r1, #12]
 800dc7e:	05db      	lsls	r3, r3, #23
 800dc80:	4605      	mov	r5, r0
 800dc82:	460c      	mov	r4, r1
 800dc84:	4616      	mov	r6, r2
 800dc86:	d505      	bpl.n	800dc94 <__swrite+0x1e>
 800dc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f000 f97c 	bl	800df8c <_lseek_r>
 800dc94:	89a3      	ldrh	r3, [r4, #12]
 800dc96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dc9e:	81a3      	strh	r3, [r4, #12]
 800dca0:	4632      	mov	r2, r6
 800dca2:	463b      	mov	r3, r7
 800dca4:	4628      	mov	r0, r5
 800dca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcaa:	f000 b993 	b.w	800dfd4 <_write_r>

0800dcae <__sseek>:
 800dcae:	b510      	push	{r4, lr}
 800dcb0:	460c      	mov	r4, r1
 800dcb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcb6:	f000 f969 	bl	800df8c <_lseek_r>
 800dcba:	1c43      	adds	r3, r0, #1
 800dcbc:	89a3      	ldrh	r3, [r4, #12]
 800dcbe:	bf15      	itete	ne
 800dcc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dcc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dcc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dcca:	81a3      	strheq	r3, [r4, #12]
 800dccc:	bf18      	it	ne
 800dcce:	81a3      	strhne	r3, [r4, #12]
 800dcd0:	bd10      	pop	{r4, pc}

0800dcd2 <__sclose>:
 800dcd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcd6:	f000 b949 	b.w	800df6c <_close_r>

0800dcda <__swbuf_r>:
 800dcda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcdc:	460e      	mov	r6, r1
 800dcde:	4614      	mov	r4, r2
 800dce0:	4605      	mov	r5, r0
 800dce2:	b118      	cbz	r0, 800dcec <__swbuf_r+0x12>
 800dce4:	6a03      	ldr	r3, [r0, #32]
 800dce6:	b90b      	cbnz	r3, 800dcec <__swbuf_r+0x12>
 800dce8:	f7ff feee 	bl	800dac8 <__sinit>
 800dcec:	69a3      	ldr	r3, [r4, #24]
 800dcee:	60a3      	str	r3, [r4, #8]
 800dcf0:	89a3      	ldrh	r3, [r4, #12]
 800dcf2:	071a      	lsls	r2, r3, #28
 800dcf4:	d501      	bpl.n	800dcfa <__swbuf_r+0x20>
 800dcf6:	6923      	ldr	r3, [r4, #16]
 800dcf8:	b943      	cbnz	r3, 800dd0c <__swbuf_r+0x32>
 800dcfa:	4621      	mov	r1, r4
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	f000 f82b 	bl	800dd58 <__swsetup_r>
 800dd02:	b118      	cbz	r0, 800dd0c <__swbuf_r+0x32>
 800dd04:	f04f 37ff 	mov.w	r7, #4294967295
 800dd08:	4638      	mov	r0, r7
 800dd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd0c:	6823      	ldr	r3, [r4, #0]
 800dd0e:	6922      	ldr	r2, [r4, #16]
 800dd10:	1a98      	subs	r0, r3, r2
 800dd12:	6963      	ldr	r3, [r4, #20]
 800dd14:	b2f6      	uxtb	r6, r6
 800dd16:	4283      	cmp	r3, r0
 800dd18:	4637      	mov	r7, r6
 800dd1a:	dc05      	bgt.n	800dd28 <__swbuf_r+0x4e>
 800dd1c:	4621      	mov	r1, r4
 800dd1e:	4628      	mov	r0, r5
 800dd20:	f002 ff6a 	bl	8010bf8 <_fflush_r>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	d1ed      	bne.n	800dd04 <__swbuf_r+0x2a>
 800dd28:	68a3      	ldr	r3, [r4, #8]
 800dd2a:	3b01      	subs	r3, #1
 800dd2c:	60a3      	str	r3, [r4, #8]
 800dd2e:	6823      	ldr	r3, [r4, #0]
 800dd30:	1c5a      	adds	r2, r3, #1
 800dd32:	6022      	str	r2, [r4, #0]
 800dd34:	701e      	strb	r6, [r3, #0]
 800dd36:	6962      	ldr	r2, [r4, #20]
 800dd38:	1c43      	adds	r3, r0, #1
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d004      	beq.n	800dd48 <__swbuf_r+0x6e>
 800dd3e:	89a3      	ldrh	r3, [r4, #12]
 800dd40:	07db      	lsls	r3, r3, #31
 800dd42:	d5e1      	bpl.n	800dd08 <__swbuf_r+0x2e>
 800dd44:	2e0a      	cmp	r6, #10
 800dd46:	d1df      	bne.n	800dd08 <__swbuf_r+0x2e>
 800dd48:	4621      	mov	r1, r4
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	f002 ff54 	bl	8010bf8 <_fflush_r>
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d0d9      	beq.n	800dd08 <__swbuf_r+0x2e>
 800dd54:	e7d6      	b.n	800dd04 <__swbuf_r+0x2a>
	...

0800dd58 <__swsetup_r>:
 800dd58:	b538      	push	{r3, r4, r5, lr}
 800dd5a:	4b29      	ldr	r3, [pc, #164]	@ (800de00 <__swsetup_r+0xa8>)
 800dd5c:	4605      	mov	r5, r0
 800dd5e:	6818      	ldr	r0, [r3, #0]
 800dd60:	460c      	mov	r4, r1
 800dd62:	b118      	cbz	r0, 800dd6c <__swsetup_r+0x14>
 800dd64:	6a03      	ldr	r3, [r0, #32]
 800dd66:	b90b      	cbnz	r3, 800dd6c <__swsetup_r+0x14>
 800dd68:	f7ff feae 	bl	800dac8 <__sinit>
 800dd6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd70:	0719      	lsls	r1, r3, #28
 800dd72:	d422      	bmi.n	800ddba <__swsetup_r+0x62>
 800dd74:	06da      	lsls	r2, r3, #27
 800dd76:	d407      	bmi.n	800dd88 <__swsetup_r+0x30>
 800dd78:	2209      	movs	r2, #9
 800dd7a:	602a      	str	r2, [r5, #0]
 800dd7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd80:	81a3      	strh	r3, [r4, #12]
 800dd82:	f04f 30ff 	mov.w	r0, #4294967295
 800dd86:	e033      	b.n	800ddf0 <__swsetup_r+0x98>
 800dd88:	0758      	lsls	r0, r3, #29
 800dd8a:	d512      	bpl.n	800ddb2 <__swsetup_r+0x5a>
 800dd8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd8e:	b141      	cbz	r1, 800dda2 <__swsetup_r+0x4a>
 800dd90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd94:	4299      	cmp	r1, r3
 800dd96:	d002      	beq.n	800dd9e <__swsetup_r+0x46>
 800dd98:	4628      	mov	r0, r5
 800dd9a:	f000 ffd9 	bl	800ed50 <_free_r>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	6363      	str	r3, [r4, #52]	@ 0x34
 800dda2:	89a3      	ldrh	r3, [r4, #12]
 800dda4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dda8:	81a3      	strh	r3, [r4, #12]
 800ddaa:	2300      	movs	r3, #0
 800ddac:	6063      	str	r3, [r4, #4]
 800ddae:	6923      	ldr	r3, [r4, #16]
 800ddb0:	6023      	str	r3, [r4, #0]
 800ddb2:	89a3      	ldrh	r3, [r4, #12]
 800ddb4:	f043 0308 	orr.w	r3, r3, #8
 800ddb8:	81a3      	strh	r3, [r4, #12]
 800ddba:	6923      	ldr	r3, [r4, #16]
 800ddbc:	b94b      	cbnz	r3, 800ddd2 <__swsetup_r+0x7a>
 800ddbe:	89a3      	ldrh	r3, [r4, #12]
 800ddc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ddc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ddc8:	d003      	beq.n	800ddd2 <__swsetup_r+0x7a>
 800ddca:	4621      	mov	r1, r4
 800ddcc:	4628      	mov	r0, r5
 800ddce:	f002 ff73 	bl	8010cb8 <__smakebuf_r>
 800ddd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddd6:	f013 0201 	ands.w	r2, r3, #1
 800ddda:	d00a      	beq.n	800ddf2 <__swsetup_r+0x9a>
 800dddc:	2200      	movs	r2, #0
 800ddde:	60a2      	str	r2, [r4, #8]
 800dde0:	6962      	ldr	r2, [r4, #20]
 800dde2:	4252      	negs	r2, r2
 800dde4:	61a2      	str	r2, [r4, #24]
 800dde6:	6922      	ldr	r2, [r4, #16]
 800dde8:	b942      	cbnz	r2, 800ddfc <__swsetup_r+0xa4>
 800ddea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ddee:	d1c5      	bne.n	800dd7c <__swsetup_r+0x24>
 800ddf0:	bd38      	pop	{r3, r4, r5, pc}
 800ddf2:	0799      	lsls	r1, r3, #30
 800ddf4:	bf58      	it	pl
 800ddf6:	6962      	ldrpl	r2, [r4, #20]
 800ddf8:	60a2      	str	r2, [r4, #8]
 800ddfa:	e7f4      	b.n	800dde6 <__swsetup_r+0x8e>
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	e7f7      	b.n	800ddf0 <__swsetup_r+0x98>
 800de00:	2000005c 	.word	0x2000005c

0800de04 <memcmp>:
 800de04:	b510      	push	{r4, lr}
 800de06:	3901      	subs	r1, #1
 800de08:	4402      	add	r2, r0
 800de0a:	4290      	cmp	r0, r2
 800de0c:	d101      	bne.n	800de12 <memcmp+0xe>
 800de0e:	2000      	movs	r0, #0
 800de10:	e005      	b.n	800de1e <memcmp+0x1a>
 800de12:	7803      	ldrb	r3, [r0, #0]
 800de14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800de18:	42a3      	cmp	r3, r4
 800de1a:	d001      	beq.n	800de20 <memcmp+0x1c>
 800de1c:	1b18      	subs	r0, r3, r4
 800de1e:	bd10      	pop	{r4, pc}
 800de20:	3001      	adds	r0, #1
 800de22:	e7f2      	b.n	800de0a <memcmp+0x6>

0800de24 <memset>:
 800de24:	4402      	add	r2, r0
 800de26:	4603      	mov	r3, r0
 800de28:	4293      	cmp	r3, r2
 800de2a:	d100      	bne.n	800de2e <memset+0xa>
 800de2c:	4770      	bx	lr
 800de2e:	f803 1b01 	strb.w	r1, [r3], #1
 800de32:	e7f9      	b.n	800de28 <memset+0x4>

0800de34 <strncmp>:
 800de34:	b510      	push	{r4, lr}
 800de36:	b16a      	cbz	r2, 800de54 <strncmp+0x20>
 800de38:	3901      	subs	r1, #1
 800de3a:	1884      	adds	r4, r0, r2
 800de3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800de44:	429a      	cmp	r2, r3
 800de46:	d103      	bne.n	800de50 <strncmp+0x1c>
 800de48:	42a0      	cmp	r0, r4
 800de4a:	d001      	beq.n	800de50 <strncmp+0x1c>
 800de4c:	2a00      	cmp	r2, #0
 800de4e:	d1f5      	bne.n	800de3c <strncmp+0x8>
 800de50:	1ad0      	subs	r0, r2, r3
 800de52:	bd10      	pop	{r4, pc}
 800de54:	4610      	mov	r0, r2
 800de56:	e7fc      	b.n	800de52 <strncmp+0x1e>

0800de58 <strncpy>:
 800de58:	b510      	push	{r4, lr}
 800de5a:	3901      	subs	r1, #1
 800de5c:	4603      	mov	r3, r0
 800de5e:	b132      	cbz	r2, 800de6e <strncpy+0x16>
 800de60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800de64:	f803 4b01 	strb.w	r4, [r3], #1
 800de68:	3a01      	subs	r2, #1
 800de6a:	2c00      	cmp	r4, #0
 800de6c:	d1f7      	bne.n	800de5e <strncpy+0x6>
 800de6e:	441a      	add	r2, r3
 800de70:	2100      	movs	r1, #0
 800de72:	4293      	cmp	r3, r2
 800de74:	d100      	bne.n	800de78 <strncpy+0x20>
 800de76:	bd10      	pop	{r4, pc}
 800de78:	f803 1b01 	strb.w	r1, [r3], #1
 800de7c:	e7f9      	b.n	800de72 <strncpy+0x1a>
	...

0800de80 <strtok>:
 800de80:	4b16      	ldr	r3, [pc, #88]	@ (800dedc <strtok+0x5c>)
 800de82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de86:	681f      	ldr	r7, [r3, #0]
 800de88:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800de8a:	4605      	mov	r5, r0
 800de8c:	460e      	mov	r6, r1
 800de8e:	b9ec      	cbnz	r4, 800decc <strtok+0x4c>
 800de90:	2050      	movs	r0, #80	@ 0x50
 800de92:	f000 ffa7 	bl	800ede4 <malloc>
 800de96:	4602      	mov	r2, r0
 800de98:	6478      	str	r0, [r7, #68]	@ 0x44
 800de9a:	b920      	cbnz	r0, 800dea6 <strtok+0x26>
 800de9c:	4b10      	ldr	r3, [pc, #64]	@ (800dee0 <strtok+0x60>)
 800de9e:	4811      	ldr	r0, [pc, #68]	@ (800dee4 <strtok+0x64>)
 800dea0:	215b      	movs	r1, #91	@ 0x5b
 800dea2:	f000 f8eb 	bl	800e07c <__assert_func>
 800dea6:	e9c0 4400 	strd	r4, r4, [r0]
 800deaa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800deae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800deb2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800deb6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800deba:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800debe:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800dec2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800dec6:	6184      	str	r4, [r0, #24]
 800dec8:	7704      	strb	r4, [r0, #28]
 800deca:	6244      	str	r4, [r0, #36]	@ 0x24
 800decc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dece:	4631      	mov	r1, r6
 800ded0:	4628      	mov	r0, r5
 800ded2:	2301      	movs	r3, #1
 800ded4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ded8:	f000 b806 	b.w	800dee8 <__strtok_r>
 800dedc:	2000005c 	.word	0x2000005c
 800dee0:	08011e85 	.word	0x08011e85
 800dee4:	08011e9c 	.word	0x08011e9c

0800dee8 <__strtok_r>:
 800dee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deea:	4604      	mov	r4, r0
 800deec:	b908      	cbnz	r0, 800def2 <__strtok_r+0xa>
 800deee:	6814      	ldr	r4, [r2, #0]
 800def0:	b144      	cbz	r4, 800df04 <__strtok_r+0x1c>
 800def2:	4620      	mov	r0, r4
 800def4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800def8:	460f      	mov	r7, r1
 800defa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800defe:	b91e      	cbnz	r6, 800df08 <__strtok_r+0x20>
 800df00:	b965      	cbnz	r5, 800df1c <__strtok_r+0x34>
 800df02:	6015      	str	r5, [r2, #0]
 800df04:	2000      	movs	r0, #0
 800df06:	e005      	b.n	800df14 <__strtok_r+0x2c>
 800df08:	42b5      	cmp	r5, r6
 800df0a:	d1f6      	bne.n	800defa <__strtok_r+0x12>
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d1f0      	bne.n	800def2 <__strtok_r+0xa>
 800df10:	6014      	str	r4, [r2, #0]
 800df12:	7003      	strb	r3, [r0, #0]
 800df14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df16:	461c      	mov	r4, r3
 800df18:	e00c      	b.n	800df34 <__strtok_r+0x4c>
 800df1a:	b915      	cbnz	r5, 800df22 <__strtok_r+0x3a>
 800df1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df20:	460e      	mov	r6, r1
 800df22:	f816 5b01 	ldrb.w	r5, [r6], #1
 800df26:	42ab      	cmp	r3, r5
 800df28:	d1f7      	bne.n	800df1a <__strtok_r+0x32>
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d0f3      	beq.n	800df16 <__strtok_r+0x2e>
 800df2e:	2300      	movs	r3, #0
 800df30:	f804 3c01 	strb.w	r3, [r4, #-1]
 800df34:	6014      	str	r4, [r2, #0]
 800df36:	e7ed      	b.n	800df14 <__strtok_r+0x2c>

0800df38 <strstr>:
 800df38:	780a      	ldrb	r2, [r1, #0]
 800df3a:	b570      	push	{r4, r5, r6, lr}
 800df3c:	b96a      	cbnz	r2, 800df5a <strstr+0x22>
 800df3e:	bd70      	pop	{r4, r5, r6, pc}
 800df40:	429a      	cmp	r2, r3
 800df42:	d109      	bne.n	800df58 <strstr+0x20>
 800df44:	460c      	mov	r4, r1
 800df46:	4605      	mov	r5, r0
 800df48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d0f6      	beq.n	800df3e <strstr+0x6>
 800df50:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800df54:	429e      	cmp	r6, r3
 800df56:	d0f7      	beq.n	800df48 <strstr+0x10>
 800df58:	3001      	adds	r0, #1
 800df5a:	7803      	ldrb	r3, [r0, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d1ef      	bne.n	800df40 <strstr+0x8>
 800df60:	4618      	mov	r0, r3
 800df62:	e7ec      	b.n	800df3e <strstr+0x6>

0800df64 <_localeconv_r>:
 800df64:	4800      	ldr	r0, [pc, #0]	@ (800df68 <_localeconv_r+0x4>)
 800df66:	4770      	bx	lr
 800df68:	2000019c 	.word	0x2000019c

0800df6c <_close_r>:
 800df6c:	b538      	push	{r3, r4, r5, lr}
 800df6e:	4d06      	ldr	r5, [pc, #24]	@ (800df88 <_close_r+0x1c>)
 800df70:	2300      	movs	r3, #0
 800df72:	4604      	mov	r4, r0
 800df74:	4608      	mov	r0, r1
 800df76:	602b      	str	r3, [r5, #0]
 800df78:	f7f3 fe1f 	bl	8001bba <_close>
 800df7c:	1c43      	adds	r3, r0, #1
 800df7e:	d102      	bne.n	800df86 <_close_r+0x1a>
 800df80:	682b      	ldr	r3, [r5, #0]
 800df82:	b103      	cbz	r3, 800df86 <_close_r+0x1a>
 800df84:	6023      	str	r3, [r4, #0]
 800df86:	bd38      	pop	{r3, r4, r5, pc}
 800df88:	20003158 	.word	0x20003158

0800df8c <_lseek_r>:
 800df8c:	b538      	push	{r3, r4, r5, lr}
 800df8e:	4d07      	ldr	r5, [pc, #28]	@ (800dfac <_lseek_r+0x20>)
 800df90:	4604      	mov	r4, r0
 800df92:	4608      	mov	r0, r1
 800df94:	4611      	mov	r1, r2
 800df96:	2200      	movs	r2, #0
 800df98:	602a      	str	r2, [r5, #0]
 800df9a:	461a      	mov	r2, r3
 800df9c:	f7f3 fe34 	bl	8001c08 <_lseek>
 800dfa0:	1c43      	adds	r3, r0, #1
 800dfa2:	d102      	bne.n	800dfaa <_lseek_r+0x1e>
 800dfa4:	682b      	ldr	r3, [r5, #0]
 800dfa6:	b103      	cbz	r3, 800dfaa <_lseek_r+0x1e>
 800dfa8:	6023      	str	r3, [r4, #0]
 800dfaa:	bd38      	pop	{r3, r4, r5, pc}
 800dfac:	20003158 	.word	0x20003158

0800dfb0 <_read_r>:
 800dfb0:	b538      	push	{r3, r4, r5, lr}
 800dfb2:	4d07      	ldr	r5, [pc, #28]	@ (800dfd0 <_read_r+0x20>)
 800dfb4:	4604      	mov	r4, r0
 800dfb6:	4608      	mov	r0, r1
 800dfb8:	4611      	mov	r1, r2
 800dfba:	2200      	movs	r2, #0
 800dfbc:	602a      	str	r2, [r5, #0]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	f7f3 fdc2 	bl	8001b48 <_read>
 800dfc4:	1c43      	adds	r3, r0, #1
 800dfc6:	d102      	bne.n	800dfce <_read_r+0x1e>
 800dfc8:	682b      	ldr	r3, [r5, #0]
 800dfca:	b103      	cbz	r3, 800dfce <_read_r+0x1e>
 800dfcc:	6023      	str	r3, [r4, #0]
 800dfce:	bd38      	pop	{r3, r4, r5, pc}
 800dfd0:	20003158 	.word	0x20003158

0800dfd4 <_write_r>:
 800dfd4:	b538      	push	{r3, r4, r5, lr}
 800dfd6:	4d07      	ldr	r5, [pc, #28]	@ (800dff4 <_write_r+0x20>)
 800dfd8:	4604      	mov	r4, r0
 800dfda:	4608      	mov	r0, r1
 800dfdc:	4611      	mov	r1, r2
 800dfde:	2200      	movs	r2, #0
 800dfe0:	602a      	str	r2, [r5, #0]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	f7f3 fdcd 	bl	8001b82 <_write>
 800dfe8:	1c43      	adds	r3, r0, #1
 800dfea:	d102      	bne.n	800dff2 <_write_r+0x1e>
 800dfec:	682b      	ldr	r3, [r5, #0]
 800dfee:	b103      	cbz	r3, 800dff2 <_write_r+0x1e>
 800dff0:	6023      	str	r3, [r4, #0]
 800dff2:	bd38      	pop	{r3, r4, r5, pc}
 800dff4:	20003158 	.word	0x20003158

0800dff8 <__errno>:
 800dff8:	4b01      	ldr	r3, [pc, #4]	@ (800e000 <__errno+0x8>)
 800dffa:	6818      	ldr	r0, [r3, #0]
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	2000005c 	.word	0x2000005c

0800e004 <__libc_init_array>:
 800e004:	b570      	push	{r4, r5, r6, lr}
 800e006:	4d0d      	ldr	r5, [pc, #52]	@ (800e03c <__libc_init_array+0x38>)
 800e008:	4c0d      	ldr	r4, [pc, #52]	@ (800e040 <__libc_init_array+0x3c>)
 800e00a:	1b64      	subs	r4, r4, r5
 800e00c:	10a4      	asrs	r4, r4, #2
 800e00e:	2600      	movs	r6, #0
 800e010:	42a6      	cmp	r6, r4
 800e012:	d109      	bne.n	800e028 <__libc_init_array+0x24>
 800e014:	4d0b      	ldr	r5, [pc, #44]	@ (800e044 <__libc_init_array+0x40>)
 800e016:	4c0c      	ldr	r4, [pc, #48]	@ (800e048 <__libc_init_array+0x44>)
 800e018:	f003 faca 	bl	80115b0 <_init>
 800e01c:	1b64      	subs	r4, r4, r5
 800e01e:	10a4      	asrs	r4, r4, #2
 800e020:	2600      	movs	r6, #0
 800e022:	42a6      	cmp	r6, r4
 800e024:	d105      	bne.n	800e032 <__libc_init_array+0x2e>
 800e026:	bd70      	pop	{r4, r5, r6, pc}
 800e028:	f855 3b04 	ldr.w	r3, [r5], #4
 800e02c:	4798      	blx	r3
 800e02e:	3601      	adds	r6, #1
 800e030:	e7ee      	b.n	800e010 <__libc_init_array+0xc>
 800e032:	f855 3b04 	ldr.w	r3, [r5], #4
 800e036:	4798      	blx	r3
 800e038:	3601      	adds	r6, #1
 800e03a:	e7f2      	b.n	800e022 <__libc_init_array+0x1e>
 800e03c:	080122dc 	.word	0x080122dc
 800e040:	080122dc 	.word	0x080122dc
 800e044:	080122dc 	.word	0x080122dc
 800e048:	080122e0 	.word	0x080122e0

0800e04c <__retarget_lock_init_recursive>:
 800e04c:	4770      	bx	lr

0800e04e <__retarget_lock_acquire_recursive>:
 800e04e:	4770      	bx	lr

0800e050 <__retarget_lock_release_recursive>:
 800e050:	4770      	bx	lr

0800e052 <memcpy>:
 800e052:	440a      	add	r2, r1
 800e054:	4291      	cmp	r1, r2
 800e056:	f100 33ff 	add.w	r3, r0, #4294967295
 800e05a:	d100      	bne.n	800e05e <memcpy+0xc>
 800e05c:	4770      	bx	lr
 800e05e:	b510      	push	{r4, lr}
 800e060:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e064:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e068:	4291      	cmp	r1, r2
 800e06a:	d1f9      	bne.n	800e060 <memcpy+0xe>
 800e06c:	bd10      	pop	{r4, pc}
	...

0800e070 <nanf>:
 800e070:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e078 <nanf+0x8>
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	7fc00000 	.word	0x7fc00000

0800e07c <__assert_func>:
 800e07c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e07e:	4614      	mov	r4, r2
 800e080:	461a      	mov	r2, r3
 800e082:	4b09      	ldr	r3, [pc, #36]	@ (800e0a8 <__assert_func+0x2c>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4605      	mov	r5, r0
 800e088:	68d8      	ldr	r0, [r3, #12]
 800e08a:	b954      	cbnz	r4, 800e0a2 <__assert_func+0x26>
 800e08c:	4b07      	ldr	r3, [pc, #28]	@ (800e0ac <__assert_func+0x30>)
 800e08e:	461c      	mov	r4, r3
 800e090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e094:	9100      	str	r1, [sp, #0]
 800e096:	462b      	mov	r3, r5
 800e098:	4905      	ldr	r1, [pc, #20]	@ (800e0b0 <__assert_func+0x34>)
 800e09a:	f002 fdd5 	bl	8010c48 <fiprintf>
 800e09e:	f002 fe9b 	bl	8010dd8 <abort>
 800e0a2:	4b04      	ldr	r3, [pc, #16]	@ (800e0b4 <__assert_func+0x38>)
 800e0a4:	e7f4      	b.n	800e090 <__assert_func+0x14>
 800e0a6:	bf00      	nop
 800e0a8:	2000005c 	.word	0x2000005c
 800e0ac:	08011f31 	.word	0x08011f31
 800e0b0:	08011f03 	.word	0x08011f03
 800e0b4:	08011ef6 	.word	0x08011ef6

0800e0b8 <quorem>:
 800e0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0bc:	6903      	ldr	r3, [r0, #16]
 800e0be:	690c      	ldr	r4, [r1, #16]
 800e0c0:	42a3      	cmp	r3, r4
 800e0c2:	4607      	mov	r7, r0
 800e0c4:	db7e      	blt.n	800e1c4 <quorem+0x10c>
 800e0c6:	3c01      	subs	r4, #1
 800e0c8:	f101 0814 	add.w	r8, r1, #20
 800e0cc:	00a3      	lsls	r3, r4, #2
 800e0ce:	f100 0514 	add.w	r5, r0, #20
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0ee:	d32e      	bcc.n	800e14e <quorem+0x96>
 800e0f0:	f04f 0a00 	mov.w	sl, #0
 800e0f4:	46c4      	mov	ip, r8
 800e0f6:	46ae      	mov	lr, r5
 800e0f8:	46d3      	mov	fp, sl
 800e0fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e0fe:	b298      	uxth	r0, r3
 800e100:	fb06 a000 	mla	r0, r6, r0, sl
 800e104:	0c02      	lsrs	r2, r0, #16
 800e106:	0c1b      	lsrs	r3, r3, #16
 800e108:	fb06 2303 	mla	r3, r6, r3, r2
 800e10c:	f8de 2000 	ldr.w	r2, [lr]
 800e110:	b280      	uxth	r0, r0
 800e112:	b292      	uxth	r2, r2
 800e114:	1a12      	subs	r2, r2, r0
 800e116:	445a      	add	r2, fp
 800e118:	f8de 0000 	ldr.w	r0, [lr]
 800e11c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e120:	b29b      	uxth	r3, r3
 800e122:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e126:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e12a:	b292      	uxth	r2, r2
 800e12c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e130:	45e1      	cmp	r9, ip
 800e132:	f84e 2b04 	str.w	r2, [lr], #4
 800e136:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e13a:	d2de      	bcs.n	800e0fa <quorem+0x42>
 800e13c:	9b00      	ldr	r3, [sp, #0]
 800e13e:	58eb      	ldr	r3, [r5, r3]
 800e140:	b92b      	cbnz	r3, 800e14e <quorem+0x96>
 800e142:	9b01      	ldr	r3, [sp, #4]
 800e144:	3b04      	subs	r3, #4
 800e146:	429d      	cmp	r5, r3
 800e148:	461a      	mov	r2, r3
 800e14a:	d32f      	bcc.n	800e1ac <quorem+0xf4>
 800e14c:	613c      	str	r4, [r7, #16]
 800e14e:	4638      	mov	r0, r7
 800e150:	f001 f9c2 	bl	800f4d8 <__mcmp>
 800e154:	2800      	cmp	r0, #0
 800e156:	db25      	blt.n	800e1a4 <quorem+0xec>
 800e158:	4629      	mov	r1, r5
 800e15a:	2000      	movs	r0, #0
 800e15c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e160:	f8d1 c000 	ldr.w	ip, [r1]
 800e164:	fa1f fe82 	uxth.w	lr, r2
 800e168:	fa1f f38c 	uxth.w	r3, ip
 800e16c:	eba3 030e 	sub.w	r3, r3, lr
 800e170:	4403      	add	r3, r0
 800e172:	0c12      	lsrs	r2, r2, #16
 800e174:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e178:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e182:	45c1      	cmp	r9, r8
 800e184:	f841 3b04 	str.w	r3, [r1], #4
 800e188:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e18c:	d2e6      	bcs.n	800e15c <quorem+0xa4>
 800e18e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e196:	b922      	cbnz	r2, 800e1a2 <quorem+0xea>
 800e198:	3b04      	subs	r3, #4
 800e19a:	429d      	cmp	r5, r3
 800e19c:	461a      	mov	r2, r3
 800e19e:	d30b      	bcc.n	800e1b8 <quorem+0x100>
 800e1a0:	613c      	str	r4, [r7, #16]
 800e1a2:	3601      	adds	r6, #1
 800e1a4:	4630      	mov	r0, r6
 800e1a6:	b003      	add	sp, #12
 800e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ac:	6812      	ldr	r2, [r2, #0]
 800e1ae:	3b04      	subs	r3, #4
 800e1b0:	2a00      	cmp	r2, #0
 800e1b2:	d1cb      	bne.n	800e14c <quorem+0x94>
 800e1b4:	3c01      	subs	r4, #1
 800e1b6:	e7c6      	b.n	800e146 <quorem+0x8e>
 800e1b8:	6812      	ldr	r2, [r2, #0]
 800e1ba:	3b04      	subs	r3, #4
 800e1bc:	2a00      	cmp	r2, #0
 800e1be:	d1ef      	bne.n	800e1a0 <quorem+0xe8>
 800e1c0:	3c01      	subs	r4, #1
 800e1c2:	e7ea      	b.n	800e19a <quorem+0xe2>
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	e7ee      	b.n	800e1a6 <quorem+0xee>

0800e1c8 <_dtoa_r>:
 800e1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1cc:	69c7      	ldr	r7, [r0, #28]
 800e1ce:	b099      	sub	sp, #100	@ 0x64
 800e1d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e1d4:	ec55 4b10 	vmov	r4, r5, d0
 800e1d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e1da:	9109      	str	r1, [sp, #36]	@ 0x24
 800e1dc:	4683      	mov	fp, r0
 800e1de:	920e      	str	r2, [sp, #56]	@ 0x38
 800e1e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1e2:	b97f      	cbnz	r7, 800e204 <_dtoa_r+0x3c>
 800e1e4:	2010      	movs	r0, #16
 800e1e6:	f000 fdfd 	bl	800ede4 <malloc>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800e1f0:	b920      	cbnz	r0, 800e1fc <_dtoa_r+0x34>
 800e1f2:	4ba7      	ldr	r3, [pc, #668]	@ (800e490 <_dtoa_r+0x2c8>)
 800e1f4:	21ef      	movs	r1, #239	@ 0xef
 800e1f6:	48a7      	ldr	r0, [pc, #668]	@ (800e494 <_dtoa_r+0x2cc>)
 800e1f8:	f7ff ff40 	bl	800e07c <__assert_func>
 800e1fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e200:	6007      	str	r7, [r0, #0]
 800e202:	60c7      	str	r7, [r0, #12]
 800e204:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e208:	6819      	ldr	r1, [r3, #0]
 800e20a:	b159      	cbz	r1, 800e224 <_dtoa_r+0x5c>
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	604a      	str	r2, [r1, #4]
 800e210:	2301      	movs	r3, #1
 800e212:	4093      	lsls	r3, r2
 800e214:	608b      	str	r3, [r1, #8]
 800e216:	4658      	mov	r0, fp
 800e218:	f000 feda 	bl	800efd0 <_Bfree>
 800e21c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e220:	2200      	movs	r2, #0
 800e222:	601a      	str	r2, [r3, #0]
 800e224:	1e2b      	subs	r3, r5, #0
 800e226:	bfb9      	ittee	lt
 800e228:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e22c:	9303      	strlt	r3, [sp, #12]
 800e22e:	2300      	movge	r3, #0
 800e230:	6033      	strge	r3, [r6, #0]
 800e232:	9f03      	ldr	r7, [sp, #12]
 800e234:	4b98      	ldr	r3, [pc, #608]	@ (800e498 <_dtoa_r+0x2d0>)
 800e236:	bfbc      	itt	lt
 800e238:	2201      	movlt	r2, #1
 800e23a:	6032      	strlt	r2, [r6, #0]
 800e23c:	43bb      	bics	r3, r7
 800e23e:	d112      	bne.n	800e266 <_dtoa_r+0x9e>
 800e240:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e242:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e246:	6013      	str	r3, [r2, #0]
 800e248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e24c:	4323      	orrs	r3, r4
 800e24e:	f000 854d 	beq.w	800ecec <_dtoa_r+0xb24>
 800e252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e254:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e4ac <_dtoa_r+0x2e4>
 800e258:	2b00      	cmp	r3, #0
 800e25a:	f000 854f 	beq.w	800ecfc <_dtoa_r+0xb34>
 800e25e:	f10a 0303 	add.w	r3, sl, #3
 800e262:	f000 bd49 	b.w	800ecf8 <_dtoa_r+0xb30>
 800e266:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e26a:	2200      	movs	r2, #0
 800e26c:	ec51 0b17 	vmov	r0, r1, d7
 800e270:	2300      	movs	r3, #0
 800e272:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e276:	f7f2 fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800e27a:	4680      	mov	r8, r0
 800e27c:	b158      	cbz	r0, 800e296 <_dtoa_r+0xce>
 800e27e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e280:	2301      	movs	r3, #1
 800e282:	6013      	str	r3, [r2, #0]
 800e284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e286:	b113      	cbz	r3, 800e28e <_dtoa_r+0xc6>
 800e288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e28a:	4b84      	ldr	r3, [pc, #528]	@ (800e49c <_dtoa_r+0x2d4>)
 800e28c:	6013      	str	r3, [r2, #0]
 800e28e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e4b0 <_dtoa_r+0x2e8>
 800e292:	f000 bd33 	b.w	800ecfc <_dtoa_r+0xb34>
 800e296:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e29a:	aa16      	add	r2, sp, #88	@ 0x58
 800e29c:	a917      	add	r1, sp, #92	@ 0x5c
 800e29e:	4658      	mov	r0, fp
 800e2a0:	f001 fa3a 	bl	800f718 <__d2b>
 800e2a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e2a8:	4681      	mov	r9, r0
 800e2aa:	2e00      	cmp	r6, #0
 800e2ac:	d077      	beq.n	800e39e <_dtoa_r+0x1d6>
 800e2ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e2c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e2c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	4b74      	ldr	r3, [pc, #464]	@ (800e4a0 <_dtoa_r+0x2d8>)
 800e2ce:	f7f1 ffdb 	bl	8000288 <__aeabi_dsub>
 800e2d2:	a369      	add	r3, pc, #420	@ (adr r3, 800e478 <_dtoa_r+0x2b0>)
 800e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d8:	f7f2 f98e 	bl	80005f8 <__aeabi_dmul>
 800e2dc:	a368      	add	r3, pc, #416	@ (adr r3, 800e480 <_dtoa_r+0x2b8>)
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	f7f1 ffd3 	bl	800028c <__adddf3>
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	f7f2 f91a 	bl	8000524 <__aeabi_i2d>
 800e2f0:	a365      	add	r3, pc, #404	@ (adr r3, 800e488 <_dtoa_r+0x2c0>)
 800e2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f6:	f7f2 f97f 	bl	80005f8 <__aeabi_dmul>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	4620      	mov	r0, r4
 800e300:	4629      	mov	r1, r5
 800e302:	f7f1 ffc3 	bl	800028c <__adddf3>
 800e306:	4604      	mov	r4, r0
 800e308:	460d      	mov	r5, r1
 800e30a:	f7f2 fc25 	bl	8000b58 <__aeabi_d2iz>
 800e30e:	2200      	movs	r2, #0
 800e310:	4607      	mov	r7, r0
 800e312:	2300      	movs	r3, #0
 800e314:	4620      	mov	r0, r4
 800e316:	4629      	mov	r1, r5
 800e318:	f7f2 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800e31c:	b140      	cbz	r0, 800e330 <_dtoa_r+0x168>
 800e31e:	4638      	mov	r0, r7
 800e320:	f7f2 f900 	bl	8000524 <__aeabi_i2d>
 800e324:	4622      	mov	r2, r4
 800e326:	462b      	mov	r3, r5
 800e328:	f7f2 fbce 	bl	8000ac8 <__aeabi_dcmpeq>
 800e32c:	b900      	cbnz	r0, 800e330 <_dtoa_r+0x168>
 800e32e:	3f01      	subs	r7, #1
 800e330:	2f16      	cmp	r7, #22
 800e332:	d851      	bhi.n	800e3d8 <_dtoa_r+0x210>
 800e334:	4b5b      	ldr	r3, [pc, #364]	@ (800e4a4 <_dtoa_r+0x2dc>)
 800e336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e342:	f7f2 fbcb 	bl	8000adc <__aeabi_dcmplt>
 800e346:	2800      	cmp	r0, #0
 800e348:	d048      	beq.n	800e3dc <_dtoa_r+0x214>
 800e34a:	3f01      	subs	r7, #1
 800e34c:	2300      	movs	r3, #0
 800e34e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e350:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e352:	1b9b      	subs	r3, r3, r6
 800e354:	1e5a      	subs	r2, r3, #1
 800e356:	bf44      	itt	mi
 800e358:	f1c3 0801 	rsbmi	r8, r3, #1
 800e35c:	2300      	movmi	r3, #0
 800e35e:	9208      	str	r2, [sp, #32]
 800e360:	bf54      	ite	pl
 800e362:	f04f 0800 	movpl.w	r8, #0
 800e366:	9308      	strmi	r3, [sp, #32]
 800e368:	2f00      	cmp	r7, #0
 800e36a:	db39      	blt.n	800e3e0 <_dtoa_r+0x218>
 800e36c:	9b08      	ldr	r3, [sp, #32]
 800e36e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e370:	443b      	add	r3, r7
 800e372:	9308      	str	r3, [sp, #32]
 800e374:	2300      	movs	r3, #0
 800e376:	930a      	str	r3, [sp, #40]	@ 0x28
 800e378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e37a:	2b09      	cmp	r3, #9
 800e37c:	d864      	bhi.n	800e448 <_dtoa_r+0x280>
 800e37e:	2b05      	cmp	r3, #5
 800e380:	bfc4      	itt	gt
 800e382:	3b04      	subgt	r3, #4
 800e384:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e388:	f1a3 0302 	sub.w	r3, r3, #2
 800e38c:	bfcc      	ite	gt
 800e38e:	2400      	movgt	r4, #0
 800e390:	2401      	movle	r4, #1
 800e392:	2b03      	cmp	r3, #3
 800e394:	d863      	bhi.n	800e45e <_dtoa_r+0x296>
 800e396:	e8df f003 	tbb	[pc, r3]
 800e39a:	372a      	.short	0x372a
 800e39c:	5535      	.short	0x5535
 800e39e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e3a2:	441e      	add	r6, r3
 800e3a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e3a8:	2b20      	cmp	r3, #32
 800e3aa:	bfc1      	itttt	gt
 800e3ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e3b0:	409f      	lslgt	r7, r3
 800e3b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e3b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e3ba:	bfd6      	itet	le
 800e3bc:	f1c3 0320 	rsble	r3, r3, #32
 800e3c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800e3c4:	fa04 f003 	lslle.w	r0, r4, r3
 800e3c8:	f7f2 f89c 	bl	8000504 <__aeabi_ui2d>
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e3d2:	3e01      	subs	r6, #1
 800e3d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e3d6:	e777      	b.n	800e2c8 <_dtoa_r+0x100>
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e7b8      	b.n	800e34e <_dtoa_r+0x186>
 800e3dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800e3de:	e7b7      	b.n	800e350 <_dtoa_r+0x188>
 800e3e0:	427b      	negs	r3, r7
 800e3e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	eba8 0807 	sub.w	r8, r8, r7
 800e3ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3ec:	e7c4      	b.n	800e378 <_dtoa_r+0x1b0>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	dc35      	bgt.n	800e464 <_dtoa_r+0x29c>
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	9300      	str	r3, [sp, #0]
 800e3fc:	9307      	str	r3, [sp, #28]
 800e3fe:	461a      	mov	r2, r3
 800e400:	920e      	str	r2, [sp, #56]	@ 0x38
 800e402:	e00b      	b.n	800e41c <_dtoa_r+0x254>
 800e404:	2301      	movs	r3, #1
 800e406:	e7f3      	b.n	800e3f0 <_dtoa_r+0x228>
 800e408:	2300      	movs	r3, #0
 800e40a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e40c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e40e:	18fb      	adds	r3, r7, r3
 800e410:	9300      	str	r3, [sp, #0]
 800e412:	3301      	adds	r3, #1
 800e414:	2b01      	cmp	r3, #1
 800e416:	9307      	str	r3, [sp, #28]
 800e418:	bfb8      	it	lt
 800e41a:	2301      	movlt	r3, #1
 800e41c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e420:	2100      	movs	r1, #0
 800e422:	2204      	movs	r2, #4
 800e424:	f102 0514 	add.w	r5, r2, #20
 800e428:	429d      	cmp	r5, r3
 800e42a:	d91f      	bls.n	800e46c <_dtoa_r+0x2a4>
 800e42c:	6041      	str	r1, [r0, #4]
 800e42e:	4658      	mov	r0, fp
 800e430:	f000 fd8e 	bl	800ef50 <_Balloc>
 800e434:	4682      	mov	sl, r0
 800e436:	2800      	cmp	r0, #0
 800e438:	d13c      	bne.n	800e4b4 <_dtoa_r+0x2ec>
 800e43a:	4b1b      	ldr	r3, [pc, #108]	@ (800e4a8 <_dtoa_r+0x2e0>)
 800e43c:	4602      	mov	r2, r0
 800e43e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e442:	e6d8      	b.n	800e1f6 <_dtoa_r+0x2e>
 800e444:	2301      	movs	r3, #1
 800e446:	e7e0      	b.n	800e40a <_dtoa_r+0x242>
 800e448:	2401      	movs	r4, #1
 800e44a:	2300      	movs	r3, #0
 800e44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e44e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e450:	f04f 33ff 	mov.w	r3, #4294967295
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	9307      	str	r3, [sp, #28]
 800e458:	2200      	movs	r2, #0
 800e45a:	2312      	movs	r3, #18
 800e45c:	e7d0      	b.n	800e400 <_dtoa_r+0x238>
 800e45e:	2301      	movs	r3, #1
 800e460:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e462:	e7f5      	b.n	800e450 <_dtoa_r+0x288>
 800e464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	9307      	str	r3, [sp, #28]
 800e46a:	e7d7      	b.n	800e41c <_dtoa_r+0x254>
 800e46c:	3101      	adds	r1, #1
 800e46e:	0052      	lsls	r2, r2, #1
 800e470:	e7d8      	b.n	800e424 <_dtoa_r+0x25c>
 800e472:	bf00      	nop
 800e474:	f3af 8000 	nop.w
 800e478:	636f4361 	.word	0x636f4361
 800e47c:	3fd287a7 	.word	0x3fd287a7
 800e480:	8b60c8b3 	.word	0x8b60c8b3
 800e484:	3fc68a28 	.word	0x3fc68a28
 800e488:	509f79fb 	.word	0x509f79fb
 800e48c:	3fd34413 	.word	0x3fd34413
 800e490:	08011e85 	.word	0x08011e85
 800e494:	08011f3f 	.word	0x08011f3f
 800e498:	7ff00000 	.word	0x7ff00000
 800e49c:	08011e5d 	.word	0x08011e5d
 800e4a0:	3ff80000 	.word	0x3ff80000
 800e4a4:	08012038 	.word	0x08012038
 800e4a8:	08011f97 	.word	0x08011f97
 800e4ac:	08011f3b 	.word	0x08011f3b
 800e4b0:	08011e5c 	.word	0x08011e5c
 800e4b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e4b8:	6018      	str	r0, [r3, #0]
 800e4ba:	9b07      	ldr	r3, [sp, #28]
 800e4bc:	2b0e      	cmp	r3, #14
 800e4be:	f200 80a4 	bhi.w	800e60a <_dtoa_r+0x442>
 800e4c2:	2c00      	cmp	r4, #0
 800e4c4:	f000 80a1 	beq.w	800e60a <_dtoa_r+0x442>
 800e4c8:	2f00      	cmp	r7, #0
 800e4ca:	dd33      	ble.n	800e534 <_dtoa_r+0x36c>
 800e4cc:	4bad      	ldr	r3, [pc, #692]	@ (800e784 <_dtoa_r+0x5bc>)
 800e4ce:	f007 020f 	and.w	r2, r7, #15
 800e4d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4d6:	ed93 7b00 	vldr	d7, [r3]
 800e4da:	05f8      	lsls	r0, r7, #23
 800e4dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e4e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e4e4:	d516      	bpl.n	800e514 <_dtoa_r+0x34c>
 800e4e6:	4ba8      	ldr	r3, [pc, #672]	@ (800e788 <_dtoa_r+0x5c0>)
 800e4e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e4f0:	f7f2 f9ac 	bl	800084c <__aeabi_ddiv>
 800e4f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4f8:	f004 040f 	and.w	r4, r4, #15
 800e4fc:	2603      	movs	r6, #3
 800e4fe:	4da2      	ldr	r5, [pc, #648]	@ (800e788 <_dtoa_r+0x5c0>)
 800e500:	b954      	cbnz	r4, 800e518 <_dtoa_r+0x350>
 800e502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e50a:	f7f2 f99f 	bl	800084c <__aeabi_ddiv>
 800e50e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e512:	e028      	b.n	800e566 <_dtoa_r+0x39e>
 800e514:	2602      	movs	r6, #2
 800e516:	e7f2      	b.n	800e4fe <_dtoa_r+0x336>
 800e518:	07e1      	lsls	r1, r4, #31
 800e51a:	d508      	bpl.n	800e52e <_dtoa_r+0x366>
 800e51c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e520:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e524:	f7f2 f868 	bl	80005f8 <__aeabi_dmul>
 800e528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e52c:	3601      	adds	r6, #1
 800e52e:	1064      	asrs	r4, r4, #1
 800e530:	3508      	adds	r5, #8
 800e532:	e7e5      	b.n	800e500 <_dtoa_r+0x338>
 800e534:	f000 80d2 	beq.w	800e6dc <_dtoa_r+0x514>
 800e538:	427c      	negs	r4, r7
 800e53a:	4b92      	ldr	r3, [pc, #584]	@ (800e784 <_dtoa_r+0x5bc>)
 800e53c:	4d92      	ldr	r5, [pc, #584]	@ (800e788 <_dtoa_r+0x5c0>)
 800e53e:	f004 020f 	and.w	r2, r4, #15
 800e542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e54e:	f7f2 f853 	bl	80005f8 <__aeabi_dmul>
 800e552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e556:	1124      	asrs	r4, r4, #4
 800e558:	2300      	movs	r3, #0
 800e55a:	2602      	movs	r6, #2
 800e55c:	2c00      	cmp	r4, #0
 800e55e:	f040 80b2 	bne.w	800e6c6 <_dtoa_r+0x4fe>
 800e562:	2b00      	cmp	r3, #0
 800e564:	d1d3      	bne.n	800e50e <_dtoa_r+0x346>
 800e566:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e568:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f000 80b7 	beq.w	800e6e0 <_dtoa_r+0x518>
 800e572:	4b86      	ldr	r3, [pc, #536]	@ (800e78c <_dtoa_r+0x5c4>)
 800e574:	2200      	movs	r2, #0
 800e576:	4620      	mov	r0, r4
 800e578:	4629      	mov	r1, r5
 800e57a:	f7f2 faaf 	bl	8000adc <__aeabi_dcmplt>
 800e57e:	2800      	cmp	r0, #0
 800e580:	f000 80ae 	beq.w	800e6e0 <_dtoa_r+0x518>
 800e584:	9b07      	ldr	r3, [sp, #28]
 800e586:	2b00      	cmp	r3, #0
 800e588:	f000 80aa 	beq.w	800e6e0 <_dtoa_r+0x518>
 800e58c:	9b00      	ldr	r3, [sp, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	dd37      	ble.n	800e602 <_dtoa_r+0x43a>
 800e592:	1e7b      	subs	r3, r7, #1
 800e594:	9304      	str	r3, [sp, #16]
 800e596:	4620      	mov	r0, r4
 800e598:	4b7d      	ldr	r3, [pc, #500]	@ (800e790 <_dtoa_r+0x5c8>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	4629      	mov	r1, r5
 800e59e:	f7f2 f82b 	bl	80005f8 <__aeabi_dmul>
 800e5a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5a6:	9c00      	ldr	r4, [sp, #0]
 800e5a8:	3601      	adds	r6, #1
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	f7f1 ffba 	bl	8000524 <__aeabi_i2d>
 800e5b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5b4:	f7f2 f820 	bl	80005f8 <__aeabi_dmul>
 800e5b8:	4b76      	ldr	r3, [pc, #472]	@ (800e794 <_dtoa_r+0x5cc>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f7f1 fe66 	bl	800028c <__adddf3>
 800e5c0:	4605      	mov	r5, r0
 800e5c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e5c6:	2c00      	cmp	r4, #0
 800e5c8:	f040 808d 	bne.w	800e6e6 <_dtoa_r+0x51e>
 800e5cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5d0:	4b71      	ldr	r3, [pc, #452]	@ (800e798 <_dtoa_r+0x5d0>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f7f1 fe58 	bl	8000288 <__aeabi_dsub>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	460b      	mov	r3, r1
 800e5dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5e0:	462a      	mov	r2, r5
 800e5e2:	4633      	mov	r3, r6
 800e5e4:	f7f2 fa98 	bl	8000b18 <__aeabi_dcmpgt>
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	f040 828b 	bne.w	800eb04 <_dtoa_r+0x93c>
 800e5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5f2:	462a      	mov	r2, r5
 800e5f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e5f8:	f7f2 fa70 	bl	8000adc <__aeabi_dcmplt>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	f040 8128 	bne.w	800e852 <_dtoa_r+0x68a>
 800e602:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e606:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e60a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f2c0 815a 	blt.w	800e8c6 <_dtoa_r+0x6fe>
 800e612:	2f0e      	cmp	r7, #14
 800e614:	f300 8157 	bgt.w	800e8c6 <_dtoa_r+0x6fe>
 800e618:	4b5a      	ldr	r3, [pc, #360]	@ (800e784 <_dtoa_r+0x5bc>)
 800e61a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e61e:	ed93 7b00 	vldr	d7, [r3]
 800e622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e624:	2b00      	cmp	r3, #0
 800e626:	ed8d 7b00 	vstr	d7, [sp]
 800e62a:	da03      	bge.n	800e634 <_dtoa_r+0x46c>
 800e62c:	9b07      	ldr	r3, [sp, #28]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f340 8101 	ble.w	800e836 <_dtoa_r+0x66e>
 800e634:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e638:	4656      	mov	r6, sl
 800e63a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e63e:	4620      	mov	r0, r4
 800e640:	4629      	mov	r1, r5
 800e642:	f7f2 f903 	bl	800084c <__aeabi_ddiv>
 800e646:	f7f2 fa87 	bl	8000b58 <__aeabi_d2iz>
 800e64a:	4680      	mov	r8, r0
 800e64c:	f7f1 ff6a 	bl	8000524 <__aeabi_i2d>
 800e650:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e654:	f7f1 ffd0 	bl	80005f8 <__aeabi_dmul>
 800e658:	4602      	mov	r2, r0
 800e65a:	460b      	mov	r3, r1
 800e65c:	4620      	mov	r0, r4
 800e65e:	4629      	mov	r1, r5
 800e660:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e664:	f7f1 fe10 	bl	8000288 <__aeabi_dsub>
 800e668:	f806 4b01 	strb.w	r4, [r6], #1
 800e66c:	9d07      	ldr	r5, [sp, #28]
 800e66e:	eba6 040a 	sub.w	r4, r6, sl
 800e672:	42a5      	cmp	r5, r4
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	f040 8117 	bne.w	800e8aa <_dtoa_r+0x6e2>
 800e67c:	f7f1 fe06 	bl	800028c <__adddf3>
 800e680:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e684:	4604      	mov	r4, r0
 800e686:	460d      	mov	r5, r1
 800e688:	f7f2 fa46 	bl	8000b18 <__aeabi_dcmpgt>
 800e68c:	2800      	cmp	r0, #0
 800e68e:	f040 80f9 	bne.w	800e884 <_dtoa_r+0x6bc>
 800e692:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e696:	4620      	mov	r0, r4
 800e698:	4629      	mov	r1, r5
 800e69a:	f7f2 fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 800e69e:	b118      	cbz	r0, 800e6a8 <_dtoa_r+0x4e0>
 800e6a0:	f018 0f01 	tst.w	r8, #1
 800e6a4:	f040 80ee 	bne.w	800e884 <_dtoa_r+0x6bc>
 800e6a8:	4649      	mov	r1, r9
 800e6aa:	4658      	mov	r0, fp
 800e6ac:	f000 fc90 	bl	800efd0 <_Bfree>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	7033      	strb	r3, [r6, #0]
 800e6b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e6b6:	3701      	adds	r7, #1
 800e6b8:	601f      	str	r7, [r3, #0]
 800e6ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 831d 	beq.w	800ecfc <_dtoa_r+0xb34>
 800e6c2:	601e      	str	r6, [r3, #0]
 800e6c4:	e31a      	b.n	800ecfc <_dtoa_r+0xb34>
 800e6c6:	07e2      	lsls	r2, r4, #31
 800e6c8:	d505      	bpl.n	800e6d6 <_dtoa_r+0x50e>
 800e6ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e6ce:	f7f1 ff93 	bl	80005f8 <__aeabi_dmul>
 800e6d2:	3601      	adds	r6, #1
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	1064      	asrs	r4, r4, #1
 800e6d8:	3508      	adds	r5, #8
 800e6da:	e73f      	b.n	800e55c <_dtoa_r+0x394>
 800e6dc:	2602      	movs	r6, #2
 800e6de:	e742      	b.n	800e566 <_dtoa_r+0x39e>
 800e6e0:	9c07      	ldr	r4, [sp, #28]
 800e6e2:	9704      	str	r7, [sp, #16]
 800e6e4:	e761      	b.n	800e5aa <_dtoa_r+0x3e2>
 800e6e6:	4b27      	ldr	r3, [pc, #156]	@ (800e784 <_dtoa_r+0x5bc>)
 800e6e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e6ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e6ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e6f2:	4454      	add	r4, sl
 800e6f4:	2900      	cmp	r1, #0
 800e6f6:	d053      	beq.n	800e7a0 <_dtoa_r+0x5d8>
 800e6f8:	4928      	ldr	r1, [pc, #160]	@ (800e79c <_dtoa_r+0x5d4>)
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	f7f2 f8a6 	bl	800084c <__aeabi_ddiv>
 800e700:	4633      	mov	r3, r6
 800e702:	462a      	mov	r2, r5
 800e704:	f7f1 fdc0 	bl	8000288 <__aeabi_dsub>
 800e708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e70c:	4656      	mov	r6, sl
 800e70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e712:	f7f2 fa21 	bl	8000b58 <__aeabi_d2iz>
 800e716:	4605      	mov	r5, r0
 800e718:	f7f1 ff04 	bl	8000524 <__aeabi_i2d>
 800e71c:	4602      	mov	r2, r0
 800e71e:	460b      	mov	r3, r1
 800e720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e724:	f7f1 fdb0 	bl	8000288 <__aeabi_dsub>
 800e728:	3530      	adds	r5, #48	@ 0x30
 800e72a:	4602      	mov	r2, r0
 800e72c:	460b      	mov	r3, r1
 800e72e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e732:	f806 5b01 	strb.w	r5, [r6], #1
 800e736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e73a:	f7f2 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800e73e:	2800      	cmp	r0, #0
 800e740:	d171      	bne.n	800e826 <_dtoa_r+0x65e>
 800e742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e746:	4911      	ldr	r1, [pc, #68]	@ (800e78c <_dtoa_r+0x5c4>)
 800e748:	2000      	movs	r0, #0
 800e74a:	f7f1 fd9d 	bl	8000288 <__aeabi_dsub>
 800e74e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e752:	f7f2 f9c3 	bl	8000adc <__aeabi_dcmplt>
 800e756:	2800      	cmp	r0, #0
 800e758:	f040 8095 	bne.w	800e886 <_dtoa_r+0x6be>
 800e75c:	42a6      	cmp	r6, r4
 800e75e:	f43f af50 	beq.w	800e602 <_dtoa_r+0x43a>
 800e762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e766:	4b0a      	ldr	r3, [pc, #40]	@ (800e790 <_dtoa_r+0x5c8>)
 800e768:	2200      	movs	r2, #0
 800e76a:	f7f1 ff45 	bl	80005f8 <__aeabi_dmul>
 800e76e:	4b08      	ldr	r3, [pc, #32]	@ (800e790 <_dtoa_r+0x5c8>)
 800e770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e774:	2200      	movs	r2, #0
 800e776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e77a:	f7f1 ff3d 	bl	80005f8 <__aeabi_dmul>
 800e77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e782:	e7c4      	b.n	800e70e <_dtoa_r+0x546>
 800e784:	08012038 	.word	0x08012038
 800e788:	08012010 	.word	0x08012010
 800e78c:	3ff00000 	.word	0x3ff00000
 800e790:	40240000 	.word	0x40240000
 800e794:	401c0000 	.word	0x401c0000
 800e798:	40140000 	.word	0x40140000
 800e79c:	3fe00000 	.word	0x3fe00000
 800e7a0:	4631      	mov	r1, r6
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	f7f1 ff28 	bl	80005f8 <__aeabi_dmul>
 800e7a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e7ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800e7ae:	4656      	mov	r6, sl
 800e7b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7b4:	f7f2 f9d0 	bl	8000b58 <__aeabi_d2iz>
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	f7f1 feb3 	bl	8000524 <__aeabi_i2d>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7c6:	f7f1 fd5f 	bl	8000288 <__aeabi_dsub>
 800e7ca:	3530      	adds	r5, #48	@ 0x30
 800e7cc:	f806 5b01 	strb.w	r5, [r6], #1
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	42a6      	cmp	r6, r4
 800e7d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7da:	f04f 0200 	mov.w	r2, #0
 800e7de:	d124      	bne.n	800e82a <_dtoa_r+0x662>
 800e7e0:	4bac      	ldr	r3, [pc, #688]	@ (800ea94 <_dtoa_r+0x8cc>)
 800e7e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e7e6:	f7f1 fd51 	bl	800028c <__adddf3>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7f2:	f7f2 f991 	bl	8000b18 <__aeabi_dcmpgt>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d145      	bne.n	800e886 <_dtoa_r+0x6be>
 800e7fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e7fe:	49a5      	ldr	r1, [pc, #660]	@ (800ea94 <_dtoa_r+0x8cc>)
 800e800:	2000      	movs	r0, #0
 800e802:	f7f1 fd41 	bl	8000288 <__aeabi_dsub>
 800e806:	4602      	mov	r2, r0
 800e808:	460b      	mov	r3, r1
 800e80a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e80e:	f7f2 f965 	bl	8000adc <__aeabi_dcmplt>
 800e812:	2800      	cmp	r0, #0
 800e814:	f43f aef5 	beq.w	800e602 <_dtoa_r+0x43a>
 800e818:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e81a:	1e73      	subs	r3, r6, #1
 800e81c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e81e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e822:	2b30      	cmp	r3, #48	@ 0x30
 800e824:	d0f8      	beq.n	800e818 <_dtoa_r+0x650>
 800e826:	9f04      	ldr	r7, [sp, #16]
 800e828:	e73e      	b.n	800e6a8 <_dtoa_r+0x4e0>
 800e82a:	4b9b      	ldr	r3, [pc, #620]	@ (800ea98 <_dtoa_r+0x8d0>)
 800e82c:	f7f1 fee4 	bl	80005f8 <__aeabi_dmul>
 800e830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e834:	e7bc      	b.n	800e7b0 <_dtoa_r+0x5e8>
 800e836:	d10c      	bne.n	800e852 <_dtoa_r+0x68a>
 800e838:	4b98      	ldr	r3, [pc, #608]	@ (800ea9c <_dtoa_r+0x8d4>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e840:	f7f1 feda 	bl	80005f8 <__aeabi_dmul>
 800e844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e848:	f7f2 f95c 	bl	8000b04 <__aeabi_dcmpge>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	f000 8157 	beq.w	800eb00 <_dtoa_r+0x938>
 800e852:	2400      	movs	r4, #0
 800e854:	4625      	mov	r5, r4
 800e856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e858:	43db      	mvns	r3, r3
 800e85a:	9304      	str	r3, [sp, #16]
 800e85c:	4656      	mov	r6, sl
 800e85e:	2700      	movs	r7, #0
 800e860:	4621      	mov	r1, r4
 800e862:	4658      	mov	r0, fp
 800e864:	f000 fbb4 	bl	800efd0 <_Bfree>
 800e868:	2d00      	cmp	r5, #0
 800e86a:	d0dc      	beq.n	800e826 <_dtoa_r+0x65e>
 800e86c:	b12f      	cbz	r7, 800e87a <_dtoa_r+0x6b2>
 800e86e:	42af      	cmp	r7, r5
 800e870:	d003      	beq.n	800e87a <_dtoa_r+0x6b2>
 800e872:	4639      	mov	r1, r7
 800e874:	4658      	mov	r0, fp
 800e876:	f000 fbab 	bl	800efd0 <_Bfree>
 800e87a:	4629      	mov	r1, r5
 800e87c:	4658      	mov	r0, fp
 800e87e:	f000 fba7 	bl	800efd0 <_Bfree>
 800e882:	e7d0      	b.n	800e826 <_dtoa_r+0x65e>
 800e884:	9704      	str	r7, [sp, #16]
 800e886:	4633      	mov	r3, r6
 800e888:	461e      	mov	r6, r3
 800e88a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e88e:	2a39      	cmp	r2, #57	@ 0x39
 800e890:	d107      	bne.n	800e8a2 <_dtoa_r+0x6da>
 800e892:	459a      	cmp	sl, r3
 800e894:	d1f8      	bne.n	800e888 <_dtoa_r+0x6c0>
 800e896:	9a04      	ldr	r2, [sp, #16]
 800e898:	3201      	adds	r2, #1
 800e89a:	9204      	str	r2, [sp, #16]
 800e89c:	2230      	movs	r2, #48	@ 0x30
 800e89e:	f88a 2000 	strb.w	r2, [sl]
 800e8a2:	781a      	ldrb	r2, [r3, #0]
 800e8a4:	3201      	adds	r2, #1
 800e8a6:	701a      	strb	r2, [r3, #0]
 800e8a8:	e7bd      	b.n	800e826 <_dtoa_r+0x65e>
 800e8aa:	4b7b      	ldr	r3, [pc, #492]	@ (800ea98 <_dtoa_r+0x8d0>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f7f1 fea3 	bl	80005f8 <__aeabi_dmul>
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	4604      	mov	r4, r0
 800e8b8:	460d      	mov	r5, r1
 800e8ba:	f7f2 f905 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	f43f aebb 	beq.w	800e63a <_dtoa_r+0x472>
 800e8c4:	e6f0      	b.n	800e6a8 <_dtoa_r+0x4e0>
 800e8c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e8c8:	2a00      	cmp	r2, #0
 800e8ca:	f000 80db 	beq.w	800ea84 <_dtoa_r+0x8bc>
 800e8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8d0:	2a01      	cmp	r2, #1
 800e8d2:	f300 80bf 	bgt.w	800ea54 <_dtoa_r+0x88c>
 800e8d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e8d8:	2a00      	cmp	r2, #0
 800e8da:	f000 80b7 	beq.w	800ea4c <_dtoa_r+0x884>
 800e8de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e8e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e8e4:	4646      	mov	r6, r8
 800e8e6:	9a08      	ldr	r2, [sp, #32]
 800e8e8:	2101      	movs	r1, #1
 800e8ea:	441a      	add	r2, r3
 800e8ec:	4658      	mov	r0, fp
 800e8ee:	4498      	add	r8, r3
 800e8f0:	9208      	str	r2, [sp, #32]
 800e8f2:	f000 fc6b 	bl	800f1cc <__i2b>
 800e8f6:	4605      	mov	r5, r0
 800e8f8:	b15e      	cbz	r6, 800e912 <_dtoa_r+0x74a>
 800e8fa:	9b08      	ldr	r3, [sp, #32]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	dd08      	ble.n	800e912 <_dtoa_r+0x74a>
 800e900:	42b3      	cmp	r3, r6
 800e902:	9a08      	ldr	r2, [sp, #32]
 800e904:	bfa8      	it	ge
 800e906:	4633      	movge	r3, r6
 800e908:	eba8 0803 	sub.w	r8, r8, r3
 800e90c:	1af6      	subs	r6, r6, r3
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	9308      	str	r3, [sp, #32]
 800e912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e914:	b1f3      	cbz	r3, 800e954 <_dtoa_r+0x78c>
 800e916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e918:	2b00      	cmp	r3, #0
 800e91a:	f000 80b7 	beq.w	800ea8c <_dtoa_r+0x8c4>
 800e91e:	b18c      	cbz	r4, 800e944 <_dtoa_r+0x77c>
 800e920:	4629      	mov	r1, r5
 800e922:	4622      	mov	r2, r4
 800e924:	4658      	mov	r0, fp
 800e926:	f000 fd11 	bl	800f34c <__pow5mult>
 800e92a:	464a      	mov	r2, r9
 800e92c:	4601      	mov	r1, r0
 800e92e:	4605      	mov	r5, r0
 800e930:	4658      	mov	r0, fp
 800e932:	f000 fc61 	bl	800f1f8 <__multiply>
 800e936:	4649      	mov	r1, r9
 800e938:	9004      	str	r0, [sp, #16]
 800e93a:	4658      	mov	r0, fp
 800e93c:	f000 fb48 	bl	800efd0 <_Bfree>
 800e940:	9b04      	ldr	r3, [sp, #16]
 800e942:	4699      	mov	r9, r3
 800e944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e946:	1b1a      	subs	r2, r3, r4
 800e948:	d004      	beq.n	800e954 <_dtoa_r+0x78c>
 800e94a:	4649      	mov	r1, r9
 800e94c:	4658      	mov	r0, fp
 800e94e:	f000 fcfd 	bl	800f34c <__pow5mult>
 800e952:	4681      	mov	r9, r0
 800e954:	2101      	movs	r1, #1
 800e956:	4658      	mov	r0, fp
 800e958:	f000 fc38 	bl	800f1cc <__i2b>
 800e95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e95e:	4604      	mov	r4, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 81cf 	beq.w	800ed04 <_dtoa_r+0xb3c>
 800e966:	461a      	mov	r2, r3
 800e968:	4601      	mov	r1, r0
 800e96a:	4658      	mov	r0, fp
 800e96c:	f000 fcee 	bl	800f34c <__pow5mult>
 800e970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e972:	2b01      	cmp	r3, #1
 800e974:	4604      	mov	r4, r0
 800e976:	f300 8095 	bgt.w	800eaa4 <_dtoa_r+0x8dc>
 800e97a:	9b02      	ldr	r3, [sp, #8]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f040 8087 	bne.w	800ea90 <_dtoa_r+0x8c8>
 800e982:	9b03      	ldr	r3, [sp, #12]
 800e984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e988:	2b00      	cmp	r3, #0
 800e98a:	f040 8089 	bne.w	800eaa0 <_dtoa_r+0x8d8>
 800e98e:	9b03      	ldr	r3, [sp, #12]
 800e990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e994:	0d1b      	lsrs	r3, r3, #20
 800e996:	051b      	lsls	r3, r3, #20
 800e998:	b12b      	cbz	r3, 800e9a6 <_dtoa_r+0x7de>
 800e99a:	9b08      	ldr	r3, [sp, #32]
 800e99c:	3301      	adds	r3, #1
 800e99e:	9308      	str	r3, [sp, #32]
 800e9a0:	f108 0801 	add.w	r8, r8, #1
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f000 81b0 	beq.w	800ed10 <_dtoa_r+0xb48>
 800e9b0:	6923      	ldr	r3, [r4, #16]
 800e9b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e9b6:	6918      	ldr	r0, [r3, #16]
 800e9b8:	f000 fbbc 	bl	800f134 <__hi0bits>
 800e9bc:	f1c0 0020 	rsb	r0, r0, #32
 800e9c0:	9b08      	ldr	r3, [sp, #32]
 800e9c2:	4418      	add	r0, r3
 800e9c4:	f010 001f 	ands.w	r0, r0, #31
 800e9c8:	d077      	beq.n	800eaba <_dtoa_r+0x8f2>
 800e9ca:	f1c0 0320 	rsb	r3, r0, #32
 800e9ce:	2b04      	cmp	r3, #4
 800e9d0:	dd6b      	ble.n	800eaaa <_dtoa_r+0x8e2>
 800e9d2:	9b08      	ldr	r3, [sp, #32]
 800e9d4:	f1c0 001c 	rsb	r0, r0, #28
 800e9d8:	4403      	add	r3, r0
 800e9da:	4480      	add	r8, r0
 800e9dc:	4406      	add	r6, r0
 800e9de:	9308      	str	r3, [sp, #32]
 800e9e0:	f1b8 0f00 	cmp.w	r8, #0
 800e9e4:	dd05      	ble.n	800e9f2 <_dtoa_r+0x82a>
 800e9e6:	4649      	mov	r1, r9
 800e9e8:	4642      	mov	r2, r8
 800e9ea:	4658      	mov	r0, fp
 800e9ec:	f000 fd08 	bl	800f400 <__lshift>
 800e9f0:	4681      	mov	r9, r0
 800e9f2:	9b08      	ldr	r3, [sp, #32]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	dd05      	ble.n	800ea04 <_dtoa_r+0x83c>
 800e9f8:	4621      	mov	r1, r4
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	4658      	mov	r0, fp
 800e9fe:	f000 fcff 	bl	800f400 <__lshift>
 800ea02:	4604      	mov	r4, r0
 800ea04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d059      	beq.n	800eabe <_dtoa_r+0x8f6>
 800ea0a:	4621      	mov	r1, r4
 800ea0c:	4648      	mov	r0, r9
 800ea0e:	f000 fd63 	bl	800f4d8 <__mcmp>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	da53      	bge.n	800eabe <_dtoa_r+0x8f6>
 800ea16:	1e7b      	subs	r3, r7, #1
 800ea18:	9304      	str	r3, [sp, #16]
 800ea1a:	4649      	mov	r1, r9
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	220a      	movs	r2, #10
 800ea20:	4658      	mov	r0, fp
 800ea22:	f000 faf7 	bl	800f014 <__multadd>
 800ea26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea28:	4681      	mov	r9, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f000 8172 	beq.w	800ed14 <_dtoa_r+0xb4c>
 800ea30:	2300      	movs	r3, #0
 800ea32:	4629      	mov	r1, r5
 800ea34:	220a      	movs	r2, #10
 800ea36:	4658      	mov	r0, fp
 800ea38:	f000 faec 	bl	800f014 <__multadd>
 800ea3c:	9b00      	ldr	r3, [sp, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	4605      	mov	r5, r0
 800ea42:	dc67      	bgt.n	800eb14 <_dtoa_r+0x94c>
 800ea44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	dc41      	bgt.n	800eace <_dtoa_r+0x906>
 800ea4a:	e063      	b.n	800eb14 <_dtoa_r+0x94c>
 800ea4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ea4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ea52:	e746      	b.n	800e8e2 <_dtoa_r+0x71a>
 800ea54:	9b07      	ldr	r3, [sp, #28]
 800ea56:	1e5c      	subs	r4, r3, #1
 800ea58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea5a:	42a3      	cmp	r3, r4
 800ea5c:	bfbf      	itttt	lt
 800ea5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ea60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ea62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ea64:	1ae3      	sublt	r3, r4, r3
 800ea66:	bfb4      	ite	lt
 800ea68:	18d2      	addlt	r2, r2, r3
 800ea6a:	1b1c      	subge	r4, r3, r4
 800ea6c:	9b07      	ldr	r3, [sp, #28]
 800ea6e:	bfbc      	itt	lt
 800ea70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ea72:	2400      	movlt	r4, #0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	bfb5      	itete	lt
 800ea78:	eba8 0603 	sublt.w	r6, r8, r3
 800ea7c:	9b07      	ldrge	r3, [sp, #28]
 800ea7e:	2300      	movlt	r3, #0
 800ea80:	4646      	movge	r6, r8
 800ea82:	e730      	b.n	800e8e6 <_dtoa_r+0x71e>
 800ea84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ea86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ea88:	4646      	mov	r6, r8
 800ea8a:	e735      	b.n	800e8f8 <_dtoa_r+0x730>
 800ea8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea8e:	e75c      	b.n	800e94a <_dtoa_r+0x782>
 800ea90:	2300      	movs	r3, #0
 800ea92:	e788      	b.n	800e9a6 <_dtoa_r+0x7de>
 800ea94:	3fe00000 	.word	0x3fe00000
 800ea98:	40240000 	.word	0x40240000
 800ea9c:	40140000 	.word	0x40140000
 800eaa0:	9b02      	ldr	r3, [sp, #8]
 800eaa2:	e780      	b.n	800e9a6 <_dtoa_r+0x7de>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eaa8:	e782      	b.n	800e9b0 <_dtoa_r+0x7e8>
 800eaaa:	d099      	beq.n	800e9e0 <_dtoa_r+0x818>
 800eaac:	9a08      	ldr	r2, [sp, #32]
 800eaae:	331c      	adds	r3, #28
 800eab0:	441a      	add	r2, r3
 800eab2:	4498      	add	r8, r3
 800eab4:	441e      	add	r6, r3
 800eab6:	9208      	str	r2, [sp, #32]
 800eab8:	e792      	b.n	800e9e0 <_dtoa_r+0x818>
 800eaba:	4603      	mov	r3, r0
 800eabc:	e7f6      	b.n	800eaac <_dtoa_r+0x8e4>
 800eabe:	9b07      	ldr	r3, [sp, #28]
 800eac0:	9704      	str	r7, [sp, #16]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	dc20      	bgt.n	800eb08 <_dtoa_r+0x940>
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaca:	2b02      	cmp	r3, #2
 800eacc:	dd1e      	ble.n	800eb0c <_dtoa_r+0x944>
 800eace:	9b00      	ldr	r3, [sp, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f47f aec0 	bne.w	800e856 <_dtoa_r+0x68e>
 800ead6:	4621      	mov	r1, r4
 800ead8:	2205      	movs	r2, #5
 800eada:	4658      	mov	r0, fp
 800eadc:	f000 fa9a 	bl	800f014 <__multadd>
 800eae0:	4601      	mov	r1, r0
 800eae2:	4604      	mov	r4, r0
 800eae4:	4648      	mov	r0, r9
 800eae6:	f000 fcf7 	bl	800f4d8 <__mcmp>
 800eaea:	2800      	cmp	r0, #0
 800eaec:	f77f aeb3 	ble.w	800e856 <_dtoa_r+0x68e>
 800eaf0:	4656      	mov	r6, sl
 800eaf2:	2331      	movs	r3, #49	@ 0x31
 800eaf4:	f806 3b01 	strb.w	r3, [r6], #1
 800eaf8:	9b04      	ldr	r3, [sp, #16]
 800eafa:	3301      	adds	r3, #1
 800eafc:	9304      	str	r3, [sp, #16]
 800eafe:	e6ae      	b.n	800e85e <_dtoa_r+0x696>
 800eb00:	9c07      	ldr	r4, [sp, #28]
 800eb02:	9704      	str	r7, [sp, #16]
 800eb04:	4625      	mov	r5, r4
 800eb06:	e7f3      	b.n	800eaf0 <_dtoa_r+0x928>
 800eb08:	9b07      	ldr	r3, [sp, #28]
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f000 8104 	beq.w	800ed1c <_dtoa_r+0xb54>
 800eb14:	2e00      	cmp	r6, #0
 800eb16:	dd05      	ble.n	800eb24 <_dtoa_r+0x95c>
 800eb18:	4629      	mov	r1, r5
 800eb1a:	4632      	mov	r2, r6
 800eb1c:	4658      	mov	r0, fp
 800eb1e:	f000 fc6f 	bl	800f400 <__lshift>
 800eb22:	4605      	mov	r5, r0
 800eb24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d05a      	beq.n	800ebe0 <_dtoa_r+0xa18>
 800eb2a:	6869      	ldr	r1, [r5, #4]
 800eb2c:	4658      	mov	r0, fp
 800eb2e:	f000 fa0f 	bl	800ef50 <_Balloc>
 800eb32:	4606      	mov	r6, r0
 800eb34:	b928      	cbnz	r0, 800eb42 <_dtoa_r+0x97a>
 800eb36:	4b84      	ldr	r3, [pc, #528]	@ (800ed48 <_dtoa_r+0xb80>)
 800eb38:	4602      	mov	r2, r0
 800eb3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eb3e:	f7ff bb5a 	b.w	800e1f6 <_dtoa_r+0x2e>
 800eb42:	692a      	ldr	r2, [r5, #16]
 800eb44:	3202      	adds	r2, #2
 800eb46:	0092      	lsls	r2, r2, #2
 800eb48:	f105 010c 	add.w	r1, r5, #12
 800eb4c:	300c      	adds	r0, #12
 800eb4e:	f7ff fa80 	bl	800e052 <memcpy>
 800eb52:	2201      	movs	r2, #1
 800eb54:	4631      	mov	r1, r6
 800eb56:	4658      	mov	r0, fp
 800eb58:	f000 fc52 	bl	800f400 <__lshift>
 800eb5c:	f10a 0301 	add.w	r3, sl, #1
 800eb60:	9307      	str	r3, [sp, #28]
 800eb62:	9b00      	ldr	r3, [sp, #0]
 800eb64:	4453      	add	r3, sl
 800eb66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb68:	9b02      	ldr	r3, [sp, #8]
 800eb6a:	f003 0301 	and.w	r3, r3, #1
 800eb6e:	462f      	mov	r7, r5
 800eb70:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb72:	4605      	mov	r5, r0
 800eb74:	9b07      	ldr	r3, [sp, #28]
 800eb76:	4621      	mov	r1, r4
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	4648      	mov	r0, r9
 800eb7c:	9300      	str	r3, [sp, #0]
 800eb7e:	f7ff fa9b 	bl	800e0b8 <quorem>
 800eb82:	4639      	mov	r1, r7
 800eb84:	9002      	str	r0, [sp, #8]
 800eb86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eb8a:	4648      	mov	r0, r9
 800eb8c:	f000 fca4 	bl	800f4d8 <__mcmp>
 800eb90:	462a      	mov	r2, r5
 800eb92:	9008      	str	r0, [sp, #32]
 800eb94:	4621      	mov	r1, r4
 800eb96:	4658      	mov	r0, fp
 800eb98:	f000 fcba 	bl	800f510 <__mdiff>
 800eb9c:	68c2      	ldr	r2, [r0, #12]
 800eb9e:	4606      	mov	r6, r0
 800eba0:	bb02      	cbnz	r2, 800ebe4 <_dtoa_r+0xa1c>
 800eba2:	4601      	mov	r1, r0
 800eba4:	4648      	mov	r0, r9
 800eba6:	f000 fc97 	bl	800f4d8 <__mcmp>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	4631      	mov	r1, r6
 800ebae:	4658      	mov	r0, fp
 800ebb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800ebb2:	f000 fa0d 	bl	800efd0 <_Bfree>
 800ebb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebba:	9e07      	ldr	r6, [sp, #28]
 800ebbc:	ea43 0102 	orr.w	r1, r3, r2
 800ebc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebc2:	4319      	orrs	r1, r3
 800ebc4:	d110      	bne.n	800ebe8 <_dtoa_r+0xa20>
 800ebc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ebca:	d029      	beq.n	800ec20 <_dtoa_r+0xa58>
 800ebcc:	9b08      	ldr	r3, [sp, #32]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	dd02      	ble.n	800ebd8 <_dtoa_r+0xa10>
 800ebd2:	9b02      	ldr	r3, [sp, #8]
 800ebd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ebd8:	9b00      	ldr	r3, [sp, #0]
 800ebda:	f883 8000 	strb.w	r8, [r3]
 800ebde:	e63f      	b.n	800e860 <_dtoa_r+0x698>
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	e7bb      	b.n	800eb5c <_dtoa_r+0x994>
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	e7e1      	b.n	800ebac <_dtoa_r+0x9e4>
 800ebe8:	9b08      	ldr	r3, [sp, #32]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	db04      	blt.n	800ebf8 <_dtoa_r+0xa30>
 800ebee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ebf0:	430b      	orrs	r3, r1
 800ebf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ebf4:	430b      	orrs	r3, r1
 800ebf6:	d120      	bne.n	800ec3a <_dtoa_r+0xa72>
 800ebf8:	2a00      	cmp	r2, #0
 800ebfa:	dded      	ble.n	800ebd8 <_dtoa_r+0xa10>
 800ebfc:	4649      	mov	r1, r9
 800ebfe:	2201      	movs	r2, #1
 800ec00:	4658      	mov	r0, fp
 800ec02:	f000 fbfd 	bl	800f400 <__lshift>
 800ec06:	4621      	mov	r1, r4
 800ec08:	4681      	mov	r9, r0
 800ec0a:	f000 fc65 	bl	800f4d8 <__mcmp>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	dc03      	bgt.n	800ec1a <_dtoa_r+0xa52>
 800ec12:	d1e1      	bne.n	800ebd8 <_dtoa_r+0xa10>
 800ec14:	f018 0f01 	tst.w	r8, #1
 800ec18:	d0de      	beq.n	800ebd8 <_dtoa_r+0xa10>
 800ec1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec1e:	d1d8      	bne.n	800ebd2 <_dtoa_r+0xa0a>
 800ec20:	9a00      	ldr	r2, [sp, #0]
 800ec22:	2339      	movs	r3, #57	@ 0x39
 800ec24:	7013      	strb	r3, [r2, #0]
 800ec26:	4633      	mov	r3, r6
 800ec28:	461e      	mov	r6, r3
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ec30:	2a39      	cmp	r2, #57	@ 0x39
 800ec32:	d052      	beq.n	800ecda <_dtoa_r+0xb12>
 800ec34:	3201      	adds	r2, #1
 800ec36:	701a      	strb	r2, [r3, #0]
 800ec38:	e612      	b.n	800e860 <_dtoa_r+0x698>
 800ec3a:	2a00      	cmp	r2, #0
 800ec3c:	dd07      	ble.n	800ec4e <_dtoa_r+0xa86>
 800ec3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec42:	d0ed      	beq.n	800ec20 <_dtoa_r+0xa58>
 800ec44:	9a00      	ldr	r2, [sp, #0]
 800ec46:	f108 0301 	add.w	r3, r8, #1
 800ec4a:	7013      	strb	r3, [r2, #0]
 800ec4c:	e608      	b.n	800e860 <_dtoa_r+0x698>
 800ec4e:	9b07      	ldr	r3, [sp, #28]
 800ec50:	9a07      	ldr	r2, [sp, #28]
 800ec52:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ec56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d028      	beq.n	800ecae <_dtoa_r+0xae6>
 800ec5c:	4649      	mov	r1, r9
 800ec5e:	2300      	movs	r3, #0
 800ec60:	220a      	movs	r2, #10
 800ec62:	4658      	mov	r0, fp
 800ec64:	f000 f9d6 	bl	800f014 <__multadd>
 800ec68:	42af      	cmp	r7, r5
 800ec6a:	4681      	mov	r9, r0
 800ec6c:	f04f 0300 	mov.w	r3, #0
 800ec70:	f04f 020a 	mov.w	r2, #10
 800ec74:	4639      	mov	r1, r7
 800ec76:	4658      	mov	r0, fp
 800ec78:	d107      	bne.n	800ec8a <_dtoa_r+0xac2>
 800ec7a:	f000 f9cb 	bl	800f014 <__multadd>
 800ec7e:	4607      	mov	r7, r0
 800ec80:	4605      	mov	r5, r0
 800ec82:	9b07      	ldr	r3, [sp, #28]
 800ec84:	3301      	adds	r3, #1
 800ec86:	9307      	str	r3, [sp, #28]
 800ec88:	e774      	b.n	800eb74 <_dtoa_r+0x9ac>
 800ec8a:	f000 f9c3 	bl	800f014 <__multadd>
 800ec8e:	4629      	mov	r1, r5
 800ec90:	4607      	mov	r7, r0
 800ec92:	2300      	movs	r3, #0
 800ec94:	220a      	movs	r2, #10
 800ec96:	4658      	mov	r0, fp
 800ec98:	f000 f9bc 	bl	800f014 <__multadd>
 800ec9c:	4605      	mov	r5, r0
 800ec9e:	e7f0      	b.n	800ec82 <_dtoa_r+0xaba>
 800eca0:	9b00      	ldr	r3, [sp, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	bfcc      	ite	gt
 800eca6:	461e      	movgt	r6, r3
 800eca8:	2601      	movle	r6, #1
 800ecaa:	4456      	add	r6, sl
 800ecac:	2700      	movs	r7, #0
 800ecae:	4649      	mov	r1, r9
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	4658      	mov	r0, fp
 800ecb4:	f000 fba4 	bl	800f400 <__lshift>
 800ecb8:	4621      	mov	r1, r4
 800ecba:	4681      	mov	r9, r0
 800ecbc:	f000 fc0c 	bl	800f4d8 <__mcmp>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	dcb0      	bgt.n	800ec26 <_dtoa_r+0xa5e>
 800ecc4:	d102      	bne.n	800eccc <_dtoa_r+0xb04>
 800ecc6:	f018 0f01 	tst.w	r8, #1
 800ecca:	d1ac      	bne.n	800ec26 <_dtoa_r+0xa5e>
 800eccc:	4633      	mov	r3, r6
 800ecce:	461e      	mov	r6, r3
 800ecd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecd4:	2a30      	cmp	r2, #48	@ 0x30
 800ecd6:	d0fa      	beq.n	800ecce <_dtoa_r+0xb06>
 800ecd8:	e5c2      	b.n	800e860 <_dtoa_r+0x698>
 800ecda:	459a      	cmp	sl, r3
 800ecdc:	d1a4      	bne.n	800ec28 <_dtoa_r+0xa60>
 800ecde:	9b04      	ldr	r3, [sp, #16]
 800ece0:	3301      	adds	r3, #1
 800ece2:	9304      	str	r3, [sp, #16]
 800ece4:	2331      	movs	r3, #49	@ 0x31
 800ece6:	f88a 3000 	strb.w	r3, [sl]
 800ecea:	e5b9      	b.n	800e860 <_dtoa_r+0x698>
 800ecec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ecee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ed4c <_dtoa_r+0xb84>
 800ecf2:	b11b      	cbz	r3, 800ecfc <_dtoa_r+0xb34>
 800ecf4:	f10a 0308 	add.w	r3, sl, #8
 800ecf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ecfa:	6013      	str	r3, [r2, #0]
 800ecfc:	4650      	mov	r0, sl
 800ecfe:	b019      	add	sp, #100	@ 0x64
 800ed00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	f77f ae37 	ble.w	800e97a <_dtoa_r+0x7b2>
 800ed0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed10:	2001      	movs	r0, #1
 800ed12:	e655      	b.n	800e9c0 <_dtoa_r+0x7f8>
 800ed14:	9b00      	ldr	r3, [sp, #0]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	f77f aed6 	ble.w	800eac8 <_dtoa_r+0x900>
 800ed1c:	4656      	mov	r6, sl
 800ed1e:	4621      	mov	r1, r4
 800ed20:	4648      	mov	r0, r9
 800ed22:	f7ff f9c9 	bl	800e0b8 <quorem>
 800ed26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ed2a:	f806 8b01 	strb.w	r8, [r6], #1
 800ed2e:	9b00      	ldr	r3, [sp, #0]
 800ed30:	eba6 020a 	sub.w	r2, r6, sl
 800ed34:	4293      	cmp	r3, r2
 800ed36:	ddb3      	ble.n	800eca0 <_dtoa_r+0xad8>
 800ed38:	4649      	mov	r1, r9
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	220a      	movs	r2, #10
 800ed3e:	4658      	mov	r0, fp
 800ed40:	f000 f968 	bl	800f014 <__multadd>
 800ed44:	4681      	mov	r9, r0
 800ed46:	e7ea      	b.n	800ed1e <_dtoa_r+0xb56>
 800ed48:	08011f97 	.word	0x08011f97
 800ed4c:	08011f32 	.word	0x08011f32

0800ed50 <_free_r>:
 800ed50:	b538      	push	{r3, r4, r5, lr}
 800ed52:	4605      	mov	r5, r0
 800ed54:	2900      	cmp	r1, #0
 800ed56:	d041      	beq.n	800eddc <_free_r+0x8c>
 800ed58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed5c:	1f0c      	subs	r4, r1, #4
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	bfb8      	it	lt
 800ed62:	18e4      	addlt	r4, r4, r3
 800ed64:	f000 f8e8 	bl	800ef38 <__malloc_lock>
 800ed68:	4a1d      	ldr	r2, [pc, #116]	@ (800ede0 <_free_r+0x90>)
 800ed6a:	6813      	ldr	r3, [r2, #0]
 800ed6c:	b933      	cbnz	r3, 800ed7c <_free_r+0x2c>
 800ed6e:	6063      	str	r3, [r4, #4]
 800ed70:	6014      	str	r4, [r2, #0]
 800ed72:	4628      	mov	r0, r5
 800ed74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed78:	f000 b8e4 	b.w	800ef44 <__malloc_unlock>
 800ed7c:	42a3      	cmp	r3, r4
 800ed7e:	d908      	bls.n	800ed92 <_free_r+0x42>
 800ed80:	6820      	ldr	r0, [r4, #0]
 800ed82:	1821      	adds	r1, r4, r0
 800ed84:	428b      	cmp	r3, r1
 800ed86:	bf01      	itttt	eq
 800ed88:	6819      	ldreq	r1, [r3, #0]
 800ed8a:	685b      	ldreq	r3, [r3, #4]
 800ed8c:	1809      	addeq	r1, r1, r0
 800ed8e:	6021      	streq	r1, [r4, #0]
 800ed90:	e7ed      	b.n	800ed6e <_free_r+0x1e>
 800ed92:	461a      	mov	r2, r3
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	b10b      	cbz	r3, 800ed9c <_free_r+0x4c>
 800ed98:	42a3      	cmp	r3, r4
 800ed9a:	d9fa      	bls.n	800ed92 <_free_r+0x42>
 800ed9c:	6811      	ldr	r1, [r2, #0]
 800ed9e:	1850      	adds	r0, r2, r1
 800eda0:	42a0      	cmp	r0, r4
 800eda2:	d10b      	bne.n	800edbc <_free_r+0x6c>
 800eda4:	6820      	ldr	r0, [r4, #0]
 800eda6:	4401      	add	r1, r0
 800eda8:	1850      	adds	r0, r2, r1
 800edaa:	4283      	cmp	r3, r0
 800edac:	6011      	str	r1, [r2, #0]
 800edae:	d1e0      	bne.n	800ed72 <_free_r+0x22>
 800edb0:	6818      	ldr	r0, [r3, #0]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	6053      	str	r3, [r2, #4]
 800edb6:	4408      	add	r0, r1
 800edb8:	6010      	str	r0, [r2, #0]
 800edba:	e7da      	b.n	800ed72 <_free_r+0x22>
 800edbc:	d902      	bls.n	800edc4 <_free_r+0x74>
 800edbe:	230c      	movs	r3, #12
 800edc0:	602b      	str	r3, [r5, #0]
 800edc2:	e7d6      	b.n	800ed72 <_free_r+0x22>
 800edc4:	6820      	ldr	r0, [r4, #0]
 800edc6:	1821      	adds	r1, r4, r0
 800edc8:	428b      	cmp	r3, r1
 800edca:	bf04      	itt	eq
 800edcc:	6819      	ldreq	r1, [r3, #0]
 800edce:	685b      	ldreq	r3, [r3, #4]
 800edd0:	6063      	str	r3, [r4, #4]
 800edd2:	bf04      	itt	eq
 800edd4:	1809      	addeq	r1, r1, r0
 800edd6:	6021      	streq	r1, [r4, #0]
 800edd8:	6054      	str	r4, [r2, #4]
 800edda:	e7ca      	b.n	800ed72 <_free_r+0x22>
 800eddc:	bd38      	pop	{r3, r4, r5, pc}
 800edde:	bf00      	nop
 800ede0:	20003164 	.word	0x20003164

0800ede4 <malloc>:
 800ede4:	4b02      	ldr	r3, [pc, #8]	@ (800edf0 <malloc+0xc>)
 800ede6:	4601      	mov	r1, r0
 800ede8:	6818      	ldr	r0, [r3, #0]
 800edea:	f000 b825 	b.w	800ee38 <_malloc_r>
 800edee:	bf00      	nop
 800edf0:	2000005c 	.word	0x2000005c

0800edf4 <sbrk_aligned>:
 800edf4:	b570      	push	{r4, r5, r6, lr}
 800edf6:	4e0f      	ldr	r6, [pc, #60]	@ (800ee34 <sbrk_aligned+0x40>)
 800edf8:	460c      	mov	r4, r1
 800edfa:	6831      	ldr	r1, [r6, #0]
 800edfc:	4605      	mov	r5, r0
 800edfe:	b911      	cbnz	r1, 800ee06 <sbrk_aligned+0x12>
 800ee00:	f001 ffd2 	bl	8010da8 <_sbrk_r>
 800ee04:	6030      	str	r0, [r6, #0]
 800ee06:	4621      	mov	r1, r4
 800ee08:	4628      	mov	r0, r5
 800ee0a:	f001 ffcd 	bl	8010da8 <_sbrk_r>
 800ee0e:	1c43      	adds	r3, r0, #1
 800ee10:	d103      	bne.n	800ee1a <sbrk_aligned+0x26>
 800ee12:	f04f 34ff 	mov.w	r4, #4294967295
 800ee16:	4620      	mov	r0, r4
 800ee18:	bd70      	pop	{r4, r5, r6, pc}
 800ee1a:	1cc4      	adds	r4, r0, #3
 800ee1c:	f024 0403 	bic.w	r4, r4, #3
 800ee20:	42a0      	cmp	r0, r4
 800ee22:	d0f8      	beq.n	800ee16 <sbrk_aligned+0x22>
 800ee24:	1a21      	subs	r1, r4, r0
 800ee26:	4628      	mov	r0, r5
 800ee28:	f001 ffbe 	bl	8010da8 <_sbrk_r>
 800ee2c:	3001      	adds	r0, #1
 800ee2e:	d1f2      	bne.n	800ee16 <sbrk_aligned+0x22>
 800ee30:	e7ef      	b.n	800ee12 <sbrk_aligned+0x1e>
 800ee32:	bf00      	nop
 800ee34:	20003160 	.word	0x20003160

0800ee38 <_malloc_r>:
 800ee38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee3c:	1ccd      	adds	r5, r1, #3
 800ee3e:	f025 0503 	bic.w	r5, r5, #3
 800ee42:	3508      	adds	r5, #8
 800ee44:	2d0c      	cmp	r5, #12
 800ee46:	bf38      	it	cc
 800ee48:	250c      	movcc	r5, #12
 800ee4a:	2d00      	cmp	r5, #0
 800ee4c:	4606      	mov	r6, r0
 800ee4e:	db01      	blt.n	800ee54 <_malloc_r+0x1c>
 800ee50:	42a9      	cmp	r1, r5
 800ee52:	d904      	bls.n	800ee5e <_malloc_r+0x26>
 800ee54:	230c      	movs	r3, #12
 800ee56:	6033      	str	r3, [r6, #0]
 800ee58:	2000      	movs	r0, #0
 800ee5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ef34 <_malloc_r+0xfc>
 800ee62:	f000 f869 	bl	800ef38 <__malloc_lock>
 800ee66:	f8d8 3000 	ldr.w	r3, [r8]
 800ee6a:	461c      	mov	r4, r3
 800ee6c:	bb44      	cbnz	r4, 800eec0 <_malloc_r+0x88>
 800ee6e:	4629      	mov	r1, r5
 800ee70:	4630      	mov	r0, r6
 800ee72:	f7ff ffbf 	bl	800edf4 <sbrk_aligned>
 800ee76:	1c43      	adds	r3, r0, #1
 800ee78:	4604      	mov	r4, r0
 800ee7a:	d158      	bne.n	800ef2e <_malloc_r+0xf6>
 800ee7c:	f8d8 4000 	ldr.w	r4, [r8]
 800ee80:	4627      	mov	r7, r4
 800ee82:	2f00      	cmp	r7, #0
 800ee84:	d143      	bne.n	800ef0e <_malloc_r+0xd6>
 800ee86:	2c00      	cmp	r4, #0
 800ee88:	d04b      	beq.n	800ef22 <_malloc_r+0xea>
 800ee8a:	6823      	ldr	r3, [r4, #0]
 800ee8c:	4639      	mov	r1, r7
 800ee8e:	4630      	mov	r0, r6
 800ee90:	eb04 0903 	add.w	r9, r4, r3
 800ee94:	f001 ff88 	bl	8010da8 <_sbrk_r>
 800ee98:	4581      	cmp	r9, r0
 800ee9a:	d142      	bne.n	800ef22 <_malloc_r+0xea>
 800ee9c:	6821      	ldr	r1, [r4, #0]
 800ee9e:	1a6d      	subs	r5, r5, r1
 800eea0:	4629      	mov	r1, r5
 800eea2:	4630      	mov	r0, r6
 800eea4:	f7ff ffa6 	bl	800edf4 <sbrk_aligned>
 800eea8:	3001      	adds	r0, #1
 800eeaa:	d03a      	beq.n	800ef22 <_malloc_r+0xea>
 800eeac:	6823      	ldr	r3, [r4, #0]
 800eeae:	442b      	add	r3, r5
 800eeb0:	6023      	str	r3, [r4, #0]
 800eeb2:	f8d8 3000 	ldr.w	r3, [r8]
 800eeb6:	685a      	ldr	r2, [r3, #4]
 800eeb8:	bb62      	cbnz	r2, 800ef14 <_malloc_r+0xdc>
 800eeba:	f8c8 7000 	str.w	r7, [r8]
 800eebe:	e00f      	b.n	800eee0 <_malloc_r+0xa8>
 800eec0:	6822      	ldr	r2, [r4, #0]
 800eec2:	1b52      	subs	r2, r2, r5
 800eec4:	d420      	bmi.n	800ef08 <_malloc_r+0xd0>
 800eec6:	2a0b      	cmp	r2, #11
 800eec8:	d917      	bls.n	800eefa <_malloc_r+0xc2>
 800eeca:	1961      	adds	r1, r4, r5
 800eecc:	42a3      	cmp	r3, r4
 800eece:	6025      	str	r5, [r4, #0]
 800eed0:	bf18      	it	ne
 800eed2:	6059      	strne	r1, [r3, #4]
 800eed4:	6863      	ldr	r3, [r4, #4]
 800eed6:	bf08      	it	eq
 800eed8:	f8c8 1000 	streq.w	r1, [r8]
 800eedc:	5162      	str	r2, [r4, r5]
 800eede:	604b      	str	r3, [r1, #4]
 800eee0:	4630      	mov	r0, r6
 800eee2:	f000 f82f 	bl	800ef44 <__malloc_unlock>
 800eee6:	f104 000b 	add.w	r0, r4, #11
 800eeea:	1d23      	adds	r3, r4, #4
 800eeec:	f020 0007 	bic.w	r0, r0, #7
 800eef0:	1ac2      	subs	r2, r0, r3
 800eef2:	bf1c      	itt	ne
 800eef4:	1a1b      	subne	r3, r3, r0
 800eef6:	50a3      	strne	r3, [r4, r2]
 800eef8:	e7af      	b.n	800ee5a <_malloc_r+0x22>
 800eefa:	6862      	ldr	r2, [r4, #4]
 800eefc:	42a3      	cmp	r3, r4
 800eefe:	bf0c      	ite	eq
 800ef00:	f8c8 2000 	streq.w	r2, [r8]
 800ef04:	605a      	strne	r2, [r3, #4]
 800ef06:	e7eb      	b.n	800eee0 <_malloc_r+0xa8>
 800ef08:	4623      	mov	r3, r4
 800ef0a:	6864      	ldr	r4, [r4, #4]
 800ef0c:	e7ae      	b.n	800ee6c <_malloc_r+0x34>
 800ef0e:	463c      	mov	r4, r7
 800ef10:	687f      	ldr	r7, [r7, #4]
 800ef12:	e7b6      	b.n	800ee82 <_malloc_r+0x4a>
 800ef14:	461a      	mov	r2, r3
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	42a3      	cmp	r3, r4
 800ef1a:	d1fb      	bne.n	800ef14 <_malloc_r+0xdc>
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	6053      	str	r3, [r2, #4]
 800ef20:	e7de      	b.n	800eee0 <_malloc_r+0xa8>
 800ef22:	230c      	movs	r3, #12
 800ef24:	6033      	str	r3, [r6, #0]
 800ef26:	4630      	mov	r0, r6
 800ef28:	f000 f80c 	bl	800ef44 <__malloc_unlock>
 800ef2c:	e794      	b.n	800ee58 <_malloc_r+0x20>
 800ef2e:	6005      	str	r5, [r0, #0]
 800ef30:	e7d6      	b.n	800eee0 <_malloc_r+0xa8>
 800ef32:	bf00      	nop
 800ef34:	20003164 	.word	0x20003164

0800ef38 <__malloc_lock>:
 800ef38:	4801      	ldr	r0, [pc, #4]	@ (800ef40 <__malloc_lock+0x8>)
 800ef3a:	f7ff b888 	b.w	800e04e <__retarget_lock_acquire_recursive>
 800ef3e:	bf00      	nop
 800ef40:	2000315c 	.word	0x2000315c

0800ef44 <__malloc_unlock>:
 800ef44:	4801      	ldr	r0, [pc, #4]	@ (800ef4c <__malloc_unlock+0x8>)
 800ef46:	f7ff b883 	b.w	800e050 <__retarget_lock_release_recursive>
 800ef4a:	bf00      	nop
 800ef4c:	2000315c 	.word	0x2000315c

0800ef50 <_Balloc>:
 800ef50:	b570      	push	{r4, r5, r6, lr}
 800ef52:	69c6      	ldr	r6, [r0, #28]
 800ef54:	4604      	mov	r4, r0
 800ef56:	460d      	mov	r5, r1
 800ef58:	b976      	cbnz	r6, 800ef78 <_Balloc+0x28>
 800ef5a:	2010      	movs	r0, #16
 800ef5c:	f7ff ff42 	bl	800ede4 <malloc>
 800ef60:	4602      	mov	r2, r0
 800ef62:	61e0      	str	r0, [r4, #28]
 800ef64:	b920      	cbnz	r0, 800ef70 <_Balloc+0x20>
 800ef66:	4b18      	ldr	r3, [pc, #96]	@ (800efc8 <_Balloc+0x78>)
 800ef68:	4818      	ldr	r0, [pc, #96]	@ (800efcc <_Balloc+0x7c>)
 800ef6a:	216b      	movs	r1, #107	@ 0x6b
 800ef6c:	f7ff f886 	bl	800e07c <__assert_func>
 800ef70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef74:	6006      	str	r6, [r0, #0]
 800ef76:	60c6      	str	r6, [r0, #12]
 800ef78:	69e6      	ldr	r6, [r4, #28]
 800ef7a:	68f3      	ldr	r3, [r6, #12]
 800ef7c:	b183      	cbz	r3, 800efa0 <_Balloc+0x50>
 800ef7e:	69e3      	ldr	r3, [r4, #28]
 800ef80:	68db      	ldr	r3, [r3, #12]
 800ef82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef86:	b9b8      	cbnz	r0, 800efb8 <_Balloc+0x68>
 800ef88:	2101      	movs	r1, #1
 800ef8a:	fa01 f605 	lsl.w	r6, r1, r5
 800ef8e:	1d72      	adds	r2, r6, #5
 800ef90:	0092      	lsls	r2, r2, #2
 800ef92:	4620      	mov	r0, r4
 800ef94:	f001 ff27 	bl	8010de6 <_calloc_r>
 800ef98:	b160      	cbz	r0, 800efb4 <_Balloc+0x64>
 800ef9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef9e:	e00e      	b.n	800efbe <_Balloc+0x6e>
 800efa0:	2221      	movs	r2, #33	@ 0x21
 800efa2:	2104      	movs	r1, #4
 800efa4:	4620      	mov	r0, r4
 800efa6:	f001 ff1e 	bl	8010de6 <_calloc_r>
 800efaa:	69e3      	ldr	r3, [r4, #28]
 800efac:	60f0      	str	r0, [r6, #12]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d1e4      	bne.n	800ef7e <_Balloc+0x2e>
 800efb4:	2000      	movs	r0, #0
 800efb6:	bd70      	pop	{r4, r5, r6, pc}
 800efb8:	6802      	ldr	r2, [r0, #0]
 800efba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800efbe:	2300      	movs	r3, #0
 800efc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800efc4:	e7f7      	b.n	800efb6 <_Balloc+0x66>
 800efc6:	bf00      	nop
 800efc8:	08011e85 	.word	0x08011e85
 800efcc:	08011fa8 	.word	0x08011fa8

0800efd0 <_Bfree>:
 800efd0:	b570      	push	{r4, r5, r6, lr}
 800efd2:	69c6      	ldr	r6, [r0, #28]
 800efd4:	4605      	mov	r5, r0
 800efd6:	460c      	mov	r4, r1
 800efd8:	b976      	cbnz	r6, 800eff8 <_Bfree+0x28>
 800efda:	2010      	movs	r0, #16
 800efdc:	f7ff ff02 	bl	800ede4 <malloc>
 800efe0:	4602      	mov	r2, r0
 800efe2:	61e8      	str	r0, [r5, #28]
 800efe4:	b920      	cbnz	r0, 800eff0 <_Bfree+0x20>
 800efe6:	4b09      	ldr	r3, [pc, #36]	@ (800f00c <_Bfree+0x3c>)
 800efe8:	4809      	ldr	r0, [pc, #36]	@ (800f010 <_Bfree+0x40>)
 800efea:	218f      	movs	r1, #143	@ 0x8f
 800efec:	f7ff f846 	bl	800e07c <__assert_func>
 800eff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eff4:	6006      	str	r6, [r0, #0]
 800eff6:	60c6      	str	r6, [r0, #12]
 800eff8:	b13c      	cbz	r4, 800f00a <_Bfree+0x3a>
 800effa:	69eb      	ldr	r3, [r5, #28]
 800effc:	6862      	ldr	r2, [r4, #4]
 800effe:	68db      	ldr	r3, [r3, #12]
 800f000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f004:	6021      	str	r1, [r4, #0]
 800f006:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f00a:	bd70      	pop	{r4, r5, r6, pc}
 800f00c:	08011e85 	.word	0x08011e85
 800f010:	08011fa8 	.word	0x08011fa8

0800f014 <__multadd>:
 800f014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f018:	690d      	ldr	r5, [r1, #16]
 800f01a:	4607      	mov	r7, r0
 800f01c:	460c      	mov	r4, r1
 800f01e:	461e      	mov	r6, r3
 800f020:	f101 0c14 	add.w	ip, r1, #20
 800f024:	2000      	movs	r0, #0
 800f026:	f8dc 3000 	ldr.w	r3, [ip]
 800f02a:	b299      	uxth	r1, r3
 800f02c:	fb02 6101 	mla	r1, r2, r1, r6
 800f030:	0c1e      	lsrs	r6, r3, #16
 800f032:	0c0b      	lsrs	r3, r1, #16
 800f034:	fb02 3306 	mla	r3, r2, r6, r3
 800f038:	b289      	uxth	r1, r1
 800f03a:	3001      	adds	r0, #1
 800f03c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f040:	4285      	cmp	r5, r0
 800f042:	f84c 1b04 	str.w	r1, [ip], #4
 800f046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f04a:	dcec      	bgt.n	800f026 <__multadd+0x12>
 800f04c:	b30e      	cbz	r6, 800f092 <__multadd+0x7e>
 800f04e:	68a3      	ldr	r3, [r4, #8]
 800f050:	42ab      	cmp	r3, r5
 800f052:	dc19      	bgt.n	800f088 <__multadd+0x74>
 800f054:	6861      	ldr	r1, [r4, #4]
 800f056:	4638      	mov	r0, r7
 800f058:	3101      	adds	r1, #1
 800f05a:	f7ff ff79 	bl	800ef50 <_Balloc>
 800f05e:	4680      	mov	r8, r0
 800f060:	b928      	cbnz	r0, 800f06e <__multadd+0x5a>
 800f062:	4602      	mov	r2, r0
 800f064:	4b0c      	ldr	r3, [pc, #48]	@ (800f098 <__multadd+0x84>)
 800f066:	480d      	ldr	r0, [pc, #52]	@ (800f09c <__multadd+0x88>)
 800f068:	21ba      	movs	r1, #186	@ 0xba
 800f06a:	f7ff f807 	bl	800e07c <__assert_func>
 800f06e:	6922      	ldr	r2, [r4, #16]
 800f070:	3202      	adds	r2, #2
 800f072:	f104 010c 	add.w	r1, r4, #12
 800f076:	0092      	lsls	r2, r2, #2
 800f078:	300c      	adds	r0, #12
 800f07a:	f7fe ffea 	bl	800e052 <memcpy>
 800f07e:	4621      	mov	r1, r4
 800f080:	4638      	mov	r0, r7
 800f082:	f7ff ffa5 	bl	800efd0 <_Bfree>
 800f086:	4644      	mov	r4, r8
 800f088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f08c:	3501      	adds	r5, #1
 800f08e:	615e      	str	r6, [r3, #20]
 800f090:	6125      	str	r5, [r4, #16]
 800f092:	4620      	mov	r0, r4
 800f094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f098:	08011f97 	.word	0x08011f97
 800f09c:	08011fa8 	.word	0x08011fa8

0800f0a0 <__s2b>:
 800f0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	4615      	mov	r5, r2
 800f0a8:	461f      	mov	r7, r3
 800f0aa:	2209      	movs	r2, #9
 800f0ac:	3308      	adds	r3, #8
 800f0ae:	4606      	mov	r6, r0
 800f0b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0b4:	2100      	movs	r1, #0
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	db09      	blt.n	800f0d0 <__s2b+0x30>
 800f0bc:	4630      	mov	r0, r6
 800f0be:	f7ff ff47 	bl	800ef50 <_Balloc>
 800f0c2:	b940      	cbnz	r0, 800f0d6 <__s2b+0x36>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	4b19      	ldr	r3, [pc, #100]	@ (800f12c <__s2b+0x8c>)
 800f0c8:	4819      	ldr	r0, [pc, #100]	@ (800f130 <__s2b+0x90>)
 800f0ca:	21d3      	movs	r1, #211	@ 0xd3
 800f0cc:	f7fe ffd6 	bl	800e07c <__assert_func>
 800f0d0:	0052      	lsls	r2, r2, #1
 800f0d2:	3101      	adds	r1, #1
 800f0d4:	e7f0      	b.n	800f0b8 <__s2b+0x18>
 800f0d6:	9b08      	ldr	r3, [sp, #32]
 800f0d8:	6143      	str	r3, [r0, #20]
 800f0da:	2d09      	cmp	r5, #9
 800f0dc:	f04f 0301 	mov.w	r3, #1
 800f0e0:	6103      	str	r3, [r0, #16]
 800f0e2:	dd16      	ble.n	800f112 <__s2b+0x72>
 800f0e4:	f104 0909 	add.w	r9, r4, #9
 800f0e8:	46c8      	mov	r8, r9
 800f0ea:	442c      	add	r4, r5
 800f0ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f0f0:	4601      	mov	r1, r0
 800f0f2:	3b30      	subs	r3, #48	@ 0x30
 800f0f4:	220a      	movs	r2, #10
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	f7ff ff8c 	bl	800f014 <__multadd>
 800f0fc:	45a0      	cmp	r8, r4
 800f0fe:	d1f5      	bne.n	800f0ec <__s2b+0x4c>
 800f100:	f1a5 0408 	sub.w	r4, r5, #8
 800f104:	444c      	add	r4, r9
 800f106:	1b2d      	subs	r5, r5, r4
 800f108:	1963      	adds	r3, r4, r5
 800f10a:	42bb      	cmp	r3, r7
 800f10c:	db04      	blt.n	800f118 <__s2b+0x78>
 800f10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f112:	340a      	adds	r4, #10
 800f114:	2509      	movs	r5, #9
 800f116:	e7f6      	b.n	800f106 <__s2b+0x66>
 800f118:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f11c:	4601      	mov	r1, r0
 800f11e:	3b30      	subs	r3, #48	@ 0x30
 800f120:	220a      	movs	r2, #10
 800f122:	4630      	mov	r0, r6
 800f124:	f7ff ff76 	bl	800f014 <__multadd>
 800f128:	e7ee      	b.n	800f108 <__s2b+0x68>
 800f12a:	bf00      	nop
 800f12c:	08011f97 	.word	0x08011f97
 800f130:	08011fa8 	.word	0x08011fa8

0800f134 <__hi0bits>:
 800f134:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f138:	4603      	mov	r3, r0
 800f13a:	bf36      	itet	cc
 800f13c:	0403      	lslcc	r3, r0, #16
 800f13e:	2000      	movcs	r0, #0
 800f140:	2010      	movcc	r0, #16
 800f142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f146:	bf3c      	itt	cc
 800f148:	021b      	lslcc	r3, r3, #8
 800f14a:	3008      	addcc	r0, #8
 800f14c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f150:	bf3c      	itt	cc
 800f152:	011b      	lslcc	r3, r3, #4
 800f154:	3004      	addcc	r0, #4
 800f156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f15a:	bf3c      	itt	cc
 800f15c:	009b      	lslcc	r3, r3, #2
 800f15e:	3002      	addcc	r0, #2
 800f160:	2b00      	cmp	r3, #0
 800f162:	db05      	blt.n	800f170 <__hi0bits+0x3c>
 800f164:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f168:	f100 0001 	add.w	r0, r0, #1
 800f16c:	bf08      	it	eq
 800f16e:	2020      	moveq	r0, #32
 800f170:	4770      	bx	lr

0800f172 <__lo0bits>:
 800f172:	6803      	ldr	r3, [r0, #0]
 800f174:	4602      	mov	r2, r0
 800f176:	f013 0007 	ands.w	r0, r3, #7
 800f17a:	d00b      	beq.n	800f194 <__lo0bits+0x22>
 800f17c:	07d9      	lsls	r1, r3, #31
 800f17e:	d421      	bmi.n	800f1c4 <__lo0bits+0x52>
 800f180:	0798      	lsls	r0, r3, #30
 800f182:	bf49      	itett	mi
 800f184:	085b      	lsrmi	r3, r3, #1
 800f186:	089b      	lsrpl	r3, r3, #2
 800f188:	2001      	movmi	r0, #1
 800f18a:	6013      	strmi	r3, [r2, #0]
 800f18c:	bf5c      	itt	pl
 800f18e:	6013      	strpl	r3, [r2, #0]
 800f190:	2002      	movpl	r0, #2
 800f192:	4770      	bx	lr
 800f194:	b299      	uxth	r1, r3
 800f196:	b909      	cbnz	r1, 800f19c <__lo0bits+0x2a>
 800f198:	0c1b      	lsrs	r3, r3, #16
 800f19a:	2010      	movs	r0, #16
 800f19c:	b2d9      	uxtb	r1, r3
 800f19e:	b909      	cbnz	r1, 800f1a4 <__lo0bits+0x32>
 800f1a0:	3008      	adds	r0, #8
 800f1a2:	0a1b      	lsrs	r3, r3, #8
 800f1a4:	0719      	lsls	r1, r3, #28
 800f1a6:	bf04      	itt	eq
 800f1a8:	091b      	lsreq	r3, r3, #4
 800f1aa:	3004      	addeq	r0, #4
 800f1ac:	0799      	lsls	r1, r3, #30
 800f1ae:	bf04      	itt	eq
 800f1b0:	089b      	lsreq	r3, r3, #2
 800f1b2:	3002      	addeq	r0, #2
 800f1b4:	07d9      	lsls	r1, r3, #31
 800f1b6:	d403      	bmi.n	800f1c0 <__lo0bits+0x4e>
 800f1b8:	085b      	lsrs	r3, r3, #1
 800f1ba:	f100 0001 	add.w	r0, r0, #1
 800f1be:	d003      	beq.n	800f1c8 <__lo0bits+0x56>
 800f1c0:	6013      	str	r3, [r2, #0]
 800f1c2:	4770      	bx	lr
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	4770      	bx	lr
 800f1c8:	2020      	movs	r0, #32
 800f1ca:	4770      	bx	lr

0800f1cc <__i2b>:
 800f1cc:	b510      	push	{r4, lr}
 800f1ce:	460c      	mov	r4, r1
 800f1d0:	2101      	movs	r1, #1
 800f1d2:	f7ff febd 	bl	800ef50 <_Balloc>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	b928      	cbnz	r0, 800f1e6 <__i2b+0x1a>
 800f1da:	4b05      	ldr	r3, [pc, #20]	@ (800f1f0 <__i2b+0x24>)
 800f1dc:	4805      	ldr	r0, [pc, #20]	@ (800f1f4 <__i2b+0x28>)
 800f1de:	f240 1145 	movw	r1, #325	@ 0x145
 800f1e2:	f7fe ff4b 	bl	800e07c <__assert_func>
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	6144      	str	r4, [r0, #20]
 800f1ea:	6103      	str	r3, [r0, #16]
 800f1ec:	bd10      	pop	{r4, pc}
 800f1ee:	bf00      	nop
 800f1f0:	08011f97 	.word	0x08011f97
 800f1f4:	08011fa8 	.word	0x08011fa8

0800f1f8 <__multiply>:
 800f1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1fc:	4614      	mov	r4, r2
 800f1fe:	690a      	ldr	r2, [r1, #16]
 800f200:	6923      	ldr	r3, [r4, #16]
 800f202:	429a      	cmp	r2, r3
 800f204:	bfa8      	it	ge
 800f206:	4623      	movge	r3, r4
 800f208:	460f      	mov	r7, r1
 800f20a:	bfa4      	itt	ge
 800f20c:	460c      	movge	r4, r1
 800f20e:	461f      	movge	r7, r3
 800f210:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f214:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f218:	68a3      	ldr	r3, [r4, #8]
 800f21a:	6861      	ldr	r1, [r4, #4]
 800f21c:	eb0a 0609 	add.w	r6, sl, r9
 800f220:	42b3      	cmp	r3, r6
 800f222:	b085      	sub	sp, #20
 800f224:	bfb8      	it	lt
 800f226:	3101      	addlt	r1, #1
 800f228:	f7ff fe92 	bl	800ef50 <_Balloc>
 800f22c:	b930      	cbnz	r0, 800f23c <__multiply+0x44>
 800f22e:	4602      	mov	r2, r0
 800f230:	4b44      	ldr	r3, [pc, #272]	@ (800f344 <__multiply+0x14c>)
 800f232:	4845      	ldr	r0, [pc, #276]	@ (800f348 <__multiply+0x150>)
 800f234:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f238:	f7fe ff20 	bl	800e07c <__assert_func>
 800f23c:	f100 0514 	add.w	r5, r0, #20
 800f240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f244:	462b      	mov	r3, r5
 800f246:	2200      	movs	r2, #0
 800f248:	4543      	cmp	r3, r8
 800f24a:	d321      	bcc.n	800f290 <__multiply+0x98>
 800f24c:	f107 0114 	add.w	r1, r7, #20
 800f250:	f104 0214 	add.w	r2, r4, #20
 800f254:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f258:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f25c:	9302      	str	r3, [sp, #8]
 800f25e:	1b13      	subs	r3, r2, r4
 800f260:	3b15      	subs	r3, #21
 800f262:	f023 0303 	bic.w	r3, r3, #3
 800f266:	3304      	adds	r3, #4
 800f268:	f104 0715 	add.w	r7, r4, #21
 800f26c:	42ba      	cmp	r2, r7
 800f26e:	bf38      	it	cc
 800f270:	2304      	movcc	r3, #4
 800f272:	9301      	str	r3, [sp, #4]
 800f274:	9b02      	ldr	r3, [sp, #8]
 800f276:	9103      	str	r1, [sp, #12]
 800f278:	428b      	cmp	r3, r1
 800f27a:	d80c      	bhi.n	800f296 <__multiply+0x9e>
 800f27c:	2e00      	cmp	r6, #0
 800f27e:	dd03      	ble.n	800f288 <__multiply+0x90>
 800f280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f284:	2b00      	cmp	r3, #0
 800f286:	d05b      	beq.n	800f340 <__multiply+0x148>
 800f288:	6106      	str	r6, [r0, #16]
 800f28a:	b005      	add	sp, #20
 800f28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f290:	f843 2b04 	str.w	r2, [r3], #4
 800f294:	e7d8      	b.n	800f248 <__multiply+0x50>
 800f296:	f8b1 a000 	ldrh.w	sl, [r1]
 800f29a:	f1ba 0f00 	cmp.w	sl, #0
 800f29e:	d024      	beq.n	800f2ea <__multiply+0xf2>
 800f2a0:	f104 0e14 	add.w	lr, r4, #20
 800f2a4:	46a9      	mov	r9, r5
 800f2a6:	f04f 0c00 	mov.w	ip, #0
 800f2aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f2ae:	f8d9 3000 	ldr.w	r3, [r9]
 800f2b2:	fa1f fb87 	uxth.w	fp, r7
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f2bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f2c0:	f8d9 7000 	ldr.w	r7, [r9]
 800f2c4:	4463      	add	r3, ip
 800f2c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f2ca:	fb0a c70b 	mla	r7, sl, fp, ip
 800f2ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f2d8:	4572      	cmp	r2, lr
 800f2da:	f849 3b04 	str.w	r3, [r9], #4
 800f2de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f2e2:	d8e2      	bhi.n	800f2aa <__multiply+0xb2>
 800f2e4:	9b01      	ldr	r3, [sp, #4]
 800f2e6:	f845 c003 	str.w	ip, [r5, r3]
 800f2ea:	9b03      	ldr	r3, [sp, #12]
 800f2ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f2f0:	3104      	adds	r1, #4
 800f2f2:	f1b9 0f00 	cmp.w	r9, #0
 800f2f6:	d021      	beq.n	800f33c <__multiply+0x144>
 800f2f8:	682b      	ldr	r3, [r5, #0]
 800f2fa:	f104 0c14 	add.w	ip, r4, #20
 800f2fe:	46ae      	mov	lr, r5
 800f300:	f04f 0a00 	mov.w	sl, #0
 800f304:	f8bc b000 	ldrh.w	fp, [ip]
 800f308:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f30c:	fb09 770b 	mla	r7, r9, fp, r7
 800f310:	4457      	add	r7, sl
 800f312:	b29b      	uxth	r3, r3
 800f314:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f318:	f84e 3b04 	str.w	r3, [lr], #4
 800f31c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f324:	f8be 3000 	ldrh.w	r3, [lr]
 800f328:	fb09 330a 	mla	r3, r9, sl, r3
 800f32c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f330:	4562      	cmp	r2, ip
 800f332:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f336:	d8e5      	bhi.n	800f304 <__multiply+0x10c>
 800f338:	9f01      	ldr	r7, [sp, #4]
 800f33a:	51eb      	str	r3, [r5, r7]
 800f33c:	3504      	adds	r5, #4
 800f33e:	e799      	b.n	800f274 <__multiply+0x7c>
 800f340:	3e01      	subs	r6, #1
 800f342:	e79b      	b.n	800f27c <__multiply+0x84>
 800f344:	08011f97 	.word	0x08011f97
 800f348:	08011fa8 	.word	0x08011fa8

0800f34c <__pow5mult>:
 800f34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f350:	4615      	mov	r5, r2
 800f352:	f012 0203 	ands.w	r2, r2, #3
 800f356:	4607      	mov	r7, r0
 800f358:	460e      	mov	r6, r1
 800f35a:	d007      	beq.n	800f36c <__pow5mult+0x20>
 800f35c:	4c25      	ldr	r4, [pc, #148]	@ (800f3f4 <__pow5mult+0xa8>)
 800f35e:	3a01      	subs	r2, #1
 800f360:	2300      	movs	r3, #0
 800f362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f366:	f7ff fe55 	bl	800f014 <__multadd>
 800f36a:	4606      	mov	r6, r0
 800f36c:	10ad      	asrs	r5, r5, #2
 800f36e:	d03d      	beq.n	800f3ec <__pow5mult+0xa0>
 800f370:	69fc      	ldr	r4, [r7, #28]
 800f372:	b97c      	cbnz	r4, 800f394 <__pow5mult+0x48>
 800f374:	2010      	movs	r0, #16
 800f376:	f7ff fd35 	bl	800ede4 <malloc>
 800f37a:	4602      	mov	r2, r0
 800f37c:	61f8      	str	r0, [r7, #28]
 800f37e:	b928      	cbnz	r0, 800f38c <__pow5mult+0x40>
 800f380:	4b1d      	ldr	r3, [pc, #116]	@ (800f3f8 <__pow5mult+0xac>)
 800f382:	481e      	ldr	r0, [pc, #120]	@ (800f3fc <__pow5mult+0xb0>)
 800f384:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f388:	f7fe fe78 	bl	800e07c <__assert_func>
 800f38c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f390:	6004      	str	r4, [r0, #0]
 800f392:	60c4      	str	r4, [r0, #12]
 800f394:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f39c:	b94c      	cbnz	r4, 800f3b2 <__pow5mult+0x66>
 800f39e:	f240 2171 	movw	r1, #625	@ 0x271
 800f3a2:	4638      	mov	r0, r7
 800f3a4:	f7ff ff12 	bl	800f1cc <__i2b>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	6003      	str	r3, [r0, #0]
 800f3b2:	f04f 0900 	mov.w	r9, #0
 800f3b6:	07eb      	lsls	r3, r5, #31
 800f3b8:	d50a      	bpl.n	800f3d0 <__pow5mult+0x84>
 800f3ba:	4631      	mov	r1, r6
 800f3bc:	4622      	mov	r2, r4
 800f3be:	4638      	mov	r0, r7
 800f3c0:	f7ff ff1a 	bl	800f1f8 <__multiply>
 800f3c4:	4631      	mov	r1, r6
 800f3c6:	4680      	mov	r8, r0
 800f3c8:	4638      	mov	r0, r7
 800f3ca:	f7ff fe01 	bl	800efd0 <_Bfree>
 800f3ce:	4646      	mov	r6, r8
 800f3d0:	106d      	asrs	r5, r5, #1
 800f3d2:	d00b      	beq.n	800f3ec <__pow5mult+0xa0>
 800f3d4:	6820      	ldr	r0, [r4, #0]
 800f3d6:	b938      	cbnz	r0, 800f3e8 <__pow5mult+0x9c>
 800f3d8:	4622      	mov	r2, r4
 800f3da:	4621      	mov	r1, r4
 800f3dc:	4638      	mov	r0, r7
 800f3de:	f7ff ff0b 	bl	800f1f8 <__multiply>
 800f3e2:	6020      	str	r0, [r4, #0]
 800f3e4:	f8c0 9000 	str.w	r9, [r0]
 800f3e8:	4604      	mov	r4, r0
 800f3ea:	e7e4      	b.n	800f3b6 <__pow5mult+0x6a>
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3f2:	bf00      	nop
 800f3f4:	08012004 	.word	0x08012004
 800f3f8:	08011e85 	.word	0x08011e85
 800f3fc:	08011fa8 	.word	0x08011fa8

0800f400 <__lshift>:
 800f400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f404:	460c      	mov	r4, r1
 800f406:	6849      	ldr	r1, [r1, #4]
 800f408:	6923      	ldr	r3, [r4, #16]
 800f40a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f40e:	68a3      	ldr	r3, [r4, #8]
 800f410:	4607      	mov	r7, r0
 800f412:	4691      	mov	r9, r2
 800f414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f418:	f108 0601 	add.w	r6, r8, #1
 800f41c:	42b3      	cmp	r3, r6
 800f41e:	db0b      	blt.n	800f438 <__lshift+0x38>
 800f420:	4638      	mov	r0, r7
 800f422:	f7ff fd95 	bl	800ef50 <_Balloc>
 800f426:	4605      	mov	r5, r0
 800f428:	b948      	cbnz	r0, 800f43e <__lshift+0x3e>
 800f42a:	4602      	mov	r2, r0
 800f42c:	4b28      	ldr	r3, [pc, #160]	@ (800f4d0 <__lshift+0xd0>)
 800f42e:	4829      	ldr	r0, [pc, #164]	@ (800f4d4 <__lshift+0xd4>)
 800f430:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f434:	f7fe fe22 	bl	800e07c <__assert_func>
 800f438:	3101      	adds	r1, #1
 800f43a:	005b      	lsls	r3, r3, #1
 800f43c:	e7ee      	b.n	800f41c <__lshift+0x1c>
 800f43e:	2300      	movs	r3, #0
 800f440:	f100 0114 	add.w	r1, r0, #20
 800f444:	f100 0210 	add.w	r2, r0, #16
 800f448:	4618      	mov	r0, r3
 800f44a:	4553      	cmp	r3, sl
 800f44c:	db33      	blt.n	800f4b6 <__lshift+0xb6>
 800f44e:	6920      	ldr	r0, [r4, #16]
 800f450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f454:	f104 0314 	add.w	r3, r4, #20
 800f458:	f019 091f 	ands.w	r9, r9, #31
 800f45c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f460:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f464:	d02b      	beq.n	800f4be <__lshift+0xbe>
 800f466:	f1c9 0e20 	rsb	lr, r9, #32
 800f46a:	468a      	mov	sl, r1
 800f46c:	2200      	movs	r2, #0
 800f46e:	6818      	ldr	r0, [r3, #0]
 800f470:	fa00 f009 	lsl.w	r0, r0, r9
 800f474:	4310      	orrs	r0, r2
 800f476:	f84a 0b04 	str.w	r0, [sl], #4
 800f47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f47e:	459c      	cmp	ip, r3
 800f480:	fa22 f20e 	lsr.w	r2, r2, lr
 800f484:	d8f3      	bhi.n	800f46e <__lshift+0x6e>
 800f486:	ebac 0304 	sub.w	r3, ip, r4
 800f48a:	3b15      	subs	r3, #21
 800f48c:	f023 0303 	bic.w	r3, r3, #3
 800f490:	3304      	adds	r3, #4
 800f492:	f104 0015 	add.w	r0, r4, #21
 800f496:	4584      	cmp	ip, r0
 800f498:	bf38      	it	cc
 800f49a:	2304      	movcc	r3, #4
 800f49c:	50ca      	str	r2, [r1, r3]
 800f49e:	b10a      	cbz	r2, 800f4a4 <__lshift+0xa4>
 800f4a0:	f108 0602 	add.w	r6, r8, #2
 800f4a4:	3e01      	subs	r6, #1
 800f4a6:	4638      	mov	r0, r7
 800f4a8:	612e      	str	r6, [r5, #16]
 800f4aa:	4621      	mov	r1, r4
 800f4ac:	f7ff fd90 	bl	800efd0 <_Bfree>
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	e7c5      	b.n	800f44a <__lshift+0x4a>
 800f4be:	3904      	subs	r1, #4
 800f4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4c8:	459c      	cmp	ip, r3
 800f4ca:	d8f9      	bhi.n	800f4c0 <__lshift+0xc0>
 800f4cc:	e7ea      	b.n	800f4a4 <__lshift+0xa4>
 800f4ce:	bf00      	nop
 800f4d0:	08011f97 	.word	0x08011f97
 800f4d4:	08011fa8 	.word	0x08011fa8

0800f4d8 <__mcmp>:
 800f4d8:	690a      	ldr	r2, [r1, #16]
 800f4da:	4603      	mov	r3, r0
 800f4dc:	6900      	ldr	r0, [r0, #16]
 800f4de:	1a80      	subs	r0, r0, r2
 800f4e0:	b530      	push	{r4, r5, lr}
 800f4e2:	d10e      	bne.n	800f502 <__mcmp+0x2a>
 800f4e4:	3314      	adds	r3, #20
 800f4e6:	3114      	adds	r1, #20
 800f4e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f4ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f4f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f4f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f4f8:	4295      	cmp	r5, r2
 800f4fa:	d003      	beq.n	800f504 <__mcmp+0x2c>
 800f4fc:	d205      	bcs.n	800f50a <__mcmp+0x32>
 800f4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f502:	bd30      	pop	{r4, r5, pc}
 800f504:	42a3      	cmp	r3, r4
 800f506:	d3f3      	bcc.n	800f4f0 <__mcmp+0x18>
 800f508:	e7fb      	b.n	800f502 <__mcmp+0x2a>
 800f50a:	2001      	movs	r0, #1
 800f50c:	e7f9      	b.n	800f502 <__mcmp+0x2a>
	...

0800f510 <__mdiff>:
 800f510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f514:	4689      	mov	r9, r1
 800f516:	4606      	mov	r6, r0
 800f518:	4611      	mov	r1, r2
 800f51a:	4648      	mov	r0, r9
 800f51c:	4614      	mov	r4, r2
 800f51e:	f7ff ffdb 	bl	800f4d8 <__mcmp>
 800f522:	1e05      	subs	r5, r0, #0
 800f524:	d112      	bne.n	800f54c <__mdiff+0x3c>
 800f526:	4629      	mov	r1, r5
 800f528:	4630      	mov	r0, r6
 800f52a:	f7ff fd11 	bl	800ef50 <_Balloc>
 800f52e:	4602      	mov	r2, r0
 800f530:	b928      	cbnz	r0, 800f53e <__mdiff+0x2e>
 800f532:	4b3f      	ldr	r3, [pc, #252]	@ (800f630 <__mdiff+0x120>)
 800f534:	f240 2137 	movw	r1, #567	@ 0x237
 800f538:	483e      	ldr	r0, [pc, #248]	@ (800f634 <__mdiff+0x124>)
 800f53a:	f7fe fd9f 	bl	800e07c <__assert_func>
 800f53e:	2301      	movs	r3, #1
 800f540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f544:	4610      	mov	r0, r2
 800f546:	b003      	add	sp, #12
 800f548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54c:	bfbc      	itt	lt
 800f54e:	464b      	movlt	r3, r9
 800f550:	46a1      	movlt	r9, r4
 800f552:	4630      	mov	r0, r6
 800f554:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f558:	bfba      	itte	lt
 800f55a:	461c      	movlt	r4, r3
 800f55c:	2501      	movlt	r5, #1
 800f55e:	2500      	movge	r5, #0
 800f560:	f7ff fcf6 	bl	800ef50 <_Balloc>
 800f564:	4602      	mov	r2, r0
 800f566:	b918      	cbnz	r0, 800f570 <__mdiff+0x60>
 800f568:	4b31      	ldr	r3, [pc, #196]	@ (800f630 <__mdiff+0x120>)
 800f56a:	f240 2145 	movw	r1, #581	@ 0x245
 800f56e:	e7e3      	b.n	800f538 <__mdiff+0x28>
 800f570:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f574:	6926      	ldr	r6, [r4, #16]
 800f576:	60c5      	str	r5, [r0, #12]
 800f578:	f109 0310 	add.w	r3, r9, #16
 800f57c:	f109 0514 	add.w	r5, r9, #20
 800f580:	f104 0e14 	add.w	lr, r4, #20
 800f584:	f100 0b14 	add.w	fp, r0, #20
 800f588:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f58c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f590:	9301      	str	r3, [sp, #4]
 800f592:	46d9      	mov	r9, fp
 800f594:	f04f 0c00 	mov.w	ip, #0
 800f598:	9b01      	ldr	r3, [sp, #4]
 800f59a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f59e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f5a2:	9301      	str	r3, [sp, #4]
 800f5a4:	fa1f f38a 	uxth.w	r3, sl
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	b283      	uxth	r3, r0
 800f5ac:	1acb      	subs	r3, r1, r3
 800f5ae:	0c00      	lsrs	r0, r0, #16
 800f5b0:	4463      	add	r3, ip
 800f5b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f5b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f5c0:	4576      	cmp	r6, lr
 800f5c2:	f849 3b04 	str.w	r3, [r9], #4
 800f5c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f5ca:	d8e5      	bhi.n	800f598 <__mdiff+0x88>
 800f5cc:	1b33      	subs	r3, r6, r4
 800f5ce:	3b15      	subs	r3, #21
 800f5d0:	f023 0303 	bic.w	r3, r3, #3
 800f5d4:	3415      	adds	r4, #21
 800f5d6:	3304      	adds	r3, #4
 800f5d8:	42a6      	cmp	r6, r4
 800f5da:	bf38      	it	cc
 800f5dc:	2304      	movcc	r3, #4
 800f5de:	441d      	add	r5, r3
 800f5e0:	445b      	add	r3, fp
 800f5e2:	461e      	mov	r6, r3
 800f5e4:	462c      	mov	r4, r5
 800f5e6:	4544      	cmp	r4, r8
 800f5e8:	d30e      	bcc.n	800f608 <__mdiff+0xf8>
 800f5ea:	f108 0103 	add.w	r1, r8, #3
 800f5ee:	1b49      	subs	r1, r1, r5
 800f5f0:	f021 0103 	bic.w	r1, r1, #3
 800f5f4:	3d03      	subs	r5, #3
 800f5f6:	45a8      	cmp	r8, r5
 800f5f8:	bf38      	it	cc
 800f5fa:	2100      	movcc	r1, #0
 800f5fc:	440b      	add	r3, r1
 800f5fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f602:	b191      	cbz	r1, 800f62a <__mdiff+0x11a>
 800f604:	6117      	str	r7, [r2, #16]
 800f606:	e79d      	b.n	800f544 <__mdiff+0x34>
 800f608:	f854 1b04 	ldr.w	r1, [r4], #4
 800f60c:	46e6      	mov	lr, ip
 800f60e:	0c08      	lsrs	r0, r1, #16
 800f610:	fa1c fc81 	uxtah	ip, ip, r1
 800f614:	4471      	add	r1, lr
 800f616:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f61a:	b289      	uxth	r1, r1
 800f61c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f620:	f846 1b04 	str.w	r1, [r6], #4
 800f624:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f628:	e7dd      	b.n	800f5e6 <__mdiff+0xd6>
 800f62a:	3f01      	subs	r7, #1
 800f62c:	e7e7      	b.n	800f5fe <__mdiff+0xee>
 800f62e:	bf00      	nop
 800f630:	08011f97 	.word	0x08011f97
 800f634:	08011fa8 	.word	0x08011fa8

0800f638 <__ulp>:
 800f638:	b082      	sub	sp, #8
 800f63a:	ed8d 0b00 	vstr	d0, [sp]
 800f63e:	9a01      	ldr	r2, [sp, #4]
 800f640:	4b0f      	ldr	r3, [pc, #60]	@ (800f680 <__ulp+0x48>)
 800f642:	4013      	ands	r3, r2
 800f644:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f648:	2b00      	cmp	r3, #0
 800f64a:	dc08      	bgt.n	800f65e <__ulp+0x26>
 800f64c:	425b      	negs	r3, r3
 800f64e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f652:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f656:	da04      	bge.n	800f662 <__ulp+0x2a>
 800f658:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f65c:	4113      	asrs	r3, r2
 800f65e:	2200      	movs	r2, #0
 800f660:	e008      	b.n	800f674 <__ulp+0x3c>
 800f662:	f1a2 0314 	sub.w	r3, r2, #20
 800f666:	2b1e      	cmp	r3, #30
 800f668:	bfda      	itte	le
 800f66a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f66e:	40da      	lsrle	r2, r3
 800f670:	2201      	movgt	r2, #1
 800f672:	2300      	movs	r3, #0
 800f674:	4619      	mov	r1, r3
 800f676:	4610      	mov	r0, r2
 800f678:	ec41 0b10 	vmov	d0, r0, r1
 800f67c:	b002      	add	sp, #8
 800f67e:	4770      	bx	lr
 800f680:	7ff00000 	.word	0x7ff00000

0800f684 <__b2d>:
 800f684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f688:	6906      	ldr	r6, [r0, #16]
 800f68a:	f100 0814 	add.w	r8, r0, #20
 800f68e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f692:	1f37      	subs	r7, r6, #4
 800f694:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f698:	4610      	mov	r0, r2
 800f69a:	f7ff fd4b 	bl	800f134 <__hi0bits>
 800f69e:	f1c0 0320 	rsb	r3, r0, #32
 800f6a2:	280a      	cmp	r0, #10
 800f6a4:	600b      	str	r3, [r1, #0]
 800f6a6:	491b      	ldr	r1, [pc, #108]	@ (800f714 <__b2d+0x90>)
 800f6a8:	dc15      	bgt.n	800f6d6 <__b2d+0x52>
 800f6aa:	f1c0 0c0b 	rsb	ip, r0, #11
 800f6ae:	fa22 f30c 	lsr.w	r3, r2, ip
 800f6b2:	45b8      	cmp	r8, r7
 800f6b4:	ea43 0501 	orr.w	r5, r3, r1
 800f6b8:	bf34      	ite	cc
 800f6ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f6be:	2300      	movcs	r3, #0
 800f6c0:	3015      	adds	r0, #21
 800f6c2:	fa02 f000 	lsl.w	r0, r2, r0
 800f6c6:	fa23 f30c 	lsr.w	r3, r3, ip
 800f6ca:	4303      	orrs	r3, r0
 800f6cc:	461c      	mov	r4, r3
 800f6ce:	ec45 4b10 	vmov	d0, r4, r5
 800f6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6d6:	45b8      	cmp	r8, r7
 800f6d8:	bf3a      	itte	cc
 800f6da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f6de:	f1a6 0708 	subcc.w	r7, r6, #8
 800f6e2:	2300      	movcs	r3, #0
 800f6e4:	380b      	subs	r0, #11
 800f6e6:	d012      	beq.n	800f70e <__b2d+0x8a>
 800f6e8:	f1c0 0120 	rsb	r1, r0, #32
 800f6ec:	fa23 f401 	lsr.w	r4, r3, r1
 800f6f0:	4082      	lsls	r2, r0
 800f6f2:	4322      	orrs	r2, r4
 800f6f4:	4547      	cmp	r7, r8
 800f6f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f6fa:	bf8c      	ite	hi
 800f6fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f700:	2200      	movls	r2, #0
 800f702:	4083      	lsls	r3, r0
 800f704:	40ca      	lsrs	r2, r1
 800f706:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f70a:	4313      	orrs	r3, r2
 800f70c:	e7de      	b.n	800f6cc <__b2d+0x48>
 800f70e:	ea42 0501 	orr.w	r5, r2, r1
 800f712:	e7db      	b.n	800f6cc <__b2d+0x48>
 800f714:	3ff00000 	.word	0x3ff00000

0800f718 <__d2b>:
 800f718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f71c:	460f      	mov	r7, r1
 800f71e:	2101      	movs	r1, #1
 800f720:	ec59 8b10 	vmov	r8, r9, d0
 800f724:	4616      	mov	r6, r2
 800f726:	f7ff fc13 	bl	800ef50 <_Balloc>
 800f72a:	4604      	mov	r4, r0
 800f72c:	b930      	cbnz	r0, 800f73c <__d2b+0x24>
 800f72e:	4602      	mov	r2, r0
 800f730:	4b23      	ldr	r3, [pc, #140]	@ (800f7c0 <__d2b+0xa8>)
 800f732:	4824      	ldr	r0, [pc, #144]	@ (800f7c4 <__d2b+0xac>)
 800f734:	f240 310f 	movw	r1, #783	@ 0x30f
 800f738:	f7fe fca0 	bl	800e07c <__assert_func>
 800f73c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f744:	b10d      	cbz	r5, 800f74a <__d2b+0x32>
 800f746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f74a:	9301      	str	r3, [sp, #4]
 800f74c:	f1b8 0300 	subs.w	r3, r8, #0
 800f750:	d023      	beq.n	800f79a <__d2b+0x82>
 800f752:	4668      	mov	r0, sp
 800f754:	9300      	str	r3, [sp, #0]
 800f756:	f7ff fd0c 	bl	800f172 <__lo0bits>
 800f75a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f75e:	b1d0      	cbz	r0, 800f796 <__d2b+0x7e>
 800f760:	f1c0 0320 	rsb	r3, r0, #32
 800f764:	fa02 f303 	lsl.w	r3, r2, r3
 800f768:	430b      	orrs	r3, r1
 800f76a:	40c2      	lsrs	r2, r0
 800f76c:	6163      	str	r3, [r4, #20]
 800f76e:	9201      	str	r2, [sp, #4]
 800f770:	9b01      	ldr	r3, [sp, #4]
 800f772:	61a3      	str	r3, [r4, #24]
 800f774:	2b00      	cmp	r3, #0
 800f776:	bf0c      	ite	eq
 800f778:	2201      	moveq	r2, #1
 800f77a:	2202      	movne	r2, #2
 800f77c:	6122      	str	r2, [r4, #16]
 800f77e:	b1a5      	cbz	r5, 800f7aa <__d2b+0x92>
 800f780:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f784:	4405      	add	r5, r0
 800f786:	603d      	str	r5, [r7, #0]
 800f788:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f78c:	6030      	str	r0, [r6, #0]
 800f78e:	4620      	mov	r0, r4
 800f790:	b003      	add	sp, #12
 800f792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f796:	6161      	str	r1, [r4, #20]
 800f798:	e7ea      	b.n	800f770 <__d2b+0x58>
 800f79a:	a801      	add	r0, sp, #4
 800f79c:	f7ff fce9 	bl	800f172 <__lo0bits>
 800f7a0:	9b01      	ldr	r3, [sp, #4]
 800f7a2:	6163      	str	r3, [r4, #20]
 800f7a4:	3020      	adds	r0, #32
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	e7e8      	b.n	800f77c <__d2b+0x64>
 800f7aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f7ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f7b2:	6038      	str	r0, [r7, #0]
 800f7b4:	6918      	ldr	r0, [r3, #16]
 800f7b6:	f7ff fcbd 	bl	800f134 <__hi0bits>
 800f7ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7be:	e7e5      	b.n	800f78c <__d2b+0x74>
 800f7c0:	08011f97 	.word	0x08011f97
 800f7c4:	08011fa8 	.word	0x08011fa8

0800f7c8 <__ratio>:
 800f7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7cc:	b085      	sub	sp, #20
 800f7ce:	e9cd 1000 	strd	r1, r0, [sp]
 800f7d2:	a902      	add	r1, sp, #8
 800f7d4:	f7ff ff56 	bl	800f684 <__b2d>
 800f7d8:	9800      	ldr	r0, [sp, #0]
 800f7da:	a903      	add	r1, sp, #12
 800f7dc:	ec55 4b10 	vmov	r4, r5, d0
 800f7e0:	f7ff ff50 	bl	800f684 <__b2d>
 800f7e4:	9b01      	ldr	r3, [sp, #4]
 800f7e6:	6919      	ldr	r1, [r3, #16]
 800f7e8:	9b00      	ldr	r3, [sp, #0]
 800f7ea:	691b      	ldr	r3, [r3, #16]
 800f7ec:	1ac9      	subs	r1, r1, r3
 800f7ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f7f2:	1a9b      	subs	r3, r3, r2
 800f7f4:	ec5b ab10 	vmov	sl, fp, d0
 800f7f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	bfce      	itee	gt
 800f800:	462a      	movgt	r2, r5
 800f802:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f806:	465a      	movle	r2, fp
 800f808:	462f      	mov	r7, r5
 800f80a:	46d9      	mov	r9, fp
 800f80c:	bfcc      	ite	gt
 800f80e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f812:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f816:	464b      	mov	r3, r9
 800f818:	4652      	mov	r2, sl
 800f81a:	4620      	mov	r0, r4
 800f81c:	4639      	mov	r1, r7
 800f81e:	f7f1 f815 	bl	800084c <__aeabi_ddiv>
 800f822:	ec41 0b10 	vmov	d0, r0, r1
 800f826:	b005      	add	sp, #20
 800f828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f82c <__copybits>:
 800f82c:	3901      	subs	r1, #1
 800f82e:	b570      	push	{r4, r5, r6, lr}
 800f830:	1149      	asrs	r1, r1, #5
 800f832:	6914      	ldr	r4, [r2, #16]
 800f834:	3101      	adds	r1, #1
 800f836:	f102 0314 	add.w	r3, r2, #20
 800f83a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f83e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f842:	1f05      	subs	r5, r0, #4
 800f844:	42a3      	cmp	r3, r4
 800f846:	d30c      	bcc.n	800f862 <__copybits+0x36>
 800f848:	1aa3      	subs	r3, r4, r2
 800f84a:	3b11      	subs	r3, #17
 800f84c:	f023 0303 	bic.w	r3, r3, #3
 800f850:	3211      	adds	r2, #17
 800f852:	42a2      	cmp	r2, r4
 800f854:	bf88      	it	hi
 800f856:	2300      	movhi	r3, #0
 800f858:	4418      	add	r0, r3
 800f85a:	2300      	movs	r3, #0
 800f85c:	4288      	cmp	r0, r1
 800f85e:	d305      	bcc.n	800f86c <__copybits+0x40>
 800f860:	bd70      	pop	{r4, r5, r6, pc}
 800f862:	f853 6b04 	ldr.w	r6, [r3], #4
 800f866:	f845 6f04 	str.w	r6, [r5, #4]!
 800f86a:	e7eb      	b.n	800f844 <__copybits+0x18>
 800f86c:	f840 3b04 	str.w	r3, [r0], #4
 800f870:	e7f4      	b.n	800f85c <__copybits+0x30>

0800f872 <__any_on>:
 800f872:	f100 0214 	add.w	r2, r0, #20
 800f876:	6900      	ldr	r0, [r0, #16]
 800f878:	114b      	asrs	r3, r1, #5
 800f87a:	4298      	cmp	r0, r3
 800f87c:	b510      	push	{r4, lr}
 800f87e:	db11      	blt.n	800f8a4 <__any_on+0x32>
 800f880:	dd0a      	ble.n	800f898 <__any_on+0x26>
 800f882:	f011 011f 	ands.w	r1, r1, #31
 800f886:	d007      	beq.n	800f898 <__any_on+0x26>
 800f888:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f88c:	fa24 f001 	lsr.w	r0, r4, r1
 800f890:	fa00 f101 	lsl.w	r1, r0, r1
 800f894:	428c      	cmp	r4, r1
 800f896:	d10b      	bne.n	800f8b0 <__any_on+0x3e>
 800f898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d803      	bhi.n	800f8a8 <__any_on+0x36>
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	bd10      	pop	{r4, pc}
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	e7f7      	b.n	800f898 <__any_on+0x26>
 800f8a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f8ac:	2900      	cmp	r1, #0
 800f8ae:	d0f5      	beq.n	800f89c <__any_on+0x2a>
 800f8b0:	2001      	movs	r0, #1
 800f8b2:	e7f6      	b.n	800f8a2 <__any_on+0x30>

0800f8b4 <sulp>:
 800f8b4:	b570      	push	{r4, r5, r6, lr}
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	460d      	mov	r5, r1
 800f8ba:	ec45 4b10 	vmov	d0, r4, r5
 800f8be:	4616      	mov	r6, r2
 800f8c0:	f7ff feba 	bl	800f638 <__ulp>
 800f8c4:	ec51 0b10 	vmov	r0, r1, d0
 800f8c8:	b17e      	cbz	r6, 800f8ea <sulp+0x36>
 800f8ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f8ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	dd09      	ble.n	800f8ea <sulp+0x36>
 800f8d6:	051b      	lsls	r3, r3, #20
 800f8d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f8dc:	2400      	movs	r4, #0
 800f8de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f8e2:	4622      	mov	r2, r4
 800f8e4:	462b      	mov	r3, r5
 800f8e6:	f7f0 fe87 	bl	80005f8 <__aeabi_dmul>
 800f8ea:	ec41 0b10 	vmov	d0, r0, r1
 800f8ee:	bd70      	pop	{r4, r5, r6, pc}

0800f8f0 <_strtod_l>:
 800f8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f4:	b09f      	sub	sp, #124	@ 0x7c
 800f8f6:	460c      	mov	r4, r1
 800f8f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800f8fe:	9005      	str	r0, [sp, #20]
 800f900:	f04f 0a00 	mov.w	sl, #0
 800f904:	f04f 0b00 	mov.w	fp, #0
 800f908:	460a      	mov	r2, r1
 800f90a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f90c:	7811      	ldrb	r1, [r2, #0]
 800f90e:	292b      	cmp	r1, #43	@ 0x2b
 800f910:	d04a      	beq.n	800f9a8 <_strtod_l+0xb8>
 800f912:	d838      	bhi.n	800f986 <_strtod_l+0x96>
 800f914:	290d      	cmp	r1, #13
 800f916:	d832      	bhi.n	800f97e <_strtod_l+0x8e>
 800f918:	2908      	cmp	r1, #8
 800f91a:	d832      	bhi.n	800f982 <_strtod_l+0x92>
 800f91c:	2900      	cmp	r1, #0
 800f91e:	d03b      	beq.n	800f998 <_strtod_l+0xa8>
 800f920:	2200      	movs	r2, #0
 800f922:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f924:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f926:	782a      	ldrb	r2, [r5, #0]
 800f928:	2a30      	cmp	r2, #48	@ 0x30
 800f92a:	f040 80b3 	bne.w	800fa94 <_strtod_l+0x1a4>
 800f92e:	786a      	ldrb	r2, [r5, #1]
 800f930:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f934:	2a58      	cmp	r2, #88	@ 0x58
 800f936:	d16e      	bne.n	800fa16 <_strtod_l+0x126>
 800f938:	9302      	str	r3, [sp, #8]
 800f93a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f93c:	9301      	str	r3, [sp, #4]
 800f93e:	ab1a      	add	r3, sp, #104	@ 0x68
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	4a8e      	ldr	r2, [pc, #568]	@ (800fb7c <_strtod_l+0x28c>)
 800f944:	9805      	ldr	r0, [sp, #20]
 800f946:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f948:	a919      	add	r1, sp, #100	@ 0x64
 800f94a:	f001 fac7 	bl	8010edc <__gethex>
 800f94e:	f010 060f 	ands.w	r6, r0, #15
 800f952:	4604      	mov	r4, r0
 800f954:	d005      	beq.n	800f962 <_strtod_l+0x72>
 800f956:	2e06      	cmp	r6, #6
 800f958:	d128      	bne.n	800f9ac <_strtod_l+0xbc>
 800f95a:	3501      	adds	r5, #1
 800f95c:	2300      	movs	r3, #0
 800f95e:	9519      	str	r5, [sp, #100]	@ 0x64
 800f960:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f962:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f964:	2b00      	cmp	r3, #0
 800f966:	f040 858e 	bne.w	8010486 <_strtod_l+0xb96>
 800f96a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f96c:	b1cb      	cbz	r3, 800f9a2 <_strtod_l+0xb2>
 800f96e:	4652      	mov	r2, sl
 800f970:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f974:	ec43 2b10 	vmov	d0, r2, r3
 800f978:	b01f      	add	sp, #124	@ 0x7c
 800f97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97e:	2920      	cmp	r1, #32
 800f980:	d1ce      	bne.n	800f920 <_strtod_l+0x30>
 800f982:	3201      	adds	r2, #1
 800f984:	e7c1      	b.n	800f90a <_strtod_l+0x1a>
 800f986:	292d      	cmp	r1, #45	@ 0x2d
 800f988:	d1ca      	bne.n	800f920 <_strtod_l+0x30>
 800f98a:	2101      	movs	r1, #1
 800f98c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f98e:	1c51      	adds	r1, r2, #1
 800f990:	9119      	str	r1, [sp, #100]	@ 0x64
 800f992:	7852      	ldrb	r2, [r2, #1]
 800f994:	2a00      	cmp	r2, #0
 800f996:	d1c5      	bne.n	800f924 <_strtod_l+0x34>
 800f998:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f99a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f040 8570 	bne.w	8010482 <_strtod_l+0xb92>
 800f9a2:	4652      	mov	r2, sl
 800f9a4:	465b      	mov	r3, fp
 800f9a6:	e7e5      	b.n	800f974 <_strtod_l+0x84>
 800f9a8:	2100      	movs	r1, #0
 800f9aa:	e7ef      	b.n	800f98c <_strtod_l+0x9c>
 800f9ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f9ae:	b13a      	cbz	r2, 800f9c0 <_strtod_l+0xd0>
 800f9b0:	2135      	movs	r1, #53	@ 0x35
 800f9b2:	a81c      	add	r0, sp, #112	@ 0x70
 800f9b4:	f7ff ff3a 	bl	800f82c <__copybits>
 800f9b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f9ba:	9805      	ldr	r0, [sp, #20]
 800f9bc:	f7ff fb08 	bl	800efd0 <_Bfree>
 800f9c0:	3e01      	subs	r6, #1
 800f9c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f9c4:	2e04      	cmp	r6, #4
 800f9c6:	d806      	bhi.n	800f9d6 <_strtod_l+0xe6>
 800f9c8:	e8df f006 	tbb	[pc, r6]
 800f9cc:	201d0314 	.word	0x201d0314
 800f9d0:	14          	.byte	0x14
 800f9d1:	00          	.byte	0x00
 800f9d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f9d6:	05e1      	lsls	r1, r4, #23
 800f9d8:	bf48      	it	mi
 800f9da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f9de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f9e2:	0d1b      	lsrs	r3, r3, #20
 800f9e4:	051b      	lsls	r3, r3, #20
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d1bb      	bne.n	800f962 <_strtod_l+0x72>
 800f9ea:	f7fe fb05 	bl	800dff8 <__errno>
 800f9ee:	2322      	movs	r3, #34	@ 0x22
 800f9f0:	6003      	str	r3, [r0, #0]
 800f9f2:	e7b6      	b.n	800f962 <_strtod_l+0x72>
 800f9f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f9f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f9fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fa00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fa04:	e7e7      	b.n	800f9d6 <_strtod_l+0xe6>
 800fa06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800fb84 <_strtod_l+0x294>
 800fa0a:	e7e4      	b.n	800f9d6 <_strtod_l+0xe6>
 800fa0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fa10:	f04f 3aff 	mov.w	sl, #4294967295
 800fa14:	e7df      	b.n	800f9d6 <_strtod_l+0xe6>
 800fa16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa18:	1c5a      	adds	r2, r3, #1
 800fa1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800fa1c:	785b      	ldrb	r3, [r3, #1]
 800fa1e:	2b30      	cmp	r3, #48	@ 0x30
 800fa20:	d0f9      	beq.n	800fa16 <_strtod_l+0x126>
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d09d      	beq.n	800f962 <_strtod_l+0x72>
 800fa26:	2301      	movs	r3, #1
 800fa28:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800fa2e:	2300      	movs	r3, #0
 800fa30:	9308      	str	r3, [sp, #32]
 800fa32:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa34:	461f      	mov	r7, r3
 800fa36:	220a      	movs	r2, #10
 800fa38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fa3a:	7805      	ldrb	r5, [r0, #0]
 800fa3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fa40:	b2d9      	uxtb	r1, r3
 800fa42:	2909      	cmp	r1, #9
 800fa44:	d928      	bls.n	800fa98 <_strtod_l+0x1a8>
 800fa46:	494e      	ldr	r1, [pc, #312]	@ (800fb80 <_strtod_l+0x290>)
 800fa48:	2201      	movs	r2, #1
 800fa4a:	f7fe f9f3 	bl	800de34 <strncmp>
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	d032      	beq.n	800fab8 <_strtod_l+0x1c8>
 800fa52:	2000      	movs	r0, #0
 800fa54:	462a      	mov	r2, r5
 800fa56:	4681      	mov	r9, r0
 800fa58:	463d      	mov	r5, r7
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	2a65      	cmp	r2, #101	@ 0x65
 800fa5e:	d001      	beq.n	800fa64 <_strtod_l+0x174>
 800fa60:	2a45      	cmp	r2, #69	@ 0x45
 800fa62:	d114      	bne.n	800fa8e <_strtod_l+0x19e>
 800fa64:	b91d      	cbnz	r5, 800fa6e <_strtod_l+0x17e>
 800fa66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa68:	4302      	orrs	r2, r0
 800fa6a:	d095      	beq.n	800f998 <_strtod_l+0xa8>
 800fa6c:	2500      	movs	r5, #0
 800fa6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fa70:	1c62      	adds	r2, r4, #1
 800fa72:	9219      	str	r2, [sp, #100]	@ 0x64
 800fa74:	7862      	ldrb	r2, [r4, #1]
 800fa76:	2a2b      	cmp	r2, #43	@ 0x2b
 800fa78:	d077      	beq.n	800fb6a <_strtod_l+0x27a>
 800fa7a:	2a2d      	cmp	r2, #45	@ 0x2d
 800fa7c:	d07b      	beq.n	800fb76 <_strtod_l+0x286>
 800fa7e:	f04f 0c00 	mov.w	ip, #0
 800fa82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fa86:	2909      	cmp	r1, #9
 800fa88:	f240 8082 	bls.w	800fb90 <_strtod_l+0x2a0>
 800fa8c:	9419      	str	r4, [sp, #100]	@ 0x64
 800fa8e:	f04f 0800 	mov.w	r8, #0
 800fa92:	e0a2      	b.n	800fbda <_strtod_l+0x2ea>
 800fa94:	2300      	movs	r3, #0
 800fa96:	e7c7      	b.n	800fa28 <_strtod_l+0x138>
 800fa98:	2f08      	cmp	r7, #8
 800fa9a:	bfd5      	itete	le
 800fa9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800fa9e:	9908      	ldrgt	r1, [sp, #32]
 800faa0:	fb02 3301 	mlale	r3, r2, r1, r3
 800faa4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800faa8:	f100 0001 	add.w	r0, r0, #1
 800faac:	bfd4      	ite	le
 800faae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800fab0:	9308      	strgt	r3, [sp, #32]
 800fab2:	3701      	adds	r7, #1
 800fab4:	9019      	str	r0, [sp, #100]	@ 0x64
 800fab6:	e7bf      	b.n	800fa38 <_strtod_l+0x148>
 800fab8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800faba:	1c5a      	adds	r2, r3, #1
 800fabc:	9219      	str	r2, [sp, #100]	@ 0x64
 800fabe:	785a      	ldrb	r2, [r3, #1]
 800fac0:	b37f      	cbz	r7, 800fb22 <_strtod_l+0x232>
 800fac2:	4681      	mov	r9, r0
 800fac4:	463d      	mov	r5, r7
 800fac6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800faca:	2b09      	cmp	r3, #9
 800facc:	d912      	bls.n	800faf4 <_strtod_l+0x204>
 800face:	2301      	movs	r3, #1
 800fad0:	e7c4      	b.n	800fa5c <_strtod_l+0x16c>
 800fad2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fad4:	1c5a      	adds	r2, r3, #1
 800fad6:	9219      	str	r2, [sp, #100]	@ 0x64
 800fad8:	785a      	ldrb	r2, [r3, #1]
 800fada:	3001      	adds	r0, #1
 800fadc:	2a30      	cmp	r2, #48	@ 0x30
 800fade:	d0f8      	beq.n	800fad2 <_strtod_l+0x1e2>
 800fae0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800fae4:	2b08      	cmp	r3, #8
 800fae6:	f200 84d3 	bhi.w	8010490 <_strtod_l+0xba0>
 800faea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800faec:	930c      	str	r3, [sp, #48]	@ 0x30
 800faee:	4681      	mov	r9, r0
 800faf0:	2000      	movs	r0, #0
 800faf2:	4605      	mov	r5, r0
 800faf4:	3a30      	subs	r2, #48	@ 0x30
 800faf6:	f100 0301 	add.w	r3, r0, #1
 800fafa:	d02a      	beq.n	800fb52 <_strtod_l+0x262>
 800fafc:	4499      	add	r9, r3
 800fafe:	eb00 0c05 	add.w	ip, r0, r5
 800fb02:	462b      	mov	r3, r5
 800fb04:	210a      	movs	r1, #10
 800fb06:	4563      	cmp	r3, ip
 800fb08:	d10d      	bne.n	800fb26 <_strtod_l+0x236>
 800fb0a:	1c69      	adds	r1, r5, #1
 800fb0c:	4401      	add	r1, r0
 800fb0e:	4428      	add	r0, r5
 800fb10:	2808      	cmp	r0, #8
 800fb12:	dc16      	bgt.n	800fb42 <_strtod_l+0x252>
 800fb14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fb16:	230a      	movs	r3, #10
 800fb18:	fb03 2300 	mla	r3, r3, r0, r2
 800fb1c:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb1e:	2300      	movs	r3, #0
 800fb20:	e018      	b.n	800fb54 <_strtod_l+0x264>
 800fb22:	4638      	mov	r0, r7
 800fb24:	e7da      	b.n	800fadc <_strtod_l+0x1ec>
 800fb26:	2b08      	cmp	r3, #8
 800fb28:	f103 0301 	add.w	r3, r3, #1
 800fb2c:	dc03      	bgt.n	800fb36 <_strtod_l+0x246>
 800fb2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fb30:	434e      	muls	r6, r1
 800fb32:	960a      	str	r6, [sp, #40]	@ 0x28
 800fb34:	e7e7      	b.n	800fb06 <_strtod_l+0x216>
 800fb36:	2b10      	cmp	r3, #16
 800fb38:	bfde      	ittt	le
 800fb3a:	9e08      	ldrle	r6, [sp, #32]
 800fb3c:	434e      	mulle	r6, r1
 800fb3e:	9608      	strle	r6, [sp, #32]
 800fb40:	e7e1      	b.n	800fb06 <_strtod_l+0x216>
 800fb42:	280f      	cmp	r0, #15
 800fb44:	dceb      	bgt.n	800fb1e <_strtod_l+0x22e>
 800fb46:	9808      	ldr	r0, [sp, #32]
 800fb48:	230a      	movs	r3, #10
 800fb4a:	fb03 2300 	mla	r3, r3, r0, r2
 800fb4e:	9308      	str	r3, [sp, #32]
 800fb50:	e7e5      	b.n	800fb1e <_strtod_l+0x22e>
 800fb52:	4629      	mov	r1, r5
 800fb54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fb56:	1c50      	adds	r0, r2, #1
 800fb58:	9019      	str	r0, [sp, #100]	@ 0x64
 800fb5a:	7852      	ldrb	r2, [r2, #1]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	460d      	mov	r5, r1
 800fb60:	e7b1      	b.n	800fac6 <_strtod_l+0x1d6>
 800fb62:	f04f 0900 	mov.w	r9, #0
 800fb66:	2301      	movs	r3, #1
 800fb68:	e77d      	b.n	800fa66 <_strtod_l+0x176>
 800fb6a:	f04f 0c00 	mov.w	ip, #0
 800fb6e:	1ca2      	adds	r2, r4, #2
 800fb70:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb72:	78a2      	ldrb	r2, [r4, #2]
 800fb74:	e785      	b.n	800fa82 <_strtod_l+0x192>
 800fb76:	f04f 0c01 	mov.w	ip, #1
 800fb7a:	e7f8      	b.n	800fb6e <_strtod_l+0x27e>
 800fb7c:	08012118 	.word	0x08012118
 800fb80:	08012100 	.word	0x08012100
 800fb84:	7ff00000 	.word	0x7ff00000
 800fb88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fb8a:	1c51      	adds	r1, r2, #1
 800fb8c:	9119      	str	r1, [sp, #100]	@ 0x64
 800fb8e:	7852      	ldrb	r2, [r2, #1]
 800fb90:	2a30      	cmp	r2, #48	@ 0x30
 800fb92:	d0f9      	beq.n	800fb88 <_strtod_l+0x298>
 800fb94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800fb98:	2908      	cmp	r1, #8
 800fb9a:	f63f af78 	bhi.w	800fa8e <_strtod_l+0x19e>
 800fb9e:	3a30      	subs	r2, #48	@ 0x30
 800fba0:	920e      	str	r2, [sp, #56]	@ 0x38
 800fba2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fba4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800fba6:	f04f 080a 	mov.w	r8, #10
 800fbaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fbac:	1c56      	adds	r6, r2, #1
 800fbae:	9619      	str	r6, [sp, #100]	@ 0x64
 800fbb0:	7852      	ldrb	r2, [r2, #1]
 800fbb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800fbb6:	f1be 0f09 	cmp.w	lr, #9
 800fbba:	d939      	bls.n	800fc30 <_strtod_l+0x340>
 800fbbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fbbe:	1a76      	subs	r6, r6, r1
 800fbc0:	2e08      	cmp	r6, #8
 800fbc2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800fbc6:	dc03      	bgt.n	800fbd0 <_strtod_l+0x2e0>
 800fbc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fbca:	4588      	cmp	r8, r1
 800fbcc:	bfa8      	it	ge
 800fbce:	4688      	movge	r8, r1
 800fbd0:	f1bc 0f00 	cmp.w	ip, #0
 800fbd4:	d001      	beq.n	800fbda <_strtod_l+0x2ea>
 800fbd6:	f1c8 0800 	rsb	r8, r8, #0
 800fbda:	2d00      	cmp	r5, #0
 800fbdc:	d14e      	bne.n	800fc7c <_strtod_l+0x38c>
 800fbde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fbe0:	4308      	orrs	r0, r1
 800fbe2:	f47f aebe 	bne.w	800f962 <_strtod_l+0x72>
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	f47f aed6 	bne.w	800f998 <_strtod_l+0xa8>
 800fbec:	2a69      	cmp	r2, #105	@ 0x69
 800fbee:	d028      	beq.n	800fc42 <_strtod_l+0x352>
 800fbf0:	dc25      	bgt.n	800fc3e <_strtod_l+0x34e>
 800fbf2:	2a49      	cmp	r2, #73	@ 0x49
 800fbf4:	d025      	beq.n	800fc42 <_strtod_l+0x352>
 800fbf6:	2a4e      	cmp	r2, #78	@ 0x4e
 800fbf8:	f47f aece 	bne.w	800f998 <_strtod_l+0xa8>
 800fbfc:	499b      	ldr	r1, [pc, #620]	@ (800fe6c <_strtod_l+0x57c>)
 800fbfe:	a819      	add	r0, sp, #100	@ 0x64
 800fc00:	f001 fb8e 	bl	8011320 <__match>
 800fc04:	2800      	cmp	r0, #0
 800fc06:	f43f aec7 	beq.w	800f998 <_strtod_l+0xa8>
 800fc0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	2b28      	cmp	r3, #40	@ 0x28
 800fc10:	d12e      	bne.n	800fc70 <_strtod_l+0x380>
 800fc12:	4997      	ldr	r1, [pc, #604]	@ (800fe70 <_strtod_l+0x580>)
 800fc14:	aa1c      	add	r2, sp, #112	@ 0x70
 800fc16:	a819      	add	r0, sp, #100	@ 0x64
 800fc18:	f001 fb96 	bl	8011348 <__hexnan>
 800fc1c:	2805      	cmp	r0, #5
 800fc1e:	d127      	bne.n	800fc70 <_strtod_l+0x380>
 800fc20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800fc26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800fc2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800fc2e:	e698      	b.n	800f962 <_strtod_l+0x72>
 800fc30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fc32:	fb08 2101 	mla	r1, r8, r1, r2
 800fc36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fc3a:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc3c:	e7b5      	b.n	800fbaa <_strtod_l+0x2ba>
 800fc3e:	2a6e      	cmp	r2, #110	@ 0x6e
 800fc40:	e7da      	b.n	800fbf8 <_strtod_l+0x308>
 800fc42:	498c      	ldr	r1, [pc, #560]	@ (800fe74 <_strtod_l+0x584>)
 800fc44:	a819      	add	r0, sp, #100	@ 0x64
 800fc46:	f001 fb6b 	bl	8011320 <__match>
 800fc4a:	2800      	cmp	r0, #0
 800fc4c:	f43f aea4 	beq.w	800f998 <_strtod_l+0xa8>
 800fc50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc52:	4989      	ldr	r1, [pc, #548]	@ (800fe78 <_strtod_l+0x588>)
 800fc54:	3b01      	subs	r3, #1
 800fc56:	a819      	add	r0, sp, #100	@ 0x64
 800fc58:	9319      	str	r3, [sp, #100]	@ 0x64
 800fc5a:	f001 fb61 	bl	8011320 <__match>
 800fc5e:	b910      	cbnz	r0, 800fc66 <_strtod_l+0x376>
 800fc60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc62:	3301      	adds	r3, #1
 800fc64:	9319      	str	r3, [sp, #100]	@ 0x64
 800fc66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800fe88 <_strtod_l+0x598>
 800fc6a:	f04f 0a00 	mov.w	sl, #0
 800fc6e:	e678      	b.n	800f962 <_strtod_l+0x72>
 800fc70:	4882      	ldr	r0, [pc, #520]	@ (800fe7c <_strtod_l+0x58c>)
 800fc72:	f001 f8a9 	bl	8010dc8 <nan>
 800fc76:	ec5b ab10 	vmov	sl, fp, d0
 800fc7a:	e672      	b.n	800f962 <_strtod_l+0x72>
 800fc7c:	eba8 0309 	sub.w	r3, r8, r9
 800fc80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fc82:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc84:	2f00      	cmp	r7, #0
 800fc86:	bf08      	it	eq
 800fc88:	462f      	moveq	r7, r5
 800fc8a:	2d10      	cmp	r5, #16
 800fc8c:	462c      	mov	r4, r5
 800fc8e:	bfa8      	it	ge
 800fc90:	2410      	movge	r4, #16
 800fc92:	f7f0 fc37 	bl	8000504 <__aeabi_ui2d>
 800fc96:	2d09      	cmp	r5, #9
 800fc98:	4682      	mov	sl, r0
 800fc9a:	468b      	mov	fp, r1
 800fc9c:	dc13      	bgt.n	800fcc6 <_strtod_l+0x3d6>
 800fc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	f43f ae5e 	beq.w	800f962 <_strtod_l+0x72>
 800fca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fca8:	dd78      	ble.n	800fd9c <_strtod_l+0x4ac>
 800fcaa:	2b16      	cmp	r3, #22
 800fcac:	dc5f      	bgt.n	800fd6e <_strtod_l+0x47e>
 800fcae:	4974      	ldr	r1, [pc, #464]	@ (800fe80 <_strtod_l+0x590>)
 800fcb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fcb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcb8:	4652      	mov	r2, sl
 800fcba:	465b      	mov	r3, fp
 800fcbc:	f7f0 fc9c 	bl	80005f8 <__aeabi_dmul>
 800fcc0:	4682      	mov	sl, r0
 800fcc2:	468b      	mov	fp, r1
 800fcc4:	e64d      	b.n	800f962 <_strtod_l+0x72>
 800fcc6:	4b6e      	ldr	r3, [pc, #440]	@ (800fe80 <_strtod_l+0x590>)
 800fcc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fccc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800fcd0:	f7f0 fc92 	bl	80005f8 <__aeabi_dmul>
 800fcd4:	4682      	mov	sl, r0
 800fcd6:	9808      	ldr	r0, [sp, #32]
 800fcd8:	468b      	mov	fp, r1
 800fcda:	f7f0 fc13 	bl	8000504 <__aeabi_ui2d>
 800fcde:	4602      	mov	r2, r0
 800fce0:	460b      	mov	r3, r1
 800fce2:	4650      	mov	r0, sl
 800fce4:	4659      	mov	r1, fp
 800fce6:	f7f0 fad1 	bl	800028c <__adddf3>
 800fcea:	2d0f      	cmp	r5, #15
 800fcec:	4682      	mov	sl, r0
 800fcee:	468b      	mov	fp, r1
 800fcf0:	ddd5      	ble.n	800fc9e <_strtod_l+0x3ae>
 800fcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcf4:	1b2c      	subs	r4, r5, r4
 800fcf6:	441c      	add	r4, r3
 800fcf8:	2c00      	cmp	r4, #0
 800fcfa:	f340 8096 	ble.w	800fe2a <_strtod_l+0x53a>
 800fcfe:	f014 030f 	ands.w	r3, r4, #15
 800fd02:	d00a      	beq.n	800fd1a <_strtod_l+0x42a>
 800fd04:	495e      	ldr	r1, [pc, #376]	@ (800fe80 <_strtod_l+0x590>)
 800fd06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd0a:	4652      	mov	r2, sl
 800fd0c:	465b      	mov	r3, fp
 800fd0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd12:	f7f0 fc71 	bl	80005f8 <__aeabi_dmul>
 800fd16:	4682      	mov	sl, r0
 800fd18:	468b      	mov	fp, r1
 800fd1a:	f034 040f 	bics.w	r4, r4, #15
 800fd1e:	d073      	beq.n	800fe08 <_strtod_l+0x518>
 800fd20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800fd24:	dd48      	ble.n	800fdb8 <_strtod_l+0x4c8>
 800fd26:	2400      	movs	r4, #0
 800fd28:	46a0      	mov	r8, r4
 800fd2a:	940a      	str	r4, [sp, #40]	@ 0x28
 800fd2c:	46a1      	mov	r9, r4
 800fd2e:	9a05      	ldr	r2, [sp, #20]
 800fd30:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fe88 <_strtod_l+0x598>
 800fd34:	2322      	movs	r3, #34	@ 0x22
 800fd36:	6013      	str	r3, [r2, #0]
 800fd38:	f04f 0a00 	mov.w	sl, #0
 800fd3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	f43f ae0f 	beq.w	800f962 <_strtod_l+0x72>
 800fd44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd46:	9805      	ldr	r0, [sp, #20]
 800fd48:	f7ff f942 	bl	800efd0 <_Bfree>
 800fd4c:	9805      	ldr	r0, [sp, #20]
 800fd4e:	4649      	mov	r1, r9
 800fd50:	f7ff f93e 	bl	800efd0 <_Bfree>
 800fd54:	9805      	ldr	r0, [sp, #20]
 800fd56:	4641      	mov	r1, r8
 800fd58:	f7ff f93a 	bl	800efd0 <_Bfree>
 800fd5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fd5e:	9805      	ldr	r0, [sp, #20]
 800fd60:	f7ff f936 	bl	800efd0 <_Bfree>
 800fd64:	9805      	ldr	r0, [sp, #20]
 800fd66:	4621      	mov	r1, r4
 800fd68:	f7ff f932 	bl	800efd0 <_Bfree>
 800fd6c:	e5f9      	b.n	800f962 <_strtod_l+0x72>
 800fd6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fd74:	4293      	cmp	r3, r2
 800fd76:	dbbc      	blt.n	800fcf2 <_strtod_l+0x402>
 800fd78:	4c41      	ldr	r4, [pc, #260]	@ (800fe80 <_strtod_l+0x590>)
 800fd7a:	f1c5 050f 	rsb	r5, r5, #15
 800fd7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fd82:	4652      	mov	r2, sl
 800fd84:	465b      	mov	r3, fp
 800fd86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd8a:	f7f0 fc35 	bl	80005f8 <__aeabi_dmul>
 800fd8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd90:	1b5d      	subs	r5, r3, r5
 800fd92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fd96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fd9a:	e78f      	b.n	800fcbc <_strtod_l+0x3cc>
 800fd9c:	3316      	adds	r3, #22
 800fd9e:	dba8      	blt.n	800fcf2 <_strtod_l+0x402>
 800fda0:	4b37      	ldr	r3, [pc, #220]	@ (800fe80 <_strtod_l+0x590>)
 800fda2:	eba9 0808 	sub.w	r8, r9, r8
 800fda6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fdaa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fdae:	4650      	mov	r0, sl
 800fdb0:	4659      	mov	r1, fp
 800fdb2:	f7f0 fd4b 	bl	800084c <__aeabi_ddiv>
 800fdb6:	e783      	b.n	800fcc0 <_strtod_l+0x3d0>
 800fdb8:	4b32      	ldr	r3, [pc, #200]	@ (800fe84 <_strtod_l+0x594>)
 800fdba:	9308      	str	r3, [sp, #32]
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	1124      	asrs	r4, r4, #4
 800fdc0:	4650      	mov	r0, sl
 800fdc2:	4659      	mov	r1, fp
 800fdc4:	461e      	mov	r6, r3
 800fdc6:	2c01      	cmp	r4, #1
 800fdc8:	dc21      	bgt.n	800fe0e <_strtod_l+0x51e>
 800fdca:	b10b      	cbz	r3, 800fdd0 <_strtod_l+0x4e0>
 800fdcc:	4682      	mov	sl, r0
 800fdce:	468b      	mov	fp, r1
 800fdd0:	492c      	ldr	r1, [pc, #176]	@ (800fe84 <_strtod_l+0x594>)
 800fdd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fdd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fdda:	4652      	mov	r2, sl
 800fddc:	465b      	mov	r3, fp
 800fdde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fde2:	f7f0 fc09 	bl	80005f8 <__aeabi_dmul>
 800fde6:	4b28      	ldr	r3, [pc, #160]	@ (800fe88 <_strtod_l+0x598>)
 800fde8:	460a      	mov	r2, r1
 800fdea:	400b      	ands	r3, r1
 800fdec:	4927      	ldr	r1, [pc, #156]	@ (800fe8c <_strtod_l+0x59c>)
 800fdee:	428b      	cmp	r3, r1
 800fdf0:	4682      	mov	sl, r0
 800fdf2:	d898      	bhi.n	800fd26 <_strtod_l+0x436>
 800fdf4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800fdf8:	428b      	cmp	r3, r1
 800fdfa:	bf86      	itte	hi
 800fdfc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800fe90 <_strtod_l+0x5a0>
 800fe00:	f04f 3aff 	movhi.w	sl, #4294967295
 800fe04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fe08:	2300      	movs	r3, #0
 800fe0a:	9308      	str	r3, [sp, #32]
 800fe0c:	e07a      	b.n	800ff04 <_strtod_l+0x614>
 800fe0e:	07e2      	lsls	r2, r4, #31
 800fe10:	d505      	bpl.n	800fe1e <_strtod_l+0x52e>
 800fe12:	9b08      	ldr	r3, [sp, #32]
 800fe14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe18:	f7f0 fbee 	bl	80005f8 <__aeabi_dmul>
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	9a08      	ldr	r2, [sp, #32]
 800fe20:	3208      	adds	r2, #8
 800fe22:	3601      	adds	r6, #1
 800fe24:	1064      	asrs	r4, r4, #1
 800fe26:	9208      	str	r2, [sp, #32]
 800fe28:	e7cd      	b.n	800fdc6 <_strtod_l+0x4d6>
 800fe2a:	d0ed      	beq.n	800fe08 <_strtod_l+0x518>
 800fe2c:	4264      	negs	r4, r4
 800fe2e:	f014 020f 	ands.w	r2, r4, #15
 800fe32:	d00a      	beq.n	800fe4a <_strtod_l+0x55a>
 800fe34:	4b12      	ldr	r3, [pc, #72]	@ (800fe80 <_strtod_l+0x590>)
 800fe36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe3a:	4650      	mov	r0, sl
 800fe3c:	4659      	mov	r1, fp
 800fe3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe42:	f7f0 fd03 	bl	800084c <__aeabi_ddiv>
 800fe46:	4682      	mov	sl, r0
 800fe48:	468b      	mov	fp, r1
 800fe4a:	1124      	asrs	r4, r4, #4
 800fe4c:	d0dc      	beq.n	800fe08 <_strtod_l+0x518>
 800fe4e:	2c1f      	cmp	r4, #31
 800fe50:	dd20      	ble.n	800fe94 <_strtod_l+0x5a4>
 800fe52:	2400      	movs	r4, #0
 800fe54:	46a0      	mov	r8, r4
 800fe56:	940a      	str	r4, [sp, #40]	@ 0x28
 800fe58:	46a1      	mov	r9, r4
 800fe5a:	9a05      	ldr	r2, [sp, #20]
 800fe5c:	2322      	movs	r3, #34	@ 0x22
 800fe5e:	f04f 0a00 	mov.w	sl, #0
 800fe62:	f04f 0b00 	mov.w	fp, #0
 800fe66:	6013      	str	r3, [r2, #0]
 800fe68:	e768      	b.n	800fd3c <_strtod_l+0x44c>
 800fe6a:	bf00      	nop
 800fe6c:	08011e59 	.word	0x08011e59
 800fe70:	08012104 	.word	0x08012104
 800fe74:	08011e51 	.word	0x08011e51
 800fe78:	08011f35 	.word	0x08011f35
 800fe7c:	08011f31 	.word	0x08011f31
 800fe80:	08012038 	.word	0x08012038
 800fe84:	08012010 	.word	0x08012010
 800fe88:	7ff00000 	.word	0x7ff00000
 800fe8c:	7ca00000 	.word	0x7ca00000
 800fe90:	7fefffff 	.word	0x7fefffff
 800fe94:	f014 0310 	ands.w	r3, r4, #16
 800fe98:	bf18      	it	ne
 800fe9a:	236a      	movne	r3, #106	@ 0x6a
 800fe9c:	4ea9      	ldr	r6, [pc, #676]	@ (8010144 <_strtod_l+0x854>)
 800fe9e:	9308      	str	r3, [sp, #32]
 800fea0:	4650      	mov	r0, sl
 800fea2:	4659      	mov	r1, fp
 800fea4:	2300      	movs	r3, #0
 800fea6:	07e2      	lsls	r2, r4, #31
 800fea8:	d504      	bpl.n	800feb4 <_strtod_l+0x5c4>
 800feaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800feae:	f7f0 fba3 	bl	80005f8 <__aeabi_dmul>
 800feb2:	2301      	movs	r3, #1
 800feb4:	1064      	asrs	r4, r4, #1
 800feb6:	f106 0608 	add.w	r6, r6, #8
 800feba:	d1f4      	bne.n	800fea6 <_strtod_l+0x5b6>
 800febc:	b10b      	cbz	r3, 800fec2 <_strtod_l+0x5d2>
 800febe:	4682      	mov	sl, r0
 800fec0:	468b      	mov	fp, r1
 800fec2:	9b08      	ldr	r3, [sp, #32]
 800fec4:	b1b3      	cbz	r3, 800fef4 <_strtod_l+0x604>
 800fec6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800feca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fece:	2b00      	cmp	r3, #0
 800fed0:	4659      	mov	r1, fp
 800fed2:	dd0f      	ble.n	800fef4 <_strtod_l+0x604>
 800fed4:	2b1f      	cmp	r3, #31
 800fed6:	dd55      	ble.n	800ff84 <_strtod_l+0x694>
 800fed8:	2b34      	cmp	r3, #52	@ 0x34
 800feda:	bfde      	ittt	le
 800fedc:	f04f 33ff 	movle.w	r3, #4294967295
 800fee0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fee4:	4093      	lslle	r3, r2
 800fee6:	f04f 0a00 	mov.w	sl, #0
 800feea:	bfcc      	ite	gt
 800feec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fef0:	ea03 0b01 	andle.w	fp, r3, r1
 800fef4:	2200      	movs	r2, #0
 800fef6:	2300      	movs	r3, #0
 800fef8:	4650      	mov	r0, sl
 800fefa:	4659      	mov	r1, fp
 800fefc:	f7f0 fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d1a6      	bne.n	800fe52 <_strtod_l+0x562>
 800ff04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff06:	9300      	str	r3, [sp, #0]
 800ff08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ff0a:	9805      	ldr	r0, [sp, #20]
 800ff0c:	462b      	mov	r3, r5
 800ff0e:	463a      	mov	r2, r7
 800ff10:	f7ff f8c6 	bl	800f0a0 <__s2b>
 800ff14:	900a      	str	r0, [sp, #40]	@ 0x28
 800ff16:	2800      	cmp	r0, #0
 800ff18:	f43f af05 	beq.w	800fd26 <_strtod_l+0x436>
 800ff1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff1e:	2a00      	cmp	r2, #0
 800ff20:	eba9 0308 	sub.w	r3, r9, r8
 800ff24:	bfa8      	it	ge
 800ff26:	2300      	movge	r3, #0
 800ff28:	9312      	str	r3, [sp, #72]	@ 0x48
 800ff2a:	2400      	movs	r4, #0
 800ff2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ff30:	9316      	str	r3, [sp, #88]	@ 0x58
 800ff32:	46a0      	mov	r8, r4
 800ff34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff36:	9805      	ldr	r0, [sp, #20]
 800ff38:	6859      	ldr	r1, [r3, #4]
 800ff3a:	f7ff f809 	bl	800ef50 <_Balloc>
 800ff3e:	4681      	mov	r9, r0
 800ff40:	2800      	cmp	r0, #0
 800ff42:	f43f aef4 	beq.w	800fd2e <_strtod_l+0x43e>
 800ff46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff48:	691a      	ldr	r2, [r3, #16]
 800ff4a:	3202      	adds	r2, #2
 800ff4c:	f103 010c 	add.w	r1, r3, #12
 800ff50:	0092      	lsls	r2, r2, #2
 800ff52:	300c      	adds	r0, #12
 800ff54:	f7fe f87d 	bl	800e052 <memcpy>
 800ff58:	ec4b ab10 	vmov	d0, sl, fp
 800ff5c:	9805      	ldr	r0, [sp, #20]
 800ff5e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ff60:	a91b      	add	r1, sp, #108	@ 0x6c
 800ff62:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ff66:	f7ff fbd7 	bl	800f718 <__d2b>
 800ff6a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	f43f aede 	beq.w	800fd2e <_strtod_l+0x43e>
 800ff72:	9805      	ldr	r0, [sp, #20]
 800ff74:	2101      	movs	r1, #1
 800ff76:	f7ff f929 	bl	800f1cc <__i2b>
 800ff7a:	4680      	mov	r8, r0
 800ff7c:	b948      	cbnz	r0, 800ff92 <_strtod_l+0x6a2>
 800ff7e:	f04f 0800 	mov.w	r8, #0
 800ff82:	e6d4      	b.n	800fd2e <_strtod_l+0x43e>
 800ff84:	f04f 32ff 	mov.w	r2, #4294967295
 800ff88:	fa02 f303 	lsl.w	r3, r2, r3
 800ff8c:	ea03 0a0a 	and.w	sl, r3, sl
 800ff90:	e7b0      	b.n	800fef4 <_strtod_l+0x604>
 800ff92:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ff94:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ff96:	2d00      	cmp	r5, #0
 800ff98:	bfab      	itete	ge
 800ff9a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ff9c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ff9e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ffa0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ffa2:	bfac      	ite	ge
 800ffa4:	18ef      	addge	r7, r5, r3
 800ffa6:	1b5e      	sublt	r6, r3, r5
 800ffa8:	9b08      	ldr	r3, [sp, #32]
 800ffaa:	1aed      	subs	r5, r5, r3
 800ffac:	4415      	add	r5, r2
 800ffae:	4b66      	ldr	r3, [pc, #408]	@ (8010148 <_strtod_l+0x858>)
 800ffb0:	3d01      	subs	r5, #1
 800ffb2:	429d      	cmp	r5, r3
 800ffb4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ffb8:	da50      	bge.n	801005c <_strtod_l+0x76c>
 800ffba:	1b5b      	subs	r3, r3, r5
 800ffbc:	2b1f      	cmp	r3, #31
 800ffbe:	eba2 0203 	sub.w	r2, r2, r3
 800ffc2:	f04f 0101 	mov.w	r1, #1
 800ffc6:	dc3d      	bgt.n	8010044 <_strtod_l+0x754>
 800ffc8:	fa01 f303 	lsl.w	r3, r1, r3
 800ffcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ffce:	2300      	movs	r3, #0
 800ffd0:	9310      	str	r3, [sp, #64]	@ 0x40
 800ffd2:	18bd      	adds	r5, r7, r2
 800ffd4:	9b08      	ldr	r3, [sp, #32]
 800ffd6:	42af      	cmp	r7, r5
 800ffd8:	4416      	add	r6, r2
 800ffda:	441e      	add	r6, r3
 800ffdc:	463b      	mov	r3, r7
 800ffde:	bfa8      	it	ge
 800ffe0:	462b      	movge	r3, r5
 800ffe2:	42b3      	cmp	r3, r6
 800ffe4:	bfa8      	it	ge
 800ffe6:	4633      	movge	r3, r6
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	bfc2      	ittt	gt
 800ffec:	1aed      	subgt	r5, r5, r3
 800ffee:	1af6      	subgt	r6, r6, r3
 800fff0:	1aff      	subgt	r7, r7, r3
 800fff2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	dd16      	ble.n	8010026 <_strtod_l+0x736>
 800fff8:	4641      	mov	r1, r8
 800fffa:	9805      	ldr	r0, [sp, #20]
 800fffc:	461a      	mov	r2, r3
 800fffe:	f7ff f9a5 	bl	800f34c <__pow5mult>
 8010002:	4680      	mov	r8, r0
 8010004:	2800      	cmp	r0, #0
 8010006:	d0ba      	beq.n	800ff7e <_strtod_l+0x68e>
 8010008:	4601      	mov	r1, r0
 801000a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801000c:	9805      	ldr	r0, [sp, #20]
 801000e:	f7ff f8f3 	bl	800f1f8 <__multiply>
 8010012:	900e      	str	r0, [sp, #56]	@ 0x38
 8010014:	2800      	cmp	r0, #0
 8010016:	f43f ae8a 	beq.w	800fd2e <_strtod_l+0x43e>
 801001a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801001c:	9805      	ldr	r0, [sp, #20]
 801001e:	f7fe ffd7 	bl	800efd0 <_Bfree>
 8010022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010024:	931a      	str	r3, [sp, #104]	@ 0x68
 8010026:	2d00      	cmp	r5, #0
 8010028:	dc1d      	bgt.n	8010066 <_strtod_l+0x776>
 801002a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801002c:	2b00      	cmp	r3, #0
 801002e:	dd23      	ble.n	8010078 <_strtod_l+0x788>
 8010030:	4649      	mov	r1, r9
 8010032:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010034:	9805      	ldr	r0, [sp, #20]
 8010036:	f7ff f989 	bl	800f34c <__pow5mult>
 801003a:	4681      	mov	r9, r0
 801003c:	b9e0      	cbnz	r0, 8010078 <_strtod_l+0x788>
 801003e:	f04f 0900 	mov.w	r9, #0
 8010042:	e674      	b.n	800fd2e <_strtod_l+0x43e>
 8010044:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010048:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801004c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010050:	35e2      	adds	r5, #226	@ 0xe2
 8010052:	fa01 f305 	lsl.w	r3, r1, r5
 8010056:	9310      	str	r3, [sp, #64]	@ 0x40
 8010058:	9113      	str	r1, [sp, #76]	@ 0x4c
 801005a:	e7ba      	b.n	800ffd2 <_strtod_l+0x6e2>
 801005c:	2300      	movs	r3, #0
 801005e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010060:	2301      	movs	r3, #1
 8010062:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010064:	e7b5      	b.n	800ffd2 <_strtod_l+0x6e2>
 8010066:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010068:	9805      	ldr	r0, [sp, #20]
 801006a:	462a      	mov	r2, r5
 801006c:	f7ff f9c8 	bl	800f400 <__lshift>
 8010070:	901a      	str	r0, [sp, #104]	@ 0x68
 8010072:	2800      	cmp	r0, #0
 8010074:	d1d9      	bne.n	801002a <_strtod_l+0x73a>
 8010076:	e65a      	b.n	800fd2e <_strtod_l+0x43e>
 8010078:	2e00      	cmp	r6, #0
 801007a:	dd07      	ble.n	801008c <_strtod_l+0x79c>
 801007c:	4649      	mov	r1, r9
 801007e:	9805      	ldr	r0, [sp, #20]
 8010080:	4632      	mov	r2, r6
 8010082:	f7ff f9bd 	bl	800f400 <__lshift>
 8010086:	4681      	mov	r9, r0
 8010088:	2800      	cmp	r0, #0
 801008a:	d0d8      	beq.n	801003e <_strtod_l+0x74e>
 801008c:	2f00      	cmp	r7, #0
 801008e:	dd08      	ble.n	80100a2 <_strtod_l+0x7b2>
 8010090:	4641      	mov	r1, r8
 8010092:	9805      	ldr	r0, [sp, #20]
 8010094:	463a      	mov	r2, r7
 8010096:	f7ff f9b3 	bl	800f400 <__lshift>
 801009a:	4680      	mov	r8, r0
 801009c:	2800      	cmp	r0, #0
 801009e:	f43f ae46 	beq.w	800fd2e <_strtod_l+0x43e>
 80100a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80100a4:	9805      	ldr	r0, [sp, #20]
 80100a6:	464a      	mov	r2, r9
 80100a8:	f7ff fa32 	bl	800f510 <__mdiff>
 80100ac:	4604      	mov	r4, r0
 80100ae:	2800      	cmp	r0, #0
 80100b0:	f43f ae3d 	beq.w	800fd2e <_strtod_l+0x43e>
 80100b4:	68c3      	ldr	r3, [r0, #12]
 80100b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80100b8:	2300      	movs	r3, #0
 80100ba:	60c3      	str	r3, [r0, #12]
 80100bc:	4641      	mov	r1, r8
 80100be:	f7ff fa0b 	bl	800f4d8 <__mcmp>
 80100c2:	2800      	cmp	r0, #0
 80100c4:	da46      	bge.n	8010154 <_strtod_l+0x864>
 80100c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100c8:	ea53 030a 	orrs.w	r3, r3, sl
 80100cc:	d16c      	bne.n	80101a8 <_strtod_l+0x8b8>
 80100ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d168      	bne.n	80101a8 <_strtod_l+0x8b8>
 80100d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80100da:	0d1b      	lsrs	r3, r3, #20
 80100dc:	051b      	lsls	r3, r3, #20
 80100de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80100e2:	d961      	bls.n	80101a8 <_strtod_l+0x8b8>
 80100e4:	6963      	ldr	r3, [r4, #20]
 80100e6:	b913      	cbnz	r3, 80100ee <_strtod_l+0x7fe>
 80100e8:	6923      	ldr	r3, [r4, #16]
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	dd5c      	ble.n	80101a8 <_strtod_l+0x8b8>
 80100ee:	4621      	mov	r1, r4
 80100f0:	2201      	movs	r2, #1
 80100f2:	9805      	ldr	r0, [sp, #20]
 80100f4:	f7ff f984 	bl	800f400 <__lshift>
 80100f8:	4641      	mov	r1, r8
 80100fa:	4604      	mov	r4, r0
 80100fc:	f7ff f9ec 	bl	800f4d8 <__mcmp>
 8010100:	2800      	cmp	r0, #0
 8010102:	dd51      	ble.n	80101a8 <_strtod_l+0x8b8>
 8010104:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010108:	9a08      	ldr	r2, [sp, #32]
 801010a:	0d1b      	lsrs	r3, r3, #20
 801010c:	051b      	lsls	r3, r3, #20
 801010e:	2a00      	cmp	r2, #0
 8010110:	d06b      	beq.n	80101ea <_strtod_l+0x8fa>
 8010112:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010116:	d868      	bhi.n	80101ea <_strtod_l+0x8fa>
 8010118:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801011c:	f67f ae9d 	bls.w	800fe5a <_strtod_l+0x56a>
 8010120:	4b0a      	ldr	r3, [pc, #40]	@ (801014c <_strtod_l+0x85c>)
 8010122:	4650      	mov	r0, sl
 8010124:	4659      	mov	r1, fp
 8010126:	2200      	movs	r2, #0
 8010128:	f7f0 fa66 	bl	80005f8 <__aeabi_dmul>
 801012c:	4b08      	ldr	r3, [pc, #32]	@ (8010150 <_strtod_l+0x860>)
 801012e:	400b      	ands	r3, r1
 8010130:	4682      	mov	sl, r0
 8010132:	468b      	mov	fp, r1
 8010134:	2b00      	cmp	r3, #0
 8010136:	f47f ae05 	bne.w	800fd44 <_strtod_l+0x454>
 801013a:	9a05      	ldr	r2, [sp, #20]
 801013c:	2322      	movs	r3, #34	@ 0x22
 801013e:	6013      	str	r3, [r2, #0]
 8010140:	e600      	b.n	800fd44 <_strtod_l+0x454>
 8010142:	bf00      	nop
 8010144:	08012130 	.word	0x08012130
 8010148:	fffffc02 	.word	0xfffffc02
 801014c:	39500000 	.word	0x39500000
 8010150:	7ff00000 	.word	0x7ff00000
 8010154:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010158:	d165      	bne.n	8010226 <_strtod_l+0x936>
 801015a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801015c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010160:	b35a      	cbz	r2, 80101ba <_strtod_l+0x8ca>
 8010162:	4a9f      	ldr	r2, [pc, #636]	@ (80103e0 <_strtod_l+0xaf0>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d12b      	bne.n	80101c0 <_strtod_l+0x8d0>
 8010168:	9b08      	ldr	r3, [sp, #32]
 801016a:	4651      	mov	r1, sl
 801016c:	b303      	cbz	r3, 80101b0 <_strtod_l+0x8c0>
 801016e:	4b9d      	ldr	r3, [pc, #628]	@ (80103e4 <_strtod_l+0xaf4>)
 8010170:	465a      	mov	r2, fp
 8010172:	4013      	ands	r3, r2
 8010174:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010178:	f04f 32ff 	mov.w	r2, #4294967295
 801017c:	d81b      	bhi.n	80101b6 <_strtod_l+0x8c6>
 801017e:	0d1b      	lsrs	r3, r3, #20
 8010180:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010184:	fa02 f303 	lsl.w	r3, r2, r3
 8010188:	4299      	cmp	r1, r3
 801018a:	d119      	bne.n	80101c0 <_strtod_l+0x8d0>
 801018c:	4b96      	ldr	r3, [pc, #600]	@ (80103e8 <_strtod_l+0xaf8>)
 801018e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010190:	429a      	cmp	r2, r3
 8010192:	d102      	bne.n	801019a <_strtod_l+0x8aa>
 8010194:	3101      	adds	r1, #1
 8010196:	f43f adca 	beq.w	800fd2e <_strtod_l+0x43e>
 801019a:	4b92      	ldr	r3, [pc, #584]	@ (80103e4 <_strtod_l+0xaf4>)
 801019c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801019e:	401a      	ands	r2, r3
 80101a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80101a4:	f04f 0a00 	mov.w	sl, #0
 80101a8:	9b08      	ldr	r3, [sp, #32]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d1b8      	bne.n	8010120 <_strtod_l+0x830>
 80101ae:	e5c9      	b.n	800fd44 <_strtod_l+0x454>
 80101b0:	f04f 33ff 	mov.w	r3, #4294967295
 80101b4:	e7e8      	b.n	8010188 <_strtod_l+0x898>
 80101b6:	4613      	mov	r3, r2
 80101b8:	e7e6      	b.n	8010188 <_strtod_l+0x898>
 80101ba:	ea53 030a 	orrs.w	r3, r3, sl
 80101be:	d0a1      	beq.n	8010104 <_strtod_l+0x814>
 80101c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80101c2:	b1db      	cbz	r3, 80101fc <_strtod_l+0x90c>
 80101c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101c6:	4213      	tst	r3, r2
 80101c8:	d0ee      	beq.n	80101a8 <_strtod_l+0x8b8>
 80101ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101cc:	9a08      	ldr	r2, [sp, #32]
 80101ce:	4650      	mov	r0, sl
 80101d0:	4659      	mov	r1, fp
 80101d2:	b1bb      	cbz	r3, 8010204 <_strtod_l+0x914>
 80101d4:	f7ff fb6e 	bl	800f8b4 <sulp>
 80101d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80101dc:	ec53 2b10 	vmov	r2, r3, d0
 80101e0:	f7f0 f854 	bl	800028c <__adddf3>
 80101e4:	4682      	mov	sl, r0
 80101e6:	468b      	mov	fp, r1
 80101e8:	e7de      	b.n	80101a8 <_strtod_l+0x8b8>
 80101ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80101ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80101f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80101f6:	f04f 3aff 	mov.w	sl, #4294967295
 80101fa:	e7d5      	b.n	80101a8 <_strtod_l+0x8b8>
 80101fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80101fe:	ea13 0f0a 	tst.w	r3, sl
 8010202:	e7e1      	b.n	80101c8 <_strtod_l+0x8d8>
 8010204:	f7ff fb56 	bl	800f8b4 <sulp>
 8010208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801020c:	ec53 2b10 	vmov	r2, r3, d0
 8010210:	f7f0 f83a 	bl	8000288 <__aeabi_dsub>
 8010214:	2200      	movs	r2, #0
 8010216:	2300      	movs	r3, #0
 8010218:	4682      	mov	sl, r0
 801021a:	468b      	mov	fp, r1
 801021c:	f7f0 fc54 	bl	8000ac8 <__aeabi_dcmpeq>
 8010220:	2800      	cmp	r0, #0
 8010222:	d0c1      	beq.n	80101a8 <_strtod_l+0x8b8>
 8010224:	e619      	b.n	800fe5a <_strtod_l+0x56a>
 8010226:	4641      	mov	r1, r8
 8010228:	4620      	mov	r0, r4
 801022a:	f7ff facd 	bl	800f7c8 <__ratio>
 801022e:	ec57 6b10 	vmov	r6, r7, d0
 8010232:	2200      	movs	r2, #0
 8010234:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010238:	4630      	mov	r0, r6
 801023a:	4639      	mov	r1, r7
 801023c:	f7f0 fc58 	bl	8000af0 <__aeabi_dcmple>
 8010240:	2800      	cmp	r0, #0
 8010242:	d06f      	beq.n	8010324 <_strtod_l+0xa34>
 8010244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010246:	2b00      	cmp	r3, #0
 8010248:	d17a      	bne.n	8010340 <_strtod_l+0xa50>
 801024a:	f1ba 0f00 	cmp.w	sl, #0
 801024e:	d158      	bne.n	8010302 <_strtod_l+0xa12>
 8010250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010252:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010256:	2b00      	cmp	r3, #0
 8010258:	d15a      	bne.n	8010310 <_strtod_l+0xa20>
 801025a:	4b64      	ldr	r3, [pc, #400]	@ (80103ec <_strtod_l+0xafc>)
 801025c:	2200      	movs	r2, #0
 801025e:	4630      	mov	r0, r6
 8010260:	4639      	mov	r1, r7
 8010262:	f7f0 fc3b 	bl	8000adc <__aeabi_dcmplt>
 8010266:	2800      	cmp	r0, #0
 8010268:	d159      	bne.n	801031e <_strtod_l+0xa2e>
 801026a:	4630      	mov	r0, r6
 801026c:	4639      	mov	r1, r7
 801026e:	4b60      	ldr	r3, [pc, #384]	@ (80103f0 <_strtod_l+0xb00>)
 8010270:	2200      	movs	r2, #0
 8010272:	f7f0 f9c1 	bl	80005f8 <__aeabi_dmul>
 8010276:	4606      	mov	r6, r0
 8010278:	460f      	mov	r7, r1
 801027a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801027e:	9606      	str	r6, [sp, #24]
 8010280:	9307      	str	r3, [sp, #28]
 8010282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010286:	4d57      	ldr	r5, [pc, #348]	@ (80103e4 <_strtod_l+0xaf4>)
 8010288:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801028c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801028e:	401d      	ands	r5, r3
 8010290:	4b58      	ldr	r3, [pc, #352]	@ (80103f4 <_strtod_l+0xb04>)
 8010292:	429d      	cmp	r5, r3
 8010294:	f040 80b2 	bne.w	80103fc <_strtod_l+0xb0c>
 8010298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801029a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801029e:	ec4b ab10 	vmov	d0, sl, fp
 80102a2:	f7ff f9c9 	bl	800f638 <__ulp>
 80102a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80102aa:	ec51 0b10 	vmov	r0, r1, d0
 80102ae:	f7f0 f9a3 	bl	80005f8 <__aeabi_dmul>
 80102b2:	4652      	mov	r2, sl
 80102b4:	465b      	mov	r3, fp
 80102b6:	f7ef ffe9 	bl	800028c <__adddf3>
 80102ba:	460b      	mov	r3, r1
 80102bc:	4949      	ldr	r1, [pc, #292]	@ (80103e4 <_strtod_l+0xaf4>)
 80102be:	4a4e      	ldr	r2, [pc, #312]	@ (80103f8 <_strtod_l+0xb08>)
 80102c0:	4019      	ands	r1, r3
 80102c2:	4291      	cmp	r1, r2
 80102c4:	4682      	mov	sl, r0
 80102c6:	d942      	bls.n	801034e <_strtod_l+0xa5e>
 80102c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80102ca:	4b47      	ldr	r3, [pc, #284]	@ (80103e8 <_strtod_l+0xaf8>)
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d103      	bne.n	80102d8 <_strtod_l+0x9e8>
 80102d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102d2:	3301      	adds	r3, #1
 80102d4:	f43f ad2b 	beq.w	800fd2e <_strtod_l+0x43e>
 80102d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80103e8 <_strtod_l+0xaf8>
 80102dc:	f04f 3aff 	mov.w	sl, #4294967295
 80102e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80102e2:	9805      	ldr	r0, [sp, #20]
 80102e4:	f7fe fe74 	bl	800efd0 <_Bfree>
 80102e8:	9805      	ldr	r0, [sp, #20]
 80102ea:	4649      	mov	r1, r9
 80102ec:	f7fe fe70 	bl	800efd0 <_Bfree>
 80102f0:	9805      	ldr	r0, [sp, #20]
 80102f2:	4641      	mov	r1, r8
 80102f4:	f7fe fe6c 	bl	800efd0 <_Bfree>
 80102f8:	9805      	ldr	r0, [sp, #20]
 80102fa:	4621      	mov	r1, r4
 80102fc:	f7fe fe68 	bl	800efd0 <_Bfree>
 8010300:	e618      	b.n	800ff34 <_strtod_l+0x644>
 8010302:	f1ba 0f01 	cmp.w	sl, #1
 8010306:	d103      	bne.n	8010310 <_strtod_l+0xa20>
 8010308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801030a:	2b00      	cmp	r3, #0
 801030c:	f43f ada5 	beq.w	800fe5a <_strtod_l+0x56a>
 8010310:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80103c0 <_strtod_l+0xad0>
 8010314:	4f35      	ldr	r7, [pc, #212]	@ (80103ec <_strtod_l+0xafc>)
 8010316:	ed8d 7b06 	vstr	d7, [sp, #24]
 801031a:	2600      	movs	r6, #0
 801031c:	e7b1      	b.n	8010282 <_strtod_l+0x992>
 801031e:	4f34      	ldr	r7, [pc, #208]	@ (80103f0 <_strtod_l+0xb00>)
 8010320:	2600      	movs	r6, #0
 8010322:	e7aa      	b.n	801027a <_strtod_l+0x98a>
 8010324:	4b32      	ldr	r3, [pc, #200]	@ (80103f0 <_strtod_l+0xb00>)
 8010326:	4630      	mov	r0, r6
 8010328:	4639      	mov	r1, r7
 801032a:	2200      	movs	r2, #0
 801032c:	f7f0 f964 	bl	80005f8 <__aeabi_dmul>
 8010330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010332:	4606      	mov	r6, r0
 8010334:	460f      	mov	r7, r1
 8010336:	2b00      	cmp	r3, #0
 8010338:	d09f      	beq.n	801027a <_strtod_l+0x98a>
 801033a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801033e:	e7a0      	b.n	8010282 <_strtod_l+0x992>
 8010340:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80103c8 <_strtod_l+0xad8>
 8010344:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010348:	ec57 6b17 	vmov	r6, r7, d7
 801034c:	e799      	b.n	8010282 <_strtod_l+0x992>
 801034e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010352:	9b08      	ldr	r3, [sp, #32]
 8010354:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010358:	2b00      	cmp	r3, #0
 801035a:	d1c1      	bne.n	80102e0 <_strtod_l+0x9f0>
 801035c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010360:	0d1b      	lsrs	r3, r3, #20
 8010362:	051b      	lsls	r3, r3, #20
 8010364:	429d      	cmp	r5, r3
 8010366:	d1bb      	bne.n	80102e0 <_strtod_l+0x9f0>
 8010368:	4630      	mov	r0, r6
 801036a:	4639      	mov	r1, r7
 801036c:	f7f0 fca4 	bl	8000cb8 <__aeabi_d2lz>
 8010370:	f7f0 f914 	bl	800059c <__aeabi_l2d>
 8010374:	4602      	mov	r2, r0
 8010376:	460b      	mov	r3, r1
 8010378:	4630      	mov	r0, r6
 801037a:	4639      	mov	r1, r7
 801037c:	f7ef ff84 	bl	8000288 <__aeabi_dsub>
 8010380:	460b      	mov	r3, r1
 8010382:	4602      	mov	r2, r0
 8010384:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010388:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801038c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801038e:	ea46 060a 	orr.w	r6, r6, sl
 8010392:	431e      	orrs	r6, r3
 8010394:	d06f      	beq.n	8010476 <_strtod_l+0xb86>
 8010396:	a30e      	add	r3, pc, #56	@ (adr r3, 80103d0 <_strtod_l+0xae0>)
 8010398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039c:	f7f0 fb9e 	bl	8000adc <__aeabi_dcmplt>
 80103a0:	2800      	cmp	r0, #0
 80103a2:	f47f accf 	bne.w	800fd44 <_strtod_l+0x454>
 80103a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80103d8 <_strtod_l+0xae8>)
 80103a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80103b0:	f7f0 fbb2 	bl	8000b18 <__aeabi_dcmpgt>
 80103b4:	2800      	cmp	r0, #0
 80103b6:	d093      	beq.n	80102e0 <_strtod_l+0x9f0>
 80103b8:	e4c4      	b.n	800fd44 <_strtod_l+0x454>
 80103ba:	bf00      	nop
 80103bc:	f3af 8000 	nop.w
 80103c0:	00000000 	.word	0x00000000
 80103c4:	bff00000 	.word	0xbff00000
 80103c8:	00000000 	.word	0x00000000
 80103cc:	3ff00000 	.word	0x3ff00000
 80103d0:	94a03595 	.word	0x94a03595
 80103d4:	3fdfffff 	.word	0x3fdfffff
 80103d8:	35afe535 	.word	0x35afe535
 80103dc:	3fe00000 	.word	0x3fe00000
 80103e0:	000fffff 	.word	0x000fffff
 80103e4:	7ff00000 	.word	0x7ff00000
 80103e8:	7fefffff 	.word	0x7fefffff
 80103ec:	3ff00000 	.word	0x3ff00000
 80103f0:	3fe00000 	.word	0x3fe00000
 80103f4:	7fe00000 	.word	0x7fe00000
 80103f8:	7c9fffff 	.word	0x7c9fffff
 80103fc:	9b08      	ldr	r3, [sp, #32]
 80103fe:	b323      	cbz	r3, 801044a <_strtod_l+0xb5a>
 8010400:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010404:	d821      	bhi.n	801044a <_strtod_l+0xb5a>
 8010406:	a328      	add	r3, pc, #160	@ (adr r3, 80104a8 <_strtod_l+0xbb8>)
 8010408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040c:	4630      	mov	r0, r6
 801040e:	4639      	mov	r1, r7
 8010410:	f7f0 fb6e 	bl	8000af0 <__aeabi_dcmple>
 8010414:	b1a0      	cbz	r0, 8010440 <_strtod_l+0xb50>
 8010416:	4639      	mov	r1, r7
 8010418:	4630      	mov	r0, r6
 801041a:	f7f0 fbc5 	bl	8000ba8 <__aeabi_d2uiz>
 801041e:	2801      	cmp	r0, #1
 8010420:	bf38      	it	cc
 8010422:	2001      	movcc	r0, #1
 8010424:	f7f0 f86e 	bl	8000504 <__aeabi_ui2d>
 8010428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801042a:	4606      	mov	r6, r0
 801042c:	460f      	mov	r7, r1
 801042e:	b9fb      	cbnz	r3, 8010470 <_strtod_l+0xb80>
 8010430:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010434:	9014      	str	r0, [sp, #80]	@ 0x50
 8010436:	9315      	str	r3, [sp, #84]	@ 0x54
 8010438:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801043c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010440:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010442:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010446:	1b5b      	subs	r3, r3, r5
 8010448:	9311      	str	r3, [sp, #68]	@ 0x44
 801044a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801044e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010452:	f7ff f8f1 	bl	800f638 <__ulp>
 8010456:	4650      	mov	r0, sl
 8010458:	ec53 2b10 	vmov	r2, r3, d0
 801045c:	4659      	mov	r1, fp
 801045e:	f7f0 f8cb 	bl	80005f8 <__aeabi_dmul>
 8010462:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010466:	f7ef ff11 	bl	800028c <__adddf3>
 801046a:	4682      	mov	sl, r0
 801046c:	468b      	mov	fp, r1
 801046e:	e770      	b.n	8010352 <_strtod_l+0xa62>
 8010470:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010474:	e7e0      	b.n	8010438 <_strtod_l+0xb48>
 8010476:	a30e      	add	r3, pc, #56	@ (adr r3, 80104b0 <_strtod_l+0xbc0>)
 8010478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047c:	f7f0 fb2e 	bl	8000adc <__aeabi_dcmplt>
 8010480:	e798      	b.n	80103b4 <_strtod_l+0xac4>
 8010482:	2300      	movs	r3, #0
 8010484:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010486:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010488:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801048a:	6013      	str	r3, [r2, #0]
 801048c:	f7ff ba6d 	b.w	800f96a <_strtod_l+0x7a>
 8010490:	2a65      	cmp	r2, #101	@ 0x65
 8010492:	f43f ab66 	beq.w	800fb62 <_strtod_l+0x272>
 8010496:	2a45      	cmp	r2, #69	@ 0x45
 8010498:	f43f ab63 	beq.w	800fb62 <_strtod_l+0x272>
 801049c:	2301      	movs	r3, #1
 801049e:	f7ff bb9e 	b.w	800fbde <_strtod_l+0x2ee>
 80104a2:	bf00      	nop
 80104a4:	f3af 8000 	nop.w
 80104a8:	ffc00000 	.word	0xffc00000
 80104ac:	41dfffff 	.word	0x41dfffff
 80104b0:	94a03595 	.word	0x94a03595
 80104b4:	3fcfffff 	.word	0x3fcfffff

080104b8 <_strtod_r>:
 80104b8:	4b01      	ldr	r3, [pc, #4]	@ (80104c0 <_strtod_r+0x8>)
 80104ba:	f7ff ba19 	b.w	800f8f0 <_strtod_l>
 80104be:	bf00      	nop
 80104c0:	200000ac 	.word	0x200000ac

080104c4 <_strtol_l.constprop.0>:
 80104c4:	2b24      	cmp	r3, #36	@ 0x24
 80104c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104ca:	4686      	mov	lr, r0
 80104cc:	4690      	mov	r8, r2
 80104ce:	d801      	bhi.n	80104d4 <_strtol_l.constprop.0+0x10>
 80104d0:	2b01      	cmp	r3, #1
 80104d2:	d106      	bne.n	80104e2 <_strtol_l.constprop.0+0x1e>
 80104d4:	f7fd fd90 	bl	800dff8 <__errno>
 80104d8:	2316      	movs	r3, #22
 80104da:	6003      	str	r3, [r0, #0]
 80104dc:	2000      	movs	r0, #0
 80104de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104e2:	4834      	ldr	r0, [pc, #208]	@ (80105b4 <_strtol_l.constprop.0+0xf0>)
 80104e4:	460d      	mov	r5, r1
 80104e6:	462a      	mov	r2, r5
 80104e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80104ec:	5d06      	ldrb	r6, [r0, r4]
 80104ee:	f016 0608 	ands.w	r6, r6, #8
 80104f2:	d1f8      	bne.n	80104e6 <_strtol_l.constprop.0+0x22>
 80104f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80104f6:	d12d      	bne.n	8010554 <_strtol_l.constprop.0+0x90>
 80104f8:	782c      	ldrb	r4, [r5, #0]
 80104fa:	2601      	movs	r6, #1
 80104fc:	1c95      	adds	r5, r2, #2
 80104fe:	f033 0210 	bics.w	r2, r3, #16
 8010502:	d109      	bne.n	8010518 <_strtol_l.constprop.0+0x54>
 8010504:	2c30      	cmp	r4, #48	@ 0x30
 8010506:	d12a      	bne.n	801055e <_strtol_l.constprop.0+0x9a>
 8010508:	782a      	ldrb	r2, [r5, #0]
 801050a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801050e:	2a58      	cmp	r2, #88	@ 0x58
 8010510:	d125      	bne.n	801055e <_strtol_l.constprop.0+0x9a>
 8010512:	786c      	ldrb	r4, [r5, #1]
 8010514:	2310      	movs	r3, #16
 8010516:	3502      	adds	r5, #2
 8010518:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801051c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010520:	2200      	movs	r2, #0
 8010522:	fbbc f9f3 	udiv	r9, ip, r3
 8010526:	4610      	mov	r0, r2
 8010528:	fb03 ca19 	mls	sl, r3, r9, ip
 801052c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010530:	2f09      	cmp	r7, #9
 8010532:	d81b      	bhi.n	801056c <_strtol_l.constprop.0+0xa8>
 8010534:	463c      	mov	r4, r7
 8010536:	42a3      	cmp	r3, r4
 8010538:	dd27      	ble.n	801058a <_strtol_l.constprop.0+0xc6>
 801053a:	1c57      	adds	r7, r2, #1
 801053c:	d007      	beq.n	801054e <_strtol_l.constprop.0+0x8a>
 801053e:	4581      	cmp	r9, r0
 8010540:	d320      	bcc.n	8010584 <_strtol_l.constprop.0+0xc0>
 8010542:	d101      	bne.n	8010548 <_strtol_l.constprop.0+0x84>
 8010544:	45a2      	cmp	sl, r4
 8010546:	db1d      	blt.n	8010584 <_strtol_l.constprop.0+0xc0>
 8010548:	fb00 4003 	mla	r0, r0, r3, r4
 801054c:	2201      	movs	r2, #1
 801054e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010552:	e7eb      	b.n	801052c <_strtol_l.constprop.0+0x68>
 8010554:	2c2b      	cmp	r4, #43	@ 0x2b
 8010556:	bf04      	itt	eq
 8010558:	782c      	ldrbeq	r4, [r5, #0]
 801055a:	1c95      	addeq	r5, r2, #2
 801055c:	e7cf      	b.n	80104fe <_strtol_l.constprop.0+0x3a>
 801055e:	2b00      	cmp	r3, #0
 8010560:	d1da      	bne.n	8010518 <_strtol_l.constprop.0+0x54>
 8010562:	2c30      	cmp	r4, #48	@ 0x30
 8010564:	bf0c      	ite	eq
 8010566:	2308      	moveq	r3, #8
 8010568:	230a      	movne	r3, #10
 801056a:	e7d5      	b.n	8010518 <_strtol_l.constprop.0+0x54>
 801056c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010570:	2f19      	cmp	r7, #25
 8010572:	d801      	bhi.n	8010578 <_strtol_l.constprop.0+0xb4>
 8010574:	3c37      	subs	r4, #55	@ 0x37
 8010576:	e7de      	b.n	8010536 <_strtol_l.constprop.0+0x72>
 8010578:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801057c:	2f19      	cmp	r7, #25
 801057e:	d804      	bhi.n	801058a <_strtol_l.constprop.0+0xc6>
 8010580:	3c57      	subs	r4, #87	@ 0x57
 8010582:	e7d8      	b.n	8010536 <_strtol_l.constprop.0+0x72>
 8010584:	f04f 32ff 	mov.w	r2, #4294967295
 8010588:	e7e1      	b.n	801054e <_strtol_l.constprop.0+0x8a>
 801058a:	1c53      	adds	r3, r2, #1
 801058c:	d108      	bne.n	80105a0 <_strtol_l.constprop.0+0xdc>
 801058e:	2322      	movs	r3, #34	@ 0x22
 8010590:	f8ce 3000 	str.w	r3, [lr]
 8010594:	4660      	mov	r0, ip
 8010596:	f1b8 0f00 	cmp.w	r8, #0
 801059a:	d0a0      	beq.n	80104de <_strtol_l.constprop.0+0x1a>
 801059c:	1e69      	subs	r1, r5, #1
 801059e:	e006      	b.n	80105ae <_strtol_l.constprop.0+0xea>
 80105a0:	b106      	cbz	r6, 80105a4 <_strtol_l.constprop.0+0xe0>
 80105a2:	4240      	negs	r0, r0
 80105a4:	f1b8 0f00 	cmp.w	r8, #0
 80105a8:	d099      	beq.n	80104de <_strtol_l.constprop.0+0x1a>
 80105aa:	2a00      	cmp	r2, #0
 80105ac:	d1f6      	bne.n	801059c <_strtol_l.constprop.0+0xd8>
 80105ae:	f8c8 1000 	str.w	r1, [r8]
 80105b2:	e794      	b.n	80104de <_strtol_l.constprop.0+0x1a>
 80105b4:	08012159 	.word	0x08012159

080105b8 <_strtol_r>:
 80105b8:	f7ff bf84 	b.w	80104c4 <_strtol_l.constprop.0>

080105bc <__ssputs_r>:
 80105bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105c0:	688e      	ldr	r6, [r1, #8]
 80105c2:	461f      	mov	r7, r3
 80105c4:	42be      	cmp	r6, r7
 80105c6:	680b      	ldr	r3, [r1, #0]
 80105c8:	4682      	mov	sl, r0
 80105ca:	460c      	mov	r4, r1
 80105cc:	4690      	mov	r8, r2
 80105ce:	d82d      	bhi.n	801062c <__ssputs_r+0x70>
 80105d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80105d8:	d026      	beq.n	8010628 <__ssputs_r+0x6c>
 80105da:	6965      	ldr	r5, [r4, #20]
 80105dc:	6909      	ldr	r1, [r1, #16]
 80105de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80105e2:	eba3 0901 	sub.w	r9, r3, r1
 80105e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80105ea:	1c7b      	adds	r3, r7, #1
 80105ec:	444b      	add	r3, r9
 80105ee:	106d      	asrs	r5, r5, #1
 80105f0:	429d      	cmp	r5, r3
 80105f2:	bf38      	it	cc
 80105f4:	461d      	movcc	r5, r3
 80105f6:	0553      	lsls	r3, r2, #21
 80105f8:	d527      	bpl.n	801064a <__ssputs_r+0x8e>
 80105fa:	4629      	mov	r1, r5
 80105fc:	f7fe fc1c 	bl	800ee38 <_malloc_r>
 8010600:	4606      	mov	r6, r0
 8010602:	b360      	cbz	r0, 801065e <__ssputs_r+0xa2>
 8010604:	6921      	ldr	r1, [r4, #16]
 8010606:	464a      	mov	r2, r9
 8010608:	f7fd fd23 	bl	800e052 <memcpy>
 801060c:	89a3      	ldrh	r3, [r4, #12]
 801060e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010616:	81a3      	strh	r3, [r4, #12]
 8010618:	6126      	str	r6, [r4, #16]
 801061a:	6165      	str	r5, [r4, #20]
 801061c:	444e      	add	r6, r9
 801061e:	eba5 0509 	sub.w	r5, r5, r9
 8010622:	6026      	str	r6, [r4, #0]
 8010624:	60a5      	str	r5, [r4, #8]
 8010626:	463e      	mov	r6, r7
 8010628:	42be      	cmp	r6, r7
 801062a:	d900      	bls.n	801062e <__ssputs_r+0x72>
 801062c:	463e      	mov	r6, r7
 801062e:	6820      	ldr	r0, [r4, #0]
 8010630:	4632      	mov	r2, r6
 8010632:	4641      	mov	r1, r8
 8010634:	f000 fb7c 	bl	8010d30 <memmove>
 8010638:	68a3      	ldr	r3, [r4, #8]
 801063a:	1b9b      	subs	r3, r3, r6
 801063c:	60a3      	str	r3, [r4, #8]
 801063e:	6823      	ldr	r3, [r4, #0]
 8010640:	4433      	add	r3, r6
 8010642:	6023      	str	r3, [r4, #0]
 8010644:	2000      	movs	r0, #0
 8010646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801064a:	462a      	mov	r2, r5
 801064c:	f000 ff29 	bl	80114a2 <_realloc_r>
 8010650:	4606      	mov	r6, r0
 8010652:	2800      	cmp	r0, #0
 8010654:	d1e0      	bne.n	8010618 <__ssputs_r+0x5c>
 8010656:	6921      	ldr	r1, [r4, #16]
 8010658:	4650      	mov	r0, sl
 801065a:	f7fe fb79 	bl	800ed50 <_free_r>
 801065e:	230c      	movs	r3, #12
 8010660:	f8ca 3000 	str.w	r3, [sl]
 8010664:	89a3      	ldrh	r3, [r4, #12]
 8010666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801066a:	81a3      	strh	r3, [r4, #12]
 801066c:	f04f 30ff 	mov.w	r0, #4294967295
 8010670:	e7e9      	b.n	8010646 <__ssputs_r+0x8a>
	...

08010674 <_svfiprintf_r>:
 8010674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010678:	4698      	mov	r8, r3
 801067a:	898b      	ldrh	r3, [r1, #12]
 801067c:	061b      	lsls	r3, r3, #24
 801067e:	b09d      	sub	sp, #116	@ 0x74
 8010680:	4607      	mov	r7, r0
 8010682:	460d      	mov	r5, r1
 8010684:	4614      	mov	r4, r2
 8010686:	d510      	bpl.n	80106aa <_svfiprintf_r+0x36>
 8010688:	690b      	ldr	r3, [r1, #16]
 801068a:	b973      	cbnz	r3, 80106aa <_svfiprintf_r+0x36>
 801068c:	2140      	movs	r1, #64	@ 0x40
 801068e:	f7fe fbd3 	bl	800ee38 <_malloc_r>
 8010692:	6028      	str	r0, [r5, #0]
 8010694:	6128      	str	r0, [r5, #16]
 8010696:	b930      	cbnz	r0, 80106a6 <_svfiprintf_r+0x32>
 8010698:	230c      	movs	r3, #12
 801069a:	603b      	str	r3, [r7, #0]
 801069c:	f04f 30ff 	mov.w	r0, #4294967295
 80106a0:	b01d      	add	sp, #116	@ 0x74
 80106a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a6:	2340      	movs	r3, #64	@ 0x40
 80106a8:	616b      	str	r3, [r5, #20]
 80106aa:	2300      	movs	r3, #0
 80106ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80106ae:	2320      	movs	r3, #32
 80106b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80106b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80106b8:	2330      	movs	r3, #48	@ 0x30
 80106ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010858 <_svfiprintf_r+0x1e4>
 80106be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80106c2:	f04f 0901 	mov.w	r9, #1
 80106c6:	4623      	mov	r3, r4
 80106c8:	469a      	mov	sl, r3
 80106ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106ce:	b10a      	cbz	r2, 80106d4 <_svfiprintf_r+0x60>
 80106d0:	2a25      	cmp	r2, #37	@ 0x25
 80106d2:	d1f9      	bne.n	80106c8 <_svfiprintf_r+0x54>
 80106d4:	ebba 0b04 	subs.w	fp, sl, r4
 80106d8:	d00b      	beq.n	80106f2 <_svfiprintf_r+0x7e>
 80106da:	465b      	mov	r3, fp
 80106dc:	4622      	mov	r2, r4
 80106de:	4629      	mov	r1, r5
 80106e0:	4638      	mov	r0, r7
 80106e2:	f7ff ff6b 	bl	80105bc <__ssputs_r>
 80106e6:	3001      	adds	r0, #1
 80106e8:	f000 80a7 	beq.w	801083a <_svfiprintf_r+0x1c6>
 80106ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106ee:	445a      	add	r2, fp
 80106f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80106f2:	f89a 3000 	ldrb.w	r3, [sl]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	f000 809f 	beq.w	801083a <_svfiprintf_r+0x1c6>
 80106fc:	2300      	movs	r3, #0
 80106fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010706:	f10a 0a01 	add.w	sl, sl, #1
 801070a:	9304      	str	r3, [sp, #16]
 801070c:	9307      	str	r3, [sp, #28]
 801070e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010712:	931a      	str	r3, [sp, #104]	@ 0x68
 8010714:	4654      	mov	r4, sl
 8010716:	2205      	movs	r2, #5
 8010718:	f814 1b01 	ldrb.w	r1, [r4], #1
 801071c:	484e      	ldr	r0, [pc, #312]	@ (8010858 <_svfiprintf_r+0x1e4>)
 801071e:	f7ef fd57 	bl	80001d0 <memchr>
 8010722:	9a04      	ldr	r2, [sp, #16]
 8010724:	b9d8      	cbnz	r0, 801075e <_svfiprintf_r+0xea>
 8010726:	06d0      	lsls	r0, r2, #27
 8010728:	bf44      	itt	mi
 801072a:	2320      	movmi	r3, #32
 801072c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010730:	0711      	lsls	r1, r2, #28
 8010732:	bf44      	itt	mi
 8010734:	232b      	movmi	r3, #43	@ 0x2b
 8010736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801073a:	f89a 3000 	ldrb.w	r3, [sl]
 801073e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010740:	d015      	beq.n	801076e <_svfiprintf_r+0xfa>
 8010742:	9a07      	ldr	r2, [sp, #28]
 8010744:	4654      	mov	r4, sl
 8010746:	2000      	movs	r0, #0
 8010748:	f04f 0c0a 	mov.w	ip, #10
 801074c:	4621      	mov	r1, r4
 801074e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010752:	3b30      	subs	r3, #48	@ 0x30
 8010754:	2b09      	cmp	r3, #9
 8010756:	d94b      	bls.n	80107f0 <_svfiprintf_r+0x17c>
 8010758:	b1b0      	cbz	r0, 8010788 <_svfiprintf_r+0x114>
 801075a:	9207      	str	r2, [sp, #28]
 801075c:	e014      	b.n	8010788 <_svfiprintf_r+0x114>
 801075e:	eba0 0308 	sub.w	r3, r0, r8
 8010762:	fa09 f303 	lsl.w	r3, r9, r3
 8010766:	4313      	orrs	r3, r2
 8010768:	9304      	str	r3, [sp, #16]
 801076a:	46a2      	mov	sl, r4
 801076c:	e7d2      	b.n	8010714 <_svfiprintf_r+0xa0>
 801076e:	9b03      	ldr	r3, [sp, #12]
 8010770:	1d19      	adds	r1, r3, #4
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	9103      	str	r1, [sp, #12]
 8010776:	2b00      	cmp	r3, #0
 8010778:	bfbb      	ittet	lt
 801077a:	425b      	neglt	r3, r3
 801077c:	f042 0202 	orrlt.w	r2, r2, #2
 8010780:	9307      	strge	r3, [sp, #28]
 8010782:	9307      	strlt	r3, [sp, #28]
 8010784:	bfb8      	it	lt
 8010786:	9204      	strlt	r2, [sp, #16]
 8010788:	7823      	ldrb	r3, [r4, #0]
 801078a:	2b2e      	cmp	r3, #46	@ 0x2e
 801078c:	d10a      	bne.n	80107a4 <_svfiprintf_r+0x130>
 801078e:	7863      	ldrb	r3, [r4, #1]
 8010790:	2b2a      	cmp	r3, #42	@ 0x2a
 8010792:	d132      	bne.n	80107fa <_svfiprintf_r+0x186>
 8010794:	9b03      	ldr	r3, [sp, #12]
 8010796:	1d1a      	adds	r2, r3, #4
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	9203      	str	r2, [sp, #12]
 801079c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80107a0:	3402      	adds	r4, #2
 80107a2:	9305      	str	r3, [sp, #20]
 80107a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010868 <_svfiprintf_r+0x1f4>
 80107a8:	7821      	ldrb	r1, [r4, #0]
 80107aa:	2203      	movs	r2, #3
 80107ac:	4650      	mov	r0, sl
 80107ae:	f7ef fd0f 	bl	80001d0 <memchr>
 80107b2:	b138      	cbz	r0, 80107c4 <_svfiprintf_r+0x150>
 80107b4:	9b04      	ldr	r3, [sp, #16]
 80107b6:	eba0 000a 	sub.w	r0, r0, sl
 80107ba:	2240      	movs	r2, #64	@ 0x40
 80107bc:	4082      	lsls	r2, r0
 80107be:	4313      	orrs	r3, r2
 80107c0:	3401      	adds	r4, #1
 80107c2:	9304      	str	r3, [sp, #16]
 80107c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107c8:	4824      	ldr	r0, [pc, #144]	@ (801085c <_svfiprintf_r+0x1e8>)
 80107ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80107ce:	2206      	movs	r2, #6
 80107d0:	f7ef fcfe 	bl	80001d0 <memchr>
 80107d4:	2800      	cmp	r0, #0
 80107d6:	d036      	beq.n	8010846 <_svfiprintf_r+0x1d2>
 80107d8:	4b21      	ldr	r3, [pc, #132]	@ (8010860 <_svfiprintf_r+0x1ec>)
 80107da:	bb1b      	cbnz	r3, 8010824 <_svfiprintf_r+0x1b0>
 80107dc:	9b03      	ldr	r3, [sp, #12]
 80107de:	3307      	adds	r3, #7
 80107e0:	f023 0307 	bic.w	r3, r3, #7
 80107e4:	3308      	adds	r3, #8
 80107e6:	9303      	str	r3, [sp, #12]
 80107e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107ea:	4433      	add	r3, r6
 80107ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80107ee:	e76a      	b.n	80106c6 <_svfiprintf_r+0x52>
 80107f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80107f4:	460c      	mov	r4, r1
 80107f6:	2001      	movs	r0, #1
 80107f8:	e7a8      	b.n	801074c <_svfiprintf_r+0xd8>
 80107fa:	2300      	movs	r3, #0
 80107fc:	3401      	adds	r4, #1
 80107fe:	9305      	str	r3, [sp, #20]
 8010800:	4619      	mov	r1, r3
 8010802:	f04f 0c0a 	mov.w	ip, #10
 8010806:	4620      	mov	r0, r4
 8010808:	f810 2b01 	ldrb.w	r2, [r0], #1
 801080c:	3a30      	subs	r2, #48	@ 0x30
 801080e:	2a09      	cmp	r2, #9
 8010810:	d903      	bls.n	801081a <_svfiprintf_r+0x1a6>
 8010812:	2b00      	cmp	r3, #0
 8010814:	d0c6      	beq.n	80107a4 <_svfiprintf_r+0x130>
 8010816:	9105      	str	r1, [sp, #20]
 8010818:	e7c4      	b.n	80107a4 <_svfiprintf_r+0x130>
 801081a:	fb0c 2101 	mla	r1, ip, r1, r2
 801081e:	4604      	mov	r4, r0
 8010820:	2301      	movs	r3, #1
 8010822:	e7f0      	b.n	8010806 <_svfiprintf_r+0x192>
 8010824:	ab03      	add	r3, sp, #12
 8010826:	9300      	str	r3, [sp, #0]
 8010828:	462a      	mov	r2, r5
 801082a:	4b0e      	ldr	r3, [pc, #56]	@ (8010864 <_svfiprintf_r+0x1f0>)
 801082c:	a904      	add	r1, sp, #16
 801082e:	4638      	mov	r0, r7
 8010830:	f7fc faf2 	bl	800ce18 <_printf_float>
 8010834:	1c42      	adds	r2, r0, #1
 8010836:	4606      	mov	r6, r0
 8010838:	d1d6      	bne.n	80107e8 <_svfiprintf_r+0x174>
 801083a:	89ab      	ldrh	r3, [r5, #12]
 801083c:	065b      	lsls	r3, r3, #25
 801083e:	f53f af2d 	bmi.w	801069c <_svfiprintf_r+0x28>
 8010842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010844:	e72c      	b.n	80106a0 <_svfiprintf_r+0x2c>
 8010846:	ab03      	add	r3, sp, #12
 8010848:	9300      	str	r3, [sp, #0]
 801084a:	462a      	mov	r2, r5
 801084c:	4b05      	ldr	r3, [pc, #20]	@ (8010864 <_svfiprintf_r+0x1f0>)
 801084e:	a904      	add	r1, sp, #16
 8010850:	4638      	mov	r0, r7
 8010852:	f7fc fd79 	bl	800d348 <_printf_i>
 8010856:	e7ed      	b.n	8010834 <_svfiprintf_r+0x1c0>
 8010858:	08012259 	.word	0x08012259
 801085c:	08012263 	.word	0x08012263
 8010860:	0800ce19 	.word	0x0800ce19
 8010864:	080105bd 	.word	0x080105bd
 8010868:	0801225f 	.word	0x0801225f

0801086c <__sfputc_r>:
 801086c:	6893      	ldr	r3, [r2, #8]
 801086e:	3b01      	subs	r3, #1
 8010870:	2b00      	cmp	r3, #0
 8010872:	b410      	push	{r4}
 8010874:	6093      	str	r3, [r2, #8]
 8010876:	da08      	bge.n	801088a <__sfputc_r+0x1e>
 8010878:	6994      	ldr	r4, [r2, #24]
 801087a:	42a3      	cmp	r3, r4
 801087c:	db01      	blt.n	8010882 <__sfputc_r+0x16>
 801087e:	290a      	cmp	r1, #10
 8010880:	d103      	bne.n	801088a <__sfputc_r+0x1e>
 8010882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010886:	f7fd ba28 	b.w	800dcda <__swbuf_r>
 801088a:	6813      	ldr	r3, [r2, #0]
 801088c:	1c58      	adds	r0, r3, #1
 801088e:	6010      	str	r0, [r2, #0]
 8010890:	7019      	strb	r1, [r3, #0]
 8010892:	4608      	mov	r0, r1
 8010894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010898:	4770      	bx	lr

0801089a <__sfputs_r>:
 801089a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801089c:	4606      	mov	r6, r0
 801089e:	460f      	mov	r7, r1
 80108a0:	4614      	mov	r4, r2
 80108a2:	18d5      	adds	r5, r2, r3
 80108a4:	42ac      	cmp	r4, r5
 80108a6:	d101      	bne.n	80108ac <__sfputs_r+0x12>
 80108a8:	2000      	movs	r0, #0
 80108aa:	e007      	b.n	80108bc <__sfputs_r+0x22>
 80108ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108b0:	463a      	mov	r2, r7
 80108b2:	4630      	mov	r0, r6
 80108b4:	f7ff ffda 	bl	801086c <__sfputc_r>
 80108b8:	1c43      	adds	r3, r0, #1
 80108ba:	d1f3      	bne.n	80108a4 <__sfputs_r+0xa>
 80108bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080108c0 <_vfiprintf_r>:
 80108c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c4:	460d      	mov	r5, r1
 80108c6:	b09d      	sub	sp, #116	@ 0x74
 80108c8:	4614      	mov	r4, r2
 80108ca:	4698      	mov	r8, r3
 80108cc:	4606      	mov	r6, r0
 80108ce:	b118      	cbz	r0, 80108d8 <_vfiprintf_r+0x18>
 80108d0:	6a03      	ldr	r3, [r0, #32]
 80108d2:	b90b      	cbnz	r3, 80108d8 <_vfiprintf_r+0x18>
 80108d4:	f7fd f8f8 	bl	800dac8 <__sinit>
 80108d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108da:	07d9      	lsls	r1, r3, #31
 80108dc:	d405      	bmi.n	80108ea <_vfiprintf_r+0x2a>
 80108de:	89ab      	ldrh	r3, [r5, #12]
 80108e0:	059a      	lsls	r2, r3, #22
 80108e2:	d402      	bmi.n	80108ea <_vfiprintf_r+0x2a>
 80108e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108e6:	f7fd fbb2 	bl	800e04e <__retarget_lock_acquire_recursive>
 80108ea:	89ab      	ldrh	r3, [r5, #12]
 80108ec:	071b      	lsls	r3, r3, #28
 80108ee:	d501      	bpl.n	80108f4 <_vfiprintf_r+0x34>
 80108f0:	692b      	ldr	r3, [r5, #16]
 80108f2:	b99b      	cbnz	r3, 801091c <_vfiprintf_r+0x5c>
 80108f4:	4629      	mov	r1, r5
 80108f6:	4630      	mov	r0, r6
 80108f8:	f7fd fa2e 	bl	800dd58 <__swsetup_r>
 80108fc:	b170      	cbz	r0, 801091c <_vfiprintf_r+0x5c>
 80108fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010900:	07dc      	lsls	r4, r3, #31
 8010902:	d504      	bpl.n	801090e <_vfiprintf_r+0x4e>
 8010904:	f04f 30ff 	mov.w	r0, #4294967295
 8010908:	b01d      	add	sp, #116	@ 0x74
 801090a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801090e:	89ab      	ldrh	r3, [r5, #12]
 8010910:	0598      	lsls	r0, r3, #22
 8010912:	d4f7      	bmi.n	8010904 <_vfiprintf_r+0x44>
 8010914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010916:	f7fd fb9b 	bl	800e050 <__retarget_lock_release_recursive>
 801091a:	e7f3      	b.n	8010904 <_vfiprintf_r+0x44>
 801091c:	2300      	movs	r3, #0
 801091e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010920:	2320      	movs	r3, #32
 8010922:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010926:	f8cd 800c 	str.w	r8, [sp, #12]
 801092a:	2330      	movs	r3, #48	@ 0x30
 801092c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010adc <_vfiprintf_r+0x21c>
 8010930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010934:	f04f 0901 	mov.w	r9, #1
 8010938:	4623      	mov	r3, r4
 801093a:	469a      	mov	sl, r3
 801093c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010940:	b10a      	cbz	r2, 8010946 <_vfiprintf_r+0x86>
 8010942:	2a25      	cmp	r2, #37	@ 0x25
 8010944:	d1f9      	bne.n	801093a <_vfiprintf_r+0x7a>
 8010946:	ebba 0b04 	subs.w	fp, sl, r4
 801094a:	d00b      	beq.n	8010964 <_vfiprintf_r+0xa4>
 801094c:	465b      	mov	r3, fp
 801094e:	4622      	mov	r2, r4
 8010950:	4629      	mov	r1, r5
 8010952:	4630      	mov	r0, r6
 8010954:	f7ff ffa1 	bl	801089a <__sfputs_r>
 8010958:	3001      	adds	r0, #1
 801095a:	f000 80a7 	beq.w	8010aac <_vfiprintf_r+0x1ec>
 801095e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010960:	445a      	add	r2, fp
 8010962:	9209      	str	r2, [sp, #36]	@ 0x24
 8010964:	f89a 3000 	ldrb.w	r3, [sl]
 8010968:	2b00      	cmp	r3, #0
 801096a:	f000 809f 	beq.w	8010aac <_vfiprintf_r+0x1ec>
 801096e:	2300      	movs	r3, #0
 8010970:	f04f 32ff 	mov.w	r2, #4294967295
 8010974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010978:	f10a 0a01 	add.w	sl, sl, #1
 801097c:	9304      	str	r3, [sp, #16]
 801097e:	9307      	str	r3, [sp, #28]
 8010980:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010984:	931a      	str	r3, [sp, #104]	@ 0x68
 8010986:	4654      	mov	r4, sl
 8010988:	2205      	movs	r2, #5
 801098a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801098e:	4853      	ldr	r0, [pc, #332]	@ (8010adc <_vfiprintf_r+0x21c>)
 8010990:	f7ef fc1e 	bl	80001d0 <memchr>
 8010994:	9a04      	ldr	r2, [sp, #16]
 8010996:	b9d8      	cbnz	r0, 80109d0 <_vfiprintf_r+0x110>
 8010998:	06d1      	lsls	r1, r2, #27
 801099a:	bf44      	itt	mi
 801099c:	2320      	movmi	r3, #32
 801099e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109a2:	0713      	lsls	r3, r2, #28
 80109a4:	bf44      	itt	mi
 80109a6:	232b      	movmi	r3, #43	@ 0x2b
 80109a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109ac:	f89a 3000 	ldrb.w	r3, [sl]
 80109b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80109b2:	d015      	beq.n	80109e0 <_vfiprintf_r+0x120>
 80109b4:	9a07      	ldr	r2, [sp, #28]
 80109b6:	4654      	mov	r4, sl
 80109b8:	2000      	movs	r0, #0
 80109ba:	f04f 0c0a 	mov.w	ip, #10
 80109be:	4621      	mov	r1, r4
 80109c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109c4:	3b30      	subs	r3, #48	@ 0x30
 80109c6:	2b09      	cmp	r3, #9
 80109c8:	d94b      	bls.n	8010a62 <_vfiprintf_r+0x1a2>
 80109ca:	b1b0      	cbz	r0, 80109fa <_vfiprintf_r+0x13a>
 80109cc:	9207      	str	r2, [sp, #28]
 80109ce:	e014      	b.n	80109fa <_vfiprintf_r+0x13a>
 80109d0:	eba0 0308 	sub.w	r3, r0, r8
 80109d4:	fa09 f303 	lsl.w	r3, r9, r3
 80109d8:	4313      	orrs	r3, r2
 80109da:	9304      	str	r3, [sp, #16]
 80109dc:	46a2      	mov	sl, r4
 80109de:	e7d2      	b.n	8010986 <_vfiprintf_r+0xc6>
 80109e0:	9b03      	ldr	r3, [sp, #12]
 80109e2:	1d19      	adds	r1, r3, #4
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	9103      	str	r1, [sp, #12]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	bfbb      	ittet	lt
 80109ec:	425b      	neglt	r3, r3
 80109ee:	f042 0202 	orrlt.w	r2, r2, #2
 80109f2:	9307      	strge	r3, [sp, #28]
 80109f4:	9307      	strlt	r3, [sp, #28]
 80109f6:	bfb8      	it	lt
 80109f8:	9204      	strlt	r2, [sp, #16]
 80109fa:	7823      	ldrb	r3, [r4, #0]
 80109fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80109fe:	d10a      	bne.n	8010a16 <_vfiprintf_r+0x156>
 8010a00:	7863      	ldrb	r3, [r4, #1]
 8010a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a04:	d132      	bne.n	8010a6c <_vfiprintf_r+0x1ac>
 8010a06:	9b03      	ldr	r3, [sp, #12]
 8010a08:	1d1a      	adds	r2, r3, #4
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	9203      	str	r2, [sp, #12]
 8010a0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a12:	3402      	adds	r4, #2
 8010a14:	9305      	str	r3, [sp, #20]
 8010a16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010aec <_vfiprintf_r+0x22c>
 8010a1a:	7821      	ldrb	r1, [r4, #0]
 8010a1c:	2203      	movs	r2, #3
 8010a1e:	4650      	mov	r0, sl
 8010a20:	f7ef fbd6 	bl	80001d0 <memchr>
 8010a24:	b138      	cbz	r0, 8010a36 <_vfiprintf_r+0x176>
 8010a26:	9b04      	ldr	r3, [sp, #16]
 8010a28:	eba0 000a 	sub.w	r0, r0, sl
 8010a2c:	2240      	movs	r2, #64	@ 0x40
 8010a2e:	4082      	lsls	r2, r0
 8010a30:	4313      	orrs	r3, r2
 8010a32:	3401      	adds	r4, #1
 8010a34:	9304      	str	r3, [sp, #16]
 8010a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a3a:	4829      	ldr	r0, [pc, #164]	@ (8010ae0 <_vfiprintf_r+0x220>)
 8010a3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a40:	2206      	movs	r2, #6
 8010a42:	f7ef fbc5 	bl	80001d0 <memchr>
 8010a46:	2800      	cmp	r0, #0
 8010a48:	d03f      	beq.n	8010aca <_vfiprintf_r+0x20a>
 8010a4a:	4b26      	ldr	r3, [pc, #152]	@ (8010ae4 <_vfiprintf_r+0x224>)
 8010a4c:	bb1b      	cbnz	r3, 8010a96 <_vfiprintf_r+0x1d6>
 8010a4e:	9b03      	ldr	r3, [sp, #12]
 8010a50:	3307      	adds	r3, #7
 8010a52:	f023 0307 	bic.w	r3, r3, #7
 8010a56:	3308      	adds	r3, #8
 8010a58:	9303      	str	r3, [sp, #12]
 8010a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a5c:	443b      	add	r3, r7
 8010a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a60:	e76a      	b.n	8010938 <_vfiprintf_r+0x78>
 8010a62:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a66:	460c      	mov	r4, r1
 8010a68:	2001      	movs	r0, #1
 8010a6a:	e7a8      	b.n	80109be <_vfiprintf_r+0xfe>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	3401      	adds	r4, #1
 8010a70:	9305      	str	r3, [sp, #20]
 8010a72:	4619      	mov	r1, r3
 8010a74:	f04f 0c0a 	mov.w	ip, #10
 8010a78:	4620      	mov	r0, r4
 8010a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a7e:	3a30      	subs	r2, #48	@ 0x30
 8010a80:	2a09      	cmp	r2, #9
 8010a82:	d903      	bls.n	8010a8c <_vfiprintf_r+0x1cc>
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d0c6      	beq.n	8010a16 <_vfiprintf_r+0x156>
 8010a88:	9105      	str	r1, [sp, #20]
 8010a8a:	e7c4      	b.n	8010a16 <_vfiprintf_r+0x156>
 8010a8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a90:	4604      	mov	r4, r0
 8010a92:	2301      	movs	r3, #1
 8010a94:	e7f0      	b.n	8010a78 <_vfiprintf_r+0x1b8>
 8010a96:	ab03      	add	r3, sp, #12
 8010a98:	9300      	str	r3, [sp, #0]
 8010a9a:	462a      	mov	r2, r5
 8010a9c:	4b12      	ldr	r3, [pc, #72]	@ (8010ae8 <_vfiprintf_r+0x228>)
 8010a9e:	a904      	add	r1, sp, #16
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	f7fc f9b9 	bl	800ce18 <_printf_float>
 8010aa6:	4607      	mov	r7, r0
 8010aa8:	1c78      	adds	r0, r7, #1
 8010aaa:	d1d6      	bne.n	8010a5a <_vfiprintf_r+0x19a>
 8010aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010aae:	07d9      	lsls	r1, r3, #31
 8010ab0:	d405      	bmi.n	8010abe <_vfiprintf_r+0x1fe>
 8010ab2:	89ab      	ldrh	r3, [r5, #12]
 8010ab4:	059a      	lsls	r2, r3, #22
 8010ab6:	d402      	bmi.n	8010abe <_vfiprintf_r+0x1fe>
 8010ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010aba:	f7fd fac9 	bl	800e050 <__retarget_lock_release_recursive>
 8010abe:	89ab      	ldrh	r3, [r5, #12]
 8010ac0:	065b      	lsls	r3, r3, #25
 8010ac2:	f53f af1f 	bmi.w	8010904 <_vfiprintf_r+0x44>
 8010ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ac8:	e71e      	b.n	8010908 <_vfiprintf_r+0x48>
 8010aca:	ab03      	add	r3, sp, #12
 8010acc:	9300      	str	r3, [sp, #0]
 8010ace:	462a      	mov	r2, r5
 8010ad0:	4b05      	ldr	r3, [pc, #20]	@ (8010ae8 <_vfiprintf_r+0x228>)
 8010ad2:	a904      	add	r1, sp, #16
 8010ad4:	4630      	mov	r0, r6
 8010ad6:	f7fc fc37 	bl	800d348 <_printf_i>
 8010ada:	e7e4      	b.n	8010aa6 <_vfiprintf_r+0x1e6>
 8010adc:	08012259 	.word	0x08012259
 8010ae0:	08012263 	.word	0x08012263
 8010ae4:	0800ce19 	.word	0x0800ce19
 8010ae8:	0801089b 	.word	0x0801089b
 8010aec:	0801225f 	.word	0x0801225f

08010af0 <__sflush_r>:
 8010af0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010af8:	0716      	lsls	r6, r2, #28
 8010afa:	4605      	mov	r5, r0
 8010afc:	460c      	mov	r4, r1
 8010afe:	d454      	bmi.n	8010baa <__sflush_r+0xba>
 8010b00:	684b      	ldr	r3, [r1, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	dc02      	bgt.n	8010b0c <__sflush_r+0x1c>
 8010b06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	dd48      	ble.n	8010b9e <__sflush_r+0xae>
 8010b0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b0e:	2e00      	cmp	r6, #0
 8010b10:	d045      	beq.n	8010b9e <__sflush_r+0xae>
 8010b12:	2300      	movs	r3, #0
 8010b14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010b18:	682f      	ldr	r7, [r5, #0]
 8010b1a:	6a21      	ldr	r1, [r4, #32]
 8010b1c:	602b      	str	r3, [r5, #0]
 8010b1e:	d030      	beq.n	8010b82 <__sflush_r+0x92>
 8010b20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010b22:	89a3      	ldrh	r3, [r4, #12]
 8010b24:	0759      	lsls	r1, r3, #29
 8010b26:	d505      	bpl.n	8010b34 <__sflush_r+0x44>
 8010b28:	6863      	ldr	r3, [r4, #4]
 8010b2a:	1ad2      	subs	r2, r2, r3
 8010b2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010b2e:	b10b      	cbz	r3, 8010b34 <__sflush_r+0x44>
 8010b30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b32:	1ad2      	subs	r2, r2, r3
 8010b34:	2300      	movs	r3, #0
 8010b36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b38:	6a21      	ldr	r1, [r4, #32]
 8010b3a:	4628      	mov	r0, r5
 8010b3c:	47b0      	blx	r6
 8010b3e:	1c43      	adds	r3, r0, #1
 8010b40:	89a3      	ldrh	r3, [r4, #12]
 8010b42:	d106      	bne.n	8010b52 <__sflush_r+0x62>
 8010b44:	6829      	ldr	r1, [r5, #0]
 8010b46:	291d      	cmp	r1, #29
 8010b48:	d82b      	bhi.n	8010ba2 <__sflush_r+0xb2>
 8010b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8010bf4 <__sflush_r+0x104>)
 8010b4c:	410a      	asrs	r2, r1
 8010b4e:	07d6      	lsls	r6, r2, #31
 8010b50:	d427      	bmi.n	8010ba2 <__sflush_r+0xb2>
 8010b52:	2200      	movs	r2, #0
 8010b54:	6062      	str	r2, [r4, #4]
 8010b56:	04d9      	lsls	r1, r3, #19
 8010b58:	6922      	ldr	r2, [r4, #16]
 8010b5a:	6022      	str	r2, [r4, #0]
 8010b5c:	d504      	bpl.n	8010b68 <__sflush_r+0x78>
 8010b5e:	1c42      	adds	r2, r0, #1
 8010b60:	d101      	bne.n	8010b66 <__sflush_r+0x76>
 8010b62:	682b      	ldr	r3, [r5, #0]
 8010b64:	b903      	cbnz	r3, 8010b68 <__sflush_r+0x78>
 8010b66:	6560      	str	r0, [r4, #84]	@ 0x54
 8010b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b6a:	602f      	str	r7, [r5, #0]
 8010b6c:	b1b9      	cbz	r1, 8010b9e <__sflush_r+0xae>
 8010b6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b72:	4299      	cmp	r1, r3
 8010b74:	d002      	beq.n	8010b7c <__sflush_r+0x8c>
 8010b76:	4628      	mov	r0, r5
 8010b78:	f7fe f8ea 	bl	800ed50 <_free_r>
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b80:	e00d      	b.n	8010b9e <__sflush_r+0xae>
 8010b82:	2301      	movs	r3, #1
 8010b84:	4628      	mov	r0, r5
 8010b86:	47b0      	blx	r6
 8010b88:	4602      	mov	r2, r0
 8010b8a:	1c50      	adds	r0, r2, #1
 8010b8c:	d1c9      	bne.n	8010b22 <__sflush_r+0x32>
 8010b8e:	682b      	ldr	r3, [r5, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d0c6      	beq.n	8010b22 <__sflush_r+0x32>
 8010b94:	2b1d      	cmp	r3, #29
 8010b96:	d001      	beq.n	8010b9c <__sflush_r+0xac>
 8010b98:	2b16      	cmp	r3, #22
 8010b9a:	d11e      	bne.n	8010bda <__sflush_r+0xea>
 8010b9c:	602f      	str	r7, [r5, #0]
 8010b9e:	2000      	movs	r0, #0
 8010ba0:	e022      	b.n	8010be8 <__sflush_r+0xf8>
 8010ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ba6:	b21b      	sxth	r3, r3
 8010ba8:	e01b      	b.n	8010be2 <__sflush_r+0xf2>
 8010baa:	690f      	ldr	r7, [r1, #16]
 8010bac:	2f00      	cmp	r7, #0
 8010bae:	d0f6      	beq.n	8010b9e <__sflush_r+0xae>
 8010bb0:	0793      	lsls	r3, r2, #30
 8010bb2:	680e      	ldr	r6, [r1, #0]
 8010bb4:	bf08      	it	eq
 8010bb6:	694b      	ldreq	r3, [r1, #20]
 8010bb8:	600f      	str	r7, [r1, #0]
 8010bba:	bf18      	it	ne
 8010bbc:	2300      	movne	r3, #0
 8010bbe:	eba6 0807 	sub.w	r8, r6, r7
 8010bc2:	608b      	str	r3, [r1, #8]
 8010bc4:	f1b8 0f00 	cmp.w	r8, #0
 8010bc8:	dde9      	ble.n	8010b9e <__sflush_r+0xae>
 8010bca:	6a21      	ldr	r1, [r4, #32]
 8010bcc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010bce:	4643      	mov	r3, r8
 8010bd0:	463a      	mov	r2, r7
 8010bd2:	4628      	mov	r0, r5
 8010bd4:	47b0      	blx	r6
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	dc08      	bgt.n	8010bec <__sflush_r+0xfc>
 8010bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010be2:	81a3      	strh	r3, [r4, #12]
 8010be4:	f04f 30ff 	mov.w	r0, #4294967295
 8010be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bec:	4407      	add	r7, r0
 8010bee:	eba8 0800 	sub.w	r8, r8, r0
 8010bf2:	e7e7      	b.n	8010bc4 <__sflush_r+0xd4>
 8010bf4:	dfbffffe 	.word	0xdfbffffe

08010bf8 <_fflush_r>:
 8010bf8:	b538      	push	{r3, r4, r5, lr}
 8010bfa:	690b      	ldr	r3, [r1, #16]
 8010bfc:	4605      	mov	r5, r0
 8010bfe:	460c      	mov	r4, r1
 8010c00:	b913      	cbnz	r3, 8010c08 <_fflush_r+0x10>
 8010c02:	2500      	movs	r5, #0
 8010c04:	4628      	mov	r0, r5
 8010c06:	bd38      	pop	{r3, r4, r5, pc}
 8010c08:	b118      	cbz	r0, 8010c12 <_fflush_r+0x1a>
 8010c0a:	6a03      	ldr	r3, [r0, #32]
 8010c0c:	b90b      	cbnz	r3, 8010c12 <_fflush_r+0x1a>
 8010c0e:	f7fc ff5b 	bl	800dac8 <__sinit>
 8010c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d0f3      	beq.n	8010c02 <_fflush_r+0xa>
 8010c1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010c1c:	07d0      	lsls	r0, r2, #31
 8010c1e:	d404      	bmi.n	8010c2a <_fflush_r+0x32>
 8010c20:	0599      	lsls	r1, r3, #22
 8010c22:	d402      	bmi.n	8010c2a <_fflush_r+0x32>
 8010c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c26:	f7fd fa12 	bl	800e04e <__retarget_lock_acquire_recursive>
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	4621      	mov	r1, r4
 8010c2e:	f7ff ff5f 	bl	8010af0 <__sflush_r>
 8010c32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c34:	07da      	lsls	r2, r3, #31
 8010c36:	4605      	mov	r5, r0
 8010c38:	d4e4      	bmi.n	8010c04 <_fflush_r+0xc>
 8010c3a:	89a3      	ldrh	r3, [r4, #12]
 8010c3c:	059b      	lsls	r3, r3, #22
 8010c3e:	d4e1      	bmi.n	8010c04 <_fflush_r+0xc>
 8010c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c42:	f7fd fa05 	bl	800e050 <__retarget_lock_release_recursive>
 8010c46:	e7dd      	b.n	8010c04 <_fflush_r+0xc>

08010c48 <fiprintf>:
 8010c48:	b40e      	push	{r1, r2, r3}
 8010c4a:	b503      	push	{r0, r1, lr}
 8010c4c:	4601      	mov	r1, r0
 8010c4e:	ab03      	add	r3, sp, #12
 8010c50:	4805      	ldr	r0, [pc, #20]	@ (8010c68 <fiprintf+0x20>)
 8010c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c56:	6800      	ldr	r0, [r0, #0]
 8010c58:	9301      	str	r3, [sp, #4]
 8010c5a:	f7ff fe31 	bl	80108c0 <_vfiprintf_r>
 8010c5e:	b002      	add	sp, #8
 8010c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c64:	b003      	add	sp, #12
 8010c66:	4770      	bx	lr
 8010c68:	2000005c 	.word	0x2000005c

08010c6c <__swhatbuf_r>:
 8010c6c:	b570      	push	{r4, r5, r6, lr}
 8010c6e:	460c      	mov	r4, r1
 8010c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c74:	2900      	cmp	r1, #0
 8010c76:	b096      	sub	sp, #88	@ 0x58
 8010c78:	4615      	mov	r5, r2
 8010c7a:	461e      	mov	r6, r3
 8010c7c:	da0d      	bge.n	8010c9a <__swhatbuf_r+0x2e>
 8010c7e:	89a3      	ldrh	r3, [r4, #12]
 8010c80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010c84:	f04f 0100 	mov.w	r1, #0
 8010c88:	bf14      	ite	ne
 8010c8a:	2340      	movne	r3, #64	@ 0x40
 8010c8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010c90:	2000      	movs	r0, #0
 8010c92:	6031      	str	r1, [r6, #0]
 8010c94:	602b      	str	r3, [r5, #0]
 8010c96:	b016      	add	sp, #88	@ 0x58
 8010c98:	bd70      	pop	{r4, r5, r6, pc}
 8010c9a:	466a      	mov	r2, sp
 8010c9c:	f000 f862 	bl	8010d64 <_fstat_r>
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	dbec      	blt.n	8010c7e <__swhatbuf_r+0x12>
 8010ca4:	9901      	ldr	r1, [sp, #4]
 8010ca6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010caa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010cae:	4259      	negs	r1, r3
 8010cb0:	4159      	adcs	r1, r3
 8010cb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010cb6:	e7eb      	b.n	8010c90 <__swhatbuf_r+0x24>

08010cb8 <__smakebuf_r>:
 8010cb8:	898b      	ldrh	r3, [r1, #12]
 8010cba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010cbc:	079d      	lsls	r5, r3, #30
 8010cbe:	4606      	mov	r6, r0
 8010cc0:	460c      	mov	r4, r1
 8010cc2:	d507      	bpl.n	8010cd4 <__smakebuf_r+0x1c>
 8010cc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010cc8:	6023      	str	r3, [r4, #0]
 8010cca:	6123      	str	r3, [r4, #16]
 8010ccc:	2301      	movs	r3, #1
 8010cce:	6163      	str	r3, [r4, #20]
 8010cd0:	b003      	add	sp, #12
 8010cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cd4:	ab01      	add	r3, sp, #4
 8010cd6:	466a      	mov	r2, sp
 8010cd8:	f7ff ffc8 	bl	8010c6c <__swhatbuf_r>
 8010cdc:	9f00      	ldr	r7, [sp, #0]
 8010cde:	4605      	mov	r5, r0
 8010ce0:	4639      	mov	r1, r7
 8010ce2:	4630      	mov	r0, r6
 8010ce4:	f7fe f8a8 	bl	800ee38 <_malloc_r>
 8010ce8:	b948      	cbnz	r0, 8010cfe <__smakebuf_r+0x46>
 8010cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cee:	059a      	lsls	r2, r3, #22
 8010cf0:	d4ee      	bmi.n	8010cd0 <__smakebuf_r+0x18>
 8010cf2:	f023 0303 	bic.w	r3, r3, #3
 8010cf6:	f043 0302 	orr.w	r3, r3, #2
 8010cfa:	81a3      	strh	r3, [r4, #12]
 8010cfc:	e7e2      	b.n	8010cc4 <__smakebuf_r+0xc>
 8010cfe:	89a3      	ldrh	r3, [r4, #12]
 8010d00:	6020      	str	r0, [r4, #0]
 8010d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d06:	81a3      	strh	r3, [r4, #12]
 8010d08:	9b01      	ldr	r3, [sp, #4]
 8010d0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010d0e:	b15b      	cbz	r3, 8010d28 <__smakebuf_r+0x70>
 8010d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d14:	4630      	mov	r0, r6
 8010d16:	f000 f837 	bl	8010d88 <_isatty_r>
 8010d1a:	b128      	cbz	r0, 8010d28 <__smakebuf_r+0x70>
 8010d1c:	89a3      	ldrh	r3, [r4, #12]
 8010d1e:	f023 0303 	bic.w	r3, r3, #3
 8010d22:	f043 0301 	orr.w	r3, r3, #1
 8010d26:	81a3      	strh	r3, [r4, #12]
 8010d28:	89a3      	ldrh	r3, [r4, #12]
 8010d2a:	431d      	orrs	r5, r3
 8010d2c:	81a5      	strh	r5, [r4, #12]
 8010d2e:	e7cf      	b.n	8010cd0 <__smakebuf_r+0x18>

08010d30 <memmove>:
 8010d30:	4288      	cmp	r0, r1
 8010d32:	b510      	push	{r4, lr}
 8010d34:	eb01 0402 	add.w	r4, r1, r2
 8010d38:	d902      	bls.n	8010d40 <memmove+0x10>
 8010d3a:	4284      	cmp	r4, r0
 8010d3c:	4623      	mov	r3, r4
 8010d3e:	d807      	bhi.n	8010d50 <memmove+0x20>
 8010d40:	1e43      	subs	r3, r0, #1
 8010d42:	42a1      	cmp	r1, r4
 8010d44:	d008      	beq.n	8010d58 <memmove+0x28>
 8010d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d4e:	e7f8      	b.n	8010d42 <memmove+0x12>
 8010d50:	4402      	add	r2, r0
 8010d52:	4601      	mov	r1, r0
 8010d54:	428a      	cmp	r2, r1
 8010d56:	d100      	bne.n	8010d5a <memmove+0x2a>
 8010d58:	bd10      	pop	{r4, pc}
 8010d5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d62:	e7f7      	b.n	8010d54 <memmove+0x24>

08010d64 <_fstat_r>:
 8010d64:	b538      	push	{r3, r4, r5, lr}
 8010d66:	4d07      	ldr	r5, [pc, #28]	@ (8010d84 <_fstat_r+0x20>)
 8010d68:	2300      	movs	r3, #0
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	4608      	mov	r0, r1
 8010d6e:	4611      	mov	r1, r2
 8010d70:	602b      	str	r3, [r5, #0]
 8010d72:	f7f0 ff2e 	bl	8001bd2 <_fstat>
 8010d76:	1c43      	adds	r3, r0, #1
 8010d78:	d102      	bne.n	8010d80 <_fstat_r+0x1c>
 8010d7a:	682b      	ldr	r3, [r5, #0]
 8010d7c:	b103      	cbz	r3, 8010d80 <_fstat_r+0x1c>
 8010d7e:	6023      	str	r3, [r4, #0]
 8010d80:	bd38      	pop	{r3, r4, r5, pc}
 8010d82:	bf00      	nop
 8010d84:	20003158 	.word	0x20003158

08010d88 <_isatty_r>:
 8010d88:	b538      	push	{r3, r4, r5, lr}
 8010d8a:	4d06      	ldr	r5, [pc, #24]	@ (8010da4 <_isatty_r+0x1c>)
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	4604      	mov	r4, r0
 8010d90:	4608      	mov	r0, r1
 8010d92:	602b      	str	r3, [r5, #0]
 8010d94:	f7f0 ff2d 	bl	8001bf2 <_isatty>
 8010d98:	1c43      	adds	r3, r0, #1
 8010d9a:	d102      	bne.n	8010da2 <_isatty_r+0x1a>
 8010d9c:	682b      	ldr	r3, [r5, #0]
 8010d9e:	b103      	cbz	r3, 8010da2 <_isatty_r+0x1a>
 8010da0:	6023      	str	r3, [r4, #0]
 8010da2:	bd38      	pop	{r3, r4, r5, pc}
 8010da4:	20003158 	.word	0x20003158

08010da8 <_sbrk_r>:
 8010da8:	b538      	push	{r3, r4, r5, lr}
 8010daa:	4d06      	ldr	r5, [pc, #24]	@ (8010dc4 <_sbrk_r+0x1c>)
 8010dac:	2300      	movs	r3, #0
 8010dae:	4604      	mov	r4, r0
 8010db0:	4608      	mov	r0, r1
 8010db2:	602b      	str	r3, [r5, #0]
 8010db4:	f7f0 ff36 	bl	8001c24 <_sbrk>
 8010db8:	1c43      	adds	r3, r0, #1
 8010dba:	d102      	bne.n	8010dc2 <_sbrk_r+0x1a>
 8010dbc:	682b      	ldr	r3, [r5, #0]
 8010dbe:	b103      	cbz	r3, 8010dc2 <_sbrk_r+0x1a>
 8010dc0:	6023      	str	r3, [r4, #0]
 8010dc2:	bd38      	pop	{r3, r4, r5, pc}
 8010dc4:	20003158 	.word	0x20003158

08010dc8 <nan>:
 8010dc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010dd0 <nan+0x8>
 8010dcc:	4770      	bx	lr
 8010dce:	bf00      	nop
 8010dd0:	00000000 	.word	0x00000000
 8010dd4:	7ff80000 	.word	0x7ff80000

08010dd8 <abort>:
 8010dd8:	b508      	push	{r3, lr}
 8010dda:	2006      	movs	r0, #6
 8010ddc:	f000 fbc4 	bl	8011568 <raise>
 8010de0:	2001      	movs	r0, #1
 8010de2:	f7f0 fea6 	bl	8001b32 <_exit>

08010de6 <_calloc_r>:
 8010de6:	b570      	push	{r4, r5, r6, lr}
 8010de8:	fba1 5402 	umull	r5, r4, r1, r2
 8010dec:	b93c      	cbnz	r4, 8010dfe <_calloc_r+0x18>
 8010dee:	4629      	mov	r1, r5
 8010df0:	f7fe f822 	bl	800ee38 <_malloc_r>
 8010df4:	4606      	mov	r6, r0
 8010df6:	b928      	cbnz	r0, 8010e04 <_calloc_r+0x1e>
 8010df8:	2600      	movs	r6, #0
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	bd70      	pop	{r4, r5, r6, pc}
 8010dfe:	220c      	movs	r2, #12
 8010e00:	6002      	str	r2, [r0, #0]
 8010e02:	e7f9      	b.n	8010df8 <_calloc_r+0x12>
 8010e04:	462a      	mov	r2, r5
 8010e06:	4621      	mov	r1, r4
 8010e08:	f7fd f80c 	bl	800de24 <memset>
 8010e0c:	e7f5      	b.n	8010dfa <_calloc_r+0x14>

08010e0e <rshift>:
 8010e0e:	6903      	ldr	r3, [r0, #16]
 8010e10:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e18:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010e1c:	f100 0414 	add.w	r4, r0, #20
 8010e20:	dd45      	ble.n	8010eae <rshift+0xa0>
 8010e22:	f011 011f 	ands.w	r1, r1, #31
 8010e26:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010e2a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010e2e:	d10c      	bne.n	8010e4a <rshift+0x3c>
 8010e30:	f100 0710 	add.w	r7, r0, #16
 8010e34:	4629      	mov	r1, r5
 8010e36:	42b1      	cmp	r1, r6
 8010e38:	d334      	bcc.n	8010ea4 <rshift+0x96>
 8010e3a:	1a9b      	subs	r3, r3, r2
 8010e3c:	009b      	lsls	r3, r3, #2
 8010e3e:	1eea      	subs	r2, r5, #3
 8010e40:	4296      	cmp	r6, r2
 8010e42:	bf38      	it	cc
 8010e44:	2300      	movcc	r3, #0
 8010e46:	4423      	add	r3, r4
 8010e48:	e015      	b.n	8010e76 <rshift+0x68>
 8010e4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010e4e:	f1c1 0820 	rsb	r8, r1, #32
 8010e52:	40cf      	lsrs	r7, r1
 8010e54:	f105 0e04 	add.w	lr, r5, #4
 8010e58:	46a1      	mov	r9, r4
 8010e5a:	4576      	cmp	r6, lr
 8010e5c:	46f4      	mov	ip, lr
 8010e5e:	d815      	bhi.n	8010e8c <rshift+0x7e>
 8010e60:	1a9a      	subs	r2, r3, r2
 8010e62:	0092      	lsls	r2, r2, #2
 8010e64:	3a04      	subs	r2, #4
 8010e66:	3501      	adds	r5, #1
 8010e68:	42ae      	cmp	r6, r5
 8010e6a:	bf38      	it	cc
 8010e6c:	2200      	movcc	r2, #0
 8010e6e:	18a3      	adds	r3, r4, r2
 8010e70:	50a7      	str	r7, [r4, r2]
 8010e72:	b107      	cbz	r7, 8010e76 <rshift+0x68>
 8010e74:	3304      	adds	r3, #4
 8010e76:	1b1a      	subs	r2, r3, r4
 8010e78:	42a3      	cmp	r3, r4
 8010e7a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010e7e:	bf08      	it	eq
 8010e80:	2300      	moveq	r3, #0
 8010e82:	6102      	str	r2, [r0, #16]
 8010e84:	bf08      	it	eq
 8010e86:	6143      	streq	r3, [r0, #20]
 8010e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e8c:	f8dc c000 	ldr.w	ip, [ip]
 8010e90:	fa0c fc08 	lsl.w	ip, ip, r8
 8010e94:	ea4c 0707 	orr.w	r7, ip, r7
 8010e98:	f849 7b04 	str.w	r7, [r9], #4
 8010e9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010ea0:	40cf      	lsrs	r7, r1
 8010ea2:	e7da      	b.n	8010e5a <rshift+0x4c>
 8010ea4:	f851 cb04 	ldr.w	ip, [r1], #4
 8010ea8:	f847 cf04 	str.w	ip, [r7, #4]!
 8010eac:	e7c3      	b.n	8010e36 <rshift+0x28>
 8010eae:	4623      	mov	r3, r4
 8010eb0:	e7e1      	b.n	8010e76 <rshift+0x68>

08010eb2 <__hexdig_fun>:
 8010eb2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010eb6:	2b09      	cmp	r3, #9
 8010eb8:	d802      	bhi.n	8010ec0 <__hexdig_fun+0xe>
 8010eba:	3820      	subs	r0, #32
 8010ebc:	b2c0      	uxtb	r0, r0
 8010ebe:	4770      	bx	lr
 8010ec0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010ec4:	2b05      	cmp	r3, #5
 8010ec6:	d801      	bhi.n	8010ecc <__hexdig_fun+0x1a>
 8010ec8:	3847      	subs	r0, #71	@ 0x47
 8010eca:	e7f7      	b.n	8010ebc <__hexdig_fun+0xa>
 8010ecc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010ed0:	2b05      	cmp	r3, #5
 8010ed2:	d801      	bhi.n	8010ed8 <__hexdig_fun+0x26>
 8010ed4:	3827      	subs	r0, #39	@ 0x27
 8010ed6:	e7f1      	b.n	8010ebc <__hexdig_fun+0xa>
 8010ed8:	2000      	movs	r0, #0
 8010eda:	4770      	bx	lr

08010edc <__gethex>:
 8010edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee0:	b085      	sub	sp, #20
 8010ee2:	468a      	mov	sl, r1
 8010ee4:	9302      	str	r3, [sp, #8]
 8010ee6:	680b      	ldr	r3, [r1, #0]
 8010ee8:	9001      	str	r0, [sp, #4]
 8010eea:	4690      	mov	r8, r2
 8010eec:	1c9c      	adds	r4, r3, #2
 8010eee:	46a1      	mov	r9, r4
 8010ef0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010ef4:	2830      	cmp	r0, #48	@ 0x30
 8010ef6:	d0fa      	beq.n	8010eee <__gethex+0x12>
 8010ef8:	eba9 0303 	sub.w	r3, r9, r3
 8010efc:	f1a3 0b02 	sub.w	fp, r3, #2
 8010f00:	f7ff ffd7 	bl	8010eb2 <__hexdig_fun>
 8010f04:	4605      	mov	r5, r0
 8010f06:	2800      	cmp	r0, #0
 8010f08:	d168      	bne.n	8010fdc <__gethex+0x100>
 8010f0a:	49a0      	ldr	r1, [pc, #640]	@ (801118c <__gethex+0x2b0>)
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	4648      	mov	r0, r9
 8010f10:	f7fc ff90 	bl	800de34 <strncmp>
 8010f14:	4607      	mov	r7, r0
 8010f16:	2800      	cmp	r0, #0
 8010f18:	d167      	bne.n	8010fea <__gethex+0x10e>
 8010f1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010f1e:	4626      	mov	r6, r4
 8010f20:	f7ff ffc7 	bl	8010eb2 <__hexdig_fun>
 8010f24:	2800      	cmp	r0, #0
 8010f26:	d062      	beq.n	8010fee <__gethex+0x112>
 8010f28:	4623      	mov	r3, r4
 8010f2a:	7818      	ldrb	r0, [r3, #0]
 8010f2c:	2830      	cmp	r0, #48	@ 0x30
 8010f2e:	4699      	mov	r9, r3
 8010f30:	f103 0301 	add.w	r3, r3, #1
 8010f34:	d0f9      	beq.n	8010f2a <__gethex+0x4e>
 8010f36:	f7ff ffbc 	bl	8010eb2 <__hexdig_fun>
 8010f3a:	fab0 f580 	clz	r5, r0
 8010f3e:	096d      	lsrs	r5, r5, #5
 8010f40:	f04f 0b01 	mov.w	fp, #1
 8010f44:	464a      	mov	r2, r9
 8010f46:	4616      	mov	r6, r2
 8010f48:	3201      	adds	r2, #1
 8010f4a:	7830      	ldrb	r0, [r6, #0]
 8010f4c:	f7ff ffb1 	bl	8010eb2 <__hexdig_fun>
 8010f50:	2800      	cmp	r0, #0
 8010f52:	d1f8      	bne.n	8010f46 <__gethex+0x6a>
 8010f54:	498d      	ldr	r1, [pc, #564]	@ (801118c <__gethex+0x2b0>)
 8010f56:	2201      	movs	r2, #1
 8010f58:	4630      	mov	r0, r6
 8010f5a:	f7fc ff6b 	bl	800de34 <strncmp>
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	d13f      	bne.n	8010fe2 <__gethex+0x106>
 8010f62:	b944      	cbnz	r4, 8010f76 <__gethex+0x9a>
 8010f64:	1c74      	adds	r4, r6, #1
 8010f66:	4622      	mov	r2, r4
 8010f68:	4616      	mov	r6, r2
 8010f6a:	3201      	adds	r2, #1
 8010f6c:	7830      	ldrb	r0, [r6, #0]
 8010f6e:	f7ff ffa0 	bl	8010eb2 <__hexdig_fun>
 8010f72:	2800      	cmp	r0, #0
 8010f74:	d1f8      	bne.n	8010f68 <__gethex+0x8c>
 8010f76:	1ba4      	subs	r4, r4, r6
 8010f78:	00a7      	lsls	r7, r4, #2
 8010f7a:	7833      	ldrb	r3, [r6, #0]
 8010f7c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010f80:	2b50      	cmp	r3, #80	@ 0x50
 8010f82:	d13e      	bne.n	8011002 <__gethex+0x126>
 8010f84:	7873      	ldrb	r3, [r6, #1]
 8010f86:	2b2b      	cmp	r3, #43	@ 0x2b
 8010f88:	d033      	beq.n	8010ff2 <__gethex+0x116>
 8010f8a:	2b2d      	cmp	r3, #45	@ 0x2d
 8010f8c:	d034      	beq.n	8010ff8 <__gethex+0x11c>
 8010f8e:	1c71      	adds	r1, r6, #1
 8010f90:	2400      	movs	r4, #0
 8010f92:	7808      	ldrb	r0, [r1, #0]
 8010f94:	f7ff ff8d 	bl	8010eb2 <__hexdig_fun>
 8010f98:	1e43      	subs	r3, r0, #1
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	2b18      	cmp	r3, #24
 8010f9e:	d830      	bhi.n	8011002 <__gethex+0x126>
 8010fa0:	f1a0 0210 	sub.w	r2, r0, #16
 8010fa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010fa8:	f7ff ff83 	bl	8010eb2 <__hexdig_fun>
 8010fac:	f100 3cff 	add.w	ip, r0, #4294967295
 8010fb0:	fa5f fc8c 	uxtb.w	ip, ip
 8010fb4:	f1bc 0f18 	cmp.w	ip, #24
 8010fb8:	f04f 030a 	mov.w	r3, #10
 8010fbc:	d91e      	bls.n	8010ffc <__gethex+0x120>
 8010fbe:	b104      	cbz	r4, 8010fc2 <__gethex+0xe6>
 8010fc0:	4252      	negs	r2, r2
 8010fc2:	4417      	add	r7, r2
 8010fc4:	f8ca 1000 	str.w	r1, [sl]
 8010fc8:	b1ed      	cbz	r5, 8011006 <__gethex+0x12a>
 8010fca:	f1bb 0f00 	cmp.w	fp, #0
 8010fce:	bf0c      	ite	eq
 8010fd0:	2506      	moveq	r5, #6
 8010fd2:	2500      	movne	r5, #0
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	b005      	add	sp, #20
 8010fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fdc:	2500      	movs	r5, #0
 8010fde:	462c      	mov	r4, r5
 8010fe0:	e7b0      	b.n	8010f44 <__gethex+0x68>
 8010fe2:	2c00      	cmp	r4, #0
 8010fe4:	d1c7      	bne.n	8010f76 <__gethex+0x9a>
 8010fe6:	4627      	mov	r7, r4
 8010fe8:	e7c7      	b.n	8010f7a <__gethex+0x9e>
 8010fea:	464e      	mov	r6, r9
 8010fec:	462f      	mov	r7, r5
 8010fee:	2501      	movs	r5, #1
 8010ff0:	e7c3      	b.n	8010f7a <__gethex+0x9e>
 8010ff2:	2400      	movs	r4, #0
 8010ff4:	1cb1      	adds	r1, r6, #2
 8010ff6:	e7cc      	b.n	8010f92 <__gethex+0xb6>
 8010ff8:	2401      	movs	r4, #1
 8010ffa:	e7fb      	b.n	8010ff4 <__gethex+0x118>
 8010ffc:	fb03 0002 	mla	r0, r3, r2, r0
 8011000:	e7ce      	b.n	8010fa0 <__gethex+0xc4>
 8011002:	4631      	mov	r1, r6
 8011004:	e7de      	b.n	8010fc4 <__gethex+0xe8>
 8011006:	eba6 0309 	sub.w	r3, r6, r9
 801100a:	3b01      	subs	r3, #1
 801100c:	4629      	mov	r1, r5
 801100e:	2b07      	cmp	r3, #7
 8011010:	dc0a      	bgt.n	8011028 <__gethex+0x14c>
 8011012:	9801      	ldr	r0, [sp, #4]
 8011014:	f7fd ff9c 	bl	800ef50 <_Balloc>
 8011018:	4604      	mov	r4, r0
 801101a:	b940      	cbnz	r0, 801102e <__gethex+0x152>
 801101c:	4b5c      	ldr	r3, [pc, #368]	@ (8011190 <__gethex+0x2b4>)
 801101e:	4602      	mov	r2, r0
 8011020:	21e4      	movs	r1, #228	@ 0xe4
 8011022:	485c      	ldr	r0, [pc, #368]	@ (8011194 <__gethex+0x2b8>)
 8011024:	f7fd f82a 	bl	800e07c <__assert_func>
 8011028:	3101      	adds	r1, #1
 801102a:	105b      	asrs	r3, r3, #1
 801102c:	e7ef      	b.n	801100e <__gethex+0x132>
 801102e:	f100 0a14 	add.w	sl, r0, #20
 8011032:	2300      	movs	r3, #0
 8011034:	4655      	mov	r5, sl
 8011036:	469b      	mov	fp, r3
 8011038:	45b1      	cmp	r9, r6
 801103a:	d337      	bcc.n	80110ac <__gethex+0x1d0>
 801103c:	f845 bb04 	str.w	fp, [r5], #4
 8011040:	eba5 050a 	sub.w	r5, r5, sl
 8011044:	10ad      	asrs	r5, r5, #2
 8011046:	6125      	str	r5, [r4, #16]
 8011048:	4658      	mov	r0, fp
 801104a:	f7fe f873 	bl	800f134 <__hi0bits>
 801104e:	016d      	lsls	r5, r5, #5
 8011050:	f8d8 6000 	ldr.w	r6, [r8]
 8011054:	1a2d      	subs	r5, r5, r0
 8011056:	42b5      	cmp	r5, r6
 8011058:	dd54      	ble.n	8011104 <__gethex+0x228>
 801105a:	1bad      	subs	r5, r5, r6
 801105c:	4629      	mov	r1, r5
 801105e:	4620      	mov	r0, r4
 8011060:	f7fe fc07 	bl	800f872 <__any_on>
 8011064:	4681      	mov	r9, r0
 8011066:	b178      	cbz	r0, 8011088 <__gethex+0x1ac>
 8011068:	1e6b      	subs	r3, r5, #1
 801106a:	1159      	asrs	r1, r3, #5
 801106c:	f003 021f 	and.w	r2, r3, #31
 8011070:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011074:	f04f 0901 	mov.w	r9, #1
 8011078:	fa09 f202 	lsl.w	r2, r9, r2
 801107c:	420a      	tst	r2, r1
 801107e:	d003      	beq.n	8011088 <__gethex+0x1ac>
 8011080:	454b      	cmp	r3, r9
 8011082:	dc36      	bgt.n	80110f2 <__gethex+0x216>
 8011084:	f04f 0902 	mov.w	r9, #2
 8011088:	4629      	mov	r1, r5
 801108a:	4620      	mov	r0, r4
 801108c:	f7ff febf 	bl	8010e0e <rshift>
 8011090:	442f      	add	r7, r5
 8011092:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011096:	42bb      	cmp	r3, r7
 8011098:	da42      	bge.n	8011120 <__gethex+0x244>
 801109a:	9801      	ldr	r0, [sp, #4]
 801109c:	4621      	mov	r1, r4
 801109e:	f7fd ff97 	bl	800efd0 <_Bfree>
 80110a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110a4:	2300      	movs	r3, #0
 80110a6:	6013      	str	r3, [r2, #0]
 80110a8:	25a3      	movs	r5, #163	@ 0xa3
 80110aa:	e793      	b.n	8010fd4 <__gethex+0xf8>
 80110ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80110b0:	2a2e      	cmp	r2, #46	@ 0x2e
 80110b2:	d012      	beq.n	80110da <__gethex+0x1fe>
 80110b4:	2b20      	cmp	r3, #32
 80110b6:	d104      	bne.n	80110c2 <__gethex+0x1e6>
 80110b8:	f845 bb04 	str.w	fp, [r5], #4
 80110bc:	f04f 0b00 	mov.w	fp, #0
 80110c0:	465b      	mov	r3, fp
 80110c2:	7830      	ldrb	r0, [r6, #0]
 80110c4:	9303      	str	r3, [sp, #12]
 80110c6:	f7ff fef4 	bl	8010eb2 <__hexdig_fun>
 80110ca:	9b03      	ldr	r3, [sp, #12]
 80110cc:	f000 000f 	and.w	r0, r0, #15
 80110d0:	4098      	lsls	r0, r3
 80110d2:	ea4b 0b00 	orr.w	fp, fp, r0
 80110d6:	3304      	adds	r3, #4
 80110d8:	e7ae      	b.n	8011038 <__gethex+0x15c>
 80110da:	45b1      	cmp	r9, r6
 80110dc:	d8ea      	bhi.n	80110b4 <__gethex+0x1d8>
 80110de:	492b      	ldr	r1, [pc, #172]	@ (801118c <__gethex+0x2b0>)
 80110e0:	9303      	str	r3, [sp, #12]
 80110e2:	2201      	movs	r2, #1
 80110e4:	4630      	mov	r0, r6
 80110e6:	f7fc fea5 	bl	800de34 <strncmp>
 80110ea:	9b03      	ldr	r3, [sp, #12]
 80110ec:	2800      	cmp	r0, #0
 80110ee:	d1e1      	bne.n	80110b4 <__gethex+0x1d8>
 80110f0:	e7a2      	b.n	8011038 <__gethex+0x15c>
 80110f2:	1ea9      	subs	r1, r5, #2
 80110f4:	4620      	mov	r0, r4
 80110f6:	f7fe fbbc 	bl	800f872 <__any_on>
 80110fa:	2800      	cmp	r0, #0
 80110fc:	d0c2      	beq.n	8011084 <__gethex+0x1a8>
 80110fe:	f04f 0903 	mov.w	r9, #3
 8011102:	e7c1      	b.n	8011088 <__gethex+0x1ac>
 8011104:	da09      	bge.n	801111a <__gethex+0x23e>
 8011106:	1b75      	subs	r5, r6, r5
 8011108:	4621      	mov	r1, r4
 801110a:	9801      	ldr	r0, [sp, #4]
 801110c:	462a      	mov	r2, r5
 801110e:	f7fe f977 	bl	800f400 <__lshift>
 8011112:	1b7f      	subs	r7, r7, r5
 8011114:	4604      	mov	r4, r0
 8011116:	f100 0a14 	add.w	sl, r0, #20
 801111a:	f04f 0900 	mov.w	r9, #0
 801111e:	e7b8      	b.n	8011092 <__gethex+0x1b6>
 8011120:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011124:	42bd      	cmp	r5, r7
 8011126:	dd6f      	ble.n	8011208 <__gethex+0x32c>
 8011128:	1bed      	subs	r5, r5, r7
 801112a:	42ae      	cmp	r6, r5
 801112c:	dc34      	bgt.n	8011198 <__gethex+0x2bc>
 801112e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011132:	2b02      	cmp	r3, #2
 8011134:	d022      	beq.n	801117c <__gethex+0x2a0>
 8011136:	2b03      	cmp	r3, #3
 8011138:	d024      	beq.n	8011184 <__gethex+0x2a8>
 801113a:	2b01      	cmp	r3, #1
 801113c:	d115      	bne.n	801116a <__gethex+0x28e>
 801113e:	42ae      	cmp	r6, r5
 8011140:	d113      	bne.n	801116a <__gethex+0x28e>
 8011142:	2e01      	cmp	r6, #1
 8011144:	d10b      	bne.n	801115e <__gethex+0x282>
 8011146:	9a02      	ldr	r2, [sp, #8]
 8011148:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801114c:	6013      	str	r3, [r2, #0]
 801114e:	2301      	movs	r3, #1
 8011150:	6123      	str	r3, [r4, #16]
 8011152:	f8ca 3000 	str.w	r3, [sl]
 8011156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011158:	2562      	movs	r5, #98	@ 0x62
 801115a:	601c      	str	r4, [r3, #0]
 801115c:	e73a      	b.n	8010fd4 <__gethex+0xf8>
 801115e:	1e71      	subs	r1, r6, #1
 8011160:	4620      	mov	r0, r4
 8011162:	f7fe fb86 	bl	800f872 <__any_on>
 8011166:	2800      	cmp	r0, #0
 8011168:	d1ed      	bne.n	8011146 <__gethex+0x26a>
 801116a:	9801      	ldr	r0, [sp, #4]
 801116c:	4621      	mov	r1, r4
 801116e:	f7fd ff2f 	bl	800efd0 <_Bfree>
 8011172:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011174:	2300      	movs	r3, #0
 8011176:	6013      	str	r3, [r2, #0]
 8011178:	2550      	movs	r5, #80	@ 0x50
 801117a:	e72b      	b.n	8010fd4 <__gethex+0xf8>
 801117c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801117e:	2b00      	cmp	r3, #0
 8011180:	d1f3      	bne.n	801116a <__gethex+0x28e>
 8011182:	e7e0      	b.n	8011146 <__gethex+0x26a>
 8011184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011186:	2b00      	cmp	r3, #0
 8011188:	d1dd      	bne.n	8011146 <__gethex+0x26a>
 801118a:	e7ee      	b.n	801116a <__gethex+0x28e>
 801118c:	08012100 	.word	0x08012100
 8011190:	08011f97 	.word	0x08011f97
 8011194:	08012272 	.word	0x08012272
 8011198:	1e6f      	subs	r7, r5, #1
 801119a:	f1b9 0f00 	cmp.w	r9, #0
 801119e:	d130      	bne.n	8011202 <__gethex+0x326>
 80111a0:	b127      	cbz	r7, 80111ac <__gethex+0x2d0>
 80111a2:	4639      	mov	r1, r7
 80111a4:	4620      	mov	r0, r4
 80111a6:	f7fe fb64 	bl	800f872 <__any_on>
 80111aa:	4681      	mov	r9, r0
 80111ac:	117a      	asrs	r2, r7, #5
 80111ae:	2301      	movs	r3, #1
 80111b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80111b4:	f007 071f 	and.w	r7, r7, #31
 80111b8:	40bb      	lsls	r3, r7
 80111ba:	4213      	tst	r3, r2
 80111bc:	4629      	mov	r1, r5
 80111be:	4620      	mov	r0, r4
 80111c0:	bf18      	it	ne
 80111c2:	f049 0902 	orrne.w	r9, r9, #2
 80111c6:	f7ff fe22 	bl	8010e0e <rshift>
 80111ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80111ce:	1b76      	subs	r6, r6, r5
 80111d0:	2502      	movs	r5, #2
 80111d2:	f1b9 0f00 	cmp.w	r9, #0
 80111d6:	d047      	beq.n	8011268 <__gethex+0x38c>
 80111d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80111dc:	2b02      	cmp	r3, #2
 80111de:	d015      	beq.n	801120c <__gethex+0x330>
 80111e0:	2b03      	cmp	r3, #3
 80111e2:	d017      	beq.n	8011214 <__gethex+0x338>
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	d109      	bne.n	80111fc <__gethex+0x320>
 80111e8:	f019 0f02 	tst.w	r9, #2
 80111ec:	d006      	beq.n	80111fc <__gethex+0x320>
 80111ee:	f8da 3000 	ldr.w	r3, [sl]
 80111f2:	ea49 0903 	orr.w	r9, r9, r3
 80111f6:	f019 0f01 	tst.w	r9, #1
 80111fa:	d10e      	bne.n	801121a <__gethex+0x33e>
 80111fc:	f045 0510 	orr.w	r5, r5, #16
 8011200:	e032      	b.n	8011268 <__gethex+0x38c>
 8011202:	f04f 0901 	mov.w	r9, #1
 8011206:	e7d1      	b.n	80111ac <__gethex+0x2d0>
 8011208:	2501      	movs	r5, #1
 801120a:	e7e2      	b.n	80111d2 <__gethex+0x2f6>
 801120c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801120e:	f1c3 0301 	rsb	r3, r3, #1
 8011212:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011216:	2b00      	cmp	r3, #0
 8011218:	d0f0      	beq.n	80111fc <__gethex+0x320>
 801121a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801121e:	f104 0314 	add.w	r3, r4, #20
 8011222:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011226:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801122a:	f04f 0c00 	mov.w	ip, #0
 801122e:	4618      	mov	r0, r3
 8011230:	f853 2b04 	ldr.w	r2, [r3], #4
 8011234:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011238:	d01b      	beq.n	8011272 <__gethex+0x396>
 801123a:	3201      	adds	r2, #1
 801123c:	6002      	str	r2, [r0, #0]
 801123e:	2d02      	cmp	r5, #2
 8011240:	f104 0314 	add.w	r3, r4, #20
 8011244:	d13c      	bne.n	80112c0 <__gethex+0x3e4>
 8011246:	f8d8 2000 	ldr.w	r2, [r8]
 801124a:	3a01      	subs	r2, #1
 801124c:	42b2      	cmp	r2, r6
 801124e:	d109      	bne.n	8011264 <__gethex+0x388>
 8011250:	1171      	asrs	r1, r6, #5
 8011252:	2201      	movs	r2, #1
 8011254:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011258:	f006 061f 	and.w	r6, r6, #31
 801125c:	fa02 f606 	lsl.w	r6, r2, r6
 8011260:	421e      	tst	r6, r3
 8011262:	d13a      	bne.n	80112da <__gethex+0x3fe>
 8011264:	f045 0520 	orr.w	r5, r5, #32
 8011268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801126a:	601c      	str	r4, [r3, #0]
 801126c:	9b02      	ldr	r3, [sp, #8]
 801126e:	601f      	str	r7, [r3, #0]
 8011270:	e6b0      	b.n	8010fd4 <__gethex+0xf8>
 8011272:	4299      	cmp	r1, r3
 8011274:	f843 cc04 	str.w	ip, [r3, #-4]
 8011278:	d8d9      	bhi.n	801122e <__gethex+0x352>
 801127a:	68a3      	ldr	r3, [r4, #8]
 801127c:	459b      	cmp	fp, r3
 801127e:	db17      	blt.n	80112b0 <__gethex+0x3d4>
 8011280:	6861      	ldr	r1, [r4, #4]
 8011282:	9801      	ldr	r0, [sp, #4]
 8011284:	3101      	adds	r1, #1
 8011286:	f7fd fe63 	bl	800ef50 <_Balloc>
 801128a:	4681      	mov	r9, r0
 801128c:	b918      	cbnz	r0, 8011296 <__gethex+0x3ba>
 801128e:	4b1a      	ldr	r3, [pc, #104]	@ (80112f8 <__gethex+0x41c>)
 8011290:	4602      	mov	r2, r0
 8011292:	2184      	movs	r1, #132	@ 0x84
 8011294:	e6c5      	b.n	8011022 <__gethex+0x146>
 8011296:	6922      	ldr	r2, [r4, #16]
 8011298:	3202      	adds	r2, #2
 801129a:	f104 010c 	add.w	r1, r4, #12
 801129e:	0092      	lsls	r2, r2, #2
 80112a0:	300c      	adds	r0, #12
 80112a2:	f7fc fed6 	bl	800e052 <memcpy>
 80112a6:	4621      	mov	r1, r4
 80112a8:	9801      	ldr	r0, [sp, #4]
 80112aa:	f7fd fe91 	bl	800efd0 <_Bfree>
 80112ae:	464c      	mov	r4, r9
 80112b0:	6923      	ldr	r3, [r4, #16]
 80112b2:	1c5a      	adds	r2, r3, #1
 80112b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80112b8:	6122      	str	r2, [r4, #16]
 80112ba:	2201      	movs	r2, #1
 80112bc:	615a      	str	r2, [r3, #20]
 80112be:	e7be      	b.n	801123e <__gethex+0x362>
 80112c0:	6922      	ldr	r2, [r4, #16]
 80112c2:	455a      	cmp	r2, fp
 80112c4:	dd0b      	ble.n	80112de <__gethex+0x402>
 80112c6:	2101      	movs	r1, #1
 80112c8:	4620      	mov	r0, r4
 80112ca:	f7ff fda0 	bl	8010e0e <rshift>
 80112ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80112d2:	3701      	adds	r7, #1
 80112d4:	42bb      	cmp	r3, r7
 80112d6:	f6ff aee0 	blt.w	801109a <__gethex+0x1be>
 80112da:	2501      	movs	r5, #1
 80112dc:	e7c2      	b.n	8011264 <__gethex+0x388>
 80112de:	f016 061f 	ands.w	r6, r6, #31
 80112e2:	d0fa      	beq.n	80112da <__gethex+0x3fe>
 80112e4:	4453      	add	r3, sl
 80112e6:	f1c6 0620 	rsb	r6, r6, #32
 80112ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80112ee:	f7fd ff21 	bl	800f134 <__hi0bits>
 80112f2:	42b0      	cmp	r0, r6
 80112f4:	dbe7      	blt.n	80112c6 <__gethex+0x3ea>
 80112f6:	e7f0      	b.n	80112da <__gethex+0x3fe>
 80112f8:	08011f97 	.word	0x08011f97

080112fc <L_shift>:
 80112fc:	f1c2 0208 	rsb	r2, r2, #8
 8011300:	0092      	lsls	r2, r2, #2
 8011302:	b570      	push	{r4, r5, r6, lr}
 8011304:	f1c2 0620 	rsb	r6, r2, #32
 8011308:	6843      	ldr	r3, [r0, #4]
 801130a:	6804      	ldr	r4, [r0, #0]
 801130c:	fa03 f506 	lsl.w	r5, r3, r6
 8011310:	432c      	orrs	r4, r5
 8011312:	40d3      	lsrs	r3, r2
 8011314:	6004      	str	r4, [r0, #0]
 8011316:	f840 3f04 	str.w	r3, [r0, #4]!
 801131a:	4288      	cmp	r0, r1
 801131c:	d3f4      	bcc.n	8011308 <L_shift+0xc>
 801131e:	bd70      	pop	{r4, r5, r6, pc}

08011320 <__match>:
 8011320:	b530      	push	{r4, r5, lr}
 8011322:	6803      	ldr	r3, [r0, #0]
 8011324:	3301      	adds	r3, #1
 8011326:	f811 4b01 	ldrb.w	r4, [r1], #1
 801132a:	b914      	cbnz	r4, 8011332 <__match+0x12>
 801132c:	6003      	str	r3, [r0, #0]
 801132e:	2001      	movs	r0, #1
 8011330:	bd30      	pop	{r4, r5, pc}
 8011332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011336:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801133a:	2d19      	cmp	r5, #25
 801133c:	bf98      	it	ls
 801133e:	3220      	addls	r2, #32
 8011340:	42a2      	cmp	r2, r4
 8011342:	d0f0      	beq.n	8011326 <__match+0x6>
 8011344:	2000      	movs	r0, #0
 8011346:	e7f3      	b.n	8011330 <__match+0x10>

08011348 <__hexnan>:
 8011348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801134c:	680b      	ldr	r3, [r1, #0]
 801134e:	6801      	ldr	r1, [r0, #0]
 8011350:	115e      	asrs	r6, r3, #5
 8011352:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011356:	f013 031f 	ands.w	r3, r3, #31
 801135a:	b087      	sub	sp, #28
 801135c:	bf18      	it	ne
 801135e:	3604      	addne	r6, #4
 8011360:	2500      	movs	r5, #0
 8011362:	1f37      	subs	r7, r6, #4
 8011364:	4682      	mov	sl, r0
 8011366:	4690      	mov	r8, r2
 8011368:	9301      	str	r3, [sp, #4]
 801136a:	f846 5c04 	str.w	r5, [r6, #-4]
 801136e:	46b9      	mov	r9, r7
 8011370:	463c      	mov	r4, r7
 8011372:	9502      	str	r5, [sp, #8]
 8011374:	46ab      	mov	fp, r5
 8011376:	784a      	ldrb	r2, [r1, #1]
 8011378:	1c4b      	adds	r3, r1, #1
 801137a:	9303      	str	r3, [sp, #12]
 801137c:	b342      	cbz	r2, 80113d0 <__hexnan+0x88>
 801137e:	4610      	mov	r0, r2
 8011380:	9105      	str	r1, [sp, #20]
 8011382:	9204      	str	r2, [sp, #16]
 8011384:	f7ff fd95 	bl	8010eb2 <__hexdig_fun>
 8011388:	2800      	cmp	r0, #0
 801138a:	d151      	bne.n	8011430 <__hexnan+0xe8>
 801138c:	9a04      	ldr	r2, [sp, #16]
 801138e:	9905      	ldr	r1, [sp, #20]
 8011390:	2a20      	cmp	r2, #32
 8011392:	d818      	bhi.n	80113c6 <__hexnan+0x7e>
 8011394:	9b02      	ldr	r3, [sp, #8]
 8011396:	459b      	cmp	fp, r3
 8011398:	dd13      	ble.n	80113c2 <__hexnan+0x7a>
 801139a:	454c      	cmp	r4, r9
 801139c:	d206      	bcs.n	80113ac <__hexnan+0x64>
 801139e:	2d07      	cmp	r5, #7
 80113a0:	dc04      	bgt.n	80113ac <__hexnan+0x64>
 80113a2:	462a      	mov	r2, r5
 80113a4:	4649      	mov	r1, r9
 80113a6:	4620      	mov	r0, r4
 80113a8:	f7ff ffa8 	bl	80112fc <L_shift>
 80113ac:	4544      	cmp	r4, r8
 80113ae:	d952      	bls.n	8011456 <__hexnan+0x10e>
 80113b0:	2300      	movs	r3, #0
 80113b2:	f1a4 0904 	sub.w	r9, r4, #4
 80113b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80113ba:	f8cd b008 	str.w	fp, [sp, #8]
 80113be:	464c      	mov	r4, r9
 80113c0:	461d      	mov	r5, r3
 80113c2:	9903      	ldr	r1, [sp, #12]
 80113c4:	e7d7      	b.n	8011376 <__hexnan+0x2e>
 80113c6:	2a29      	cmp	r2, #41	@ 0x29
 80113c8:	d157      	bne.n	801147a <__hexnan+0x132>
 80113ca:	3102      	adds	r1, #2
 80113cc:	f8ca 1000 	str.w	r1, [sl]
 80113d0:	f1bb 0f00 	cmp.w	fp, #0
 80113d4:	d051      	beq.n	801147a <__hexnan+0x132>
 80113d6:	454c      	cmp	r4, r9
 80113d8:	d206      	bcs.n	80113e8 <__hexnan+0xa0>
 80113da:	2d07      	cmp	r5, #7
 80113dc:	dc04      	bgt.n	80113e8 <__hexnan+0xa0>
 80113de:	462a      	mov	r2, r5
 80113e0:	4649      	mov	r1, r9
 80113e2:	4620      	mov	r0, r4
 80113e4:	f7ff ff8a 	bl	80112fc <L_shift>
 80113e8:	4544      	cmp	r4, r8
 80113ea:	d936      	bls.n	801145a <__hexnan+0x112>
 80113ec:	f1a8 0204 	sub.w	r2, r8, #4
 80113f0:	4623      	mov	r3, r4
 80113f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80113f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80113fa:	429f      	cmp	r7, r3
 80113fc:	d2f9      	bcs.n	80113f2 <__hexnan+0xaa>
 80113fe:	1b3b      	subs	r3, r7, r4
 8011400:	f023 0303 	bic.w	r3, r3, #3
 8011404:	3304      	adds	r3, #4
 8011406:	3401      	adds	r4, #1
 8011408:	3e03      	subs	r6, #3
 801140a:	42b4      	cmp	r4, r6
 801140c:	bf88      	it	hi
 801140e:	2304      	movhi	r3, #4
 8011410:	4443      	add	r3, r8
 8011412:	2200      	movs	r2, #0
 8011414:	f843 2b04 	str.w	r2, [r3], #4
 8011418:	429f      	cmp	r7, r3
 801141a:	d2fb      	bcs.n	8011414 <__hexnan+0xcc>
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	b91b      	cbnz	r3, 8011428 <__hexnan+0xe0>
 8011420:	4547      	cmp	r7, r8
 8011422:	d128      	bne.n	8011476 <__hexnan+0x12e>
 8011424:	2301      	movs	r3, #1
 8011426:	603b      	str	r3, [r7, #0]
 8011428:	2005      	movs	r0, #5
 801142a:	b007      	add	sp, #28
 801142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011430:	3501      	adds	r5, #1
 8011432:	2d08      	cmp	r5, #8
 8011434:	f10b 0b01 	add.w	fp, fp, #1
 8011438:	dd06      	ble.n	8011448 <__hexnan+0x100>
 801143a:	4544      	cmp	r4, r8
 801143c:	d9c1      	bls.n	80113c2 <__hexnan+0x7a>
 801143e:	2300      	movs	r3, #0
 8011440:	f844 3c04 	str.w	r3, [r4, #-4]
 8011444:	2501      	movs	r5, #1
 8011446:	3c04      	subs	r4, #4
 8011448:	6822      	ldr	r2, [r4, #0]
 801144a:	f000 000f 	and.w	r0, r0, #15
 801144e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011452:	6020      	str	r0, [r4, #0]
 8011454:	e7b5      	b.n	80113c2 <__hexnan+0x7a>
 8011456:	2508      	movs	r5, #8
 8011458:	e7b3      	b.n	80113c2 <__hexnan+0x7a>
 801145a:	9b01      	ldr	r3, [sp, #4]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d0dd      	beq.n	801141c <__hexnan+0xd4>
 8011460:	f1c3 0320 	rsb	r3, r3, #32
 8011464:	f04f 32ff 	mov.w	r2, #4294967295
 8011468:	40da      	lsrs	r2, r3
 801146a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801146e:	4013      	ands	r3, r2
 8011470:	f846 3c04 	str.w	r3, [r6, #-4]
 8011474:	e7d2      	b.n	801141c <__hexnan+0xd4>
 8011476:	3f04      	subs	r7, #4
 8011478:	e7d0      	b.n	801141c <__hexnan+0xd4>
 801147a:	2004      	movs	r0, #4
 801147c:	e7d5      	b.n	801142a <__hexnan+0xe2>

0801147e <__ascii_mbtowc>:
 801147e:	b082      	sub	sp, #8
 8011480:	b901      	cbnz	r1, 8011484 <__ascii_mbtowc+0x6>
 8011482:	a901      	add	r1, sp, #4
 8011484:	b142      	cbz	r2, 8011498 <__ascii_mbtowc+0x1a>
 8011486:	b14b      	cbz	r3, 801149c <__ascii_mbtowc+0x1e>
 8011488:	7813      	ldrb	r3, [r2, #0]
 801148a:	600b      	str	r3, [r1, #0]
 801148c:	7812      	ldrb	r2, [r2, #0]
 801148e:	1e10      	subs	r0, r2, #0
 8011490:	bf18      	it	ne
 8011492:	2001      	movne	r0, #1
 8011494:	b002      	add	sp, #8
 8011496:	4770      	bx	lr
 8011498:	4610      	mov	r0, r2
 801149a:	e7fb      	b.n	8011494 <__ascii_mbtowc+0x16>
 801149c:	f06f 0001 	mvn.w	r0, #1
 80114a0:	e7f8      	b.n	8011494 <__ascii_mbtowc+0x16>

080114a2 <_realloc_r>:
 80114a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114a6:	4680      	mov	r8, r0
 80114a8:	4615      	mov	r5, r2
 80114aa:	460c      	mov	r4, r1
 80114ac:	b921      	cbnz	r1, 80114b8 <_realloc_r+0x16>
 80114ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114b2:	4611      	mov	r1, r2
 80114b4:	f7fd bcc0 	b.w	800ee38 <_malloc_r>
 80114b8:	b92a      	cbnz	r2, 80114c6 <_realloc_r+0x24>
 80114ba:	f7fd fc49 	bl	800ed50 <_free_r>
 80114be:	2400      	movs	r4, #0
 80114c0:	4620      	mov	r0, r4
 80114c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114c6:	f000 f86b 	bl	80115a0 <_malloc_usable_size_r>
 80114ca:	4285      	cmp	r5, r0
 80114cc:	4606      	mov	r6, r0
 80114ce:	d802      	bhi.n	80114d6 <_realloc_r+0x34>
 80114d0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80114d4:	d8f4      	bhi.n	80114c0 <_realloc_r+0x1e>
 80114d6:	4629      	mov	r1, r5
 80114d8:	4640      	mov	r0, r8
 80114da:	f7fd fcad 	bl	800ee38 <_malloc_r>
 80114de:	4607      	mov	r7, r0
 80114e0:	2800      	cmp	r0, #0
 80114e2:	d0ec      	beq.n	80114be <_realloc_r+0x1c>
 80114e4:	42b5      	cmp	r5, r6
 80114e6:	462a      	mov	r2, r5
 80114e8:	4621      	mov	r1, r4
 80114ea:	bf28      	it	cs
 80114ec:	4632      	movcs	r2, r6
 80114ee:	f7fc fdb0 	bl	800e052 <memcpy>
 80114f2:	4621      	mov	r1, r4
 80114f4:	4640      	mov	r0, r8
 80114f6:	f7fd fc2b 	bl	800ed50 <_free_r>
 80114fa:	463c      	mov	r4, r7
 80114fc:	e7e0      	b.n	80114c0 <_realloc_r+0x1e>

080114fe <__ascii_wctomb>:
 80114fe:	4603      	mov	r3, r0
 8011500:	4608      	mov	r0, r1
 8011502:	b141      	cbz	r1, 8011516 <__ascii_wctomb+0x18>
 8011504:	2aff      	cmp	r2, #255	@ 0xff
 8011506:	d904      	bls.n	8011512 <__ascii_wctomb+0x14>
 8011508:	228a      	movs	r2, #138	@ 0x8a
 801150a:	601a      	str	r2, [r3, #0]
 801150c:	f04f 30ff 	mov.w	r0, #4294967295
 8011510:	4770      	bx	lr
 8011512:	700a      	strb	r2, [r1, #0]
 8011514:	2001      	movs	r0, #1
 8011516:	4770      	bx	lr

08011518 <_raise_r>:
 8011518:	291f      	cmp	r1, #31
 801151a:	b538      	push	{r3, r4, r5, lr}
 801151c:	4605      	mov	r5, r0
 801151e:	460c      	mov	r4, r1
 8011520:	d904      	bls.n	801152c <_raise_r+0x14>
 8011522:	2316      	movs	r3, #22
 8011524:	6003      	str	r3, [r0, #0]
 8011526:	f04f 30ff 	mov.w	r0, #4294967295
 801152a:	bd38      	pop	{r3, r4, r5, pc}
 801152c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801152e:	b112      	cbz	r2, 8011536 <_raise_r+0x1e>
 8011530:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011534:	b94b      	cbnz	r3, 801154a <_raise_r+0x32>
 8011536:	4628      	mov	r0, r5
 8011538:	f000 f830 	bl	801159c <_getpid_r>
 801153c:	4622      	mov	r2, r4
 801153e:	4601      	mov	r1, r0
 8011540:	4628      	mov	r0, r5
 8011542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011546:	f000 b817 	b.w	8011578 <_kill_r>
 801154a:	2b01      	cmp	r3, #1
 801154c:	d00a      	beq.n	8011564 <_raise_r+0x4c>
 801154e:	1c59      	adds	r1, r3, #1
 8011550:	d103      	bne.n	801155a <_raise_r+0x42>
 8011552:	2316      	movs	r3, #22
 8011554:	6003      	str	r3, [r0, #0]
 8011556:	2001      	movs	r0, #1
 8011558:	e7e7      	b.n	801152a <_raise_r+0x12>
 801155a:	2100      	movs	r1, #0
 801155c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011560:	4620      	mov	r0, r4
 8011562:	4798      	blx	r3
 8011564:	2000      	movs	r0, #0
 8011566:	e7e0      	b.n	801152a <_raise_r+0x12>

08011568 <raise>:
 8011568:	4b02      	ldr	r3, [pc, #8]	@ (8011574 <raise+0xc>)
 801156a:	4601      	mov	r1, r0
 801156c:	6818      	ldr	r0, [r3, #0]
 801156e:	f7ff bfd3 	b.w	8011518 <_raise_r>
 8011572:	bf00      	nop
 8011574:	2000005c 	.word	0x2000005c

08011578 <_kill_r>:
 8011578:	b538      	push	{r3, r4, r5, lr}
 801157a:	4d07      	ldr	r5, [pc, #28]	@ (8011598 <_kill_r+0x20>)
 801157c:	2300      	movs	r3, #0
 801157e:	4604      	mov	r4, r0
 8011580:	4608      	mov	r0, r1
 8011582:	4611      	mov	r1, r2
 8011584:	602b      	str	r3, [r5, #0]
 8011586:	f7f0 fac4 	bl	8001b12 <_kill>
 801158a:	1c43      	adds	r3, r0, #1
 801158c:	d102      	bne.n	8011594 <_kill_r+0x1c>
 801158e:	682b      	ldr	r3, [r5, #0]
 8011590:	b103      	cbz	r3, 8011594 <_kill_r+0x1c>
 8011592:	6023      	str	r3, [r4, #0]
 8011594:	bd38      	pop	{r3, r4, r5, pc}
 8011596:	bf00      	nop
 8011598:	20003158 	.word	0x20003158

0801159c <_getpid_r>:
 801159c:	f7f0 bab1 	b.w	8001b02 <_getpid>

080115a0 <_malloc_usable_size_r>:
 80115a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115a4:	1f18      	subs	r0, r3, #4
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	bfbc      	itt	lt
 80115aa:	580b      	ldrlt	r3, [r1, r0]
 80115ac:	18c0      	addlt	r0, r0, r3
 80115ae:	4770      	bx	lr

080115b0 <_init>:
 80115b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115b2:	bf00      	nop
 80115b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115b6:	bc08      	pop	{r3}
 80115b8:	469e      	mov	lr, r3
 80115ba:	4770      	bx	lr

080115bc <_fini>:
 80115bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115be:	bf00      	nop
 80115c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115c2:	bc08      	pop	{r3}
 80115c4:	469e      	mov	lr, r3
 80115c6:	4770      	bx	lr
