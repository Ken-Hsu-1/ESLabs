
DSP_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011138  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d0c  080112c8  080112c8  000122c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011fd4  08011fd4  00013218  2**0
                  CONTENTS
  4 .ARM          00000008  08011fd4  08011fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011fdc  08011fdc  00013218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011fdc  08011fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011fe0  08011fe0  00012fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  08011fe4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f40  20000218  080121fc  00013218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003158  080121fc  00014158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000280b2  00000000  00000000  00013248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000508b  00000000  00000000  0003b2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f0  00000000  00000000  00040388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b36  00000000  00000000  00042678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006bc5  00000000  00000000  000441ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028c9f  00000000  00000000  0004ad73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d51b  00000000  00000000  00073a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180f2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aae0  00000000  00000000  00180f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0018ba50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080112b0 	.word	0x080112b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	080112b0 	.word	0x080112b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000fec:	1d39      	adds	r1, r7, #4
 8000fee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <__io_putchar+0x20>)
 8000ff6:	f007 fd63 	bl	8008ac0 <HAL_UART_Transmit>
	return ch;
 8000ffa:	687b      	ldr	r3, [r7, #4]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000280 	.word	0x20000280

08001008 <WIFI_init_connect>:

void WIFI_init_connect(void)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af04      	add	r7, sp, #16
	if(WIFI_Init() ==  WIFI_STATUS_OK)
 800100e:	f002 f959 	bl	80032c4 <WIFI_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	f040 8091 	bne.w	800113c <WIFI_init_connect+0x134>
	  {
	    printf("> WIFI Module Initialized.\n");
 800101a:	484b      	ldr	r0, [pc, #300]	@ (8001148 <WIFI_init_connect+0x140>)
 800101c:	f00c fc72 	bl	800d904 <puts>
	    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 8001020:	2106      	movs	r1, #6
 8001022:	484a      	ldr	r0, [pc, #296]	@ (800114c <WIFI_init_connect+0x144>)
 8001024:	f002 f99c 	bl	8003360 <WIFI_GetMAC_Address>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d11a      	bne.n	8001064 <WIFI_init_connect+0x5c>
	    {
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
	               MAC_Addr[0],
 800102e:	4b47      	ldr	r3, [pc, #284]	@ (800114c <WIFI_init_connect+0x144>)
 8001030:	781b      	ldrb	r3, [r3, #0]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001032:	4618      	mov	r0, r3
	               MAC_Addr[1],
 8001034:	4b45      	ldr	r3, [pc, #276]	@ (800114c <WIFI_init_connect+0x144>)
 8001036:	785b      	ldrb	r3, [r3, #1]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001038:	461c      	mov	r4, r3
	               MAC_Addr[2],
 800103a:	4b44      	ldr	r3, [pc, #272]	@ (800114c <WIFI_init_connect+0x144>)
 800103c:	789b      	ldrb	r3, [r3, #2]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 800103e:	461d      	mov	r5, r3
	               MAC_Addr[3],
 8001040:	4b42      	ldr	r3, [pc, #264]	@ (800114c <WIFI_init_connect+0x144>)
 8001042:	78db      	ldrb	r3, [r3, #3]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001044:	461a      	mov	r2, r3
	               MAC_Addr[4],
 8001046:	4b41      	ldr	r3, [pc, #260]	@ (800114c <WIFI_init_connect+0x144>)
 8001048:	791b      	ldrb	r3, [r3, #4]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 800104a:	4619      	mov	r1, r3
	               MAC_Addr[5]);
 800104c:	4b3f      	ldr	r3, [pc, #252]	@ (800114c <WIFI_init_connect+0x144>)
 800104e:	795b      	ldrb	r3, [r3, #5]
	    	printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	9101      	str	r1, [sp, #4]
 8001054:	9200      	str	r2, [sp, #0]
 8001056:	462b      	mov	r3, r5
 8001058:	4622      	mov	r2, r4
 800105a:	4601      	mov	r1, r0
 800105c:	483c      	ldr	r0, [pc, #240]	@ (8001150 <WIFI_init_connect+0x148>)
 800105e:	f00c fbe9 	bl	800d834 <iprintf>
 8001062:	e002      	b.n	800106a <WIFI_init_connect+0x62>
	    }
	    else
	    {
	      printf("> ERROR : CANNOT get MAC address\n");
 8001064:	483b      	ldr	r0, [pc, #236]	@ (8001154 <WIFI_init_connect+0x14c>)
 8001066:	f00c fc4d 	bl	800d904 <puts>
	      //BSP_LED_On(LED2);
	    }

	    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 800106a:	2203      	movs	r2, #3
 800106c:	493a      	ldr	r1, [pc, #232]	@ (8001158 <WIFI_init_connect+0x150>)
 800106e:	483b      	ldr	r0, [pc, #236]	@ (800115c <WIFI_init_connect+0x154>)
 8001070:	f002 f954 	bl	800331c <WIFI_Connect>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d15c      	bne.n	8001134 <WIFI_init_connect+0x12c>
	    {
	      printf("> es-wifi module connected \n");
 800107a:	4839      	ldr	r0, [pc, #228]	@ (8001160 <WIFI_init_connect+0x158>)
 800107c:	f00c fc42 	bl	800d904 <puts>
	      if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8001080:	2104      	movs	r1, #4
 8001082:	4838      	ldr	r0, [pc, #224]	@ (8001164 <WIFI_init_connect+0x15c>)
 8001084:	f002 f98c 	bl	80033a0 <WIFI_GetIP_Address>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d14e      	bne.n	800112c <WIFI_init_connect+0x124>
	      {
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
	               IP_Addr[0],
 800108e:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <WIFI_init_connect+0x15c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8001092:	4619      	mov	r1, r3
	               IP_Addr[1],
 8001094:	4b33      	ldr	r3, [pc, #204]	@ (8001164 <WIFI_init_connect+0x15c>)
 8001096:	785b      	ldrb	r3, [r3, #1]
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8001098:	461a      	mov	r2, r3
	               IP_Addr[2],
 800109a:	4b32      	ldr	r3, [pc, #200]	@ (8001164 <WIFI_init_connect+0x15c>)
 800109c:	789b      	ldrb	r3, [r3, #2]
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 800109e:	4618      	mov	r0, r3
	               IP_Addr[3]);
 80010a0:	4b30      	ldr	r3, [pc, #192]	@ (8001164 <WIFI_init_connect+0x15c>)
 80010a2:	78db      	ldrb	r3, [r3, #3]
	        printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	4603      	mov	r3, r0
 80010a8:	482f      	ldr	r0, [pc, #188]	@ (8001168 <WIFI_init_connect+0x160>)
 80010aa:	f00c fbc3 	bl	800d834 <iprintf>

	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
	               RemoteIP[0],
 80010ae:	4b2f      	ldr	r3, [pc, #188]	@ (800116c <WIFI_init_connect+0x164>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80010b2:	4619      	mov	r1, r3
	               RemoteIP[1],
 80010b4:	4b2d      	ldr	r3, [pc, #180]	@ (800116c <WIFI_init_connect+0x164>)
 80010b6:	785b      	ldrb	r3, [r3, #1]
	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80010b8:	4618      	mov	r0, r3
	               RemoteIP[2],
 80010ba:	4b2c      	ldr	r3, [pc, #176]	@ (800116c <WIFI_init_connect+0x164>)
 80010bc:	789b      	ldrb	r3, [r3, #2]
	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80010be:	461c      	mov	r4, r3
	               RemoteIP[3],
 80010c0:	4b2a      	ldr	r3, [pc, #168]	@ (800116c <WIFI_init_connect+0x164>)
 80010c2:	78db      	ldrb	r3, [r3, #3]
	        printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80010c4:	461a      	mov	r2, r3
 80010c6:	f641 7342 	movw	r3, #8002	@ 0x1f42
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	9200      	str	r2, [sp, #0]
 80010ce:	4623      	mov	r3, r4
 80010d0:	4602      	mov	r2, r0
 80010d2:	4827      	ldr	r0, [pc, #156]	@ (8001170 <WIFI_init_connect+0x168>)
 80010d4:	f00c fbae 	bl	800d834 <iprintf>
								 RemotePORT);

	        while (Trials--)
 80010d8:	e014      	b.n	8001104 <WIFI_init_connect+0xfc>
	        {
	          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 80010da:	2300      	movs	r3, #0
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	f641 7342 	movw	r3, #8002	@ 0x1f42
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	4b21      	ldr	r3, [pc, #132]	@ (800116c <WIFI_init_connect+0x164>)
 80010e6:	4a23      	ldr	r2, [pc, #140]	@ (8001174 <WIFI_init_connect+0x16c>)
 80010e8:	2100      	movs	r1, #0
 80010ea:	2000      	movs	r0, #0
 80010ec:	f002 f97c 	bl	80033e8 <WIFI_OpenClientConnection>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d106      	bne.n	8001104 <WIFI_init_connect+0xfc>
	          {
	            printf("> TCP Connection opened successfully.\n");
 80010f6:	4820      	ldr	r0, [pc, #128]	@ (8001178 <WIFI_init_connect+0x170>)
 80010f8:	f00c fc04 	bl	800d904 <puts>
	            Socket = 0;
 80010fc:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <WIFI_init_connect+0x174>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
	            break;
 8001102:	e00a      	b.n	800111a <WIFI_init_connect+0x112>
	        while (Trials--)
 8001104:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <WIFI_init_connect+0x178>)
 8001106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110a:	b29a      	uxth	r2, r3
 800110c:	3a01      	subs	r2, #1
 800110e:	b292      	uxth	r2, r2
 8001110:	b211      	sxth	r1, r2
 8001112:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <WIFI_init_connect+0x178>)
 8001114:	8011      	strh	r1, [r2, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1df      	bne.n	80010da <WIFI_init_connect+0xd2>
	          }
	        }
	        if(Socket == -1)
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <WIFI_init_connect+0x174>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001122:	d10e      	bne.n	8001142 <WIFI_init_connect+0x13a>
	        {
	          printf("> ERROR : Cannot open Connection\n");
 8001124:	4817      	ldr	r0, [pc, #92]	@ (8001184 <WIFI_init_connect+0x17c>)
 8001126:	f00c fbed 	bl	800d904 <puts>
	  {
	    printf("> ERROR : WIFI Module cannot be initialized.\n");
	    //BSP_LED_On(LED2);
	  }

}
 800112a:	e00a      	b.n	8001142 <WIFI_init_connect+0x13a>
	        printf("> ERROR : es-wifi module CANNOT get IP address\n");
 800112c:	4816      	ldr	r0, [pc, #88]	@ (8001188 <WIFI_init_connect+0x180>)
 800112e:	f00c fbe9 	bl	800d904 <puts>
}
 8001132:	e006      	b.n	8001142 <WIFI_init_connect+0x13a>
	      printf("> ERROR : es-wifi module NOT connected\n");
 8001134:	4815      	ldr	r0, [pc, #84]	@ (800118c <WIFI_init_connect+0x184>)
 8001136:	f00c fbe5 	bl	800d904 <puts>
}
 800113a:	e002      	b.n	8001142 <WIFI_init_connect+0x13a>
	    printf("> ERROR : WIFI Module cannot be initialized.\n");
 800113c:	4814      	ldr	r0, [pc, #80]	@ (8001190 <WIFI_init_connect+0x188>)
 800113e:	f00c fbe1 	bl	800d904 <puts>
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bdb0      	pop	{r4, r5, r7, pc}
 8001148:	0801130c 	.word	0x0801130c
 800114c:	20000d18 	.word	0x20000d18
 8001150:	08011328 	.word	0x08011328
 8001154:	0801135c 	.word	0x0801135c
 8001158:	08011380 	.word	0x08011380
 800115c:	0801138c 	.word	0x0801138c
 8001160:	08011390 	.word	0x08011390
 8001164:	20000d20 	.word	0x20000d20
 8001168:	080113ac 	.word	0x080113ac
 800116c:	20000000 	.word	0x20000000
 8001170:	080113dc 	.word	0x080113dc
 8001174:	08011410 	.word	0x08011410
 8001178:	0801141c 	.word	0x0801141c
 800117c:	20000004 	.word	0x20000004
 8001180:	20000008 	.word	0x20000008
 8001184:	08011444 	.word	0x08011444
 8001188:	08011468 	.word	0x08011468
 800118c:	08011498 	.word	0x08011498
 8001190:	080114c0 	.word	0x080114c0

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001198:	f002 fc62 	bl	8003a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119c:	f000 f862 	bl	8001264 <SystemClock_Config>
  //MX_GPIO_Init();
  //MX_DFSDM1_Init();
  //MX_I2C2_Init();
  //MX_QUADSPI_Init();
  //MX_SPI3_Init();
  MX_USART1_UART_Init();
 80011a0:	f000 f8fa 	bl	8001398 <MX_USART1_UART_Init>
  //MX_USART3_UART_Init();
  //MX_USB_OTG_FS_PCD_Init();
  MX_TIM6_Init();
 80011a4:	f000 f8c0 	bl	8001328 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  BSP_ACCELERO_Init();
 80011a8:	f002 faee 	bl	8003788 <BSP_ACCELERO_Init>

  WIFI_init_connect();
 80011ac:	f7ff ff2c 	bl	8001008 <WIFI_init_connect>
  printf("wifi init finish\n");
 80011b0:	481c      	ldr	r0, [pc, #112]	@ (8001224 <main+0x90>)
 80011b2:	f00c fba7 	bl	800d904 <puts>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011b6:	f008 fa15 	bl	80095e4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of timerEvt */
  timerEvtHandle = osSemaphoreNew(1, 0, &timerEvt_attributes);
 80011ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001228 <main+0x94>)
 80011bc:	2100      	movs	r1, #0
 80011be:	2001      	movs	r0, #1
 80011c0:	f008 fb07 	bl	80097d2 <osSemaphoreNew>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a19      	ldr	r2, [pc, #100]	@ (800122c <main+0x98>)
 80011c8:	6013      	str	r3, [r2, #0]

  /* creation of convStart */
  convStartHandle = osSemaphoreNew(1, 0, &convStart_attributes);
 80011ca:	4a19      	ldr	r2, [pc, #100]	@ (8001230 <main+0x9c>)
 80011cc:	2100      	movs	r1, #0
 80011ce:	2001      	movs	r0, #1
 80011d0:	f008 faff 	bl	80097d2 <osSemaphoreNew>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <main+0xa0>)
 80011d8:	6013      	str	r3, [r2, #0]

  /* creation of commStart */
  commStartHandle = osSemaphoreNew(1, 0, &commStart_attributes);
 80011da:	4a17      	ldr	r2, [pc, #92]	@ (8001238 <main+0xa4>)
 80011dc:	2100      	movs	r1, #0
 80011de:	2001      	movs	r0, #1
 80011e0:	f008 faf7 	bl	80097d2 <osSemaphoreNew>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a15      	ldr	r2, [pc, #84]	@ (800123c <main+0xa8>)
 80011e8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011ea:	4a15      	ldr	r2, [pc, #84]	@ (8001240 <main+0xac>)
 80011ec:	2100      	movs	r1, #0
 80011ee:	4815      	ldr	r0, [pc, #84]	@ (8001244 <main+0xb0>)
 80011f0:	f008 fa42 	bl	8009678 <osThreadNew>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a14      	ldr	r2, [pc, #80]	@ (8001248 <main+0xb4>)
 80011f8:	6013      	str	r3, [r2, #0]

  /* creation of acqTask */
  acqTaskHandle = osThreadNew(StartacqTask, NULL, &acqTask_attributes);
 80011fa:	4a14      	ldr	r2, [pc, #80]	@ (800124c <main+0xb8>)
 80011fc:	2100      	movs	r1, #0
 80011fe:	4814      	ldr	r0, [pc, #80]	@ (8001250 <main+0xbc>)
 8001200:	f008 fa3a 	bl	8009678 <osThreadNew>
 8001204:	4603      	mov	r3, r0
 8001206:	4a13      	ldr	r2, [pc, #76]	@ (8001254 <main+0xc0>)
 8001208:	6013      	str	r3, [r2, #0]

  /* creation of commTask */
  commTaskHandle = osThreadNew(StartcommTask, NULL, &commTask_attributes);
 800120a:	4a13      	ldr	r2, [pc, #76]	@ (8001258 <main+0xc4>)
 800120c:	2100      	movs	r1, #0
 800120e:	4813      	ldr	r0, [pc, #76]	@ (800125c <main+0xc8>)
 8001210:	f008 fa32 	bl	8009678 <osThreadNew>
 8001214:	4603      	mov	r3, r0
 8001216:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <main+0xcc>)
 8001218:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800121a:	f008 fa07 	bl	800962c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800121e:	bf00      	nop
 8001220:	e7fd      	b.n	800121e <main+0x8a>
 8001222:	bf00      	nop
 8001224:	080114f0 	.word	0x080114f0
 8001228:	08011ad0 	.word	0x08011ad0
 800122c:	20000a28 	.word	0x20000a28
 8001230:	08011ae0 	.word	0x08011ae0
 8001234:	20000a7c 	.word	0x20000a7c
 8001238:	08011af0 	.word	0x08011af0
 800123c:	20000ad0 	.word	0x20000ad0
 8001240:	08011a64 	.word	0x08011a64
 8001244:	0800142d 	.word	0x0800142d
 8001248:	20000308 	.word	0x20000308
 800124c:	08011a88 	.word	0x08011a88
 8001250:	08001451 	.word	0x08001451
 8001254:	20000568 	.word	0x20000568
 8001258:	08011aac 	.word	0x08011aac
 800125c:	08001475 	.word	0x08001475
 8001260:	200007c8 	.word	0x200007c8

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b096      	sub	sp, #88	@ 0x58
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2244      	movs	r2, #68	@ 0x44
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f00c fc56 	bl	800db24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001286:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800128a:	f003 fedd 	bl	8005048 <HAL_PWREx_ControlVoltageScaling>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001294:	f000 f964 	bl	8001560 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001298:	f003 feb8 	bl	800500c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800129c:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <SystemClock_Config+0xc0>)
 800129e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012a2:	4a20      	ldr	r2, [pc, #128]	@ (8001324 <SystemClock_Config+0xc0>)
 80012a4:	f023 0318 	bic.w	r3, r3, #24
 80012a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80012ac:	2314      	movs	r3, #20
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012b4:	2301      	movs	r3, #1
 80012b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012bc:	2360      	movs	r3, #96	@ 0x60
 80012be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c0:	2302      	movs	r3, #2
 80012c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012c4:	2301      	movs	r3, #1
 80012c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80012cc:	2328      	movs	r3, #40	@ 0x28
 80012ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012d0:	2307      	movs	r3, #7
 80012d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012d8:	2302      	movs	r3, #2
 80012da:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 ff07 	bl	80050f4 <HAL_RCC_OscConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012ec:	f000 f938 	bl	8001560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f0:	230f      	movs	r3, #15
 80012f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f4:	2303      	movs	r3, #3
 80012f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	2104      	movs	r1, #4
 8001308:	4618      	mov	r0, r3
 800130a:	f004 facf 	bl	80058ac <HAL_RCC_ClockConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001314:	f000 f924 	bl	8001560 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001318:	f004 ffd6 	bl	80062c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800131c:	bf00      	nop
 800131e:	3758      	adds	r7, #88	@ 0x58
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000

08001328 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001338:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <MX_TIM6_Init+0x68>)
 800133a:	4a16      	ldr	r2, [pc, #88]	@ (8001394 <MX_TIM6_Init+0x6c>)
 800133c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <MX_TIM6_Init+0x68>)
 8001340:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001344:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <MX_TIM6_Init+0x68>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800134c:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <MX_TIM6_Init+0x68>)
 800134e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001352:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <MX_TIM6_Init+0x68>)
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800135a:	480d      	ldr	r0, [pc, #52]	@ (8001390 <MX_TIM6_Init+0x68>)
 800135c:	f007 f885 	bl	800846a <HAL_TIM_Base_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001366:	f000 f8fb 	bl	8001560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	@ (8001390 <MX_TIM6_Init+0x68>)
 8001378:	f007 faae 	bl	80088d8 <HAL_TIMEx_MasterConfigSynchronization>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001382:	f000 f8ed 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000234 	.word	0x20000234
 8001394:	40001000 	.word	0x40001000

08001398 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <MX_USART1_UART_Init+0x58>)
 800139e:	4a15      	ldr	r2, [pc, #84]	@ (80013f4 <MX_USART1_UART_Init+0x5c>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013a2:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <MX_USART1_UART_Init+0x58>)
 80013a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <MX_USART1_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <MX_USART1_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <MX_USART1_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <MX_USART1_UART_Init+0x58>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <MX_USART1_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MX_USART1_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MX_USART1_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <MX_USART1_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <MX_USART1_UART_Init+0x58>)
 80013dc:	f007 fb22 	bl	8008a24 <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013e6:	f000 f8bb 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000280 	.word	0x20000280
 80013f4:	40013800 	.word	0x40013800

080013f8 <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d102      	bne.n	800140e <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8001408:	f001 ff4c 	bl	80032a4 <SPI_WIFI_ISR>
      break;
 800140c:	e000      	b.n	8001410 <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 800140e:	bf00      	nop
    }
  }
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 800141c:	4802      	ldr	r0, [pc, #8]	@ (8001428 <SPI3_IRQHandler+0x10>)
 800141e:	f006 f9ad 	bl	800777c <HAL_SPI_IRQHandler>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000d34 	.word	0x20000d34

0800142c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(convStartHandle, osWaitForever);
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <StartDefaultTask+0x20>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	4618      	mov	r0, r3
 800143e:	f008 fa51 	bl	80098e4 <osSemaphoreAcquire>
    osDelay(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f008 f9aa 	bl	800979c <osDelay>
	osSemaphoreAcquire(convStartHandle, osWaitForever);
 8001448:	bf00      	nop
 800144a:	e7f3      	b.n	8001434 <StartDefaultTask+0x8>
 800144c:	20000a7c 	.word	0x20000a7c

08001450 <StartacqTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartacqTask */
void StartacqTask(void *argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartacqTask */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(timerEvtHandle, osWaitForever);
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <StartacqTask+0x20>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	4618      	mov	r0, r3
 8001462:	f008 fa3f 	bl	80098e4 <osSemaphoreAcquire>
    osDelay(1);
 8001466:	2001      	movs	r0, #1
 8001468:	f008 f998 	bl	800979c <osDelay>
	osSemaphoreAcquire(timerEvtHandle, osWaitForever);
 800146c:	bf00      	nop
 800146e:	e7f3      	b.n	8001458 <StartacqTask+0x8>
 8001470:	20000a28 	.word	0x20000a28

08001474 <StartcommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartcommTask */
void StartcommTask(void *argument)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af02      	add	r7, sp, #8
 800147a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartcommTask */
  /* Infinite loop */
  for(;;)
  {
	  if(Socket != -1)
 800147c:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <StartcommTask+0xc8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d0fa      	beq.n	800147c <StartcommTask+0x8>
	      {
	        ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 8001486:	4b2d      	ldr	r3, [pc, #180]	@ (800153c <StartcommTask+0xc8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <StartcommTask+0xcc>)
 8001494:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001498:	492a      	ldr	r1, [pc, #168]	@ (8001544 <StartcommTask+0xd0>)
 800149a:	f002 f803 	bl	80034a4 <WIFI_ReceiveData>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <StartcommTask+0xd4>)
 80014a4:	601a      	str	r2, [r3, #0]
	        if(ret == WIFI_STATUS_OK)
 80014a6:	4b28      	ldr	r3, [pc, #160]	@ (8001548 <StartcommTask+0xd4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d13e      	bne.n	800152c <StartcommTask+0xb8>
	        {
	          if(Datalen > 0)
 80014ae:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <StartcommTask+0xcc>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0e2      	beq.n	800147c <StartcommTask+0x8>
	          {
	            RxData[Datalen]=0;
 80014b6:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <StartcommTask+0xcc>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <StartcommTask+0xd0>)
 80014be:	2100      	movs	r1, #0
 80014c0:	5499      	strb	r1, [r3, r2]
	            printf("Received: %s\n",RxData);
 80014c2:	4920      	ldr	r1, [pc, #128]	@ (8001544 <StartcommTask+0xd0>)
 80014c4:	4821      	ldr	r0, [pc, #132]	@ (800154c <StartcommTask+0xd8>)
 80014c6:	f00c f9b5 	bl	800d834 <iprintf>

	            int16_t pDataXYZ[3];

	            BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 f998 	bl	8003804 <BSP_ACCELERO_AccGetXYZ>
	            printf("\n%d %d %d \n",pDataXYZ[0],pDataXYZ[1],pDataXYZ[2]);
 80014d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014d8:	4619      	mov	r1, r3
 80014da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014de:	461a      	mov	r2, r3
 80014e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014e4:	481a      	ldr	r0, [pc, #104]	@ (8001550 <StartcommTask+0xdc>)
 80014e6:	f00c f9a5 	bl	800d834 <iprintf>
	            uint8_t* acc_data = (uint8_t*) &pDataXYZ[0];
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	617b      	str	r3, [r7, #20]
	            printf("\n%d %d \n",*acc_data,sizeof(acc_data));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2204      	movs	r2, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	4816      	ldr	r0, [pc, #88]	@ (8001554 <StartcommTask+0xe0>)
 80014fa:	f00c f99b 	bl	800d834 <iprintf>

	            ret = WIFI_SendData(Socket, acc_data, 2, &Datalen, WIFI_WRITE_TIMEOUT);
 80014fe:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <StartcommTask+0xc8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <StartcommTask+0xcc>)
 800150c:	2202      	movs	r2, #2
 800150e:	6979      	ldr	r1, [r7, #20]
 8001510:	f001 ffa6 	bl	8003460 <WIFI_SendData>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <StartcommTask+0xd4>)
 800151a:	601a      	str	r2, [r3, #0]
	            if (ret != WIFI_STATUS_OK)
 800151c:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <StartcommTask+0xd4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0ab      	beq.n	800147c <StartcommTask+0x8>
	            {
	              printf("> ERROR : Failed to Send Data, connection closed\n");
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <StartcommTask+0xe4>)
 8001526:	f00c f9ed 	bl	800d904 <puts>
	          break;
	        }
	      }
  }
  /* USER CODE END StartcommTask */
}
 800152a:	e003      	b.n	8001534 <StartcommTask+0xc0>
	          printf("> ERROR : Failed to Receive Data, connection closed\n");
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <StartcommTask+0xe8>)
 800152e:	f00c f9e9 	bl	800d904 <puts>
	          break;
 8001532:	bf00      	nop
}
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000004 	.word	0x20000004
 8001540:	20000d24 	.word	0x20000d24
 8001544:	20000b24 	.word	0x20000b24
 8001548:	20000d28 	.word	0x20000d28
 800154c:	08011504 	.word	0x08011504
 8001550:	08011514 	.word	0x08011514
 8001554:	08011520 	.word	0x08011520
 8001558:	0801152c 	.word	0x0801152c
 800155c:	08011560 	.word	0x08011560

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <Error_Handler+0x8>

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_MspInit+0x4c>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001576:	4a10      	ldr	r2, [pc, #64]	@ (80015b8 <HAL_MspInit+0x4c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6613      	str	r3, [r2, #96]	@ 0x60
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <HAL_MspInit+0x4c>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <HAL_MspInit+0x4c>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <HAL_MspInit+0x4c>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001594:	6593      	str	r3, [r2, #88]	@ 0x58
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <HAL_MspInit+0x4c>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	210f      	movs	r1, #15
 80015a6:	f06f 0001 	mvn.w	r0, #1
 80015aa:	f002 fbcc 	bl	8003d46 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000

080015bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0ac      	sub	sp, #176	@ 0xb0
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2288      	movs	r2, #136	@ 0x88
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f00c faa1 	bl	800db24 <memset>
  if(hi2c->Instance==I2C2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a21      	ldr	r2, [pc, #132]	@ (800166c <HAL_I2C_MspInit+0xb0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d13b      	bne.n	8001664 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 fb7b 	bl	8005cf4 <HAL_RCCEx_PeriphCLKConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001604:	f7ff ffac 	bl	8001560 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <HAL_I2C_MspInit+0xb4>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160c:	4a18      	ldr	r2, [pc, #96]	@ (8001670 <HAL_I2C_MspInit+0xb4>)
 800160e:	f043 0302 	orr.w	r3, r3, #2
 8001612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <HAL_I2C_MspInit+0xb4>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001620:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001624:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001628:	2312      	movs	r3, #18
 800162a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162e:	2301      	movs	r3, #1
 8001630:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800163a:	2304      	movs	r3, #4
 800163c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001644:	4619      	mov	r1, r3
 8001646:	480b      	ldr	r0, [pc, #44]	@ (8001674 <HAL_I2C_MspInit+0xb8>)
 8001648:	f002 fbf4 	bl	8003e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <HAL_I2C_MspInit+0xb4>)
 800164e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001650:	4a07      	ldr	r2, [pc, #28]	@ (8001670 <HAL_I2C_MspInit+0xb4>)
 8001652:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001656:	6593      	str	r3, [r2, #88]	@ 0x58
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <HAL_I2C_MspInit+0xb4>)
 800165a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001664:	bf00      	nop
 8001666:	37b0      	adds	r7, #176	@ 0xb0
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40005800 	.word	0x40005800
 8001670:	40021000 	.word	0x40021000
 8001674:	48000400 	.word	0x48000400

08001678 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0b      	ldr	r2, [pc, #44]	@ (80016b4 <HAL_I2C_MspDeInit+0x3c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d10f      	bne.n	80016aa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <HAL_I2C_MspDeInit+0x40>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <HAL_I2C_MspDeInit+0x40>)
 8001690:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001694:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001696:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800169a:	4808      	ldr	r0, [pc, #32]	@ (80016bc <HAL_I2C_MspDeInit+0x44>)
 800169c:	f002 fd74 	bl	8004188 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80016a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016a4:	4805      	ldr	r0, [pc, #20]	@ (80016bc <HAL_I2C_MspDeInit+0x44>)
 80016a6:	f002 fd6f 	bl	8004188 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40005800 	.word	0x40005800
 80016b8:	40021000 	.word	0x40021000
 80016bc:	48000400 	.word	0x48000400

080016c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	@ 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a17      	ldr	r2, [pc, #92]	@ (800173c <HAL_SPI_MspInit+0x7c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d128      	bne.n	8001734 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016e2:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <HAL_SPI_MspInit+0x80>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	4a16      	ldr	r2, [pc, #88]	@ (8001740 <HAL_SPI_MspInit+0x80>)
 80016e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <HAL_SPI_MspInit+0x80>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_SPI_MspInit+0x80>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	4a10      	ldr	r2, [pc, #64]	@ (8001740 <HAL_SPI_MspInit+0x80>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <HAL_SPI_MspInit+0x80>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001712:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001724:	2306      	movs	r3, #6
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <HAL_SPI_MspInit+0x84>)
 8001730:	f002 fb80 	bl	8003e34 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	@ 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40003c00 	.word	0x40003c00
 8001740:	40021000 	.word	0x40021000
 8001744:	48000800 	.word	0x48000800

08001748 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <HAL_SPI_MspDeInit+0x30>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d10a      	bne.n	8001770 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800175a:	4b08      	ldr	r3, [pc, #32]	@ (800177c <HAL_SPI_MspDeInit+0x34>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175e:	4a07      	ldr	r2, [pc, #28]	@ (800177c <HAL_SPI_MspDeInit+0x34>)
 8001760:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001764:	6593      	str	r3, [r2, #88]	@ 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8001766:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800176a:	4805      	ldr	r0, [pc, #20]	@ (8001780 <HAL_SPI_MspDeInit+0x38>)
 800176c:	f002 fd0c 	bl	8004188 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40003c00 	.word	0x40003c00
 800177c:	40021000 	.word	0x40021000
 8001780:	48000800 	.word	0x48000800

08001784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0d      	ldr	r2, [pc, #52]	@ (80017c8 <HAL_TIM_Base_MspInit+0x44>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d113      	bne.n	80017be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <HAL_TIM_Base_MspInit+0x48>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	4a0c      	ldr	r2, [pc, #48]	@ (80017cc <HAL_TIM_Base_MspInit+0x48>)
 800179c:	f043 0310 	orr.w	r3, r3, #16
 80017a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <HAL_TIM_Base_MspInit+0x48>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2105      	movs	r1, #5
 80017b2:	2036      	movs	r0, #54	@ 0x36
 80017b4:	f002 fac7 	bl	8003d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017b8:	2036      	movs	r0, #54	@ 0x36
 80017ba:	f002 fae0 	bl	8003d7e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40001000 	.word	0x40001000
 80017cc:	40021000 	.word	0x40021000

080017d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0ae      	sub	sp, #184	@ 0xb8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	2288      	movs	r2, #136	@ 0x88
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00c f997 	bl	800db24 <memset>
  if(huart->Instance==USART1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a42      	ldr	r2, [pc, #264]	@ (8001904 <HAL_UART_MspInit+0x134>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d13b      	bne.n	8001878 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001800:	2301      	movs	r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001804:	2300      	movs	r3, #0
 8001806:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fa71 	bl	8005cf4 <HAL_RCCEx_PeriphCLKConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001818:	f7ff fea2 	bl	8001560 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800181c:	4b3a      	ldr	r3, [pc, #232]	@ (8001908 <HAL_UART_MspInit+0x138>)
 800181e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001820:	4a39      	ldr	r2, [pc, #228]	@ (8001908 <HAL_UART_MspInit+0x138>)
 8001822:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001826:	6613      	str	r3, [r2, #96]	@ 0x60
 8001828:	4b37      	ldr	r3, [pc, #220]	@ (8001908 <HAL_UART_MspInit+0x138>)
 800182a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001830:	61bb      	str	r3, [r7, #24]
 8001832:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	4b34      	ldr	r3, [pc, #208]	@ (8001908 <HAL_UART_MspInit+0x138>)
 8001836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001838:	4a33      	ldr	r2, [pc, #204]	@ (8001908 <HAL_UART_MspInit+0x138>)
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001840:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <HAL_UART_MspInit+0x138>)
 8001842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800184c:	23c0      	movs	r3, #192	@ 0xc0
 800184e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001864:	2307      	movs	r3, #7
 8001866:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800186e:	4619      	mov	r1, r3
 8001870:	4826      	ldr	r0, [pc, #152]	@ (800190c <HAL_UART_MspInit+0x13c>)
 8001872:	f002 fadf 	bl	8003e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001876:	e040      	b.n	80018fa <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a24      	ldr	r2, [pc, #144]	@ (8001910 <HAL_UART_MspInit+0x140>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d13b      	bne.n	80018fa <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001882:	2304      	movs	r3, #4
 8001884:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001886:	2300      	movs	r3, #0
 8001888:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4618      	mov	r0, r3
 8001890:	f004 fa30 	bl	8005cf4 <HAL_RCCEx_PeriphCLKConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800189a:	f7ff fe61 	bl	8001560 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800189e:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <HAL_UART_MspInit+0x138>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a2:	4a19      	ldr	r2, [pc, #100]	@ (8001908 <HAL_UART_MspInit+0x138>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018aa:	4b17      	ldr	r3, [pc, #92]	@ (8001908 <HAL_UART_MspInit+0x138>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b6:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <HAL_UART_MspInit+0x138>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	4a13      	ldr	r2, [pc, #76]	@ (8001908 <HAL_UART_MspInit+0x138>)
 80018bc:	f043 0308 	orr.w	r3, r3, #8
 80018c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c2:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <HAL_UART_MspInit+0x138>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80018ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e8:	2307      	movs	r3, #7
 80018ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4807      	ldr	r0, [pc, #28]	@ (8001914 <HAL_UART_MspInit+0x144>)
 80018f6:	f002 fa9d 	bl	8003e34 <HAL_GPIO_Init>
}
 80018fa:	bf00      	nop
 80018fc:	37b8      	adds	r7, #184	@ 0xb8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40013800 	.word	0x40013800
 8001908:	40021000 	.word	0x40021000
 800190c:	48000400 	.word	0x48000400
 8001910:	40004800 	.word	0x40004800
 8001914:	48000c00 	.word	0x48000c00

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <NMI_Handler+0x4>

08001920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <MemManage_Handler+0x4>

08001930 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <UsageFault_Handler+0x4>

08001940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001952:	f002 f8d9 	bl	8003b08 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001956:	f009 fec5 	bl	800b6e4 <xTaskGetSchedulerState>
 800195a:	4603      	mov	r3, r0
 800195c:	2b01      	cmp	r3, #1
 800195e:	d001      	beq.n	8001964 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001960:	f00a fdba 	bl	800c4d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800196c:	2020      	movs	r0, #32
 800196e:	f002 fd2f 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001972:	2040      	movs	r0, #64	@ 0x40
 8001974:	f002 fd2c 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001978:	2080      	movs	r0, #128	@ 0x80
 800197a:	f002 fd29 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800197e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001982:	f002 fd25 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}

0800198a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800198e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001992:	f002 fd1d 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001996:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800199a:	f002 fd19 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800199e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019a2:	f002 fd15 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80019a6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80019aa:	f002 fd11 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80019ae:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80019b2:	f002 fd0d 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <TIM6_DAC_IRQHandler+0x10>)
 80019c2:	f006 fda9 	bl	8008518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000234 	.word	0x20000234

080019d0 <EXTI1_IRQHandler>:
//void PendSV_Handler(void)
//{
//}

void EXTI1_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80019d4:	2002      	movs	r0, #2
 80019d6:	f002 fcfb 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}

080019de <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  return 1;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_kill>:

int _kill(int pid, int sig)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019f8:	f00c f97e 	bl	800dcf8 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2216      	movs	r2, #22
 8001a00:	601a      	str	r2, [r3, #0]
  return -1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_exit>:

void _exit (int status)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a16:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffe7 	bl	80019ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <_exit+0x12>

08001a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e00a      	b.n	8001a4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a36:	f3af 8000 	nop.w
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	60ba      	str	r2, [r7, #8]
 8001a42:	b2ca      	uxtb	r2, r1
 8001a44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbf0      	blt.n	8001a36 <_read+0x12>
  }

  return len;
 8001a54:	687b      	ldr	r3, [r7, #4]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e009      	b.n	8001a84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	60ba      	str	r2, [r7, #8]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fab3 	bl	8000fe4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dbf1      	blt.n	8001a70 <_write+0x12>
  }
  return len;
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_close>:

int _close(int file)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001abe:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <_isatty>:

int _isatty(int file)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b08:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <_sbrk+0x5c>)
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <_sbrk+0x60>)
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <_sbrk+0x64>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <_sbrk+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d207      	bcs.n	8001b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b30:	f00c f8e2 	bl	800dcf8 <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	220c      	movs	r2, #12
 8001b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	e009      	b.n	8001b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <_sbrk+0x64>)
 8001b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20018000 	.word	0x20018000
 8001b60:	00000400 	.word	0x00000400
 8001b64:	20000d2c 	.word	0x20000d2c
 8001b68:	20003158 	.word	0x20003158

08001b6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <SystemInit+0x20>)
 8001b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b76:	4a05      	ldr	r2, [pc, #20]	@ (8001b8c <SystemInit+0x20>)
 8001b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b94:	f7ff ffea 	bl	8001b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b98:	480c      	ldr	r0, [pc, #48]	@ (8001bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001b9a:	490d      	ldr	r1, [pc, #52]	@ (8001bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd4 <LoopForever+0xe>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bdc <LoopForever+0x16>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f00c f8a1 	bl	800dd04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bc2:	f7ff fae7 	bl	8001194 <main>

08001bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bc6:	e7fe      	b.n	8001bc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001bd4:	08011fe4 	.word	0x08011fe4
  ldr r2, =_sbss
 8001bd8:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001bdc:	20003158 	.word	0x20003158

08001be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC1_2_IRQHandler>

08001be2 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	2b2f      	cmp	r3, #47	@ 0x2f
 8001bf0:	d906      	bls.n	8001c00 <Hex2Num+0x1e>
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b39      	cmp	r3, #57	@ 0x39
 8001bf6:	d803      	bhi.n	8001c00 <Hex2Num+0x1e>
        return a - '0';
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	3b30      	subs	r3, #48	@ 0x30
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	e014      	b.n	8001c2a <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	2b60      	cmp	r3, #96	@ 0x60
 8001c04:	d906      	bls.n	8001c14 <Hex2Num+0x32>
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2b66      	cmp	r3, #102	@ 0x66
 8001c0a:	d803      	bhi.n	8001c14 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	3b57      	subs	r3, #87	@ 0x57
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	e00a      	b.n	8001c2a <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	2b40      	cmp	r3, #64	@ 0x40
 8001c18:	d906      	bls.n	8001c28 <Hex2Num+0x46>
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b46      	cmp	r3, #70	@ 0x46
 8001c1e:	d803      	bhi.n	8001c28 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	3b37      	subs	r3, #55	@ 0x37
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	e000      	b.n	8001c2a <Hex2Num+0x48>
    }

    return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001c48:	e012      	b.n	8001c70 <ParseHexNumber+0x3a>
        sum <<= 4;
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ffc4 	bl	8001be2 <Hex2Num>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	4413      	add	r3, r2
 8001c62:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3301      	adds	r3, #1
 8001c68:	607b      	str	r3, [r7, #4]
        done_count++;
 8001c6a:	7bbb      	ldrb	r3, [r7, #14]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c76:	d903      	bls.n	8001c80 <ParseHexNumber+0x4a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b39      	cmp	r3, #57	@ 0x39
 8001c7e:	d90f      	bls.n	8001ca0 <ParseHexNumber+0x6a>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b60      	cmp	r3, #96	@ 0x60
 8001c86:	d903      	bls.n	8001c90 <ParseHexNumber+0x5a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b66      	cmp	r3, #102	@ 0x66
 8001c8e:	d907      	bls.n	8001ca0 <ParseHexNumber+0x6a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b40      	cmp	r3, #64	@ 0x40
 8001c96:	d906      	bls.n	8001ca6 <ParseHexNumber+0x70>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b46      	cmp	r3, #70	@ 0x46
 8001c9e:	d802      	bhi.n	8001ca6 <ParseHexNumber+0x70>
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d9d1      	bls.n	8001c4a <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <ParseHexNumber+0x7c>
        *cnt = done_count;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	7bba      	ldrb	r2, [r7, #14]
 8001cb0:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b2d      	cmp	r3, #45	@ 0x2d
 8001cd8:	d119      	bne.n	8001d0e <ParseNumber+0x52>
        minus = 1;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	607b      	str	r3, [r7, #4]
        done_count++;
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001cea:	e010      	b.n	8001d0e <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3b30      	subs	r3, #48	@ 0x30
 8001cfe:	4413      	add	r3, r2
 8001d00:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3301      	adds	r3, #1
 8001d06:	607b      	str	r3, [r7, #4]
        done_count++;
 8001d08:	7bbb      	ldrb	r3, [r7, #14]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d14:	d903      	bls.n	8001d1e <ParseNumber+0x62>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b39      	cmp	r3, #57	@ 0x39
 8001d1c:	d9e6      	bls.n	8001cec <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <ParseNumber+0x6e>
        *cnt = done_count;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	7bba      	ldrb	r2, [r7, #14]
 8001d28:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <ParseNumber+0x7a>
        return 0 - sum;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	425b      	negs	r3, r3
 8001d34:	e000      	b.n	8001d38 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8001d36:	68bb      	ldr	r3, [r7, #8]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d027      	beq.n	8001daa <ParseMAC+0x66>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d024      	beq.n	8001daa <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001d60:	e018      	b.n	8001d94 <ParseMAC+0x50>
    uint8_t done_count = 1;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d6c:	d00d      	beq.n	8001d8a <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	75fa      	strb	r2, [r7, #23]
 8001d74:	461a      	mov	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	189c      	adds	r4, r3, r2
 8001d7a:	f107 0316 	add.w	r3, r7, #22
 8001d7e:	4619      	mov	r1, r3
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7ff ff58 	bl	8001c36 <ParseHexNumber>
 8001d86:	4603      	mov	r3, r0
 8001d88:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 8001d8a:	7dbb      	ldrb	r3, [r7, #22]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4413      	add	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d906      	bls.n	8001daa <ParseMAC+0x66>
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
 8001d9e:	2b05      	cmp	r3, #5
 8001da0:	d803      	bhi.n	8001daa <ParseMAC+0x66>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1db      	bne.n	8001d62 <ParseMAC+0x1e>
   }
  }
}
 8001daa:	bf00      	nop
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}

08001db2 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d027      	beq.n	8001e18 <ParseIP+0x66>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d024      	beq.n	8001e18 <ParseIP+0x66>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d921      	bls.n	8001e18 <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001dd4:	e019      	b.n	8001e0a <ParseIP+0x58>
    uint8_t done_count = 1;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b2e      	cmp	r3, #46	@ 0x2e
 8001de0:	d00e      	beq.n	8001e00 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8001de2:	f107 0316 	add.w	r3, r7, #22
 8001de6:	4619      	mov	r1, r3
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff ff67 	bl	8001cbc <ParseNumber>
 8001dee:	4601      	mov	r1, r0
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	75fa      	strb	r2, [r7, #23]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b2ca      	uxtb	r2, r1
 8001dfe:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8001e00:	7dbb      	ldrb	r3, [r7, #22]
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d803      	bhi.n	8001e18 <ParseIP+0x66>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1de      	bne.n	8001dd6 <ParseIP+0x24>
   }
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	3302      	adds	r3, #2
 8001e32:	4940      	ldr	r1, [pc, #256]	@ (8001f34 <AT_ParseInfo+0x114>)
 8001e34:	4618      	mov	r0, r3
 8001e36:	f00b fea3 	bl	800db80 <strtok>
 8001e3a:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001e3c:	e071      	b.n	8001f22 <AT_ParseInfo+0x102>
    switch (num++) {
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	72fa      	strb	r2, [r7, #11]
 8001e44:	2b06      	cmp	r3, #6
 8001e46:	d866      	bhi.n	8001f16 <AT_ParseInfo+0xf6>
 8001e48:	a201      	add	r2, pc, #4	@ (adr r2, 8001e50 <AT_ParseInfo+0x30>)
 8001e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4e:	bf00      	nop
 8001e50:	08001e6d 	.word	0x08001e6d
 8001e54:	08001e81 	.word	0x08001e81
 8001e58:	08001e99 	.word	0x08001e99
 8001e5c:	08001eb1 	.word	0x08001eb1
 8001e60:	08001ec9 	.word	0x08001ec9
 8001e64:	08001ee1 	.word	0x08001ee1
 8001e68:	08001ef5 	.word	0x08001ef5
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	221f      	movs	r2, #31
 8001e70:	68f9      	ldr	r1, [r7, #12]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f00b fe70 	bl	800db58 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	77da      	strb	r2, [r3, #31]
      break;
 8001e7e:	e04b      	b.n	8001f18 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3320      	adds	r3, #32
 8001e84:	2217      	movs	r2, #23
 8001e86:	68f9      	ldr	r1, [r7, #12]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f00b fe65 	bl	800db58 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      break;
 8001e96:	e03f      	b.n	8001f18 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3338      	adds	r3, #56	@ 0x38
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	68f9      	ldr	r1, [r7, #12]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f00b fe59 	bl	800db58 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8001eae:	e033      	b.n	8001f18 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3348      	adds	r3, #72	@ 0x48
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	68f9      	ldr	r1, [r7, #12]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f00b fe4d 	bl	800db58 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 8001ec6:	e027      	b.n	8001f18 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3358      	adds	r3, #88	@ 0x58
 8001ecc:	220f      	movs	r2, #15
 8001ece:	68f9      	ldr	r1, [r7, #12]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f00b fe41 	bl	800db58 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      break;
 8001ede:	e01b      	b.n	8001f18 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7ff feea 	bl	8001cbc <ParseNumber>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 8001ef2:	e011      	b.n	8001f18 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8001ef4:	4910      	ldr	r1, [pc, #64]	@ (8001f38 <AT_ParseInfo+0x118>)
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f00b fe42 	bl	800db80 <strtok>
 8001efc:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3368      	adds	r3, #104	@ 0x68
 8001f02:	221f      	movs	r2, #31
 8001f04:	68f9      	ldr	r1, [r7, #12]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f00b fe26 	bl	800db58 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
      break;
 8001f14:	e000      	b.n	8001f18 <AT_ParseInfo+0xf8>

    default: break;
 8001f16:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001f18:	4906      	ldr	r1, [pc, #24]	@ (8001f34 <AT_ParseInfo+0x114>)
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f00b fe30 	bl	800db80 <strtok>
 8001f20:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d18a      	bne.n	8001e3e <AT_ParseInfo+0x1e>
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	080115c4 	.word	0x080115c4
 8001f38:	080115c8 	.word	0x080115c8

08001f3c <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	4959      	ldr	r1, [pc, #356]	@ (80020b4 <AT_ParseConnSettings+0x178>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f00b fe15 	bl	800db80 <strtok>
 8001f56:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001f58:	e0a2      	b.n	80020a0 <AT_ParseConnSettings+0x164>
    switch (num++) {
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	73fa      	strb	r2, [r7, #15]
 8001f60:	2b0b      	cmp	r3, #11
 8001f62:	f200 808c 	bhi.w	800207e <AT_ParseConnSettings+0x142>
 8001f66:	a201      	add	r2, pc, #4	@ (adr r2, 8001f6c <AT_ParseConnSettings+0x30>)
 8001f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6c:	08001f9d 	.word	0x08001f9d
 8001f70:	08001fb3 	.word	0x08001fb3
 8001f74:	08001fcb 	.word	0x08001fcb
 8001f78:	08001fdf 	.word	0x08001fdf
 8001f7c:	08001ff3 	.word	0x08001ff3
 8001f80:	08002007 	.word	0x08002007
 8001f84:	08002017 	.word	0x08002017
 8001f88:	08002027 	.word	0x08002027
 8001f8c:	08002037 	.word	0x08002037
 8001f90:	08002047 	.word	0x08002047
 8001f94:	08002057 	.word	0x08002057
 8001f98:	0800206b 	.word	0x0800206b
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f00b fdd8 	bl	800db58 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8001fb0:	e066      	b.n	8002080 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	3321      	adds	r3, #33	@ 0x21
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f00b fdcc 	bl	800db58 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      break;
 8001fc8:	e05a      	b.n	8002080 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001fca:	2100      	movs	r1, #0
 8001fcc:	68b8      	ldr	r0, [r7, #8]
 8001fce:	f7ff fe75 	bl	8001cbc <ParseNumber>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 8001fdc:	e050      	b.n	8002080 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8001fde:	2100      	movs	r1, #0
 8001fe0:	68b8      	ldr	r0, [r7, #8]
 8001fe2:	f7ff fe6b 	bl	8001cbc <ParseNumber>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 8001ff0:	e046      	b.n	8002080 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	68b8      	ldr	r0, [r7, #8]
 8001ff6:	f7ff fe61 	bl	8001cbc <ParseNumber>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8002004:	e03c      	b.n	8002080 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	3348      	adds	r3, #72	@ 0x48
 800200a:	2204      	movs	r2, #4
 800200c:	4619      	mov	r1, r3
 800200e:	68b8      	ldr	r0, [r7, #8]
 8002010:	f7ff fecf 	bl	8001db2 <ParseIP>
      break;
 8002014:	e034      	b.n	8002080 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	334c      	adds	r3, #76	@ 0x4c
 800201a:	2204      	movs	r2, #4
 800201c:	4619      	mov	r1, r3
 800201e:	68b8      	ldr	r0, [r7, #8]
 8002020:	f7ff fec7 	bl	8001db2 <ParseIP>
      break;
 8002024:	e02c      	b.n	8002080 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	3350      	adds	r3, #80	@ 0x50
 800202a:	2204      	movs	r2, #4
 800202c:	4619      	mov	r1, r3
 800202e:	68b8      	ldr	r0, [r7, #8]
 8002030:	f7ff febf 	bl	8001db2 <ParseIP>
      break;
 8002034:	e024      	b.n	8002080 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	3354      	adds	r3, #84	@ 0x54
 800203a:	2204      	movs	r2, #4
 800203c:	4619      	mov	r1, r3
 800203e:	68b8      	ldr	r0, [r7, #8]
 8002040:	f7ff feb7 	bl	8001db2 <ParseIP>
      break;
 8002044:	e01c      	b.n	8002080 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	3358      	adds	r3, #88	@ 0x58
 800204a:	2204      	movs	r2, #4
 800204c:	4619      	mov	r1, r3
 800204e:	68b8      	ldr	r0, [r7, #8]
 8002050:	f7ff feaf 	bl	8001db2 <ParseIP>
      break;
 8002054:	e014      	b.n	8002080 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8002056:	2100      	movs	r1, #0
 8002058:	68b8      	ldr	r0, [r7, #8]
 800205a:	f7ff fe2f 	bl	8001cbc <ParseNumber>
 800205e:	4603      	mov	r3, r0
 8002060:	b2da      	uxtb	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 8002068:	e00a      	b.n	8002080 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 800206a:	2100      	movs	r1, #0
 800206c:	68b8      	ldr	r0, [r7, #8]
 800206e:	f7ff fe25 	bl	8001cbc <ParseNumber>
 8002072:	4603      	mov	r3, r0
 8002074:	b2da      	uxtb	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 800207c:	e000      	b.n	8002080 <AT_ParseConnSettings+0x144>

    default:
      break;
 800207e:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8002080:	490c      	ldr	r1, [pc, #48]	@ (80020b4 <AT_ParseConnSettings+0x178>)
 8002082:	2000      	movs	r0, #0
 8002084:	f00b fd7c 	bl	800db80 <strtok>
 8002088:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <AT_ParseConnSettings+0x164>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3b01      	subs	r3, #1
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b2c      	cmp	r3, #44	@ 0x2c
 8002098:	d102      	bne.n	80020a0 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	3301      	adds	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f47f af59 	bne.w	8001f5a <AT_ParseConnSettings+0x1e>
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	080115c4 	.word	0x080115c4

080020b8 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d056      	beq.n	8002184 <AT_ExecuteCommand+0xcc>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d051      	beq.n	8002184 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 80020e6:	68b8      	ldr	r0, [r7, #8]
 80020e8:	f7fe f8c2 	bl	8000270 <strlen>
 80020ec:	4603      	mov	r3, r0
 80020ee:	b299      	uxth	r1, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 80020f6:	461a      	mov	r2, r3
 80020f8:	68b8      	ldr	r0, [r7, #8]
 80020fa:	47a0      	blx	r4
 80020fc:	4603      	mov	r3, r0
 80020fe:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	dd3e      	ble.n	8002184 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8002112:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4798      	blx	r3
 800211a:	4603      	mov	r3, r0
 800211c:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800211e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002122:	2b00      	cmp	r3, #0
 8002124:	dd27      	ble.n	8002176 <AT_ExecuteCommand+0xbe>
 8002126:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800212a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800212e:	dc22      	bgt.n	8002176 <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8002130:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002134:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002138:	d105      	bne.n	8002146 <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 800213a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29b      	uxth	r3, r3
 8002144:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8002146:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8002152:	490f      	ldr	r1, [pc, #60]	@ (8002190 <AT_ExecuteCommand+0xd8>)
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f00b fd6f 	bl	800dc38 <strstr>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e010      	b.n	8002186 <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8002164:	490b      	ldr	r1, [pc, #44]	@ (8002194 <AT_ExecuteCommand+0xdc>)
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f00b fd66 	bl	800dc38 <strstr>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8002172:	2305      	movs	r3, #5
 8002174:	e007      	b.n	8002186 <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8002176:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800217a:	f113 0f04 	cmn.w	r3, #4
 800217e:	d101      	bne.n	8002184 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8002180:	2306      	movs	r3, #6
 8002182:	e000      	b.n	8002186 <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8002184:	2304      	movs	r3, #4
}
 8002186:	4618      	mov	r0, r3
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}
 800218e:	bf00      	nop
 8002190:	080115dc 	.word	0x080115dc
 8002194:	080115e8 	.word	0x080115e8

08002198 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 80021b2:	68b8      	ldr	r0, [r7, #8]
 80021b4:	f7fe f85c 	bl	8000270 <strlen>
 80021b8:	4603      	mov	r3, r0
 80021ba:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80021bc:	8a7b      	ldrh	r3, [r7, #18]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <AT_RequestSendData+0x32>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e05d      	b.n	8002286 <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d057      	beq.n	8002284 <AT_RequestSendData+0xec>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d052      	beq.n	8002284 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 80021ea:	8a79      	ldrh	r1, [r7, #18]
 80021ec:	68b8      	ldr	r0, [r7, #8]
 80021ee:	4798      	blx	r3
 80021f0:	4603      	mov	r3, r0
 80021f2:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 80021f4:	8a3a      	ldrh	r2, [r7, #16]
 80021f6:	8a7b      	ldrh	r3, [r7, #18]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d143      	bne.n	8002284 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8002208:	8879      	ldrh	r1, [r7, #2]
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
 800220e:	4603      	mov	r3, r0
 8002210:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8002212:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	429a      	cmp	r2, r3
 800221a:	d131      	bne.n	8002280 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8002228:	2100      	movs	r1, #0
 800222a:	6a38      	ldr	r0, [r7, #32]
 800222c:	4798      	blx	r3
 800222e:	4603      	mov	r3, r0
 8002230:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8002232:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	dd19      	ble.n	800226e <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 800223a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800223e:	6a3a      	ldr	r2, [r7, #32]
 8002240:	4413      	add	r3, r2
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8002246:	4912      	ldr	r1, [pc, #72]	@ (8002290 <AT_RequestSendData+0xf8>)
 8002248:	6a38      	ldr	r0, [r7, #32]
 800224a:	f00b fcf5 	bl	800dc38 <strstr>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	e016      	b.n	8002286 <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8002258:	490e      	ldr	r1, [pc, #56]	@ (8002294 <AT_RequestSendData+0xfc>)
 800225a:	6a38      	ldr	r0, [r7, #32]
 800225c:	f00b fcec 	bl	800dc38 <strstr>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8002266:	2305      	movs	r3, #5
 8002268:	e00d      	b.n	8002286 <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800226a:	2302      	movs	r3, #2
 800226c:	e00b      	b.n	8002286 <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 800226e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002272:	f113 0f04 	cmn.w	r3, #4
 8002276:	d101      	bne.n	800227c <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8002278:	2306      	movs	r3, #6
 800227a:	e004      	b.n	8002286 <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 800227c:	2302      	movs	r3, #2
 800227e:	e002      	b.n	8002286 <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8002280:	2302      	movs	r3, #2
 8002282:	e000      	b.n	8002286 <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8002284:	2304      	movs	r3, #4
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	080115dc 	.word	0x080115dc
 8002294:	080115e8 	.word	0x080115e8

08002298 <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80022ac:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8087 	beq.w	80023c8 <AT_RequestReceiveData+0x130>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8081 	beq.w	80023c8 <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 80022cc:	68b8      	ldr	r0, [r7, #8]
 80022ce:	f7fd ffcf 	bl	8000270 <strlen>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b299      	uxth	r1, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 80022dc:	461a      	mov	r2, r3
 80022de:	68b8      	ldr	r0, [r7, #8]
 80022e0:	47a0      	blx	r4
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	dd6f      	ble.n	80023c8 <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 80022f4:	2100      	movs	r1, #0
 80022f6:	6938      	ldr	r0, [r7, #16]
 80022f8:	4798      	blx	r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b0d      	cmp	r3, #13
 8002304:	d104      	bne.n	8002310 <AT_RequestReceiveData+0x78>
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	3301      	adds	r3, #1
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b0a      	cmp	r3, #10
 800230e:	d001      	beq.n	8002314 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 8002310:	2304      	movs	r3, #4
 8002312:	e05a      	b.n	80023ca <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3b02      	subs	r3, #2
 8002318:	617b      	str	r3, [r7, #20]
    p += 2;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	3302      	adds	r3, #2
 800231e:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b07      	cmp	r3, #7
 8002324:	d94a      	bls.n	80023bc <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 8002326:	e002      	b.n	800232e <AT_RequestReceiveData+0x96>
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3b01      	subs	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <AT_RequestReceiveData+0xaa>
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3b01      	subs	r3, #1
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b15      	cmp	r3, #21
 8002340:	d0f2      	beq.n	8002328 <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3b08      	subs	r3, #8
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	491f      	ldr	r1, [pc, #124]	@ (80023d4 <AT_RequestReceiveData+0x13c>)
 8002356:	4618      	mov	r0, r3
 8002358:	f00b fc6e 	bl	800dc38 <strstr>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b08      	subs	r3, #8
 8002368:	b29a      	uxth	r2, r3
 800236a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236c:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 800236e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	429a      	cmp	r2, r3
 8002376:	d202      	bcs.n	800237e <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 8002378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 800237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	6939      	ldr	r1, [r7, #16]
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f00b fce3 	bl	800dd52 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	e01c      	b.n	80023ca <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3b04      	subs	r3, #4
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	2204      	movs	r2, #4
 800239a:	490f      	ldr	r1, [pc, #60]	@ (80023d8 <AT_RequestReceiveData+0x140>)
 800239c:	4618      	mov	r0, r3
 800239e:	f00b fbb1 	bl	800db04 <memcmp>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d104      	bne.n	80023b2 <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 80023a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023aa:	2200      	movs	r2, #0
 80023ac:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80023ae:	2305      	movs	r3, #5
 80023b0:	e00b      	b.n	80023ca <AT_RequestReceiveData+0x132>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 80023b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b4:	2200      	movs	r2, #0
 80023b6:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80023b8:	2305      	movs	r3, #5
 80023ba:	e006      	b.n	80023ca <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f113 0f04 	cmn.w	r3, #4
 80023c2:	d101      	bne.n	80023c8 <AT_RequestReceiveData+0x130>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80023c4:	2306      	movs	r3, #6
 80023c6:	e000      	b.n	80023ca <AT_RequestReceiveData+0x132>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80023c8:	2304      	movs	r3, #4
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd90      	pop	{r4, r7, pc}
 80023d2:	bf00      	nop
 80023d4:	080115dc 	.word	0x080115dc
 80023d8:	080115f0 	.word	0x080115f0

080023dc <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80023e4:	2302      	movs	r3, #2
 80023e6:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f247 5230 	movw	r2, #30000	@ 0x7530
 80023ee:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01b      	beq.n	8002434 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002402:	2000      	movs	r0, #0
 8002404:	4798      	blx	r3
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d113      	bne.n	8002434 <ES_WIFI_Init+0x58>
  {

    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002412:	461a      	mov	r2, r3
 8002414:	490a      	ldr	r1, [pc, #40]	@ (8002440 <ES_WIFI_Init+0x64>)
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff fe4e 	bl	80020b8 <AT_ExecuteCommand>
 800241c:	4603      	mov	r3, r0
 800241e:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800242c:	4619      	mov	r1, r3
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff fcf6 	bl	8001e20 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8002434:	7bfb      	ldrb	r3, [r7, #15]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	080115f8 	.word	0x080115f8

08002444 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00b      	beq.n	8002470 <ES_WIFI_RegisterBusIO+0x2c>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d008      	beq.n	8002470 <ES_WIFI_RegisterBusIO+0x2c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <ES_WIFI_RegisterBusIO+0x2c>
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <ES_WIFI_RegisterBusIO+0x2c>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8002470:	2302      	movs	r3, #2
 8002472:	e014      	b.n	800249e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	4932      	ldr	r1, [pc, #200]	@ (800258c <ES_WIFI_Connect+0xe0>)
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00b fa25 	bl	800d914 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80024d6:	461a      	mov	r2, r3
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f7ff fded 	bl	80020b8 <AT_ExecuteCommand>
 80024de:	4603      	mov	r3, r0
 80024e0:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d14b      	bne.n	8002580 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4927      	ldr	r1, [pc, #156]	@ (8002590 <ES_WIFI_Connect+0xe4>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f00b fa0e 	bl	800d914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002504:	461a      	mov	r2, r3
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f7ff fdd6 	bl	80020b8 <AT_ExecuteCommand>
 800250c:	4603      	mov	r3, r0
 800250e:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d134      	bne.n	8002580 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	491b      	ldr	r1, [pc, #108]	@ (8002594 <ES_WIFI_Connect+0xe8>)
 8002528:	4618      	mov	r0, r3
 800252a:	f00b f9f3 	bl	800d914 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800253a:	461a      	mov	r2, r3
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff fdbb 	bl	80020b8 <AT_ExecuteCommand>
 8002542:	4603      	mov	r3, r0
 8002544:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d119      	bne.n	8002580 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002552:	4911      	ldr	r1, [pc, #68]	@ (8002598 <ES_WIFI_Connect+0xec>)
 8002554:	4618      	mov	r0, r3
 8002556:	f00b f9dd 	bl	800d914 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002566:	461a      	mov	r2, r3
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7ff fda5 	bl	80020b8 <AT_ExecuteCommand>
 800256e:	4603      	mov	r3, r0
 8002570:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8002572:	7dfb      	ldrb	r3, [r7, #23]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d103      	bne.n	8002580 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8002580:	7dfb      	ldrb	r3, [r7, #23]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	08011610 	.word	0x08011610
 8002590:	08011618 	.word	0x08011618
 8002594:	08011620 	.word	0x08011620
 8002598:	08011628 	.word	0x08011628

0800259c <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80025aa:	4913      	ldr	r1, [pc, #76]	@ (80025f8 <ES_WIFI_IsConnected+0x5c>)
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00b f9b1 	bl	800d914 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80025be:	461a      	mov	r2, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff fd79 	bl	80020b8 <AT_ExecuteCommand>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10b      	bne.n	80025e8 <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 80025d6:	2b31      	cmp	r3, #49	@ 0x31
 80025d8:	bf0c      	ite	eq
 80025da:	2301      	moveq	r3, #1
 80025dc:	2300      	movne	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	0801162c 	.word	0x0801162c

080025fc <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800260a:	4910      	ldr	r1, [pc, #64]	@ (800264c <ES_WIFI_GetNetworkSettings+0x50>)
 800260c:	4618      	mov	r0, r3
 800260e:	f00b f981 	bl	800d914 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800261e:	461a      	mov	r2, r3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff fd49 	bl	80020b8 <AT_ExecuteCommand>
 8002626:	4603      	mov	r3, r0
 8002628:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d108      	bne.n	8002642 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	338d      	adds	r3, #141	@ 0x8d
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f7ff fc7d 	bl	8001f3c <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	08011634 	.word	0x08011634

08002650 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002664:	4913      	ldr	r1, [pc, #76]	@ (80026b4 <ES_WIFI_GetMACAddress+0x64>)
 8002666:	4618      	mov	r0, r3
 8002668:	f00b f954 	bl	800d914 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002678:	461a      	mov	r2, r3
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f7ff fd1c 	bl	80020b8 <AT_ExecuteCommand>
 8002680:	4603      	mov	r3, r0
 8002682:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10e      	bne.n	80026a8 <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002690:	3302      	adds	r3, #2
 8002692:	4909      	ldr	r1, [pc, #36]	@ (80026b8 <ES_WIFI_GetMACAddress+0x68>)
 8002694:	4618      	mov	r0, r3
 8002696:	f00b fa73 	bl	800db80 <strtok>
 800269a:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	461a      	mov	r2, r3
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	6938      	ldr	r0, [r7, #16]
 80026a4:	f7ff fb4e 	bl	8001d44 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	08011684 	.word	0x08011684
 80026b8:	08011688 	.word	0x08011688

080026bc <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b087      	sub	sp, #28
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <ES_WIFI_StartClientConnection+0x1e>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d105      	bne.n	80026e6 <ES_WIFI_StartClientConnection+0x2a>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	885b      	ldrh	r3, [r3, #2]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <ES_WIFI_StartClientConnection+0x2a>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e0c1      	b.n	800286a <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	785b      	ldrb	r3, [r3, #1]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4960      	ldr	r1, [pc, #384]	@ (8002874 <ES_WIFI_StartClientConnection+0x1b8>)
 80026f4:	f00b f90e 	bl	800d914 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002704:	461a      	mov	r2, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff fcd6 	bl	80020b8 <AT_ExecuteCommand>
 800270c:	4603      	mov	r3, r0
 800270e:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d114      	bne.n	8002740 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4955      	ldr	r1, [pc, #340]	@ (8002878 <ES_WIFI_StartClientConnection+0x1bc>)
 8002724:	f00b f8f6 	bl	800d914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002734:	461a      	mov	r2, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff fcbe 	bl	80020b8 <AT_ExecuteCommand>
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d114      	bne.n	8002770 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	889b      	ldrh	r3, [r3, #4]
 8002750:	461a      	mov	r2, r3
 8002752:	494a      	ldr	r1, [pc, #296]	@ (800287c <ES_WIFI_StartClientConnection+0x1c0>)
 8002754:	f00b f8de 	bl	800d914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002764:	461a      	mov	r2, r3
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff fca6 	bl	80020b8 <AT_ExecuteCommand>
 800276c:	4603      	mov	r3, r0
 800276e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d11c      	bne.n	80027b0 <ES_WIFI_StartClientConnection+0xf4>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <ES_WIFI_StartClientConnection+0xca>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d114      	bne.n	80027b0 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	885b      	ldrh	r3, [r3, #2]
 8002790:	461a      	mov	r2, r3
 8002792:	493b      	ldr	r1, [pc, #236]	@ (8002880 <ES_WIFI_StartClientConnection+0x1c4>)
 8002794:	f00b f8be 	bl	800d914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80027a4:	461a      	mov	r2, r3
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff fc86 	bl	80020b8 <AT_ExecuteCommand>
 80027ac:	4603      	mov	r3, r0
 80027ae:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d128      	bne.n	8002808 <ES_WIFI_StartClientConnection+0x14c>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <ES_WIFI_StartClientConnection+0x10a>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d120      	bne.n	8002808 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	799b      	ldrb	r3, [r3, #6]
 80027d0:	4619      	mov	r1, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	79db      	ldrb	r3, [r3, #7]
 80027d6:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80027dc:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	9200      	str	r2, [sp, #0]
 80027e6:	4623      	mov	r3, r4
 80027e8:	460a      	mov	r2, r1
 80027ea:	4926      	ldr	r1, [pc, #152]	@ (8002884 <ES_WIFI_StartClientConnection+0x1c8>)
 80027ec:	f00b f892 	bl	800d914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80027fc:	461a      	mov	r2, r3
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff fc5a 	bl	80020b8 <AT_ExecuteCommand>
 8002804:	4603      	mov	r3, r0
 8002806:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d116      	bne.n	800283c <ES_WIFI_StartClientConnection+0x180>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d112      	bne.n	800283c <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800281c:	491a      	ldr	r1, [pc, #104]	@ (8002888 <ES_WIFI_StartClientConnection+0x1cc>)
 800281e:	4618      	mov	r0, r3
 8002820:	f00b f878 	bl	800d914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002830:	461a      	mov	r2, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff fc40 	bl	80020b8 <AT_ExecuteCommand>
 8002838:	4603      	mov	r3, r0
 800283a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d112      	bne.n	8002868 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002848:	4910      	ldr	r1, [pc, #64]	@ (800288c <ES_WIFI_StartClientConnection+0x1d0>)
 800284a:	4618      	mov	r0, r3
 800284c:	f00b f862 	bl	800d914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800285c:	461a      	mov	r2, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff fc2a 	bl	80020b8 <AT_ExecuteCommand>
 8002864:	4603      	mov	r3, r0
 8002866:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bd90      	pop	{r4, r7, pc}
 8002872:	bf00      	nop
 8002874:	080116ec 	.word	0x080116ec
 8002878:	080116f4 	.word	0x080116f4
 800287c:	080116fc 	.word	0x080116fc
 8002880:	08011704 	.word	0x08011704
 8002884:	0801170c 	.word	0x0801170c
 8002888:	0801171c 	.word	0x0801171c
 800288c:	08011724 	.word	0x08011724

08002890 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	461a      	mov	r2, r3
 800289c:	460b      	mov	r3, r1
 800289e:	72fb      	strb	r3, [r7, #11]
 80028a0:	4613      	mov	r3, r2
 80028a2:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80028a4:	2302      	movs	r3, #2
 80028a6:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80028ae:	2301      	movs	r3, #1
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	e001      	b.n	80028b8 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 80028b8:	893b      	ldrh	r3, [r7, #8]
 80028ba:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80028be:	d302      	bcc.n	80028c6 <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 80028c0:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80028c4:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	893a      	ldrh	r2, [r7, #8]
 80028ca:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80028d2:	7afa      	ldrb	r2, [r7, #11]
 80028d4:	4942      	ldr	r1, [pc, #264]	@ (80029e0 <ES_WIFI_SendData+0x150>)
 80028d6:	4618      	mov	r0, r3
 80028d8:	f00b f81c 	bl	800d914 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80028e8:	461a      	mov	r2, r3
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff fbe4 	bl	80020b8 <AT_ExecuteCommand>
 80028f0:	4603      	mov	r3, r0
 80028f2:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d15e      	bne.n	80029b8 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4938      	ldr	r1, [pc, #224]	@ (80029e4 <ES_WIFI_SendData+0x154>)
 8002904:	4618      	mov	r0, r3
 8002906:	f00b f805 	bl	800d914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002916:	461a      	mov	r2, r3
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7ff fbcd 	bl	80020b8 <AT_ExecuteCommand>
 800291e:	4603      	mov	r3, r0
 8002920:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002922:	7cfb      	ldrb	r3, [r7, #19]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d13d      	bne.n	80029a4 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800292e:	893a      	ldrh	r2, [r7, #8]
 8002930:	492d      	ldr	r1, [pc, #180]	@ (80029e8 <ES_WIFI_SendData+0x158>)
 8002932:	4618      	mov	r0, r3
 8002934:	f00a ffee 	bl	800d914 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002944:	893a      	ldrh	r2, [r7, #8]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f7ff fc23 	bl	8002198 <AT_RequestSendData>
 8002952:	4603      	mov	r3, r0
 8002954:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d119      	bne.n	8002990 <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002962:	4922      	ldr	r1, [pc, #136]	@ (80029ec <ES_WIFI_SendData+0x15c>)
 8002964:	4618      	mov	r0, r3
 8002966:	f00b f967 	bl	800dc38 <strstr>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d02c      	beq.n	80029ca <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8002970:	f640 1202 	movw	r2, #2306	@ 0x902
 8002974:	491e      	ldr	r1, [pc, #120]	@ (80029f0 <ES_WIFI_SendData+0x160>)
 8002976:	481f      	ldr	r0, [pc, #124]	@ (80029f4 <ES_WIFI_SendData+0x164>)
 8002978:	f00a ff5c 	bl	800d834 <iprintf>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002982:	4619      	mov	r1, r3
 8002984:	481c      	ldr	r0, [pc, #112]	@ (80029f8 <ES_WIFI_SendData+0x168>)
 8002986:	f00a ff55 	bl	800d834 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800298a:	2302      	movs	r3, #2
 800298c:	74fb      	strb	r3, [r7, #19]
 800298e:	e01c      	b.n	80029ca <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8002990:	f640 1208 	movw	r2, #2312	@ 0x908
 8002994:	4916      	ldr	r1, [pc, #88]	@ (80029f0 <ES_WIFI_SendData+0x160>)
 8002996:	4817      	ldr	r0, [pc, #92]	@ (80029f4 <ES_WIFI_SendData+0x164>)
 8002998:	f00a ff4c 	bl	800d834 <iprintf>
 800299c:	4817      	ldr	r0, [pc, #92]	@ (80029fc <ES_WIFI_SendData+0x16c>)
 800299e:	f00a ffb1 	bl	800d904 <puts>
 80029a2:	e012      	b.n	80029ca <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 80029a4:	f640 120d 	movw	r2, #2317	@ 0x90d
 80029a8:	4911      	ldr	r1, [pc, #68]	@ (80029f0 <ES_WIFI_SendData+0x160>)
 80029aa:	4812      	ldr	r0, [pc, #72]	@ (80029f4 <ES_WIFI_SendData+0x164>)
 80029ac:	f00a ff42 	bl	800d834 <iprintf>
 80029b0:	4813      	ldr	r0, [pc, #76]	@ (8002a00 <ES_WIFI_SendData+0x170>)
 80029b2:	f00a ffa7 	bl	800d904 <puts>
 80029b6:	e008      	b.n	80029ca <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 80029b8:	f640 1212 	movw	r2, #2322	@ 0x912
 80029bc:	490c      	ldr	r1, [pc, #48]	@ (80029f0 <ES_WIFI_SendData+0x160>)
 80029be:	480d      	ldr	r0, [pc, #52]	@ (80029f4 <ES_WIFI_SendData+0x164>)
 80029c0:	f00a ff38 	bl	800d834 <iprintf>
 80029c4:	480f      	ldr	r0, [pc, #60]	@ (8002a04 <ES_WIFI_SendData+0x174>)
 80029c6:	f00a ff9d 	bl	800d904 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d102      	bne.n	80029d6 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	2200      	movs	r2, #0
 80029d4:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	080116ec 	.word	0x080116ec
 80029e4:	080118a0 	.word	0x080118a0
 80029e8:	080118a8 	.word	0x080118a8
 80029ec:	080118b4 	.word	0x080118b4
 80029f0:	0801177c 	.word	0x0801177c
 80029f4:	08011794 	.word	0x08011794
 80029f8:	080118bc 	.word	0x080118bc
 80029fc:	080118d8 	.word	0x080118d8
 8002a00:	080118f4 	.word	0x080118f4
 8002a04:	08011908 	.word	0x08011908

08002a08 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	461a      	mov	r2, r3
 8002a14:	460b      	mov	r3, r1
 8002a16:	72fb      	strb	r3, [r7, #11]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8002a26:	2301      	movs	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	e001      	b.n	8002a30 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8002a30:	893b      	ldrh	r3, [r7, #8]
 8002a32:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8002a36:	f200 808b 	bhi.w	8002b50 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a40:	7afa      	ldrb	r2, [r7, #11]
 8002a42:	4946      	ldr	r1, [pc, #280]	@ (8002b5c <ES_WIFI_ReceiveData+0x154>)
 8002a44:	4618      	mov	r0, r3
 8002a46:	f00a ff65 	bl	800d914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a56:	461a      	mov	r2, r3
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7ff fb2d 	bl	80020b8 <AT_ExecuteCommand>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d165      	bne.n	8002b34 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a6e:	893a      	ldrh	r2, [r7, #8]
 8002a70:	493b      	ldr	r1, [pc, #236]	@ (8002b60 <ES_WIFI_ReceiveData+0x158>)
 8002a72:	4618      	mov	r0, r3
 8002a74:	f00a ff4e 	bl	800d914 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a84:	461a      	mov	r2, r3
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7ff fb16 	bl	80020b8 <AT_ExecuteCommand>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d141      	bne.n	8002b1a <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4931      	ldr	r1, [pc, #196]	@ (8002b64 <ES_WIFI_ReceiveData+0x15c>)
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f00a ff37 	bl	800d914 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f7ff faff 	bl	80020b8 <AT_ExecuteCommand>
 8002aba:	4603      	mov	r3, r0
 8002abc:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d120      	bne.n	8002b06 <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002aca:	4927      	ldr	r1, [pc, #156]	@ (8002b68 <ES_WIFI_ReceiveData+0x160>)
 8002acc:	4618      	mov	r0, r3
 8002ace:	f00a ff21 	bl	800d914 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002ad8:	893a      	ldrh	r2, [r7, #8]
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7ff fbd8 	bl	8002298 <AT_RequestReceiveData>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d02e      	beq.n	8002b50 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 8002af2:	f640 12aa 	movw	r2, #2474	@ 0x9aa
 8002af6:	491d      	ldr	r1, [pc, #116]	@ (8002b6c <ES_WIFI_ReceiveData+0x164>)
 8002af8:	481d      	ldr	r0, [pc, #116]	@ (8002b70 <ES_WIFI_ReceiveData+0x168>)
 8002afa:	f00a fe9b 	bl	800d834 <iprintf>
 8002afe:	481d      	ldr	r0, [pc, #116]	@ (8002b74 <ES_WIFI_ReceiveData+0x16c>)
 8002b00:	f00a ff00 	bl	800d904 <puts>
 8002b04:	e024      	b.n	8002b50 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 8002b06:	f640 12af 	movw	r2, #2479	@ 0x9af
 8002b0a:	4918      	ldr	r1, [pc, #96]	@ (8002b6c <ES_WIFI_ReceiveData+0x164>)
 8002b0c:	4818      	ldr	r0, [pc, #96]	@ (8002b70 <ES_WIFI_ReceiveData+0x168>)
 8002b0e:	f00a fe91 	bl	800d834 <iprintf>
 8002b12:	4819      	ldr	r0, [pc, #100]	@ (8002b78 <ES_WIFI_ReceiveData+0x170>)
 8002b14:	f00a fef6 	bl	800d904 <puts>
 8002b18:	e01a      	b.n	8002b50 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
 8002b1a:	f640 12b4 	movw	r2, #2484	@ 0x9b4
 8002b1e:	4913      	ldr	r1, [pc, #76]	@ (8002b6c <ES_WIFI_ReceiveData+0x164>)
 8002b20:	4813      	ldr	r0, [pc, #76]	@ (8002b70 <ES_WIFI_ReceiveData+0x168>)
 8002b22:	f00a fe87 	bl	800d834 <iprintf>
 8002b26:	4815      	ldr	r0, [pc, #84]	@ (8002b7c <ES_WIFI_ReceiveData+0x174>)
 8002b28:	f00a feec 	bl	800d904 <puts>
        *Receivedlen = 0;
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	801a      	strh	r2, [r3, #0]
 8002b32:	e00d      	b.n	8002b50 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
 8002b34:	f640 12ba 	movw	r2, #2490	@ 0x9ba
 8002b38:	490c      	ldr	r1, [pc, #48]	@ (8002b6c <ES_WIFI_ReceiveData+0x164>)
 8002b3a:	480d      	ldr	r0, [pc, #52]	@ (8002b70 <ES_WIFI_ReceiveData+0x168>)
 8002b3c:	f00a fe7a 	bl	800d834 <iprintf>
 8002b40:	480f      	ldr	r0, [pc, #60]	@ (8002b80 <ES_WIFI_ReceiveData+0x178>)
 8002b42:	f00a fedf 	bl	800d904 <puts>
      issue15++;
 8002b46:	4b0f      	ldr	r3, [pc, #60]	@ (8002b84 <ES_WIFI_ReceiveData+0x17c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b84 <ES_WIFI_ReceiveData+0x17c>)
 8002b4e:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	080116ec 	.word	0x080116ec
 8002b60:	0801192c 	.word	0x0801192c
 8002b64:	08011934 	.word	0x08011934
 8002b68:	0801193c 	.word	0x0801193c
 8002b6c:	0801177c 	.word	0x0801177c
 8002b70:	08011794 	.word	0x08011794
 8002b74:	08011940 	.word	0x08011940
 8002b78:	08011960 	.word	0x08011960
 8002b7c:	08011978 	.word	0x08011978
 8002b80:	08011998 	.word	0x08011998
 8002b84:	20000d30 	.word	0x20000d30

08002b88 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08c      	sub	sp, #48	@ 0x30
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8002b90:	4b57      	ldr	r3, [pc, #348]	@ (8002cf0 <SPI_WIFI_MspInit+0x168>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	4a56      	ldr	r2, [pc, #344]	@ (8002cf0 <SPI_WIFI_MspInit+0x168>)
 8002b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b9c:	4b54      	ldr	r3, [pc, #336]	@ (8002cf0 <SPI_WIFI_MspInit+0x168>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba8:	4b51      	ldr	r3, [pc, #324]	@ (8002cf0 <SPI_WIFI_MspInit+0x168>)
 8002baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bac:	4a50      	ldr	r2, [pc, #320]	@ (8002cf0 <SPI_WIFI_MspInit+0x168>)
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bb4:	4b4e      	ldr	r3, [pc, #312]	@ (8002cf0 <SPI_WIFI_MspInit+0x168>)
 8002bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf0 <SPI_WIFI_MspInit+0x168>)
 8002bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc4:	4a4a      	ldr	r2, [pc, #296]	@ (8002cf0 <SPI_WIFI_MspInit+0x168>)
 8002bc6:	f043 0304 	orr.w	r3, r3, #4
 8002bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bcc:	4b48      	ldr	r3, [pc, #288]	@ (8002cf0 <SPI_WIFI_MspInit+0x168>)
 8002bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bd8:	4b45      	ldr	r3, [pc, #276]	@ (8002cf0 <SPI_WIFI_MspInit+0x168>)
 8002bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bdc:	4a44      	ldr	r2, [pc, #272]	@ (8002cf0 <SPI_WIFI_MspInit+0x168>)
 8002bde:	f043 0310 	orr.w	r3, r3, #16
 8002be2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002be4:	4b42      	ldr	r3, [pc, #264]	@ (8002cf0 <SPI_WIFI_MspInit+0x168>)
 8002be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bf6:	483f      	ldr	r0, [pc, #252]	@ (8002cf4 <SPI_WIFI_MspInit+0x16c>)
 8002bf8:	f001 fbd2 	bl	80043a0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002bfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c00:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c02:	2301      	movs	r3, #1
 8002c04:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002c0e:	f107 031c 	add.w	r3, r7, #28
 8002c12:	4619      	mov	r1, r3
 8002c14:	4837      	ldr	r0, [pc, #220]	@ (8002cf4 <SPI_WIFI_MspInit+0x16c>)
 8002c16:	f001 f90d 	bl	8003e34 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002c1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c22:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002c2c:	f107 031c 	add.w	r3, r7, #28
 8002c30:	4619      	mov	r1, r3
 8002c32:	4831      	ldr	r0, [pc, #196]	@ (8002cf8 <SPI_WIFI_MspInit+0x170>)
 8002c34:	f001 f8fe 	bl	8003e34 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8002c38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c3c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002c4e:	f107 031c 	add.w	r3, r7, #28
 8002c52:	4619      	mov	r1, r3
 8002c54:	4828      	ldr	r0, [pc, #160]	@ (8002cf8 <SPI_WIFI_MspInit+0x170>)
 8002c56:	f001 f8ed 	bl	8003e34 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4826      	ldr	r0, [pc, #152]	@ (8002cf8 <SPI_WIFI_MspInit+0x170>)
 8002c60:	f001 fb9e 	bl	80043a0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8002c64:	2301      	movs	r3, #1
 8002c66:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002c70:	2301      	movs	r3, #1
 8002c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8002c74:	f107 031c 	add.w	r3, r7, #28
 8002c78:	4619      	mov	r1, r3
 8002c7a:	481f      	ldr	r0, [pc, #124]	@ (8002cf8 <SPI_WIFI_MspInit+0x170>)
 8002c7c:	f001 f8da 	bl	8003e34 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8002c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c84:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002c86:	2302      	movs	r3, #2
 8002c88:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002c92:	2306      	movs	r3, #6
 8002c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8002c96:	f107 031c 	add.w	r3, r7, #28
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4817      	ldr	r0, [pc, #92]	@ (8002cfc <SPI_WIFI_MspInit+0x174>)
 8002c9e:	f001 f8c9 	bl	8003e34 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ca6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002cb4:	2306      	movs	r3, #6
 8002cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	480f      	ldr	r0, [pc, #60]	@ (8002cfc <SPI_WIFI_MspInit+0x174>)
 8002cc0:	f001 f8b8 	bl	8003e34 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002cc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002cc8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8002cda:	f107 031c 	add.w	r3, r7, #28
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4806      	ldr	r0, [pc, #24]	@ (8002cfc <SPI_WIFI_MspInit+0x174>)
 8002ce2:	f001 f8a7 	bl	8003e34 <HAL_GPIO_Init>
}
 8002ce6:	bf00      	nop
 8002ce8:	3730      	adds	r7, #48	@ 0x30
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	48000400 	.word	0x48000400
 8002cf8:	48001000 	.word	0x48001000
 8002cfc:	48000800 	.word	0x48000800

08002d00 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d145      	bne.n	8002da0 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8002d14:	4b27      	ldr	r3, [pc, #156]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d16:	4a28      	ldr	r2, [pc, #160]	@ (8002db8 <SPI_WIFI_Init+0xb8>)
 8002d18:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8002d1a:	4826      	ldr	r0, [pc, #152]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d1c:	f7ff ff34 	bl	8002b88 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8002d20:	4b24      	ldr	r3, [pc, #144]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d22:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d26:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8002d28:	4b22      	ldr	r3, [pc, #136]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002d2e:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d30:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002d34:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002d36:	4b1f      	ldr	r3, [pc, #124]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8002d42:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d48:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8002d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002d50:	4b18      	ldr	r3, [pc, #96]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002d56:	4b17      	ldr	r3, [pc, #92]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002d5c:	4b15      	ldr	r3, [pc, #84]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 8002d62:	4b14      	ldr	r3, [pc, #80]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8002d68:	4812      	ldr	r0, [pc, #72]	@ (8002db4 <SPI_WIFI_Init+0xb4>)
 8002d6a:	f003 fc8f 	bl	800668c <HAL_SPI_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8002d74:	f04f 33ff 	mov.w	r3, #4294967295
 8002d78:	e018      	b.n	8002dac <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2007      	movs	r0, #7
 8002d80:	f000 ffe1 	bl	8003d46 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8002d84:	2007      	movs	r0, #7
 8002d86:	f000 fffa 	bl	8003d7e <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	2033      	movs	r0, #51	@ 0x33
 8002d90:	f000 ffd9 	bl	8003d46 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8002d94:	2033      	movs	r0, #51	@ 0x33
 8002d96:	f000 fff2 	bl	8003d7e <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8002d9a:	200a      	movs	r0, #10
 8002d9c:	f000 fa08 	bl	80031b0 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8002da0:	f000 f80c 	bl	8002dbc <SPI_WIFI_ResetModule>
 8002da4:	4603      	mov	r3, r0
 8002da6:	73fb      	strb	r3, [r7, #15]

  return rc;
 8002da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000d34 	.word	0x20000d34
 8002db8:	40003c00 	.word	0x40003c00

08002dbc <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8002dc2:	f000 feb5 	bl	8003b30 <HAL_GetTick>
 8002dc6:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dd2:	4835      	ldr	r0, [pc, #212]	@ (8002ea8 <SPI_WIFI_ResetModule+0xec>)
 8002dd4:	f001 fae4 	bl	80043a0 <HAL_GPIO_WritePin>
 8002dd8:	200a      	movs	r0, #10
 8002dda:	f000 feb5 	bl	8003b48 <HAL_Delay>
 8002dde:	2201      	movs	r2, #1
 8002de0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002de4:	4830      	ldr	r0, [pc, #192]	@ (8002ea8 <SPI_WIFI_ResetModule+0xec>)
 8002de6:	f001 fadb 	bl	80043a0 <HAL_GPIO_WritePin>
 8002dea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002dee:	f000 feab 	bl	8003b48 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8002df2:	2200      	movs	r2, #0
 8002df4:	2101      	movs	r1, #1
 8002df6:	482c      	ldr	r0, [pc, #176]	@ (8002ea8 <SPI_WIFI_ResetModule+0xec>)
 8002df8:	f001 fad2 	bl	80043a0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002dfc:	200f      	movs	r0, #15
 8002dfe:	f000 f9d7 	bl	80031b0 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8002e02:	e02b      	b.n	8002e5c <SPI_WIFI_ResetModule+0xa0>
  {
    if (count > 4)
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d907      	bls.n	8002e1a <SPI_WIFI_ResetModule+0x5e>
    {
      WIFI_DISABLE_NSS();
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4826      	ldr	r0, [pc, #152]	@ (8002ea8 <SPI_WIFI_ResetModule+0xec>)
 8002e10:	f001 fac6 	bl	80043a0 <HAL_GPIO_WritePin>
      return -1;
 8002e14:	f04f 33ff 	mov.w	r3, #4294967295
 8002e18:	e042      	b.n	8002ea0 <SPI_WIFI_ResetModule+0xe4>
    }
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	463a      	mov	r2, r7
 8002e1e:	18d1      	adds	r1, r2, r3
 8002e20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e24:	2201      	movs	r2, #1
 8002e26:	4821      	ldr	r0, [pc, #132]	@ (8002eac <SPI_WIFI_ResetModule+0xf0>)
 8002e28:	f003 fd24 	bl	8006874 <HAL_SPI_Receive>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	3302      	adds	r3, #2
 8002e34:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8002e36:	f000 fe7b 	bl	8003b30 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e44:	d202      	bcs.n	8002e4c <SPI_WIFI_ResetModule+0x90>
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <SPI_WIFI_ResetModule+0xa0>
    {
      WIFI_DISABLE_NSS();
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4815      	ldr	r0, [pc, #84]	@ (8002ea8 <SPI_WIFI_ResetModule+0xec>)
 8002e52:	f001 faa5 	bl	80043a0 <HAL_GPIO_WritePin>
      return -1;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	e021      	b.n	8002ea0 <SPI_WIFI_ResetModule+0xe4>
  while (WIFI_IS_CMDDATA_READY())
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	4812      	ldr	r0, [pc, #72]	@ (8002ea8 <SPI_WIFI_ResetModule+0xec>)
 8002e60:	f001 fa86 	bl	8004370 <HAL_GPIO_ReadPin>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d0cc      	beq.n	8002e04 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	480e      	ldr	r0, [pc, #56]	@ (8002ea8 <SPI_WIFI_ResetModule+0xec>)
 8002e70:	f001 fa96 	bl	80043a0 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002e74:	783b      	ldrb	r3, [r7, #0]
 8002e76:	2b15      	cmp	r3, #21
 8002e78:	d10e      	bne.n	8002e98 <SPI_WIFI_ResetModule+0xdc>
 8002e7a:	787b      	ldrb	r3, [r7, #1]
 8002e7c:	2b15      	cmp	r3, #21
 8002e7e:	d10b      	bne.n	8002e98 <SPI_WIFI_ResetModule+0xdc>
 8002e80:	78bb      	ldrb	r3, [r7, #2]
 8002e82:	2b0d      	cmp	r3, #13
 8002e84:	d108      	bne.n	8002e98 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002e86:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002e88:	2b0a      	cmp	r3, #10
 8002e8a:	d105      	bne.n	8002e98 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002e8c:	793b      	ldrb	r3, [r7, #4]
 8002e8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e90:	d102      	bne.n	8002e98 <SPI_WIFI_ResetModule+0xdc>
 8002e92:	797b      	ldrb	r3, [r7, #5]
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d002      	beq.n	8002e9e <SPI_WIFI_ResetModule+0xe2>
  {
    return -1;
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9c:	e000      	b.n	8002ea0 <SPI_WIFI_ResetModule+0xe4>
  }
  return 0;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	48001000 	.word	0x48001000
 8002eac:	20000d34 	.word	0x20000d34

08002eb0 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8002eb4:	4802      	ldr	r0, [pc, #8]	@ (8002ec0 <SPI_WIFI_DeInit+0x10>)
 8002eb6:	f003 fcb5 	bl	8006824 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000d34 	.word	0x20000d34

08002ec4 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002ecc:	f000 fe30 	bl	8003b30 <HAL_GetTick>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002ed4:	e00a      	b.n	8002eec <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002ed6:	f000 fe2b 	bl	8003b30 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1ad2      	subs	r2, r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d902      	bls.n	8002eec <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eea:	e007      	b.n	8002efc <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002eec:	2102      	movs	r1, #2
 8002eee:	4805      	ldr	r0, [pc, #20]	@ (8002f04 <wait_cmddata_rdy_high+0x40>)
 8002ef0:	f001 fa3e 	bl	8004370 <HAL_GPIO_ReadPin>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d1ed      	bne.n	8002ed6 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	48001000 	.word	0x48001000

08002f08 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002f10:	f000 fe0e 	bl	8003b30 <HAL_GetTick>
 8002f14:	4603      	mov	r3, r0
 8002f16:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8002f18:	e00a      	b.n	8002f30 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002f1a:	f000 fe09 	bl	8003b30 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1ad2      	subs	r2, r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d902      	bls.n	8002f30 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2e:	e004      	b.n	8002f3a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8002f30:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <wait_cmddata_rdy_rising_event+0x3c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d0f0      	beq.n	8002f1a <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8002f38:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000da0 	.word	0x20000da0

08002f48 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002f50:	f000 fdee 	bl	8003b30 <HAL_GetTick>
 8002f54:	4603      	mov	r3, r0
 8002f56:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8002f58:	e00a      	b.n	8002f70 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002f5a:	f000 fde9 	bl	8003b30 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1ad2      	subs	r2, r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d902      	bls.n	8002f70 <wait_spi_rx_event+0x28>
    {
      return -1;
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	e004      	b.n	8002f7a <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8002f70:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <wait_spi_rx_event+0x3c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d0f0      	beq.n	8002f5a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8002f78:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000d98 	.word	0x20000d98

08002f88 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002f90:	f000 fdce 	bl	8003b30 <HAL_GetTick>
 8002f94:	4603      	mov	r3, r0
 8002f96:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 8002f98:	e00a      	b.n	8002fb0 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002f9a:	f000 fdc9 	bl	8003b30 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1ad2      	subs	r2, r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d902      	bls.n	8002fb0 <wait_spi_tx_event+0x28>
    {
      return -1;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	e004      	b.n	8002fba <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8002fb0:	4b04      	ldr	r3, [pc, #16]	@ (8002fc4 <wait_spi_tx_event+0x3c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d0f0      	beq.n	8002f9a <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8002fb8:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000d9c 	.word	0x20000d9c

08002fc8 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8002fda:	2201      	movs	r2, #1
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4834      	ldr	r0, [pc, #208]	@ (80030b0 <SPI_WIFI_ReceiveData+0xe8>)
 8002fe0:	f001 f9de 	bl	80043a0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8002fe4:	2003      	movs	r0, #3
 8002fe6:	f000 f8e3 	bl	80031b0 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff8b 	bl	8002f08 <wait_cmddata_rdy_rising_event>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	da02      	bge.n	8002ffe <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002ff8:	f06f 0302 	mvn.w	r3, #2
 8002ffc:	e054      	b.n	80030a8 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002ffe:	2200      	movs	r2, #0
 8003000:	2101      	movs	r1, #1
 8003002:	482b      	ldr	r0, [pc, #172]	@ (80030b0 <SPI_WIFI_ReceiveData+0xe8>)
 8003004:	f001 f9cc 	bl	80043a0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8003008:	200f      	movs	r0, #15
 800300a:	f000 f8d1 	bl	80031b0 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800300e:	e03d      	b.n	800308c <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8003010:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003014:	897b      	ldrh	r3, [r7, #10]
 8003016:	429a      	cmp	r2, r3
 8003018:	db02      	blt.n	8003020 <SPI_WIFI_ReceiveData+0x58>
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d13c      	bne.n	800309a <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8003020:	4b24      	ldr	r3, [pc, #144]	@ (80030b4 <SPI_WIFI_ReceiveData+0xec>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8003026:	f107 0314 	add.w	r3, r7, #20
 800302a:	2201      	movs	r2, #1
 800302c:	4619      	mov	r1, r3
 800302e:	4822      	ldr	r0, [pc, #136]	@ (80030b8 <SPI_WIFI_ReceiveData+0xf0>)
 8003030:	f004 fa00 	bl	8007434 <HAL_SPI_Receive_IT>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d007      	beq.n	800304a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800303a:	2201      	movs	r2, #1
 800303c:	2101      	movs	r1, #1
 800303e:	481c      	ldr	r0, [pc, #112]	@ (80030b0 <SPI_WIFI_ReceiveData+0xe8>)
 8003040:	f001 f9ae 	bl	80043a0 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8003044:	f04f 33ff 	mov.w	r3, #4294967295
 8003048:	e02e      	b.n	80030a8 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff7b 	bl	8002f48 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8003052:	7d3a      	ldrb	r2, [r7, #20]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3301      	adds	r3, #1
 800305c:	7d7a      	ldrb	r2, [r7, #21]
 800305e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8003060:	8afb      	ldrh	r3, [r7, #22]
 8003062:	3302      	adds	r3, #2
 8003064:	b29b      	uxth	r3, r3
 8003066:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3302      	adds	r3, #2
 800306c:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 800306e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003072:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003076:	db09      	blt.n	800308c <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8003078:	2201      	movs	r2, #1
 800307a:	2101      	movs	r1, #1
 800307c:	480c      	ldr	r0, [pc, #48]	@ (80030b0 <SPI_WIFI_ReceiveData+0xe8>)
 800307e:	f001 f98f 	bl	80043a0 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8003082:	f7ff fe9b 	bl	8002dbc <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8003086:	f06f 0303 	mvn.w	r3, #3
 800308a:	e00d      	b.n	80030a8 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800308c:	2102      	movs	r1, #2
 800308e:	4808      	ldr	r0, [pc, #32]	@ (80030b0 <SPI_WIFI_ReceiveData+0xe8>)
 8003090:	f001 f96e 	bl	8004370 <HAL_GPIO_ReadPin>
 8003094:	4603      	mov	r3, r0
 8003096:	2b01      	cmp	r3, #1
 8003098:	d0ba      	beq.n	8003010 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800309a:	2201      	movs	r2, #1
 800309c:	2101      	movs	r1, #1
 800309e:	4804      	ldr	r0, [pc, #16]	@ (80030b0 <SPI_WIFI_ReceiveData+0xe8>)
 80030a0:	f001 f97e 	bl	80043a0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80030a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	48001000 	.word	0x48001000
 80030b4:	20000d98 	.word	0x20000d98
 80030b8:	20000d34 	.word	0x20000d34

080030bc <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	460b      	mov	r3, r1
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fef9 	bl	8002ec4 <wait_cmddata_rdy_high>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	da02      	bge.n	80030de <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
 80030dc:	e04f      	b.n	800317e <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 80030de:	4b2a      	ldr	r3, [pc, #168]	@ (8003188 <SPI_WIFI_SendData+0xcc>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80030e4:	2200      	movs	r2, #0
 80030e6:	2101      	movs	r1, #1
 80030e8:	4828      	ldr	r0, [pc, #160]	@ (800318c <SPI_WIFI_SendData+0xd0>)
 80030ea:	f001 f959 	bl	80043a0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80030ee:	200f      	movs	r0, #15
 80030f0:	f000 f85e 	bl	80031b0 <SPI_WIFI_DelayUs>
  if (len > 1)
 80030f4:	897b      	ldrh	r3, [r7, #10]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d919      	bls.n	800312e <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 80030fa:	4b25      	ldr	r3, [pc, #148]	@ (8003190 <SPI_WIFI_SendData+0xd4>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8003100:	897b      	ldrh	r3, [r7, #10]
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	b29b      	uxth	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	68f9      	ldr	r1, [r7, #12]
 800310a:	4822      	ldr	r0, [pc, #136]	@ (8003194 <SPI_WIFI_SendData+0xd8>)
 800310c:	f004 f8f6 	bl	80072fc <HAL_SPI_Transmit_IT>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8003116:	2201      	movs	r2, #1
 8003118:	2101      	movs	r1, #1
 800311a:	481c      	ldr	r0, [pc, #112]	@ (800318c <SPI_WIFI_SendData+0xd0>)
 800311c:	f001 f940 	bl	80043a0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8003120:	f04f 33ff 	mov.w	r3, #4294967295
 8003124:	e02b      	b.n	800317e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff2d 	bl	8002f88 <wait_spi_tx_event>
  }

  if (len & 1)
 800312e:	897b      	ldrh	r3, [r7, #10]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8003138:	897b      	ldrh	r3, [r7, #10]
 800313a:	3b01      	subs	r3, #1
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8003144:	230a      	movs	r3, #10
 8003146:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8003148:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <SPI_WIFI_SendData+0xd4>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	2201      	movs	r2, #1
 8003154:	4619      	mov	r1, r3
 8003156:	480f      	ldr	r0, [pc, #60]	@ (8003194 <SPI_WIFI_SendData+0xd8>)
 8003158:	f004 f8d0 	bl	80072fc <HAL_SPI_Transmit_IT>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8003162:	2201      	movs	r2, #1
 8003164:	2101      	movs	r1, #1
 8003166:	4809      	ldr	r0, [pc, #36]	@ (800318c <SPI_WIFI_SendData+0xd0>)
 8003168:	f001 f91a 	bl	80043a0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
 8003170:	e005      	b.n	800317e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff07 	bl	8002f88 <wait_spi_tx_event>
  }
  return len;
 800317a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000da0 	.word	0x20000da0
 800318c:	48001000 	.word	0x48001000
 8003190:	20000d9c 	.word	0x20000d9c
 8003194:	20000d34 	.word	0x20000d34

08003198 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fcd1 	bl	8003b48 <HAL_Delay>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 80031c0:	4b20      	ldr	r3, [pc, #128]	@ (8003244 <SPI_WIFI_DelayUs+0x94>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d122      	bne.n	800320e <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 80031c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003248 <SPI_WIFI_DelayUs+0x98>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1f      	ldr	r2, [pc, #124]	@ (800324c <SPI_WIFI_DelayUs+0x9c>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	099b      	lsrs	r3, r3, #6
 80031d4:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80031de:	f000 fca7 	bl	8003b30 <HAL_GetTick>
 80031e2:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 80031e4:	e002      	b.n	80031ec <SPI_WIFI_DelayUs+0x3c>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	3b01      	subs	r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f9      	bne.n	80031e6 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 80031f2:	f000 fc9d 	bl	8003b30 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	4a11      	ldr	r2, [pc, #68]	@ (8003244 <SPI_WIFI_DelayUs+0x94>)
 80031fe:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8003200:	4b10      	ldr	r3, [pc, #64]	@ (8003244 <SPI_WIFI_DelayUs+0x94>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <SPI_WIFI_DelayUs+0x5e>
 8003208:	4b0e      	ldr	r3, [pc, #56]	@ (8003244 <SPI_WIFI_DelayUs+0x94>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800320e:	4b0e      	ldr	r3, [pc, #56]	@ (8003248 <SPI_WIFI_DelayUs+0x98>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a0f      	ldr	r2, [pc, #60]	@ (8003250 <SPI_WIFI_DelayUs+0xa0>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	0c9a      	lsrs	r2, r3, #18
 800321a:	4b0a      	ldr	r3, [pc, #40]	@ (8003244 <SPI_WIFI_DelayUs+0x94>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	fb02 f303 	mul.w	r3, r2, r3
 800322c:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800322e:	e002      	b.n	8003236 <SPI_WIFI_DelayUs+0x86>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	3b01      	subs	r3, #1
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f9      	bne.n	8003230 <SPI_WIFI_DelayUs+0x80>
  return;
 800323c:	bf00      	nop
}
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000da4 	.word	0x20000da4
 8003248:	2000000c 	.word	0x2000000c
 800324c:	10624dd3 	.word	0x10624dd3
 8003250:	431bde83 	.word	0x431bde83

08003254 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800325c:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <HAL_SPI_RxCpltCallback+0x24>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8003264:	4b04      	ldr	r3, [pc, #16]	@ (8003278 <HAL_SPI_RxCpltCallback+0x24>)
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
  }
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000d98 	.word	0x20000d98

0800327c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8003284:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <HAL_SPI_TxCpltCallback+0x24>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800328c:	4b04      	ldr	r3, [pc, #16]	@ (80032a0 <HAL_SPI_TxCpltCallback+0x24>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000d9c 	.word	0x20000d9c

080032a4 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 80032a8:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <SPI_WIFI_ISR+0x1c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d102      	bne.n	80032b6 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80032b0:	4b03      	ldr	r3, [pc, #12]	@ (80032c0 <SPI_WIFI_ISR+0x1c>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
   }
}
 80032b6:	bf00      	nop
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	20000da0 	.word	0x20000da0

080032c4 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 80032ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003304 <WIFI_Init+0x40>)
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <WIFI_Init+0x44>)
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	4b0d      	ldr	r3, [pc, #52]	@ (800330c <WIFI_Init+0x48>)
 80032d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003310 <WIFI_Init+0x4c>)
 80032da:	490e      	ldr	r1, [pc, #56]	@ (8003314 <WIFI_Init+0x50>)
 80032dc:	480e      	ldr	r0, [pc, #56]	@ (8003318 <WIFI_Init+0x54>)
 80032de:	f7ff f8b1 	bl	8002444 <ES_WIFI_RegisterBusIO>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d107      	bne.n	80032f8 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80032e8:	480b      	ldr	r0, [pc, #44]	@ (8003318 <WIFI_Init+0x54>)
 80032ea:	f7ff f877 	bl	80023dc <ES_WIFI_Init>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 80032f8:	79fb      	ldrb	r3, [r7, #7]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	08002fc9 	.word	0x08002fc9
 8003308:	080030bd 	.word	0x080030bd
 800330c:	08003199 	.word	0x08003199
 8003310:	08002eb1 	.word	0x08002eb1
 8003314:	08002d01 	.word	0x08002d01
 8003318:	20000da8 	.word	0x20000da8

0800331c <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	4613      	mov	r3, r2
 8003328:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	68f9      	ldr	r1, [r7, #12]
 8003334:	4809      	ldr	r0, [pc, #36]	@ (800335c <WIFI_Connect+0x40>)
 8003336:	f7ff f8b9 	bl	80024ac <ES_WIFI_Connect>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d107      	bne.n	8003350 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003340:	4806      	ldr	r0, [pc, #24]	@ (800335c <WIFI_Connect+0x40>)
 8003342:	f7ff f95b 	bl	80025fc <ES_WIFI_GetNetworkSettings>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8003350:	7dfb      	ldrb	r3, [r7, #23]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000da8 	.word	0x20000da8

08003360 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00d      	beq.n	8003392 <WIFI_GetMAC_Address+0x32>
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	461a      	mov	r2, r3
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4806      	ldr	r0, [pc, #24]	@ (800339c <WIFI_GetMAC_Address+0x3c>)
 8003384:	f7ff f964 	bl	8002650 <ES_WIFI_GetMACAddress>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000da8 	.word	0x20000da8

080033a0 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d010      	beq.n	80033d8 <WIFI_GetIP_Address+0x38>
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	d90d      	bls.n	80033d8 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80033bc:	4809      	ldr	r0, [pc, #36]	@ (80033e4 <WIFI_GetIP_Address+0x44>)
 80033be:	f7ff f8ed 	bl	800259c <ES_WIFI_IsConnected>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d107      	bne.n	80033d8 <WIFI_GetIP_Address+0x38>
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80033c8:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <WIFI_GetIP_Address+0x44>)
 80033ca:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 80033ce:	461a      	mov	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000da8 	.word	0x20000da8

080033e8 <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	@ 0x28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	460b      	mov	r3, r1
 80033f6:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8003404:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003406:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8003408:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800340a:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800340c:	7afb      	ldrb	r3, [r7, #11]
 800340e:	2b00      	cmp	r3, #0
 8003410:	bf14      	ite	ne
 8003412:	2301      	movne	r3, #1
 8003414:	2300      	moveq	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	3301      	adds	r3, #1
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	3302      	adds	r3, #2
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	3303      	adds	r3, #3
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	767b      	strb	r3, [r7, #25]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003438:	f107 0310 	add.w	r3, r7, #16
 800343c:	4619      	mov	r1, r3
 800343e:	4807      	ldr	r0, [pc, #28]	@ (800345c <WIFI_OpenClientConnection+0x74>)
 8003440:	f7ff f93c 	bl	80026bc <ES_WIFI_StartClientConnection>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d102      	bne.n	8003450 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8003450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003454:	4618      	mov	r0, r3
 8003456:	3728      	adds	r7, #40	@ 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000da8 	.word	0x20000da8

08003460 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	b2d9      	uxtb	r1, r3
 8003478:	88fa      	ldrh	r2, [r7, #6]
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	4613      	mov	r3, r2
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	4806      	ldr	r0, [pc, #24]	@ (80034a0 <WIFI_SendData+0x40>)
 8003488:	f7ff fa02 	bl	8002890 <ES_WIFI_SendData>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8003496:	7dfb      	ldrb	r3, [r7, #23]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000da8 	.word	0x20000da8

080034a4 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	b2d9      	uxtb	r1, r3
 80034bc:	88fa      	ldrh	r2, [r7, #6]
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	4613      	mov	r3, r2
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	4806      	ldr	r0, [pc, #24]	@ (80034e4 <WIFI_ReceiveData+0x40>)
 80034cc:	f7ff fa9c 	bl	8002a08 <ES_WIFI_ReceiveData>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80034da:	7dfb      	ldrb	r3, [r7, #23]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20000da8 	.word	0x20000da8

080034e8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	@ 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80034f0:	4b27      	ldr	r3, [pc, #156]	@ (8003590 <I2Cx_MspInit+0xa8>)
 80034f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f4:	4a26      	ldr	r2, [pc, #152]	@ (8003590 <I2Cx_MspInit+0xa8>)
 80034f6:	f043 0302 	orr.w	r3, r3, #2
 80034fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034fc:	4b24      	ldr	r3, [pc, #144]	@ (8003590 <I2Cx_MspInit+0xa8>)
 80034fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003508:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800350c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800350e:	2312      	movs	r3, #18
 8003510:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003512:	2301      	movs	r3, #1
 8003514:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003516:	2303      	movs	r3, #3
 8003518:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800351a:	2304      	movs	r3, #4
 800351c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800351e:	f107 0314 	add.w	r3, r7, #20
 8003522:	4619      	mov	r1, r3
 8003524:	481b      	ldr	r0, [pc, #108]	@ (8003594 <I2Cx_MspInit+0xac>)
 8003526:	f000 fc85 	bl	8003e34 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800352a:	f107 0314 	add.w	r3, r7, #20
 800352e:	4619      	mov	r1, r3
 8003530:	4818      	ldr	r0, [pc, #96]	@ (8003594 <I2Cx_MspInit+0xac>)
 8003532:	f000 fc7f 	bl	8003e34 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003536:	4b16      	ldr	r3, [pc, #88]	@ (8003590 <I2Cx_MspInit+0xa8>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353a:	4a15      	ldr	r2, [pc, #84]	@ (8003590 <I2Cx_MspInit+0xa8>)
 800353c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003540:	6593      	str	r3, [r2, #88]	@ 0x58
 8003542:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <I2Cx_MspInit+0xa8>)
 8003544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800354e:	4b10      	ldr	r3, [pc, #64]	@ (8003590 <I2Cx_MspInit+0xa8>)
 8003550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003552:	4a0f      	ldr	r2, [pc, #60]	@ (8003590 <I2Cx_MspInit+0xa8>)
 8003554:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003558:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800355a:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <I2Cx_MspInit+0xa8>)
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	4a0c      	ldr	r2, [pc, #48]	@ (8003590 <I2Cx_MspInit+0xa8>)
 8003560:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003564:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003566:	2200      	movs	r2, #0
 8003568:	210f      	movs	r1, #15
 800356a:	2021      	movs	r0, #33	@ 0x21
 800356c:	f000 fbeb 	bl	8003d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003570:	2021      	movs	r0, #33	@ 0x21
 8003572:	f000 fc04 	bl	8003d7e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003576:	2200      	movs	r2, #0
 8003578:	210f      	movs	r1, #15
 800357a:	2022      	movs	r0, #34	@ 0x22
 800357c:	f000 fbe3 	bl	8003d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003580:	2022      	movs	r0, #34	@ 0x22
 8003582:	f000 fbfc 	bl	8003d7e <HAL_NVIC_EnableIRQ>
}
 8003586:	bf00      	nop
 8003588:	3728      	adds	r7, #40	@ 0x28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	48000400 	.word	0x48000400

08003598 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a12      	ldr	r2, [pc, #72]	@ (80035ec <I2Cx_Init+0x54>)
 80035a4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a11      	ldr	r2, [pc, #68]	@ (80035f0 <I2Cx_Init+0x58>)
 80035aa:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff ff89 	bl	80034e8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 ff12 	bl	8004400 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80035dc:	2100      	movs	r1, #0
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f001 fcc8 	bl	8004f74 <HAL_I2CEx_ConfigAnalogFilter>
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40005800 	.word	0x40005800
 80035f0:	00702681 	.word	0x00702681

080035f4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	@ 0x28
 80035f8:	af04      	add	r7, sp, #16
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	4608      	mov	r0, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	461a      	mov	r2, r3
 8003602:	4603      	mov	r3, r0
 8003604:	72fb      	strb	r3, [r7, #11]
 8003606:	460b      	mov	r3, r1
 8003608:	813b      	strh	r3, [r7, #8]
 800360a:	4613      	mov	r3, r2
 800360c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003612:	7afb      	ldrb	r3, [r7, #11]
 8003614:	b299      	uxth	r1, r3
 8003616:	88f8      	ldrh	r0, [r7, #6]
 8003618:	893a      	ldrh	r2, [r7, #8]
 800361a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800361e:	9302      	str	r3, [sp, #8]
 8003620:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	4603      	mov	r3, r0
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f001 f8c6 	bl	80047bc <HAL_I2C_Mem_Read>
 8003630:	4603      	mov	r3, r0
 8003632:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800363a:	7afb      	ldrb	r3, [r7, #11]
 800363c:	4619      	mov	r1, r3
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f832 	bl	80036a8 <I2Cx_Error>
  }
  return status;
 8003644:	7dfb      	ldrb	r3, [r7, #23]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b08a      	sub	sp, #40	@ 0x28
 8003652:	af04      	add	r7, sp, #16
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	4608      	mov	r0, r1
 8003658:	4611      	mov	r1, r2
 800365a:	461a      	mov	r2, r3
 800365c:	4603      	mov	r3, r0
 800365e:	72fb      	strb	r3, [r7, #11]
 8003660:	460b      	mov	r3, r1
 8003662:	813b      	strh	r3, [r7, #8]
 8003664:	4613      	mov	r3, r2
 8003666:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800366c:	7afb      	ldrb	r3, [r7, #11]
 800366e:	b299      	uxth	r1, r3
 8003670:	88f8      	ldrh	r0, [r7, #6]
 8003672:	893a      	ldrh	r2, [r7, #8]
 8003674:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003678:	9302      	str	r3, [sp, #8]
 800367a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	4603      	mov	r3, r0
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 ff85 	bl	8004594 <HAL_I2C_Mem_Write>
 800368a:	4603      	mov	r3, r0
 800368c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d004      	beq.n	800369e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003694:	7afb      	ldrb	r3, [r7, #11]
 8003696:	4619      	mov	r1, r3
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f805 	bl	80036a8 <I2Cx_Error>
  }
  return status;
 800369e:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 ff3e 	bl	8004536 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ff6c 	bl	8003598 <I2Cx_Init>
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80036cc:	4802      	ldr	r0, [pc, #8]	@ (80036d8 <SENSOR_IO_Init+0x10>)
 80036ce:	f7ff ff63 	bl	8003598 <I2Cx_Init>
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	200016a8 	.word	0x200016a8

080036dc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
 80036e6:	460b      	mov	r3, r1
 80036e8:	71bb      	strb	r3, [r7, #6]
 80036ea:	4613      	mov	r3, r2
 80036ec:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80036ee:	79bb      	ldrb	r3, [r7, #6]
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	79f9      	ldrb	r1, [r7, #7]
 80036f4:	2301      	movs	r3, #1
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	1d7b      	adds	r3, r7, #5
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2301      	movs	r3, #1
 80036fe:	4803      	ldr	r0, [pc, #12]	@ (800370c <SENSOR_IO_Write+0x30>)
 8003700:	f7ff ffa5 	bl	800364e <I2Cx_WriteMultiple>
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	200016a8 	.word	0x200016a8

08003710 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af02      	add	r7, sp, #8
 8003716:	4603      	mov	r3, r0
 8003718:	460a      	mov	r2, r1
 800371a:	71fb      	strb	r3, [r7, #7]
 800371c:	4613      	mov	r3, r2
 800371e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003724:	79bb      	ldrb	r3, [r7, #6]
 8003726:	b29a      	uxth	r2, r3
 8003728:	79f9      	ldrb	r1, [r7, #7]
 800372a:	2301      	movs	r3, #1
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	f107 030f 	add.w	r3, r7, #15
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2301      	movs	r3, #1
 8003736:	4804      	ldr	r0, [pc, #16]	@ (8003748 <SENSOR_IO_Read+0x38>)
 8003738:	f7ff ff5c 	bl	80035f4 <I2Cx_ReadMultiple>

  return read_value;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	200016a8 	.word	0x200016a8

0800374c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af02      	add	r7, sp, #8
 8003752:	603a      	str	r2, [r7, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
 800375a:	460b      	mov	r3, r1
 800375c:	71bb      	strb	r3, [r7, #6]
 800375e:	4613      	mov	r3, r2
 8003760:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003762:	79bb      	ldrb	r3, [r7, #6]
 8003764:	b29a      	uxth	r2, r3
 8003766:	79f9      	ldrb	r1, [r7, #7]
 8003768:	88bb      	ldrh	r3, [r7, #4]
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2301      	movs	r3, #1
 8003772:	4804      	ldr	r0, [pc, #16]	@ (8003784 <SENSOR_IO_ReadMultiple+0x38>)
 8003774:	f7ff ff3e 	bl	80035f4 <I2Cx_ReadMultiple>
 8003778:	4603      	mov	r3, r0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200016a8 	.word	0x200016a8

08003788 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003792:	2300      	movs	r3, #0
 8003794:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003796:	4b19      	ldr	r3, [pc, #100]	@ (80037fc <BSP_ACCELERO_Init+0x74>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	4798      	blx	r3
 800379c:	4603      	mov	r3, r0
 800379e:	2b6a      	cmp	r3, #106	@ 0x6a
 80037a0:	d002      	beq.n	80037a8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
 80037a6:	e024      	b.n	80037f2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80037a8:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <BSP_ACCELERO_Init+0x78>)
 80037aa:	4a14      	ldr	r2, [pc, #80]	@ (80037fc <BSP_ACCELERO_Init+0x74>)
 80037ac:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80037ae:	2330      	movs	r3, #48	@ 0x30
 80037b0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80037b6:	2300      	movs	r3, #0
 80037b8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80037ba:	2340      	movs	r3, #64	@ 0x40
 80037bc:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80037c6:	797a      	ldrb	r2, [r7, #5]
 80037c8:	7abb      	ldrb	r3, [r7, #10]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80037d0:	7a3b      	ldrb	r3, [r7, #8]
 80037d2:	f043 0304 	orr.w	r3, r3, #4
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	b21a      	sxth	r2, r3
 80037dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	b21b      	sxth	r3, r3
 80037e4:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80037e6:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <BSP_ACCELERO_Init+0x78>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	89ba      	ldrh	r2, [r7, #12]
 80037ee:	4610      	mov	r0, r2
 80037f0:	4798      	blx	r3
  }  

  return ret;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000010 	.word	0x20000010
 8003800:	200016fc 	.word	0x200016fc

08003804 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800380c:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003814:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800381e:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4798      	blx	r3
    }
  }
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	200016fc 	.word	0x200016fc

08003834 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800383e:	2300      	movs	r3, #0
 8003840:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003842:	2110      	movs	r1, #16
 8003844:	20d4      	movs	r0, #212	@ 0xd4
 8003846:	f7ff ff63 	bl	8003710 <SENSOR_IO_Read>
 800384a:	4603      	mov	r3, r0
 800384c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003852:	7bbb      	ldrb	r3, [r7, #14]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800385a:	7bba      	ldrb	r2, [r7, #14]
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	4313      	orrs	r3, r2
 8003860:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003862:	7bbb      	ldrb	r3, [r7, #14]
 8003864:	461a      	mov	r2, r3
 8003866:	2110      	movs	r1, #16
 8003868:	20d4      	movs	r0, #212	@ 0xd4
 800386a:	f7ff ff37 	bl	80036dc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800386e:	2112      	movs	r1, #18
 8003870:	20d4      	movs	r0, #212	@ 0xd4
 8003872:	f7ff ff4d 	bl	8003710 <SENSOR_IO_Read>
 8003876:	4603      	mov	r3, r0
 8003878:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	0a1b      	lsrs	r3, r3, #8
 800387e:	b29b      	uxth	r3, r3
 8003880:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003882:	7bbb      	ldrb	r3, [r7, #14]
 8003884:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003888:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800388a:	7bba      	ldrb	r2, [r7, #14]
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	4313      	orrs	r3, r2
 8003890:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003892:	7bbb      	ldrb	r3, [r7, #14]
 8003894:	461a      	mov	r2, r3
 8003896:	2112      	movs	r1, #18
 8003898:	20d4      	movs	r0, #212	@ 0xd4
 800389a:	f7ff ff1f 	bl	80036dc <SENSOR_IO_Write>
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80038ac:	2300      	movs	r3, #0
 80038ae:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80038b0:	2110      	movs	r1, #16
 80038b2:	20d4      	movs	r0, #212	@ 0xd4
 80038b4:	f7ff ff2c 	bl	8003710 <SENSOR_IO_Read>
 80038b8:	4603      	mov	r3, r0
 80038ba:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	461a      	mov	r2, r3
 80038c8:	2110      	movs	r1, #16
 80038ca:	20d4      	movs	r0, #212	@ 0xd4
 80038cc:	f7ff ff06 	bl	80036dc <SENSOR_IO_Write>
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80038dc:	f7ff fef4 	bl	80036c8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80038e0:	210f      	movs	r1, #15
 80038e2:	20d4      	movs	r0, #212	@ 0xd4
 80038e4:	f7ff ff14 	bl	8003710 <SENSOR_IO_Read>
 80038e8:	4603      	mov	r3, r0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	bd80      	pop	{r7, pc}

080038ee <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	4603      	mov	r3, r0
 80038f6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80038fc:	2115      	movs	r1, #21
 80038fe:	20d4      	movs	r0, #212	@ 0xd4
 8003900:	f7ff ff06 	bl	8003710 <SENSOR_IO_Read>
 8003904:	4603      	mov	r3, r0
 8003906:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	f023 0310 	bic.w	r3, r3, #16
 800390e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	f043 0310 	orr.w	r3, r3, #16
 800391c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	461a      	mov	r2, r3
 8003922:	2115      	movs	r1, #21
 8003924:	20d4      	movs	r0, #212	@ 0xd4
 8003926:	f7ff fed9 	bl	80036dc <SENSOR_IO_Write>
}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800393c:	2300      	movs	r3, #0
 800393e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800394a:	2110      	movs	r1, #16
 800394c:	20d4      	movs	r0, #212	@ 0xd4
 800394e:	f7ff fedf 	bl	8003710 <SENSOR_IO_Read>
 8003952:	4603      	mov	r3, r0
 8003954:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003956:	f107 0208 	add.w	r2, r7, #8
 800395a:	2306      	movs	r3, #6
 800395c:	2128      	movs	r1, #40	@ 0x28
 800395e:	20d4      	movs	r0, #212	@ 0xd4
 8003960:	f7ff fef4 	bl	800374c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003964:	2300      	movs	r3, #0
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e01a      	b.n	80039a0 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800396a:	7ffb      	ldrb	r3, [r7, #31]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	3301      	adds	r3, #1
 8003970:	3320      	adds	r3, #32
 8003972:	443b      	add	r3, r7
 8003974:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	b29b      	uxth	r3, r3
 800397c:	7ffa      	ldrb	r2, [r7, #31]
 800397e:	0052      	lsls	r2, r2, #1
 8003980:	3220      	adds	r2, #32
 8003982:	443a      	add	r2, r7
 8003984:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003988:	4413      	add	r3, r2
 800398a:	b29a      	uxth	r2, r3
 800398c:	7ffb      	ldrb	r3, [r7, #31]
 800398e:	b212      	sxth	r2, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	3320      	adds	r3, #32
 8003994:	443b      	add	r3, r7
 8003996:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800399a:	7ffb      	ldrb	r3, [r7, #31]
 800399c:	3301      	adds	r3, #1
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	7ffb      	ldrb	r3, [r7, #31]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d9e1      	bls.n	800396a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d829      	bhi.n	8003a04 <LSM6DSL_AccReadXYZ+0xd0>
 80039b0:	a201      	add	r2, pc, #4	@ (adr r2, 80039b8 <LSM6DSL_AccReadXYZ+0x84>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039ed 	.word	0x080039ed
 80039bc:	08003a05 	.word	0x08003a05
 80039c0:	08003a05 	.word	0x08003a05
 80039c4:	08003a05 	.word	0x08003a05
 80039c8:	080039ff 	.word	0x080039ff
 80039cc:	08003a05 	.word	0x08003a05
 80039d0:	08003a05 	.word	0x08003a05
 80039d4:	08003a05 	.word	0x08003a05
 80039d8:	080039f3 	.word	0x080039f3
 80039dc:	08003a05 	.word	0x08003a05
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003a05 	.word	0x08003a05
 80039e8:	080039f9 	.word	0x080039f9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80039ec:	4b18      	ldr	r3, [pc, #96]	@ (8003a50 <LSM6DSL_AccReadXYZ+0x11c>)
 80039ee:	61bb      	str	r3, [r7, #24]
    break;
 80039f0:	e008      	b.n	8003a04 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80039f2:	4b18      	ldr	r3, [pc, #96]	@ (8003a54 <LSM6DSL_AccReadXYZ+0x120>)
 80039f4:	61bb      	str	r3, [r7, #24]
    break;
 80039f6:	e005      	b.n	8003a04 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80039f8:	4b17      	ldr	r3, [pc, #92]	@ (8003a58 <LSM6DSL_AccReadXYZ+0x124>)
 80039fa:	61bb      	str	r3, [r7, #24]
    break;
 80039fc:	e002      	b.n	8003a04 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80039fe:	4b17      	ldr	r3, [pc, #92]	@ (8003a5c <LSM6DSL_AccReadXYZ+0x128>)
 8003a00:	61bb      	str	r3, [r7, #24]
    break;    
 8003a02:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003a04:	2300      	movs	r3, #0
 8003a06:	77fb      	strb	r3, [r7, #31]
 8003a08:	e01a      	b.n	8003a40 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003a0a:	7ffb      	ldrb	r3, [r7, #31]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	3320      	adds	r3, #32
 8003a10:	443b      	add	r3, r7
 8003a12:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a26:	7ffb      	ldrb	r3, [r7, #31]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a32:	ee17 2a90 	vmov	r2, s15
 8003a36:	b212      	sxth	r2, r2
 8003a38:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003a3a:	7ffb      	ldrb	r3, [r7, #31]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	7ffb      	ldrb	r3, [r7, #31]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d9e1      	bls.n	8003a0a <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	3d79db23 	.word	0x3d79db23
 8003a54:	3df9db23 	.word	0x3df9db23
 8003a58:	3e79db23 	.word	0x3e79db23
 8003a5c:	3ef9db23 	.word	0x3ef9db23

08003a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a6a:	2003      	movs	r0, #3
 8003a6c:	f000 f960 	bl	8003d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a70:	200f      	movs	r0, #15
 8003a72:	f000 f80d 	bl	8003a90 <HAL_InitTick>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	71fb      	strb	r3, [r7, #7]
 8003a80:	e001      	b.n	8003a86 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a82:	f7fd fd73 	bl	800156c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a86:	79fb      	ldrb	r3, [r7, #7]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a9c:	4b17      	ldr	r3, [pc, #92]	@ (8003afc <HAL_InitTick+0x6c>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d023      	beq.n	8003aec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003aa4:	4b16      	ldr	r3, [pc, #88]	@ (8003b00 <HAL_InitTick+0x70>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b14      	ldr	r3, [pc, #80]	@ (8003afc <HAL_InitTick+0x6c>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	4619      	mov	r1, r3
 8003aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f96d 	bl	8003d9a <HAL_SYSTICK_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10f      	bne.n	8003ae6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b0f      	cmp	r3, #15
 8003aca:	d809      	bhi.n	8003ae0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003acc:	2200      	movs	r2, #0
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	f000 f937 	bl	8003d46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b04 <HAL_InitTick+0x74>)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e007      	b.n	8003af0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
 8003ae4:	e004      	b.n	8003af0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	e001      	b.n	8003af0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000048 	.word	0x20000048
 8003b00:	2000000c 	.word	0x2000000c
 8003b04:	20000044 	.word	0x20000044

08003b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b0c:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <HAL_IncTick+0x20>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	4b06      	ldr	r3, [pc, #24]	@ (8003b2c <HAL_IncTick+0x24>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4413      	add	r3, r2
 8003b18:	4a04      	ldr	r2, [pc, #16]	@ (8003b2c <HAL_IncTick+0x24>)
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	20000048 	.word	0x20000048
 8003b2c:	20001700 	.word	0x20001700

08003b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return uwTick;
 8003b34:	4b03      	ldr	r3, [pc, #12]	@ (8003b44 <HAL_GetTick+0x14>)
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20001700 	.word	0x20001700

08003b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b50:	f7ff ffee 	bl	8003b30 <HAL_GetTick>
 8003b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d005      	beq.n	8003b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b62:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <HAL_Delay+0x44>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b6e:	bf00      	nop
 8003b70:	f7ff ffde 	bl	8003b30 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d8f7      	bhi.n	8003b70 <HAL_Delay+0x28>
  {
  }
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000048 	.word	0x20000048

08003b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bac:	4013      	ands	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bc2:	4a04      	ldr	r2, [pc, #16]	@ (8003bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	60d3      	str	r3, [r2, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bdc:	4b04      	ldr	r3, [pc, #16]	@ (8003bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	0a1b      	lsrs	r3, r3, #8
 8003be2:	f003 0307 	and.w	r3, r3, #7
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	db0b      	blt.n	8003c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	f003 021f 	and.w	r2, r3, #31
 8003c0c:	4907      	ldr	r1, [pc, #28]	@ (8003c2c <__NVIC_EnableIRQ+0x38>)
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	2001      	movs	r0, #1
 8003c16:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	e000e100 	.word	0xe000e100

08003c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	6039      	str	r1, [r7, #0]
 8003c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	db0a      	blt.n	8003c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	490c      	ldr	r1, [pc, #48]	@ (8003c7c <__NVIC_SetPriority+0x4c>)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	0112      	lsls	r2, r2, #4
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	440b      	add	r3, r1
 8003c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c58:	e00a      	b.n	8003c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4908      	ldr	r1, [pc, #32]	@ (8003c80 <__NVIC_SetPriority+0x50>)
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	3b04      	subs	r3, #4
 8003c68:	0112      	lsls	r2, r2, #4
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	761a      	strb	r2, [r3, #24]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000e100 	.word	0xe000e100
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b089      	sub	sp, #36	@ 0x24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f1c3 0307 	rsb	r3, r3, #7
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	bf28      	it	cs
 8003ca2:	2304      	movcs	r3, #4
 8003ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	2b06      	cmp	r3, #6
 8003cac:	d902      	bls.n	8003cb4 <NVIC_EncodePriority+0x30>
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3b03      	subs	r3, #3
 8003cb2:	e000      	b.n	8003cb6 <NVIC_EncodePriority+0x32>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	43d9      	mvns	r1, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cdc:	4313      	orrs	r3, r2
         );
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3724      	adds	r7, #36	@ 0x24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cfc:	d301      	bcc.n	8003d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e00f      	b.n	8003d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d02:	4a0a      	ldr	r2, [pc, #40]	@ (8003d2c <SysTick_Config+0x40>)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d0a:	210f      	movs	r1, #15
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	f7ff ff8e 	bl	8003c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d14:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <SysTick_Config+0x40>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d1a:	4b04      	ldr	r3, [pc, #16]	@ (8003d2c <SysTick_Config+0x40>)
 8003d1c:	2207      	movs	r2, #7
 8003d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	e000e010 	.word	0xe000e010

08003d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff ff29 	bl	8003b90 <__NVIC_SetPriorityGrouping>
}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b086      	sub	sp, #24
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d58:	f7ff ff3e 	bl	8003bd8 <__NVIC_GetPriorityGrouping>
 8003d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	6978      	ldr	r0, [r7, #20]
 8003d64:	f7ff ff8e 	bl	8003c84 <NVIC_EncodePriority>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff5d 	bl	8003c30 <__NVIC_SetPriority>
}
 8003d76:	bf00      	nop
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	4603      	mov	r3, r0
 8003d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff ff31 	bl	8003bf4 <__NVIC_EnableIRQ>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ffa2 	bl	8003cec <SysTick_Config>
 8003da8:	4603      	mov	r3, r0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d005      	beq.n	8003dd6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
 8003dd4:	e029      	b.n	8003e2a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 020e 	bic.w	r2, r2, #14
 8003de4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	f003 021c 	and.w	r2, r3, #28
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	2101      	movs	r1, #1
 8003e04:	fa01 f202 	lsl.w	r2, r1, r2
 8003e08:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
    }
  }
  return status;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e42:	e17f      	b.n	8004144 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	2101      	movs	r1, #1
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	4013      	ands	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8171 	beq.w	800413e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d005      	beq.n	8003e74 <HAL_GPIO_Init+0x40>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d130      	bne.n	8003ed6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	2203      	movs	r2, #3
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eaa:	2201      	movs	r2, #1
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f003 0201 	and.w	r2, r3, #1
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d118      	bne.n	8003f14 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ee8:	2201      	movs	r2, #1
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	f003 0201 	and.w	r2, r3, #1
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d017      	beq.n	8003f50 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4013      	ands	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d123      	bne.n	8003fa4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	08da      	lsrs	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3208      	adds	r2, #8
 8003f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	220f      	movs	r2, #15
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	08da      	lsrs	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3208      	adds	r2, #8
 8003f9e:	6939      	ldr	r1, [r7, #16]
 8003fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	2203      	movs	r2, #3
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 0203 	and.w	r2, r3, #3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80ac 	beq.w	800413e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe6:	4b5f      	ldr	r3, [pc, #380]	@ (8004164 <HAL_GPIO_Init+0x330>)
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fea:	4a5e      	ldr	r2, [pc, #376]	@ (8004164 <HAL_GPIO_Init+0x330>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	@ (8004164 <HAL_GPIO_Init+0x330>)
 8003ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ffe:	4a5a      	ldr	r2, [pc, #360]	@ (8004168 <HAL_GPIO_Init+0x334>)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	3302      	adds	r3, #2
 8004006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	220f      	movs	r2, #15
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4013      	ands	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004028:	d025      	beq.n	8004076 <HAL_GPIO_Init+0x242>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4f      	ldr	r2, [pc, #316]	@ (800416c <HAL_GPIO_Init+0x338>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01f      	beq.n	8004072 <HAL_GPIO_Init+0x23e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4e      	ldr	r2, [pc, #312]	@ (8004170 <HAL_GPIO_Init+0x33c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d019      	beq.n	800406e <HAL_GPIO_Init+0x23a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4d      	ldr	r2, [pc, #308]	@ (8004174 <HAL_GPIO_Init+0x340>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_GPIO_Init+0x236>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4c      	ldr	r2, [pc, #304]	@ (8004178 <HAL_GPIO_Init+0x344>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00d      	beq.n	8004066 <HAL_GPIO_Init+0x232>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4b      	ldr	r2, [pc, #300]	@ (800417c <HAL_GPIO_Init+0x348>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d007      	beq.n	8004062 <HAL_GPIO_Init+0x22e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4a      	ldr	r2, [pc, #296]	@ (8004180 <HAL_GPIO_Init+0x34c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d101      	bne.n	800405e <HAL_GPIO_Init+0x22a>
 800405a:	2306      	movs	r3, #6
 800405c:	e00c      	b.n	8004078 <HAL_GPIO_Init+0x244>
 800405e:	2307      	movs	r3, #7
 8004060:	e00a      	b.n	8004078 <HAL_GPIO_Init+0x244>
 8004062:	2305      	movs	r3, #5
 8004064:	e008      	b.n	8004078 <HAL_GPIO_Init+0x244>
 8004066:	2304      	movs	r3, #4
 8004068:	e006      	b.n	8004078 <HAL_GPIO_Init+0x244>
 800406a:	2303      	movs	r3, #3
 800406c:	e004      	b.n	8004078 <HAL_GPIO_Init+0x244>
 800406e:	2302      	movs	r3, #2
 8004070:	e002      	b.n	8004078 <HAL_GPIO_Init+0x244>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_GPIO_Init+0x244>
 8004076:	2300      	movs	r3, #0
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	f002 0203 	and.w	r2, r2, #3
 800407e:	0092      	lsls	r2, r2, #2
 8004080:	4093      	lsls	r3, r2
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004088:	4937      	ldr	r1, [pc, #220]	@ (8004168 <HAL_GPIO_Init+0x334>)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	3302      	adds	r3, #2
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004096:	4b3b      	ldr	r3, [pc, #236]	@ (8004184 <HAL_GPIO_Init+0x350>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	43db      	mvns	r3, r3
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4013      	ands	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040ba:	4a32      	ldr	r2, [pc, #200]	@ (8004184 <HAL_GPIO_Init+0x350>)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040c0:	4b30      	ldr	r3, [pc, #192]	@ (8004184 <HAL_GPIO_Init+0x350>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040e4:	4a27      	ldr	r2, [pc, #156]	@ (8004184 <HAL_GPIO_Init+0x350>)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040ea:	4b26      	ldr	r3, [pc, #152]	@ (8004184 <HAL_GPIO_Init+0x350>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800410e:	4a1d      	ldr	r2, [pc, #116]	@ (8004184 <HAL_GPIO_Init+0x350>)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004114:	4b1b      	ldr	r3, [pc, #108]	@ (8004184 <HAL_GPIO_Init+0x350>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	43db      	mvns	r3, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004138:	4a12      	ldr	r2, [pc, #72]	@ (8004184 <HAL_GPIO_Init+0x350>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	3301      	adds	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fa22 f303 	lsr.w	r3, r2, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	f47f ae78 	bne.w	8003e44 <HAL_GPIO_Init+0x10>
  }
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000
 8004168:	40010000 	.word	0x40010000
 800416c:	48000400 	.word	0x48000400
 8004170:	48000800 	.word	0x48000800
 8004174:	48000c00 	.word	0x48000c00
 8004178:	48001000 	.word	0x48001000
 800417c:	48001400 	.word	0x48001400
 8004180:	48001800 	.word	0x48001800
 8004184:	40010400 	.word	0x40010400

08004188 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004196:	e0cd      	b.n	8004334 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004198:	2201      	movs	r2, #1
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	4013      	ands	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80c0 	beq.w	800432e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80041ae:	4a68      	ldr	r2, [pc, #416]	@ (8004350 <HAL_GPIO_DeInit+0x1c8>)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	3302      	adds	r3, #2
 80041b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	220f      	movs	r2, #15
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4013      	ands	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041d6:	d025      	beq.n	8004224 <HAL_GPIO_DeInit+0x9c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a5e      	ldr	r2, [pc, #376]	@ (8004354 <HAL_GPIO_DeInit+0x1cc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d01f      	beq.n	8004220 <HAL_GPIO_DeInit+0x98>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004358 <HAL_GPIO_DeInit+0x1d0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d019      	beq.n	800421c <HAL_GPIO_DeInit+0x94>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a5c      	ldr	r2, [pc, #368]	@ (800435c <HAL_GPIO_DeInit+0x1d4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <HAL_GPIO_DeInit+0x90>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004360 <HAL_GPIO_DeInit+0x1d8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00d      	beq.n	8004214 <HAL_GPIO_DeInit+0x8c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a5a      	ldr	r2, [pc, #360]	@ (8004364 <HAL_GPIO_DeInit+0x1dc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d007      	beq.n	8004210 <HAL_GPIO_DeInit+0x88>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a59      	ldr	r2, [pc, #356]	@ (8004368 <HAL_GPIO_DeInit+0x1e0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d101      	bne.n	800420c <HAL_GPIO_DeInit+0x84>
 8004208:	2306      	movs	r3, #6
 800420a:	e00c      	b.n	8004226 <HAL_GPIO_DeInit+0x9e>
 800420c:	2307      	movs	r3, #7
 800420e:	e00a      	b.n	8004226 <HAL_GPIO_DeInit+0x9e>
 8004210:	2305      	movs	r3, #5
 8004212:	e008      	b.n	8004226 <HAL_GPIO_DeInit+0x9e>
 8004214:	2304      	movs	r3, #4
 8004216:	e006      	b.n	8004226 <HAL_GPIO_DeInit+0x9e>
 8004218:	2303      	movs	r3, #3
 800421a:	e004      	b.n	8004226 <HAL_GPIO_DeInit+0x9e>
 800421c:	2302      	movs	r3, #2
 800421e:	e002      	b.n	8004226 <HAL_GPIO_DeInit+0x9e>
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <HAL_GPIO_DeInit+0x9e>
 8004224:	2300      	movs	r3, #0
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	f002 0203 	and.w	r2, r2, #3
 800422c:	0092      	lsls	r2, r2, #2
 800422e:	4093      	lsls	r3, r2
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	429a      	cmp	r2, r3
 8004234:	d132      	bne.n	800429c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004236:	4b4d      	ldr	r3, [pc, #308]	@ (800436c <HAL_GPIO_DeInit+0x1e4>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	43db      	mvns	r3, r3
 800423e:	494b      	ldr	r1, [pc, #300]	@ (800436c <HAL_GPIO_DeInit+0x1e4>)
 8004240:	4013      	ands	r3, r2
 8004242:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004244:	4b49      	ldr	r3, [pc, #292]	@ (800436c <HAL_GPIO_DeInit+0x1e4>)
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	43db      	mvns	r3, r3
 800424c:	4947      	ldr	r1, [pc, #284]	@ (800436c <HAL_GPIO_DeInit+0x1e4>)
 800424e:	4013      	ands	r3, r2
 8004250:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004252:	4b46      	ldr	r3, [pc, #280]	@ (800436c <HAL_GPIO_DeInit+0x1e4>)
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	43db      	mvns	r3, r3
 800425a:	4944      	ldr	r1, [pc, #272]	@ (800436c <HAL_GPIO_DeInit+0x1e4>)
 800425c:	4013      	ands	r3, r2
 800425e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004260:	4b42      	ldr	r3, [pc, #264]	@ (800436c <HAL_GPIO_DeInit+0x1e4>)
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	43db      	mvns	r3, r3
 8004268:	4940      	ldr	r1, [pc, #256]	@ (800436c <HAL_GPIO_DeInit+0x1e4>)
 800426a:	4013      	ands	r3, r2
 800426c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	220f      	movs	r2, #15
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800427e:	4a34      	ldr	r2, [pc, #208]	@ (8004350 <HAL_GPIO_DeInit+0x1c8>)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	3302      	adds	r3, #2
 8004286:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	43da      	mvns	r2, r3
 800428e:	4830      	ldr	r0, [pc, #192]	@ (8004350 <HAL_GPIO_DeInit+0x1c8>)
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	089b      	lsrs	r3, r3, #2
 8004294:	400a      	ands	r2, r1
 8004296:	3302      	adds	r3, #2
 8004298:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	2103      	movs	r1, #3
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	08da      	lsrs	r2, r3, #3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3208      	adds	r2, #8
 80042b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	220f      	movs	r2, #15
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	08d2      	lsrs	r2, r2, #3
 80042d0:	4019      	ands	r1, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3208      	adds	r2, #8
 80042d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	2103      	movs	r1, #3
 80042e4:	fa01 f303 	lsl.w	r3, r1, r3
 80042e8:	43db      	mvns	r3, r3
 80042ea:	401a      	ands	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	2101      	movs	r1, #1
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	401a      	ands	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	2103      	movs	r1, #3
 800430e:	fa01 f303 	lsl.w	r3, r1, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	401a      	ands	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800431e:	2101      	movs	r1, #1
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	401a      	ands	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	3301      	adds	r3, #1
 8004332:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	f47f af2b 	bne.w	8004198 <HAL_GPIO_DeInit+0x10>
  }
}
 8004342:	bf00      	nop
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40010000 	.word	0x40010000
 8004354:	48000400 	.word	0x48000400
 8004358:	48000800 	.word	0x48000800
 800435c:	48000c00 	.word	0x48000c00
 8004360:	48001000 	.word	0x48001000
 8004364:	48001400 	.word	0x48001400
 8004368:	48001800 	.word	0x48001800
 800436c:	40010400 	.word	0x40010400

08004370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	887b      	ldrh	r3, [r7, #2]
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
 800438c:	e001      	b.n	8004392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004392:	7bfb      	ldrb	r3, [r7, #15]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	807b      	strh	r3, [r7, #2]
 80043ac:	4613      	mov	r3, r2
 80043ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043b0:	787b      	ldrb	r3, [r7, #1]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043b6:	887a      	ldrh	r2, [r7, #2]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043bc:	e002      	b.n	80043c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043be:	887a      	ldrh	r2, [r7, #2]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043da:	4b08      	ldr	r3, [pc, #32]	@ (80043fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d006      	beq.n	80043f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043e6:	4a05      	ldr	r2, [pc, #20]	@ (80043fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fd f802 	bl	80013f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80043f4:	bf00      	nop
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40010400 	.word	0x40010400

08004400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e08d      	b.n	800452e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fd f8c8 	bl	80015bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2224      	movs	r2, #36	@ 0x24
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004450:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004460:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d107      	bne.n	800447a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	e006      	b.n	8004488 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004486:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d108      	bne.n	80044a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800449e:	605a      	str	r2, [r3, #4]
 80044a0:	e007      	b.n	80044b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69d9      	ldr	r1, [r3, #28]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1a      	ldr	r2, [r3, #32]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e021      	b.n	800458c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2224      	movs	r2, #36	@ 0x24
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fd f889 	bl	8001678 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	4608      	mov	r0, r1
 800459e:	4611      	mov	r1, r2
 80045a0:	461a      	mov	r2, r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	817b      	strh	r3, [r7, #10]
 80045a6:	460b      	mov	r3, r1
 80045a8:	813b      	strh	r3, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	f040 80f9 	bne.w	80047ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_I2C_Mem_Write+0x34>
 80045c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0ed      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_I2C_Mem_Write+0x4e>
 80045de:	2302      	movs	r3, #2
 80045e0:	e0e6      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045ea:	f7ff faa1 	bl	8003b30 <HAL_GetTick>
 80045ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	2319      	movs	r3, #25
 80045f6:	2201      	movs	r2, #1
 80045f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fac3 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0d1      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2221      	movs	r2, #33	@ 0x21
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2240      	movs	r2, #64	@ 0x40
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800462c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004634:	88f8      	ldrh	r0, [r7, #6]
 8004636:	893a      	ldrh	r2, [r7, #8]
 8004638:	8979      	ldrh	r1, [r7, #10]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	4603      	mov	r3, r0
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f9d3 	bl	80049f0 <I2C_RequestMemoryWrite>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0a9      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	2bff      	cmp	r3, #255	@ 0xff
 8004664:	d90e      	bls.n	8004684 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	22ff      	movs	r2, #255	@ 0xff
 800466a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004670:	b2da      	uxtb	r2, r3
 8004672:	8979      	ldrh	r1, [r7, #10]
 8004674:	2300      	movs	r3, #0
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fc47 	bl	8004f10 <I2C_TransferConfig>
 8004682:	e00f      	b.n	80046a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004692:	b2da      	uxtb	r2, r3
 8004694:	8979      	ldrh	r1, [r7, #10]
 8004696:	2300      	movs	r3, #0
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fc36 	bl	8004f10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fac6 	bl	8004c3a <I2C_WaitOnTXISFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e07b      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	781a      	ldrb	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d034      	beq.n	800475c <HAL_I2C_Mem_Write+0x1c8>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d130      	bne.n	800475c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004700:	2200      	movs	r2, #0
 8004702:	2180      	movs	r1, #128	@ 0x80
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fa3f 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e04d      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2bff      	cmp	r3, #255	@ 0xff
 800471c:	d90e      	bls.n	800473c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	22ff      	movs	r2, #255	@ 0xff
 8004722:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004728:	b2da      	uxtb	r2, r3
 800472a:	8979      	ldrh	r1, [r7, #10]
 800472c:	2300      	movs	r3, #0
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fbeb 	bl	8004f10 <I2C_TransferConfig>
 800473a:	e00f      	b.n	800475c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474a:	b2da      	uxtb	r2, r3
 800474c:	8979      	ldrh	r1, [r7, #10]
 800474e:	2300      	movs	r3, #0
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fbda 	bl	8004f10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d19e      	bne.n	80046a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 faac 	bl	8004cc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e01a      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2220      	movs	r2, #32
 8004780:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6859      	ldr	r1, [r3, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b0a      	ldr	r3, [pc, #40]	@ (80047b8 <HAL_I2C_Mem_Write+0x224>)
 800478e:	400b      	ands	r3, r1
 8004790:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
  }
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	fe00e800 	.word	0xfe00e800

080047bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	4608      	mov	r0, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	461a      	mov	r2, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	817b      	strh	r3, [r7, #10]
 80047ce:	460b      	mov	r3, r1
 80047d0:	813b      	strh	r3, [r7, #8]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	f040 80fd 	bne.w	80049de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_I2C_Mem_Read+0x34>
 80047ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d105      	bne.n	80047fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0f1      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_I2C_Mem_Read+0x4e>
 8004806:	2302      	movs	r3, #2
 8004808:	e0ea      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004812:	f7ff f98d 	bl	8003b30 <HAL_GetTick>
 8004816:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	2319      	movs	r3, #25
 800481e:	2201      	movs	r2, #1
 8004820:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f9af 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0d5      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2222      	movs	r2, #34	@ 0x22
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2240      	movs	r2, #64	@ 0x40
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a3a      	ldr	r2, [r7, #32]
 800484e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004854:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800485c:	88f8      	ldrh	r0, [r7, #6]
 800485e:	893a      	ldrh	r2, [r7, #8]
 8004860:	8979      	ldrh	r1, [r7, #10]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	4603      	mov	r3, r0
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f913 	bl	8004a98 <I2C_RequestMemoryRead>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0ad      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	2bff      	cmp	r3, #255	@ 0xff
 800488c:	d90e      	bls.n	80048ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004898:	b2da      	uxtb	r2, r3
 800489a:	8979      	ldrh	r1, [r7, #10]
 800489c:	4b52      	ldr	r3, [pc, #328]	@ (80049e8 <HAL_I2C_Mem_Read+0x22c>)
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fb33 	bl	8004f10 <I2C_TransferConfig>
 80048aa:	e00f      	b.n	80048cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	8979      	ldrh	r1, [r7, #10]
 80048be:	4b4a      	ldr	r3, [pc, #296]	@ (80049e8 <HAL_I2C_Mem_Read+0x22c>)
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 fb22 	bl	8004f10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	2200      	movs	r2, #0
 80048d4:	2104      	movs	r1, #4
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f956 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e07c      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d034      	beq.n	800498c <HAL_I2C_Mem_Read+0x1d0>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004926:	2b00      	cmp	r3, #0
 8004928:	d130      	bne.n	800498c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004930:	2200      	movs	r2, #0
 8004932:	2180      	movs	r1, #128	@ 0x80
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f927 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e04d      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	2bff      	cmp	r3, #255	@ 0xff
 800494c:	d90e      	bls.n	800496c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004958:	b2da      	uxtb	r2, r3
 800495a:	8979      	ldrh	r1, [r7, #10]
 800495c:	2300      	movs	r3, #0
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fad3 	bl	8004f10 <I2C_TransferConfig>
 800496a:	e00f      	b.n	800498c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497a:	b2da      	uxtb	r2, r3
 800497c:	8979      	ldrh	r1, [r7, #10]
 800497e:	2300      	movs	r3, #0
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fac2 	bl	8004f10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d19a      	bne.n	80048cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f994 	bl	8004cc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e01a      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2220      	movs	r2, #32
 80049b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <HAL_I2C_Mem_Read+0x230>)
 80049be:	400b      	ands	r3, r1
 80049c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	e000      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80049de:	2302      	movs	r3, #2
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	80002400 	.word	0x80002400
 80049ec:	fe00e800 	.word	0xfe00e800

080049f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	4608      	mov	r0, r1
 80049fa:	4611      	mov	r1, r2
 80049fc:	461a      	mov	r2, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	817b      	strh	r3, [r7, #10]
 8004a02:	460b      	mov	r3, r1
 8004a04:	813b      	strh	r3, [r7, #8]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	8979      	ldrh	r1, [r7, #10]
 8004a10:	4b20      	ldr	r3, [pc, #128]	@ (8004a94 <I2C_RequestMemoryWrite+0xa4>)
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fa79 	bl	8004f10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	69b9      	ldr	r1, [r7, #24]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f909 	bl	8004c3a <I2C_WaitOnTXISFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e02c      	b.n	8004a8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d105      	bne.n	8004a44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a38:	893b      	ldrh	r3, [r7, #8]
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a42:	e015      	b.n	8004a70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a44:	893b      	ldrh	r3, [r7, #8]
 8004a46:	0a1b      	lsrs	r3, r3, #8
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	69b9      	ldr	r1, [r7, #24]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f8ef 	bl	8004c3a <I2C_WaitOnTXISFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e012      	b.n	8004a8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a66:	893b      	ldrh	r3, [r7, #8]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2200      	movs	r2, #0
 8004a78:	2180      	movs	r1, #128	@ 0x80
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f884 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	80002000 	.word	0x80002000

08004a98 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	817b      	strh	r3, [r7, #10]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	813b      	strh	r3, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	8979      	ldrh	r1, [r7, #10]
 8004ab8:	4b20      	ldr	r3, [pc, #128]	@ (8004b3c <I2C_RequestMemoryRead+0xa4>)
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2300      	movs	r3, #0
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 fa26 	bl	8004f10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	69b9      	ldr	r1, [r7, #24]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f8b6 	bl	8004c3a <I2C_WaitOnTXISFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e02c      	b.n	8004b32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d105      	bne.n	8004aea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ade:	893b      	ldrh	r3, [r7, #8]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ae8:	e015      	b.n	8004b16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004aea:	893b      	ldrh	r3, [r7, #8]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	69b9      	ldr	r1, [r7, #24]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f89c 	bl	8004c3a <I2C_WaitOnTXISFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e012      	b.n	8004b32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b0c:	893b      	ldrh	r3, [r7, #8]
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2140      	movs	r1, #64	@ 0x40
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f831 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	80002000 	.word	0x80002000

08004b40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d103      	bne.n	8004b5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d007      	beq.n	8004b7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	619a      	str	r2, [r3, #24]
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b98:	e03b      	b.n	8004c12 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	6839      	ldr	r1, [r7, #0]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f8d6 	bl	8004d50 <I2C_IsErrorOccurred>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e041      	b.n	8004c32 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb4:	d02d      	beq.n	8004c12 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb6:	f7fe ffbb 	bl	8003b30 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <I2C_WaitOnFlagUntilTimeout+0x44>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d122      	bne.n	8004c12 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d113      	bne.n	8004c12 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bee:	f043 0220 	orr.w	r2, r3, #32
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e00f      	b.n	8004c32 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699a      	ldr	r2, [r3, #24]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	bf0c      	ite	eq
 8004c22:	2301      	moveq	r3, #1
 8004c24:	2300      	movne	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d0b4      	beq.n	8004b9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c46:	e033      	b.n	8004cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f87f 	bl	8004d50 <I2C_IsErrorOccurred>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e031      	b.n	8004cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	d025      	beq.n	8004cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c64:	f7fe ff64 	bl	8003b30 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d302      	bcc.n	8004c7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d11a      	bne.n	8004cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d013      	beq.n	8004cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8c:	f043 0220 	orr.w	r2, r3, #32
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e007      	b.n	8004cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d1c4      	bne.n	8004c48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cd4:	e02f      	b.n	8004d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 f838 	bl	8004d50 <I2C_IsErrorOccurred>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e02d      	b.n	8004d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cea:	f7fe ff21 	bl	8003b30 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d11a      	bne.n	8004d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d013      	beq.n	8004d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d12:	f043 0220 	orr.w	r2, r3, #32
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e007      	b.n	8004d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d1c8      	bne.n	8004cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08a      	sub	sp, #40	@ 0x28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d068      	beq.n	8004e4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2210      	movs	r2, #16
 8004d82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d84:	e049      	b.n	8004e1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d045      	beq.n	8004e1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d8e:	f7fe fecf 	bl	8003b30 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d302      	bcc.n	8004da4 <I2C_IsErrorOccurred+0x54>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d13a      	bne.n	8004e1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004db6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc6:	d121      	bne.n	8004e0c <I2C_IsErrorOccurred+0xbc>
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dce:	d01d      	beq.n	8004e0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004dd0:	7cfb      	ldrb	r3, [r7, #19]
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d01a      	beq.n	8004e0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004de4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004de6:	f7fe fea3 	bl	8003b30 <HAL_GetTick>
 8004dea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dec:	e00e      	b.n	8004e0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004dee:	f7fe fe9f 	bl	8003b30 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b19      	cmp	r3, #25
 8004dfa:	d907      	bls.n	8004e0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	f043 0320 	orr.w	r3, r3, #32
 8004e02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004e0a:	e006      	b.n	8004e1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d1e9      	bne.n	8004dee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d003      	beq.n	8004e30 <I2C_IsErrorOccurred+0xe0>
 8004e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0aa      	beq.n	8004d86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d103      	bne.n	8004e40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	f043 0304 	orr.w	r3, r3, #4
 8004e46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00b      	beq.n	8004e78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00b      	beq.n	8004e9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	f043 0308 	orr.w	r3, r3, #8
 8004e88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	f043 0302 	orr.w	r3, r3, #2
 8004eaa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01c      	beq.n	8004efe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f7ff fe3b 	bl	8004b40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6859      	ldr	r1, [r3, #4]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <I2C_IsErrorOccurred+0x1bc>)
 8004ed6:	400b      	ands	r3, r1
 8004ed8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004efe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3728      	adds	r7, #40	@ 0x28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	fe00e800 	.word	0xfe00e800

08004f10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	817b      	strh	r3, [r7, #10]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f22:	897b      	ldrh	r3, [r7, #10]
 8004f24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f28:	7a7b      	ldrb	r3, [r7, #9]
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	0d5b      	lsrs	r3, r3, #21
 8004f4a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004f4e:	4b08      	ldr	r3, [pc, #32]	@ (8004f70 <I2C_TransferConfig+0x60>)
 8004f50:	430b      	orrs	r3, r1
 8004f52:	43db      	mvns	r3, r3
 8004f54:	ea02 0103 	and.w	r1, r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f62:	bf00      	nop
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	03ff63ff 	.word	0x03ff63ff

08004f74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d138      	bne.n	8004ffc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e032      	b.n	8004ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2224      	movs	r2, #36	@ 0x24
 8004fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0201 	bic.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004fc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6819      	ldr	r1, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
  }
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005010:	4b05      	ldr	r3, [pc, #20]	@ (8005028 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a04      	ldr	r2, [pc, #16]	@ (8005028 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800501a:	6013      	str	r3, [r2, #0]
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40007000 	.word	0x40007000

0800502c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005030:	4b04      	ldr	r3, [pc, #16]	@ (8005044 <HAL_PWREx_GetVoltageRange+0x18>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40007000 	.word	0x40007000

08005048 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005056:	d130      	bne.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005058:	4b23      	ldr	r3, [pc, #140]	@ (80050e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005064:	d038      	beq.n	80050d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005066:	4b20      	ldr	r3, [pc, #128]	@ (80050e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800506e:	4a1e      	ldr	r2, [pc, #120]	@ (80050e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005070:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005074:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005076:	4b1d      	ldr	r3, [pc, #116]	@ (80050ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2232      	movs	r2, #50	@ 0x32
 800507c:	fb02 f303 	mul.w	r3, r2, r3
 8005080:	4a1b      	ldr	r2, [pc, #108]	@ (80050f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	0c9b      	lsrs	r3, r3, #18
 8005088:	3301      	adds	r3, #1
 800508a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800508c:	e002      	b.n	8005094 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3b01      	subs	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005094:	4b14      	ldr	r3, [pc, #80]	@ (80050e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800509c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050a0:	d102      	bne.n	80050a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f2      	bne.n	800508e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050a8:	4b0f      	ldr	r3, [pc, #60]	@ (80050e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050b4:	d110      	bne.n	80050d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e00f      	b.n	80050da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80050ba:	4b0b      	ldr	r3, [pc, #44]	@ (80050e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c6:	d007      	beq.n	80050d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050c8:	4b07      	ldr	r3, [pc, #28]	@ (80050e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050d0:	4a05      	ldr	r2, [pc, #20]	@ (80050e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40007000 	.word	0x40007000
 80050ec:	2000000c 	.word	0x2000000c
 80050f0:	431bde83 	.word	0x431bde83

080050f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e3ca      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005106:	4b97      	ldr	r3, [pc, #604]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005110:	4b94      	ldr	r3, [pc, #592]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 80e4 	beq.w	80052f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d007      	beq.n	800513e <HAL_RCC_OscConfig+0x4a>
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b0c      	cmp	r3, #12
 8005132:	f040 808b 	bne.w	800524c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b01      	cmp	r3, #1
 800513a:	f040 8087 	bne.w	800524c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800513e:	4b89      	ldr	r3, [pc, #548]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_RCC_OscConfig+0x62>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e3a2      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	4b82      	ldr	r3, [pc, #520]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d004      	beq.n	8005170 <HAL_RCC_OscConfig+0x7c>
 8005166:	4b7f      	ldr	r3, [pc, #508]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800516e:	e005      	b.n	800517c <HAL_RCC_OscConfig+0x88>
 8005170:	4b7c      	ldr	r3, [pc, #496]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 8005172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800517c:	4293      	cmp	r3, r2
 800517e:	d223      	bcs.n	80051c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fd55 	bl	8005c34 <RCC_SetFlashLatencyFromMSIRange>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e383      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005194:	4b73      	ldr	r3, [pc, #460]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a72      	ldr	r2, [pc, #456]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 800519a:	f043 0308 	orr.w	r3, r3, #8
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	4b70      	ldr	r3, [pc, #448]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	496d      	ldr	r1, [pc, #436]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051b2:	4b6c      	ldr	r3, [pc, #432]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	4968      	ldr	r1, [pc, #416]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	604b      	str	r3, [r1, #4]
 80051c6:	e025      	b.n	8005214 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051c8:	4b66      	ldr	r3, [pc, #408]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a65      	ldr	r2, [pc, #404]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80051ce:	f043 0308 	orr.w	r3, r3, #8
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	4b63      	ldr	r3, [pc, #396]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	4960      	ldr	r1, [pc, #384]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	495b      	ldr	r1, [pc, #364]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d109      	bne.n	8005214 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fd15 	bl	8005c34 <RCC_SetFlashLatencyFromMSIRange>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e343      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005214:	f000 fc4a 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8005218:	4602      	mov	r2, r0
 800521a:	4b52      	ldr	r3, [pc, #328]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	091b      	lsrs	r3, r3, #4
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	4950      	ldr	r1, [pc, #320]	@ (8005368 <HAL_RCC_OscConfig+0x274>)
 8005226:	5ccb      	ldrb	r3, [r1, r3]
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
 8005230:	4a4e      	ldr	r2, [pc, #312]	@ (800536c <HAL_RCC_OscConfig+0x278>)
 8005232:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005234:	4b4e      	ldr	r3, [pc, #312]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f7fe fc29 	bl	8003a90 <HAL_InitTick>
 800523e:	4603      	mov	r3, r0
 8005240:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d052      	beq.n	80052ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	e327      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d032      	beq.n	80052ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005254:	4b43      	ldr	r3, [pc, #268]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a42      	ldr	r2, [pc, #264]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005260:	f7fe fc66 	bl	8003b30 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005268:	f7fe fc62 	bl	8003b30 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e310      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800527a:	4b3a      	ldr	r3, [pc, #232]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005286:	4b37      	ldr	r3, [pc, #220]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a36      	ldr	r2, [pc, #216]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 800528c:	f043 0308 	orr.w	r3, r3, #8
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	4b34      	ldr	r3, [pc, #208]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	4931      	ldr	r1, [pc, #196]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	492c      	ldr	r1, [pc, #176]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	604b      	str	r3, [r1, #4]
 80052b8:	e01a      	b.n	80052f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a29      	ldr	r2, [pc, #164]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052c6:	f7fe fc33 	bl	8003b30 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052ce:	f7fe fc2f 	bl	8003b30 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e2dd      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052e0:	4b20      	ldr	r3, [pc, #128]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1f0      	bne.n	80052ce <HAL_RCC_OscConfig+0x1da>
 80052ec:	e000      	b.n	80052f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d074      	beq.n	80053e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d005      	beq.n	800530e <HAL_RCC_OscConfig+0x21a>
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b0c      	cmp	r3, #12
 8005306:	d10e      	bne.n	8005326 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b03      	cmp	r3, #3
 800530c:	d10b      	bne.n	8005326 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530e:	4b15      	ldr	r3, [pc, #84]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d064      	beq.n	80053e4 <HAL_RCC_OscConfig+0x2f0>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d160      	bne.n	80053e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e2ba      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800532e:	d106      	bne.n	800533e <HAL_RCC_OscConfig+0x24a>
 8005330:	4b0c      	ldr	r3, [pc, #48]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0b      	ldr	r2, [pc, #44]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 8005336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	e026      	b.n	800538c <HAL_RCC_OscConfig+0x298>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005346:	d115      	bne.n	8005374 <HAL_RCC_OscConfig+0x280>
 8005348:	4b06      	ldr	r3, [pc, #24]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a05      	ldr	r2, [pc, #20]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 800534e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	4b03      	ldr	r3, [pc, #12]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a02      	ldr	r2, [pc, #8]	@ (8005364 <HAL_RCC_OscConfig+0x270>)
 800535a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	e014      	b.n	800538c <HAL_RCC_OscConfig+0x298>
 8005362:	bf00      	nop
 8005364:	40021000 	.word	0x40021000
 8005368:	08011b00 	.word	0x08011b00
 800536c:	2000000c 	.word	0x2000000c
 8005370:	20000044 	.word	0x20000044
 8005374:	4ba0      	ldr	r3, [pc, #640]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a9f      	ldr	r2, [pc, #636]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 800537a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	4b9d      	ldr	r3, [pc, #628]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a9c      	ldr	r2, [pc, #624]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 8005386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800538a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d013      	beq.n	80053bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fe fbcc 	bl	8003b30 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800539c:	f7fe fbc8 	bl	8003b30 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b64      	cmp	r3, #100	@ 0x64
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e276      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ae:	4b92      	ldr	r3, [pc, #584]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0x2a8>
 80053ba:	e014      	b.n	80053e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fe fbb8 	bl	8003b30 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c4:	f7fe fbb4 	bl	8003b30 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b64      	cmp	r3, #100	@ 0x64
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e262      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053d6:	4b88      	ldr	r3, [pc, #544]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x2d0>
 80053e2:	e000      	b.n	80053e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d060      	beq.n	80054b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d005      	beq.n	8005404 <HAL_RCC_OscConfig+0x310>
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b0c      	cmp	r3, #12
 80053fc:	d119      	bne.n	8005432 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d116      	bne.n	8005432 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005404:	4b7c      	ldr	r3, [pc, #496]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <HAL_RCC_OscConfig+0x328>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e23f      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541c:	4b76      	ldr	r3, [pc, #472]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	061b      	lsls	r3, r3, #24
 800542a:	4973      	ldr	r1, [pc, #460]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 800542c:	4313      	orrs	r3, r2
 800542e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005430:	e040      	b.n	80054b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d023      	beq.n	8005482 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800543a:	4b6f      	ldr	r3, [pc, #444]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a6e      	ldr	r2, [pc, #440]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 8005440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005446:	f7fe fb73 	bl	8003b30 <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800544e:	f7fe fb6f 	bl	8003b30 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e21d      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005460:	4b65      	ldr	r3, [pc, #404]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800546c:	4b62      	ldr	r3, [pc, #392]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	061b      	lsls	r3, r3, #24
 800547a:	495f      	ldr	r1, [pc, #380]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 800547c:	4313      	orrs	r3, r2
 800547e:	604b      	str	r3, [r1, #4]
 8005480:	e018      	b.n	80054b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005482:	4b5d      	ldr	r3, [pc, #372]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a5c      	ldr	r2, [pc, #368]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 8005488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800548c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548e:	f7fe fb4f 	bl	8003b30 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005496:	f7fe fb4b 	bl	8003b30 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e1f9      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054a8:	4b53      	ldr	r3, [pc, #332]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1f0      	bne.n	8005496 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d03c      	beq.n	800553a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01c      	beq.n	8005502 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054c8:	4b4b      	ldr	r3, [pc, #300]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 80054ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ce:	4a4a      	ldr	r2, [pc, #296]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d8:	f7fe fb2a 	bl	8003b30 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054e0:	f7fe fb26 	bl	8003b30 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e1d4      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054f2:	4b41      	ldr	r3, [pc, #260]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 80054f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0ef      	beq.n	80054e0 <HAL_RCC_OscConfig+0x3ec>
 8005500:	e01b      	b.n	800553a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005502:	4b3d      	ldr	r3, [pc, #244]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 8005504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005508:	4a3b      	ldr	r2, [pc, #236]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 800550a:	f023 0301 	bic.w	r3, r3, #1
 800550e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005512:	f7fe fb0d 	bl	8003b30 <HAL_GetTick>
 8005516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005518:	e008      	b.n	800552c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800551a:	f7fe fb09 	bl	8003b30 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e1b7      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800552c:	4b32      	ldr	r3, [pc, #200]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 800552e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1ef      	bne.n	800551a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80a6 	beq.w	8005694 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005548:	2300      	movs	r3, #0
 800554a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800554c:	4b2a      	ldr	r3, [pc, #168]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 800554e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10d      	bne.n	8005574 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005558:	4b27      	ldr	r3, [pc, #156]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 800555a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555c:	4a26      	ldr	r2, [pc, #152]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 800555e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005562:	6593      	str	r3, [r2, #88]	@ 0x58
 8005564:	4b24      	ldr	r3, [pc, #144]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 8005566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556c:	60bb      	str	r3, [r7, #8]
 800556e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005570:	2301      	movs	r3, #1
 8005572:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005574:	4b21      	ldr	r3, [pc, #132]	@ (80055fc <HAL_RCC_OscConfig+0x508>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557c:	2b00      	cmp	r3, #0
 800557e:	d118      	bne.n	80055b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005580:	4b1e      	ldr	r3, [pc, #120]	@ (80055fc <HAL_RCC_OscConfig+0x508>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1d      	ldr	r2, [pc, #116]	@ (80055fc <HAL_RCC_OscConfig+0x508>)
 8005586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800558a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800558c:	f7fe fad0 	bl	8003b30 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005594:	f7fe facc 	bl	8003b30 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e17a      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a6:	4b15      	ldr	r3, [pc, #84]	@ (80055fc <HAL_RCC_OscConfig+0x508>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0f0      	beq.n	8005594 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d108      	bne.n	80055cc <HAL_RCC_OscConfig+0x4d8>
 80055ba:	4b0f      	ldr	r3, [pc, #60]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 80055bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c0:	4a0d      	ldr	r2, [pc, #52]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055ca:	e029      	b.n	8005620 <HAL_RCC_OscConfig+0x52c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	2b05      	cmp	r3, #5
 80055d2:	d115      	bne.n	8005600 <HAL_RCC_OscConfig+0x50c>
 80055d4:	4b08      	ldr	r3, [pc, #32]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055da:	4a07      	ldr	r2, [pc, #28]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 80055dc:	f043 0304 	orr.w	r3, r3, #4
 80055e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055e4:	4b04      	ldr	r3, [pc, #16]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 80055e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ea:	4a03      	ldr	r2, [pc, #12]	@ (80055f8 <HAL_RCC_OscConfig+0x504>)
 80055ec:	f043 0301 	orr.w	r3, r3, #1
 80055f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055f4:	e014      	b.n	8005620 <HAL_RCC_OscConfig+0x52c>
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000
 80055fc:	40007000 	.word	0x40007000
 8005600:	4b9c      	ldr	r3, [pc, #624]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005606:	4a9b      	ldr	r2, [pc, #620]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005608:	f023 0301 	bic.w	r3, r3, #1
 800560c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005610:	4b98      	ldr	r3, [pc, #608]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005616:	4a97      	ldr	r2, [pc, #604]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005618:	f023 0304 	bic.w	r3, r3, #4
 800561c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d016      	beq.n	8005656 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005628:	f7fe fa82 	bl	8003b30 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800562e:	e00a      	b.n	8005646 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005630:	f7fe fa7e 	bl	8003b30 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563e:	4293      	cmp	r3, r2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e12a      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005646:	4b8b      	ldr	r3, [pc, #556]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ed      	beq.n	8005630 <HAL_RCC_OscConfig+0x53c>
 8005654:	e015      	b.n	8005682 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005656:	f7fe fa6b 	bl	8003b30 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800565c:	e00a      	b.n	8005674 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565e:	f7fe fa67 	bl	8003b30 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e113      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005674:	4b7f      	ldr	r3, [pc, #508]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1ed      	bne.n	800565e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005682:	7ffb      	ldrb	r3, [r7, #31]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d105      	bne.n	8005694 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005688:	4b7a      	ldr	r3, [pc, #488]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568c:	4a79      	ldr	r2, [pc, #484]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 800568e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005692:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80fe 	beq.w	800589a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	f040 80d0 	bne.w	8005848 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80056a8:	4b72      	ldr	r3, [pc, #456]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f003 0203 	and.w	r2, r3, #3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d130      	bne.n	800571e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c6:	3b01      	subs	r3, #1
 80056c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d127      	bne.n	800571e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056da:	429a      	cmp	r2, r3
 80056dc:	d11f      	bne.n	800571e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056e8:	2a07      	cmp	r2, #7
 80056ea:	bf14      	ite	ne
 80056ec:	2201      	movne	r2, #1
 80056ee:	2200      	moveq	r2, #0
 80056f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d113      	bne.n	800571e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005700:	085b      	lsrs	r3, r3, #1
 8005702:	3b01      	subs	r3, #1
 8005704:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d109      	bne.n	800571e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	3b01      	subs	r3, #1
 8005718:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d06e      	beq.n	80057fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b0c      	cmp	r3, #12
 8005722:	d069      	beq.n	80057f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005724:	4b53      	ldr	r3, [pc, #332]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d105      	bne.n	800573c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005730:	4b50      	ldr	r3, [pc, #320]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e0ad      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005740:	4b4c      	ldr	r3, [pc, #304]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a4b      	ldr	r2, [pc, #300]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005746:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800574a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800574c:	f7fe f9f0 	bl	8003b30 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005754:	f7fe f9ec 	bl	8003b30 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e09a      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005766:	4b43      	ldr	r3, [pc, #268]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005772:	4b40      	ldr	r3, [pc, #256]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	4b40      	ldr	r3, [pc, #256]	@ (8005878 <HAL_RCC_OscConfig+0x784>)
 8005778:	4013      	ands	r3, r2
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005782:	3a01      	subs	r2, #1
 8005784:	0112      	lsls	r2, r2, #4
 8005786:	4311      	orrs	r1, r2
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800578c:	0212      	lsls	r2, r2, #8
 800578e:	4311      	orrs	r1, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005794:	0852      	lsrs	r2, r2, #1
 8005796:	3a01      	subs	r2, #1
 8005798:	0552      	lsls	r2, r2, #21
 800579a:	4311      	orrs	r1, r2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80057a0:	0852      	lsrs	r2, r2, #1
 80057a2:	3a01      	subs	r2, #1
 80057a4:	0652      	lsls	r2, r2, #25
 80057a6:	4311      	orrs	r1, r2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80057ac:	0912      	lsrs	r2, r2, #4
 80057ae:	0452      	lsls	r2, r2, #17
 80057b0:	430a      	orrs	r2, r1
 80057b2:	4930      	ldr	r1, [pc, #192]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a2d      	ldr	r2, [pc, #180]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 80057be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 80057ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057d0:	f7fe f9ae 	bl	8003b30 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d8:	f7fe f9aa 	bl	8003b30 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e058      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ea:	4b22      	ldr	r3, [pc, #136]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0f0      	beq.n	80057d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057f6:	e050      	b.n	800589a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e04f      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d148      	bne.n	800589a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005808:	4b1a      	ldr	r3, [pc, #104]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a19      	ldr	r2, [pc, #100]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 800580e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005812:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005814:	4b17      	ldr	r3, [pc, #92]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	4a16      	ldr	r2, [pc, #88]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 800581a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800581e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005820:	f7fe f986 	bl	8003b30 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005828:	f7fe f982 	bl	8003b30 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e030      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800583a:	4b0e      	ldr	r3, [pc, #56]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f0      	beq.n	8005828 <HAL_RCC_OscConfig+0x734>
 8005846:	e028      	b.n	800589a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b0c      	cmp	r3, #12
 800584c:	d023      	beq.n	8005896 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584e:	4b09      	ldr	r3, [pc, #36]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a08      	ldr	r2, [pc, #32]	@ (8005874 <HAL_RCC_OscConfig+0x780>)
 8005854:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585a:	f7fe f969 	bl	8003b30 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005860:	e00c      	b.n	800587c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005862:	f7fe f965 	bl	8003b30 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d905      	bls.n	800587c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e013      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
 8005874:	40021000 	.word	0x40021000
 8005878:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800587c:	4b09      	ldr	r3, [pc, #36]	@ (80058a4 <HAL_RCC_OscConfig+0x7b0>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1ec      	bne.n	8005862 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005888:	4b06      	ldr	r3, [pc, #24]	@ (80058a4 <HAL_RCC_OscConfig+0x7b0>)
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	4905      	ldr	r1, [pc, #20]	@ (80058a4 <HAL_RCC_OscConfig+0x7b0>)
 800588e:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <HAL_RCC_OscConfig+0x7b4>)
 8005890:	4013      	ands	r3, r2
 8005892:	60cb      	str	r3, [r1, #12]
 8005894:	e001      	b.n	800589a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3720      	adds	r7, #32
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40021000 	.word	0x40021000
 80058a8:	feeefffc 	.word	0xfeeefffc

080058ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0e7      	b.n	8005a90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058c0:	4b75      	ldr	r3, [pc, #468]	@ (8005a98 <HAL_RCC_ClockConfig+0x1ec>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d910      	bls.n	80058f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ce:	4b72      	ldr	r3, [pc, #456]	@ (8005a98 <HAL_RCC_ClockConfig+0x1ec>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f023 0207 	bic.w	r2, r3, #7
 80058d6:	4970      	ldr	r1, [pc, #448]	@ (8005a98 <HAL_RCC_ClockConfig+0x1ec>)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	4313      	orrs	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058de:	4b6e      	ldr	r3, [pc, #440]	@ (8005a98 <HAL_RCC_ClockConfig+0x1ec>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d001      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0cf      	b.n	8005a90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d010      	beq.n	800591e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	4b66      	ldr	r3, [pc, #408]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005908:	429a      	cmp	r2, r3
 800590a:	d908      	bls.n	800591e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800590c:	4b63      	ldr	r3, [pc, #396]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4960      	ldr	r1, [pc, #384]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 800591a:	4313      	orrs	r3, r2
 800591c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d04c      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b03      	cmp	r3, #3
 8005930:	d107      	bne.n	8005942 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005932:	4b5a      	ldr	r3, [pc, #360]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d121      	bne.n	8005982 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e0a6      	b.n	8005a90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d107      	bne.n	800595a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800594a:	4b54      	ldr	r3, [pc, #336]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d115      	bne.n	8005982 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e09a      	b.n	8005a90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d107      	bne.n	8005972 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005962:	4b4e      	ldr	r3, [pc, #312]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d109      	bne.n	8005982 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e08e      	b.n	8005a90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005972:	4b4a      	ldr	r3, [pc, #296]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e086      	b.n	8005a90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005982:	4b46      	ldr	r3, [pc, #280]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f023 0203 	bic.w	r2, r3, #3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	4943      	ldr	r1, [pc, #268]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 8005990:	4313      	orrs	r3, r2
 8005992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005994:	f7fe f8cc 	bl	8003b30 <HAL_GetTick>
 8005998:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599a:	e00a      	b.n	80059b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800599c:	f7fe f8c8 	bl	8003b30 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e06e      	b.n	8005a90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b2:	4b3a      	ldr	r3, [pc, #232]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 020c 	and.w	r2, r3, #12
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d1eb      	bne.n	800599c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d010      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	4b31      	ldr	r3, [pc, #196]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059dc:	429a      	cmp	r2, r3
 80059de:	d208      	bcs.n	80059f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e0:	4b2e      	ldr	r3, [pc, #184]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	492b      	ldr	r1, [pc, #172]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059f2:	4b29      	ldr	r3, [pc, #164]	@ (8005a98 <HAL_RCC_ClockConfig+0x1ec>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d210      	bcs.n	8005a22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a00:	4b25      	ldr	r3, [pc, #148]	@ (8005a98 <HAL_RCC_ClockConfig+0x1ec>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f023 0207 	bic.w	r2, r3, #7
 8005a08:	4923      	ldr	r1, [pc, #140]	@ (8005a98 <HAL_RCC_ClockConfig+0x1ec>)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a10:	4b21      	ldr	r3, [pc, #132]	@ (8005a98 <HAL_RCC_ClockConfig+0x1ec>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d001      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e036      	b.n	8005a90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	4918      	ldr	r1, [pc, #96]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0308 	and.w	r3, r3, #8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d009      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a4c:	4b13      	ldr	r3, [pc, #76]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4910      	ldr	r1, [pc, #64]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a60:	f000 f824 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4b0d      	ldr	r3, [pc, #52]	@ (8005a9c <HAL_RCC_ClockConfig+0x1f0>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	091b      	lsrs	r3, r3, #4
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	490b      	ldr	r1, [pc, #44]	@ (8005aa0 <HAL_RCC_ClockConfig+0x1f4>)
 8005a72:	5ccb      	ldrb	r3, [r1, r3]
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7c:	4a09      	ldr	r2, [pc, #36]	@ (8005aa4 <HAL_RCC_ClockConfig+0x1f8>)
 8005a7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a80:	4b09      	ldr	r3, [pc, #36]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1fc>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fe f803 	bl	8003a90 <HAL_InitTick>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a8e:	7afb      	ldrb	r3, [r7, #11]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40022000 	.word	0x40022000
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	08011b00 	.word	0x08011b00
 8005aa4:	2000000c 	.word	0x2000000c
 8005aa8:	20000044 	.word	0x20000044

08005aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b089      	sub	sp, #36	@ 0x24
 8005ab0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61fb      	str	r3, [r7, #28]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aba:	4b3e      	ldr	r3, [pc, #248]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 030c 	and.w	r3, r3, #12
 8005ac2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0303 	and.w	r3, r3, #3
 8005acc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2b0c      	cmp	r3, #12
 8005ad8:	d121      	bne.n	8005b1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d11e      	bne.n	8005b1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ae0:	4b34      	ldr	r3, [pc, #208]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d107      	bne.n	8005afc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005aec:	4b31      	ldr	r3, [pc, #196]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005af2:	0a1b      	lsrs	r3, r3, #8
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	e005      	b.n	8005b08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005afc:	4b2d      	ldr	r3, [pc, #180]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	091b      	lsrs	r3, r3, #4
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b08:	4a2b      	ldr	r2, [pc, #172]	@ (8005bb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10d      	bne.n	8005b34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b1c:	e00a      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d102      	bne.n	8005b2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b24:	4b25      	ldr	r3, [pc, #148]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x110>)
 8005b26:	61bb      	str	r3, [r7, #24]
 8005b28:	e004      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d101      	bne.n	8005b34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b30:	4b23      	ldr	r3, [pc, #140]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b0c      	cmp	r3, #12
 8005b38:	d134      	bne.n	8005ba4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d003      	beq.n	8005b52 <HAL_RCC_GetSysClockFreq+0xa6>
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d003      	beq.n	8005b58 <HAL_RCC_GetSysClockFreq+0xac>
 8005b50:	e005      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b52:	4b1a      	ldr	r3, [pc, #104]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x110>)
 8005b54:	617b      	str	r3, [r7, #20]
      break;
 8005b56:	e005      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b58:	4b19      	ldr	r3, [pc, #100]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b5a:	617b      	str	r3, [r7, #20]
      break;
 8005b5c:	e002      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	617b      	str	r3, [r7, #20]
      break;
 8005b62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b64:	4b13      	ldr	r3, [pc, #76]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	091b      	lsrs	r3, r3, #4
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	3301      	adds	r3, #1
 8005b70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b72:	4b10      	ldr	r3, [pc, #64]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	0a1b      	lsrs	r3, r3, #8
 8005b78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	fb03 f202 	mul.w	r2, r3, r2
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	0e5b      	lsrs	r3, r3, #25
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	3301      	adds	r3, #1
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ba4:	69bb      	ldr	r3, [r7, #24]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3724      	adds	r7, #36	@ 0x24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	08011b18 	.word	0x08011b18
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	007a1200 	.word	0x007a1200

08005bc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc8:	4b03      	ldr	r3, [pc, #12]	@ (8005bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bca:	681b      	ldr	r3, [r3, #0]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	2000000c 	.word	0x2000000c

08005bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005be0:	f7ff fff0 	bl	8005bc4 <HAL_RCC_GetHCLKFreq>
 8005be4:	4602      	mov	r2, r0
 8005be6:	4b06      	ldr	r3, [pc, #24]	@ (8005c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	0a1b      	lsrs	r3, r3, #8
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	4904      	ldr	r1, [pc, #16]	@ (8005c04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bf2:	5ccb      	ldrb	r3, [r1, r3]
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40021000 	.word	0x40021000
 8005c04:	08011b10 	.word	0x08011b10

08005c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c0c:	f7ff ffda 	bl	8005bc4 <HAL_RCC_GetHCLKFreq>
 8005c10:	4602      	mov	r2, r0
 8005c12:	4b06      	ldr	r3, [pc, #24]	@ (8005c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	0adb      	lsrs	r3, r3, #11
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	4904      	ldr	r1, [pc, #16]	@ (8005c30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c1e:	5ccb      	ldrb	r3, [r1, r3]
 8005c20:	f003 031f 	and.w	r3, r3, #31
 8005c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	08011b10 	.word	0x08011b10

08005c34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c40:	4b2a      	ldr	r3, [pc, #168]	@ (8005cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c4c:	f7ff f9ee 	bl	800502c <HAL_PWREx_GetVoltageRange>
 8005c50:	6178      	str	r0, [r7, #20]
 8005c52:	e014      	b.n	8005c7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c54:	4b25      	ldr	r3, [pc, #148]	@ (8005cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c58:	4a24      	ldr	r2, [pc, #144]	@ (8005cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c60:	4b22      	ldr	r3, [pc, #136]	@ (8005cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c6c:	f7ff f9de 	bl	800502c <HAL_PWREx_GetVoltageRange>
 8005c70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c72:	4b1e      	ldr	r3, [pc, #120]	@ (8005cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c76:	4a1d      	ldr	r2, [pc, #116]	@ (8005cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c84:	d10b      	bne.n	8005c9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b80      	cmp	r3, #128	@ 0x80
 8005c8a:	d919      	bls.n	8005cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005c90:	d902      	bls.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c92:	2302      	movs	r3, #2
 8005c94:	613b      	str	r3, [r7, #16]
 8005c96:	e013      	b.n	8005cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c98:	2301      	movs	r3, #1
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	e010      	b.n	8005cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b80      	cmp	r3, #128	@ 0x80
 8005ca2:	d902      	bls.n	8005caa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	e00a      	b.n	8005cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b80      	cmp	r3, #128	@ 0x80
 8005cae:	d102      	bne.n	8005cb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	e004      	b.n	8005cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b70      	cmp	r3, #112	@ 0x70
 8005cba:	d101      	bne.n	8005cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f023 0207 	bic.w	r2, r3, #7
 8005cc8:	4909      	ldr	r1, [pc, #36]	@ (8005cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005cd0:	4b07      	ldr	r3, [pc, #28]	@ (8005cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d001      	beq.n	8005ce2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	40022000 	.word	0x40022000

08005cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d00:	2300      	movs	r3, #0
 8005d02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d041      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d14:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d18:	d02a      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005d1a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d1e:	d824      	bhi.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d24:	d008      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005d26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d2a:	d81e      	bhi.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005d30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d34:	d010      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d36:	e018      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d38:	4b86      	ldr	r3, [pc, #536]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4a85      	ldr	r2, [pc, #532]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d44:	e015      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 facb 	bl	80062e8 <RCCEx_PLLSAI1_Config>
 8005d52:	4603      	mov	r3, r0
 8005d54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d56:	e00c      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3320      	adds	r3, #32
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fbb6 	bl	80064d0 <RCCEx_PLLSAI2_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d68:	e003      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	74fb      	strb	r3, [r7, #19]
      break;
 8005d6e:	e000      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d72:	7cfb      	ldrb	r3, [r7, #19]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10b      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d78:	4b76      	ldr	r3, [pc, #472]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d86:	4973      	ldr	r1, [pc, #460]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d8e:	e001      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d90:	7cfb      	ldrb	r3, [r7, #19]
 8005d92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d041      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005da4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005da8:	d02a      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005daa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005dae:	d824      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005db0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005db4:	d008      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005db6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dba:	d81e      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005dc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dc4:	d010      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005dc6:	e018      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005dc8:	4b62      	ldr	r3, [pc, #392]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	4a61      	ldr	r2, [pc, #388]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dd2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005dd4:	e015      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fa83 	bl	80062e8 <RCCEx_PLLSAI1_Config>
 8005de2:	4603      	mov	r3, r0
 8005de4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005de6:	e00c      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3320      	adds	r3, #32
 8005dec:	2100      	movs	r1, #0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fb6e 	bl	80064d0 <RCCEx_PLLSAI2_Config>
 8005df4:	4603      	mov	r3, r0
 8005df6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005df8:	e003      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	74fb      	strb	r3, [r7, #19]
      break;
 8005dfe:	e000      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e02:	7cfb      	ldrb	r3, [r7, #19]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10b      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e08:	4b52      	ldr	r3, [pc, #328]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e16:	494f      	ldr	r1, [pc, #316]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005e1e:	e001      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e20:	7cfb      	ldrb	r3, [r7, #19]
 8005e22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80a0 	beq.w	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e32:	2300      	movs	r3, #0
 8005e34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e36:	4b47      	ldr	r3, [pc, #284]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005e46:	2300      	movs	r3, #0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00d      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e4c:	4b41      	ldr	r3, [pc, #260]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e50:	4a40      	ldr	r2, [pc, #256]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e58:	4b3e      	ldr	r3, [pc, #248]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e60:	60bb      	str	r3, [r7, #8]
 8005e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e64:	2301      	movs	r3, #1
 8005e66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e68:	4b3b      	ldr	r3, [pc, #236]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a3a      	ldr	r2, [pc, #232]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e74:	f7fd fe5c 	bl	8003b30 <HAL_GetTick>
 8005e78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e7a:	e009      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e7c:	f7fd fe58 	bl	8003b30 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d902      	bls.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	74fb      	strb	r3, [r7, #19]
        break;
 8005e8e:	e005      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e90:	4b31      	ldr	r3, [pc, #196]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0ef      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005e9c:	7cfb      	ldrb	r3, [r7, #19]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d15c      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ea8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01f      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d019      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ec0:	4b24      	ldr	r3, [pc, #144]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ecc:	4b21      	ldr	r3, [pc, #132]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed2:	4a20      	ldr	r2, [pc, #128]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005edc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005eec:	4a19      	ldr	r2, [pc, #100]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d016      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efe:	f7fd fe17 	bl	8003b30 <HAL_GetTick>
 8005f02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f04:	e00b      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f06:	f7fd fe13 	bl	8003b30 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d902      	bls.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	74fb      	strb	r3, [r7, #19]
            break;
 8005f1c:	e006      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0ec      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005f2c:	7cfb      	ldrb	r3, [r7, #19]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10c      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f32:	4b08      	ldr	r3, [pc, #32]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f42:	4904      	ldr	r1, [pc, #16]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005f4a:	e009      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f4c:	7cfb      	ldrb	r3, [r7, #19]
 8005f4e:	74bb      	strb	r3, [r7, #18]
 8005f50:	e006      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005f52:	bf00      	nop
 8005f54:	40021000 	.word	0x40021000
 8005f58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5c:	7cfb      	ldrb	r3, [r7, #19]
 8005f5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f60:	7c7b      	ldrb	r3, [r7, #17]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d105      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f66:	4b9e      	ldr	r3, [pc, #632]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6a:	4a9d      	ldr	r2, [pc, #628]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f7e:	4b98      	ldr	r3, [pc, #608]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f84:	f023 0203 	bic.w	r2, r3, #3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8c:	4994      	ldr	r1, [pc, #592]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fa0:	4b8f      	ldr	r3, [pc, #572]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa6:	f023 020c 	bic.w	r2, r3, #12
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fae:	498c      	ldr	r1, [pc, #560]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fc2:	4b87      	ldr	r3, [pc, #540]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd0:	4983      	ldr	r1, [pc, #524]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff2:	497b      	ldr	r1, [pc, #492]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006006:	4b76      	ldr	r3, [pc, #472]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006014:	4972      	ldr	r1, [pc, #456]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006016:	4313      	orrs	r3, r2
 8006018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006028:	4b6d      	ldr	r3, [pc, #436]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006036:	496a      	ldr	r1, [pc, #424]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800604a:	4b65      	ldr	r3, [pc, #404]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800604c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006050:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006058:	4961      	ldr	r1, [pc, #388]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800606c:	4b5c      	ldr	r3, [pc, #368]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800606e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006072:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800607a:	4959      	ldr	r1, [pc, #356]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800607c:	4313      	orrs	r3, r2
 800607e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800608e:	4b54      	ldr	r3, [pc, #336]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006094:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609c:	4950      	ldr	r1, [pc, #320]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060b0:	4b4b      	ldr	r3, [pc, #300]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060be:	4948      	ldr	r1, [pc, #288]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060d2:	4b43      	ldr	r3, [pc, #268]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e0:	493f      	ldr	r1, [pc, #252]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d028      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060f4:	4b3a      	ldr	r3, [pc, #232]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006102:	4937      	ldr	r1, [pc, #220]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800610e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006112:	d106      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006114:	4b32      	ldr	r3, [pc, #200]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4a31      	ldr	r2, [pc, #196]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800611a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800611e:	60d3      	str	r3, [r2, #12]
 8006120:	e011      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006126:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800612a:	d10c      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3304      	adds	r3, #4
 8006130:	2101      	movs	r1, #1
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f8d8 	bl	80062e8 <RCCEx_PLLSAI1_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800613c:	7cfb      	ldrb	r3, [r7, #19]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006142:	7cfb      	ldrb	r3, [r7, #19]
 8006144:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d028      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006152:	4b23      	ldr	r3, [pc, #140]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006158:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006160:	491f      	ldr	r1, [pc, #124]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800616c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006170:	d106      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006172:	4b1b      	ldr	r3, [pc, #108]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	4a1a      	ldr	r2, [pc, #104]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006178:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800617c:	60d3      	str	r3, [r2, #12]
 800617e:	e011      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006184:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006188:	d10c      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3304      	adds	r3, #4
 800618e:	2101      	movs	r1, #1
 8006190:	4618      	mov	r0, r3
 8006192:	f000 f8a9 	bl	80062e8 <RCCEx_PLLSAI1_Config>
 8006196:	4603      	mov	r3, r0
 8006198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800619a:	7cfb      	ldrb	r3, [r7, #19]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80061a0:	7cfb      	ldrb	r3, [r7, #19]
 80061a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d02b      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061b0:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061be:	4908      	ldr	r1, [pc, #32]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ce:	d109      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061d0:	4b03      	ldr	r3, [pc, #12]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	4a02      	ldr	r2, [pc, #8]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061da:	60d3      	str	r3, [r2, #12]
 80061dc:	e014      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80061de:	bf00      	nop
 80061e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061ec:	d10c      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3304      	adds	r3, #4
 80061f2:	2101      	movs	r1, #1
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 f877 	bl	80062e8 <RCCEx_PLLSAI1_Config>
 80061fa:	4603      	mov	r3, r0
 80061fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061fe:	7cfb      	ldrb	r3, [r7, #19]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006204:	7cfb      	ldrb	r3, [r7, #19]
 8006206:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d02f      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006214:	4b2b      	ldr	r3, [pc, #172]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006222:	4928      	ldr	r1, [pc, #160]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800622e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006232:	d10d      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3304      	adds	r3, #4
 8006238:	2102      	movs	r1, #2
 800623a:	4618      	mov	r0, r3
 800623c:	f000 f854 	bl	80062e8 <RCCEx_PLLSAI1_Config>
 8006240:	4603      	mov	r3, r0
 8006242:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006244:	7cfb      	ldrb	r3, [r7, #19]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d014      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800624a:	7cfb      	ldrb	r3, [r7, #19]
 800624c:	74bb      	strb	r3, [r7, #18]
 800624e:	e011      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006254:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006258:	d10c      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3320      	adds	r3, #32
 800625e:	2102      	movs	r1, #2
 8006260:	4618      	mov	r0, r3
 8006262:	f000 f935 	bl	80064d0 <RCCEx_PLLSAI2_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800626a:	7cfb      	ldrb	r3, [r7, #19]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006270:	7cfb      	ldrb	r3, [r7, #19]
 8006272:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006280:	4b10      	ldr	r3, [pc, #64]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006286:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800628e:	490d      	ldr	r1, [pc, #52]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006290:	4313      	orrs	r3, r2
 8006292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00b      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062a2:	4b08      	ldr	r3, [pc, #32]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062b2:	4904      	ldr	r1, [pc, #16]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80062ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40021000 	.word	0x40021000

080062c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80062cc:	4b05      	ldr	r3, [pc, #20]	@ (80062e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a04      	ldr	r2, [pc, #16]	@ (80062e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80062d2:	f043 0304 	orr.w	r3, r3, #4
 80062d6:	6013      	str	r3, [r2, #0]
}
 80062d8:	bf00      	nop
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40021000 	.word	0x40021000

080062e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062f6:	4b75      	ldr	r3, [pc, #468]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f003 0303 	and.w	r3, r3, #3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d018      	beq.n	8006334 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006302:	4b72      	ldr	r3, [pc, #456]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f003 0203 	and.w	r2, r3, #3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d10d      	bne.n	800632e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
       ||
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800631a:	4b6c      	ldr	r3, [pc, #432]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	091b      	lsrs	r3, r3, #4
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
       ||
 800632a:	429a      	cmp	r2, r3
 800632c:	d047      	beq.n	80063be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	73fb      	strb	r3, [r7, #15]
 8006332:	e044      	b.n	80063be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b03      	cmp	r3, #3
 800633a:	d018      	beq.n	800636e <RCCEx_PLLSAI1_Config+0x86>
 800633c:	2b03      	cmp	r3, #3
 800633e:	d825      	bhi.n	800638c <RCCEx_PLLSAI1_Config+0xa4>
 8006340:	2b01      	cmp	r3, #1
 8006342:	d002      	beq.n	800634a <RCCEx_PLLSAI1_Config+0x62>
 8006344:	2b02      	cmp	r3, #2
 8006346:	d009      	beq.n	800635c <RCCEx_PLLSAI1_Config+0x74>
 8006348:	e020      	b.n	800638c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800634a:	4b60      	ldr	r3, [pc, #384]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d11d      	bne.n	8006392 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800635a:	e01a      	b.n	8006392 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800635c:	4b5b      	ldr	r3, [pc, #364]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006364:	2b00      	cmp	r3, #0
 8006366:	d116      	bne.n	8006396 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800636c:	e013      	b.n	8006396 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800636e:	4b57      	ldr	r3, [pc, #348]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10f      	bne.n	800639a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800637a:	4b54      	ldr	r3, [pc, #336]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800638a:	e006      	b.n	800639a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	73fb      	strb	r3, [r7, #15]
      break;
 8006390:	e004      	b.n	800639c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006392:	bf00      	nop
 8006394:	e002      	b.n	800639c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006396:	bf00      	nop
 8006398:	e000      	b.n	800639c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800639a:	bf00      	nop
    }

    if(status == HAL_OK)
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10d      	bne.n	80063be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80063a2:	4b4a      	ldr	r3, [pc, #296]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6819      	ldr	r1, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	430b      	orrs	r3, r1
 80063b8:	4944      	ldr	r1, [pc, #272]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d17d      	bne.n	80064c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80063c4:	4b41      	ldr	r3, [pc, #260]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a40      	ldr	r2, [pc, #256]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063d0:	f7fd fbae 	bl	8003b30 <HAL_GetTick>
 80063d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063d6:	e009      	b.n	80063ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063d8:	f7fd fbaa 	bl	8003b30 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d902      	bls.n	80063ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	73fb      	strb	r3, [r7, #15]
        break;
 80063ea:	e005      	b.n	80063f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063ec:	4b37      	ldr	r3, [pc, #220]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1ef      	bne.n	80063d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d160      	bne.n	80064c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d111      	bne.n	8006428 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006404:	4b31      	ldr	r3, [pc, #196]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800640c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6892      	ldr	r2, [r2, #8]
 8006414:	0211      	lsls	r1, r2, #8
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68d2      	ldr	r2, [r2, #12]
 800641a:	0912      	lsrs	r2, r2, #4
 800641c:	0452      	lsls	r2, r2, #17
 800641e:	430a      	orrs	r2, r1
 8006420:	492a      	ldr	r1, [pc, #168]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006422:	4313      	orrs	r3, r2
 8006424:	610b      	str	r3, [r1, #16]
 8006426:	e027      	b.n	8006478 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d112      	bne.n	8006454 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800642e:	4b27      	ldr	r3, [pc, #156]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006436:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6892      	ldr	r2, [r2, #8]
 800643e:	0211      	lsls	r1, r2, #8
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6912      	ldr	r2, [r2, #16]
 8006444:	0852      	lsrs	r2, r2, #1
 8006446:	3a01      	subs	r2, #1
 8006448:	0552      	lsls	r2, r2, #21
 800644a:	430a      	orrs	r2, r1
 800644c:	491f      	ldr	r1, [pc, #124]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800644e:	4313      	orrs	r3, r2
 8006450:	610b      	str	r3, [r1, #16]
 8006452:	e011      	b.n	8006478 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006454:	4b1d      	ldr	r3, [pc, #116]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800645c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6892      	ldr	r2, [r2, #8]
 8006464:	0211      	lsls	r1, r2, #8
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6952      	ldr	r2, [r2, #20]
 800646a:	0852      	lsrs	r2, r2, #1
 800646c:	3a01      	subs	r2, #1
 800646e:	0652      	lsls	r2, r2, #25
 8006470:	430a      	orrs	r2, r1
 8006472:	4916      	ldr	r1, [pc, #88]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006474:	4313      	orrs	r3, r2
 8006476:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006478:	4b14      	ldr	r3, [pc, #80]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a13      	ldr	r2, [pc, #76]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800647e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006482:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006484:	f7fd fb54 	bl	8003b30 <HAL_GetTick>
 8006488:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800648a:	e009      	b.n	80064a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800648c:	f7fd fb50 	bl	8003b30 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d902      	bls.n	80064a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	73fb      	strb	r3, [r7, #15]
          break;
 800649e:	e005      	b.n	80064ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064a0:	4b0a      	ldr	r3, [pc, #40]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0ef      	beq.n	800648c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80064b2:	4b06      	ldr	r3, [pc, #24]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80064b4:	691a      	ldr	r2, [r3, #16]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	4904      	ldr	r1, [pc, #16]	@ (80064cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	40021000 	.word	0x40021000

080064d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064de:	4b6a      	ldr	r3, [pc, #424]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d018      	beq.n	800651c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80064ea:	4b67      	ldr	r3, [pc, #412]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f003 0203 	and.w	r2, r3, #3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d10d      	bne.n	8006516 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
       ||
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d009      	beq.n	8006516 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006502:	4b61      	ldr	r3, [pc, #388]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	091b      	lsrs	r3, r3, #4
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
       ||
 8006512:	429a      	cmp	r2, r3
 8006514:	d047      	beq.n	80065a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	73fb      	strb	r3, [r7, #15]
 800651a:	e044      	b.n	80065a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b03      	cmp	r3, #3
 8006522:	d018      	beq.n	8006556 <RCCEx_PLLSAI2_Config+0x86>
 8006524:	2b03      	cmp	r3, #3
 8006526:	d825      	bhi.n	8006574 <RCCEx_PLLSAI2_Config+0xa4>
 8006528:	2b01      	cmp	r3, #1
 800652a:	d002      	beq.n	8006532 <RCCEx_PLLSAI2_Config+0x62>
 800652c:	2b02      	cmp	r3, #2
 800652e:	d009      	beq.n	8006544 <RCCEx_PLLSAI2_Config+0x74>
 8006530:	e020      	b.n	8006574 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006532:	4b55      	ldr	r3, [pc, #340]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d11d      	bne.n	800657a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006542:	e01a      	b.n	800657a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006544:	4b50      	ldr	r3, [pc, #320]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800654c:	2b00      	cmp	r3, #0
 800654e:	d116      	bne.n	800657e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006554:	e013      	b.n	800657e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006556:	4b4c      	ldr	r3, [pc, #304]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10f      	bne.n	8006582 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006562:	4b49      	ldr	r3, [pc, #292]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d109      	bne.n	8006582 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006572:	e006      	b.n	8006582 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	73fb      	strb	r3, [r7, #15]
      break;
 8006578:	e004      	b.n	8006584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800657a:	bf00      	nop
 800657c:	e002      	b.n	8006584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800657e:	bf00      	nop
 8006580:	e000      	b.n	8006584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006582:	bf00      	nop
    }

    if(status == HAL_OK)
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10d      	bne.n	80065a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800658a:	4b3f      	ldr	r3, [pc, #252]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6819      	ldr	r1, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	3b01      	subs	r3, #1
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	430b      	orrs	r3, r1
 80065a0:	4939      	ldr	r1, [pc, #228]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d167      	bne.n	800667c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80065ac:	4b36      	ldr	r3, [pc, #216]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a35      	ldr	r2, [pc, #212]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065b8:	f7fd faba 	bl	8003b30 <HAL_GetTick>
 80065bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065be:	e009      	b.n	80065d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065c0:	f7fd fab6 	bl	8003b30 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d902      	bls.n	80065d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	73fb      	strb	r3, [r7, #15]
        break;
 80065d2:	e005      	b.n	80065e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065d4:	4b2c      	ldr	r3, [pc, #176]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ef      	bne.n	80065c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d14a      	bne.n	800667c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d111      	bne.n	8006610 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065ec:	4b26      	ldr	r3, [pc, #152]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80065f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6892      	ldr	r2, [r2, #8]
 80065fc:	0211      	lsls	r1, r2, #8
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68d2      	ldr	r2, [r2, #12]
 8006602:	0912      	lsrs	r2, r2, #4
 8006604:	0452      	lsls	r2, r2, #17
 8006606:	430a      	orrs	r2, r1
 8006608:	491f      	ldr	r1, [pc, #124]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800660a:	4313      	orrs	r3, r2
 800660c:	614b      	str	r3, [r1, #20]
 800660e:	e011      	b.n	8006634 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006610:	4b1d      	ldr	r3, [pc, #116]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006618:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6892      	ldr	r2, [r2, #8]
 8006620:	0211      	lsls	r1, r2, #8
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6912      	ldr	r2, [r2, #16]
 8006626:	0852      	lsrs	r2, r2, #1
 8006628:	3a01      	subs	r2, #1
 800662a:	0652      	lsls	r2, r2, #25
 800662c:	430a      	orrs	r2, r1
 800662e:	4916      	ldr	r1, [pc, #88]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006630:	4313      	orrs	r3, r2
 8006632:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006634:	4b14      	ldr	r3, [pc, #80]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a13      	ldr	r2, [pc, #76]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800663a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800663e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006640:	f7fd fa76 	bl	8003b30 <HAL_GetTick>
 8006644:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006646:	e009      	b.n	800665c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006648:	f7fd fa72 	bl	8003b30 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d902      	bls.n	800665c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	73fb      	strb	r3, [r7, #15]
          break;
 800665a:	e005      	b.n	8006668 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800665c:	4b0a      	ldr	r3, [pc, #40]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0ef      	beq.n	8006648 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800666e:	4b06      	ldr	r3, [pc, #24]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006670:	695a      	ldr	r2, [r3, #20]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	4904      	ldr	r1, [pc, #16]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006678:	4313      	orrs	r3, r2
 800667a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800667c:	7bfb      	ldrb	r3, [r7, #15]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40021000 	.word	0x40021000

0800668c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e0be      	b.n	800681c <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d108      	bne.n	80066b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066ae:	d009      	beq.n	80066c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	61da      	str	r2, [r3, #28]
 80066b6:	e005      	b.n	80066c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d106      	bne.n	80066de <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7fa fff1 	bl	80016c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2202      	movs	r2, #2
 80066e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066f4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066fe:	d902      	bls.n	8006706 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006700:	2300      	movs	r3, #0
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e002      	b.n	800670c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800670a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006714:	d007      	beq.n	8006726 <HAL_SPI_Init+0x9a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800671e:	d002      	beq.n	8006726 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006768:	ea42 0103 	orr.w	r1, r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006770:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006784:	d11b      	bne.n	80067be <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10b      	bne.n	80067a6 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006796:	d903      	bls.n	80067a0 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	631a      	str	r2, [r3, #48]	@ 0x30
 800679e:	e002      	b.n	80067a6 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d107      	bne.n	80067be <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	0c1b      	lsrs	r3, r3, #16
 80067c4:	f003 0204 	and.w	r2, r3, #4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	431a      	orrs	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80067e4:	ea42 0103 	orr.w	r1, r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067fe:	d105      	bne.n	800680c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	b292      	uxth	r2, r2
 800680a:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e01a      	b.n	800686c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2202      	movs	r2, #2
 800683a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800684c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fa ff7a 	bl	8001748 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	@ 0x28
 8006878:	af02      	add	r7, sp, #8
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	4613      	mov	r3, r2
 8006882:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	617b      	str	r3, [r7, #20]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b01      	cmp	r3, #1
 8006896:	d001      	beq.n	800689c <HAL_SPI_Receive+0x28>
  {
    return HAL_BUSY;
 8006898:	2302      	movs	r3, #2
 800689a:	e1e0      	b.n	8006c5e <HAL_SPI_Receive+0x3ea>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068a4:	d112      	bne.n	80068cc <HAL_SPI_Receive+0x58>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10e      	bne.n	80068cc <HAL_SPI_Receive+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2204      	movs	r2, #4
 80068b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80068b6:	88fa      	ldrh	r2, [r7, #6]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 f9cf 	bl	8006c66 <HAL_SPI_TransmitReceive>
 80068c8:	4603      	mov	r3, r0
 80068ca:	e1c8      	b.n	8006c5e <HAL_SPI_Receive+0x3ea>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068cc:	f7fd f930 	bl	8003b30 <HAL_GetTick>
 80068d0:	61f8      	str	r0, [r7, #28]

  if ((pData == NULL) || (Size == 0U))
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <HAL_SPI_Receive+0x6a>
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_SPI_Receive+0x6e>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e1bd      	b.n	8006c5e <HAL_SPI_Receive+0x3ea>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_SPI_Receive+0x7c>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e1b6      	b.n	8006c5e <HAL_SPI_Receive+0x3ea>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2204      	movs	r2, #4
 80068fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	88fa      	ldrh	r2, [r7, #6]
 8006910:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	88fa      	ldrh	r2, [r7, #6]
 8006918:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006942:	d118      	bne.n	8006976 <HAL_SPI_Receive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006962:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800697e:	d908      	bls.n	8006992 <HAL_SPI_Receive+0x11e>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800698e:	605a      	str	r2, [r3, #4]
 8006990:	e007      	b.n	80069a2 <HAL_SPI_Receive+0x12e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80069a0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069aa:	d10f      	bne.n	80069cc <HAL_SPI_Receive+0x158>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80069ca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d6:	2b40      	cmp	r3, #64	@ 0x40
 80069d8:	d007      	beq.n	80069ea <HAL_SPI_Receive+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069e8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069f2:	d875      	bhi.n	8006ae0 <HAL_SPI_Receive+0x26c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80069f4:	e037      	b.n	8006a66 <HAL_SPI_Receive+0x1f2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d117      	bne.n	8006a34 <HAL_SPI_Receive+0x1c0>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f103 020c 	add.w	r2, r3, #12
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a10:	7812      	ldrb	r2, [r2, #0]
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006a32:	e018      	b.n	8006a66 <HAL_SPI_Receive+0x1f2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a34:	f7fd f87c 	bl	8003b30 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d803      	bhi.n	8006a4c <HAL_SPI_Receive+0x1d8>
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d102      	bne.n	8006a52 <HAL_SPI_Receive+0x1de>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d109      	bne.n	8006a66 <HAL_SPI_Receive+0x1f2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e0fb      	b.n	8006c5e <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1c1      	bne.n	80069f6 <HAL_SPI_Receive+0x182>
 8006a72:	e03b      	b.n	8006aec <HAL_SPI_Receive+0x278>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d115      	bne.n	8006aae <HAL_SPI_Receive+0x23a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8c:	b292      	uxth	r2, r2
 8006a8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a94:	1c9a      	adds	r2, r3, #2
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006aac:	e018      	b.n	8006ae0 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aae:	f7fd f83f 	bl	8003b30 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d803      	bhi.n	8006ac6 <HAL_SPI_Receive+0x252>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac4:	d102      	bne.n	8006acc <HAL_SPI_Receive+0x258>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d109      	bne.n	8006ae0 <HAL_SPI_Receive+0x26c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e0be      	b.n	8006c5e <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1c3      	bne.n	8006a74 <HAL_SPI_Receive+0x200>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006af4:	f040 8087 	bne.w	8006c06 <HAL_SPI_Receive+0x392>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b06:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	2101      	movs	r1, #1
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f001 fa0c 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      __HAL_UNLOCK(hspi);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e099      	b.n	8006c5e <HAL_SPI_Receive+0x3ea>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b32:	d907      	bls.n	8006b44 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	b292      	uxth	r2, r2
 8006b40:	801a      	strh	r2, [r3, #0]
 8006b42:	e008      	b.n	8006b56 <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f103 020c 	add.w	r2, r3, #12
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b50:	7812      	ldrb	r2, [r2, #0]
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	2101      	movs	r1, #1
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f001 f9e5 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00f      	beq.n	8006b8c <HAL_SPI_Receive+0x318>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b70:	f043 0202 	orr.w	r2, r3, #2
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e068      	b.n	8006c5e <HAL_SPI_Receive+0x3ea>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006b94:	d105      	bne.n	8006ba2 <HAL_SPI_Receive+0x32e>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	e031      	b.n	8006c06 <HAL_SPI_Receive+0x392>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	330c      	adds	r3, #12
 8006ba8:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006bb2:	7cfb      	ldrb	r3, [r7, #19]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bbc:	d123      	bne.n	8006c06 <HAL_SPI_Receive+0x392>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d11f      	bne.n	8006c06 <HAL_SPI_Receive+0x392>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	2101      	movs	r1, #1
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f001 f9ad 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00f      	beq.n	8006bfc <HAL_SPI_Receive+0x388>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be0:	f043 0202 	orr.w	r2, r3, #2
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e030      	b.n	8006c5e <HAL_SPI_Receive+0x3ea>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8006c04:	7cfb      	ldrb	r3, [r7, #19]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f001 faae 	bl	800816c <SPI_EndRxTransaction>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <HAL_SPI_Receive+0x3a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 0310 	and.w	r3, r3, #16
 8006c26:	2b10      	cmp	r3, #16
 8006c28:	d10a      	bne.n	8006c40 <HAL_SPI_Receive+0x3cc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c2e:	f043 0202 	orr.w	r2, r3, #2
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8006c3e:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_SPI_Receive+0x3e8>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e000      	b.n	8006c5e <HAL_SPI_Receive+0x3ea>
  }
  else
  {
    return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
  }
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b090      	sub	sp, #64	@ 0x40
 8006c6a:	af02      	add	r7, sp, #8
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	60b9      	str	r1, [r7, #8]
 8006c70:	607a      	str	r2, [r7, #4]
 8006c72:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	617b      	str	r3, [r7, #20]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c80:	f7fc ff56 	bl	8003b30 <HAL_GetTick>
 8006c84:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  tmp_mode            = hspi->Init.Mode;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  initial_TxXferCount = Size;
 8006c96:	887b      	ldrh	r3, [r7, #2]
 8006c98:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 8006c9a:	887b      	ldrh	r3, [r7, #2]
 8006c9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	623b      	str	r3, [r7, #32]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	61fb      	str	r3, [r7, #28]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006cae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d00d      	beq.n	8006cd2 <HAL_SPI_TransmitReceive+0x6c>
 8006cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cbc:	d107      	bne.n	8006cce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d103      	bne.n	8006cce <HAL_SPI_TransmitReceive+0x68>
 8006cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d001      	beq.n	8006cd2 <HAL_SPI_TransmitReceive+0x6c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e30f      	b.n	80072f2 <HAL_SPI_TransmitReceive+0x68c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_SPI_TransmitReceive+0x7e>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <HAL_SPI_TransmitReceive+0x7e>
 8006cde:	887b      	ldrh	r3, [r7, #2]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e304      	b.n	80072f2 <HAL_SPI_TransmitReceive+0x68c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d101      	bne.n	8006cf6 <HAL_SPI_TransmitReceive+0x90>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	e2fd      	b.n	80072f2 <HAL_SPI_TransmitReceive+0x68c>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d003      	beq.n	8006d12 <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2205      	movs	r2, #5
 8006d0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	887a      	ldrh	r2, [r7, #2]
 8006d22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	887a      	ldrh	r2, [r7, #2]
 8006d2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	887a      	ldrh	r2, [r7, #2]
 8006d38:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	887a      	ldrh	r2, [r7, #2]
 8006d3e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d54:	d10f      	bne.n	8006d76 <HAL_SPI_TransmitReceive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d74:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d7e:	d802      	bhi.n	8006d86 <HAL_SPI_TransmitReceive+0x120>
 8006d80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d908      	bls.n	8006d98 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d94:	605a      	str	r2, [r3, #4]
 8006d96:	e007      	b.n	8006da8 <HAL_SPI_TransmitReceive+0x142>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006da6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db2:	2b40      	cmp	r3, #64	@ 0x40
 8006db4:	d007      	beq.n	8006dc6 <HAL_SPI_TransmitReceive+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006dce:	f240 80d0 	bls.w	8006f72 <HAL_SPI_TransmitReceive+0x30c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_SPI_TransmitReceive+0x17c>
 8006dda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	f040 80ba 	bne.w	8006f56 <HAL_SPI_TransmitReceive+0x2f0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de6:	881a      	ldrh	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df2:	1c9a      	adds	r2, r3, #2
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f040 80a2 	bne.w	8006f56 <HAL_SPI_TransmitReceive+0x2f0>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e1a:	f040 809c 	bne.w	8006f56 <HAL_SPI_TransmitReceive+0x2f0>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10c      	bne.n	8006e42 <HAL_SPI_TransmitReceive+0x1dc>
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d007      	beq.n	8006e42 <HAL_SPI_TransmitReceive+0x1dc>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e40:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e50:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e52:	e080      	b.n	8006f56 <HAL_SPI_TransmitReceive+0x2f0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d13f      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x27c>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d03a      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x27c>
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d137      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x27c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e76:	881a      	ldrh	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e82:	1c9a      	adds	r2, r3, #2
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d11e      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x27c>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eac:	d119      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x27c>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10c      	bne.n	8006ed2 <HAL_SPI_TransmitReceive+0x26c>
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f003 0308 	and.w	r3, r3, #8
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d007      	beq.n	8006ed2 <HAL_SPI_TransmitReceive+0x26c>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ed0:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ee0:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d11c      	bne.n	8006f2a <HAL_SPI_TransmitReceive+0x2c4>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d016      	beq.n	8006f2a <HAL_SPI_TransmitReceive+0x2c4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f06:	b292      	uxth	r2, r2
 8006f08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0e:	1c9a      	adds	r2, r3, #2
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f26:	2301      	movs	r3, #1
 8006f28:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f2a:	f7fc fe01 	bl	8003b30 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d80d      	bhi.n	8006f56 <HAL_SPI_TransmitReceive+0x2f0>
 8006f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f40:	d009      	beq.n	8006f56 <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e1cd      	b.n	80072f2 <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f47f af79 	bne.w	8006e54 <HAL_SPI_TransmitReceive+0x1ee>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f47f af72 	bne.w	8006e54 <HAL_SPI_TransmitReceive+0x1ee>
 8006f70:	e12f      	b.n	80071d2 <HAL_SPI_TransmitReceive+0x56c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_SPI_TransmitReceive+0x31c>
 8006f7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	f040 811b 	bne.w	80071b8 <HAL_SPI_TransmitReceive+0x552>
    {
      if (hspi->TxXferCount > 1U)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d912      	bls.n	8006fb2 <HAL_SPI_TransmitReceive+0x34c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f90:	881a      	ldrh	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9c:	1c9a      	adds	r2, r3, #2
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b02      	subs	r3, #2
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fb0:	e102      	b.n	80071b8 <HAL_SPI_TransmitReceive+0x552>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	7812      	ldrb	r2, [r2, #0]
 8006fbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f040 80ea 	bne.w	80071b8 <HAL_SPI_TransmitReceive+0x552>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fec:	f040 80e4 	bne.w	80071b8 <HAL_SPI_TransmitReceive+0x552>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	f003 0304 	and.w	r3, r3, #4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10c      	bne.n	8007014 <HAL_SPI_TransmitReceive+0x3ae>
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	f003 0308 	and.w	r3, r3, #8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <HAL_SPI_TransmitReceive+0x3ae>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007012:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007022:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007024:	e0c8      	b.n	80071b8 <HAL_SPI_TransmitReceive+0x552>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b02      	cmp	r3, #2
 8007032:	d158      	bne.n	80070e6 <HAL_SPI_TransmitReceive+0x480>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d053      	beq.n	80070e6 <HAL_SPI_TransmitReceive+0x480>
 800703e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007040:	2b01      	cmp	r3, #1
 8007042:	d150      	bne.n	80070e6 <HAL_SPI_TransmitReceive+0x480>
      {
        if (hspi->TxXferCount > 1U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b01      	cmp	r3, #1
 800704c:	d912      	bls.n	8007074 <HAL_SPI_TransmitReceive+0x40e>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007052:	881a      	ldrh	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705e:	1c9a      	adds	r2, r3, #2
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b02      	subs	r3, #2
 800706c:	b29a      	uxth	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007072:	e012      	b.n	800709a <HAL_SPI_TransmitReceive+0x434>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	330c      	adds	r3, #12
 800707e:	7812      	ldrb	r2, [r2, #0]
 8007080:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d11e      	bne.n	80070e6 <HAL_SPI_TransmitReceive+0x480>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070b0:	d119      	bne.n	80070e6 <HAL_SPI_TransmitReceive+0x480>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10c      	bne.n	80070d6 <HAL_SPI_TransmitReceive+0x470>
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f003 0308 	and.w	r3, r3, #8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d007      	beq.n	80070d6 <HAL_SPI_TransmitReceive+0x470>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070d4:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070e4:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d148      	bne.n	8007186 <HAL_SPI_TransmitReceive+0x520>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d042      	beq.n	8007186 <HAL_SPI_TransmitReceive+0x520>
      {
        if (hspi->RxXferCount > 1U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007106:	b29b      	uxth	r3, r3
 8007108:	2b01      	cmp	r3, #1
 800710a:	d923      	bls.n	8007154 <HAL_SPI_TransmitReceive+0x4ee>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007116:	b292      	uxth	r2, r2
 8007118:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711e:	1c9a      	adds	r2, r3, #2
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b02      	subs	r3, #2
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b01      	cmp	r3, #1
 8007140:	d81f      	bhi.n	8007182 <HAL_SPI_TransmitReceive+0x51c>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	e016      	b.n	8007182 <HAL_SPI_TransmitReceive+0x51c>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f103 020c 	add.w	r2, r3, #12
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007160:	7812      	ldrb	r2, [r2, #0]
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007176:	b29b      	uxth	r3, r3
 8007178:	3b01      	subs	r3, #1
 800717a:	b29a      	uxth	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007182:	2301      	movs	r3, #1
 8007184:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007186:	f7fc fcd3 	bl	8003b30 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007192:	429a      	cmp	r2, r3
 8007194:	d803      	bhi.n	800719e <HAL_SPI_TransmitReceive+0x538>
 8007196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719c:	d102      	bne.n	80071a4 <HAL_SPI_TransmitReceive+0x53e>
 800719e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d109      	bne.n	80071b8 <HAL_SPI_TransmitReceive+0x552>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e09c      	b.n	80072f2 <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071bc:	b29b      	uxth	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f47f af31 	bne.w	8007026 <HAL_SPI_TransmitReceive+0x3c0>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f47f af2a 	bne.w	8007026 <HAL_SPI_TransmitReceive+0x3c0>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071da:	d152      	bne.n	8007282 <HAL_SPI_TransmitReceive+0x61c>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071e2:	2201      	movs	r2, #1
 80071e4:	2101      	movs	r1, #1
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 fea2 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00f      	beq.n	8007212 <HAL_SPI_TransmitReceive+0x5ac>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071f6:	f043 0202 	orr.w	r2, r3, #2
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e06f      	b.n	80072f2 <HAL_SPI_TransmitReceive+0x68c>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800721a:	d105      	bne.n	8007228 <HAL_SPI_TransmitReceive+0x5c2>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	e02c      	b.n	8007282 <HAL_SPI_TransmitReceive+0x61c>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	330c      	adds	r3, #12
 800722e:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	b2db      	uxtb	r3, r3
 8007236:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007238:	7cfb      	ldrb	r3, [r7, #19]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723e:	2b02      	cmp	r3, #2
 8007240:	d11f      	bne.n	8007282 <HAL_SPI_TransmitReceive+0x61c>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007248:	2201      	movs	r2, #1
 800724a:	2101      	movs	r1, #1
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fe6f 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00f      	beq.n	8007278 <HAL_SPI_TransmitReceive+0x612>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800725c:	f043 0202 	orr.w	r2, r3, #2
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e03c      	b.n	80072f2 <HAL_SPI_TransmitReceive+0x68c>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8007280:	7cfb      	ldrb	r3, [r7, #19]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f003 0310 	and.w	r3, r3, #16
 800728c:	2b10      	cmp	r3, #16
 800728e:	d110      	bne.n	80072b2 <HAL_SPI_TransmitReceive+0x64c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007294:	f043 0202 	orr.w	r2, r3, #2
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80072a4:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e01f      	b.n	80072f2 <HAL_SPI_TransmitReceive+0x68c>
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 ffb0 	bl	800821c <SPI_EndRxTxTransaction>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d008      	beq.n	80072d4 <HAL_SPI_TransmitReceive+0x66e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2220      	movs	r2, #32
 80072c6:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e00e      	b.n	80072f2 <HAL_SPI_TransmitReceive+0x68c>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <HAL_SPI_TransmitReceive+0x68a>
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e000      	b.n	80072f2 <HAL_SPI_TransmitReceive+0x68c>
  }
  else
  {
    return HAL_OK;
 80072f0:	2300      	movs	r3, #0
  }
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3738      	adds	r7, #56	@ 0x38
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4613      	mov	r3, r2
 8007308:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <HAL_SPI_Transmit_IT+0x1a>
 8007310:	88fb      	ldrh	r3, [r7, #6]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e082      	b.n	8007420 <HAL_SPI_Transmit_IT+0x124>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b01      	cmp	r3, #1
 8007324:	d001      	beq.n	800732a <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8007326:	2302      	movs	r3, #2
 8007328:	e07a      	b.n	8007420 <HAL_SPI_Transmit_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_SPI_Transmit_IT+0x3c>
 8007334:	2302      	movs	r3, #2
 8007336:	e073      	b.n	8007420 <HAL_SPI_Transmit_IT+0x124>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2203      	movs	r2, #3
 8007344:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	88fa      	ldrh	r2, [r7, #6]
 8007358:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	88fa      	ldrh	r2, [r7, #6]
 800735e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007384:	d903      	bls.n	800738e <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4a28      	ldr	r2, [pc, #160]	@ (800742c <HAL_SPI_Transmit_IT+0x130>)
 800738a:	651a      	str	r2, [r3, #80]	@ 0x50
 800738c:	e002      	b.n	8007394 <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4a27      	ldr	r2, [pc, #156]	@ (8007430 <HAL_SPI_Transmit_IT+0x134>)
 8007392:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800739c:	d10f      	bne.n	80073be <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073bc:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073c6:	d10f      	bne.n	80073e8 <HAL_SPI_Transmit_IT+0xec>
  {
    SPI_RESET_CRC(hspi);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073e6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f2:	2b40      	cmp	r3, #64	@ 0x40
 80073f4:	d007      	beq.n	8007406 <HAL_SPI_Transmit_IT+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007404:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 800741c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	08007ed1 	.word	0x08007ed1
 8007430:	08007e71 	.word	0x08007e71

08007434 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	4613      	mov	r3, r2
 8007440:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b01      	cmp	r3, #1
 800744c:	d001      	beq.n	8007452 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800744e:	2302      	movs	r3, #2
 8007450:	e0ba      	b.n	80075c8 <HAL_SPI_Receive_IT+0x194>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d110      	bne.n	800747c <HAL_SPI_Receive_IT+0x48>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007462:	d10b      	bne.n	800747c <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2204      	movs	r2, #4
 8007468:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800746c:	88fb      	ldrh	r3, [r7, #6]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	68b9      	ldr	r1, [r7, #8]
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 f8b0 	bl	80075d8 <HAL_SPI_TransmitReceive_IT>
 8007478:	4603      	mov	r3, r0
 800747a:	e0a5      	b.n	80075c8 <HAL_SPI_Receive_IT+0x194>
  }


  if ((pData == NULL) || (Size == 0U))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <HAL_SPI_Receive_IT+0x54>
 8007482:	88fb      	ldrh	r3, [r7, #6]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e09d      	b.n	80075c8 <HAL_SPI_Receive_IT+0x194>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <HAL_SPI_Receive_IT+0x66>
 8007496:	2302      	movs	r3, #2
 8007498:	e096      	b.n	80075c8 <HAL_SPI_Receive_IT+0x194>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2204      	movs	r2, #4
 80074a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	88fa      	ldrh	r2, [r7, #6]
 80074ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	88fa      	ldrh	r2, [r7, #6]
 80074c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80074e6:	d90b      	bls.n	8007500 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80074f6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4a35      	ldr	r2, [pc, #212]	@ (80075d0 <HAL_SPI_Receive_IT+0x19c>)
 80074fc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80074fe:	e00a      	b.n	8007516 <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800750e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4a30      	ldr	r2, [pc, #192]	@ (80075d4 <HAL_SPI_Receive_IT+0x1a0>)
 8007514:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800751e:	d10f      	bne.n	8007540 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800752e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800753e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007544:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007548:	d11f      	bne.n	800758a <HAL_SPI_Receive_IT+0x156>
  {
    hspi->CRCSize = 1U;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007558:	d806      	bhi.n	8007568 <HAL_SPI_Receive_IT+0x134>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755e:	2b02      	cmp	r3, #2
 8007560:	d102      	bne.n	8007568 <HAL_SPI_Receive_IT+0x134>
    {
      hspi->CRCSize = 2U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2202      	movs	r2, #2
 8007566:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	e002      	b.n	8007590 <HAL_SPI_Receive_IT+0x15c>
  }
  else
  {
    hspi->CRCSize = 0U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759a:	2b40      	cmp	r3, #64	@ 0x40
 800759c:	d007      	beq.n	80075ae <HAL_SPI_Receive_IT+0x17a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075ac:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80075c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	08007de9 	.word	0x08007de9
 80075d4:	08007d29 	.word	0x08007d29

080075d8 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80075ec:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d00c      	beq.n	8007614 <HAL_SPI_TransmitReceive_IT+0x3c>
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007600:	d106      	bne.n	8007610 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d102      	bne.n	8007610 <HAL_SPI_TransmitReceive_IT+0x38>
 800760a:	7dfb      	ldrb	r3, [r7, #23]
 800760c:	2b04      	cmp	r3, #4
 800760e:	d001      	beq.n	8007614 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007610:	2302      	movs	r3, #2
 8007612:	e0a5      	b.n	8007760 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d005      	beq.n	8007626 <HAL_SPI_TransmitReceive_IT+0x4e>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <HAL_SPI_TransmitReceive_IT+0x4e>
 8007620:	887b      	ldrh	r3, [r7, #2]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e09a      	b.n	8007760 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007630:	2b01      	cmp	r3, #1
 8007632:	d101      	bne.n	8007638 <HAL_SPI_TransmitReceive_IT+0x60>
 8007634:	2302      	movs	r3, #2
 8007636:	e093      	b.n	8007760 <HAL_SPI_TransmitReceive_IT+0x188>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b04      	cmp	r3, #4
 800764a:	d003      	beq.n	8007654 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2205      	movs	r2, #5
 8007650:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	887a      	ldrh	r2, [r7, #2]
 8007664:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	887a      	ldrh	r2, [r7, #2]
 800766a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	887a      	ldrh	r2, [r7, #2]
 8007676:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	887a      	ldrh	r2, [r7, #2]
 800767e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800768a:	d906      	bls.n	800769a <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4a37      	ldr	r2, [pc, #220]	@ (800776c <HAL_SPI_TransmitReceive_IT+0x194>)
 8007690:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4a36      	ldr	r2, [pc, #216]	@ (8007770 <HAL_SPI_TransmitReceive_IT+0x198>)
 8007696:	651a      	str	r2, [r3, #80]	@ 0x50
 8007698:	e005      	b.n	80076a6 <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4a35      	ldr	r2, [pc, #212]	@ (8007774 <HAL_SPI_TransmitReceive_IT+0x19c>)
 800769e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4a35      	ldr	r2, [pc, #212]	@ (8007778 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80076a4:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ae:	d11f      	bne.n	80076f0 <HAL_SPI_TransmitReceive_IT+0x118>
  {
    hspi->CRCSize = 1U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2201      	movs	r2, #1
 80076b4:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80076be:	d806      	bhi.n	80076ce <HAL_SPI_TransmitReceive_IT+0xf6>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d102      	bne.n	80076ce <HAL_SPI_TransmitReceive_IT+0xf6>
    {
      hspi->CRCSize = 2U;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2202      	movs	r2, #2
 80076cc:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	e002      	b.n	80076f6 <HAL_SPI_TransmitReceive_IT+0x11e>
  }
  else
  {
    hspi->CRCSize = 0U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80076fe:	d802      	bhi.n	8007706 <HAL_SPI_TransmitReceive_IT+0x12e>
 8007700:	887b      	ldrh	r3, [r7, #2]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d908      	bls.n	8007718 <HAL_SPI_TransmitReceive_IT+0x140>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007714:	605a      	str	r2, [r3, #4]
 8007716:	e007      	b.n	8007728 <HAL_SPI_TransmitReceive_IT+0x150>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007726:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007732:	2b40      	cmp	r3, #64	@ 0x40
 8007734:	d007      	beq.n	8007746 <HAL_SPI_TransmitReceive_IT+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007744:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 800775c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	08007bb1 	.word	0x08007bb1
 8007770:	08007c61 	.word	0x08007c61
 8007774:	080079b9 	.word	0x080079b9
 8007778:	08007af5 	.word	0x08007af5

0800777c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10e      	bne.n	80077bc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d009      	beq.n	80077bc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d004      	beq.n	80077bc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	4798      	blx	r3
    return;
 80077ba:	e0ce      	b.n	800795a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <HAL_SPI_IRQHandler+0x5e>
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	4798      	blx	r3
    return;
 80077d8:	e0bf      	b.n	800795a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	f003 0320 	and.w	r3, r3, #32
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <HAL_SPI_IRQHandler+0x7e>
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d105      	bne.n	80077fa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 80b0 	beq.w	800795a <HAL_SPI_IRQHandler+0x1de>
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	f003 0320 	and.w	r3, r3, #32
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 80aa 	beq.w	800795a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800780c:	2b00      	cmp	r3, #0
 800780e:	d023      	beq.n	8007858 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b03      	cmp	r3, #3
 800781a:	d011      	beq.n	8007840 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007820:	f043 0204 	orr.w	r2, r3, #4
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007828:	2300      	movs	r3, #0
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	617b      	str	r3, [r7, #20]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	e00b      	b.n	8007858 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007840:	2300      	movs	r3, #0
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	693b      	ldr	r3, [r7, #16]
        return;
 8007856:	e080      	b.n	800795a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	2b00      	cmp	r3, #0
 8007860:	d014      	beq.n	800788c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007866:	f043 0201 	orr.w	r2, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00c      	beq.n	80078b0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800789a:	f043 0208 	orr.w	r2, r3, #8
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80078a2:	2300      	movs	r3, #0
 80078a4:	60bb      	str	r3, [r7, #8]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	60bb      	str	r3, [r7, #8]
 80078ae:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d04f      	beq.n	8007958 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80078c6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d104      	bne.n	80078e4 <HAL_SPI_IRQHandler+0x168>
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d034      	beq.n	800794e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0203 	bic.w	r2, r2, #3
 80078f2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d011      	beq.n	8007920 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007900:	4a17      	ldr	r2, [pc, #92]	@ (8007960 <HAL_SPI_IRQHandler+0x1e4>)
 8007902:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007908:	4618      	mov	r0, r3
 800790a:	f7fc fa52 	bl	8003db2 <HAL_DMA_Abort_IT>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007918:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007924:	2b00      	cmp	r3, #0
 8007926:	d016      	beq.n	8007956 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792c:	4a0c      	ldr	r2, [pc, #48]	@ (8007960 <HAL_SPI_IRQHandler+0x1e4>)
 800792e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007934:	4618      	mov	r0, r3
 8007936:	f7fc fa3c 	bl	8003db2 <HAL_DMA_Abort_IT>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00a      	beq.n	8007956 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007944:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800794c:	e003      	b.n	8007956 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f812 	bl	8007978 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007954:	e000      	b.n	8007958 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007956:	bf00      	nop
    return;
 8007958:	bf00      	nop
  }
}
 800795a:	3720      	adds	r7, #32
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	0800798d 	.word	0x0800798d

08007964 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007998:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f7ff ffe5 	bl	8007978 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079ae:	bf00      	nop
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d923      	bls.n	8007a14 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d6:	b292      	uxth	r2, r2
 80079d8:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079de:	1c9a      	adds	r2, r3, #2
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3b02      	subs	r3, #2
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d11f      	bne.n	8007a42 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007a10:	605a      	str	r2, [r3, #4]
 8007a12:	e016      	b.n	8007a42 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f103 020c 	add.w	r2, r3, #12
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a20:	7812      	ldrb	r2, [r2, #0]
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d120      	bne.n	8007a90 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a56:	d10b      	bne.n	8007a70 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007a66:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8007a98 <SPI_2linesRxISR_8BIT+0xe0>)
 8007a6c:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8007a6e:	e00f      	b.n	8007a90 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007a7e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d102      	bne.n	8007a90 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fc0c 	bl	80082a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	08007a9d 	.word	0x08007a9d

08007a9c <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	330c      	adds	r3, #12
 8007aae:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8007ab8:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007abe:	1e5a      	subs	r2, r3, #1
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10f      	bne.n	8007aec <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007ada:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d102      	bne.n	8007aec <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fbde 	bl	80082a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007aec:	bf00      	nop
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d912      	bls.n	8007b2c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0a:	881a      	ldrh	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b16:	1c9a      	adds	r2, r3, #2
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	3b02      	subs	r3, #2
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b2a:	e012      	b.n	8007b52 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	330c      	adds	r3, #12
 8007b36:	7812      	ldrb	r2, [r2, #0]
 8007b38:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d126      	bne.n	8007baa <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b64:	d110      	bne.n	8007b88 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b74:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b84:	605a      	str	r2, [r3, #4]
      return;
 8007b86:	e010      	b.n	8007baa <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b96:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d102      	bne.n	8007baa <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fb7f 	bl	80082a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc2:	b292      	uxth	r2, r2
 8007bc4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bca:	1c9a      	adds	r2, r3, #2
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d118      	bne.n	8007c20 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bf6:	d103      	bne.n	8007c00 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8007c28 <SPI_2linesRxISR_16BIT+0x78>)
 8007bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8007bfe:	e00f      	b.n	8007c20 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c0e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d102      	bne.n	8007c20 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fb44 	bl	80082a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	08007c2d 	.word	0x08007c2d

08007c2c <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8007c40:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c50:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fb28 	bl	80082a8 <SPI_CloseRxTx_ISR>
}
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c6c:	881a      	ldrh	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c78:	1c9a      	adds	r2, r3, #2
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d126      	bne.n	8007ce4 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c9e:	d110      	bne.n	8007cc2 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007cae:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007cbe:	605a      	str	r2, [r3, #4]
      return;
 8007cc0:	e010      	b.n	8007ce4 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007cd0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d102      	bne.n	8007ce4 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fae2 	bl	80082a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	330c      	adds	r3, #12
 8007cfc:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8007d06:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d0c:	1e5a      	subs	r2, r3, #1
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	649a      	str	r2, [r3, #72]	@ 0x48

  if (hspi->CRCSize == 0U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d102      	bne.n	8007d20 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fb20 	bl	8008360 <SPI_CloseRx_ISR>
  }
}
 8007d20:	bf00      	nop
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f103 020c 	add.w	r2, r3, #12
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3c:	7812      	ldrb	r2, [r2, #0]
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d10c      	bne.n	8007d84 <SPI_RxISR_8BIT+0x5c>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d72:	d107      	bne.n	8007d84 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d82:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10b      	bne.n	8007da8 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d98:	d103      	bne.n	8007da2 <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a04      	ldr	r2, [pc, #16]	@ (8007db0 <SPI_RxISR_8BIT+0x88>)
 8007d9e:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8007da0:	e002      	b.n	8007da8 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fadc 	bl	8008360 <SPI_CloseRx_ISR>
  }
}
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	08007ceb 	.word	0x08007ceb

08007db4 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8007dc8:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007dd8:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fac0 	bl	8008360 <SPI_CloseRx_ISR>
}
 8007de0:	bf00      	nop
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfa:	b292      	uxth	r2, r2
 8007dfc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e02:	1c9a      	adds	r2, r3, #2
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d10c      	bne.n	8007e40 <SPI_RxISR_16BIT+0x58>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e2e:	d107      	bne.n	8007e40 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007e3e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10b      	bne.n	8007e64 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e54:	d103      	bne.n	8007e5e <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a04      	ldr	r2, [pc, #16]	@ (8007e6c <SPI_RxISR_16BIT+0x84>)
 8007e5a:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8007e5c:	e002      	b.n	8007e64 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa7e 	bl	8008360 <SPI_CloseRx_ISR>
  }
}
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	08007db5 	.word	0x08007db5

08007e70 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	330c      	adds	r3, #12
 8007e82:	7812      	ldrb	r2, [r2, #0]
 8007e84:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	3b01      	subs	r3, #1
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10f      	bne.n	8007ec8 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb0:	d107      	bne.n	8007ec2 <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ec0:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa92 	bl	80083ec <SPI_CloseTx_ISR>
  }
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007edc:	881a      	ldrh	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee8:	1c9a      	adds	r2, r3, #2
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10f      	bne.n	8007f26 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f0e:	d107      	bne.n	8007f20 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f1e:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fa63 	bl	80083ec <SPI_CloseTx_ISR>
  }
}
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f40:	f7fb fdf6 	bl	8003b30 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f48:	1a9b      	subs	r3, r3, r2
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f50:	f7fb fdee 	bl	8003b30 <HAL_GetTick>
 8007f54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f56:	4b39      	ldr	r3, [pc, #228]	@ (800803c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	015b      	lsls	r3, r3, #5
 8007f5c:	0d1b      	lsrs	r3, r3, #20
 8007f5e:	69fa      	ldr	r2, [r7, #28]
 8007f60:	fb02 f303 	mul.w	r3, r2, r3
 8007f64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f66:	e054      	b.n	8008012 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6e:	d050      	beq.n	8008012 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f70:	f7fb fdde 	bl	8003b30 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	69fa      	ldr	r2, [r7, #28]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d902      	bls.n	8007f86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d13d      	bne.n	8008002 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f9e:	d111      	bne.n	8007fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fa8:	d004      	beq.n	8007fb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fb2:	d107      	bne.n	8007fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fcc:	d10f      	bne.n	8007fee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e017      	b.n	8008032 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	3b01      	subs	r3, #1
 8008010:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4013      	ands	r3, r2
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	429a      	cmp	r2, r3
 8008020:	bf0c      	ite	eq
 8008022:	2301      	moveq	r3, #1
 8008024:	2300      	movne	r3, #0
 8008026:	b2db      	uxtb	r3, r3
 8008028:	461a      	mov	r2, r3
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	429a      	cmp	r2, r3
 800802e:	d19b      	bne.n	8007f68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3720      	adds	r7, #32
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	2000000c 	.word	0x2000000c

08008040 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08a      	sub	sp, #40	@ 0x28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008052:	f7fb fd6d 	bl	8003b30 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	4413      	add	r3, r2
 8008060:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008062:	f7fb fd65 	bl	8003b30 <HAL_GetTick>
 8008066:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	330c      	adds	r3, #12
 800806e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008070:	4b3d      	ldr	r3, [pc, #244]	@ (8008168 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	00da      	lsls	r2, r3, #3
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	0d1b      	lsrs	r3, r3, #20
 8008080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008082:	fb02 f303 	mul.w	r3, r2, r3
 8008086:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008088:	e060      	b.n	800814c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008090:	d107      	bne.n	80080a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d104      	bne.n	80080a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	b2db      	uxtb	r3, r3
 800809e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a8:	d050      	beq.n	800814c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080aa:	f7fb fd41 	bl	8003b30 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d902      	bls.n	80080c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d13d      	bne.n	800813c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80080ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080d8:	d111      	bne.n	80080fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080e2:	d004      	beq.n	80080ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080ec:	d107      	bne.n	80080fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008106:	d10f      	bne.n	8008128 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008126:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e010      	b.n	800815e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	3b01      	subs	r3, #1
 800814a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4013      	ands	r3, r2
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	429a      	cmp	r2, r3
 800815a:	d196      	bne.n	800808a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3728      	adds	r7, #40	@ 0x28
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	2000000c 	.word	0x2000000c

0800816c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af02      	add	r7, sp, #8
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008180:	d111      	bne.n	80081a6 <SPI_EndRxTransaction+0x3a>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800818a:	d004      	beq.n	8008196 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008194:	d107      	bne.n	80081a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081a4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2200      	movs	r2, #0
 80081ae:	2180      	movs	r1, #128	@ 0x80
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f7ff febd 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d007      	beq.n	80081cc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081c0:	f043 0220 	orr.w	r2, r3, #32
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e023      	b.n	8008214 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081d4:	d11d      	bne.n	8008212 <SPI_EndRxTransaction+0xa6>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081de:	d004      	beq.n	80081ea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081e8:	d113      	bne.n	8008212 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f7ff ff22 	bl	8008040 <SPI_WaitFifoStateUntilTimeout>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d007      	beq.n	8008212 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008206:	f043 0220 	orr.w	r2, r3, #32
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e000      	b.n	8008214 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af02      	add	r7, sp, #8
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2200      	movs	r2, #0
 8008230:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f7ff ff03 	bl	8008040 <SPI_WaitFifoStateUntilTimeout>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d007      	beq.n	8008250 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008244:	f043 0220 	orr.w	r2, r3, #32
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e027      	b.n	80082a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2200      	movs	r2, #0
 8008258:	2180      	movs	r1, #128	@ 0x80
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f7ff fe68 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800826a:	f043 0220 	orr.w	r2, r3, #32
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e014      	b.n	80082a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2200      	movs	r2, #0
 800827e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7ff fedc 	bl	8008040 <SPI_WaitFifoStateUntilTimeout>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d007      	beq.n	800829e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008292:	f043 0220 	orr.w	r2, r3, #32
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e000      	b.n	80082a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082b0:	f7fb fc3e 	bl	8003b30 <HAL_GetTick>
 80082b4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0220 	bic.w	r2, r2, #32
 80082c4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	2164      	movs	r1, #100	@ 0x64
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff ffa6 	bl	800821c <SPI_EndRxTxTransaction>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d005      	beq.n	80082e2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082da:	f043 0220 	orr.w	r2, r3, #32
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f003 0310 	and.w	r3, r3, #16
 80082ec:	2b10      	cmp	r3, #16
 80082ee:	d112      	bne.n	8008316 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082fc:	f043 0202 	orr.w	r2, r3, #2
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800830c:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7ff fb32 	bl	8007978 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008314:	e020      	b.n	8008358 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800831a:	2b00      	cmp	r3, #0
 800831c:	d115      	bne.n	800834a <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b04      	cmp	r3, #4
 8008328:	d107      	bne.n	800833a <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7fa ff8e 	bl	8003254 <HAL_SPI_RxCpltCallback>
}
 8008338:	e00e      	b.n	8008358 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7ff fb0e 	bl	8007964 <HAL_SPI_TxRxCpltCallback>
}
 8008348:	e006      	b.n	8008358 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7ff fb10 	bl	8007978 <HAL_SPI_ErrorCallback>
}
 8008358:	bf00      	nop
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008376:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008378:	f7fb fbda 	bl	8003b30 <HAL_GetTick>
 800837c:	4603      	mov	r3, r0
 800837e:	461a      	mov	r2, r3
 8008380:	2164      	movs	r1, #100	@ 0x64
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff fef2 	bl	800816c <SPI_EndRxTransaction>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d005      	beq.n	800839a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008392:	f043 0220 	orr.w	r2, r3, #32
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f003 0310 	and.w	r3, r3, #16
 80083ac:	2b10      	cmp	r3, #16
 80083ae:	d10e      	bne.n	80083ce <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083b4:	f043 0202 	orr.w	r2, r3, #2
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80083c4:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7ff fad6 	bl	8007978 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80083cc:	e00a      	b.n	80083e4 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d103      	bne.n	80083de <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7fa ff3c 	bl	8003254 <HAL_SPI_RxCpltCallback>
}
 80083dc:	e002      	b.n	80083e4 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7ff faca 	bl	8007978 <HAL_SPI_ErrorCallback>
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083f4:	f7fb fb9c 	bl	8003b30 <HAL_GetTick>
 80083f8:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008408:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	2164      	movs	r1, #100	@ 0x64
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7ff ff04 	bl	800821c <SPI_EndRxTxTransaction>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d005      	beq.n	8008426 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800841e:	f043 0220 	orr.w	r2, r3, #32
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10a      	bne.n	8008444 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800842e:	2300      	movs	r3, #0
 8008430:	60bb      	str	r3, [r7, #8]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	60bb      	str	r3, [r7, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	60bb      	str	r3, [r7, #8]
 8008442:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7ff fa8f 	bl	8007978 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800845a:	e002      	b.n	8008462 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7fa ff0d 	bl	800327c <HAL_SPI_TxCpltCallback>
}
 8008462:	bf00      	nop
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e049      	b.n	8008510 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d106      	bne.n	8008496 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7f9 f977 	bl	8001784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2202      	movs	r2, #2
 800849a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	3304      	adds	r3, #4
 80084a6:	4619      	mov	r1, r3
 80084a8:	4610      	mov	r0, r2
 80084aa:	f000 f96f 	bl	800878c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d020      	beq.n	800857c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d01b      	beq.n	800857c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f06f 0202 	mvn.w	r2, #2
 800854c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f8f3 	bl	800874e <HAL_TIM_IC_CaptureCallback>
 8008568:	e005      	b.n	8008576 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f8e5 	bl	800873a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f8f6 	bl	8008762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f003 0304 	and.w	r3, r3, #4
 8008582:	2b00      	cmp	r3, #0
 8008584:	d020      	beq.n	80085c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01b      	beq.n	80085c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f06f 0204 	mvn.w	r2, #4
 8008598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2202      	movs	r2, #2
 800859e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f8cd 	bl	800874e <HAL_TIM_IC_CaptureCallback>
 80085b4:	e005      	b.n	80085c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f8bf 	bl	800873a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f8d0 	bl	8008762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d020      	beq.n	8008614 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f003 0308 	and.w	r3, r3, #8
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d01b      	beq.n	8008614 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0208 	mvn.w	r2, #8
 80085e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2204      	movs	r2, #4
 80085ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f8a7 	bl	800874e <HAL_TIM_IC_CaptureCallback>
 8008600:	e005      	b.n	800860e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f899 	bl	800873a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f8aa 	bl	8008762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f003 0310 	and.w	r3, r3, #16
 800861a:	2b00      	cmp	r3, #0
 800861c:	d020      	beq.n	8008660 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f003 0310 	and.w	r3, r3, #16
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01b      	beq.n	8008660 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f06f 0210 	mvn.w	r2, #16
 8008630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2208      	movs	r2, #8
 8008636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f881 	bl	800874e <HAL_TIM_IC_CaptureCallback>
 800864c:	e005      	b.n	800865a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f873 	bl	800873a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f884 	bl	8008762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00c      	beq.n	8008684 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d007      	beq.n	8008684 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f06f 0201 	mvn.w	r2, #1
 800867c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f851 	bl	8008726 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800868a:	2b00      	cmp	r3, #0
 800868c:	d104      	bne.n	8008698 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00c      	beq.n	80086b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d007      	beq.n	80086b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80086aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f9a5 	bl	80089fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00c      	beq.n	80086d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d007      	beq.n	80086d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80086ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f99d 	bl	8008a10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00c      	beq.n	80086fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d007      	beq.n	80086fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80086f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f83e 	bl	8008776 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f003 0320 	and.w	r3, r3, #32
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00c      	beq.n	800871e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f003 0320 	and.w	r3, r3, #32
 800870a:	2b00      	cmp	r3, #0
 800870c:	d007      	beq.n	800871e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f06f 0220 	mvn.w	r2, #32
 8008716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f965 	bl	80089e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800871e:	bf00      	nop
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800872e:	bf00      	nop
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008742:	bf00      	nop
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008776:	b480      	push	{r7}
 8008778:	b083      	sub	sp, #12
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
	...

0800878c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a46      	ldr	r2, [pc, #280]	@ (80088b8 <TIM_Base_SetConfig+0x12c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d013      	beq.n	80087cc <TIM_Base_SetConfig+0x40>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087aa:	d00f      	beq.n	80087cc <TIM_Base_SetConfig+0x40>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a43      	ldr	r2, [pc, #268]	@ (80088bc <TIM_Base_SetConfig+0x130>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d00b      	beq.n	80087cc <TIM_Base_SetConfig+0x40>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a42      	ldr	r2, [pc, #264]	@ (80088c0 <TIM_Base_SetConfig+0x134>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d007      	beq.n	80087cc <TIM_Base_SetConfig+0x40>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a41      	ldr	r2, [pc, #260]	@ (80088c4 <TIM_Base_SetConfig+0x138>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d003      	beq.n	80087cc <TIM_Base_SetConfig+0x40>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a40      	ldr	r2, [pc, #256]	@ (80088c8 <TIM_Base_SetConfig+0x13c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d108      	bne.n	80087de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a35      	ldr	r2, [pc, #212]	@ (80088b8 <TIM_Base_SetConfig+0x12c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d01f      	beq.n	8008826 <TIM_Base_SetConfig+0x9a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087ec:	d01b      	beq.n	8008826 <TIM_Base_SetConfig+0x9a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a32      	ldr	r2, [pc, #200]	@ (80088bc <TIM_Base_SetConfig+0x130>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d017      	beq.n	8008826 <TIM_Base_SetConfig+0x9a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a31      	ldr	r2, [pc, #196]	@ (80088c0 <TIM_Base_SetConfig+0x134>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d013      	beq.n	8008826 <TIM_Base_SetConfig+0x9a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a30      	ldr	r2, [pc, #192]	@ (80088c4 <TIM_Base_SetConfig+0x138>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d00f      	beq.n	8008826 <TIM_Base_SetConfig+0x9a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a2f      	ldr	r2, [pc, #188]	@ (80088c8 <TIM_Base_SetConfig+0x13c>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d00b      	beq.n	8008826 <TIM_Base_SetConfig+0x9a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a2e      	ldr	r2, [pc, #184]	@ (80088cc <TIM_Base_SetConfig+0x140>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d007      	beq.n	8008826 <TIM_Base_SetConfig+0x9a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a2d      	ldr	r2, [pc, #180]	@ (80088d0 <TIM_Base_SetConfig+0x144>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d003      	beq.n	8008826 <TIM_Base_SetConfig+0x9a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a2c      	ldr	r2, [pc, #176]	@ (80088d4 <TIM_Base_SetConfig+0x148>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d108      	bne.n	8008838 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800882c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	4313      	orrs	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	689a      	ldr	r2, [r3, #8]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a16      	ldr	r2, [pc, #88]	@ (80088b8 <TIM_Base_SetConfig+0x12c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00f      	beq.n	8008884 <TIM_Base_SetConfig+0xf8>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a18      	ldr	r2, [pc, #96]	@ (80088c8 <TIM_Base_SetConfig+0x13c>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d00b      	beq.n	8008884 <TIM_Base_SetConfig+0xf8>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a17      	ldr	r2, [pc, #92]	@ (80088cc <TIM_Base_SetConfig+0x140>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d007      	beq.n	8008884 <TIM_Base_SetConfig+0xf8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a16      	ldr	r2, [pc, #88]	@ (80088d0 <TIM_Base_SetConfig+0x144>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d003      	beq.n	8008884 <TIM_Base_SetConfig+0xf8>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a15      	ldr	r2, [pc, #84]	@ (80088d4 <TIM_Base_SetConfig+0x148>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d103      	bne.n	800888c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	691a      	ldr	r2, [r3, #16]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b01      	cmp	r3, #1
 800889c:	d105      	bne.n	80088aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	f023 0201 	bic.w	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	611a      	str	r2, [r3, #16]
  }
}
 80088aa:	bf00      	nop
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	40012c00 	.word	0x40012c00
 80088bc:	40000400 	.word	0x40000400
 80088c0:	40000800 	.word	0x40000800
 80088c4:	40000c00 	.word	0x40000c00
 80088c8:	40013400 	.word	0x40013400
 80088cc:	40014000 	.word	0x40014000
 80088d0:	40014400 	.word	0x40014400
 80088d4:	40014800 	.word	0x40014800

080088d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d101      	bne.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088ec:	2302      	movs	r3, #2
 80088ee:	e068      	b.n	80089c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a2e      	ldr	r2, [pc, #184]	@ (80089d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d004      	beq.n	8008924 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a2d      	ldr	r2, [pc, #180]	@ (80089d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d108      	bne.n	8008936 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800892a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	4313      	orrs	r3, r2
 8008934:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800893c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	4313      	orrs	r3, r2
 8008946:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a1e      	ldr	r2, [pc, #120]	@ (80089d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d01d      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008962:	d018      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a1b      	ldr	r2, [pc, #108]	@ (80089d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d013      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a1a      	ldr	r2, [pc, #104]	@ (80089dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00e      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a18      	ldr	r2, [pc, #96]	@ (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d009      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a13      	ldr	r2, [pc, #76]	@ (80089d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d004      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a14      	ldr	r2, [pc, #80]	@ (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d10c      	bne.n	80089b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800899c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	40012c00 	.word	0x40012c00
 80089d4:	40013400 	.word	0x40013400
 80089d8:	40000400 	.word	0x40000400
 80089dc:	40000800 	.word	0x40000800
 80089e0:	40000c00 	.word	0x40000c00
 80089e4:	40014000 	.word	0x40014000

080089e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e040      	b.n	8008ab8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d106      	bne.n	8008a4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7f8 fec2 	bl	80017d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2224      	movs	r2, #36	@ 0x24
 8008a50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 0201 	bic.w	r2, r2, #1
 8008a60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fb6a 	bl	8009144 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f8af 	bl	8008bd4 <UART_SetConfig>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d101      	bne.n	8008a80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e01b      	b.n	8008ab8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689a      	ldr	r2, [r3, #8]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f042 0201 	orr.w	r2, r2, #1
 8008aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fbe9 	bl	8009288 <UART_CheckIdleState>
 8008ab6:	4603      	mov	r3, r0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b08a      	sub	sp, #40	@ 0x28
 8008ac4:	af02      	add	r7, sp, #8
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	603b      	str	r3, [r7, #0]
 8008acc:	4613      	mov	r3, r2
 8008ace:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ad4:	2b20      	cmp	r3, #32
 8008ad6:	d177      	bne.n	8008bc8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <HAL_UART_Transmit+0x24>
 8008ade:	88fb      	ldrh	r3, [r7, #6]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e070      	b.n	8008bca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2221      	movs	r2, #33	@ 0x21
 8008af4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008af6:	f7fb f81b 	bl	8003b30 <HAL_GetTick>
 8008afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	88fa      	ldrh	r2, [r7, #6]
 8008b00:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	88fa      	ldrh	r2, [r7, #6]
 8008b08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b14:	d108      	bne.n	8008b28 <HAL_UART_Transmit+0x68>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d104      	bne.n	8008b28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	61bb      	str	r3, [r7, #24]
 8008b26:	e003      	b.n	8008b30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b30:	e02f      	b.n	8008b92 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2180      	movs	r1, #128	@ 0x80
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 fc4b 	bl	80093d8 <UART_WaitOnFlagUntilTimeout>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d004      	beq.n	8008b52 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e03b      	b.n	8008bca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10b      	bne.n	8008b70 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	881a      	ldrh	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b64:	b292      	uxth	r2, r2
 8008b66:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	3302      	adds	r3, #2
 8008b6c:	61bb      	str	r3, [r7, #24]
 8008b6e:	e007      	b.n	8008b80 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	781a      	ldrb	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1c9      	bne.n	8008b32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2140      	movs	r1, #64	@ 0x40
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 fc15 	bl	80093d8 <UART_WaitOnFlagUntilTimeout>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e005      	b.n	8008bca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2220      	movs	r2, #32
 8008bc2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e000      	b.n	8008bca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008bc8:	2302      	movs	r3, #2
  }
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3720      	adds	r7, #32
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
	...

08008bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bd8:	b08a      	sub	sp, #40	@ 0x28
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	431a      	orrs	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	4ba4      	ldr	r3, [pc, #656]	@ (8008e94 <UART_SetConfig+0x2c0>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	6812      	ldr	r2, [r2, #0]
 8008c0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c0c:	430b      	orrs	r3, r1
 8008c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a99      	ldr	r2, [pc, #612]	@ (8008e98 <UART_SetConfig+0x2c4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d004      	beq.n	8008c40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c50:	430a      	orrs	r2, r1
 8008c52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a90      	ldr	r2, [pc, #576]	@ (8008e9c <UART_SetConfig+0x2c8>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d126      	bne.n	8008cac <UART_SetConfig+0xd8>
 8008c5e:	4b90      	ldr	r3, [pc, #576]	@ (8008ea0 <UART_SetConfig+0x2cc>)
 8008c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d81b      	bhi.n	8008ca4 <UART_SetConfig+0xd0>
 8008c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c74 <UART_SetConfig+0xa0>)
 8008c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c72:	bf00      	nop
 8008c74:	08008c85 	.word	0x08008c85
 8008c78:	08008c95 	.word	0x08008c95
 8008c7c:	08008c8d 	.word	0x08008c8d
 8008c80:	08008c9d 	.word	0x08008c9d
 8008c84:	2301      	movs	r3, #1
 8008c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c8a:	e116      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c92:	e112      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008c94:	2304      	movs	r3, #4
 8008c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c9a:	e10e      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008c9c:	2308      	movs	r3, #8
 8008c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ca2:	e10a      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008ca4:	2310      	movs	r3, #16
 8008ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008caa:	e106      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a7c      	ldr	r2, [pc, #496]	@ (8008ea4 <UART_SetConfig+0x2d0>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d138      	bne.n	8008d28 <UART_SetConfig+0x154>
 8008cb6:	4b7a      	ldr	r3, [pc, #488]	@ (8008ea0 <UART_SetConfig+0x2cc>)
 8008cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cbc:	f003 030c 	and.w	r3, r3, #12
 8008cc0:	2b0c      	cmp	r3, #12
 8008cc2:	d82d      	bhi.n	8008d20 <UART_SetConfig+0x14c>
 8008cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ccc <UART_SetConfig+0xf8>)
 8008cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cca:	bf00      	nop
 8008ccc:	08008d01 	.word	0x08008d01
 8008cd0:	08008d21 	.word	0x08008d21
 8008cd4:	08008d21 	.word	0x08008d21
 8008cd8:	08008d21 	.word	0x08008d21
 8008cdc:	08008d11 	.word	0x08008d11
 8008ce0:	08008d21 	.word	0x08008d21
 8008ce4:	08008d21 	.word	0x08008d21
 8008ce8:	08008d21 	.word	0x08008d21
 8008cec:	08008d09 	.word	0x08008d09
 8008cf0:	08008d21 	.word	0x08008d21
 8008cf4:	08008d21 	.word	0x08008d21
 8008cf8:	08008d21 	.word	0x08008d21
 8008cfc:	08008d19 	.word	0x08008d19
 8008d00:	2300      	movs	r3, #0
 8008d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d06:	e0d8      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d0e:	e0d4      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d10:	2304      	movs	r3, #4
 8008d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d16:	e0d0      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d18:	2308      	movs	r3, #8
 8008d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d1e:	e0cc      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d20:	2310      	movs	r3, #16
 8008d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d26:	e0c8      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a5e      	ldr	r2, [pc, #376]	@ (8008ea8 <UART_SetConfig+0x2d4>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d125      	bne.n	8008d7e <UART_SetConfig+0x1aa>
 8008d32:	4b5b      	ldr	r3, [pc, #364]	@ (8008ea0 <UART_SetConfig+0x2cc>)
 8008d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008d3c:	2b30      	cmp	r3, #48	@ 0x30
 8008d3e:	d016      	beq.n	8008d6e <UART_SetConfig+0x19a>
 8008d40:	2b30      	cmp	r3, #48	@ 0x30
 8008d42:	d818      	bhi.n	8008d76 <UART_SetConfig+0x1a2>
 8008d44:	2b20      	cmp	r3, #32
 8008d46:	d00a      	beq.n	8008d5e <UART_SetConfig+0x18a>
 8008d48:	2b20      	cmp	r3, #32
 8008d4a:	d814      	bhi.n	8008d76 <UART_SetConfig+0x1a2>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <UART_SetConfig+0x182>
 8008d50:	2b10      	cmp	r3, #16
 8008d52:	d008      	beq.n	8008d66 <UART_SetConfig+0x192>
 8008d54:	e00f      	b.n	8008d76 <UART_SetConfig+0x1a2>
 8008d56:	2300      	movs	r3, #0
 8008d58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d5c:	e0ad      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d64:	e0a9      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d66:	2304      	movs	r3, #4
 8008d68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d6c:	e0a5      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d6e:	2308      	movs	r3, #8
 8008d70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d74:	e0a1      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d76:	2310      	movs	r3, #16
 8008d78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d7c:	e09d      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a4a      	ldr	r2, [pc, #296]	@ (8008eac <UART_SetConfig+0x2d8>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d125      	bne.n	8008dd4 <UART_SetConfig+0x200>
 8008d88:	4b45      	ldr	r3, [pc, #276]	@ (8008ea0 <UART_SetConfig+0x2cc>)
 8008d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008d92:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d94:	d016      	beq.n	8008dc4 <UART_SetConfig+0x1f0>
 8008d96:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d98:	d818      	bhi.n	8008dcc <UART_SetConfig+0x1f8>
 8008d9a:	2b80      	cmp	r3, #128	@ 0x80
 8008d9c:	d00a      	beq.n	8008db4 <UART_SetConfig+0x1e0>
 8008d9e:	2b80      	cmp	r3, #128	@ 0x80
 8008da0:	d814      	bhi.n	8008dcc <UART_SetConfig+0x1f8>
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <UART_SetConfig+0x1d8>
 8008da6:	2b40      	cmp	r3, #64	@ 0x40
 8008da8:	d008      	beq.n	8008dbc <UART_SetConfig+0x1e8>
 8008daa:	e00f      	b.n	8008dcc <UART_SetConfig+0x1f8>
 8008dac:	2300      	movs	r3, #0
 8008dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008db2:	e082      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008db4:	2302      	movs	r3, #2
 8008db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dba:	e07e      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008dbc:	2304      	movs	r3, #4
 8008dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dc2:	e07a      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008dc4:	2308      	movs	r3, #8
 8008dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dca:	e076      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008dcc:	2310      	movs	r3, #16
 8008dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dd2:	e072      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a35      	ldr	r2, [pc, #212]	@ (8008eb0 <UART_SetConfig+0x2dc>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d12a      	bne.n	8008e34 <UART_SetConfig+0x260>
 8008dde:	4b30      	ldr	r3, [pc, #192]	@ (8008ea0 <UART_SetConfig+0x2cc>)
 8008de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dec:	d01a      	beq.n	8008e24 <UART_SetConfig+0x250>
 8008dee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008df2:	d81b      	bhi.n	8008e2c <UART_SetConfig+0x258>
 8008df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008df8:	d00c      	beq.n	8008e14 <UART_SetConfig+0x240>
 8008dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dfe:	d815      	bhi.n	8008e2c <UART_SetConfig+0x258>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <UART_SetConfig+0x238>
 8008e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e08:	d008      	beq.n	8008e1c <UART_SetConfig+0x248>
 8008e0a:	e00f      	b.n	8008e2c <UART_SetConfig+0x258>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e12:	e052      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e14:	2302      	movs	r3, #2
 8008e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e1a:	e04e      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e22:	e04a      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e24:	2308      	movs	r3, #8
 8008e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e2a:	e046      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e2c:	2310      	movs	r3, #16
 8008e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e32:	e042      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a17      	ldr	r2, [pc, #92]	@ (8008e98 <UART_SetConfig+0x2c4>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d13a      	bne.n	8008eb4 <UART_SetConfig+0x2e0>
 8008e3e:	4b18      	ldr	r3, [pc, #96]	@ (8008ea0 <UART_SetConfig+0x2cc>)
 8008e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008e48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e4c:	d01a      	beq.n	8008e84 <UART_SetConfig+0x2b0>
 8008e4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e52:	d81b      	bhi.n	8008e8c <UART_SetConfig+0x2b8>
 8008e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e58:	d00c      	beq.n	8008e74 <UART_SetConfig+0x2a0>
 8008e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e5e:	d815      	bhi.n	8008e8c <UART_SetConfig+0x2b8>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <UART_SetConfig+0x298>
 8008e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e68:	d008      	beq.n	8008e7c <UART_SetConfig+0x2a8>
 8008e6a:	e00f      	b.n	8008e8c <UART_SetConfig+0x2b8>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e72:	e022      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e74:	2302      	movs	r3, #2
 8008e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e7a:	e01e      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e82:	e01a      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e84:	2308      	movs	r3, #8
 8008e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e8a:	e016      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e92:	e012      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e94:	efff69f3 	.word	0xefff69f3
 8008e98:	40008000 	.word	0x40008000
 8008e9c:	40013800 	.word	0x40013800
 8008ea0:	40021000 	.word	0x40021000
 8008ea4:	40004400 	.word	0x40004400
 8008ea8:	40004800 	.word	0x40004800
 8008eac:	40004c00 	.word	0x40004c00
 8008eb0:	40005000 	.word	0x40005000
 8008eb4:	2310      	movs	r3, #16
 8008eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a9f      	ldr	r2, [pc, #636]	@ (800913c <UART_SetConfig+0x568>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d17a      	bne.n	8008fba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ec4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	d824      	bhi.n	8008f16 <UART_SetConfig+0x342>
 8008ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed4 <UART_SetConfig+0x300>)
 8008ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed2:	bf00      	nop
 8008ed4:	08008ef9 	.word	0x08008ef9
 8008ed8:	08008f17 	.word	0x08008f17
 8008edc:	08008f01 	.word	0x08008f01
 8008ee0:	08008f17 	.word	0x08008f17
 8008ee4:	08008f07 	.word	0x08008f07
 8008ee8:	08008f17 	.word	0x08008f17
 8008eec:	08008f17 	.word	0x08008f17
 8008ef0:	08008f17 	.word	0x08008f17
 8008ef4:	08008f0f 	.word	0x08008f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ef8:	f7fc fe70 	bl	8005bdc <HAL_RCC_GetPCLK1Freq>
 8008efc:	61f8      	str	r0, [r7, #28]
        break;
 8008efe:	e010      	b.n	8008f22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f00:	4b8f      	ldr	r3, [pc, #572]	@ (8009140 <UART_SetConfig+0x56c>)
 8008f02:	61fb      	str	r3, [r7, #28]
        break;
 8008f04:	e00d      	b.n	8008f22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f06:	f7fc fdd1 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8008f0a:	61f8      	str	r0, [r7, #28]
        break;
 8008f0c:	e009      	b.n	8008f22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f12:	61fb      	str	r3, [r7, #28]
        break;
 8008f14:	e005      	b.n	8008f22 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008f20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 80fb 	beq.w	8009120 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	4413      	add	r3, r2
 8008f34:	69fa      	ldr	r2, [r7, #28]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d305      	bcc.n	8008f46 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d903      	bls.n	8008f4e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008f4c:	e0e8      	b.n	8009120 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	2200      	movs	r2, #0
 8008f52:	461c      	mov	r4, r3
 8008f54:	4615      	mov	r5, r2
 8008f56:	f04f 0200 	mov.w	r2, #0
 8008f5a:	f04f 0300 	mov.w	r3, #0
 8008f5e:	022b      	lsls	r3, r5, #8
 8008f60:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008f64:	0222      	lsls	r2, r4, #8
 8008f66:	68f9      	ldr	r1, [r7, #12]
 8008f68:	6849      	ldr	r1, [r1, #4]
 8008f6a:	0849      	lsrs	r1, r1, #1
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	4688      	mov	r8, r1
 8008f70:	4681      	mov	r9, r0
 8008f72:	eb12 0a08 	adds.w	sl, r2, r8
 8008f76:	eb43 0b09 	adc.w	fp, r3, r9
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	603b      	str	r3, [r7, #0]
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f88:	4650      	mov	r0, sl
 8008f8a:	4659      	mov	r1, fp
 8008f8c:	f7f7 fe7c 	bl	8000c88 <__aeabi_uldivmod>
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	4613      	mov	r3, r2
 8008f96:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f9e:	d308      	bcc.n	8008fb2 <UART_SetConfig+0x3de>
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fa6:	d204      	bcs.n	8008fb2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	60da      	str	r2, [r3, #12]
 8008fb0:	e0b6      	b.n	8009120 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008fb8:	e0b2      	b.n	8009120 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fc2:	d15e      	bne.n	8009082 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d828      	bhi.n	800901e <UART_SetConfig+0x44a>
 8008fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd4 <UART_SetConfig+0x400>)
 8008fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd2:	bf00      	nop
 8008fd4:	08008ff9 	.word	0x08008ff9
 8008fd8:	08009001 	.word	0x08009001
 8008fdc:	08009009 	.word	0x08009009
 8008fe0:	0800901f 	.word	0x0800901f
 8008fe4:	0800900f 	.word	0x0800900f
 8008fe8:	0800901f 	.word	0x0800901f
 8008fec:	0800901f 	.word	0x0800901f
 8008ff0:	0800901f 	.word	0x0800901f
 8008ff4:	08009017 	.word	0x08009017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ff8:	f7fc fdf0 	bl	8005bdc <HAL_RCC_GetPCLK1Freq>
 8008ffc:	61f8      	str	r0, [r7, #28]
        break;
 8008ffe:	e014      	b.n	800902a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009000:	f7fc fe02 	bl	8005c08 <HAL_RCC_GetPCLK2Freq>
 8009004:	61f8      	str	r0, [r7, #28]
        break;
 8009006:	e010      	b.n	800902a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009008:	4b4d      	ldr	r3, [pc, #308]	@ (8009140 <UART_SetConfig+0x56c>)
 800900a:	61fb      	str	r3, [r7, #28]
        break;
 800900c:	e00d      	b.n	800902a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800900e:	f7fc fd4d 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8009012:	61f8      	str	r0, [r7, #28]
        break;
 8009014:	e009      	b.n	800902a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800901a:	61fb      	str	r3, [r7, #28]
        break;
 800901c:	e005      	b.n	800902a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009028:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d077      	beq.n	8009120 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	005a      	lsls	r2, r3, #1
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	085b      	lsrs	r3, r3, #1
 800903a:	441a      	add	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	fbb2 f3f3 	udiv	r3, r2, r3
 8009044:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b0f      	cmp	r3, #15
 800904a:	d916      	bls.n	800907a <UART_SetConfig+0x4a6>
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009052:	d212      	bcs.n	800907a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	b29b      	uxth	r3, r3
 8009058:	f023 030f 	bic.w	r3, r3, #15
 800905c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	085b      	lsrs	r3, r3, #1
 8009062:	b29b      	uxth	r3, r3
 8009064:	f003 0307 	and.w	r3, r3, #7
 8009068:	b29a      	uxth	r2, r3
 800906a:	8afb      	ldrh	r3, [r7, #22]
 800906c:	4313      	orrs	r3, r2
 800906e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	8afa      	ldrh	r2, [r7, #22]
 8009076:	60da      	str	r2, [r3, #12]
 8009078:	e052      	b.n	8009120 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009080:	e04e      	b.n	8009120 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009082:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009086:	2b08      	cmp	r3, #8
 8009088:	d827      	bhi.n	80090da <UART_SetConfig+0x506>
 800908a:	a201      	add	r2, pc, #4	@ (adr r2, 8009090 <UART_SetConfig+0x4bc>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	080090b5 	.word	0x080090b5
 8009094:	080090bd 	.word	0x080090bd
 8009098:	080090c5 	.word	0x080090c5
 800909c:	080090db 	.word	0x080090db
 80090a0:	080090cb 	.word	0x080090cb
 80090a4:	080090db 	.word	0x080090db
 80090a8:	080090db 	.word	0x080090db
 80090ac:	080090db 	.word	0x080090db
 80090b0:	080090d3 	.word	0x080090d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090b4:	f7fc fd92 	bl	8005bdc <HAL_RCC_GetPCLK1Freq>
 80090b8:	61f8      	str	r0, [r7, #28]
        break;
 80090ba:	e014      	b.n	80090e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090bc:	f7fc fda4 	bl	8005c08 <HAL_RCC_GetPCLK2Freq>
 80090c0:	61f8      	str	r0, [r7, #28]
        break;
 80090c2:	e010      	b.n	80090e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009140 <UART_SetConfig+0x56c>)
 80090c6:	61fb      	str	r3, [r7, #28]
        break;
 80090c8:	e00d      	b.n	80090e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090ca:	f7fc fcef 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 80090ce:	61f8      	str	r0, [r7, #28]
        break;
 80090d0:	e009      	b.n	80090e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090d6:	61fb      	str	r3, [r7, #28]
        break;
 80090d8:	e005      	b.n	80090e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80090e4:	bf00      	nop
    }

    if (pclk != 0U)
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d019      	beq.n	8009120 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	085a      	lsrs	r2, r3, #1
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	441a      	add	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80090fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	2b0f      	cmp	r3, #15
 8009104:	d909      	bls.n	800911a <UART_SetConfig+0x546>
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800910c:	d205      	bcs.n	800911a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	b29a      	uxth	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60da      	str	r2, [r3, #12]
 8009118:	e002      	b.n	8009120 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800912c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009130:	4618      	mov	r0, r3
 8009132:	3728      	adds	r7, #40	@ 0x28
 8009134:	46bd      	mov	sp, r7
 8009136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800913a:	bf00      	nop
 800913c:	40008000 	.word	0x40008000
 8009140:	00f42400 	.word	0x00f42400

08009144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009150:	f003 0308 	and.w	r3, r3, #8
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00a      	beq.n	800916e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00a      	beq.n	80091b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b6:	f003 0304 	and.w	r3, r3, #4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00a      	beq.n	80091d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	430a      	orrs	r2, r1
 80091d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d8:	f003 0310 	and.w	r3, r3, #16
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00a      	beq.n	80091f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00a      	beq.n	8009218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	430a      	orrs	r2, r1
 8009216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009220:	2b00      	cmp	r3, #0
 8009222:	d01a      	beq.n	800925a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800923e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009242:	d10a      	bne.n	800925a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00a      	beq.n	800927c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	430a      	orrs	r2, r1
 800927a:	605a      	str	r2, [r3, #4]
  }
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b098      	sub	sp, #96	@ 0x60
 800928c:	af02      	add	r7, sp, #8
 800928e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009298:	f7fa fc4a 	bl	8003b30 <HAL_GetTick>
 800929c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0308 	and.w	r3, r3, #8
 80092a8:	2b08      	cmp	r3, #8
 80092aa:	d12e      	bne.n	800930a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092b4:	2200      	movs	r2, #0
 80092b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f88c 	bl	80093d8 <UART_WaitOnFlagUntilTimeout>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d021      	beq.n	800930a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ce:	e853 3f00 	ldrex	r3, [r3]
 80092d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092da:	653b      	str	r3, [r7, #80]	@ 0x50
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	461a      	mov	r2, r3
 80092e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80092e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092ec:	e841 2300 	strex	r3, r2, [r1]
 80092f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1e6      	bne.n	80092c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2220      	movs	r2, #32
 80092fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e062      	b.n	80093d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0304 	and.w	r3, r3, #4
 8009314:	2b04      	cmp	r3, #4
 8009316:	d149      	bne.n	80093ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009318:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009320:	2200      	movs	r2, #0
 8009322:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f856 	bl	80093d8 <UART_WaitOnFlagUntilTimeout>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d03c      	beq.n	80093ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	623b      	str	r3, [r7, #32]
   return(result);
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009350:	633b      	str	r3, [r7, #48]	@ 0x30
 8009352:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800935e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e6      	bne.n	8009332 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3308      	adds	r3, #8
 800936a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	60fb      	str	r3, [r7, #12]
   return(result);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f023 0301 	bic.w	r3, r3, #1
 800937a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3308      	adds	r3, #8
 8009382:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009384:	61fa      	str	r2, [r7, #28]
 8009386:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	69b9      	ldr	r1, [r7, #24]
 800938a:	69fa      	ldr	r2, [r7, #28]
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	617b      	str	r3, [r7, #20]
   return(result);
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e5      	bne.n	8009364 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2220      	movs	r2, #32
 800939c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e011      	b.n	80093d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2220      	movs	r2, #32
 80093b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3758      	adds	r7, #88	@ 0x58
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	4613      	mov	r3, r2
 80093e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093e8:	e04f      	b.n	800948a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f0:	d04b      	beq.n	800948a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093f2:	f7fa fb9d 	bl	8003b30 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d302      	bcc.n	8009408 <UART_WaitOnFlagUntilTimeout+0x30>
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e04e      	b.n	80094aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0304 	and.w	r3, r3, #4
 8009416:	2b00      	cmp	r3, #0
 8009418:	d037      	beq.n	800948a <UART_WaitOnFlagUntilTimeout+0xb2>
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2b80      	cmp	r3, #128	@ 0x80
 800941e:	d034      	beq.n	800948a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2b40      	cmp	r3, #64	@ 0x40
 8009424:	d031      	beq.n	800948a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	f003 0308 	and.w	r3, r3, #8
 8009430:	2b08      	cmp	r3, #8
 8009432:	d110      	bne.n	8009456 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2208      	movs	r2, #8
 800943a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 f838 	bl	80094b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2208      	movs	r2, #8
 8009446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e029      	b.n	80094aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	69db      	ldr	r3, [r3, #28]
 800945c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009464:	d111      	bne.n	800948a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800946e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 f81e 	bl	80094b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2220      	movs	r2, #32
 800947a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e00f      	b.n	80094aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69da      	ldr	r2, [r3, #28]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	4013      	ands	r3, r2
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	429a      	cmp	r2, r3
 8009498:	bf0c      	ite	eq
 800949a:	2301      	moveq	r3, #1
 800949c:	2300      	movne	r3, #0
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	461a      	mov	r2, r3
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d0a0      	beq.n	80093ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b095      	sub	sp, #84	@ 0x54
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c2:	e853 3f00 	ldrex	r3, [r3]
 80094c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80094da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094e0:	e841 2300 	strex	r3, r2, [r1]
 80094e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1e6      	bne.n	80094ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	3308      	adds	r3, #8
 80094f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	f023 0301 	bic.w	r3, r3, #1
 8009502:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3308      	adds	r3, #8
 800950a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800950c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800950e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800951a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e5      	bne.n	80094ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009524:	2b01      	cmp	r3, #1
 8009526:	d118      	bne.n	800955a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	e853 3f00 	ldrex	r3, [r3]
 8009534:	60bb      	str	r3, [r7, #8]
   return(result);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f023 0310 	bic.w	r3, r3, #16
 800953c:	647b      	str	r3, [r7, #68]	@ 0x44
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009546:	61bb      	str	r3, [r7, #24]
 8009548:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954a:	6979      	ldr	r1, [r7, #20]
 800954c:	69ba      	ldr	r2, [r7, #24]
 800954e:	e841 2300 	strex	r3, r2, [r1]
 8009552:	613b      	str	r3, [r7, #16]
   return(result);
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1e6      	bne.n	8009528 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2220      	movs	r2, #32
 800955e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800956e:	bf00      	nop
 8009570:	3754      	adds	r7, #84	@ 0x54
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
	...

0800957c <__NVIC_SetPriority>:
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	4603      	mov	r3, r0
 8009584:	6039      	str	r1, [r7, #0]
 8009586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800958c:	2b00      	cmp	r3, #0
 800958e:	db0a      	blt.n	80095a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	b2da      	uxtb	r2, r3
 8009594:	490c      	ldr	r1, [pc, #48]	@ (80095c8 <__NVIC_SetPriority+0x4c>)
 8009596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800959a:	0112      	lsls	r2, r2, #4
 800959c:	b2d2      	uxtb	r2, r2
 800959e:	440b      	add	r3, r1
 80095a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80095a4:	e00a      	b.n	80095bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	4908      	ldr	r1, [pc, #32]	@ (80095cc <__NVIC_SetPriority+0x50>)
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	f003 030f 	and.w	r3, r3, #15
 80095b2:	3b04      	subs	r3, #4
 80095b4:	0112      	lsls	r2, r2, #4
 80095b6:	b2d2      	uxtb	r2, r2
 80095b8:	440b      	add	r3, r1
 80095ba:	761a      	strb	r2, [r3, #24]
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	e000e100 	.word	0xe000e100
 80095cc:	e000ed00 	.word	0xe000ed00

080095d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80095d0:	b580      	push	{r7, lr}
 80095d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80095d4:	2100      	movs	r1, #0
 80095d6:	f06f 0004 	mvn.w	r0, #4
 80095da:	f7ff ffcf 	bl	800957c <__NVIC_SetPriority>
#endif
}
 80095de:	bf00      	nop
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ea:	f3ef 8305 	mrs	r3, IPSR
 80095ee:	603b      	str	r3, [r7, #0]
  return(result);
 80095f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80095f6:	f06f 0305 	mvn.w	r3, #5
 80095fa:	607b      	str	r3, [r7, #4]
 80095fc:	e00c      	b.n	8009618 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80095fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009628 <osKernelInitialize+0x44>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d105      	bne.n	8009612 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009606:	4b08      	ldr	r3, [pc, #32]	@ (8009628 <osKernelInitialize+0x44>)
 8009608:	2201      	movs	r2, #1
 800960a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800960c:	2300      	movs	r3, #0
 800960e:	607b      	str	r3, [r7, #4]
 8009610:	e002      	b.n	8009618 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009612:	f04f 33ff 	mov.w	r3, #4294967295
 8009616:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009618:	687b      	ldr	r3, [r7, #4]
}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	20001704 	.word	0x20001704

0800962c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009632:	f3ef 8305 	mrs	r3, IPSR
 8009636:	603b      	str	r3, [r7, #0]
  return(result);
 8009638:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <osKernelStart+0x1a>
    stat = osErrorISR;
 800963e:	f06f 0305 	mvn.w	r3, #5
 8009642:	607b      	str	r3, [r7, #4]
 8009644:	e010      	b.n	8009668 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009646:	4b0b      	ldr	r3, [pc, #44]	@ (8009674 <osKernelStart+0x48>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d109      	bne.n	8009662 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800964e:	f7ff ffbf 	bl	80095d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009652:	4b08      	ldr	r3, [pc, #32]	@ (8009674 <osKernelStart+0x48>)
 8009654:	2202      	movs	r2, #2
 8009656:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009658:	f001 fbf6 	bl	800ae48 <vTaskStartScheduler>
      stat = osOK;
 800965c:	2300      	movs	r3, #0
 800965e:	607b      	str	r3, [r7, #4]
 8009660:	e002      	b.n	8009668 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009662:	f04f 33ff 	mov.w	r3, #4294967295
 8009666:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009668:	687b      	ldr	r3, [r7, #4]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20001704 	.word	0x20001704

08009678 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009678:	b580      	push	{r7, lr}
 800967a:	b08e      	sub	sp, #56	@ 0x38
 800967c:	af04      	add	r7, sp, #16
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009684:	2300      	movs	r3, #0
 8009686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009688:	f3ef 8305 	mrs	r3, IPSR
 800968c:	617b      	str	r3, [r7, #20]
  return(result);
 800968e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009690:	2b00      	cmp	r3, #0
 8009692:	d17e      	bne.n	8009792 <osThreadNew+0x11a>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d07b      	beq.n	8009792 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800969a:	2380      	movs	r3, #128	@ 0x80
 800969c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800969e:	2318      	movs	r3, #24
 80096a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80096a6:	f04f 33ff 	mov.w	r3, #4294967295
 80096aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d045      	beq.n	800973e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d002      	beq.n	80096c0 <osThreadNew+0x48>
        name = attr->name;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d008      	beq.n	80096e6 <osThreadNew+0x6e>
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	2b38      	cmp	r3, #56	@ 0x38
 80096d8:	d805      	bhi.n	80096e6 <osThreadNew+0x6e>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <osThreadNew+0x72>
        return (NULL);
 80096e6:	2300      	movs	r3, #0
 80096e8:	e054      	b.n	8009794 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	089b      	lsrs	r3, r3, #2
 80096f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00e      	beq.n	8009720 <osThreadNew+0xa8>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	2b5b      	cmp	r3, #91	@ 0x5b
 8009708:	d90a      	bls.n	8009720 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800970e:	2b00      	cmp	r3, #0
 8009710:	d006      	beq.n	8009720 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d002      	beq.n	8009720 <osThreadNew+0xa8>
        mem = 1;
 800971a:	2301      	movs	r3, #1
 800971c:	61bb      	str	r3, [r7, #24]
 800971e:	e010      	b.n	8009742 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10c      	bne.n	8009742 <osThreadNew+0xca>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d108      	bne.n	8009742 <osThreadNew+0xca>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d104      	bne.n	8009742 <osThreadNew+0xca>
          mem = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	61bb      	str	r3, [r7, #24]
 800973c:	e001      	b.n	8009742 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d110      	bne.n	800976a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009750:	9202      	str	r2, [sp, #8]
 8009752:	9301      	str	r3, [sp, #4]
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	6a3a      	ldr	r2, [r7, #32]
 800975c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f001 f996 	bl	800aa90 <xTaskCreateStatic>
 8009764:	4603      	mov	r3, r0
 8009766:	613b      	str	r3, [r7, #16]
 8009768:	e013      	b.n	8009792 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d110      	bne.n	8009792 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009770:	6a3b      	ldr	r3, [r7, #32]
 8009772:	b29a      	uxth	r2, r3
 8009774:	f107 0310 	add.w	r3, r7, #16
 8009778:	9301      	str	r3, [sp, #4]
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f001 f9e4 	bl	800ab50 <xTaskCreate>
 8009788:	4603      	mov	r3, r0
 800978a:	2b01      	cmp	r3, #1
 800978c:	d001      	beq.n	8009792 <osThreadNew+0x11a>
            hTask = NULL;
 800978e:	2300      	movs	r3, #0
 8009790:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009792:	693b      	ldr	r3, [r7, #16]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3728      	adds	r7, #40	@ 0x28
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097a4:	f3ef 8305 	mrs	r3, IPSR
 80097a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80097aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d003      	beq.n	80097b8 <osDelay+0x1c>
    stat = osErrorISR;
 80097b0:	f06f 0305 	mvn.w	r3, #5
 80097b4:	60fb      	str	r3, [r7, #12]
 80097b6:	e007      	b.n	80097c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f001 fb0a 	bl	800addc <vTaskDelay>
    }
  }

  return (stat);
 80097c8:	68fb      	ldr	r3, [r7, #12]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b08a      	sub	sp, #40	@ 0x28
 80097d6:	af02      	add	r7, sp, #8
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80097de:	2300      	movs	r3, #0
 80097e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097e2:	f3ef 8305 	mrs	r3, IPSR
 80097e6:	613b      	str	r3, [r7, #16]
  return(result);
 80097e8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d175      	bne.n	80098da <osSemaphoreNew+0x108>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d072      	beq.n	80098da <osSemaphoreNew+0x108>
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d86e      	bhi.n	80098da <osSemaphoreNew+0x108>
    mem = -1;
 80097fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009800:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d015      	beq.n	8009834 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d006      	beq.n	800981e <osSemaphoreNew+0x4c>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	2b4f      	cmp	r3, #79	@ 0x4f
 8009816:	d902      	bls.n	800981e <osSemaphoreNew+0x4c>
        mem = 1;
 8009818:	2301      	movs	r3, #1
 800981a:	61bb      	str	r3, [r7, #24]
 800981c:	e00c      	b.n	8009838 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d108      	bne.n	8009838 <osSemaphoreNew+0x66>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d104      	bne.n	8009838 <osSemaphoreNew+0x66>
          mem = 0;
 800982e:	2300      	movs	r3, #0
 8009830:	61bb      	str	r3, [r7, #24]
 8009832:	e001      	b.n	8009838 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983e:	d04c      	beq.n	80098da <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d128      	bne.n	8009898 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d10a      	bne.n	8009862 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	2203      	movs	r2, #3
 8009852:	9200      	str	r2, [sp, #0]
 8009854:	2200      	movs	r2, #0
 8009856:	2100      	movs	r1, #0
 8009858:	2001      	movs	r0, #1
 800985a:	f000 f9e7 	bl	8009c2c <xQueueGenericCreateStatic>
 800985e:	61f8      	str	r0, [r7, #28]
 8009860:	e005      	b.n	800986e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009862:	2203      	movs	r2, #3
 8009864:	2100      	movs	r1, #0
 8009866:	2001      	movs	r0, #1
 8009868:	f000 fa5d 	bl	8009d26 <xQueueGenericCreate>
 800986c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d022      	beq.n	80098ba <osSemaphoreNew+0xe8>
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d01f      	beq.n	80098ba <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800987a:	2300      	movs	r3, #0
 800987c:	2200      	movs	r2, #0
 800987e:	2100      	movs	r1, #0
 8009880:	69f8      	ldr	r0, [r7, #28]
 8009882:	f000 fb1d 	bl	8009ec0 <xQueueGenericSend>
 8009886:	4603      	mov	r3, r0
 8009888:	2b01      	cmp	r3, #1
 800988a:	d016      	beq.n	80098ba <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800988c:	69f8      	ldr	r0, [r7, #28]
 800988e:	f000 ff2b 	bl	800a6e8 <vQueueDelete>
            hSemaphore = NULL;
 8009892:	2300      	movs	r3, #0
 8009894:	61fb      	str	r3, [r7, #28]
 8009896:	e010      	b.n	80098ba <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d108      	bne.n	80098b0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	461a      	mov	r2, r3
 80098a4:	68b9      	ldr	r1, [r7, #8]
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f000 fa9b 	bl	8009de2 <xQueueCreateCountingSemaphoreStatic>
 80098ac:	61f8      	str	r0, [r7, #28]
 80098ae:	e004      	b.n	80098ba <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80098b0:	68b9      	ldr	r1, [r7, #8]
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 face 	bl	8009e54 <xQueueCreateCountingSemaphore>
 80098b8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00c      	beq.n	80098da <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <osSemaphoreNew+0xfc>
          name = attr->name;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	e001      	b.n	80098d2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80098ce:	2300      	movs	r3, #0
 80098d0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80098d2:	6979      	ldr	r1, [r7, #20]
 80098d4:	69f8      	ldr	r0, [r7, #28]
 80098d6:	f001 f853 	bl	800a980 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80098da:	69fb      	ldr	r3, [r7, #28]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3720      	adds	r7, #32
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d103      	bne.n	8009904 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80098fc:	f06f 0303 	mvn.w	r3, #3
 8009900:	617b      	str	r3, [r7, #20]
 8009902:	e039      	b.n	8009978 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009904:	f3ef 8305 	mrs	r3, IPSR
 8009908:	60fb      	str	r3, [r7, #12]
  return(result);
 800990a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800990c:	2b00      	cmp	r3, #0
 800990e:	d022      	beq.n	8009956 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009916:	f06f 0303 	mvn.w	r3, #3
 800991a:	617b      	str	r3, [r7, #20]
 800991c:	e02c      	b.n	8009978 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800991e:	2300      	movs	r3, #0
 8009920:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009922:	f107 0308 	add.w	r3, r7, #8
 8009926:	461a      	mov	r2, r3
 8009928:	2100      	movs	r1, #0
 800992a:	6938      	ldr	r0, [r7, #16]
 800992c:	f000 fe5a 	bl	800a5e4 <xQueueReceiveFromISR>
 8009930:	4603      	mov	r3, r0
 8009932:	2b01      	cmp	r3, #1
 8009934:	d003      	beq.n	800993e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009936:	f06f 0302 	mvn.w	r3, #2
 800993a:	617b      	str	r3, [r7, #20]
 800993c:	e01c      	b.n	8009978 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d019      	beq.n	8009978 <osSemaphoreAcquire+0x94>
 8009944:	4b0f      	ldr	r3, [pc, #60]	@ (8009984 <osSemaphoreAcquire+0xa0>)
 8009946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	e010      	b.n	8009978 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6938      	ldr	r0, [r7, #16]
 800995a:	f000 fd33 	bl	800a3c4 <xQueueSemaphoreTake>
 800995e:	4603      	mov	r3, r0
 8009960:	2b01      	cmp	r3, #1
 8009962:	d009      	beq.n	8009978 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800996a:	f06f 0301 	mvn.w	r3, #1
 800996e:	617b      	str	r3, [r7, #20]
 8009970:	e002      	b.n	8009978 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009972:	f06f 0302 	mvn.w	r3, #2
 8009976:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009978:	697b      	ldr	r3, [r7, #20]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	e000ed04 	.word	0xe000ed04

08009988 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	4a07      	ldr	r2, [pc, #28]	@ (80099b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009998:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	4a06      	ldr	r2, [pc, #24]	@ (80099b8 <vApplicationGetIdleTaskMemory+0x30>)
 800999e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2280      	movs	r2, #128	@ 0x80
 80099a4:	601a      	str	r2, [r3, #0]
}
 80099a6:	bf00      	nop
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	20001708 	.word	0x20001708
 80099b8:	20001764 	.word	0x20001764

080099bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4a07      	ldr	r2, [pc, #28]	@ (80099e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80099cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	4a06      	ldr	r2, [pc, #24]	@ (80099ec <vApplicationGetTimerTaskMemory+0x30>)
 80099d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80099da:	601a      	str	r2, [r3, #0]
}
 80099dc:	bf00      	nop
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	20001964 	.word	0x20001964
 80099ec:	200019c0 	.word	0x200019c0

080099f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f103 0208 	add.w	r2, r3, #8
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f04f 32ff 	mov.w	r2, #4294967295
 8009a08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f103 0208 	add.w	r2, r3, #8
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f103 0208 	add.w	r2, r3, #8
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a3e:	bf00      	nop
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b085      	sub	sp, #20
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	1c5a      	adds	r2, r3, #1
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	601a      	str	r2, [r3, #0]
}
 8009a86:	bf00      	nop
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a92:	b480      	push	{r7}
 8009a94:	b085      	sub	sp, #20
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa8:	d103      	bne.n	8009ab2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	e00c      	b.n	8009acc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	e002      	b.n	8009ac0 <vListInsert+0x2e>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	60fb      	str	r3, [r7, #12]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d2f6      	bcs.n	8009aba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	601a      	str	r2, [r3, #0]
}
 8009af8:	bf00      	nop
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	6892      	ldr	r2, [r2, #8]
 8009b1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	6852      	ldr	r2, [r2, #4]
 8009b24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d103      	bne.n	8009b38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	689a      	ldr	r2, [r3, #8]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	1e5a      	subs	r2, r3, #1
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10b      	bne.n	8009b84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009b7e:	bf00      	nop
 8009b80:	bf00      	nop
 8009b82:	e7fd      	b.n	8009b80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009b84:	f002 fc18 	bl	800c3b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b90:	68f9      	ldr	r1, [r7, #12]
 8009b92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009b94:	fb01 f303 	mul.w	r3, r1, r3
 8009b98:	441a      	add	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	68f9      	ldr	r1, [r7, #12]
 8009bb8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009bba:	fb01 f303 	mul.w	r3, r1, r3
 8009bbe:	441a      	add	r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	22ff      	movs	r2, #255	@ 0xff
 8009bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	22ff      	movs	r2, #255	@ 0xff
 8009bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d114      	bne.n	8009c04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d01a      	beq.n	8009c18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3310      	adds	r3, #16
 8009be6:	4618      	mov	r0, r3
 8009be8:	f001 fbbc 	bl	800b364 <xTaskRemoveFromEventList>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d012      	beq.n	8009c18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c28 <xQueueGenericReset+0xd0>)
 8009bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	e009      	b.n	8009c18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3310      	adds	r3, #16
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff fef1 	bl	80099f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	3324      	adds	r3, #36	@ 0x24
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff feec 	bl	80099f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c18:	f002 fc00 	bl	800c41c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c1c:	2301      	movs	r3, #1
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	e000ed04 	.word	0xe000ed04

08009c2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08e      	sub	sp, #56	@ 0x38
 8009c30:	af02      	add	r7, sp, #8
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10b      	bne.n	8009c58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009c52:	bf00      	nop
 8009c54:	bf00      	nop
 8009c56:	e7fd      	b.n	8009c54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10b      	bne.n	8009c76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c70:	bf00      	nop
 8009c72:	bf00      	nop
 8009c74:	e7fd      	b.n	8009c72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <xQueueGenericCreateStatic+0x56>
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <xQueueGenericCreateStatic+0x5a>
 8009c82:	2301      	movs	r3, #1
 8009c84:	e000      	b.n	8009c88 <xQueueGenericCreateStatic+0x5c>
 8009c86:	2300      	movs	r3, #0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10b      	bne.n	8009ca4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	623b      	str	r3, [r7, #32]
}
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	e7fd      	b.n	8009ca0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d102      	bne.n	8009cb0 <xQueueGenericCreateStatic+0x84>
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d101      	bne.n	8009cb4 <xQueueGenericCreateStatic+0x88>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e000      	b.n	8009cb6 <xQueueGenericCreateStatic+0x8a>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10b      	bne.n	8009cd2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	61fb      	str	r3, [r7, #28]
}
 8009ccc:	bf00      	nop
 8009cce:	bf00      	nop
 8009cd0:	e7fd      	b.n	8009cce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009cd2:	2350      	movs	r3, #80	@ 0x50
 8009cd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	2b50      	cmp	r3, #80	@ 0x50
 8009cda:	d00b      	beq.n	8009cf4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	61bb      	str	r3, [r7, #24]
}
 8009cee:	bf00      	nop
 8009cf0:	bf00      	nop
 8009cf2:	e7fd      	b.n	8009cf0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009cf4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00d      	beq.n	8009d1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	4613      	mov	r3, r2
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	68b9      	ldr	r1, [r7, #8]
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f840 	bl	8009d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3730      	adds	r7, #48	@ 0x30
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b08a      	sub	sp, #40	@ 0x28
 8009d2a:	af02      	add	r7, sp, #8
 8009d2c:	60f8      	str	r0, [r7, #12]
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	4613      	mov	r3, r2
 8009d32:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10b      	bne.n	8009d52 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	613b      	str	r3, [r7, #16]
}
 8009d4c:	bf00      	nop
 8009d4e:	bf00      	nop
 8009d50:	e7fd      	b.n	8009d4e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	fb02 f303 	mul.w	r3, r2, r3
 8009d5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	3350      	adds	r3, #80	@ 0x50
 8009d60:	4618      	mov	r0, r3
 8009d62:	f002 fc4b 	bl	800c5fc <pvPortMalloc>
 8009d66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d011      	beq.n	8009d92 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	3350      	adds	r3, #80	@ 0x50
 8009d76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d80:	79fa      	ldrb	r2, [r7, #7]
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	4613      	mov	r3, r2
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	68b9      	ldr	r1, [r7, #8]
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 f805 	bl	8009d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d92:	69bb      	ldr	r3, [r7, #24]
	}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3720      	adds	r7, #32
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
 8009da8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d103      	bne.n	8009db8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	69ba      	ldr	r2, [r7, #24]
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	e002      	b.n	8009dbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009dca:	2101      	movs	r1, #1
 8009dcc:	69b8      	ldr	r0, [r7, #24]
 8009dce:	f7ff fec3 	bl	8009b58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	78fa      	ldrb	r2, [r7, #3]
 8009dd6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009dda:	bf00      	nop
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b08a      	sub	sp, #40	@ 0x28
 8009de6:	af02      	add	r7, sp, #8
 8009de8:	60f8      	str	r0, [r7, #12]
 8009dea:	60b9      	str	r1, [r7, #8]
 8009dec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10b      	bne.n	8009e0c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8009df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	61bb      	str	r3, [r7, #24]
}
 8009e06:	bf00      	nop
 8009e08:	bf00      	nop
 8009e0a:	e7fd      	b.n	8009e08 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d90b      	bls.n	8009e2c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	617b      	str	r3, [r7, #20]
}
 8009e26:	bf00      	nop
 8009e28:	bf00      	nop
 8009e2a:	e7fd      	b.n	8009e28 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	2100      	movs	r1, #0
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f7ff fef8 	bl	8009c2c <xQueueGenericCreateStatic>
 8009e3c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009e4a:	69fb      	ldr	r3, [r7, #28]
	}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3720      	adds	r7, #32
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10b      	bne.n	8009e7c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	613b      	str	r3, [r7, #16]
}
 8009e76:	bf00      	nop
 8009e78:	bf00      	nop
 8009e7a:	e7fd      	b.n	8009e78 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009e7c:	683a      	ldr	r2, [r7, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d90b      	bls.n	8009e9c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	60fb      	str	r3, [r7, #12]
}
 8009e96:	bf00      	nop
 8009e98:	bf00      	nop
 8009e9a:	e7fd      	b.n	8009e98 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff ff40 	bl	8009d26 <xQueueGenericCreate>
 8009ea6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009eb4:	697b      	ldr	r3, [r7, #20]
	}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
	...

08009ec0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08e      	sub	sp, #56	@ 0x38
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
 8009ecc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10b      	bne.n	8009ef4 <xQueueGenericSend+0x34>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009eee:	bf00      	nop
 8009ef0:	bf00      	nop
 8009ef2:	e7fd      	b.n	8009ef0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d103      	bne.n	8009f02 <xQueueGenericSend+0x42>
 8009efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <xQueueGenericSend+0x46>
 8009f02:	2301      	movs	r3, #1
 8009f04:	e000      	b.n	8009f08 <xQueueGenericSend+0x48>
 8009f06:	2300      	movs	r3, #0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10b      	bne.n	8009f24 <xQueueGenericSend+0x64>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f1e:	bf00      	nop
 8009f20:	bf00      	nop
 8009f22:	e7fd      	b.n	8009f20 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d103      	bne.n	8009f32 <xQueueGenericSend+0x72>
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d101      	bne.n	8009f36 <xQueueGenericSend+0x76>
 8009f32:	2301      	movs	r3, #1
 8009f34:	e000      	b.n	8009f38 <xQueueGenericSend+0x78>
 8009f36:	2300      	movs	r3, #0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10b      	bne.n	8009f54 <xQueueGenericSend+0x94>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	623b      	str	r3, [r7, #32]
}
 8009f4e:	bf00      	nop
 8009f50:	bf00      	nop
 8009f52:	e7fd      	b.n	8009f50 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f54:	f001 fbc6 	bl	800b6e4 <xTaskGetSchedulerState>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d102      	bne.n	8009f64 <xQueueGenericSend+0xa4>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <xQueueGenericSend+0xa8>
 8009f64:	2301      	movs	r3, #1
 8009f66:	e000      	b.n	8009f6a <xQueueGenericSend+0xaa>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10b      	bne.n	8009f86 <xQueueGenericSend+0xc6>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	61fb      	str	r3, [r7, #28]
}
 8009f80:	bf00      	nop
 8009f82:	bf00      	nop
 8009f84:	e7fd      	b.n	8009f82 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f86:	f002 fa17 	bl	800c3b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d302      	bcc.n	8009f9c <xQueueGenericSend+0xdc>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d129      	bne.n	8009ff0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	68b9      	ldr	r1, [r7, #8]
 8009fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fa2:	f000 fbdd 	bl	800a760 <prvCopyDataToQueue>
 8009fa6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d010      	beq.n	8009fd2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb2:	3324      	adds	r3, #36	@ 0x24
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f001 f9d5 	bl	800b364 <xTaskRemoveFromEventList>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d013      	beq.n	8009fe8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009fc0:	4b3f      	ldr	r3, [pc, #252]	@ (800a0c0 <xQueueGenericSend+0x200>)
 8009fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fc6:	601a      	str	r2, [r3, #0]
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	e00a      	b.n	8009fe8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d007      	beq.n	8009fe8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009fd8:	4b39      	ldr	r3, [pc, #228]	@ (800a0c0 <xQueueGenericSend+0x200>)
 8009fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009fe8:	f002 fa18 	bl	800c41c <vPortExitCritical>
				return pdPASS;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e063      	b.n	800a0b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d103      	bne.n	8009ffe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ff6:	f002 fa11 	bl	800c41c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	e05c      	b.n	800a0b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a000:	2b00      	cmp	r3, #0
 800a002:	d106      	bne.n	800a012 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a004:	f107 0314 	add.w	r3, r7, #20
 800a008:	4618      	mov	r0, r3
 800a00a:	f001 fa0f 	bl	800b42c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a00e:	2301      	movs	r3, #1
 800a010:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a012:	f002 fa03 	bl	800c41c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a016:	f000 ff7f 	bl	800af18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a01a:	f002 f9cd 	bl	800c3b8 <vPortEnterCritical>
 800a01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a020:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a024:	b25b      	sxtb	r3, r3
 800a026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02a:	d103      	bne.n	800a034 <xQueueGenericSend+0x174>
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a036:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a03a:	b25b      	sxtb	r3, r3
 800a03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a040:	d103      	bne.n	800a04a <xQueueGenericSend+0x18a>
 800a042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a044:	2200      	movs	r2, #0
 800a046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a04a:	f002 f9e7 	bl	800c41c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a04e:	1d3a      	adds	r2, r7, #4
 800a050:	f107 0314 	add.w	r3, r7, #20
 800a054:	4611      	mov	r1, r2
 800a056:	4618      	mov	r0, r3
 800a058:	f001 f9fe 	bl	800b458 <xTaskCheckForTimeOut>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d124      	bne.n	800a0ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a062:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a064:	f000 fc74 	bl	800a950 <prvIsQueueFull>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d018      	beq.n	800a0a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a070:	3310      	adds	r3, #16
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	4611      	mov	r1, r2
 800a076:	4618      	mov	r0, r3
 800a078:	f001 f922 	bl	800b2c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a07c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a07e:	f000 fbff 	bl	800a880 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a082:	f000 ff57 	bl	800af34 <xTaskResumeAll>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f47f af7c 	bne.w	8009f86 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a08e:	4b0c      	ldr	r3, [pc, #48]	@ (800a0c0 <xQueueGenericSend+0x200>)
 800a090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	e772      	b.n	8009f86 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a0a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0a2:	f000 fbed 	bl	800a880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0a6:	f000 ff45 	bl	800af34 <xTaskResumeAll>
 800a0aa:	e76c      	b.n	8009f86 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a0ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0ae:	f000 fbe7 	bl	800a880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0b2:	f000 ff3f 	bl	800af34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a0b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3738      	adds	r7, #56	@ 0x38
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	e000ed04 	.word	0xe000ed04

0800a0c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b090      	sub	sp, #64	@ 0x40
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10b      	bne.n	800a0f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a0ee:	bf00      	nop
 800a0f0:	bf00      	nop
 800a0f2:	e7fd      	b.n	800a0f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d103      	bne.n	800a102 <xQueueGenericSendFromISR+0x3e>
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <xQueueGenericSendFromISR+0x42>
 800a102:	2301      	movs	r3, #1
 800a104:	e000      	b.n	800a108 <xQueueGenericSendFromISR+0x44>
 800a106:	2300      	movs	r3, #0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10b      	bne.n	800a124 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a110:	f383 8811 	msr	BASEPRI, r3
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a11e:	bf00      	nop
 800a120:	bf00      	nop
 800a122:	e7fd      	b.n	800a120 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2b02      	cmp	r3, #2
 800a128:	d103      	bne.n	800a132 <xQueueGenericSendFromISR+0x6e>
 800a12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d101      	bne.n	800a136 <xQueueGenericSendFromISR+0x72>
 800a132:	2301      	movs	r3, #1
 800a134:	e000      	b.n	800a138 <xQueueGenericSendFromISR+0x74>
 800a136:	2300      	movs	r3, #0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10b      	bne.n	800a154 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	623b      	str	r3, [r7, #32]
}
 800a14e:	bf00      	nop
 800a150:	bf00      	nop
 800a152:	e7fd      	b.n	800a150 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a154:	f002 fa10 	bl	800c578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a158:	f3ef 8211 	mrs	r2, BASEPRI
 800a15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	61fa      	str	r2, [r7, #28]
 800a16e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a170:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a172:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a176:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d302      	bcc.n	800a186 <xQueueGenericSendFromISR+0xc2>
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2b02      	cmp	r3, #2
 800a184:	d12f      	bne.n	800a1e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a188:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a18c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a194:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	68b9      	ldr	r1, [r7, #8]
 800a19a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a19c:	f000 fae0 	bl	800a760 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a8:	d112      	bne.n	800a1d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d016      	beq.n	800a1e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b4:	3324      	adds	r3, #36	@ 0x24
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f001 f8d4 	bl	800b364 <xTaskRemoveFromEventList>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00e      	beq.n	800a1e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00b      	beq.n	800a1e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	e007      	b.n	800a1e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	b25a      	sxtb	r2, r3
 800a1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a1e4:	e001      	b.n	800a1ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a1f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3740      	adds	r7, #64	@ 0x40
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b08c      	sub	sp, #48	@ 0x30
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a20c:	2300      	movs	r3, #0
 800a20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10b      	bne.n	800a232 <xQueueReceive+0x32>
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	623b      	str	r3, [r7, #32]
}
 800a22c:	bf00      	nop
 800a22e:	bf00      	nop
 800a230:	e7fd      	b.n	800a22e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d103      	bne.n	800a240 <xQueueReceive+0x40>
 800a238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <xQueueReceive+0x44>
 800a240:	2301      	movs	r3, #1
 800a242:	e000      	b.n	800a246 <xQueueReceive+0x46>
 800a244:	2300      	movs	r3, #0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10b      	bne.n	800a262 <xQueueReceive+0x62>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	61fb      	str	r3, [r7, #28]
}
 800a25c:	bf00      	nop
 800a25e:	bf00      	nop
 800a260:	e7fd      	b.n	800a25e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a262:	f001 fa3f 	bl	800b6e4 <xTaskGetSchedulerState>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d102      	bne.n	800a272 <xQueueReceive+0x72>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <xQueueReceive+0x76>
 800a272:	2301      	movs	r3, #1
 800a274:	e000      	b.n	800a278 <xQueueReceive+0x78>
 800a276:	2300      	movs	r3, #0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10b      	bne.n	800a294 <xQueueReceive+0x94>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	61bb      	str	r3, [r7, #24]
}
 800a28e:	bf00      	nop
 800a290:	bf00      	nop
 800a292:	e7fd      	b.n	800a290 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a294:	f002 f890 	bl	800c3b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a29c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d01f      	beq.n	800a2e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2a4:	68b9      	ldr	r1, [r7, #8]
 800a2a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2a8:	f000 fac4 	bl	800a834 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ae:	1e5a      	subs	r2, r3, #1
 800a2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00f      	beq.n	800a2dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2be:	3310      	adds	r3, #16
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f001 f84f 	bl	800b364 <xTaskRemoveFromEventList>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d007      	beq.n	800a2dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2cc:	4b3c      	ldr	r3, [pc, #240]	@ (800a3c0 <xQueueReceive+0x1c0>)
 800a2ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2dc:	f002 f89e 	bl	800c41c <vPortExitCritical>
				return pdPASS;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e069      	b.n	800a3b8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d103      	bne.n	800a2f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2ea:	f002 f897 	bl	800c41c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e062      	b.n	800a3b8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d106      	bne.n	800a306 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2f8:	f107 0310 	add.w	r3, r7, #16
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f001 f895 	bl	800b42c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a302:	2301      	movs	r3, #1
 800a304:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a306:	f002 f889 	bl	800c41c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a30a:	f000 fe05 	bl	800af18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a30e:	f002 f853 	bl	800c3b8 <vPortEnterCritical>
 800a312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a314:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a318:	b25b      	sxtb	r3, r3
 800a31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31e:	d103      	bne.n	800a328 <xQueueReceive+0x128>
 800a320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a32e:	b25b      	sxtb	r3, r3
 800a330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a334:	d103      	bne.n	800a33e <xQueueReceive+0x13e>
 800a336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a33e:	f002 f86d 	bl	800c41c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a342:	1d3a      	adds	r2, r7, #4
 800a344:	f107 0310 	add.w	r3, r7, #16
 800a348:	4611      	mov	r1, r2
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 f884 	bl	800b458 <xTaskCheckForTimeOut>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d123      	bne.n	800a39e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a358:	f000 fae4 	bl	800a924 <prvIsQueueEmpty>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d017      	beq.n	800a392 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a364:	3324      	adds	r3, #36	@ 0x24
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	4611      	mov	r1, r2
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 ffa8 	bl	800b2c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a370:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a372:	f000 fa85 	bl	800a880 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a376:	f000 fddd 	bl	800af34 <xTaskResumeAll>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d189      	bne.n	800a294 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a380:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c0 <xQueueReceive+0x1c0>)
 800a382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a386:	601a      	str	r2, [r3, #0]
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	e780      	b.n	800a294 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a394:	f000 fa74 	bl	800a880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a398:	f000 fdcc 	bl	800af34 <xTaskResumeAll>
 800a39c:	e77a      	b.n	800a294 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a39e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3a0:	f000 fa6e 	bl	800a880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3a4:	f000 fdc6 	bl	800af34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3aa:	f000 fabb 	bl	800a924 <prvIsQueueEmpty>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f43f af6f 	beq.w	800a294 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3730      	adds	r7, #48	@ 0x30
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	e000ed04 	.word	0xe000ed04

0800a3c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b08e      	sub	sp, #56	@ 0x38
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10b      	bne.n	800a3f8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	623b      	str	r3, [r7, #32]
}
 800a3f2:	bf00      	nop
 800a3f4:	bf00      	nop
 800a3f6:	e7fd      	b.n	800a3f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00b      	beq.n	800a418 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	61fb      	str	r3, [r7, #28]
}
 800a412:	bf00      	nop
 800a414:	bf00      	nop
 800a416:	e7fd      	b.n	800a414 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a418:	f001 f964 	bl	800b6e4 <xTaskGetSchedulerState>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d102      	bne.n	800a428 <xQueueSemaphoreTake+0x64>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d101      	bne.n	800a42c <xQueueSemaphoreTake+0x68>
 800a428:	2301      	movs	r3, #1
 800a42a:	e000      	b.n	800a42e <xQueueSemaphoreTake+0x6a>
 800a42c:	2300      	movs	r3, #0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10b      	bne.n	800a44a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	61bb      	str	r3, [r7, #24]
}
 800a444:	bf00      	nop
 800a446:	bf00      	nop
 800a448:	e7fd      	b.n	800a446 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a44a:	f001 ffb5 	bl	800c3b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a452:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a456:	2b00      	cmp	r3, #0
 800a458:	d024      	beq.n	800a4a4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45c:	1e5a      	subs	r2, r3, #1
 800a45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a460:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d104      	bne.n	800a474 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a46a:	f001 fab5 	bl	800b9d8 <pvTaskIncrementMutexHeldCount>
 800a46e:	4602      	mov	r2, r0
 800a470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a472:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00f      	beq.n	800a49c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a47e:	3310      	adds	r3, #16
 800a480:	4618      	mov	r0, r3
 800a482:	f000 ff6f 	bl	800b364 <xTaskRemoveFromEventList>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d007      	beq.n	800a49c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a48c:	4b54      	ldr	r3, [pc, #336]	@ (800a5e0 <xQueueSemaphoreTake+0x21c>)
 800a48e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a49c:	f001 ffbe 	bl	800c41c <vPortExitCritical>
				return pdPASS;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e098      	b.n	800a5d6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d112      	bne.n	800a4d0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00b      	beq.n	800a4c8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	617b      	str	r3, [r7, #20]
}
 800a4c2:	bf00      	nop
 800a4c4:	bf00      	nop
 800a4c6:	e7fd      	b.n	800a4c4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a4c8:	f001 ffa8 	bl	800c41c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	e082      	b.n	800a5d6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d106      	bne.n	800a4e4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4d6:	f107 030c 	add.w	r3, r7, #12
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 ffa6 	bl	800b42c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4e4:	f001 ff9a 	bl	800c41c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4e8:	f000 fd16 	bl	800af18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4ec:	f001 ff64 	bl	800c3b8 <vPortEnterCritical>
 800a4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4f6:	b25b      	sxtb	r3, r3
 800a4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fc:	d103      	bne.n	800a506 <xQueueSemaphoreTake+0x142>
 800a4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a500:	2200      	movs	r2, #0
 800a502:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a508:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a50c:	b25b      	sxtb	r3, r3
 800a50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a512:	d103      	bne.n	800a51c <xQueueSemaphoreTake+0x158>
 800a514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a516:	2200      	movs	r2, #0
 800a518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a51c:	f001 ff7e 	bl	800c41c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a520:	463a      	mov	r2, r7
 800a522:	f107 030c 	add.w	r3, r7, #12
 800a526:	4611      	mov	r1, r2
 800a528:	4618      	mov	r0, r3
 800a52a:	f000 ff95 	bl	800b458 <xTaskCheckForTimeOut>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d132      	bne.n	800a59a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a534:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a536:	f000 f9f5 	bl	800a924 <prvIsQueueEmpty>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d026      	beq.n	800a58e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d109      	bne.n	800a55c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a548:	f001 ff36 	bl	800c3b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	4618      	mov	r0, r3
 800a552:	f001 f8e5 	bl	800b720 <xTaskPriorityInherit>
 800a556:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a558:	f001 ff60 	bl	800c41c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a55e:	3324      	adds	r3, #36	@ 0x24
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	4611      	mov	r1, r2
 800a564:	4618      	mov	r0, r3
 800a566:	f000 feab 	bl	800b2c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a56a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a56c:	f000 f988 	bl	800a880 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a570:	f000 fce0 	bl	800af34 <xTaskResumeAll>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	f47f af67 	bne.w	800a44a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a57c:	4b18      	ldr	r3, [pc, #96]	@ (800a5e0 <xQueueSemaphoreTake+0x21c>)
 800a57e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	e75d      	b.n	800a44a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a58e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a590:	f000 f976 	bl	800a880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a594:	f000 fcce 	bl	800af34 <xTaskResumeAll>
 800a598:	e757      	b.n	800a44a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a59a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a59c:	f000 f970 	bl	800a880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5a0:	f000 fcc8 	bl	800af34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a5a6:	f000 f9bd 	bl	800a924 <prvIsQueueEmpty>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f43f af4c 	beq.w	800a44a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00d      	beq.n	800a5d4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a5b8:	f001 fefe 	bl	800c3b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a5bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a5be:	f000 f8b7 	bl	800a730 <prvGetDisinheritPriorityAfterTimeout>
 800a5c2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f001 f980 	bl	800b8d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a5d0:	f001 ff24 	bl	800c41c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3738      	adds	r7, #56	@ 0x38
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	e000ed04 	.word	0xe000ed04

0800a5e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b08e      	sub	sp, #56	@ 0x38
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10b      	bne.n	800a612 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	623b      	str	r3, [r7, #32]
}
 800a60c:	bf00      	nop
 800a60e:	bf00      	nop
 800a610:	e7fd      	b.n	800a60e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d103      	bne.n	800a620 <xQueueReceiveFromISR+0x3c>
 800a618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <xQueueReceiveFromISR+0x40>
 800a620:	2301      	movs	r3, #1
 800a622:	e000      	b.n	800a626 <xQueueReceiveFromISR+0x42>
 800a624:	2300      	movs	r3, #0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10b      	bne.n	800a642 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	61fb      	str	r3, [r7, #28]
}
 800a63c:	bf00      	nop
 800a63e:	bf00      	nop
 800a640:	e7fd      	b.n	800a63e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a642:	f001 ff99 	bl	800c578 <vPortValidateInterruptPriority>
	__asm volatile
 800a646:	f3ef 8211 	mrs	r2, BASEPRI
 800a64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	61ba      	str	r2, [r7, #24]
 800a65c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a65e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a660:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a666:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d02f      	beq.n	800a6ce <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a678:	68b9      	ldr	r1, [r7, #8]
 800a67a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a67c:	f000 f8da 	bl	800a834 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a682:	1e5a      	subs	r2, r3, #1
 800a684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a686:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a688:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a690:	d112      	bne.n	800a6b8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d016      	beq.n	800a6c8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69c:	3310      	adds	r3, #16
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 fe60 	bl	800b364 <xTaskRemoveFromEventList>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00e      	beq.n	800a6c8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00b      	beq.n	800a6c8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	e007      	b.n	800a6c8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6bc:	3301      	adds	r3, #1
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	b25a      	sxtb	r2, r3
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6cc:	e001      	b.n	800a6d2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	f383 8811 	msr	BASEPRI, r3
}
 800a6dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3738      	adds	r7, #56	@ 0x38
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10b      	bne.n	800a712 <vQueueDelete+0x2a>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	60bb      	str	r3, [r7, #8]
}
 800a70c:	bf00      	nop
 800a70e:	bf00      	nop
 800a710:	e7fd      	b.n	800a70e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 f95e 	bl	800a9d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d102      	bne.n	800a728 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f002 f838 	bl	800c798 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a728:	bf00      	nop
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d006      	beq.n	800a74e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	e001      	b.n	800a752 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a74e:	2300      	movs	r3, #0
 800a750:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a752:	68fb      	ldr	r3, [r7, #12]
	}
 800a754:	4618      	mov	r0, r3
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a76c:	2300      	movs	r3, #0
 800a76e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a774:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10d      	bne.n	800a79a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d14d      	bne.n	800a822 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f001 f830 	bl	800b7f0 <xTaskPriorityDisinherit>
 800a790:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	609a      	str	r2, [r3, #8]
 800a798:	e043      	b.n	800a822 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d119      	bne.n	800a7d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6858      	ldr	r0, [r3, #4]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	68b9      	ldr	r1, [r7, #8]
 800a7ac:	f003 fad1 	bl	800dd52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7b8:	441a      	add	r2, r3
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d32b      	bcc.n	800a822 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	605a      	str	r2, [r3, #4]
 800a7d2:	e026      	b.n	800a822 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	68d8      	ldr	r0, [r3, #12]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7dc:	461a      	mov	r2, r3
 800a7de:	68b9      	ldr	r1, [r7, #8]
 800a7e0:	f003 fab7 	bl	800dd52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	68da      	ldr	r2, [r3, #12]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ec:	425b      	negs	r3, r3
 800a7ee:	441a      	add	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	68da      	ldr	r2, [r3, #12]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d207      	bcs.n	800a810 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a808:	425b      	negs	r3, r3
 800a80a:	441a      	add	r2, r3
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b02      	cmp	r3, #2
 800a814:	d105      	bne.n	800a822 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	3b01      	subs	r3, #1
 800a820:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a82a:	697b      	ldr	r3, [r7, #20]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a842:	2b00      	cmp	r3, #0
 800a844:	d018      	beq.n	800a878 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68da      	ldr	r2, [r3, #12]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a84e:	441a      	add	r2, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68da      	ldr	r2, [r3, #12]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d303      	bcc.n	800a868 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	68d9      	ldr	r1, [r3, #12]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a870:	461a      	mov	r2, r3
 800a872:	6838      	ldr	r0, [r7, #0]
 800a874:	f003 fa6d 	bl	800dd52 <memcpy>
	}
}
 800a878:	bf00      	nop
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a888:	f001 fd96 	bl	800c3b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a892:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a894:	e011      	b.n	800a8ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d012      	beq.n	800a8c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	3324      	adds	r3, #36	@ 0x24
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 fd5e 	bl	800b364 <xTaskRemoveFromEventList>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a8ae:	f000 fe37 	bl	800b520 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a8b2:	7bfb      	ldrb	r3, [r7, #15]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	dce9      	bgt.n	800a896 <prvUnlockQueue+0x16>
 800a8c2:	e000      	b.n	800a8c6 <prvUnlockQueue+0x46>
					break;
 800a8c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	22ff      	movs	r2, #255	@ 0xff
 800a8ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a8ce:	f001 fda5 	bl	800c41c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a8d2:	f001 fd71 	bl	800c3b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8de:	e011      	b.n	800a904 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d012      	beq.n	800a90e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	3310      	adds	r3, #16
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 fd39 	bl	800b364 <xTaskRemoveFromEventList>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d001      	beq.n	800a8fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8f8:	f000 fe12 	bl	800b520 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	b2db      	uxtb	r3, r3
 800a902:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	dce9      	bgt.n	800a8e0 <prvUnlockQueue+0x60>
 800a90c:	e000      	b.n	800a910 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a90e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	22ff      	movs	r2, #255	@ 0xff
 800a914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a918:	f001 fd80 	bl	800c41c <vPortExitCritical>
}
 800a91c:	bf00      	nop
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a92c:	f001 fd44 	bl	800c3b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a934:	2b00      	cmp	r3, #0
 800a936:	d102      	bne.n	800a93e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a938:	2301      	movs	r3, #1
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	e001      	b.n	800a942 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a93e:	2300      	movs	r3, #0
 800a940:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a942:	f001 fd6b 	bl	800c41c <vPortExitCritical>

	return xReturn;
 800a946:	68fb      	ldr	r3, [r7, #12]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a958:	f001 fd2e 	bl	800c3b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a964:	429a      	cmp	r2, r3
 800a966:	d102      	bne.n	800a96e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a968:	2301      	movs	r3, #1
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	e001      	b.n	800a972 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a96e:	2300      	movs	r3, #0
 800a970:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a972:	f001 fd53 	bl	800c41c <vPortExitCritical>

	return xReturn;
 800a976:	68fb      	ldr	r3, [r7, #12]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a98a:	2300      	movs	r3, #0
 800a98c:	60fb      	str	r3, [r7, #12]
 800a98e:	e014      	b.n	800a9ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a990:	4a0f      	ldr	r2, [pc, #60]	@ (800a9d0 <vQueueAddToRegistry+0x50>)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10b      	bne.n	800a9b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a99c:	490c      	ldr	r1, [pc, #48]	@ (800a9d0 <vQueueAddToRegistry+0x50>)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a9a6:	4a0a      	ldr	r2, [pc, #40]	@ (800a9d0 <vQueueAddToRegistry+0x50>)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	4413      	add	r3, r2
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a9b2:	e006      	b.n	800a9c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	60fb      	str	r3, [r7, #12]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b07      	cmp	r3, #7
 800a9be:	d9e7      	bls.n	800a990 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a9c0:	bf00      	nop
 800a9c2:	bf00      	nop
 800a9c4:	3714      	adds	r7, #20
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	20001dc0 	.word	0x20001dc0

0800a9d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9dc:	2300      	movs	r3, #0
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	e016      	b.n	800aa10 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a9e2:	4a10      	ldr	r2, [pc, #64]	@ (800aa24 <vQueueUnregisterQueue+0x50>)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	4413      	add	r3, r2
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d10b      	bne.n	800aa0a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a9f2:	4a0c      	ldr	r2, [pc, #48]	@ (800aa24 <vQueueUnregisterQueue+0x50>)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a9fc:	4a09      	ldr	r2, [pc, #36]	@ (800aa24 <vQueueUnregisterQueue+0x50>)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	4413      	add	r3, r2
 800aa04:	2200      	movs	r2, #0
 800aa06:	605a      	str	r2, [r3, #4]
				break;
 800aa08:	e006      	b.n	800aa18 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	60fb      	str	r3, [r7, #12]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b07      	cmp	r3, #7
 800aa14:	d9e5      	bls.n	800a9e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aa16:	bf00      	nop
 800aa18:	bf00      	nop
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	20001dc0 	.word	0x20001dc0

0800aa28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa38:	f001 fcbe 	bl	800c3b8 <vPortEnterCritical>
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa42:	b25b      	sxtb	r3, r3
 800aa44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa48:	d103      	bne.n	800aa52 <vQueueWaitForMessageRestricted+0x2a>
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa58:	b25b      	sxtb	r3, r3
 800aa5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5e:	d103      	bne.n	800aa68 <vQueueWaitForMessageRestricted+0x40>
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa68:	f001 fcd8 	bl	800c41c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d106      	bne.n	800aa82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	3324      	adds	r3, #36	@ 0x24
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	68b9      	ldr	r1, [r7, #8]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 fc45 	bl	800b30c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa82:	6978      	ldr	r0, [r7, #20]
 800aa84:	f7ff fefc 	bl	800a880 <prvUnlockQueue>
	}
 800aa88:	bf00      	nop
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08e      	sub	sp, #56	@ 0x38
 800aa94:	af04      	add	r7, sp, #16
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10b      	bne.n	800aabc <xTaskCreateStatic+0x2c>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	623b      	str	r3, [r7, #32]
}
 800aab6:	bf00      	nop
 800aab8:	bf00      	nop
 800aaba:	e7fd      	b.n	800aab8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10b      	bne.n	800aada <xTaskCreateStatic+0x4a>
	__asm volatile
 800aac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	61fb      	str	r3, [r7, #28]
}
 800aad4:	bf00      	nop
 800aad6:	bf00      	nop
 800aad8:	e7fd      	b.n	800aad6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aada:	235c      	movs	r3, #92	@ 0x5c
 800aadc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	2b5c      	cmp	r3, #92	@ 0x5c
 800aae2:	d00b      	beq.n	800aafc <xTaskCreateStatic+0x6c>
	__asm volatile
 800aae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae8:	f383 8811 	msr	BASEPRI, r3
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	61bb      	str	r3, [r7, #24]
}
 800aaf6:	bf00      	nop
 800aaf8:	bf00      	nop
 800aafa:	e7fd      	b.n	800aaf8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aafc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d01e      	beq.n	800ab42 <xTaskCreateStatic+0xb2>
 800ab04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d01b      	beq.n	800ab42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	2202      	movs	r2, #2
 800ab18:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	9303      	str	r3, [sp, #12]
 800ab20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab22:	9302      	str	r3, [sp, #8]
 800ab24:	f107 0314 	add.w	r3, r7, #20
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	68b9      	ldr	r1, [r7, #8]
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f000 f850 	bl	800abda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab3c:	f000 f8de 	bl	800acfc <prvAddNewTaskToReadyList>
 800ab40:	e001      	b.n	800ab46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab46:	697b      	ldr	r3, [r7, #20]
	}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3728      	adds	r7, #40	@ 0x28
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b08c      	sub	sp, #48	@ 0x30
 800ab54:	af04      	add	r7, sp, #16
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	603b      	str	r3, [r7, #0]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab60:	88fb      	ldrh	r3, [r7, #6]
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4618      	mov	r0, r3
 800ab66:	f001 fd49 	bl	800c5fc <pvPortMalloc>
 800ab6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00e      	beq.n	800ab90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab72:	205c      	movs	r0, #92	@ 0x5c
 800ab74:	f001 fd42 	bl	800c5fc <pvPortMalloc>
 800ab78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d003      	beq.n	800ab88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	697a      	ldr	r2, [r7, #20]
 800ab84:	631a      	str	r2, [r3, #48]	@ 0x30
 800ab86:	e005      	b.n	800ab94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab88:	6978      	ldr	r0, [r7, #20]
 800ab8a:	f001 fe05 	bl	800c798 <vPortFree>
 800ab8e:	e001      	b.n	800ab94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab90:	2300      	movs	r3, #0
 800ab92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d017      	beq.n	800abca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aba2:	88fa      	ldrh	r2, [r7, #6]
 800aba4:	2300      	movs	r3, #0
 800aba6:	9303      	str	r3, [sp, #12]
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	9302      	str	r3, [sp, #8]
 800abac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	68b9      	ldr	r1, [r7, #8]
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f000 f80e 	bl	800abda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abbe:	69f8      	ldr	r0, [r7, #28]
 800abc0:	f000 f89c 	bl	800acfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800abc4:	2301      	movs	r3, #1
 800abc6:	61bb      	str	r3, [r7, #24]
 800abc8:	e002      	b.n	800abd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abca:	f04f 33ff 	mov.w	r3, #4294967295
 800abce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abd0:	69bb      	ldr	r3, [r7, #24]
	}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3720      	adds	r7, #32
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b088      	sub	sp, #32
 800abde:	af00      	add	r7, sp, #0
 800abe0:	60f8      	str	r0, [r7, #12]
 800abe2:	60b9      	str	r1, [r7, #8]
 800abe4:	607a      	str	r2, [r7, #4]
 800abe6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800abe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	461a      	mov	r2, r3
 800abf2:	21a5      	movs	r1, #165	@ 0xa5
 800abf4:	f002 ff96 	bl	800db24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800abf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac02:	3b01      	subs	r3, #1
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	f023 0307 	bic.w	r3, r3, #7
 800ac10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	f003 0307 	and.w	r3, r3, #7
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00b      	beq.n	800ac34 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	617b      	str	r3, [r7, #20]
}
 800ac2e:	bf00      	nop
 800ac30:	bf00      	nop
 800ac32:	e7fd      	b.n	800ac30 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d01f      	beq.n	800ac7a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	61fb      	str	r3, [r7, #28]
 800ac3e:	e012      	b.n	800ac66 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	4413      	add	r3, r2
 800ac46:	7819      	ldrb	r1, [r3, #0]
 800ac48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	3334      	adds	r3, #52	@ 0x34
 800ac50:	460a      	mov	r2, r1
 800ac52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	4413      	add	r3, r2
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d006      	beq.n	800ac6e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	3301      	adds	r3, #1
 800ac64:	61fb      	str	r3, [r7, #28]
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	2b0f      	cmp	r3, #15
 800ac6a:	d9e9      	bls.n	800ac40 <prvInitialiseNewTask+0x66>
 800ac6c:	e000      	b.n	800ac70 <prvInitialiseNewTask+0x96>
			{
				break;
 800ac6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac78:	e003      	b.n	800ac82 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac84:	2b37      	cmp	r3, #55	@ 0x37
 800ac86:	d901      	bls.n	800ac8c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac88:	2337      	movs	r3, #55	@ 0x37
 800ac8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac90:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac96:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca0:	3304      	adds	r3, #4
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe fec4 	bl	8009a30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acaa:	3318      	adds	r3, #24
 800acac:	4618      	mov	r0, r3
 800acae:	f7fe febf 	bl	8009a30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800acbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800acc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acc6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800acc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acca:	2200      	movs	r2, #0
 800accc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	68f9      	ldr	r1, [r7, #12]
 800acda:	69b8      	ldr	r0, [r7, #24]
 800acdc:	f001 fa3e 	bl	800c15c <pxPortInitialiseStack>
 800ace0:	4602      	mov	r2, r0
 800ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ace6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d002      	beq.n	800acf2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800acec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acf2:	bf00      	nop
 800acf4:	3720      	adds	r7, #32
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad04:	f001 fb58 	bl	800c3b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad08:	4b2d      	ldr	r3, [pc, #180]	@ (800adc0 <prvAddNewTaskToReadyList+0xc4>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	4a2c      	ldr	r2, [pc, #176]	@ (800adc0 <prvAddNewTaskToReadyList+0xc4>)
 800ad10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad12:	4b2c      	ldr	r3, [pc, #176]	@ (800adc4 <prvAddNewTaskToReadyList+0xc8>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d109      	bne.n	800ad2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad1a:	4a2a      	ldr	r2, [pc, #168]	@ (800adc4 <prvAddNewTaskToReadyList+0xc8>)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad20:	4b27      	ldr	r3, [pc, #156]	@ (800adc0 <prvAddNewTaskToReadyList+0xc4>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d110      	bne.n	800ad4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad28:	f000 fc1e 	bl	800b568 <prvInitialiseTaskLists>
 800ad2c:	e00d      	b.n	800ad4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad2e:	4b26      	ldr	r3, [pc, #152]	@ (800adc8 <prvAddNewTaskToReadyList+0xcc>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d109      	bne.n	800ad4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad36:	4b23      	ldr	r3, [pc, #140]	@ (800adc4 <prvAddNewTaskToReadyList+0xc8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d802      	bhi.n	800ad4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad44:	4a1f      	ldr	r2, [pc, #124]	@ (800adc4 <prvAddNewTaskToReadyList+0xc8>)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad4a:	4b20      	ldr	r3, [pc, #128]	@ (800adcc <prvAddNewTaskToReadyList+0xd0>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	4a1e      	ldr	r2, [pc, #120]	@ (800adcc <prvAddNewTaskToReadyList+0xd0>)
 800ad52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad54:	4b1d      	ldr	r3, [pc, #116]	@ (800adcc <prvAddNewTaskToReadyList+0xd0>)
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad60:	4b1b      	ldr	r3, [pc, #108]	@ (800add0 <prvAddNewTaskToReadyList+0xd4>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d903      	bls.n	800ad70 <prvAddNewTaskToReadyList+0x74>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6c:	4a18      	ldr	r2, [pc, #96]	@ (800add0 <prvAddNewTaskToReadyList+0xd4>)
 800ad6e:	6013      	str	r3, [r2, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad74:	4613      	mov	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4413      	add	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4a15      	ldr	r2, [pc, #84]	@ (800add4 <prvAddNewTaskToReadyList+0xd8>)
 800ad7e:	441a      	add	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3304      	adds	r3, #4
 800ad84:	4619      	mov	r1, r3
 800ad86:	4610      	mov	r0, r2
 800ad88:	f7fe fe5f 	bl	8009a4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad8c:	f001 fb46 	bl	800c41c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad90:	4b0d      	ldr	r3, [pc, #52]	@ (800adc8 <prvAddNewTaskToReadyList+0xcc>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00e      	beq.n	800adb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad98:	4b0a      	ldr	r3, [pc, #40]	@ (800adc4 <prvAddNewTaskToReadyList+0xc8>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d207      	bcs.n	800adb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ada6:	4b0c      	ldr	r3, [pc, #48]	@ (800add8 <prvAddNewTaskToReadyList+0xdc>)
 800ada8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adb6:	bf00      	nop
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	200022d4 	.word	0x200022d4
 800adc4:	20001e00 	.word	0x20001e00
 800adc8:	200022e0 	.word	0x200022e0
 800adcc:	200022f0 	.word	0x200022f0
 800add0:	200022dc 	.word	0x200022dc
 800add4:	20001e04 	.word	0x20001e04
 800add8:	e000ed04 	.word	0xe000ed04

0800addc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ade4:	2300      	movs	r3, #0
 800ade6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d018      	beq.n	800ae20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800adee:	4b14      	ldr	r3, [pc, #80]	@ (800ae40 <vTaskDelay+0x64>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00b      	beq.n	800ae0e <vTaskDelay+0x32>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	60bb      	str	r3, [r7, #8]
}
 800ae08:	bf00      	nop
 800ae0a:	bf00      	nop
 800ae0c:	e7fd      	b.n	800ae0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae0e:	f000 f883 	bl	800af18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae12:	2100      	movs	r1, #0
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fdf3 	bl	800ba00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae1a:	f000 f88b 	bl	800af34 <xTaskResumeAll>
 800ae1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d107      	bne.n	800ae36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ae26:	4b07      	ldr	r3, [pc, #28]	@ (800ae44 <vTaskDelay+0x68>)
 800ae28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae36:	bf00      	nop
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	200022fc 	.word	0x200022fc
 800ae44:	e000ed04 	.word	0xe000ed04

0800ae48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b08a      	sub	sp, #40	@ 0x28
 800ae4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae56:	463a      	mov	r2, r7
 800ae58:	1d39      	adds	r1, r7, #4
 800ae5a:	f107 0308 	add.w	r3, r7, #8
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fe fd92 	bl	8009988 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	9202      	str	r2, [sp, #8]
 800ae6c:	9301      	str	r3, [sp, #4]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	2300      	movs	r3, #0
 800ae74:	460a      	mov	r2, r1
 800ae76:	4922      	ldr	r1, [pc, #136]	@ (800af00 <vTaskStartScheduler+0xb8>)
 800ae78:	4822      	ldr	r0, [pc, #136]	@ (800af04 <vTaskStartScheduler+0xbc>)
 800ae7a:	f7ff fe09 	bl	800aa90 <xTaskCreateStatic>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	4a21      	ldr	r2, [pc, #132]	@ (800af08 <vTaskStartScheduler+0xc0>)
 800ae82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae84:	4b20      	ldr	r3, [pc, #128]	@ (800af08 <vTaskStartScheduler+0xc0>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d002      	beq.n	800ae92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	617b      	str	r3, [r7, #20]
 800ae90:	e001      	b.n	800ae96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae92:	2300      	movs	r3, #0
 800ae94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d102      	bne.n	800aea2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae9c:	f000 fe04 	bl	800baa8 <xTimerCreateTimerTask>
 800aea0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d116      	bne.n	800aed6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800aea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	613b      	str	r3, [r7, #16]
}
 800aeba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aebc:	4b13      	ldr	r3, [pc, #76]	@ (800af0c <vTaskStartScheduler+0xc4>)
 800aebe:	f04f 32ff 	mov.w	r2, #4294967295
 800aec2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aec4:	4b12      	ldr	r3, [pc, #72]	@ (800af10 <vTaskStartScheduler+0xc8>)
 800aec6:	2201      	movs	r2, #1
 800aec8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aeca:	4b12      	ldr	r3, [pc, #72]	@ (800af14 <vTaskStartScheduler+0xcc>)
 800aecc:	2200      	movs	r2, #0
 800aece:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aed0:	f001 f9ce 	bl	800c270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aed4:	e00f      	b.n	800aef6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aedc:	d10b      	bne.n	800aef6 <vTaskStartScheduler+0xae>
	__asm volatile
 800aede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	60fb      	str	r3, [r7, #12]
}
 800aef0:	bf00      	nop
 800aef2:	bf00      	nop
 800aef4:	e7fd      	b.n	800aef2 <vTaskStartScheduler+0xaa>
}
 800aef6:	bf00      	nop
 800aef8:	3718      	adds	r7, #24
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	08011a4c 	.word	0x08011a4c
 800af04:	0800b539 	.word	0x0800b539
 800af08:	200022f8 	.word	0x200022f8
 800af0c:	200022f4 	.word	0x200022f4
 800af10:	200022e0 	.word	0x200022e0
 800af14:	200022d8 	.word	0x200022d8

0800af18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af18:	b480      	push	{r7}
 800af1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af1c:	4b04      	ldr	r3, [pc, #16]	@ (800af30 <vTaskSuspendAll+0x18>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	3301      	adds	r3, #1
 800af22:	4a03      	ldr	r2, [pc, #12]	@ (800af30 <vTaskSuspendAll+0x18>)
 800af24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af26:	bf00      	nop
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr
 800af30:	200022fc 	.word	0x200022fc

0800af34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af3a:	2300      	movs	r3, #0
 800af3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af3e:	2300      	movs	r3, #0
 800af40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af42:	4b42      	ldr	r3, [pc, #264]	@ (800b04c <xTaskResumeAll+0x118>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10b      	bne.n	800af62 <xTaskResumeAll+0x2e>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	603b      	str	r3, [r7, #0]
}
 800af5c:	bf00      	nop
 800af5e:	bf00      	nop
 800af60:	e7fd      	b.n	800af5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af62:	f001 fa29 	bl	800c3b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af66:	4b39      	ldr	r3, [pc, #228]	@ (800b04c <xTaskResumeAll+0x118>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3b01      	subs	r3, #1
 800af6c:	4a37      	ldr	r2, [pc, #220]	@ (800b04c <xTaskResumeAll+0x118>)
 800af6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af70:	4b36      	ldr	r3, [pc, #216]	@ (800b04c <xTaskResumeAll+0x118>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d162      	bne.n	800b03e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af78:	4b35      	ldr	r3, [pc, #212]	@ (800b050 <xTaskResumeAll+0x11c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d05e      	beq.n	800b03e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af80:	e02f      	b.n	800afe2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af82:	4b34      	ldr	r3, [pc, #208]	@ (800b054 <xTaskResumeAll+0x120>)
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3318      	adds	r3, #24
 800af8e:	4618      	mov	r0, r3
 800af90:	f7fe fdb8 	bl	8009b04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	3304      	adds	r3, #4
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fe fdb3 	bl	8009b04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afa2:	4b2d      	ldr	r3, [pc, #180]	@ (800b058 <xTaskResumeAll+0x124>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d903      	bls.n	800afb2 <xTaskResumeAll+0x7e>
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afae:	4a2a      	ldr	r2, [pc, #168]	@ (800b058 <xTaskResumeAll+0x124>)
 800afb0:	6013      	str	r3, [r2, #0]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afb6:	4613      	mov	r3, r2
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	4413      	add	r3, r2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4a27      	ldr	r2, [pc, #156]	@ (800b05c <xTaskResumeAll+0x128>)
 800afc0:	441a      	add	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	3304      	adds	r3, #4
 800afc6:	4619      	mov	r1, r3
 800afc8:	4610      	mov	r0, r2
 800afca:	f7fe fd3e 	bl	8009a4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afd2:	4b23      	ldr	r3, [pc, #140]	@ (800b060 <xTaskResumeAll+0x12c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afd8:	429a      	cmp	r2, r3
 800afda:	d302      	bcc.n	800afe2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800afdc:	4b21      	ldr	r3, [pc, #132]	@ (800b064 <xTaskResumeAll+0x130>)
 800afde:	2201      	movs	r2, #1
 800afe0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afe2:	4b1c      	ldr	r3, [pc, #112]	@ (800b054 <xTaskResumeAll+0x120>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1cb      	bne.n	800af82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aff0:	f000 fb58 	bl	800b6a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aff4:	4b1c      	ldr	r3, [pc, #112]	@ (800b068 <xTaskResumeAll+0x134>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d010      	beq.n	800b022 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b000:	f000 f846 	bl	800b090 <xTaskIncrementTick>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d002      	beq.n	800b010 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b00a:	4b16      	ldr	r3, [pc, #88]	@ (800b064 <xTaskResumeAll+0x130>)
 800b00c:	2201      	movs	r2, #1
 800b00e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	3b01      	subs	r3, #1
 800b014:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1f1      	bne.n	800b000 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b01c:	4b12      	ldr	r3, [pc, #72]	@ (800b068 <xTaskResumeAll+0x134>)
 800b01e:	2200      	movs	r2, #0
 800b020:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b022:	4b10      	ldr	r3, [pc, #64]	@ (800b064 <xTaskResumeAll+0x130>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d009      	beq.n	800b03e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b02a:	2301      	movs	r3, #1
 800b02c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b02e:	4b0f      	ldr	r3, [pc, #60]	@ (800b06c <xTaskResumeAll+0x138>)
 800b030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b034:	601a      	str	r2, [r3, #0]
 800b036:	f3bf 8f4f 	dsb	sy
 800b03a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b03e:	f001 f9ed 	bl	800c41c <vPortExitCritical>

	return xAlreadyYielded;
 800b042:	68bb      	ldr	r3, [r7, #8]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	200022fc 	.word	0x200022fc
 800b050:	200022d4 	.word	0x200022d4
 800b054:	20002294 	.word	0x20002294
 800b058:	200022dc 	.word	0x200022dc
 800b05c:	20001e04 	.word	0x20001e04
 800b060:	20001e00 	.word	0x20001e00
 800b064:	200022e8 	.word	0x200022e8
 800b068:	200022e4 	.word	0x200022e4
 800b06c:	e000ed04 	.word	0xe000ed04

0800b070 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b076:	4b05      	ldr	r3, [pc, #20]	@ (800b08c <xTaskGetTickCount+0x1c>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b07c:	687b      	ldr	r3, [r7, #4]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	370c      	adds	r7, #12
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	200022d8 	.word	0x200022d8

0800b090 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b096:	2300      	movs	r3, #0
 800b098:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b09a:	4b4f      	ldr	r3, [pc, #316]	@ (800b1d8 <xTaskIncrementTick+0x148>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f040 8090 	bne.w	800b1c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0a4:	4b4d      	ldr	r3, [pc, #308]	@ (800b1dc <xTaskIncrementTick+0x14c>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0ac:	4a4b      	ldr	r2, [pc, #300]	@ (800b1dc <xTaskIncrementTick+0x14c>)
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d121      	bne.n	800b0fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0b8:	4b49      	ldr	r3, [pc, #292]	@ (800b1e0 <xTaskIncrementTick+0x150>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00b      	beq.n	800b0da <xTaskIncrementTick+0x4a>
	__asm volatile
 800b0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c6:	f383 8811 	msr	BASEPRI, r3
 800b0ca:	f3bf 8f6f 	isb	sy
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	603b      	str	r3, [r7, #0]
}
 800b0d4:	bf00      	nop
 800b0d6:	bf00      	nop
 800b0d8:	e7fd      	b.n	800b0d6 <xTaskIncrementTick+0x46>
 800b0da:	4b41      	ldr	r3, [pc, #260]	@ (800b1e0 <xTaskIncrementTick+0x150>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	4b40      	ldr	r3, [pc, #256]	@ (800b1e4 <xTaskIncrementTick+0x154>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a3e      	ldr	r2, [pc, #248]	@ (800b1e0 <xTaskIncrementTick+0x150>)
 800b0e6:	6013      	str	r3, [r2, #0]
 800b0e8:	4a3e      	ldr	r2, [pc, #248]	@ (800b1e4 <xTaskIncrementTick+0x154>)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	6013      	str	r3, [r2, #0]
 800b0ee:	4b3e      	ldr	r3, [pc, #248]	@ (800b1e8 <xTaskIncrementTick+0x158>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	4a3c      	ldr	r2, [pc, #240]	@ (800b1e8 <xTaskIncrementTick+0x158>)
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	f000 fad4 	bl	800b6a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0fc:	4b3b      	ldr	r3, [pc, #236]	@ (800b1ec <xTaskIncrementTick+0x15c>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	429a      	cmp	r2, r3
 800b104:	d349      	bcc.n	800b19a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b106:	4b36      	ldr	r3, [pc, #216]	@ (800b1e0 <xTaskIncrementTick+0x150>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d104      	bne.n	800b11a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b110:	4b36      	ldr	r3, [pc, #216]	@ (800b1ec <xTaskIncrementTick+0x15c>)
 800b112:	f04f 32ff 	mov.w	r2, #4294967295
 800b116:	601a      	str	r2, [r3, #0]
					break;
 800b118:	e03f      	b.n	800b19a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b11a:	4b31      	ldr	r3, [pc, #196]	@ (800b1e0 <xTaskIncrementTick+0x150>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b12a:	693a      	ldr	r2, [r7, #16]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d203      	bcs.n	800b13a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b132:	4a2e      	ldr	r2, [pc, #184]	@ (800b1ec <xTaskIncrementTick+0x15c>)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b138:	e02f      	b.n	800b19a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	3304      	adds	r3, #4
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fe fce0 	bl	8009b04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d004      	beq.n	800b156 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	3318      	adds	r3, #24
 800b150:	4618      	mov	r0, r3
 800b152:	f7fe fcd7 	bl	8009b04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b15a:	4b25      	ldr	r3, [pc, #148]	@ (800b1f0 <xTaskIncrementTick+0x160>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d903      	bls.n	800b16a <xTaskIncrementTick+0xda>
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b166:	4a22      	ldr	r2, [pc, #136]	@ (800b1f0 <xTaskIncrementTick+0x160>)
 800b168:	6013      	str	r3, [r2, #0]
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b16e:	4613      	mov	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4a1f      	ldr	r2, [pc, #124]	@ (800b1f4 <xTaskIncrementTick+0x164>)
 800b178:	441a      	add	r2, r3
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	3304      	adds	r3, #4
 800b17e:	4619      	mov	r1, r3
 800b180:	4610      	mov	r0, r2
 800b182:	f7fe fc62 	bl	8009a4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b18a:	4b1b      	ldr	r3, [pc, #108]	@ (800b1f8 <xTaskIncrementTick+0x168>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b190:	429a      	cmp	r2, r3
 800b192:	d3b8      	bcc.n	800b106 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b194:	2301      	movs	r3, #1
 800b196:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b198:	e7b5      	b.n	800b106 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b19a:	4b17      	ldr	r3, [pc, #92]	@ (800b1f8 <xTaskIncrementTick+0x168>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1a0:	4914      	ldr	r1, [pc, #80]	@ (800b1f4 <xTaskIncrementTick+0x164>)
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	4413      	add	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	440b      	add	r3, r1
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d901      	bls.n	800b1b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1b6:	4b11      	ldr	r3, [pc, #68]	@ (800b1fc <xTaskIncrementTick+0x16c>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d007      	beq.n	800b1ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	617b      	str	r3, [r7, #20]
 800b1c2:	e004      	b.n	800b1ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1c4:	4b0e      	ldr	r3, [pc, #56]	@ (800b200 <xTaskIncrementTick+0x170>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	4a0d      	ldr	r2, [pc, #52]	@ (800b200 <xTaskIncrementTick+0x170>)
 800b1cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1ce:	697b      	ldr	r3, [r7, #20]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	200022fc 	.word	0x200022fc
 800b1dc:	200022d8 	.word	0x200022d8
 800b1e0:	2000228c 	.word	0x2000228c
 800b1e4:	20002290 	.word	0x20002290
 800b1e8:	200022ec 	.word	0x200022ec
 800b1ec:	200022f4 	.word	0x200022f4
 800b1f0:	200022dc 	.word	0x200022dc
 800b1f4:	20001e04 	.word	0x20001e04
 800b1f8:	20001e00 	.word	0x20001e00
 800b1fc:	200022e8 	.word	0x200022e8
 800b200:	200022e4 	.word	0x200022e4

0800b204 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b20a:	4b28      	ldr	r3, [pc, #160]	@ (800b2ac <vTaskSwitchContext+0xa8>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b212:	4b27      	ldr	r3, [pc, #156]	@ (800b2b0 <vTaskSwitchContext+0xac>)
 800b214:	2201      	movs	r2, #1
 800b216:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b218:	e042      	b.n	800b2a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b21a:	4b25      	ldr	r3, [pc, #148]	@ (800b2b0 <vTaskSwitchContext+0xac>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b220:	4b24      	ldr	r3, [pc, #144]	@ (800b2b4 <vTaskSwitchContext+0xb0>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	60fb      	str	r3, [r7, #12]
 800b226:	e011      	b.n	800b24c <vTaskSwitchContext+0x48>
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10b      	bne.n	800b246 <vTaskSwitchContext+0x42>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	607b      	str	r3, [r7, #4]
}
 800b240:	bf00      	nop
 800b242:	bf00      	nop
 800b244:	e7fd      	b.n	800b242 <vTaskSwitchContext+0x3e>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3b01      	subs	r3, #1
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	491a      	ldr	r1, [pc, #104]	@ (800b2b8 <vTaskSwitchContext+0xb4>)
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	4613      	mov	r3, r2
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4413      	add	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	440b      	add	r3, r1
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d0e3      	beq.n	800b228 <vTaskSwitchContext+0x24>
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	4613      	mov	r3, r2
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	4413      	add	r3, r2
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	4a13      	ldr	r2, [pc, #76]	@ (800b2b8 <vTaskSwitchContext+0xb4>)
 800b26c:	4413      	add	r3, r2
 800b26e:	60bb      	str	r3, [r7, #8]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	605a      	str	r2, [r3, #4]
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	685a      	ldr	r2, [r3, #4]
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	3308      	adds	r3, #8
 800b282:	429a      	cmp	r2, r3
 800b284:	d104      	bne.n	800b290 <vTaskSwitchContext+0x8c>
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	605a      	str	r2, [r3, #4]
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	4a09      	ldr	r2, [pc, #36]	@ (800b2bc <vTaskSwitchContext+0xb8>)
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	4a06      	ldr	r2, [pc, #24]	@ (800b2b4 <vTaskSwitchContext+0xb0>)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6013      	str	r3, [r2, #0]
}
 800b2a0:	bf00      	nop
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	200022fc 	.word	0x200022fc
 800b2b0:	200022e8 	.word	0x200022e8
 800b2b4:	200022dc 	.word	0x200022dc
 800b2b8:	20001e04 	.word	0x20001e04
 800b2bc:	20001e00 	.word	0x20001e00

0800b2c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10b      	bne.n	800b2e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	60fb      	str	r3, [r7, #12]
}
 800b2e2:	bf00      	nop
 800b2e4:	bf00      	nop
 800b2e6:	e7fd      	b.n	800b2e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2e8:	4b07      	ldr	r3, [pc, #28]	@ (800b308 <vTaskPlaceOnEventList+0x48>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	3318      	adds	r3, #24
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f7fe fbce 	bl	8009a92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b2f6:	2101      	movs	r1, #1
 800b2f8:	6838      	ldr	r0, [r7, #0]
 800b2fa:	f000 fb81 	bl	800ba00 <prvAddCurrentTaskToDelayedList>
}
 800b2fe:	bf00      	nop
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	20001e00 	.word	0x20001e00

0800b30c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10b      	bne.n	800b336 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	617b      	str	r3, [r7, #20]
}
 800b330:	bf00      	nop
 800b332:	bf00      	nop
 800b334:	e7fd      	b.n	800b332 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b336:	4b0a      	ldr	r3, [pc, #40]	@ (800b360 <vTaskPlaceOnEventListRestricted+0x54>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	3318      	adds	r3, #24
 800b33c:	4619      	mov	r1, r3
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f7fe fb83 	bl	8009a4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d002      	beq.n	800b350 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b34a:	f04f 33ff 	mov.w	r3, #4294967295
 800b34e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b350:	6879      	ldr	r1, [r7, #4]
 800b352:	68b8      	ldr	r0, [r7, #8]
 800b354:	f000 fb54 	bl	800ba00 <prvAddCurrentTaskToDelayedList>
	}
 800b358:	bf00      	nop
 800b35a:	3718      	adds	r7, #24
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	20001e00 	.word	0x20001e00

0800b364 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10b      	bne.n	800b392 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	60fb      	str	r3, [r7, #12]
}
 800b38c:	bf00      	nop
 800b38e:	bf00      	nop
 800b390:	e7fd      	b.n	800b38e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	3318      	adds	r3, #24
 800b396:	4618      	mov	r0, r3
 800b398:	f7fe fbb4 	bl	8009b04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b39c:	4b1d      	ldr	r3, [pc, #116]	@ (800b414 <xTaskRemoveFromEventList+0xb0>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d11d      	bne.n	800b3e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	3304      	adds	r3, #4
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fe fbab 	bl	8009b04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3b2:	4b19      	ldr	r3, [pc, #100]	@ (800b418 <xTaskRemoveFromEventList+0xb4>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d903      	bls.n	800b3c2 <xTaskRemoveFromEventList+0x5e>
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3be:	4a16      	ldr	r2, [pc, #88]	@ (800b418 <xTaskRemoveFromEventList+0xb4>)
 800b3c0:	6013      	str	r3, [r2, #0]
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	4413      	add	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4a13      	ldr	r2, [pc, #76]	@ (800b41c <xTaskRemoveFromEventList+0xb8>)
 800b3d0:	441a      	add	r2, r3
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	3304      	adds	r3, #4
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	4610      	mov	r0, r2
 800b3da:	f7fe fb36 	bl	8009a4a <vListInsertEnd>
 800b3de:	e005      	b.n	800b3ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	3318      	adds	r3, #24
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	480e      	ldr	r0, [pc, #56]	@ (800b420 <xTaskRemoveFromEventList+0xbc>)
 800b3e8:	f7fe fb2f 	bl	8009a4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b424 <xTaskRemoveFromEventList+0xc0>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d905      	bls.n	800b406 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3fe:	4b0a      	ldr	r3, [pc, #40]	@ (800b428 <xTaskRemoveFromEventList+0xc4>)
 800b400:	2201      	movs	r2, #1
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	e001      	b.n	800b40a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b406:	2300      	movs	r3, #0
 800b408:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b40a:	697b      	ldr	r3, [r7, #20]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3718      	adds	r7, #24
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	200022fc 	.word	0x200022fc
 800b418:	200022dc 	.word	0x200022dc
 800b41c:	20001e04 	.word	0x20001e04
 800b420:	20002294 	.word	0x20002294
 800b424:	20001e00 	.word	0x20001e00
 800b428:	200022e8 	.word	0x200022e8

0800b42c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b434:	4b06      	ldr	r3, [pc, #24]	@ (800b450 <vTaskInternalSetTimeOutState+0x24>)
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b43c:	4b05      	ldr	r3, [pc, #20]	@ (800b454 <vTaskInternalSetTimeOutState+0x28>)
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	605a      	str	r2, [r3, #4]
}
 800b444:	bf00      	nop
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	200022ec 	.word	0x200022ec
 800b454:	200022d8 	.word	0x200022d8

0800b458 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b088      	sub	sp, #32
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10b      	bne.n	800b480 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	613b      	str	r3, [r7, #16]
}
 800b47a:	bf00      	nop
 800b47c:	bf00      	nop
 800b47e:	e7fd      	b.n	800b47c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10b      	bne.n	800b49e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	60fb      	str	r3, [r7, #12]
}
 800b498:	bf00      	nop
 800b49a:	bf00      	nop
 800b49c:	e7fd      	b.n	800b49a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b49e:	f000 ff8b 	bl	800c3b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4a2:	4b1d      	ldr	r3, [pc, #116]	@ (800b518 <xTaskCheckForTimeOut+0xc0>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	69ba      	ldr	r2, [r7, #24]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ba:	d102      	bne.n	800b4c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	61fb      	str	r3, [r7, #28]
 800b4c0:	e023      	b.n	800b50a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	4b15      	ldr	r3, [pc, #84]	@ (800b51c <xTaskCheckForTimeOut+0xc4>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d007      	beq.n	800b4de <xTaskCheckForTimeOut+0x86>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	69ba      	ldr	r2, [r7, #24]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d302      	bcc.n	800b4de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	61fb      	str	r3, [r7, #28]
 800b4dc:	e015      	b.n	800b50a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d20b      	bcs.n	800b500 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	1ad2      	subs	r2, r2, r3
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff ff99 	bl	800b42c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	61fb      	str	r3, [r7, #28]
 800b4fe:	e004      	b.n	800b50a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b506:	2301      	movs	r3, #1
 800b508:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b50a:	f000 ff87 	bl	800c41c <vPortExitCritical>

	return xReturn;
 800b50e:	69fb      	ldr	r3, [r7, #28]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3720      	adds	r7, #32
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	200022d8 	.word	0x200022d8
 800b51c:	200022ec 	.word	0x200022ec

0800b520 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b520:	b480      	push	{r7}
 800b522:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b524:	4b03      	ldr	r3, [pc, #12]	@ (800b534 <vTaskMissedYield+0x14>)
 800b526:	2201      	movs	r2, #1
 800b528:	601a      	str	r2, [r3, #0]
}
 800b52a:	bf00      	nop
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr
 800b534:	200022e8 	.word	0x200022e8

0800b538 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b540:	f000 f852 	bl	800b5e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b544:	4b06      	ldr	r3, [pc, #24]	@ (800b560 <prvIdleTask+0x28>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d9f9      	bls.n	800b540 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b54c:	4b05      	ldr	r3, [pc, #20]	@ (800b564 <prvIdleTask+0x2c>)
 800b54e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b55c:	e7f0      	b.n	800b540 <prvIdleTask+0x8>
 800b55e:	bf00      	nop
 800b560:	20001e04 	.word	0x20001e04
 800b564:	e000ed04 	.word	0xe000ed04

0800b568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b56e:	2300      	movs	r3, #0
 800b570:	607b      	str	r3, [r7, #4]
 800b572:	e00c      	b.n	800b58e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	4613      	mov	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4413      	add	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4a12      	ldr	r2, [pc, #72]	@ (800b5c8 <prvInitialiseTaskLists+0x60>)
 800b580:	4413      	add	r3, r2
 800b582:	4618      	mov	r0, r3
 800b584:	f7fe fa34 	bl	80099f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	3301      	adds	r3, #1
 800b58c:	607b      	str	r3, [r7, #4]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b37      	cmp	r3, #55	@ 0x37
 800b592:	d9ef      	bls.n	800b574 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b594:	480d      	ldr	r0, [pc, #52]	@ (800b5cc <prvInitialiseTaskLists+0x64>)
 800b596:	f7fe fa2b 	bl	80099f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b59a:	480d      	ldr	r0, [pc, #52]	@ (800b5d0 <prvInitialiseTaskLists+0x68>)
 800b59c:	f7fe fa28 	bl	80099f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5a0:	480c      	ldr	r0, [pc, #48]	@ (800b5d4 <prvInitialiseTaskLists+0x6c>)
 800b5a2:	f7fe fa25 	bl	80099f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b5a6:	480c      	ldr	r0, [pc, #48]	@ (800b5d8 <prvInitialiseTaskLists+0x70>)
 800b5a8:	f7fe fa22 	bl	80099f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b5ac:	480b      	ldr	r0, [pc, #44]	@ (800b5dc <prvInitialiseTaskLists+0x74>)
 800b5ae:	f7fe fa1f 	bl	80099f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e0 <prvInitialiseTaskLists+0x78>)
 800b5b4:	4a05      	ldr	r2, [pc, #20]	@ (800b5cc <prvInitialiseTaskLists+0x64>)
 800b5b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b5e4 <prvInitialiseTaskLists+0x7c>)
 800b5ba:	4a05      	ldr	r2, [pc, #20]	@ (800b5d0 <prvInitialiseTaskLists+0x68>)
 800b5bc:	601a      	str	r2, [r3, #0]
}
 800b5be:	bf00      	nop
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20001e04 	.word	0x20001e04
 800b5cc:	20002264 	.word	0x20002264
 800b5d0:	20002278 	.word	0x20002278
 800b5d4:	20002294 	.word	0x20002294
 800b5d8:	200022a8 	.word	0x200022a8
 800b5dc:	200022c0 	.word	0x200022c0
 800b5e0:	2000228c 	.word	0x2000228c
 800b5e4:	20002290 	.word	0x20002290

0800b5e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5ee:	e019      	b.n	800b624 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5f0:	f000 fee2 	bl	800c3b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5f4:	4b10      	ldr	r3, [pc, #64]	@ (800b638 <prvCheckTasksWaitingTermination+0x50>)
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	3304      	adds	r3, #4
 800b600:	4618      	mov	r0, r3
 800b602:	f7fe fa7f 	bl	8009b04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b606:	4b0d      	ldr	r3, [pc, #52]	@ (800b63c <prvCheckTasksWaitingTermination+0x54>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3b01      	subs	r3, #1
 800b60c:	4a0b      	ldr	r2, [pc, #44]	@ (800b63c <prvCheckTasksWaitingTermination+0x54>)
 800b60e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b610:	4b0b      	ldr	r3, [pc, #44]	@ (800b640 <prvCheckTasksWaitingTermination+0x58>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	3b01      	subs	r3, #1
 800b616:	4a0a      	ldr	r2, [pc, #40]	@ (800b640 <prvCheckTasksWaitingTermination+0x58>)
 800b618:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b61a:	f000 feff 	bl	800c41c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f810 	bl	800b644 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b624:	4b06      	ldr	r3, [pc, #24]	@ (800b640 <prvCheckTasksWaitingTermination+0x58>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1e1      	bne.n	800b5f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b62c:	bf00      	nop
 800b62e:	bf00      	nop
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	200022a8 	.word	0x200022a8
 800b63c:	200022d4 	.word	0x200022d4
 800b640:	200022bc 	.word	0x200022bc

0800b644 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b652:	2b00      	cmp	r3, #0
 800b654:	d108      	bne.n	800b668 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b65a:	4618      	mov	r0, r3
 800b65c:	f001 f89c 	bl	800c798 <vPortFree>
				vPortFree( pxTCB );
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f001 f899 	bl	800c798 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b666:	e019      	b.n	800b69c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d103      	bne.n	800b67a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f001 f890 	bl	800c798 <vPortFree>
	}
 800b678:	e010      	b.n	800b69c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b680:	2b02      	cmp	r3, #2
 800b682:	d00b      	beq.n	800b69c <prvDeleteTCB+0x58>
	__asm volatile
 800b684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	60fb      	str	r3, [r7, #12]
}
 800b696:	bf00      	nop
 800b698:	bf00      	nop
 800b69a:	e7fd      	b.n	800b698 <prvDeleteTCB+0x54>
	}
 800b69c:	bf00      	nop
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6aa:	4b0c      	ldr	r3, [pc, #48]	@ (800b6dc <prvResetNextTaskUnblockTime+0x38>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d104      	bne.n	800b6be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b6e0 <prvResetNextTaskUnblockTime+0x3c>)
 800b6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b6bc:	e008      	b.n	800b6d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6be:	4b07      	ldr	r3, [pc, #28]	@ (800b6dc <prvResetNextTaskUnblockTime+0x38>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	4a04      	ldr	r2, [pc, #16]	@ (800b6e0 <prvResetNextTaskUnblockTime+0x3c>)
 800b6ce:	6013      	str	r3, [r2, #0]
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	2000228c 	.word	0x2000228c
 800b6e0:	200022f4 	.word	0x200022f4

0800b6e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b6ea:	4b0b      	ldr	r3, [pc, #44]	@ (800b718 <xTaskGetSchedulerState+0x34>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d102      	bne.n	800b6f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	607b      	str	r3, [r7, #4]
 800b6f6:	e008      	b.n	800b70a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6f8:	4b08      	ldr	r3, [pc, #32]	@ (800b71c <xTaskGetSchedulerState+0x38>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d102      	bne.n	800b706 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b700:	2302      	movs	r3, #2
 800b702:	607b      	str	r3, [r7, #4]
 800b704:	e001      	b.n	800b70a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b706:	2300      	movs	r3, #0
 800b708:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b70a:	687b      	ldr	r3, [r7, #4]
	}
 800b70c:	4618      	mov	r0, r3
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	200022e0 	.word	0x200022e0
 800b71c:	200022fc 	.word	0x200022fc

0800b720 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b72c:	2300      	movs	r3, #0
 800b72e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d051      	beq.n	800b7da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b73a:	4b2a      	ldr	r3, [pc, #168]	@ (800b7e4 <xTaskPriorityInherit+0xc4>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b740:	429a      	cmp	r2, r3
 800b742:	d241      	bcs.n	800b7c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	db06      	blt.n	800b75a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b74c:	4b25      	ldr	r3, [pc, #148]	@ (800b7e4 <xTaskPriorityInherit+0xc4>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b752:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	6959      	ldr	r1, [r3, #20]
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b762:	4613      	mov	r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4413      	add	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	4a1f      	ldr	r2, [pc, #124]	@ (800b7e8 <xTaskPriorityInherit+0xc8>)
 800b76c:	4413      	add	r3, r2
 800b76e:	4299      	cmp	r1, r3
 800b770:	d122      	bne.n	800b7b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	3304      	adds	r3, #4
 800b776:	4618      	mov	r0, r3
 800b778:	f7fe f9c4 	bl	8009b04 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b77c:	4b19      	ldr	r3, [pc, #100]	@ (800b7e4 <xTaskPriorityInherit+0xc4>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b78a:	4b18      	ldr	r3, [pc, #96]	@ (800b7ec <xTaskPriorityInherit+0xcc>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d903      	bls.n	800b79a <xTaskPriorityInherit+0x7a>
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b796:	4a15      	ldr	r2, [pc, #84]	@ (800b7ec <xTaskPriorityInherit+0xcc>)
 800b798:	6013      	str	r3, [r2, #0]
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b79e:	4613      	mov	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4413      	add	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4a10      	ldr	r2, [pc, #64]	@ (800b7e8 <xTaskPriorityInherit+0xc8>)
 800b7a8:	441a      	add	r2, r3
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	f7fe f94a 	bl	8009a4a <vListInsertEnd>
 800b7b6:	e004      	b.n	800b7c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b7e4 <xTaskPriorityInherit+0xc4>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	60fb      	str	r3, [r7, #12]
 800b7c6:	e008      	b.n	800b7da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7cc:	4b05      	ldr	r3, [pc, #20]	@ (800b7e4 <xTaskPriorityInherit+0xc4>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d201      	bcs.n	800b7da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7da:	68fb      	ldr	r3, [r7, #12]
	}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	20001e00 	.word	0x20001e00
 800b7e8:	20001e04 	.word	0x20001e04
 800b7ec:	200022dc 	.word	0x200022dc

0800b7f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d058      	beq.n	800b8b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b806:	4b2f      	ldr	r3, [pc, #188]	@ (800b8c4 <xTaskPriorityDisinherit+0xd4>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	693a      	ldr	r2, [r7, #16]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d00b      	beq.n	800b828 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	60fb      	str	r3, [r7, #12]
}
 800b822:	bf00      	nop
 800b824:	bf00      	nop
 800b826:	e7fd      	b.n	800b824 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d10b      	bne.n	800b848 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	60bb      	str	r3, [r7, #8]
}
 800b842:	bf00      	nop
 800b844:	bf00      	nop
 800b846:	e7fd      	b.n	800b844 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b84c:	1e5a      	subs	r2, r3, #1
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d02c      	beq.n	800b8b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b862:	2b00      	cmp	r3, #0
 800b864:	d128      	bne.n	800b8b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	3304      	adds	r3, #4
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fe f94a 	bl	8009b04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b888:	4b0f      	ldr	r3, [pc, #60]	@ (800b8c8 <xTaskPriorityDisinherit+0xd8>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d903      	bls.n	800b898 <xTaskPriorityDisinherit+0xa8>
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b894:	4a0c      	ldr	r2, [pc, #48]	@ (800b8c8 <xTaskPriorityDisinherit+0xd8>)
 800b896:	6013      	str	r3, [r2, #0]
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b89c:	4613      	mov	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4413      	add	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4a09      	ldr	r2, [pc, #36]	@ (800b8cc <xTaskPriorityDisinherit+0xdc>)
 800b8a6:	441a      	add	r2, r3
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4610      	mov	r0, r2
 800b8b0:	f7fe f8cb 	bl	8009a4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8b8:	697b      	ldr	r3, [r7, #20]
	}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3718      	adds	r7, #24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20001e00 	.word	0x20001e00
 800b8c8:	200022dc 	.word	0x200022dc
 800b8cc:	20001e04 	.word	0x20001e04

0800b8d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b088      	sub	sp, #32
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d06c      	beq.n	800b9c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10b      	bne.n	800b908 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	60fb      	str	r3, [r7, #12]
}
 800b902:	bf00      	nop
 800b904:	bf00      	nop
 800b906:	e7fd      	b.n	800b904 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d902      	bls.n	800b918 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	61fb      	str	r3, [r7, #28]
 800b916:	e002      	b.n	800b91e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b91c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b922:	69fa      	ldr	r2, [r7, #28]
 800b924:	429a      	cmp	r2, r3
 800b926:	d04c      	beq.n	800b9c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b92c:	697a      	ldr	r2, [r7, #20]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d147      	bne.n	800b9c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b932:	4b26      	ldr	r3, [pc, #152]	@ (800b9cc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	69ba      	ldr	r2, [r7, #24]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d10b      	bne.n	800b954 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	60bb      	str	r3, [r7, #8]
}
 800b94e:	bf00      	nop
 800b950:	bf00      	nop
 800b952:	e7fd      	b.n	800b950 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b958:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	69fa      	ldr	r2, [r7, #28]
 800b95e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	699b      	ldr	r3, [r3, #24]
 800b964:	2b00      	cmp	r3, #0
 800b966:	db04      	blt.n	800b972 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	6959      	ldr	r1, [r3, #20]
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	4613      	mov	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	4413      	add	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4a13      	ldr	r2, [pc, #76]	@ (800b9d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b982:	4413      	add	r3, r2
 800b984:	4299      	cmp	r1, r3
 800b986:	d11c      	bne.n	800b9c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	3304      	adds	r3, #4
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7fe f8b9 	bl	8009b04 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b996:	4b0f      	ldr	r3, [pc, #60]	@ (800b9d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d903      	bls.n	800b9a6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a2:	4a0c      	ldr	r2, [pc, #48]	@ (800b9d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b9a4:	6013      	str	r3, [r2, #0]
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4413      	add	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4a07      	ldr	r2, [pc, #28]	@ (800b9d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b9b4:	441a      	add	r2, r3
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	4610      	mov	r0, r2
 800b9be:	f7fe f844 	bl	8009a4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9c2:	bf00      	nop
 800b9c4:	3720      	adds	r7, #32
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	20001e00 	.word	0x20001e00
 800b9d0:	20001e04 	.word	0x20001e04
 800b9d4:	200022dc 	.word	0x200022dc

0800b9d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b9dc:	4b07      	ldr	r3, [pc, #28]	@ (800b9fc <pvTaskIncrementMutexHeldCount+0x24>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d004      	beq.n	800b9ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b9e4:	4b05      	ldr	r3, [pc, #20]	@ (800b9fc <pvTaskIncrementMutexHeldCount+0x24>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b9ea:	3201      	adds	r2, #1
 800b9ec:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b9ee:	4b03      	ldr	r3, [pc, #12]	@ (800b9fc <pvTaskIncrementMutexHeldCount+0x24>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
	}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr
 800b9fc:	20001e00 	.word	0x20001e00

0800ba00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba0a:	4b21      	ldr	r3, [pc, #132]	@ (800ba90 <prvAddCurrentTaskToDelayedList+0x90>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba10:	4b20      	ldr	r3, [pc, #128]	@ (800ba94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	3304      	adds	r3, #4
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fe f874 	bl	8009b04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba22:	d10a      	bne.n	800ba3a <prvAddCurrentTaskToDelayedList+0x3a>
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d007      	beq.n	800ba3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba2a:	4b1a      	ldr	r3, [pc, #104]	@ (800ba94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	3304      	adds	r3, #4
 800ba30:	4619      	mov	r1, r3
 800ba32:	4819      	ldr	r0, [pc, #100]	@ (800ba98 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba34:	f7fe f809 	bl	8009a4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba38:	e026      	b.n	800ba88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4413      	add	r3, r2
 800ba40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba42:	4b14      	ldr	r3, [pc, #80]	@ (800ba94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d209      	bcs.n	800ba66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba52:	4b12      	ldr	r3, [pc, #72]	@ (800ba9c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	4b0f      	ldr	r3, [pc, #60]	@ (800ba94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	4610      	mov	r0, r2
 800ba60:	f7fe f817 	bl	8009a92 <vListInsert>
}
 800ba64:	e010      	b.n	800ba88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba66:	4b0e      	ldr	r3, [pc, #56]	@ (800baa0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ba94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	3304      	adds	r3, #4
 800ba70:	4619      	mov	r1, r3
 800ba72:	4610      	mov	r0, r2
 800ba74:	f7fe f80d 	bl	8009a92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba78:	4b0a      	ldr	r3, [pc, #40]	@ (800baa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d202      	bcs.n	800ba88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ba82:	4a08      	ldr	r2, [pc, #32]	@ (800baa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	6013      	str	r3, [r2, #0]
}
 800ba88:	bf00      	nop
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	200022d8 	.word	0x200022d8
 800ba94:	20001e00 	.word	0x20001e00
 800ba98:	200022c0 	.word	0x200022c0
 800ba9c:	20002290 	.word	0x20002290
 800baa0:	2000228c 	.word	0x2000228c
 800baa4:	200022f4 	.word	0x200022f4

0800baa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b08a      	sub	sp, #40	@ 0x28
 800baac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800baae:	2300      	movs	r3, #0
 800bab0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bab2:	f000 fb13 	bl	800c0dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bab6:	4b1d      	ldr	r3, [pc, #116]	@ (800bb2c <xTimerCreateTimerTask+0x84>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d021      	beq.n	800bb02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800babe:	2300      	movs	r3, #0
 800bac0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bac2:	2300      	movs	r3, #0
 800bac4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bac6:	1d3a      	adds	r2, r7, #4
 800bac8:	f107 0108 	add.w	r1, r7, #8
 800bacc:	f107 030c 	add.w	r3, r7, #12
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fd ff73 	bl	80099bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bad6:	6879      	ldr	r1, [r7, #4]
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	9202      	str	r2, [sp, #8]
 800bade:	9301      	str	r3, [sp, #4]
 800bae0:	2302      	movs	r3, #2
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	2300      	movs	r3, #0
 800bae6:	460a      	mov	r2, r1
 800bae8:	4911      	ldr	r1, [pc, #68]	@ (800bb30 <xTimerCreateTimerTask+0x88>)
 800baea:	4812      	ldr	r0, [pc, #72]	@ (800bb34 <xTimerCreateTimerTask+0x8c>)
 800baec:	f7fe ffd0 	bl	800aa90 <xTaskCreateStatic>
 800baf0:	4603      	mov	r3, r0
 800baf2:	4a11      	ldr	r2, [pc, #68]	@ (800bb38 <xTimerCreateTimerTask+0x90>)
 800baf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800baf6:	4b10      	ldr	r3, [pc, #64]	@ (800bb38 <xTimerCreateTimerTask+0x90>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d001      	beq.n	800bb02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bafe:	2301      	movs	r3, #1
 800bb00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10b      	bne.n	800bb20 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bb08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb0c:	f383 8811 	msr	BASEPRI, r3
 800bb10:	f3bf 8f6f 	isb	sy
 800bb14:	f3bf 8f4f 	dsb	sy
 800bb18:	613b      	str	r3, [r7, #16]
}
 800bb1a:	bf00      	nop
 800bb1c:	bf00      	nop
 800bb1e:	e7fd      	b.n	800bb1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb20:	697b      	ldr	r3, [r7, #20]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3718      	adds	r7, #24
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20002330 	.word	0x20002330
 800bb30:	08011a54 	.word	0x08011a54
 800bb34:	0800bc75 	.word	0x0800bc75
 800bb38:	20002334 	.word	0x20002334

0800bb3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b08a      	sub	sp, #40	@ 0x28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
 800bb48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10b      	bne.n	800bb6c <xTimerGenericCommand+0x30>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	623b      	str	r3, [r7, #32]
}
 800bb66:	bf00      	nop
 800bb68:	bf00      	nop
 800bb6a:	e7fd      	b.n	800bb68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb6c:	4b19      	ldr	r3, [pc, #100]	@ (800bbd4 <xTimerGenericCommand+0x98>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d02a      	beq.n	800bbca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2b05      	cmp	r3, #5
 800bb84:	dc18      	bgt.n	800bbb8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb86:	f7ff fdad 	bl	800b6e4 <xTaskGetSchedulerState>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b02      	cmp	r3, #2
 800bb8e:	d109      	bne.n	800bba4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb90:	4b10      	ldr	r3, [pc, #64]	@ (800bbd4 <xTimerGenericCommand+0x98>)
 800bb92:	6818      	ldr	r0, [r3, #0]
 800bb94:	f107 0110 	add.w	r1, r7, #16
 800bb98:	2300      	movs	r3, #0
 800bb9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb9c:	f7fe f990 	bl	8009ec0 <xQueueGenericSend>
 800bba0:	6278      	str	r0, [r7, #36]	@ 0x24
 800bba2:	e012      	b.n	800bbca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bba4:	4b0b      	ldr	r3, [pc, #44]	@ (800bbd4 <xTimerGenericCommand+0x98>)
 800bba6:	6818      	ldr	r0, [r3, #0]
 800bba8:	f107 0110 	add.w	r1, r7, #16
 800bbac:	2300      	movs	r3, #0
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f7fe f986 	bl	8009ec0 <xQueueGenericSend>
 800bbb4:	6278      	str	r0, [r7, #36]	@ 0x24
 800bbb6:	e008      	b.n	800bbca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bbb8:	4b06      	ldr	r3, [pc, #24]	@ (800bbd4 <xTimerGenericCommand+0x98>)
 800bbba:	6818      	ldr	r0, [r3, #0]
 800bbbc:	f107 0110 	add.w	r1, r7, #16
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	f7fe fa7e 	bl	800a0c4 <xQueueGenericSendFromISR>
 800bbc8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3728      	adds	r7, #40	@ 0x28
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	20002330 	.word	0x20002330

0800bbd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b088      	sub	sp, #32
 800bbdc:	af02      	add	r7, sp, #8
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbe2:	4b23      	ldr	r3, [pc, #140]	@ (800bc70 <prvProcessExpiredTimer+0x98>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	68db      	ldr	r3, [r3, #12]
 800bbea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7fd ff87 	bl	8009b04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbfc:	f003 0304 	and.w	r3, r3, #4
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d023      	beq.n	800bc4c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	699a      	ldr	r2, [r3, #24]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	18d1      	adds	r1, r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	6978      	ldr	r0, [r7, #20]
 800bc12:	f000 f8d5 	bl	800bdc0 <prvInsertTimerInActiveList>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d020      	beq.n	800bc5e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	2300      	movs	r3, #0
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	2100      	movs	r1, #0
 800bc26:	6978      	ldr	r0, [r7, #20]
 800bc28:	f7ff ff88 	bl	800bb3c <xTimerGenericCommand>
 800bc2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d114      	bne.n	800bc5e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	60fb      	str	r3, [r7, #12]
}
 800bc46:	bf00      	nop
 800bc48:	bf00      	nop
 800bc4a:	e7fd      	b.n	800bc48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc52:	f023 0301 	bic.w	r3, r3, #1
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	6a1b      	ldr	r3, [r3, #32]
 800bc62:	6978      	ldr	r0, [r7, #20]
 800bc64:	4798      	blx	r3
}
 800bc66:	bf00      	nop
 800bc68:	3718      	adds	r7, #24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	20002328 	.word	0x20002328

0800bc74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc7c:	f107 0308 	add.w	r3, r7, #8
 800bc80:	4618      	mov	r0, r3
 800bc82:	f000 f859 	bl	800bd38 <prvGetNextExpireTime>
 800bc86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 f805 	bl	800bc9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc92:	f000 f8d7 	bl	800be44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc96:	bf00      	nop
 800bc98:	e7f0      	b.n	800bc7c <prvTimerTask+0x8>
	...

0800bc9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bca6:	f7ff f937 	bl	800af18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcaa:	f107 0308 	add.w	r3, r7, #8
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 f866 	bl	800bd80 <prvSampleTimeNow>
 800bcb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d130      	bne.n	800bd1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d10a      	bne.n	800bcd8 <prvProcessTimerOrBlockTask+0x3c>
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d806      	bhi.n	800bcd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bcca:	f7ff f933 	bl	800af34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bcce:	68f9      	ldr	r1, [r7, #12]
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7ff ff81 	bl	800bbd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bcd6:	e024      	b.n	800bd22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d008      	beq.n	800bcf0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bcde:	4b13      	ldr	r3, [pc, #76]	@ (800bd2c <prvProcessTimerOrBlockTask+0x90>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d101      	bne.n	800bcec <prvProcessTimerOrBlockTask+0x50>
 800bce8:	2301      	movs	r3, #1
 800bcea:	e000      	b.n	800bcee <prvProcessTimerOrBlockTask+0x52>
 800bcec:	2300      	movs	r3, #0
 800bcee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bcf0:	4b0f      	ldr	r3, [pc, #60]	@ (800bd30 <prvProcessTimerOrBlockTask+0x94>)
 800bcf2:	6818      	ldr	r0, [r3, #0]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	1ad3      	subs	r3, r2, r3
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	f7fe fe93 	bl	800aa28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd02:	f7ff f917 	bl	800af34 <xTaskResumeAll>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d10a      	bne.n	800bd22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd0c:	4b09      	ldr	r3, [pc, #36]	@ (800bd34 <prvProcessTimerOrBlockTask+0x98>)
 800bd0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd12:	601a      	str	r2, [r3, #0]
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	f3bf 8f6f 	isb	sy
}
 800bd1c:	e001      	b.n	800bd22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd1e:	f7ff f909 	bl	800af34 <xTaskResumeAll>
}
 800bd22:	bf00      	nop
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	2000232c 	.word	0x2000232c
 800bd30:	20002330 	.word	0x20002330
 800bd34:	e000ed04 	.word	0xe000ed04

0800bd38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd40:	4b0e      	ldr	r3, [pc, #56]	@ (800bd7c <prvGetNextExpireTime+0x44>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d101      	bne.n	800bd4e <prvGetNextExpireTime+0x16>
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	e000      	b.n	800bd50 <prvGetNextExpireTime+0x18>
 800bd4e:	2200      	movs	r2, #0
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d105      	bne.n	800bd68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd5c:	4b07      	ldr	r3, [pc, #28]	@ (800bd7c <prvGetNextExpireTime+0x44>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	60fb      	str	r3, [r7, #12]
 800bd66:	e001      	b.n	800bd6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3714      	adds	r7, #20
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	20002328 	.word	0x20002328

0800bd80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd88:	f7ff f972 	bl	800b070 <xTaskGetTickCount>
 800bd8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bdbc <prvSampleTimeNow+0x3c>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d205      	bcs.n	800bda4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd98:	f000 f93a 	bl	800c010 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	601a      	str	r2, [r3, #0]
 800bda2:	e002      	b.n	800bdaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bdaa:	4a04      	ldr	r2, [pc, #16]	@ (800bdbc <prvSampleTimeNow+0x3c>)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	20002338 	.word	0x20002338

0800bdc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	607a      	str	r2, [r7, #4]
 800bdcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bdde:	68ba      	ldr	r2, [r7, #8]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d812      	bhi.n	800be0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	1ad2      	subs	r2, r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	699b      	ldr	r3, [r3, #24]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d302      	bcc.n	800bdfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	617b      	str	r3, [r7, #20]
 800bdf8:	e01b      	b.n	800be32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bdfa:	4b10      	ldr	r3, [pc, #64]	@ (800be3c <prvInsertTimerInActiveList+0x7c>)
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3304      	adds	r3, #4
 800be02:	4619      	mov	r1, r3
 800be04:	4610      	mov	r0, r2
 800be06:	f7fd fe44 	bl	8009a92 <vListInsert>
 800be0a:	e012      	b.n	800be32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	429a      	cmp	r2, r3
 800be12:	d206      	bcs.n	800be22 <prvInsertTimerInActiveList+0x62>
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d302      	bcc.n	800be22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be1c:	2301      	movs	r3, #1
 800be1e:	617b      	str	r3, [r7, #20]
 800be20:	e007      	b.n	800be32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be22:	4b07      	ldr	r3, [pc, #28]	@ (800be40 <prvInsertTimerInActiveList+0x80>)
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	3304      	adds	r3, #4
 800be2a:	4619      	mov	r1, r3
 800be2c:	4610      	mov	r0, r2
 800be2e:	f7fd fe30 	bl	8009a92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be32:	697b      	ldr	r3, [r7, #20]
}
 800be34:	4618      	mov	r0, r3
 800be36:	3718      	adds	r7, #24
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	2000232c 	.word	0x2000232c
 800be40:	20002328 	.word	0x20002328

0800be44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b08e      	sub	sp, #56	@ 0x38
 800be48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be4a:	e0ce      	b.n	800bfea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	da19      	bge.n	800be86 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be52:	1d3b      	adds	r3, r7, #4
 800be54:	3304      	adds	r3, #4
 800be56:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10b      	bne.n	800be76 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	61fb      	str	r3, [r7, #28]
}
 800be70:	bf00      	nop
 800be72:	bf00      	nop
 800be74:	e7fd      	b.n	800be72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be7c:	6850      	ldr	r0, [r2, #4]
 800be7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be80:	6892      	ldr	r2, [r2, #8]
 800be82:	4611      	mov	r1, r2
 800be84:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f2c0 80ae 	blt.w	800bfea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800be92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be94:	695b      	ldr	r3, [r3, #20]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d004      	beq.n	800bea4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be9c:	3304      	adds	r3, #4
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fd fe30 	bl	8009b04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bea4:	463b      	mov	r3, r7
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7ff ff6a 	bl	800bd80 <prvSampleTimeNow>
 800beac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b09      	cmp	r3, #9
 800beb2:	f200 8097 	bhi.w	800bfe4 <prvProcessReceivedCommands+0x1a0>
 800beb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bebc <prvProcessReceivedCommands+0x78>)
 800beb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bebc:	0800bee5 	.word	0x0800bee5
 800bec0:	0800bee5 	.word	0x0800bee5
 800bec4:	0800bee5 	.word	0x0800bee5
 800bec8:	0800bf5b 	.word	0x0800bf5b
 800becc:	0800bf6f 	.word	0x0800bf6f
 800bed0:	0800bfbb 	.word	0x0800bfbb
 800bed4:	0800bee5 	.word	0x0800bee5
 800bed8:	0800bee5 	.word	0x0800bee5
 800bedc:	0800bf5b 	.word	0x0800bf5b
 800bee0:	0800bf6f 	.word	0x0800bf6f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800beea:	f043 0301 	orr.w	r3, r3, #1
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bef6:	68ba      	ldr	r2, [r7, #8]
 800bef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	18d1      	adds	r1, r2, r3
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf04:	f7ff ff5c 	bl	800bdc0 <prvInsertTimerInActiveList>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d06c      	beq.n	800bfe8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf10:	6a1b      	ldr	r3, [r3, #32]
 800bf12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf1c:	f003 0304 	and.w	r3, r3, #4
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d061      	beq.n	800bfe8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf28:	699b      	ldr	r3, [r3, #24]
 800bf2a:	441a      	add	r2, r3
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	2300      	movs	r3, #0
 800bf32:	2100      	movs	r1, #0
 800bf34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf36:	f7ff fe01 	bl	800bb3c <xTimerGenericCommand>
 800bf3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf3c:	6a3b      	ldr	r3, [r7, #32]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d152      	bne.n	800bfe8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bf42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf46:	f383 8811 	msr	BASEPRI, r3
 800bf4a:	f3bf 8f6f 	isb	sy
 800bf4e:	f3bf 8f4f 	dsb	sy
 800bf52:	61bb      	str	r3, [r7, #24]
}
 800bf54:	bf00      	nop
 800bf56:	bf00      	nop
 800bf58:	e7fd      	b.n	800bf56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf60:	f023 0301 	bic.w	r3, r3, #1
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bf6c:	e03d      	b.n	800bfea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf74:	f043 0301 	orr.w	r3, r3, #1
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf84:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf88:	699b      	ldr	r3, [r3, #24]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d10b      	bne.n	800bfa6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bf8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	617b      	str	r3, [r7, #20]
}
 800bfa0:	bf00      	nop
 800bfa2:	bf00      	nop
 800bfa4:	e7fd      	b.n	800bfa2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa8:	699a      	ldr	r2, [r3, #24]
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfac:	18d1      	adds	r1, r2, r3
 800bfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfb4:	f7ff ff04 	bl	800bdc0 <prvInsertTimerInActiveList>
					break;
 800bfb8:	e017      	b.n	800bfea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bfba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfc0:	f003 0302 	and.w	r3, r3, #2
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d103      	bne.n	800bfd0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bfc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfca:	f000 fbe5 	bl	800c798 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bfce:	e00c      	b.n	800bfea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfd6:	f023 0301 	bic.w	r3, r3, #1
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bfe2:	e002      	b.n	800bfea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bfe4:	bf00      	nop
 800bfe6:	e000      	b.n	800bfea <prvProcessReceivedCommands+0x1a6>
					break;
 800bfe8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfea:	4b08      	ldr	r3, [pc, #32]	@ (800c00c <prvProcessReceivedCommands+0x1c8>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	1d39      	adds	r1, r7, #4
 800bff0:	2200      	movs	r2, #0
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fe f904 	bl	800a200 <xQueueReceive>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f47f af26 	bne.w	800be4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c000:	bf00      	nop
 800c002:	bf00      	nop
 800c004:	3730      	adds	r7, #48	@ 0x30
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	20002330 	.word	0x20002330

0800c010 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b088      	sub	sp, #32
 800c014:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c016:	e049      	b.n	800c0ac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c018:	4b2e      	ldr	r3, [pc, #184]	@ (800c0d4 <prvSwitchTimerLists+0xc4>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c022:	4b2c      	ldr	r3, [pc, #176]	@ (800c0d4 <prvSwitchTimerLists+0xc4>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	3304      	adds	r3, #4
 800c030:	4618      	mov	r0, r3
 800c032:	f7fd fd67 	bl	8009b04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6a1b      	ldr	r3, [r3, #32]
 800c03a:	68f8      	ldr	r0, [r7, #12]
 800c03c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c044:	f003 0304 	and.w	r3, r3, #4
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d02f      	beq.n	800c0ac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	699b      	ldr	r3, [r3, #24]
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	4413      	add	r3, r2
 800c054:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c056:	68ba      	ldr	r2, [r7, #8]
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d90e      	bls.n	800c07c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	68ba      	ldr	r2, [r7, #8]
 800c062:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	68fa      	ldr	r2, [r7, #12]
 800c068:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c06a:	4b1a      	ldr	r3, [pc, #104]	@ (800c0d4 <prvSwitchTimerLists+0xc4>)
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	3304      	adds	r3, #4
 800c072:	4619      	mov	r1, r3
 800c074:	4610      	mov	r0, r2
 800c076:	f7fd fd0c 	bl	8009a92 <vListInsert>
 800c07a:	e017      	b.n	800c0ac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c07c:	2300      	movs	r3, #0
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	2300      	movs	r3, #0
 800c082:	693a      	ldr	r2, [r7, #16]
 800c084:	2100      	movs	r1, #0
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f7ff fd58 	bl	800bb3c <xTimerGenericCommand>
 800c08c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10b      	bne.n	800c0ac <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	603b      	str	r3, [r7, #0]
}
 800c0a6:	bf00      	nop
 800c0a8:	bf00      	nop
 800c0aa:	e7fd      	b.n	800c0a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0ac:	4b09      	ldr	r3, [pc, #36]	@ (800c0d4 <prvSwitchTimerLists+0xc4>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1b0      	bne.n	800c018 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c0b6:	4b07      	ldr	r3, [pc, #28]	@ (800c0d4 <prvSwitchTimerLists+0xc4>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c0bc:	4b06      	ldr	r3, [pc, #24]	@ (800c0d8 <prvSwitchTimerLists+0xc8>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a04      	ldr	r2, [pc, #16]	@ (800c0d4 <prvSwitchTimerLists+0xc4>)
 800c0c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c0c4:	4a04      	ldr	r2, [pc, #16]	@ (800c0d8 <prvSwitchTimerLists+0xc8>)
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	6013      	str	r3, [r2, #0]
}
 800c0ca:	bf00      	nop
 800c0cc:	3718      	adds	r7, #24
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	20002328 	.word	0x20002328
 800c0d8:	2000232c 	.word	0x2000232c

0800c0dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c0e2:	f000 f969 	bl	800c3b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c0e6:	4b15      	ldr	r3, [pc, #84]	@ (800c13c <prvCheckForValidListAndQueue+0x60>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d120      	bne.n	800c130 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c0ee:	4814      	ldr	r0, [pc, #80]	@ (800c140 <prvCheckForValidListAndQueue+0x64>)
 800c0f0:	f7fd fc7e 	bl	80099f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c0f4:	4813      	ldr	r0, [pc, #76]	@ (800c144 <prvCheckForValidListAndQueue+0x68>)
 800c0f6:	f7fd fc7b 	bl	80099f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c0fa:	4b13      	ldr	r3, [pc, #76]	@ (800c148 <prvCheckForValidListAndQueue+0x6c>)
 800c0fc:	4a10      	ldr	r2, [pc, #64]	@ (800c140 <prvCheckForValidListAndQueue+0x64>)
 800c0fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c100:	4b12      	ldr	r3, [pc, #72]	@ (800c14c <prvCheckForValidListAndQueue+0x70>)
 800c102:	4a10      	ldr	r2, [pc, #64]	@ (800c144 <prvCheckForValidListAndQueue+0x68>)
 800c104:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c106:	2300      	movs	r3, #0
 800c108:	9300      	str	r3, [sp, #0]
 800c10a:	4b11      	ldr	r3, [pc, #68]	@ (800c150 <prvCheckForValidListAndQueue+0x74>)
 800c10c:	4a11      	ldr	r2, [pc, #68]	@ (800c154 <prvCheckForValidListAndQueue+0x78>)
 800c10e:	2110      	movs	r1, #16
 800c110:	200a      	movs	r0, #10
 800c112:	f7fd fd8b 	bl	8009c2c <xQueueGenericCreateStatic>
 800c116:	4603      	mov	r3, r0
 800c118:	4a08      	ldr	r2, [pc, #32]	@ (800c13c <prvCheckForValidListAndQueue+0x60>)
 800c11a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c11c:	4b07      	ldr	r3, [pc, #28]	@ (800c13c <prvCheckForValidListAndQueue+0x60>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d005      	beq.n	800c130 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c124:	4b05      	ldr	r3, [pc, #20]	@ (800c13c <prvCheckForValidListAndQueue+0x60>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	490b      	ldr	r1, [pc, #44]	@ (800c158 <prvCheckForValidListAndQueue+0x7c>)
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fe fc28 	bl	800a980 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c130:	f000 f974 	bl	800c41c <vPortExitCritical>
}
 800c134:	bf00      	nop
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	20002330 	.word	0x20002330
 800c140:	20002300 	.word	0x20002300
 800c144:	20002314 	.word	0x20002314
 800c148:	20002328 	.word	0x20002328
 800c14c:	2000232c 	.word	0x2000232c
 800c150:	200023dc 	.word	0x200023dc
 800c154:	2000233c 	.word	0x2000233c
 800c158:	08011a5c 	.word	0x08011a5c

0800c15c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c15c:	b480      	push	{r7}
 800c15e:	b085      	sub	sp, #20
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	3b04      	subs	r3, #4
 800c16c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	3b04      	subs	r3, #4
 800c17a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	f023 0201 	bic.w	r2, r3, #1
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	3b04      	subs	r3, #4
 800c18a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c18c:	4a0c      	ldr	r2, [pc, #48]	@ (800c1c0 <pxPortInitialiseStack+0x64>)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3b14      	subs	r3, #20
 800c196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	3b04      	subs	r3, #4
 800c1a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f06f 0202 	mvn.w	r2, #2
 800c1aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	3b20      	subs	r3, #32
 800c1b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	0800c1c5 	.word	0x0800c1c5

0800c1c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1ce:	4b13      	ldr	r3, [pc, #76]	@ (800c21c <prvTaskExitError+0x58>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d6:	d00b      	beq.n	800c1f0 <prvTaskExitError+0x2c>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	60fb      	str	r3, [r7, #12]
}
 800c1ea:	bf00      	nop
 800c1ec:	bf00      	nop
 800c1ee:	e7fd      	b.n	800c1ec <prvTaskExitError+0x28>
	__asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	60bb      	str	r3, [r7, #8]
}
 800c202:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c204:	bf00      	nop
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d0fc      	beq.n	800c206 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c20c:	bf00      	nop
 800c20e:	bf00      	nop
 800c210:	3714      	adds	r7, #20
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	2000004c 	.word	0x2000004c

0800c220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c220:	4b07      	ldr	r3, [pc, #28]	@ (800c240 <pxCurrentTCBConst2>)
 800c222:	6819      	ldr	r1, [r3, #0]
 800c224:	6808      	ldr	r0, [r1, #0]
 800c226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22a:	f380 8809 	msr	PSP, r0
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	f04f 0000 	mov.w	r0, #0
 800c236:	f380 8811 	msr	BASEPRI, r0
 800c23a:	4770      	bx	lr
 800c23c:	f3af 8000 	nop.w

0800c240 <pxCurrentTCBConst2>:
 800c240:	20001e00 	.word	0x20001e00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c244:	bf00      	nop
 800c246:	bf00      	nop

0800c248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c248:	4808      	ldr	r0, [pc, #32]	@ (800c26c <prvPortStartFirstTask+0x24>)
 800c24a:	6800      	ldr	r0, [r0, #0]
 800c24c:	6800      	ldr	r0, [r0, #0]
 800c24e:	f380 8808 	msr	MSP, r0
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8814 	msr	CONTROL, r0
 800c25a:	b662      	cpsie	i
 800c25c:	b661      	cpsie	f
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	df00      	svc	0
 800c268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c26a:	bf00      	nop
 800c26c:	e000ed08 	.word	0xe000ed08

0800c270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c276:	4b47      	ldr	r3, [pc, #284]	@ (800c394 <xPortStartScheduler+0x124>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a47      	ldr	r2, [pc, #284]	@ (800c398 <xPortStartScheduler+0x128>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d10b      	bne.n	800c298 <xPortStartScheduler+0x28>
	__asm volatile
 800c280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	613b      	str	r3, [r7, #16]
}
 800c292:	bf00      	nop
 800c294:	bf00      	nop
 800c296:	e7fd      	b.n	800c294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c298:	4b3e      	ldr	r3, [pc, #248]	@ (800c394 <xPortStartScheduler+0x124>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a3f      	ldr	r2, [pc, #252]	@ (800c39c <xPortStartScheduler+0x12c>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d10b      	bne.n	800c2ba <xPortStartScheduler+0x4a>
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	60fb      	str	r3, [r7, #12]
}
 800c2b4:	bf00      	nop
 800c2b6:	bf00      	nop
 800c2b8:	e7fd      	b.n	800c2b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2ba:	4b39      	ldr	r3, [pc, #228]	@ (800c3a0 <xPortStartScheduler+0x130>)
 800c2bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	22ff      	movs	r2, #255	@ 0xff
 800c2ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2d4:	78fb      	ldrb	r3, [r7, #3]
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	4b31      	ldr	r3, [pc, #196]	@ (800c3a4 <xPortStartScheduler+0x134>)
 800c2e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2e2:	4b31      	ldr	r3, [pc, #196]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c2e4:	2207      	movs	r2, #7
 800c2e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2e8:	e009      	b.n	800c2fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c2ea:	4b2f      	ldr	r3, [pc, #188]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	4a2d      	ldr	r2, [pc, #180]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c2f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2f4:	78fb      	ldrb	r3, [r7, #3]
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	005b      	lsls	r3, r3, #1
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2fe:	78fb      	ldrb	r3, [r7, #3]
 800c300:	b2db      	uxtb	r3, r3
 800c302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c306:	2b80      	cmp	r3, #128	@ 0x80
 800c308:	d0ef      	beq.n	800c2ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c30a:	4b27      	ldr	r3, [pc, #156]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f1c3 0307 	rsb	r3, r3, #7
 800c312:	2b04      	cmp	r3, #4
 800c314:	d00b      	beq.n	800c32e <xPortStartScheduler+0xbe>
	__asm volatile
 800c316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c31a:	f383 8811 	msr	BASEPRI, r3
 800c31e:	f3bf 8f6f 	isb	sy
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	60bb      	str	r3, [r7, #8]
}
 800c328:	bf00      	nop
 800c32a:	bf00      	nop
 800c32c:	e7fd      	b.n	800c32a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c32e:	4b1e      	ldr	r3, [pc, #120]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	021b      	lsls	r3, r3, #8
 800c334:	4a1c      	ldr	r2, [pc, #112]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c336:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c338:	4b1b      	ldr	r3, [pc, #108]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c340:	4a19      	ldr	r2, [pc, #100]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c342:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	b2da      	uxtb	r2, r3
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c34c:	4b17      	ldr	r3, [pc, #92]	@ (800c3ac <xPortStartScheduler+0x13c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a16      	ldr	r2, [pc, #88]	@ (800c3ac <xPortStartScheduler+0x13c>)
 800c352:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c358:	4b14      	ldr	r3, [pc, #80]	@ (800c3ac <xPortStartScheduler+0x13c>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a13      	ldr	r2, [pc, #76]	@ (800c3ac <xPortStartScheduler+0x13c>)
 800c35e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c364:	f000 f8da 	bl	800c51c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c368:	4b11      	ldr	r3, [pc, #68]	@ (800c3b0 <xPortStartScheduler+0x140>)
 800c36a:	2200      	movs	r2, #0
 800c36c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c36e:	f000 f8f9 	bl	800c564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c372:	4b10      	ldr	r3, [pc, #64]	@ (800c3b4 <xPortStartScheduler+0x144>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a0f      	ldr	r2, [pc, #60]	@ (800c3b4 <xPortStartScheduler+0x144>)
 800c378:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c37c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c37e:	f7ff ff63 	bl	800c248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c382:	f7fe ff3f 	bl	800b204 <vTaskSwitchContext>
	prvTaskExitError();
 800c386:	f7ff ff1d 	bl	800c1c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3718      	adds	r7, #24
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	e000ed00 	.word	0xe000ed00
 800c398:	410fc271 	.word	0x410fc271
 800c39c:	410fc270 	.word	0x410fc270
 800c3a0:	e000e400 	.word	0xe000e400
 800c3a4:	2000242c 	.word	0x2000242c
 800c3a8:	20002430 	.word	0x20002430
 800c3ac:	e000ed20 	.word	0xe000ed20
 800c3b0:	2000004c 	.word	0x2000004c
 800c3b4:	e000ef34 	.word	0xe000ef34

0800c3b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	607b      	str	r3, [r7, #4]
}
 800c3d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3d2:	4b10      	ldr	r3, [pc, #64]	@ (800c414 <vPortEnterCritical+0x5c>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	4a0e      	ldr	r2, [pc, #56]	@ (800c414 <vPortEnterCritical+0x5c>)
 800c3da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c414 <vPortEnterCritical+0x5c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d110      	bne.n	800c406 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c418 <vPortEnterCritical+0x60>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00b      	beq.n	800c406 <vPortEnterCritical+0x4e>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	603b      	str	r3, [r7, #0]
}
 800c400:	bf00      	nop
 800c402:	bf00      	nop
 800c404:	e7fd      	b.n	800c402 <vPortEnterCritical+0x4a>
	}
}
 800c406:	bf00      	nop
 800c408:	370c      	adds	r7, #12
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	2000004c 	.word	0x2000004c
 800c418:	e000ed04 	.word	0xe000ed04

0800c41c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c422:	4b12      	ldr	r3, [pc, #72]	@ (800c46c <vPortExitCritical+0x50>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10b      	bne.n	800c442 <vPortExitCritical+0x26>
	__asm volatile
 800c42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c42e:	f383 8811 	msr	BASEPRI, r3
 800c432:	f3bf 8f6f 	isb	sy
 800c436:	f3bf 8f4f 	dsb	sy
 800c43a:	607b      	str	r3, [r7, #4]
}
 800c43c:	bf00      	nop
 800c43e:	bf00      	nop
 800c440:	e7fd      	b.n	800c43e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c442:	4b0a      	ldr	r3, [pc, #40]	@ (800c46c <vPortExitCritical+0x50>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3b01      	subs	r3, #1
 800c448:	4a08      	ldr	r2, [pc, #32]	@ (800c46c <vPortExitCritical+0x50>)
 800c44a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c44c:	4b07      	ldr	r3, [pc, #28]	@ (800c46c <vPortExitCritical+0x50>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d105      	bne.n	800c460 <vPortExitCritical+0x44>
 800c454:	2300      	movs	r3, #0
 800c456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	f383 8811 	msr	BASEPRI, r3
}
 800c45e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c460:	bf00      	nop
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr
 800c46c:	2000004c 	.word	0x2000004c

0800c470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c470:	f3ef 8009 	mrs	r0, PSP
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	4b15      	ldr	r3, [pc, #84]	@ (800c4d0 <pxCurrentTCBConst>)
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	f01e 0f10 	tst.w	lr, #16
 800c480:	bf08      	it	eq
 800c482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48a:	6010      	str	r0, [r2, #0]
 800c48c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c490:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c494:	f380 8811 	msr	BASEPRI, r0
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f7fe feb0 	bl	800b204 <vTaskSwitchContext>
 800c4a4:	f04f 0000 	mov.w	r0, #0
 800c4a8:	f380 8811 	msr	BASEPRI, r0
 800c4ac:	bc09      	pop	{r0, r3}
 800c4ae:	6819      	ldr	r1, [r3, #0]
 800c4b0:	6808      	ldr	r0, [r1, #0]
 800c4b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b6:	f01e 0f10 	tst.w	lr, #16
 800c4ba:	bf08      	it	eq
 800c4bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4c0:	f380 8809 	msr	PSP, r0
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	f3af 8000 	nop.w

0800c4d0 <pxCurrentTCBConst>:
 800c4d0:	20001e00 	.word	0x20001e00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4d4:	bf00      	nop
 800c4d6:	bf00      	nop

0800c4d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	607b      	str	r3, [r7, #4]
}
 800c4f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4f2:	f7fe fdcd 	bl	800b090 <xTaskIncrementTick>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d003      	beq.n	800c504 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4fc:	4b06      	ldr	r3, [pc, #24]	@ (800c518 <xPortSysTickHandler+0x40>)
 800c4fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	2300      	movs	r3, #0
 800c506:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	f383 8811 	msr	BASEPRI, r3
}
 800c50e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c510:	bf00      	nop
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	e000ed04 	.word	0xe000ed04

0800c51c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c51c:	b480      	push	{r7}
 800c51e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c520:	4b0b      	ldr	r3, [pc, #44]	@ (800c550 <vPortSetupTimerInterrupt+0x34>)
 800c522:	2200      	movs	r2, #0
 800c524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c526:	4b0b      	ldr	r3, [pc, #44]	@ (800c554 <vPortSetupTimerInterrupt+0x38>)
 800c528:	2200      	movs	r2, #0
 800c52a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c52c:	4b0a      	ldr	r3, [pc, #40]	@ (800c558 <vPortSetupTimerInterrupt+0x3c>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a0a      	ldr	r2, [pc, #40]	@ (800c55c <vPortSetupTimerInterrupt+0x40>)
 800c532:	fba2 2303 	umull	r2, r3, r2, r3
 800c536:	099b      	lsrs	r3, r3, #6
 800c538:	4a09      	ldr	r2, [pc, #36]	@ (800c560 <vPortSetupTimerInterrupt+0x44>)
 800c53a:	3b01      	subs	r3, #1
 800c53c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c53e:	4b04      	ldr	r3, [pc, #16]	@ (800c550 <vPortSetupTimerInterrupt+0x34>)
 800c540:	2207      	movs	r2, #7
 800c542:	601a      	str	r2, [r3, #0]
}
 800c544:	bf00      	nop
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	e000e010 	.word	0xe000e010
 800c554:	e000e018 	.word	0xe000e018
 800c558:	2000000c 	.word	0x2000000c
 800c55c:	10624dd3 	.word	0x10624dd3
 800c560:	e000e014 	.word	0xe000e014

0800c564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c564:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c574 <vPortEnableVFP+0x10>
 800c568:	6801      	ldr	r1, [r0, #0]
 800c56a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c56e:	6001      	str	r1, [r0, #0]
 800c570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c572:	bf00      	nop
 800c574:	e000ed88 	.word	0xe000ed88

0800c578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c57e:	f3ef 8305 	mrs	r3, IPSR
 800c582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2b0f      	cmp	r3, #15
 800c588:	d915      	bls.n	800c5b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c58a:	4a18      	ldr	r2, [pc, #96]	@ (800c5ec <vPortValidateInterruptPriority+0x74>)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	4413      	add	r3, r2
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c594:	4b16      	ldr	r3, [pc, #88]	@ (800c5f0 <vPortValidateInterruptPriority+0x78>)
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	7afa      	ldrb	r2, [r7, #11]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d20b      	bcs.n	800c5b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	607b      	str	r3, [r7, #4]
}
 800c5b0:	bf00      	nop
 800c5b2:	bf00      	nop
 800c5b4:	e7fd      	b.n	800c5b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c5f4 <vPortValidateInterruptPriority+0x7c>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c5be:	4b0e      	ldr	r3, [pc, #56]	@ (800c5f8 <vPortValidateInterruptPriority+0x80>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d90b      	bls.n	800c5de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	603b      	str	r3, [r7, #0]
}
 800c5d8:	bf00      	nop
 800c5da:	bf00      	nop
 800c5dc:	e7fd      	b.n	800c5da <vPortValidateInterruptPriority+0x62>
	}
 800c5de:	bf00      	nop
 800c5e0:	3714      	adds	r7, #20
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	e000e3f0 	.word	0xe000e3f0
 800c5f0:	2000242c 	.word	0x2000242c
 800c5f4:	e000ed0c 	.word	0xe000ed0c
 800c5f8:	20002430 	.word	0x20002430

0800c5fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b08a      	sub	sp, #40	@ 0x28
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c604:	2300      	movs	r3, #0
 800c606:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c608:	f7fe fc86 	bl	800af18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c60c:	4b5c      	ldr	r3, [pc, #368]	@ (800c780 <pvPortMalloc+0x184>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d101      	bne.n	800c618 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c614:	f000 f924 	bl	800c860 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c618:	4b5a      	ldr	r3, [pc, #360]	@ (800c784 <pvPortMalloc+0x188>)
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4013      	ands	r3, r2
 800c620:	2b00      	cmp	r3, #0
 800c622:	f040 8095 	bne.w	800c750 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d01e      	beq.n	800c66a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c62c:	2208      	movs	r2, #8
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4413      	add	r3, r2
 800c632:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f003 0307 	and.w	r3, r3, #7
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d015      	beq.n	800c66a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f023 0307 	bic.w	r3, r3, #7
 800c644:	3308      	adds	r3, #8
 800c646:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f003 0307 	and.w	r3, r3, #7
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00b      	beq.n	800c66a <pvPortMalloc+0x6e>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	617b      	str	r3, [r7, #20]
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop
 800c668:	e7fd      	b.n	800c666 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d06f      	beq.n	800c750 <pvPortMalloc+0x154>
 800c670:	4b45      	ldr	r3, [pc, #276]	@ (800c788 <pvPortMalloc+0x18c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	429a      	cmp	r2, r3
 800c678:	d86a      	bhi.n	800c750 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c67a:	4b44      	ldr	r3, [pc, #272]	@ (800c78c <pvPortMalloc+0x190>)
 800c67c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c67e:	4b43      	ldr	r3, [pc, #268]	@ (800c78c <pvPortMalloc+0x190>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c684:	e004      	b.n	800c690 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c688:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	429a      	cmp	r2, r3
 800c698:	d903      	bls.n	800c6a2 <pvPortMalloc+0xa6>
 800c69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1f1      	bne.n	800c686 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6a2:	4b37      	ldr	r3, [pc, #220]	@ (800c780 <pvPortMalloc+0x184>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d051      	beq.n	800c750 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6ac:	6a3b      	ldr	r3, [r7, #32]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2208      	movs	r2, #8
 800c6b2:	4413      	add	r3, r2
 800c6b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c0:	685a      	ldr	r2, [r3, #4]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	1ad2      	subs	r2, r2, r3
 800c6c6:	2308      	movs	r3, #8
 800c6c8:	005b      	lsls	r3, r3, #1
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d920      	bls.n	800c710 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	f003 0307 	and.w	r3, r3, #7
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00b      	beq.n	800c6f8 <pvPortMalloc+0xfc>
	__asm volatile
 800c6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e4:	f383 8811 	msr	BASEPRI, r3
 800c6e8:	f3bf 8f6f 	isb	sy
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	613b      	str	r3, [r7, #16]
}
 800c6f2:	bf00      	nop
 800c6f4:	bf00      	nop
 800c6f6:	e7fd      	b.n	800c6f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	1ad2      	subs	r2, r2, r3
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c70a:	69b8      	ldr	r0, [r7, #24]
 800c70c:	f000 f90a 	bl	800c924 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c710:	4b1d      	ldr	r3, [pc, #116]	@ (800c788 <pvPortMalloc+0x18c>)
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	4a1b      	ldr	r2, [pc, #108]	@ (800c788 <pvPortMalloc+0x18c>)
 800c71c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c71e:	4b1a      	ldr	r3, [pc, #104]	@ (800c788 <pvPortMalloc+0x18c>)
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	4b1b      	ldr	r3, [pc, #108]	@ (800c790 <pvPortMalloc+0x194>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	429a      	cmp	r2, r3
 800c728:	d203      	bcs.n	800c732 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c72a:	4b17      	ldr	r3, [pc, #92]	@ (800c788 <pvPortMalloc+0x18c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a18      	ldr	r2, [pc, #96]	@ (800c790 <pvPortMalloc+0x194>)
 800c730:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	4b13      	ldr	r3, [pc, #76]	@ (800c784 <pvPortMalloc+0x188>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	431a      	orrs	r2, r3
 800c73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c742:	2200      	movs	r2, #0
 800c744:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c746:	4b13      	ldr	r3, [pc, #76]	@ (800c794 <pvPortMalloc+0x198>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	3301      	adds	r3, #1
 800c74c:	4a11      	ldr	r2, [pc, #68]	@ (800c794 <pvPortMalloc+0x198>)
 800c74e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c750:	f7fe fbf0 	bl	800af34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	f003 0307 	and.w	r3, r3, #7
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00b      	beq.n	800c776 <pvPortMalloc+0x17a>
	__asm volatile
 800c75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	60fb      	str	r3, [r7, #12]
}
 800c770:	bf00      	nop
 800c772:	bf00      	nop
 800c774:	e7fd      	b.n	800c772 <pvPortMalloc+0x176>
	return pvReturn;
 800c776:	69fb      	ldr	r3, [r7, #28]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3728      	adds	r7, #40	@ 0x28
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	20002ff4 	.word	0x20002ff4
 800c784:	20003008 	.word	0x20003008
 800c788:	20002ff8 	.word	0x20002ff8
 800c78c:	20002fec 	.word	0x20002fec
 800c790:	20002ffc 	.word	0x20002ffc
 800c794:	20003000 	.word	0x20003000

0800c798 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d04f      	beq.n	800c84a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7aa:	2308      	movs	r3, #8
 800c7ac:	425b      	negs	r3, r3
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	4b25      	ldr	r3, [pc, #148]	@ (800c854 <vPortFree+0xbc>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4013      	ands	r3, r2
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d10b      	bne.n	800c7de <vPortFree+0x46>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	60fb      	str	r3, [r7, #12]
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	e7fd      	b.n	800c7da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00b      	beq.n	800c7fe <vPortFree+0x66>
	__asm volatile
 800c7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ea:	f383 8811 	msr	BASEPRI, r3
 800c7ee:	f3bf 8f6f 	isb	sy
 800c7f2:	f3bf 8f4f 	dsb	sy
 800c7f6:	60bb      	str	r3, [r7, #8]
}
 800c7f8:	bf00      	nop
 800c7fa:	bf00      	nop
 800c7fc:	e7fd      	b.n	800c7fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	685a      	ldr	r2, [r3, #4]
 800c802:	4b14      	ldr	r3, [pc, #80]	@ (800c854 <vPortFree+0xbc>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4013      	ands	r3, r2
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d01e      	beq.n	800c84a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d11a      	bne.n	800c84a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	685a      	ldr	r2, [r3, #4]
 800c818:	4b0e      	ldr	r3, [pc, #56]	@ (800c854 <vPortFree+0xbc>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	43db      	mvns	r3, r3
 800c81e:	401a      	ands	r2, r3
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c824:	f7fe fb78 	bl	800af18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	4b0a      	ldr	r3, [pc, #40]	@ (800c858 <vPortFree+0xc0>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4413      	add	r3, r2
 800c832:	4a09      	ldr	r2, [pc, #36]	@ (800c858 <vPortFree+0xc0>)
 800c834:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c836:	6938      	ldr	r0, [r7, #16]
 800c838:	f000 f874 	bl	800c924 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c83c:	4b07      	ldr	r3, [pc, #28]	@ (800c85c <vPortFree+0xc4>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3301      	adds	r3, #1
 800c842:	4a06      	ldr	r2, [pc, #24]	@ (800c85c <vPortFree+0xc4>)
 800c844:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c846:	f7fe fb75 	bl	800af34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c84a:	bf00      	nop
 800c84c:	3718      	adds	r7, #24
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	20003008 	.word	0x20003008
 800c858:	20002ff8 	.word	0x20002ff8
 800c85c:	20003004 	.word	0x20003004

0800c860 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c860:	b480      	push	{r7}
 800c862:	b085      	sub	sp, #20
 800c864:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c866:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800c86a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c86c:	4b27      	ldr	r3, [pc, #156]	@ (800c90c <prvHeapInit+0xac>)
 800c86e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f003 0307 	and.w	r3, r3, #7
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00c      	beq.n	800c894 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	3307      	adds	r3, #7
 800c87e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f023 0307 	bic.w	r3, r3, #7
 800c886:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	1ad3      	subs	r3, r2, r3
 800c88e:	4a1f      	ldr	r2, [pc, #124]	@ (800c90c <prvHeapInit+0xac>)
 800c890:	4413      	add	r3, r2
 800c892:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c898:	4a1d      	ldr	r2, [pc, #116]	@ (800c910 <prvHeapInit+0xb0>)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c89e:	4b1c      	ldr	r3, [pc, #112]	@ (800c910 <prvHeapInit+0xb0>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8ac:	2208      	movs	r2, #8
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	1a9b      	subs	r3, r3, r2
 800c8b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f023 0307 	bic.w	r3, r3, #7
 800c8ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	4a15      	ldr	r2, [pc, #84]	@ (800c914 <prvHeapInit+0xb4>)
 800c8c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8c2:	4b14      	ldr	r3, [pc, #80]	@ (800c914 <prvHeapInit+0xb4>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8ca:	4b12      	ldr	r3, [pc, #72]	@ (800c914 <prvHeapInit+0xb4>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	1ad2      	subs	r2, r2, r3
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c914 <prvHeapInit+0xb4>)
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	4a0a      	ldr	r2, [pc, #40]	@ (800c918 <prvHeapInit+0xb8>)
 800c8ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	4a09      	ldr	r2, [pc, #36]	@ (800c91c <prvHeapInit+0xbc>)
 800c8f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8f8:	4b09      	ldr	r3, [pc, #36]	@ (800c920 <prvHeapInit+0xc0>)
 800c8fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c8fe:	601a      	str	r2, [r3, #0]
}
 800c900:	bf00      	nop
 800c902:	3714      	adds	r7, #20
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr
 800c90c:	20002434 	.word	0x20002434
 800c910:	20002fec 	.word	0x20002fec
 800c914:	20002ff4 	.word	0x20002ff4
 800c918:	20002ffc 	.word	0x20002ffc
 800c91c:	20002ff8 	.word	0x20002ff8
 800c920:	20003008 	.word	0x20003008

0800c924 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c92c:	4b28      	ldr	r3, [pc, #160]	@ (800c9d0 <prvInsertBlockIntoFreeList+0xac>)
 800c92e:	60fb      	str	r3, [r7, #12]
 800c930:	e002      	b.n	800c938 <prvInsertBlockIntoFreeList+0x14>
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	60fb      	str	r3, [r7, #12]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d8f7      	bhi.n	800c932 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	4413      	add	r3, r2
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	429a      	cmp	r2, r3
 800c952:	d108      	bne.n	800c966 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	441a      	add	r2, r3
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	441a      	add	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	429a      	cmp	r2, r3
 800c978:	d118      	bne.n	800c9ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	4b15      	ldr	r3, [pc, #84]	@ (800c9d4 <prvInsertBlockIntoFreeList+0xb0>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	429a      	cmp	r2, r3
 800c984:	d00d      	beq.n	800c9a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	685a      	ldr	r2, [r3, #4]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	441a      	add	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	601a      	str	r2, [r3, #0]
 800c9a0:	e008      	b.n	800c9b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9a2:	4b0c      	ldr	r3, [pc, #48]	@ (800c9d4 <prvInsertBlockIntoFreeList+0xb0>)
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	601a      	str	r2, [r3, #0]
 800c9aa:	e003      	b.n	800c9b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d002      	beq.n	800c9c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9c2:	bf00      	nop
 800c9c4:	3714      	adds	r7, #20
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	20002fec 	.word	0x20002fec
 800c9d4:	20002ff4 	.word	0x20002ff4

0800c9d8 <__cvt>:
 800c9d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9dc:	ec57 6b10 	vmov	r6, r7, d0
 800c9e0:	2f00      	cmp	r7, #0
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	463b      	mov	r3, r7
 800c9e8:	bfbb      	ittet	lt
 800c9ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c9ee:	461f      	movlt	r7, r3
 800c9f0:	2300      	movge	r3, #0
 800c9f2:	232d      	movlt	r3, #45	@ 0x2d
 800c9f4:	700b      	strb	r3, [r1, #0]
 800c9f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c9f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c9fc:	4691      	mov	r9, r2
 800c9fe:	f023 0820 	bic.w	r8, r3, #32
 800ca02:	bfbc      	itt	lt
 800ca04:	4632      	movlt	r2, r6
 800ca06:	4616      	movlt	r6, r2
 800ca08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ca0c:	d005      	beq.n	800ca1a <__cvt+0x42>
 800ca0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ca12:	d100      	bne.n	800ca16 <__cvt+0x3e>
 800ca14:	3401      	adds	r4, #1
 800ca16:	2102      	movs	r1, #2
 800ca18:	e000      	b.n	800ca1c <__cvt+0x44>
 800ca1a:	2103      	movs	r1, #3
 800ca1c:	ab03      	add	r3, sp, #12
 800ca1e:	9301      	str	r3, [sp, #4]
 800ca20:	ab02      	add	r3, sp, #8
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	ec47 6b10 	vmov	d0, r6, r7
 800ca28:	4653      	mov	r3, sl
 800ca2a:	4622      	mov	r2, r4
 800ca2c:	f001 fa4c 	bl	800dec8 <_dtoa_r>
 800ca30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ca34:	4605      	mov	r5, r0
 800ca36:	d119      	bne.n	800ca6c <__cvt+0x94>
 800ca38:	f019 0f01 	tst.w	r9, #1
 800ca3c:	d00e      	beq.n	800ca5c <__cvt+0x84>
 800ca3e:	eb00 0904 	add.w	r9, r0, r4
 800ca42:	2200      	movs	r2, #0
 800ca44:	2300      	movs	r3, #0
 800ca46:	4630      	mov	r0, r6
 800ca48:	4639      	mov	r1, r7
 800ca4a:	f7f4 f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca4e:	b108      	cbz	r0, 800ca54 <__cvt+0x7c>
 800ca50:	f8cd 900c 	str.w	r9, [sp, #12]
 800ca54:	2230      	movs	r2, #48	@ 0x30
 800ca56:	9b03      	ldr	r3, [sp, #12]
 800ca58:	454b      	cmp	r3, r9
 800ca5a:	d31e      	bcc.n	800ca9a <__cvt+0xc2>
 800ca5c:	9b03      	ldr	r3, [sp, #12]
 800ca5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca60:	1b5b      	subs	r3, r3, r5
 800ca62:	4628      	mov	r0, r5
 800ca64:	6013      	str	r3, [r2, #0]
 800ca66:	b004      	add	sp, #16
 800ca68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ca70:	eb00 0904 	add.w	r9, r0, r4
 800ca74:	d1e5      	bne.n	800ca42 <__cvt+0x6a>
 800ca76:	7803      	ldrb	r3, [r0, #0]
 800ca78:	2b30      	cmp	r3, #48	@ 0x30
 800ca7a:	d10a      	bne.n	800ca92 <__cvt+0xba>
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	2300      	movs	r3, #0
 800ca80:	4630      	mov	r0, r6
 800ca82:	4639      	mov	r1, r7
 800ca84:	f7f4 f820 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca88:	b918      	cbnz	r0, 800ca92 <__cvt+0xba>
 800ca8a:	f1c4 0401 	rsb	r4, r4, #1
 800ca8e:	f8ca 4000 	str.w	r4, [sl]
 800ca92:	f8da 3000 	ldr.w	r3, [sl]
 800ca96:	4499      	add	r9, r3
 800ca98:	e7d3      	b.n	800ca42 <__cvt+0x6a>
 800ca9a:	1c59      	adds	r1, r3, #1
 800ca9c:	9103      	str	r1, [sp, #12]
 800ca9e:	701a      	strb	r2, [r3, #0]
 800caa0:	e7d9      	b.n	800ca56 <__cvt+0x7e>

0800caa2 <__exponent>:
 800caa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800caa4:	2900      	cmp	r1, #0
 800caa6:	bfba      	itte	lt
 800caa8:	4249      	neglt	r1, r1
 800caaa:	232d      	movlt	r3, #45	@ 0x2d
 800caac:	232b      	movge	r3, #43	@ 0x2b
 800caae:	2909      	cmp	r1, #9
 800cab0:	7002      	strb	r2, [r0, #0]
 800cab2:	7043      	strb	r3, [r0, #1]
 800cab4:	dd29      	ble.n	800cb0a <__exponent+0x68>
 800cab6:	f10d 0307 	add.w	r3, sp, #7
 800caba:	461d      	mov	r5, r3
 800cabc:	270a      	movs	r7, #10
 800cabe:	461a      	mov	r2, r3
 800cac0:	fbb1 f6f7 	udiv	r6, r1, r7
 800cac4:	fb07 1416 	mls	r4, r7, r6, r1
 800cac8:	3430      	adds	r4, #48	@ 0x30
 800caca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cace:	460c      	mov	r4, r1
 800cad0:	2c63      	cmp	r4, #99	@ 0x63
 800cad2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cad6:	4631      	mov	r1, r6
 800cad8:	dcf1      	bgt.n	800cabe <__exponent+0x1c>
 800cada:	3130      	adds	r1, #48	@ 0x30
 800cadc:	1e94      	subs	r4, r2, #2
 800cade:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cae2:	1c41      	adds	r1, r0, #1
 800cae4:	4623      	mov	r3, r4
 800cae6:	42ab      	cmp	r3, r5
 800cae8:	d30a      	bcc.n	800cb00 <__exponent+0x5e>
 800caea:	f10d 0309 	add.w	r3, sp, #9
 800caee:	1a9b      	subs	r3, r3, r2
 800caf0:	42ac      	cmp	r4, r5
 800caf2:	bf88      	it	hi
 800caf4:	2300      	movhi	r3, #0
 800caf6:	3302      	adds	r3, #2
 800caf8:	4403      	add	r3, r0
 800cafa:	1a18      	subs	r0, r3, r0
 800cafc:	b003      	add	sp, #12
 800cafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb00:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cb04:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cb08:	e7ed      	b.n	800cae6 <__exponent+0x44>
 800cb0a:	2330      	movs	r3, #48	@ 0x30
 800cb0c:	3130      	adds	r1, #48	@ 0x30
 800cb0e:	7083      	strb	r3, [r0, #2]
 800cb10:	70c1      	strb	r1, [r0, #3]
 800cb12:	1d03      	adds	r3, r0, #4
 800cb14:	e7f1      	b.n	800cafa <__exponent+0x58>
	...

0800cb18 <_printf_float>:
 800cb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb1c:	b08d      	sub	sp, #52	@ 0x34
 800cb1e:	460c      	mov	r4, r1
 800cb20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cb24:	4616      	mov	r6, r2
 800cb26:	461f      	mov	r7, r3
 800cb28:	4605      	mov	r5, r0
 800cb2a:	f001 f89b 	bl	800dc64 <_localeconv_r>
 800cb2e:	6803      	ldr	r3, [r0, #0]
 800cb30:	9304      	str	r3, [sp, #16]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7f3 fb9c 	bl	8000270 <strlen>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb3c:	f8d8 3000 	ldr.w	r3, [r8]
 800cb40:	9005      	str	r0, [sp, #20]
 800cb42:	3307      	adds	r3, #7
 800cb44:	f023 0307 	bic.w	r3, r3, #7
 800cb48:	f103 0208 	add.w	r2, r3, #8
 800cb4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cb50:	f8d4 b000 	ldr.w	fp, [r4]
 800cb54:	f8c8 2000 	str.w	r2, [r8]
 800cb58:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cb60:	9307      	str	r3, [sp, #28]
 800cb62:	f8cd 8018 	str.w	r8, [sp, #24]
 800cb66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cb6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb6e:	4b9c      	ldr	r3, [pc, #624]	@ (800cde0 <_printf_float+0x2c8>)
 800cb70:	f04f 32ff 	mov.w	r2, #4294967295
 800cb74:	f7f3 ffda 	bl	8000b2c <__aeabi_dcmpun>
 800cb78:	bb70      	cbnz	r0, 800cbd8 <_printf_float+0xc0>
 800cb7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb7e:	4b98      	ldr	r3, [pc, #608]	@ (800cde0 <_printf_float+0x2c8>)
 800cb80:	f04f 32ff 	mov.w	r2, #4294967295
 800cb84:	f7f3 ffb4 	bl	8000af0 <__aeabi_dcmple>
 800cb88:	bb30      	cbnz	r0, 800cbd8 <_printf_float+0xc0>
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	4640      	mov	r0, r8
 800cb90:	4649      	mov	r1, r9
 800cb92:	f7f3 ffa3 	bl	8000adc <__aeabi_dcmplt>
 800cb96:	b110      	cbz	r0, 800cb9e <_printf_float+0x86>
 800cb98:	232d      	movs	r3, #45	@ 0x2d
 800cb9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb9e:	4a91      	ldr	r2, [pc, #580]	@ (800cde4 <_printf_float+0x2cc>)
 800cba0:	4b91      	ldr	r3, [pc, #580]	@ (800cde8 <_printf_float+0x2d0>)
 800cba2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cba6:	bf94      	ite	ls
 800cba8:	4690      	movls	r8, r2
 800cbaa:	4698      	movhi	r8, r3
 800cbac:	2303      	movs	r3, #3
 800cbae:	6123      	str	r3, [r4, #16]
 800cbb0:	f02b 0304 	bic.w	r3, fp, #4
 800cbb4:	6023      	str	r3, [r4, #0]
 800cbb6:	f04f 0900 	mov.w	r9, #0
 800cbba:	9700      	str	r7, [sp, #0]
 800cbbc:	4633      	mov	r3, r6
 800cbbe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cbc0:	4621      	mov	r1, r4
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	f000 f9d2 	bl	800cf6c <_printf_common>
 800cbc8:	3001      	adds	r0, #1
 800cbca:	f040 808d 	bne.w	800cce8 <_printf_float+0x1d0>
 800cbce:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd2:	b00d      	add	sp, #52	@ 0x34
 800cbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd8:	4642      	mov	r2, r8
 800cbda:	464b      	mov	r3, r9
 800cbdc:	4640      	mov	r0, r8
 800cbde:	4649      	mov	r1, r9
 800cbe0:	f7f3 ffa4 	bl	8000b2c <__aeabi_dcmpun>
 800cbe4:	b140      	cbz	r0, 800cbf8 <_printf_float+0xe0>
 800cbe6:	464b      	mov	r3, r9
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	bfbc      	itt	lt
 800cbec:	232d      	movlt	r3, #45	@ 0x2d
 800cbee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cbf2:	4a7e      	ldr	r2, [pc, #504]	@ (800cdec <_printf_float+0x2d4>)
 800cbf4:	4b7e      	ldr	r3, [pc, #504]	@ (800cdf0 <_printf_float+0x2d8>)
 800cbf6:	e7d4      	b.n	800cba2 <_printf_float+0x8a>
 800cbf8:	6863      	ldr	r3, [r4, #4]
 800cbfa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cbfe:	9206      	str	r2, [sp, #24]
 800cc00:	1c5a      	adds	r2, r3, #1
 800cc02:	d13b      	bne.n	800cc7c <_printf_float+0x164>
 800cc04:	2306      	movs	r3, #6
 800cc06:	6063      	str	r3, [r4, #4]
 800cc08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	6022      	str	r2, [r4, #0]
 800cc10:	9303      	str	r3, [sp, #12]
 800cc12:	ab0a      	add	r3, sp, #40	@ 0x28
 800cc14:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cc18:	ab09      	add	r3, sp, #36	@ 0x24
 800cc1a:	9300      	str	r3, [sp, #0]
 800cc1c:	6861      	ldr	r1, [r4, #4]
 800cc1e:	ec49 8b10 	vmov	d0, r8, r9
 800cc22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cc26:	4628      	mov	r0, r5
 800cc28:	f7ff fed6 	bl	800c9d8 <__cvt>
 800cc2c:	9b06      	ldr	r3, [sp, #24]
 800cc2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc30:	2b47      	cmp	r3, #71	@ 0x47
 800cc32:	4680      	mov	r8, r0
 800cc34:	d129      	bne.n	800cc8a <_printf_float+0x172>
 800cc36:	1cc8      	adds	r0, r1, #3
 800cc38:	db02      	blt.n	800cc40 <_printf_float+0x128>
 800cc3a:	6863      	ldr	r3, [r4, #4]
 800cc3c:	4299      	cmp	r1, r3
 800cc3e:	dd41      	ble.n	800ccc4 <_printf_float+0x1ac>
 800cc40:	f1aa 0a02 	sub.w	sl, sl, #2
 800cc44:	fa5f fa8a 	uxtb.w	sl, sl
 800cc48:	3901      	subs	r1, #1
 800cc4a:	4652      	mov	r2, sl
 800cc4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cc50:	9109      	str	r1, [sp, #36]	@ 0x24
 800cc52:	f7ff ff26 	bl	800caa2 <__exponent>
 800cc56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc58:	1813      	adds	r3, r2, r0
 800cc5a:	2a01      	cmp	r2, #1
 800cc5c:	4681      	mov	r9, r0
 800cc5e:	6123      	str	r3, [r4, #16]
 800cc60:	dc02      	bgt.n	800cc68 <_printf_float+0x150>
 800cc62:	6822      	ldr	r2, [r4, #0]
 800cc64:	07d2      	lsls	r2, r2, #31
 800cc66:	d501      	bpl.n	800cc6c <_printf_float+0x154>
 800cc68:	3301      	adds	r3, #1
 800cc6a:	6123      	str	r3, [r4, #16]
 800cc6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d0a2      	beq.n	800cbba <_printf_float+0xa2>
 800cc74:	232d      	movs	r3, #45	@ 0x2d
 800cc76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc7a:	e79e      	b.n	800cbba <_printf_float+0xa2>
 800cc7c:	9a06      	ldr	r2, [sp, #24]
 800cc7e:	2a47      	cmp	r2, #71	@ 0x47
 800cc80:	d1c2      	bne.n	800cc08 <_printf_float+0xf0>
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1c0      	bne.n	800cc08 <_printf_float+0xf0>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e7bd      	b.n	800cc06 <_printf_float+0xee>
 800cc8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cc8e:	d9db      	bls.n	800cc48 <_printf_float+0x130>
 800cc90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cc94:	d118      	bne.n	800ccc8 <_printf_float+0x1b0>
 800cc96:	2900      	cmp	r1, #0
 800cc98:	6863      	ldr	r3, [r4, #4]
 800cc9a:	dd0b      	ble.n	800ccb4 <_printf_float+0x19c>
 800cc9c:	6121      	str	r1, [r4, #16]
 800cc9e:	b913      	cbnz	r3, 800cca6 <_printf_float+0x18e>
 800cca0:	6822      	ldr	r2, [r4, #0]
 800cca2:	07d0      	lsls	r0, r2, #31
 800cca4:	d502      	bpl.n	800ccac <_printf_float+0x194>
 800cca6:	3301      	adds	r3, #1
 800cca8:	440b      	add	r3, r1
 800ccaa:	6123      	str	r3, [r4, #16]
 800ccac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ccae:	f04f 0900 	mov.w	r9, #0
 800ccb2:	e7db      	b.n	800cc6c <_printf_float+0x154>
 800ccb4:	b913      	cbnz	r3, 800ccbc <_printf_float+0x1a4>
 800ccb6:	6822      	ldr	r2, [r4, #0]
 800ccb8:	07d2      	lsls	r2, r2, #31
 800ccba:	d501      	bpl.n	800ccc0 <_printf_float+0x1a8>
 800ccbc:	3302      	adds	r3, #2
 800ccbe:	e7f4      	b.n	800ccaa <_printf_float+0x192>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e7f2      	b.n	800ccaa <_printf_float+0x192>
 800ccc4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ccc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccca:	4299      	cmp	r1, r3
 800cccc:	db05      	blt.n	800ccda <_printf_float+0x1c2>
 800ccce:	6823      	ldr	r3, [r4, #0]
 800ccd0:	6121      	str	r1, [r4, #16]
 800ccd2:	07d8      	lsls	r0, r3, #31
 800ccd4:	d5ea      	bpl.n	800ccac <_printf_float+0x194>
 800ccd6:	1c4b      	adds	r3, r1, #1
 800ccd8:	e7e7      	b.n	800ccaa <_printf_float+0x192>
 800ccda:	2900      	cmp	r1, #0
 800ccdc:	bfd4      	ite	le
 800ccde:	f1c1 0202 	rsble	r2, r1, #2
 800cce2:	2201      	movgt	r2, #1
 800cce4:	4413      	add	r3, r2
 800cce6:	e7e0      	b.n	800ccaa <_printf_float+0x192>
 800cce8:	6823      	ldr	r3, [r4, #0]
 800ccea:	055a      	lsls	r2, r3, #21
 800ccec:	d407      	bmi.n	800ccfe <_printf_float+0x1e6>
 800ccee:	6923      	ldr	r3, [r4, #16]
 800ccf0:	4642      	mov	r2, r8
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	47b8      	blx	r7
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	d12b      	bne.n	800cd54 <_printf_float+0x23c>
 800ccfc:	e767      	b.n	800cbce <_printf_float+0xb6>
 800ccfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cd02:	f240 80dd 	bls.w	800cec0 <_printf_float+0x3a8>
 800cd06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	f7f3 fedb 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d033      	beq.n	800cd7e <_printf_float+0x266>
 800cd16:	4a37      	ldr	r2, [pc, #220]	@ (800cdf4 <_printf_float+0x2dc>)
 800cd18:	2301      	movs	r3, #1
 800cd1a:	4631      	mov	r1, r6
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	47b8      	blx	r7
 800cd20:	3001      	adds	r0, #1
 800cd22:	f43f af54 	beq.w	800cbce <_printf_float+0xb6>
 800cd26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cd2a:	4543      	cmp	r3, r8
 800cd2c:	db02      	blt.n	800cd34 <_printf_float+0x21c>
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	07d8      	lsls	r0, r3, #31
 800cd32:	d50f      	bpl.n	800cd54 <_printf_float+0x23c>
 800cd34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd38:	4631      	mov	r1, r6
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	47b8      	blx	r7
 800cd3e:	3001      	adds	r0, #1
 800cd40:	f43f af45 	beq.w	800cbce <_printf_float+0xb6>
 800cd44:	f04f 0900 	mov.w	r9, #0
 800cd48:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd4c:	f104 0a1a 	add.w	sl, r4, #26
 800cd50:	45c8      	cmp	r8, r9
 800cd52:	dc09      	bgt.n	800cd68 <_printf_float+0x250>
 800cd54:	6823      	ldr	r3, [r4, #0]
 800cd56:	079b      	lsls	r3, r3, #30
 800cd58:	f100 8103 	bmi.w	800cf62 <_printf_float+0x44a>
 800cd5c:	68e0      	ldr	r0, [r4, #12]
 800cd5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd60:	4298      	cmp	r0, r3
 800cd62:	bfb8      	it	lt
 800cd64:	4618      	movlt	r0, r3
 800cd66:	e734      	b.n	800cbd2 <_printf_float+0xba>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	4652      	mov	r2, sl
 800cd6c:	4631      	mov	r1, r6
 800cd6e:	4628      	mov	r0, r5
 800cd70:	47b8      	blx	r7
 800cd72:	3001      	adds	r0, #1
 800cd74:	f43f af2b 	beq.w	800cbce <_printf_float+0xb6>
 800cd78:	f109 0901 	add.w	r9, r9, #1
 800cd7c:	e7e8      	b.n	800cd50 <_printf_float+0x238>
 800cd7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	dc39      	bgt.n	800cdf8 <_printf_float+0x2e0>
 800cd84:	4a1b      	ldr	r2, [pc, #108]	@ (800cdf4 <_printf_float+0x2dc>)
 800cd86:	2301      	movs	r3, #1
 800cd88:	4631      	mov	r1, r6
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	47b8      	blx	r7
 800cd8e:	3001      	adds	r0, #1
 800cd90:	f43f af1d 	beq.w	800cbce <_printf_float+0xb6>
 800cd94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cd98:	ea59 0303 	orrs.w	r3, r9, r3
 800cd9c:	d102      	bne.n	800cda4 <_printf_float+0x28c>
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	07d9      	lsls	r1, r3, #31
 800cda2:	d5d7      	bpl.n	800cd54 <_printf_float+0x23c>
 800cda4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cda8:	4631      	mov	r1, r6
 800cdaa:	4628      	mov	r0, r5
 800cdac:	47b8      	blx	r7
 800cdae:	3001      	adds	r0, #1
 800cdb0:	f43f af0d 	beq.w	800cbce <_printf_float+0xb6>
 800cdb4:	f04f 0a00 	mov.w	sl, #0
 800cdb8:	f104 0b1a 	add.w	fp, r4, #26
 800cdbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdbe:	425b      	negs	r3, r3
 800cdc0:	4553      	cmp	r3, sl
 800cdc2:	dc01      	bgt.n	800cdc8 <_printf_float+0x2b0>
 800cdc4:	464b      	mov	r3, r9
 800cdc6:	e793      	b.n	800ccf0 <_printf_float+0x1d8>
 800cdc8:	2301      	movs	r3, #1
 800cdca:	465a      	mov	r2, fp
 800cdcc:	4631      	mov	r1, r6
 800cdce:	4628      	mov	r0, r5
 800cdd0:	47b8      	blx	r7
 800cdd2:	3001      	adds	r0, #1
 800cdd4:	f43f aefb 	beq.w	800cbce <_printf_float+0xb6>
 800cdd8:	f10a 0a01 	add.w	sl, sl, #1
 800cddc:	e7ee      	b.n	800cdbc <_printf_float+0x2a4>
 800cdde:	bf00      	nop
 800cde0:	7fefffff 	.word	0x7fefffff
 800cde4:	08011b48 	.word	0x08011b48
 800cde8:	08011b4c 	.word	0x08011b4c
 800cdec:	08011b50 	.word	0x08011b50
 800cdf0:	08011b54 	.word	0x08011b54
 800cdf4:	08011b58 	.word	0x08011b58
 800cdf8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cdfa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cdfe:	4553      	cmp	r3, sl
 800ce00:	bfa8      	it	ge
 800ce02:	4653      	movge	r3, sl
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	4699      	mov	r9, r3
 800ce08:	dc36      	bgt.n	800ce78 <_printf_float+0x360>
 800ce0a:	f04f 0b00 	mov.w	fp, #0
 800ce0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce12:	f104 021a 	add.w	r2, r4, #26
 800ce16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ce18:	9306      	str	r3, [sp, #24]
 800ce1a:	eba3 0309 	sub.w	r3, r3, r9
 800ce1e:	455b      	cmp	r3, fp
 800ce20:	dc31      	bgt.n	800ce86 <_printf_float+0x36e>
 800ce22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce24:	459a      	cmp	sl, r3
 800ce26:	dc3a      	bgt.n	800ce9e <_printf_float+0x386>
 800ce28:	6823      	ldr	r3, [r4, #0]
 800ce2a:	07da      	lsls	r2, r3, #31
 800ce2c:	d437      	bmi.n	800ce9e <_printf_float+0x386>
 800ce2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce30:	ebaa 0903 	sub.w	r9, sl, r3
 800ce34:	9b06      	ldr	r3, [sp, #24]
 800ce36:	ebaa 0303 	sub.w	r3, sl, r3
 800ce3a:	4599      	cmp	r9, r3
 800ce3c:	bfa8      	it	ge
 800ce3e:	4699      	movge	r9, r3
 800ce40:	f1b9 0f00 	cmp.w	r9, #0
 800ce44:	dc33      	bgt.n	800ceae <_printf_float+0x396>
 800ce46:	f04f 0800 	mov.w	r8, #0
 800ce4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce4e:	f104 0b1a 	add.w	fp, r4, #26
 800ce52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce54:	ebaa 0303 	sub.w	r3, sl, r3
 800ce58:	eba3 0309 	sub.w	r3, r3, r9
 800ce5c:	4543      	cmp	r3, r8
 800ce5e:	f77f af79 	ble.w	800cd54 <_printf_float+0x23c>
 800ce62:	2301      	movs	r3, #1
 800ce64:	465a      	mov	r2, fp
 800ce66:	4631      	mov	r1, r6
 800ce68:	4628      	mov	r0, r5
 800ce6a:	47b8      	blx	r7
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	f43f aeae 	beq.w	800cbce <_printf_float+0xb6>
 800ce72:	f108 0801 	add.w	r8, r8, #1
 800ce76:	e7ec      	b.n	800ce52 <_printf_float+0x33a>
 800ce78:	4642      	mov	r2, r8
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	47b8      	blx	r7
 800ce80:	3001      	adds	r0, #1
 800ce82:	d1c2      	bne.n	800ce0a <_printf_float+0x2f2>
 800ce84:	e6a3      	b.n	800cbce <_printf_float+0xb6>
 800ce86:	2301      	movs	r3, #1
 800ce88:	4631      	mov	r1, r6
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	9206      	str	r2, [sp, #24]
 800ce8e:	47b8      	blx	r7
 800ce90:	3001      	adds	r0, #1
 800ce92:	f43f ae9c 	beq.w	800cbce <_printf_float+0xb6>
 800ce96:	9a06      	ldr	r2, [sp, #24]
 800ce98:	f10b 0b01 	add.w	fp, fp, #1
 800ce9c:	e7bb      	b.n	800ce16 <_printf_float+0x2fe>
 800ce9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cea2:	4631      	mov	r1, r6
 800cea4:	4628      	mov	r0, r5
 800cea6:	47b8      	blx	r7
 800cea8:	3001      	adds	r0, #1
 800ceaa:	d1c0      	bne.n	800ce2e <_printf_float+0x316>
 800ceac:	e68f      	b.n	800cbce <_printf_float+0xb6>
 800ceae:	9a06      	ldr	r2, [sp, #24]
 800ceb0:	464b      	mov	r3, r9
 800ceb2:	4442      	add	r2, r8
 800ceb4:	4631      	mov	r1, r6
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	47b8      	blx	r7
 800ceba:	3001      	adds	r0, #1
 800cebc:	d1c3      	bne.n	800ce46 <_printf_float+0x32e>
 800cebe:	e686      	b.n	800cbce <_printf_float+0xb6>
 800cec0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cec4:	f1ba 0f01 	cmp.w	sl, #1
 800cec8:	dc01      	bgt.n	800cece <_printf_float+0x3b6>
 800ceca:	07db      	lsls	r3, r3, #31
 800cecc:	d536      	bpl.n	800cf3c <_printf_float+0x424>
 800cece:	2301      	movs	r3, #1
 800ced0:	4642      	mov	r2, r8
 800ced2:	4631      	mov	r1, r6
 800ced4:	4628      	mov	r0, r5
 800ced6:	47b8      	blx	r7
 800ced8:	3001      	adds	r0, #1
 800ceda:	f43f ae78 	beq.w	800cbce <_printf_float+0xb6>
 800cede:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cee2:	4631      	mov	r1, r6
 800cee4:	4628      	mov	r0, r5
 800cee6:	47b8      	blx	r7
 800cee8:	3001      	adds	r0, #1
 800ceea:	f43f ae70 	beq.w	800cbce <_printf_float+0xb6>
 800ceee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cef2:	2200      	movs	r2, #0
 800cef4:	2300      	movs	r3, #0
 800cef6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cefa:	f7f3 fde5 	bl	8000ac8 <__aeabi_dcmpeq>
 800cefe:	b9c0      	cbnz	r0, 800cf32 <_printf_float+0x41a>
 800cf00:	4653      	mov	r3, sl
 800cf02:	f108 0201 	add.w	r2, r8, #1
 800cf06:	4631      	mov	r1, r6
 800cf08:	4628      	mov	r0, r5
 800cf0a:	47b8      	blx	r7
 800cf0c:	3001      	adds	r0, #1
 800cf0e:	d10c      	bne.n	800cf2a <_printf_float+0x412>
 800cf10:	e65d      	b.n	800cbce <_printf_float+0xb6>
 800cf12:	2301      	movs	r3, #1
 800cf14:	465a      	mov	r2, fp
 800cf16:	4631      	mov	r1, r6
 800cf18:	4628      	mov	r0, r5
 800cf1a:	47b8      	blx	r7
 800cf1c:	3001      	adds	r0, #1
 800cf1e:	f43f ae56 	beq.w	800cbce <_printf_float+0xb6>
 800cf22:	f108 0801 	add.w	r8, r8, #1
 800cf26:	45d0      	cmp	r8, sl
 800cf28:	dbf3      	blt.n	800cf12 <_printf_float+0x3fa>
 800cf2a:	464b      	mov	r3, r9
 800cf2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cf30:	e6df      	b.n	800ccf2 <_printf_float+0x1da>
 800cf32:	f04f 0800 	mov.w	r8, #0
 800cf36:	f104 0b1a 	add.w	fp, r4, #26
 800cf3a:	e7f4      	b.n	800cf26 <_printf_float+0x40e>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	4642      	mov	r2, r8
 800cf40:	e7e1      	b.n	800cf06 <_printf_float+0x3ee>
 800cf42:	2301      	movs	r3, #1
 800cf44:	464a      	mov	r2, r9
 800cf46:	4631      	mov	r1, r6
 800cf48:	4628      	mov	r0, r5
 800cf4a:	47b8      	blx	r7
 800cf4c:	3001      	adds	r0, #1
 800cf4e:	f43f ae3e 	beq.w	800cbce <_printf_float+0xb6>
 800cf52:	f108 0801 	add.w	r8, r8, #1
 800cf56:	68e3      	ldr	r3, [r4, #12]
 800cf58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cf5a:	1a5b      	subs	r3, r3, r1
 800cf5c:	4543      	cmp	r3, r8
 800cf5e:	dcf0      	bgt.n	800cf42 <_printf_float+0x42a>
 800cf60:	e6fc      	b.n	800cd5c <_printf_float+0x244>
 800cf62:	f04f 0800 	mov.w	r8, #0
 800cf66:	f104 0919 	add.w	r9, r4, #25
 800cf6a:	e7f4      	b.n	800cf56 <_printf_float+0x43e>

0800cf6c <_printf_common>:
 800cf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf70:	4616      	mov	r6, r2
 800cf72:	4698      	mov	r8, r3
 800cf74:	688a      	ldr	r2, [r1, #8]
 800cf76:	690b      	ldr	r3, [r1, #16]
 800cf78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	bfb8      	it	lt
 800cf80:	4613      	movlt	r3, r2
 800cf82:	6033      	str	r3, [r6, #0]
 800cf84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cf88:	4607      	mov	r7, r0
 800cf8a:	460c      	mov	r4, r1
 800cf8c:	b10a      	cbz	r2, 800cf92 <_printf_common+0x26>
 800cf8e:	3301      	adds	r3, #1
 800cf90:	6033      	str	r3, [r6, #0]
 800cf92:	6823      	ldr	r3, [r4, #0]
 800cf94:	0699      	lsls	r1, r3, #26
 800cf96:	bf42      	ittt	mi
 800cf98:	6833      	ldrmi	r3, [r6, #0]
 800cf9a:	3302      	addmi	r3, #2
 800cf9c:	6033      	strmi	r3, [r6, #0]
 800cf9e:	6825      	ldr	r5, [r4, #0]
 800cfa0:	f015 0506 	ands.w	r5, r5, #6
 800cfa4:	d106      	bne.n	800cfb4 <_printf_common+0x48>
 800cfa6:	f104 0a19 	add.w	sl, r4, #25
 800cfaa:	68e3      	ldr	r3, [r4, #12]
 800cfac:	6832      	ldr	r2, [r6, #0]
 800cfae:	1a9b      	subs	r3, r3, r2
 800cfb0:	42ab      	cmp	r3, r5
 800cfb2:	dc26      	bgt.n	800d002 <_printf_common+0x96>
 800cfb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cfb8:	6822      	ldr	r2, [r4, #0]
 800cfba:	3b00      	subs	r3, #0
 800cfbc:	bf18      	it	ne
 800cfbe:	2301      	movne	r3, #1
 800cfc0:	0692      	lsls	r2, r2, #26
 800cfc2:	d42b      	bmi.n	800d01c <_printf_common+0xb0>
 800cfc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cfc8:	4641      	mov	r1, r8
 800cfca:	4638      	mov	r0, r7
 800cfcc:	47c8      	blx	r9
 800cfce:	3001      	adds	r0, #1
 800cfd0:	d01e      	beq.n	800d010 <_printf_common+0xa4>
 800cfd2:	6823      	ldr	r3, [r4, #0]
 800cfd4:	6922      	ldr	r2, [r4, #16]
 800cfd6:	f003 0306 	and.w	r3, r3, #6
 800cfda:	2b04      	cmp	r3, #4
 800cfdc:	bf02      	ittt	eq
 800cfde:	68e5      	ldreq	r5, [r4, #12]
 800cfe0:	6833      	ldreq	r3, [r6, #0]
 800cfe2:	1aed      	subeq	r5, r5, r3
 800cfe4:	68a3      	ldr	r3, [r4, #8]
 800cfe6:	bf0c      	ite	eq
 800cfe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfec:	2500      	movne	r5, #0
 800cfee:	4293      	cmp	r3, r2
 800cff0:	bfc4      	itt	gt
 800cff2:	1a9b      	subgt	r3, r3, r2
 800cff4:	18ed      	addgt	r5, r5, r3
 800cff6:	2600      	movs	r6, #0
 800cff8:	341a      	adds	r4, #26
 800cffa:	42b5      	cmp	r5, r6
 800cffc:	d11a      	bne.n	800d034 <_printf_common+0xc8>
 800cffe:	2000      	movs	r0, #0
 800d000:	e008      	b.n	800d014 <_printf_common+0xa8>
 800d002:	2301      	movs	r3, #1
 800d004:	4652      	mov	r2, sl
 800d006:	4641      	mov	r1, r8
 800d008:	4638      	mov	r0, r7
 800d00a:	47c8      	blx	r9
 800d00c:	3001      	adds	r0, #1
 800d00e:	d103      	bne.n	800d018 <_printf_common+0xac>
 800d010:	f04f 30ff 	mov.w	r0, #4294967295
 800d014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d018:	3501      	adds	r5, #1
 800d01a:	e7c6      	b.n	800cfaa <_printf_common+0x3e>
 800d01c:	18e1      	adds	r1, r4, r3
 800d01e:	1c5a      	adds	r2, r3, #1
 800d020:	2030      	movs	r0, #48	@ 0x30
 800d022:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d026:	4422      	add	r2, r4
 800d028:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d02c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d030:	3302      	adds	r3, #2
 800d032:	e7c7      	b.n	800cfc4 <_printf_common+0x58>
 800d034:	2301      	movs	r3, #1
 800d036:	4622      	mov	r2, r4
 800d038:	4641      	mov	r1, r8
 800d03a:	4638      	mov	r0, r7
 800d03c:	47c8      	blx	r9
 800d03e:	3001      	adds	r0, #1
 800d040:	d0e6      	beq.n	800d010 <_printf_common+0xa4>
 800d042:	3601      	adds	r6, #1
 800d044:	e7d9      	b.n	800cffa <_printf_common+0x8e>
	...

0800d048 <_printf_i>:
 800d048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d04c:	7e0f      	ldrb	r7, [r1, #24]
 800d04e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d050:	2f78      	cmp	r7, #120	@ 0x78
 800d052:	4691      	mov	r9, r2
 800d054:	4680      	mov	r8, r0
 800d056:	460c      	mov	r4, r1
 800d058:	469a      	mov	sl, r3
 800d05a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d05e:	d807      	bhi.n	800d070 <_printf_i+0x28>
 800d060:	2f62      	cmp	r7, #98	@ 0x62
 800d062:	d80a      	bhi.n	800d07a <_printf_i+0x32>
 800d064:	2f00      	cmp	r7, #0
 800d066:	f000 80d2 	beq.w	800d20e <_printf_i+0x1c6>
 800d06a:	2f58      	cmp	r7, #88	@ 0x58
 800d06c:	f000 80b9 	beq.w	800d1e2 <_printf_i+0x19a>
 800d070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d074:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d078:	e03a      	b.n	800d0f0 <_printf_i+0xa8>
 800d07a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d07e:	2b15      	cmp	r3, #21
 800d080:	d8f6      	bhi.n	800d070 <_printf_i+0x28>
 800d082:	a101      	add	r1, pc, #4	@ (adr r1, 800d088 <_printf_i+0x40>)
 800d084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d088:	0800d0e1 	.word	0x0800d0e1
 800d08c:	0800d0f5 	.word	0x0800d0f5
 800d090:	0800d071 	.word	0x0800d071
 800d094:	0800d071 	.word	0x0800d071
 800d098:	0800d071 	.word	0x0800d071
 800d09c:	0800d071 	.word	0x0800d071
 800d0a0:	0800d0f5 	.word	0x0800d0f5
 800d0a4:	0800d071 	.word	0x0800d071
 800d0a8:	0800d071 	.word	0x0800d071
 800d0ac:	0800d071 	.word	0x0800d071
 800d0b0:	0800d071 	.word	0x0800d071
 800d0b4:	0800d1f5 	.word	0x0800d1f5
 800d0b8:	0800d11f 	.word	0x0800d11f
 800d0bc:	0800d1af 	.word	0x0800d1af
 800d0c0:	0800d071 	.word	0x0800d071
 800d0c4:	0800d071 	.word	0x0800d071
 800d0c8:	0800d217 	.word	0x0800d217
 800d0cc:	0800d071 	.word	0x0800d071
 800d0d0:	0800d11f 	.word	0x0800d11f
 800d0d4:	0800d071 	.word	0x0800d071
 800d0d8:	0800d071 	.word	0x0800d071
 800d0dc:	0800d1b7 	.word	0x0800d1b7
 800d0e0:	6833      	ldr	r3, [r6, #0]
 800d0e2:	1d1a      	adds	r2, r3, #4
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	6032      	str	r2, [r6, #0]
 800d0e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d0ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e09d      	b.n	800d230 <_printf_i+0x1e8>
 800d0f4:	6833      	ldr	r3, [r6, #0]
 800d0f6:	6820      	ldr	r0, [r4, #0]
 800d0f8:	1d19      	adds	r1, r3, #4
 800d0fa:	6031      	str	r1, [r6, #0]
 800d0fc:	0606      	lsls	r6, r0, #24
 800d0fe:	d501      	bpl.n	800d104 <_printf_i+0xbc>
 800d100:	681d      	ldr	r5, [r3, #0]
 800d102:	e003      	b.n	800d10c <_printf_i+0xc4>
 800d104:	0645      	lsls	r5, r0, #25
 800d106:	d5fb      	bpl.n	800d100 <_printf_i+0xb8>
 800d108:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d10c:	2d00      	cmp	r5, #0
 800d10e:	da03      	bge.n	800d118 <_printf_i+0xd0>
 800d110:	232d      	movs	r3, #45	@ 0x2d
 800d112:	426d      	negs	r5, r5
 800d114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d118:	4859      	ldr	r0, [pc, #356]	@ (800d280 <_printf_i+0x238>)
 800d11a:	230a      	movs	r3, #10
 800d11c:	e011      	b.n	800d142 <_printf_i+0xfa>
 800d11e:	6821      	ldr	r1, [r4, #0]
 800d120:	6833      	ldr	r3, [r6, #0]
 800d122:	0608      	lsls	r0, r1, #24
 800d124:	f853 5b04 	ldr.w	r5, [r3], #4
 800d128:	d402      	bmi.n	800d130 <_printf_i+0xe8>
 800d12a:	0649      	lsls	r1, r1, #25
 800d12c:	bf48      	it	mi
 800d12e:	b2ad      	uxthmi	r5, r5
 800d130:	2f6f      	cmp	r7, #111	@ 0x6f
 800d132:	4853      	ldr	r0, [pc, #332]	@ (800d280 <_printf_i+0x238>)
 800d134:	6033      	str	r3, [r6, #0]
 800d136:	bf14      	ite	ne
 800d138:	230a      	movne	r3, #10
 800d13a:	2308      	moveq	r3, #8
 800d13c:	2100      	movs	r1, #0
 800d13e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d142:	6866      	ldr	r6, [r4, #4]
 800d144:	60a6      	str	r6, [r4, #8]
 800d146:	2e00      	cmp	r6, #0
 800d148:	bfa2      	ittt	ge
 800d14a:	6821      	ldrge	r1, [r4, #0]
 800d14c:	f021 0104 	bicge.w	r1, r1, #4
 800d150:	6021      	strge	r1, [r4, #0]
 800d152:	b90d      	cbnz	r5, 800d158 <_printf_i+0x110>
 800d154:	2e00      	cmp	r6, #0
 800d156:	d04b      	beq.n	800d1f0 <_printf_i+0x1a8>
 800d158:	4616      	mov	r6, r2
 800d15a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d15e:	fb03 5711 	mls	r7, r3, r1, r5
 800d162:	5dc7      	ldrb	r7, [r0, r7]
 800d164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d168:	462f      	mov	r7, r5
 800d16a:	42bb      	cmp	r3, r7
 800d16c:	460d      	mov	r5, r1
 800d16e:	d9f4      	bls.n	800d15a <_printf_i+0x112>
 800d170:	2b08      	cmp	r3, #8
 800d172:	d10b      	bne.n	800d18c <_printf_i+0x144>
 800d174:	6823      	ldr	r3, [r4, #0]
 800d176:	07df      	lsls	r7, r3, #31
 800d178:	d508      	bpl.n	800d18c <_printf_i+0x144>
 800d17a:	6923      	ldr	r3, [r4, #16]
 800d17c:	6861      	ldr	r1, [r4, #4]
 800d17e:	4299      	cmp	r1, r3
 800d180:	bfde      	ittt	le
 800d182:	2330      	movle	r3, #48	@ 0x30
 800d184:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d188:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d18c:	1b92      	subs	r2, r2, r6
 800d18e:	6122      	str	r2, [r4, #16]
 800d190:	f8cd a000 	str.w	sl, [sp]
 800d194:	464b      	mov	r3, r9
 800d196:	aa03      	add	r2, sp, #12
 800d198:	4621      	mov	r1, r4
 800d19a:	4640      	mov	r0, r8
 800d19c:	f7ff fee6 	bl	800cf6c <_printf_common>
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	d14a      	bne.n	800d23a <_printf_i+0x1f2>
 800d1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a8:	b004      	add	sp, #16
 800d1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	f043 0320 	orr.w	r3, r3, #32
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	4833      	ldr	r0, [pc, #204]	@ (800d284 <_printf_i+0x23c>)
 800d1b8:	2778      	movs	r7, #120	@ 0x78
 800d1ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d1be:	6823      	ldr	r3, [r4, #0]
 800d1c0:	6831      	ldr	r1, [r6, #0]
 800d1c2:	061f      	lsls	r7, r3, #24
 800d1c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800d1c8:	d402      	bmi.n	800d1d0 <_printf_i+0x188>
 800d1ca:	065f      	lsls	r7, r3, #25
 800d1cc:	bf48      	it	mi
 800d1ce:	b2ad      	uxthmi	r5, r5
 800d1d0:	6031      	str	r1, [r6, #0]
 800d1d2:	07d9      	lsls	r1, r3, #31
 800d1d4:	bf44      	itt	mi
 800d1d6:	f043 0320 	orrmi.w	r3, r3, #32
 800d1da:	6023      	strmi	r3, [r4, #0]
 800d1dc:	b11d      	cbz	r5, 800d1e6 <_printf_i+0x19e>
 800d1de:	2310      	movs	r3, #16
 800d1e0:	e7ac      	b.n	800d13c <_printf_i+0xf4>
 800d1e2:	4827      	ldr	r0, [pc, #156]	@ (800d280 <_printf_i+0x238>)
 800d1e4:	e7e9      	b.n	800d1ba <_printf_i+0x172>
 800d1e6:	6823      	ldr	r3, [r4, #0]
 800d1e8:	f023 0320 	bic.w	r3, r3, #32
 800d1ec:	6023      	str	r3, [r4, #0]
 800d1ee:	e7f6      	b.n	800d1de <_printf_i+0x196>
 800d1f0:	4616      	mov	r6, r2
 800d1f2:	e7bd      	b.n	800d170 <_printf_i+0x128>
 800d1f4:	6833      	ldr	r3, [r6, #0]
 800d1f6:	6825      	ldr	r5, [r4, #0]
 800d1f8:	6961      	ldr	r1, [r4, #20]
 800d1fa:	1d18      	adds	r0, r3, #4
 800d1fc:	6030      	str	r0, [r6, #0]
 800d1fe:	062e      	lsls	r6, r5, #24
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	d501      	bpl.n	800d208 <_printf_i+0x1c0>
 800d204:	6019      	str	r1, [r3, #0]
 800d206:	e002      	b.n	800d20e <_printf_i+0x1c6>
 800d208:	0668      	lsls	r0, r5, #25
 800d20a:	d5fb      	bpl.n	800d204 <_printf_i+0x1bc>
 800d20c:	8019      	strh	r1, [r3, #0]
 800d20e:	2300      	movs	r3, #0
 800d210:	6123      	str	r3, [r4, #16]
 800d212:	4616      	mov	r6, r2
 800d214:	e7bc      	b.n	800d190 <_printf_i+0x148>
 800d216:	6833      	ldr	r3, [r6, #0]
 800d218:	1d1a      	adds	r2, r3, #4
 800d21a:	6032      	str	r2, [r6, #0]
 800d21c:	681e      	ldr	r6, [r3, #0]
 800d21e:	6862      	ldr	r2, [r4, #4]
 800d220:	2100      	movs	r1, #0
 800d222:	4630      	mov	r0, r6
 800d224:	f7f2 ffd4 	bl	80001d0 <memchr>
 800d228:	b108      	cbz	r0, 800d22e <_printf_i+0x1e6>
 800d22a:	1b80      	subs	r0, r0, r6
 800d22c:	6060      	str	r0, [r4, #4]
 800d22e:	6863      	ldr	r3, [r4, #4]
 800d230:	6123      	str	r3, [r4, #16]
 800d232:	2300      	movs	r3, #0
 800d234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d238:	e7aa      	b.n	800d190 <_printf_i+0x148>
 800d23a:	6923      	ldr	r3, [r4, #16]
 800d23c:	4632      	mov	r2, r6
 800d23e:	4649      	mov	r1, r9
 800d240:	4640      	mov	r0, r8
 800d242:	47d0      	blx	sl
 800d244:	3001      	adds	r0, #1
 800d246:	d0ad      	beq.n	800d1a4 <_printf_i+0x15c>
 800d248:	6823      	ldr	r3, [r4, #0]
 800d24a:	079b      	lsls	r3, r3, #30
 800d24c:	d413      	bmi.n	800d276 <_printf_i+0x22e>
 800d24e:	68e0      	ldr	r0, [r4, #12]
 800d250:	9b03      	ldr	r3, [sp, #12]
 800d252:	4298      	cmp	r0, r3
 800d254:	bfb8      	it	lt
 800d256:	4618      	movlt	r0, r3
 800d258:	e7a6      	b.n	800d1a8 <_printf_i+0x160>
 800d25a:	2301      	movs	r3, #1
 800d25c:	4632      	mov	r2, r6
 800d25e:	4649      	mov	r1, r9
 800d260:	4640      	mov	r0, r8
 800d262:	47d0      	blx	sl
 800d264:	3001      	adds	r0, #1
 800d266:	d09d      	beq.n	800d1a4 <_printf_i+0x15c>
 800d268:	3501      	adds	r5, #1
 800d26a:	68e3      	ldr	r3, [r4, #12]
 800d26c:	9903      	ldr	r1, [sp, #12]
 800d26e:	1a5b      	subs	r3, r3, r1
 800d270:	42ab      	cmp	r3, r5
 800d272:	dcf2      	bgt.n	800d25a <_printf_i+0x212>
 800d274:	e7eb      	b.n	800d24e <_printf_i+0x206>
 800d276:	2500      	movs	r5, #0
 800d278:	f104 0619 	add.w	r6, r4, #25
 800d27c:	e7f5      	b.n	800d26a <_printf_i+0x222>
 800d27e:	bf00      	nop
 800d280:	08011b5a 	.word	0x08011b5a
 800d284:	08011b6b 	.word	0x08011b6b

0800d288 <_scanf_float>:
 800d288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d28c:	b087      	sub	sp, #28
 800d28e:	4617      	mov	r7, r2
 800d290:	9303      	str	r3, [sp, #12]
 800d292:	688b      	ldr	r3, [r1, #8]
 800d294:	1e5a      	subs	r2, r3, #1
 800d296:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d29a:	bf81      	itttt	hi
 800d29c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d2a0:	eb03 0b05 	addhi.w	fp, r3, r5
 800d2a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d2a8:	608b      	strhi	r3, [r1, #8]
 800d2aa:	680b      	ldr	r3, [r1, #0]
 800d2ac:	460a      	mov	r2, r1
 800d2ae:	f04f 0500 	mov.w	r5, #0
 800d2b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d2b6:	f842 3b1c 	str.w	r3, [r2], #28
 800d2ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d2be:	4680      	mov	r8, r0
 800d2c0:	460c      	mov	r4, r1
 800d2c2:	bf98      	it	ls
 800d2c4:	f04f 0b00 	movls.w	fp, #0
 800d2c8:	9201      	str	r2, [sp, #4]
 800d2ca:	4616      	mov	r6, r2
 800d2cc:	46aa      	mov	sl, r5
 800d2ce:	46a9      	mov	r9, r5
 800d2d0:	9502      	str	r5, [sp, #8]
 800d2d2:	68a2      	ldr	r2, [r4, #8]
 800d2d4:	b152      	cbz	r2, 800d2ec <_scanf_float+0x64>
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	2b4e      	cmp	r3, #78	@ 0x4e
 800d2dc:	d864      	bhi.n	800d3a8 <_scanf_float+0x120>
 800d2de:	2b40      	cmp	r3, #64	@ 0x40
 800d2e0:	d83c      	bhi.n	800d35c <_scanf_float+0xd4>
 800d2e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d2e6:	b2c8      	uxtb	r0, r1
 800d2e8:	280e      	cmp	r0, #14
 800d2ea:	d93a      	bls.n	800d362 <_scanf_float+0xda>
 800d2ec:	f1b9 0f00 	cmp.w	r9, #0
 800d2f0:	d003      	beq.n	800d2fa <_scanf_float+0x72>
 800d2f2:	6823      	ldr	r3, [r4, #0]
 800d2f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d2f8:	6023      	str	r3, [r4, #0]
 800d2fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2fe:	f1ba 0f01 	cmp.w	sl, #1
 800d302:	f200 8117 	bhi.w	800d534 <_scanf_float+0x2ac>
 800d306:	9b01      	ldr	r3, [sp, #4]
 800d308:	429e      	cmp	r6, r3
 800d30a:	f200 8108 	bhi.w	800d51e <_scanf_float+0x296>
 800d30e:	2001      	movs	r0, #1
 800d310:	b007      	add	sp, #28
 800d312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d316:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d31a:	2a0d      	cmp	r2, #13
 800d31c:	d8e6      	bhi.n	800d2ec <_scanf_float+0x64>
 800d31e:	a101      	add	r1, pc, #4	@ (adr r1, 800d324 <_scanf_float+0x9c>)
 800d320:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d324:	0800d46b 	.word	0x0800d46b
 800d328:	0800d2ed 	.word	0x0800d2ed
 800d32c:	0800d2ed 	.word	0x0800d2ed
 800d330:	0800d2ed 	.word	0x0800d2ed
 800d334:	0800d4cb 	.word	0x0800d4cb
 800d338:	0800d4a3 	.word	0x0800d4a3
 800d33c:	0800d2ed 	.word	0x0800d2ed
 800d340:	0800d2ed 	.word	0x0800d2ed
 800d344:	0800d479 	.word	0x0800d479
 800d348:	0800d2ed 	.word	0x0800d2ed
 800d34c:	0800d2ed 	.word	0x0800d2ed
 800d350:	0800d2ed 	.word	0x0800d2ed
 800d354:	0800d2ed 	.word	0x0800d2ed
 800d358:	0800d431 	.word	0x0800d431
 800d35c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d360:	e7db      	b.n	800d31a <_scanf_float+0x92>
 800d362:	290e      	cmp	r1, #14
 800d364:	d8c2      	bhi.n	800d2ec <_scanf_float+0x64>
 800d366:	a001      	add	r0, pc, #4	@ (adr r0, 800d36c <_scanf_float+0xe4>)
 800d368:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d36c:	0800d421 	.word	0x0800d421
 800d370:	0800d2ed 	.word	0x0800d2ed
 800d374:	0800d421 	.word	0x0800d421
 800d378:	0800d4b7 	.word	0x0800d4b7
 800d37c:	0800d2ed 	.word	0x0800d2ed
 800d380:	0800d3c9 	.word	0x0800d3c9
 800d384:	0800d407 	.word	0x0800d407
 800d388:	0800d407 	.word	0x0800d407
 800d38c:	0800d407 	.word	0x0800d407
 800d390:	0800d407 	.word	0x0800d407
 800d394:	0800d407 	.word	0x0800d407
 800d398:	0800d407 	.word	0x0800d407
 800d39c:	0800d407 	.word	0x0800d407
 800d3a0:	0800d407 	.word	0x0800d407
 800d3a4:	0800d407 	.word	0x0800d407
 800d3a8:	2b6e      	cmp	r3, #110	@ 0x6e
 800d3aa:	d809      	bhi.n	800d3c0 <_scanf_float+0x138>
 800d3ac:	2b60      	cmp	r3, #96	@ 0x60
 800d3ae:	d8b2      	bhi.n	800d316 <_scanf_float+0x8e>
 800d3b0:	2b54      	cmp	r3, #84	@ 0x54
 800d3b2:	d07b      	beq.n	800d4ac <_scanf_float+0x224>
 800d3b4:	2b59      	cmp	r3, #89	@ 0x59
 800d3b6:	d199      	bne.n	800d2ec <_scanf_float+0x64>
 800d3b8:	2d07      	cmp	r5, #7
 800d3ba:	d197      	bne.n	800d2ec <_scanf_float+0x64>
 800d3bc:	2508      	movs	r5, #8
 800d3be:	e02c      	b.n	800d41a <_scanf_float+0x192>
 800d3c0:	2b74      	cmp	r3, #116	@ 0x74
 800d3c2:	d073      	beq.n	800d4ac <_scanf_float+0x224>
 800d3c4:	2b79      	cmp	r3, #121	@ 0x79
 800d3c6:	e7f6      	b.n	800d3b6 <_scanf_float+0x12e>
 800d3c8:	6821      	ldr	r1, [r4, #0]
 800d3ca:	05c8      	lsls	r0, r1, #23
 800d3cc:	d51b      	bpl.n	800d406 <_scanf_float+0x17e>
 800d3ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d3d2:	6021      	str	r1, [r4, #0]
 800d3d4:	f109 0901 	add.w	r9, r9, #1
 800d3d8:	f1bb 0f00 	cmp.w	fp, #0
 800d3dc:	d003      	beq.n	800d3e6 <_scanf_float+0x15e>
 800d3de:	3201      	adds	r2, #1
 800d3e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d3e4:	60a2      	str	r2, [r4, #8]
 800d3e6:	68a3      	ldr	r3, [r4, #8]
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	60a3      	str	r3, [r4, #8]
 800d3ec:	6923      	ldr	r3, [r4, #16]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	6123      	str	r3, [r4, #16]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	607b      	str	r3, [r7, #4]
 800d3fa:	f340 8087 	ble.w	800d50c <_scanf_float+0x284>
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	3301      	adds	r3, #1
 800d402:	603b      	str	r3, [r7, #0]
 800d404:	e765      	b.n	800d2d2 <_scanf_float+0x4a>
 800d406:	eb1a 0105 	adds.w	r1, sl, r5
 800d40a:	f47f af6f 	bne.w	800d2ec <_scanf_float+0x64>
 800d40e:	6822      	ldr	r2, [r4, #0]
 800d410:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d414:	6022      	str	r2, [r4, #0]
 800d416:	460d      	mov	r5, r1
 800d418:	468a      	mov	sl, r1
 800d41a:	f806 3b01 	strb.w	r3, [r6], #1
 800d41e:	e7e2      	b.n	800d3e6 <_scanf_float+0x15e>
 800d420:	6822      	ldr	r2, [r4, #0]
 800d422:	0610      	lsls	r0, r2, #24
 800d424:	f57f af62 	bpl.w	800d2ec <_scanf_float+0x64>
 800d428:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d42c:	6022      	str	r2, [r4, #0]
 800d42e:	e7f4      	b.n	800d41a <_scanf_float+0x192>
 800d430:	f1ba 0f00 	cmp.w	sl, #0
 800d434:	d10e      	bne.n	800d454 <_scanf_float+0x1cc>
 800d436:	f1b9 0f00 	cmp.w	r9, #0
 800d43a:	d10e      	bne.n	800d45a <_scanf_float+0x1d2>
 800d43c:	6822      	ldr	r2, [r4, #0]
 800d43e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d442:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d446:	d108      	bne.n	800d45a <_scanf_float+0x1d2>
 800d448:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d44c:	6022      	str	r2, [r4, #0]
 800d44e:	f04f 0a01 	mov.w	sl, #1
 800d452:	e7e2      	b.n	800d41a <_scanf_float+0x192>
 800d454:	f1ba 0f02 	cmp.w	sl, #2
 800d458:	d055      	beq.n	800d506 <_scanf_float+0x27e>
 800d45a:	2d01      	cmp	r5, #1
 800d45c:	d002      	beq.n	800d464 <_scanf_float+0x1dc>
 800d45e:	2d04      	cmp	r5, #4
 800d460:	f47f af44 	bne.w	800d2ec <_scanf_float+0x64>
 800d464:	3501      	adds	r5, #1
 800d466:	b2ed      	uxtb	r5, r5
 800d468:	e7d7      	b.n	800d41a <_scanf_float+0x192>
 800d46a:	f1ba 0f01 	cmp.w	sl, #1
 800d46e:	f47f af3d 	bne.w	800d2ec <_scanf_float+0x64>
 800d472:	f04f 0a02 	mov.w	sl, #2
 800d476:	e7d0      	b.n	800d41a <_scanf_float+0x192>
 800d478:	b97d      	cbnz	r5, 800d49a <_scanf_float+0x212>
 800d47a:	f1b9 0f00 	cmp.w	r9, #0
 800d47e:	f47f af38 	bne.w	800d2f2 <_scanf_float+0x6a>
 800d482:	6822      	ldr	r2, [r4, #0]
 800d484:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d488:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d48c:	f040 8108 	bne.w	800d6a0 <_scanf_float+0x418>
 800d490:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d494:	6022      	str	r2, [r4, #0]
 800d496:	2501      	movs	r5, #1
 800d498:	e7bf      	b.n	800d41a <_scanf_float+0x192>
 800d49a:	2d03      	cmp	r5, #3
 800d49c:	d0e2      	beq.n	800d464 <_scanf_float+0x1dc>
 800d49e:	2d05      	cmp	r5, #5
 800d4a0:	e7de      	b.n	800d460 <_scanf_float+0x1d8>
 800d4a2:	2d02      	cmp	r5, #2
 800d4a4:	f47f af22 	bne.w	800d2ec <_scanf_float+0x64>
 800d4a8:	2503      	movs	r5, #3
 800d4aa:	e7b6      	b.n	800d41a <_scanf_float+0x192>
 800d4ac:	2d06      	cmp	r5, #6
 800d4ae:	f47f af1d 	bne.w	800d2ec <_scanf_float+0x64>
 800d4b2:	2507      	movs	r5, #7
 800d4b4:	e7b1      	b.n	800d41a <_scanf_float+0x192>
 800d4b6:	6822      	ldr	r2, [r4, #0]
 800d4b8:	0591      	lsls	r1, r2, #22
 800d4ba:	f57f af17 	bpl.w	800d2ec <_scanf_float+0x64>
 800d4be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d4c2:	6022      	str	r2, [r4, #0]
 800d4c4:	f8cd 9008 	str.w	r9, [sp, #8]
 800d4c8:	e7a7      	b.n	800d41a <_scanf_float+0x192>
 800d4ca:	6822      	ldr	r2, [r4, #0]
 800d4cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d4d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d4d4:	d006      	beq.n	800d4e4 <_scanf_float+0x25c>
 800d4d6:	0550      	lsls	r0, r2, #21
 800d4d8:	f57f af08 	bpl.w	800d2ec <_scanf_float+0x64>
 800d4dc:	f1b9 0f00 	cmp.w	r9, #0
 800d4e0:	f000 80de 	beq.w	800d6a0 <_scanf_float+0x418>
 800d4e4:	0591      	lsls	r1, r2, #22
 800d4e6:	bf58      	it	pl
 800d4e8:	9902      	ldrpl	r1, [sp, #8]
 800d4ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d4ee:	bf58      	it	pl
 800d4f0:	eba9 0101 	subpl.w	r1, r9, r1
 800d4f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d4f8:	bf58      	it	pl
 800d4fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d4fe:	6022      	str	r2, [r4, #0]
 800d500:	f04f 0900 	mov.w	r9, #0
 800d504:	e789      	b.n	800d41a <_scanf_float+0x192>
 800d506:	f04f 0a03 	mov.w	sl, #3
 800d50a:	e786      	b.n	800d41a <_scanf_float+0x192>
 800d50c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d510:	4639      	mov	r1, r7
 800d512:	4640      	mov	r0, r8
 800d514:	4798      	blx	r3
 800d516:	2800      	cmp	r0, #0
 800d518:	f43f aedb 	beq.w	800d2d2 <_scanf_float+0x4a>
 800d51c:	e6e6      	b.n	800d2ec <_scanf_float+0x64>
 800d51e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d522:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d526:	463a      	mov	r2, r7
 800d528:	4640      	mov	r0, r8
 800d52a:	4798      	blx	r3
 800d52c:	6923      	ldr	r3, [r4, #16]
 800d52e:	3b01      	subs	r3, #1
 800d530:	6123      	str	r3, [r4, #16]
 800d532:	e6e8      	b.n	800d306 <_scanf_float+0x7e>
 800d534:	1e6b      	subs	r3, r5, #1
 800d536:	2b06      	cmp	r3, #6
 800d538:	d824      	bhi.n	800d584 <_scanf_float+0x2fc>
 800d53a:	2d02      	cmp	r5, #2
 800d53c:	d836      	bhi.n	800d5ac <_scanf_float+0x324>
 800d53e:	9b01      	ldr	r3, [sp, #4]
 800d540:	429e      	cmp	r6, r3
 800d542:	f67f aee4 	bls.w	800d30e <_scanf_float+0x86>
 800d546:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d54a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d54e:	463a      	mov	r2, r7
 800d550:	4640      	mov	r0, r8
 800d552:	4798      	blx	r3
 800d554:	6923      	ldr	r3, [r4, #16]
 800d556:	3b01      	subs	r3, #1
 800d558:	6123      	str	r3, [r4, #16]
 800d55a:	e7f0      	b.n	800d53e <_scanf_float+0x2b6>
 800d55c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d560:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d564:	463a      	mov	r2, r7
 800d566:	4640      	mov	r0, r8
 800d568:	4798      	blx	r3
 800d56a:	6923      	ldr	r3, [r4, #16]
 800d56c:	3b01      	subs	r3, #1
 800d56e:	6123      	str	r3, [r4, #16]
 800d570:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d574:	fa5f fa8a 	uxtb.w	sl, sl
 800d578:	f1ba 0f02 	cmp.w	sl, #2
 800d57c:	d1ee      	bne.n	800d55c <_scanf_float+0x2d4>
 800d57e:	3d03      	subs	r5, #3
 800d580:	b2ed      	uxtb	r5, r5
 800d582:	1b76      	subs	r6, r6, r5
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	05da      	lsls	r2, r3, #23
 800d588:	d530      	bpl.n	800d5ec <_scanf_float+0x364>
 800d58a:	055b      	lsls	r3, r3, #21
 800d58c:	d511      	bpl.n	800d5b2 <_scanf_float+0x32a>
 800d58e:	9b01      	ldr	r3, [sp, #4]
 800d590:	429e      	cmp	r6, r3
 800d592:	f67f aebc 	bls.w	800d30e <_scanf_float+0x86>
 800d596:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d59a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d59e:	463a      	mov	r2, r7
 800d5a0:	4640      	mov	r0, r8
 800d5a2:	4798      	blx	r3
 800d5a4:	6923      	ldr	r3, [r4, #16]
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	6123      	str	r3, [r4, #16]
 800d5aa:	e7f0      	b.n	800d58e <_scanf_float+0x306>
 800d5ac:	46aa      	mov	sl, r5
 800d5ae:	46b3      	mov	fp, r6
 800d5b0:	e7de      	b.n	800d570 <_scanf_float+0x2e8>
 800d5b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d5b6:	6923      	ldr	r3, [r4, #16]
 800d5b8:	2965      	cmp	r1, #101	@ 0x65
 800d5ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800d5be:	f106 35ff 	add.w	r5, r6, #4294967295
 800d5c2:	6123      	str	r3, [r4, #16]
 800d5c4:	d00c      	beq.n	800d5e0 <_scanf_float+0x358>
 800d5c6:	2945      	cmp	r1, #69	@ 0x45
 800d5c8:	d00a      	beq.n	800d5e0 <_scanf_float+0x358>
 800d5ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d5ce:	463a      	mov	r2, r7
 800d5d0:	4640      	mov	r0, r8
 800d5d2:	4798      	blx	r3
 800d5d4:	6923      	ldr	r3, [r4, #16]
 800d5d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	1eb5      	subs	r5, r6, #2
 800d5de:	6123      	str	r3, [r4, #16]
 800d5e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d5e4:	463a      	mov	r2, r7
 800d5e6:	4640      	mov	r0, r8
 800d5e8:	4798      	blx	r3
 800d5ea:	462e      	mov	r6, r5
 800d5ec:	6822      	ldr	r2, [r4, #0]
 800d5ee:	f012 0210 	ands.w	r2, r2, #16
 800d5f2:	d001      	beq.n	800d5f8 <_scanf_float+0x370>
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	e68b      	b.n	800d310 <_scanf_float+0x88>
 800d5f8:	7032      	strb	r2, [r6, #0]
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d604:	d11c      	bne.n	800d640 <_scanf_float+0x3b8>
 800d606:	9b02      	ldr	r3, [sp, #8]
 800d608:	454b      	cmp	r3, r9
 800d60a:	eba3 0209 	sub.w	r2, r3, r9
 800d60e:	d123      	bne.n	800d658 <_scanf_float+0x3d0>
 800d610:	9901      	ldr	r1, [sp, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	4640      	mov	r0, r8
 800d616:	f002 fdcf 	bl	80101b8 <_strtod_r>
 800d61a:	9b03      	ldr	r3, [sp, #12]
 800d61c:	6821      	ldr	r1, [r4, #0]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f011 0f02 	tst.w	r1, #2
 800d624:	ec57 6b10 	vmov	r6, r7, d0
 800d628:	f103 0204 	add.w	r2, r3, #4
 800d62c:	d01f      	beq.n	800d66e <_scanf_float+0x3e6>
 800d62e:	9903      	ldr	r1, [sp, #12]
 800d630:	600a      	str	r2, [r1, #0]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	e9c3 6700 	strd	r6, r7, [r3]
 800d638:	68e3      	ldr	r3, [r4, #12]
 800d63a:	3301      	adds	r3, #1
 800d63c:	60e3      	str	r3, [r4, #12]
 800d63e:	e7d9      	b.n	800d5f4 <_scanf_float+0x36c>
 800d640:	9b04      	ldr	r3, [sp, #16]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d0e4      	beq.n	800d610 <_scanf_float+0x388>
 800d646:	9905      	ldr	r1, [sp, #20]
 800d648:	230a      	movs	r3, #10
 800d64a:	3101      	adds	r1, #1
 800d64c:	4640      	mov	r0, r8
 800d64e:	f002 fe33 	bl	80102b8 <_strtol_r>
 800d652:	9b04      	ldr	r3, [sp, #16]
 800d654:	9e05      	ldr	r6, [sp, #20]
 800d656:	1ac2      	subs	r2, r0, r3
 800d658:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d65c:	429e      	cmp	r6, r3
 800d65e:	bf28      	it	cs
 800d660:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d664:	4910      	ldr	r1, [pc, #64]	@ (800d6a8 <_scanf_float+0x420>)
 800d666:	4630      	mov	r0, r6
 800d668:	f000 f954 	bl	800d914 <siprintf>
 800d66c:	e7d0      	b.n	800d610 <_scanf_float+0x388>
 800d66e:	f011 0f04 	tst.w	r1, #4
 800d672:	9903      	ldr	r1, [sp, #12]
 800d674:	600a      	str	r2, [r1, #0]
 800d676:	d1dc      	bne.n	800d632 <_scanf_float+0x3aa>
 800d678:	681d      	ldr	r5, [r3, #0]
 800d67a:	4632      	mov	r2, r6
 800d67c:	463b      	mov	r3, r7
 800d67e:	4630      	mov	r0, r6
 800d680:	4639      	mov	r1, r7
 800d682:	f7f3 fa53 	bl	8000b2c <__aeabi_dcmpun>
 800d686:	b128      	cbz	r0, 800d694 <_scanf_float+0x40c>
 800d688:	4808      	ldr	r0, [pc, #32]	@ (800d6ac <_scanf_float+0x424>)
 800d68a:	f000 fb71 	bl	800dd70 <nanf>
 800d68e:	ed85 0a00 	vstr	s0, [r5]
 800d692:	e7d1      	b.n	800d638 <_scanf_float+0x3b0>
 800d694:	4630      	mov	r0, r6
 800d696:	4639      	mov	r1, r7
 800d698:	f7f3 faa6 	bl	8000be8 <__aeabi_d2f>
 800d69c:	6028      	str	r0, [r5, #0]
 800d69e:	e7cb      	b.n	800d638 <_scanf_float+0x3b0>
 800d6a0:	f04f 0900 	mov.w	r9, #0
 800d6a4:	e629      	b.n	800d2fa <_scanf_float+0x72>
 800d6a6:	bf00      	nop
 800d6a8:	08011b7c 	.word	0x08011b7c
 800d6ac:	08011c2d 	.word	0x08011c2d

0800d6b0 <std>:
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	b510      	push	{r4, lr}
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	e9c0 3300 	strd	r3, r3, [r0]
 800d6ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d6be:	6083      	str	r3, [r0, #8]
 800d6c0:	8181      	strh	r1, [r0, #12]
 800d6c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d6c4:	81c2      	strh	r2, [r0, #14]
 800d6c6:	6183      	str	r3, [r0, #24]
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	2208      	movs	r2, #8
 800d6cc:	305c      	adds	r0, #92	@ 0x5c
 800d6ce:	f000 fa29 	bl	800db24 <memset>
 800d6d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d708 <std+0x58>)
 800d6d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d6d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d70c <std+0x5c>)
 800d6d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d6da:	4b0d      	ldr	r3, [pc, #52]	@ (800d710 <std+0x60>)
 800d6dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d6de:	4b0d      	ldr	r3, [pc, #52]	@ (800d714 <std+0x64>)
 800d6e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d718 <std+0x68>)
 800d6e4:	6224      	str	r4, [r4, #32]
 800d6e6:	429c      	cmp	r4, r3
 800d6e8:	d006      	beq.n	800d6f8 <std+0x48>
 800d6ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d6ee:	4294      	cmp	r4, r2
 800d6f0:	d002      	beq.n	800d6f8 <std+0x48>
 800d6f2:	33d0      	adds	r3, #208	@ 0xd0
 800d6f4:	429c      	cmp	r4, r3
 800d6f6:	d105      	bne.n	800d704 <std+0x54>
 800d6f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d700:	f000 bb24 	b.w	800dd4c <__retarget_lock_init_recursive>
 800d704:	bd10      	pop	{r4, pc}
 800d706:	bf00      	nop
 800d708:	0800d955 	.word	0x0800d955
 800d70c:	0800d977 	.word	0x0800d977
 800d710:	0800d9af 	.word	0x0800d9af
 800d714:	0800d9d3 	.word	0x0800d9d3
 800d718:	2000300c 	.word	0x2000300c

0800d71c <stdio_exit_handler>:
 800d71c:	4a02      	ldr	r2, [pc, #8]	@ (800d728 <stdio_exit_handler+0xc>)
 800d71e:	4903      	ldr	r1, [pc, #12]	@ (800d72c <stdio_exit_handler+0x10>)
 800d720:	4803      	ldr	r0, [pc, #12]	@ (800d730 <stdio_exit_handler+0x14>)
 800d722:	f000 b869 	b.w	800d7f8 <_fwalk_sglue>
 800d726:	bf00      	nop
 800d728:	20000050 	.word	0x20000050
 800d72c:	080108f9 	.word	0x080108f9
 800d730:	20000060 	.word	0x20000060

0800d734 <cleanup_stdio>:
 800d734:	6841      	ldr	r1, [r0, #4]
 800d736:	4b0c      	ldr	r3, [pc, #48]	@ (800d768 <cleanup_stdio+0x34>)
 800d738:	4299      	cmp	r1, r3
 800d73a:	b510      	push	{r4, lr}
 800d73c:	4604      	mov	r4, r0
 800d73e:	d001      	beq.n	800d744 <cleanup_stdio+0x10>
 800d740:	f003 f8da 	bl	80108f8 <_fflush_r>
 800d744:	68a1      	ldr	r1, [r4, #8]
 800d746:	4b09      	ldr	r3, [pc, #36]	@ (800d76c <cleanup_stdio+0x38>)
 800d748:	4299      	cmp	r1, r3
 800d74a:	d002      	beq.n	800d752 <cleanup_stdio+0x1e>
 800d74c:	4620      	mov	r0, r4
 800d74e:	f003 f8d3 	bl	80108f8 <_fflush_r>
 800d752:	68e1      	ldr	r1, [r4, #12]
 800d754:	4b06      	ldr	r3, [pc, #24]	@ (800d770 <cleanup_stdio+0x3c>)
 800d756:	4299      	cmp	r1, r3
 800d758:	d004      	beq.n	800d764 <cleanup_stdio+0x30>
 800d75a:	4620      	mov	r0, r4
 800d75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d760:	f003 b8ca 	b.w	80108f8 <_fflush_r>
 800d764:	bd10      	pop	{r4, pc}
 800d766:	bf00      	nop
 800d768:	2000300c 	.word	0x2000300c
 800d76c:	20003074 	.word	0x20003074
 800d770:	200030dc 	.word	0x200030dc

0800d774 <global_stdio_init.part.0>:
 800d774:	b510      	push	{r4, lr}
 800d776:	4b0b      	ldr	r3, [pc, #44]	@ (800d7a4 <global_stdio_init.part.0+0x30>)
 800d778:	4c0b      	ldr	r4, [pc, #44]	@ (800d7a8 <global_stdio_init.part.0+0x34>)
 800d77a:	4a0c      	ldr	r2, [pc, #48]	@ (800d7ac <global_stdio_init.part.0+0x38>)
 800d77c:	601a      	str	r2, [r3, #0]
 800d77e:	4620      	mov	r0, r4
 800d780:	2200      	movs	r2, #0
 800d782:	2104      	movs	r1, #4
 800d784:	f7ff ff94 	bl	800d6b0 <std>
 800d788:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d78c:	2201      	movs	r2, #1
 800d78e:	2109      	movs	r1, #9
 800d790:	f7ff ff8e 	bl	800d6b0 <std>
 800d794:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d798:	2202      	movs	r2, #2
 800d79a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d79e:	2112      	movs	r1, #18
 800d7a0:	f7ff bf86 	b.w	800d6b0 <std>
 800d7a4:	20003144 	.word	0x20003144
 800d7a8:	2000300c 	.word	0x2000300c
 800d7ac:	0800d71d 	.word	0x0800d71d

0800d7b0 <__sfp_lock_acquire>:
 800d7b0:	4801      	ldr	r0, [pc, #4]	@ (800d7b8 <__sfp_lock_acquire+0x8>)
 800d7b2:	f000 bacc 	b.w	800dd4e <__retarget_lock_acquire_recursive>
 800d7b6:	bf00      	nop
 800d7b8:	2000314d 	.word	0x2000314d

0800d7bc <__sfp_lock_release>:
 800d7bc:	4801      	ldr	r0, [pc, #4]	@ (800d7c4 <__sfp_lock_release+0x8>)
 800d7be:	f000 bac7 	b.w	800dd50 <__retarget_lock_release_recursive>
 800d7c2:	bf00      	nop
 800d7c4:	2000314d 	.word	0x2000314d

0800d7c8 <__sinit>:
 800d7c8:	b510      	push	{r4, lr}
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	f7ff fff0 	bl	800d7b0 <__sfp_lock_acquire>
 800d7d0:	6a23      	ldr	r3, [r4, #32]
 800d7d2:	b11b      	cbz	r3, 800d7dc <__sinit+0x14>
 800d7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7d8:	f7ff bff0 	b.w	800d7bc <__sfp_lock_release>
 800d7dc:	4b04      	ldr	r3, [pc, #16]	@ (800d7f0 <__sinit+0x28>)
 800d7de:	6223      	str	r3, [r4, #32]
 800d7e0:	4b04      	ldr	r3, [pc, #16]	@ (800d7f4 <__sinit+0x2c>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d1f5      	bne.n	800d7d4 <__sinit+0xc>
 800d7e8:	f7ff ffc4 	bl	800d774 <global_stdio_init.part.0>
 800d7ec:	e7f2      	b.n	800d7d4 <__sinit+0xc>
 800d7ee:	bf00      	nop
 800d7f0:	0800d735 	.word	0x0800d735
 800d7f4:	20003144 	.word	0x20003144

0800d7f8 <_fwalk_sglue>:
 800d7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7fc:	4607      	mov	r7, r0
 800d7fe:	4688      	mov	r8, r1
 800d800:	4614      	mov	r4, r2
 800d802:	2600      	movs	r6, #0
 800d804:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d808:	f1b9 0901 	subs.w	r9, r9, #1
 800d80c:	d505      	bpl.n	800d81a <_fwalk_sglue+0x22>
 800d80e:	6824      	ldr	r4, [r4, #0]
 800d810:	2c00      	cmp	r4, #0
 800d812:	d1f7      	bne.n	800d804 <_fwalk_sglue+0xc>
 800d814:	4630      	mov	r0, r6
 800d816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d81a:	89ab      	ldrh	r3, [r5, #12]
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d907      	bls.n	800d830 <_fwalk_sglue+0x38>
 800d820:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d824:	3301      	adds	r3, #1
 800d826:	d003      	beq.n	800d830 <_fwalk_sglue+0x38>
 800d828:	4629      	mov	r1, r5
 800d82a:	4638      	mov	r0, r7
 800d82c:	47c0      	blx	r8
 800d82e:	4306      	orrs	r6, r0
 800d830:	3568      	adds	r5, #104	@ 0x68
 800d832:	e7e9      	b.n	800d808 <_fwalk_sglue+0x10>

0800d834 <iprintf>:
 800d834:	b40f      	push	{r0, r1, r2, r3}
 800d836:	b507      	push	{r0, r1, r2, lr}
 800d838:	4906      	ldr	r1, [pc, #24]	@ (800d854 <iprintf+0x20>)
 800d83a:	ab04      	add	r3, sp, #16
 800d83c:	6808      	ldr	r0, [r1, #0]
 800d83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d842:	6881      	ldr	r1, [r0, #8]
 800d844:	9301      	str	r3, [sp, #4]
 800d846:	f002 febb 	bl	80105c0 <_vfiprintf_r>
 800d84a:	b003      	add	sp, #12
 800d84c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d850:	b004      	add	sp, #16
 800d852:	4770      	bx	lr
 800d854:	2000005c 	.word	0x2000005c

0800d858 <_puts_r>:
 800d858:	6a03      	ldr	r3, [r0, #32]
 800d85a:	b570      	push	{r4, r5, r6, lr}
 800d85c:	6884      	ldr	r4, [r0, #8]
 800d85e:	4605      	mov	r5, r0
 800d860:	460e      	mov	r6, r1
 800d862:	b90b      	cbnz	r3, 800d868 <_puts_r+0x10>
 800d864:	f7ff ffb0 	bl	800d7c8 <__sinit>
 800d868:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d86a:	07db      	lsls	r3, r3, #31
 800d86c:	d405      	bmi.n	800d87a <_puts_r+0x22>
 800d86e:	89a3      	ldrh	r3, [r4, #12]
 800d870:	0598      	lsls	r0, r3, #22
 800d872:	d402      	bmi.n	800d87a <_puts_r+0x22>
 800d874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d876:	f000 fa6a 	bl	800dd4e <__retarget_lock_acquire_recursive>
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	0719      	lsls	r1, r3, #28
 800d87e:	d502      	bpl.n	800d886 <_puts_r+0x2e>
 800d880:	6923      	ldr	r3, [r4, #16]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d135      	bne.n	800d8f2 <_puts_r+0x9a>
 800d886:	4621      	mov	r1, r4
 800d888:	4628      	mov	r0, r5
 800d88a:	f000 f8e5 	bl	800da58 <__swsetup_r>
 800d88e:	b380      	cbz	r0, 800d8f2 <_puts_r+0x9a>
 800d890:	f04f 35ff 	mov.w	r5, #4294967295
 800d894:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d896:	07da      	lsls	r2, r3, #31
 800d898:	d405      	bmi.n	800d8a6 <_puts_r+0x4e>
 800d89a:	89a3      	ldrh	r3, [r4, #12]
 800d89c:	059b      	lsls	r3, r3, #22
 800d89e:	d402      	bmi.n	800d8a6 <_puts_r+0x4e>
 800d8a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8a2:	f000 fa55 	bl	800dd50 <__retarget_lock_release_recursive>
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	bd70      	pop	{r4, r5, r6, pc}
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	da04      	bge.n	800d8b8 <_puts_r+0x60>
 800d8ae:	69a2      	ldr	r2, [r4, #24]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	dc17      	bgt.n	800d8e4 <_puts_r+0x8c>
 800d8b4:	290a      	cmp	r1, #10
 800d8b6:	d015      	beq.n	800d8e4 <_puts_r+0x8c>
 800d8b8:	6823      	ldr	r3, [r4, #0]
 800d8ba:	1c5a      	adds	r2, r3, #1
 800d8bc:	6022      	str	r2, [r4, #0]
 800d8be:	7019      	strb	r1, [r3, #0]
 800d8c0:	68a3      	ldr	r3, [r4, #8]
 800d8c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	60a3      	str	r3, [r4, #8]
 800d8ca:	2900      	cmp	r1, #0
 800d8cc:	d1ed      	bne.n	800d8aa <_puts_r+0x52>
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	da11      	bge.n	800d8f6 <_puts_r+0x9e>
 800d8d2:	4622      	mov	r2, r4
 800d8d4:	210a      	movs	r1, #10
 800d8d6:	4628      	mov	r0, r5
 800d8d8:	f000 f87f 	bl	800d9da <__swbuf_r>
 800d8dc:	3001      	adds	r0, #1
 800d8de:	d0d7      	beq.n	800d890 <_puts_r+0x38>
 800d8e0:	250a      	movs	r5, #10
 800d8e2:	e7d7      	b.n	800d894 <_puts_r+0x3c>
 800d8e4:	4622      	mov	r2, r4
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f000 f877 	bl	800d9da <__swbuf_r>
 800d8ec:	3001      	adds	r0, #1
 800d8ee:	d1e7      	bne.n	800d8c0 <_puts_r+0x68>
 800d8f0:	e7ce      	b.n	800d890 <_puts_r+0x38>
 800d8f2:	3e01      	subs	r6, #1
 800d8f4:	e7e4      	b.n	800d8c0 <_puts_r+0x68>
 800d8f6:	6823      	ldr	r3, [r4, #0]
 800d8f8:	1c5a      	adds	r2, r3, #1
 800d8fa:	6022      	str	r2, [r4, #0]
 800d8fc:	220a      	movs	r2, #10
 800d8fe:	701a      	strb	r2, [r3, #0]
 800d900:	e7ee      	b.n	800d8e0 <_puts_r+0x88>
	...

0800d904 <puts>:
 800d904:	4b02      	ldr	r3, [pc, #8]	@ (800d910 <puts+0xc>)
 800d906:	4601      	mov	r1, r0
 800d908:	6818      	ldr	r0, [r3, #0]
 800d90a:	f7ff bfa5 	b.w	800d858 <_puts_r>
 800d90e:	bf00      	nop
 800d910:	2000005c 	.word	0x2000005c

0800d914 <siprintf>:
 800d914:	b40e      	push	{r1, r2, r3}
 800d916:	b500      	push	{lr}
 800d918:	b09c      	sub	sp, #112	@ 0x70
 800d91a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d91c:	9002      	str	r0, [sp, #8]
 800d91e:	9006      	str	r0, [sp, #24]
 800d920:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d924:	4809      	ldr	r0, [pc, #36]	@ (800d94c <siprintf+0x38>)
 800d926:	9107      	str	r1, [sp, #28]
 800d928:	9104      	str	r1, [sp, #16]
 800d92a:	4909      	ldr	r1, [pc, #36]	@ (800d950 <siprintf+0x3c>)
 800d92c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d930:	9105      	str	r1, [sp, #20]
 800d932:	6800      	ldr	r0, [r0, #0]
 800d934:	9301      	str	r3, [sp, #4]
 800d936:	a902      	add	r1, sp, #8
 800d938:	f002 fd1c 	bl	8010374 <_svfiprintf_r>
 800d93c:	9b02      	ldr	r3, [sp, #8]
 800d93e:	2200      	movs	r2, #0
 800d940:	701a      	strb	r2, [r3, #0]
 800d942:	b01c      	add	sp, #112	@ 0x70
 800d944:	f85d eb04 	ldr.w	lr, [sp], #4
 800d948:	b003      	add	sp, #12
 800d94a:	4770      	bx	lr
 800d94c:	2000005c 	.word	0x2000005c
 800d950:	ffff0208 	.word	0xffff0208

0800d954 <__sread>:
 800d954:	b510      	push	{r4, lr}
 800d956:	460c      	mov	r4, r1
 800d958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d95c:	f000 f9a8 	bl	800dcb0 <_read_r>
 800d960:	2800      	cmp	r0, #0
 800d962:	bfab      	itete	ge
 800d964:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d966:	89a3      	ldrhlt	r3, [r4, #12]
 800d968:	181b      	addge	r3, r3, r0
 800d96a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d96e:	bfac      	ite	ge
 800d970:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d972:	81a3      	strhlt	r3, [r4, #12]
 800d974:	bd10      	pop	{r4, pc}

0800d976 <__swrite>:
 800d976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d97a:	461f      	mov	r7, r3
 800d97c:	898b      	ldrh	r3, [r1, #12]
 800d97e:	05db      	lsls	r3, r3, #23
 800d980:	4605      	mov	r5, r0
 800d982:	460c      	mov	r4, r1
 800d984:	4616      	mov	r6, r2
 800d986:	d505      	bpl.n	800d994 <__swrite+0x1e>
 800d988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d98c:	2302      	movs	r3, #2
 800d98e:	2200      	movs	r2, #0
 800d990:	f000 f97c 	bl	800dc8c <_lseek_r>
 800d994:	89a3      	ldrh	r3, [r4, #12]
 800d996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d99a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d99e:	81a3      	strh	r3, [r4, #12]
 800d9a0:	4632      	mov	r2, r6
 800d9a2:	463b      	mov	r3, r7
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9aa:	f000 b993 	b.w	800dcd4 <_write_r>

0800d9ae <__sseek>:
 800d9ae:	b510      	push	{r4, lr}
 800d9b0:	460c      	mov	r4, r1
 800d9b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9b6:	f000 f969 	bl	800dc8c <_lseek_r>
 800d9ba:	1c43      	adds	r3, r0, #1
 800d9bc:	89a3      	ldrh	r3, [r4, #12]
 800d9be:	bf15      	itete	ne
 800d9c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d9c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d9c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d9ca:	81a3      	strheq	r3, [r4, #12]
 800d9cc:	bf18      	it	ne
 800d9ce:	81a3      	strhne	r3, [r4, #12]
 800d9d0:	bd10      	pop	{r4, pc}

0800d9d2 <__sclose>:
 800d9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d6:	f000 b949 	b.w	800dc6c <_close_r>

0800d9da <__swbuf_r>:
 800d9da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9dc:	460e      	mov	r6, r1
 800d9de:	4614      	mov	r4, r2
 800d9e0:	4605      	mov	r5, r0
 800d9e2:	b118      	cbz	r0, 800d9ec <__swbuf_r+0x12>
 800d9e4:	6a03      	ldr	r3, [r0, #32]
 800d9e6:	b90b      	cbnz	r3, 800d9ec <__swbuf_r+0x12>
 800d9e8:	f7ff feee 	bl	800d7c8 <__sinit>
 800d9ec:	69a3      	ldr	r3, [r4, #24]
 800d9ee:	60a3      	str	r3, [r4, #8]
 800d9f0:	89a3      	ldrh	r3, [r4, #12]
 800d9f2:	071a      	lsls	r2, r3, #28
 800d9f4:	d501      	bpl.n	800d9fa <__swbuf_r+0x20>
 800d9f6:	6923      	ldr	r3, [r4, #16]
 800d9f8:	b943      	cbnz	r3, 800da0c <__swbuf_r+0x32>
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	f000 f82b 	bl	800da58 <__swsetup_r>
 800da02:	b118      	cbz	r0, 800da0c <__swbuf_r+0x32>
 800da04:	f04f 37ff 	mov.w	r7, #4294967295
 800da08:	4638      	mov	r0, r7
 800da0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da0c:	6823      	ldr	r3, [r4, #0]
 800da0e:	6922      	ldr	r2, [r4, #16]
 800da10:	1a98      	subs	r0, r3, r2
 800da12:	6963      	ldr	r3, [r4, #20]
 800da14:	b2f6      	uxtb	r6, r6
 800da16:	4283      	cmp	r3, r0
 800da18:	4637      	mov	r7, r6
 800da1a:	dc05      	bgt.n	800da28 <__swbuf_r+0x4e>
 800da1c:	4621      	mov	r1, r4
 800da1e:	4628      	mov	r0, r5
 800da20:	f002 ff6a 	bl	80108f8 <_fflush_r>
 800da24:	2800      	cmp	r0, #0
 800da26:	d1ed      	bne.n	800da04 <__swbuf_r+0x2a>
 800da28:	68a3      	ldr	r3, [r4, #8]
 800da2a:	3b01      	subs	r3, #1
 800da2c:	60a3      	str	r3, [r4, #8]
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	1c5a      	adds	r2, r3, #1
 800da32:	6022      	str	r2, [r4, #0]
 800da34:	701e      	strb	r6, [r3, #0]
 800da36:	6962      	ldr	r2, [r4, #20]
 800da38:	1c43      	adds	r3, r0, #1
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d004      	beq.n	800da48 <__swbuf_r+0x6e>
 800da3e:	89a3      	ldrh	r3, [r4, #12]
 800da40:	07db      	lsls	r3, r3, #31
 800da42:	d5e1      	bpl.n	800da08 <__swbuf_r+0x2e>
 800da44:	2e0a      	cmp	r6, #10
 800da46:	d1df      	bne.n	800da08 <__swbuf_r+0x2e>
 800da48:	4621      	mov	r1, r4
 800da4a:	4628      	mov	r0, r5
 800da4c:	f002 ff54 	bl	80108f8 <_fflush_r>
 800da50:	2800      	cmp	r0, #0
 800da52:	d0d9      	beq.n	800da08 <__swbuf_r+0x2e>
 800da54:	e7d6      	b.n	800da04 <__swbuf_r+0x2a>
	...

0800da58 <__swsetup_r>:
 800da58:	b538      	push	{r3, r4, r5, lr}
 800da5a:	4b29      	ldr	r3, [pc, #164]	@ (800db00 <__swsetup_r+0xa8>)
 800da5c:	4605      	mov	r5, r0
 800da5e:	6818      	ldr	r0, [r3, #0]
 800da60:	460c      	mov	r4, r1
 800da62:	b118      	cbz	r0, 800da6c <__swsetup_r+0x14>
 800da64:	6a03      	ldr	r3, [r0, #32]
 800da66:	b90b      	cbnz	r3, 800da6c <__swsetup_r+0x14>
 800da68:	f7ff feae 	bl	800d7c8 <__sinit>
 800da6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da70:	0719      	lsls	r1, r3, #28
 800da72:	d422      	bmi.n	800daba <__swsetup_r+0x62>
 800da74:	06da      	lsls	r2, r3, #27
 800da76:	d407      	bmi.n	800da88 <__swsetup_r+0x30>
 800da78:	2209      	movs	r2, #9
 800da7a:	602a      	str	r2, [r5, #0]
 800da7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da80:	81a3      	strh	r3, [r4, #12]
 800da82:	f04f 30ff 	mov.w	r0, #4294967295
 800da86:	e033      	b.n	800daf0 <__swsetup_r+0x98>
 800da88:	0758      	lsls	r0, r3, #29
 800da8a:	d512      	bpl.n	800dab2 <__swsetup_r+0x5a>
 800da8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da8e:	b141      	cbz	r1, 800daa2 <__swsetup_r+0x4a>
 800da90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da94:	4299      	cmp	r1, r3
 800da96:	d002      	beq.n	800da9e <__swsetup_r+0x46>
 800da98:	4628      	mov	r0, r5
 800da9a:	f000 ffd9 	bl	800ea50 <_free_r>
 800da9e:	2300      	movs	r3, #0
 800daa0:	6363      	str	r3, [r4, #52]	@ 0x34
 800daa2:	89a3      	ldrh	r3, [r4, #12]
 800daa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800daa8:	81a3      	strh	r3, [r4, #12]
 800daaa:	2300      	movs	r3, #0
 800daac:	6063      	str	r3, [r4, #4]
 800daae:	6923      	ldr	r3, [r4, #16]
 800dab0:	6023      	str	r3, [r4, #0]
 800dab2:	89a3      	ldrh	r3, [r4, #12]
 800dab4:	f043 0308 	orr.w	r3, r3, #8
 800dab8:	81a3      	strh	r3, [r4, #12]
 800daba:	6923      	ldr	r3, [r4, #16]
 800dabc:	b94b      	cbnz	r3, 800dad2 <__swsetup_r+0x7a>
 800dabe:	89a3      	ldrh	r3, [r4, #12]
 800dac0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dac8:	d003      	beq.n	800dad2 <__swsetup_r+0x7a>
 800daca:	4621      	mov	r1, r4
 800dacc:	4628      	mov	r0, r5
 800dace:	f002 ff73 	bl	80109b8 <__smakebuf_r>
 800dad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dad6:	f013 0201 	ands.w	r2, r3, #1
 800dada:	d00a      	beq.n	800daf2 <__swsetup_r+0x9a>
 800dadc:	2200      	movs	r2, #0
 800dade:	60a2      	str	r2, [r4, #8]
 800dae0:	6962      	ldr	r2, [r4, #20]
 800dae2:	4252      	negs	r2, r2
 800dae4:	61a2      	str	r2, [r4, #24]
 800dae6:	6922      	ldr	r2, [r4, #16]
 800dae8:	b942      	cbnz	r2, 800dafc <__swsetup_r+0xa4>
 800daea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800daee:	d1c5      	bne.n	800da7c <__swsetup_r+0x24>
 800daf0:	bd38      	pop	{r3, r4, r5, pc}
 800daf2:	0799      	lsls	r1, r3, #30
 800daf4:	bf58      	it	pl
 800daf6:	6962      	ldrpl	r2, [r4, #20]
 800daf8:	60a2      	str	r2, [r4, #8]
 800dafa:	e7f4      	b.n	800dae6 <__swsetup_r+0x8e>
 800dafc:	2000      	movs	r0, #0
 800dafe:	e7f7      	b.n	800daf0 <__swsetup_r+0x98>
 800db00:	2000005c 	.word	0x2000005c

0800db04 <memcmp>:
 800db04:	b510      	push	{r4, lr}
 800db06:	3901      	subs	r1, #1
 800db08:	4402      	add	r2, r0
 800db0a:	4290      	cmp	r0, r2
 800db0c:	d101      	bne.n	800db12 <memcmp+0xe>
 800db0e:	2000      	movs	r0, #0
 800db10:	e005      	b.n	800db1e <memcmp+0x1a>
 800db12:	7803      	ldrb	r3, [r0, #0]
 800db14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800db18:	42a3      	cmp	r3, r4
 800db1a:	d001      	beq.n	800db20 <memcmp+0x1c>
 800db1c:	1b18      	subs	r0, r3, r4
 800db1e:	bd10      	pop	{r4, pc}
 800db20:	3001      	adds	r0, #1
 800db22:	e7f2      	b.n	800db0a <memcmp+0x6>

0800db24 <memset>:
 800db24:	4402      	add	r2, r0
 800db26:	4603      	mov	r3, r0
 800db28:	4293      	cmp	r3, r2
 800db2a:	d100      	bne.n	800db2e <memset+0xa>
 800db2c:	4770      	bx	lr
 800db2e:	f803 1b01 	strb.w	r1, [r3], #1
 800db32:	e7f9      	b.n	800db28 <memset+0x4>

0800db34 <strncmp>:
 800db34:	b510      	push	{r4, lr}
 800db36:	b16a      	cbz	r2, 800db54 <strncmp+0x20>
 800db38:	3901      	subs	r1, #1
 800db3a:	1884      	adds	r4, r0, r2
 800db3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db44:	429a      	cmp	r2, r3
 800db46:	d103      	bne.n	800db50 <strncmp+0x1c>
 800db48:	42a0      	cmp	r0, r4
 800db4a:	d001      	beq.n	800db50 <strncmp+0x1c>
 800db4c:	2a00      	cmp	r2, #0
 800db4e:	d1f5      	bne.n	800db3c <strncmp+0x8>
 800db50:	1ad0      	subs	r0, r2, r3
 800db52:	bd10      	pop	{r4, pc}
 800db54:	4610      	mov	r0, r2
 800db56:	e7fc      	b.n	800db52 <strncmp+0x1e>

0800db58 <strncpy>:
 800db58:	b510      	push	{r4, lr}
 800db5a:	3901      	subs	r1, #1
 800db5c:	4603      	mov	r3, r0
 800db5e:	b132      	cbz	r2, 800db6e <strncpy+0x16>
 800db60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800db64:	f803 4b01 	strb.w	r4, [r3], #1
 800db68:	3a01      	subs	r2, #1
 800db6a:	2c00      	cmp	r4, #0
 800db6c:	d1f7      	bne.n	800db5e <strncpy+0x6>
 800db6e:	441a      	add	r2, r3
 800db70:	2100      	movs	r1, #0
 800db72:	4293      	cmp	r3, r2
 800db74:	d100      	bne.n	800db78 <strncpy+0x20>
 800db76:	bd10      	pop	{r4, pc}
 800db78:	f803 1b01 	strb.w	r1, [r3], #1
 800db7c:	e7f9      	b.n	800db72 <strncpy+0x1a>
	...

0800db80 <strtok>:
 800db80:	4b16      	ldr	r3, [pc, #88]	@ (800dbdc <strtok+0x5c>)
 800db82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db86:	681f      	ldr	r7, [r3, #0]
 800db88:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800db8a:	4605      	mov	r5, r0
 800db8c:	460e      	mov	r6, r1
 800db8e:	b9ec      	cbnz	r4, 800dbcc <strtok+0x4c>
 800db90:	2050      	movs	r0, #80	@ 0x50
 800db92:	f000 ffa7 	bl	800eae4 <malloc>
 800db96:	4602      	mov	r2, r0
 800db98:	6478      	str	r0, [r7, #68]	@ 0x44
 800db9a:	b920      	cbnz	r0, 800dba6 <strtok+0x26>
 800db9c:	4b10      	ldr	r3, [pc, #64]	@ (800dbe0 <strtok+0x60>)
 800db9e:	4811      	ldr	r0, [pc, #68]	@ (800dbe4 <strtok+0x64>)
 800dba0:	215b      	movs	r1, #91	@ 0x5b
 800dba2:	f000 f8eb 	bl	800dd7c <__assert_func>
 800dba6:	e9c0 4400 	strd	r4, r4, [r0]
 800dbaa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800dbae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800dbb2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800dbb6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800dbba:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800dbbe:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800dbc2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800dbc6:	6184      	str	r4, [r0, #24]
 800dbc8:	7704      	strb	r4, [r0, #28]
 800dbca:	6244      	str	r4, [r0, #36]	@ 0x24
 800dbcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbce:	4631      	mov	r1, r6
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd8:	f000 b806 	b.w	800dbe8 <__strtok_r>
 800dbdc:	2000005c 	.word	0x2000005c
 800dbe0:	08011b81 	.word	0x08011b81
 800dbe4:	08011b98 	.word	0x08011b98

0800dbe8 <__strtok_r>:
 800dbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbea:	4604      	mov	r4, r0
 800dbec:	b908      	cbnz	r0, 800dbf2 <__strtok_r+0xa>
 800dbee:	6814      	ldr	r4, [r2, #0]
 800dbf0:	b144      	cbz	r4, 800dc04 <__strtok_r+0x1c>
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dbf8:	460f      	mov	r7, r1
 800dbfa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dbfe:	b91e      	cbnz	r6, 800dc08 <__strtok_r+0x20>
 800dc00:	b965      	cbnz	r5, 800dc1c <__strtok_r+0x34>
 800dc02:	6015      	str	r5, [r2, #0]
 800dc04:	2000      	movs	r0, #0
 800dc06:	e005      	b.n	800dc14 <__strtok_r+0x2c>
 800dc08:	42b5      	cmp	r5, r6
 800dc0a:	d1f6      	bne.n	800dbfa <__strtok_r+0x12>
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d1f0      	bne.n	800dbf2 <__strtok_r+0xa>
 800dc10:	6014      	str	r4, [r2, #0]
 800dc12:	7003      	strb	r3, [r0, #0]
 800dc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc16:	461c      	mov	r4, r3
 800dc18:	e00c      	b.n	800dc34 <__strtok_r+0x4c>
 800dc1a:	b915      	cbnz	r5, 800dc22 <__strtok_r+0x3a>
 800dc1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc20:	460e      	mov	r6, r1
 800dc22:	f816 5b01 	ldrb.w	r5, [r6], #1
 800dc26:	42ab      	cmp	r3, r5
 800dc28:	d1f7      	bne.n	800dc1a <__strtok_r+0x32>
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d0f3      	beq.n	800dc16 <__strtok_r+0x2e>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	f804 3c01 	strb.w	r3, [r4, #-1]
 800dc34:	6014      	str	r4, [r2, #0]
 800dc36:	e7ed      	b.n	800dc14 <__strtok_r+0x2c>

0800dc38 <strstr>:
 800dc38:	780a      	ldrb	r2, [r1, #0]
 800dc3a:	b570      	push	{r4, r5, r6, lr}
 800dc3c:	b96a      	cbnz	r2, 800dc5a <strstr+0x22>
 800dc3e:	bd70      	pop	{r4, r5, r6, pc}
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d109      	bne.n	800dc58 <strstr+0x20>
 800dc44:	460c      	mov	r4, r1
 800dc46:	4605      	mov	r5, r0
 800dc48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d0f6      	beq.n	800dc3e <strstr+0x6>
 800dc50:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800dc54:	429e      	cmp	r6, r3
 800dc56:	d0f7      	beq.n	800dc48 <strstr+0x10>
 800dc58:	3001      	adds	r0, #1
 800dc5a:	7803      	ldrb	r3, [r0, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d1ef      	bne.n	800dc40 <strstr+0x8>
 800dc60:	4618      	mov	r0, r3
 800dc62:	e7ec      	b.n	800dc3e <strstr+0x6>

0800dc64 <_localeconv_r>:
 800dc64:	4800      	ldr	r0, [pc, #0]	@ (800dc68 <_localeconv_r+0x4>)
 800dc66:	4770      	bx	lr
 800dc68:	2000019c 	.word	0x2000019c

0800dc6c <_close_r>:
 800dc6c:	b538      	push	{r3, r4, r5, lr}
 800dc6e:	4d06      	ldr	r5, [pc, #24]	@ (800dc88 <_close_r+0x1c>)
 800dc70:	2300      	movs	r3, #0
 800dc72:	4604      	mov	r4, r0
 800dc74:	4608      	mov	r0, r1
 800dc76:	602b      	str	r3, [r5, #0]
 800dc78:	f7f3 ff0d 	bl	8001a96 <_close>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	d102      	bne.n	800dc86 <_close_r+0x1a>
 800dc80:	682b      	ldr	r3, [r5, #0]
 800dc82:	b103      	cbz	r3, 800dc86 <_close_r+0x1a>
 800dc84:	6023      	str	r3, [r4, #0]
 800dc86:	bd38      	pop	{r3, r4, r5, pc}
 800dc88:	20003148 	.word	0x20003148

0800dc8c <_lseek_r>:
 800dc8c:	b538      	push	{r3, r4, r5, lr}
 800dc8e:	4d07      	ldr	r5, [pc, #28]	@ (800dcac <_lseek_r+0x20>)
 800dc90:	4604      	mov	r4, r0
 800dc92:	4608      	mov	r0, r1
 800dc94:	4611      	mov	r1, r2
 800dc96:	2200      	movs	r2, #0
 800dc98:	602a      	str	r2, [r5, #0]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	f7f3 ff22 	bl	8001ae4 <_lseek>
 800dca0:	1c43      	adds	r3, r0, #1
 800dca2:	d102      	bne.n	800dcaa <_lseek_r+0x1e>
 800dca4:	682b      	ldr	r3, [r5, #0]
 800dca6:	b103      	cbz	r3, 800dcaa <_lseek_r+0x1e>
 800dca8:	6023      	str	r3, [r4, #0]
 800dcaa:	bd38      	pop	{r3, r4, r5, pc}
 800dcac:	20003148 	.word	0x20003148

0800dcb0 <_read_r>:
 800dcb0:	b538      	push	{r3, r4, r5, lr}
 800dcb2:	4d07      	ldr	r5, [pc, #28]	@ (800dcd0 <_read_r+0x20>)
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	4608      	mov	r0, r1
 800dcb8:	4611      	mov	r1, r2
 800dcba:	2200      	movs	r2, #0
 800dcbc:	602a      	str	r2, [r5, #0]
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	f7f3 feb0 	bl	8001a24 <_read>
 800dcc4:	1c43      	adds	r3, r0, #1
 800dcc6:	d102      	bne.n	800dcce <_read_r+0x1e>
 800dcc8:	682b      	ldr	r3, [r5, #0]
 800dcca:	b103      	cbz	r3, 800dcce <_read_r+0x1e>
 800dccc:	6023      	str	r3, [r4, #0]
 800dcce:	bd38      	pop	{r3, r4, r5, pc}
 800dcd0:	20003148 	.word	0x20003148

0800dcd4 <_write_r>:
 800dcd4:	b538      	push	{r3, r4, r5, lr}
 800dcd6:	4d07      	ldr	r5, [pc, #28]	@ (800dcf4 <_write_r+0x20>)
 800dcd8:	4604      	mov	r4, r0
 800dcda:	4608      	mov	r0, r1
 800dcdc:	4611      	mov	r1, r2
 800dcde:	2200      	movs	r2, #0
 800dce0:	602a      	str	r2, [r5, #0]
 800dce2:	461a      	mov	r2, r3
 800dce4:	f7f3 febb 	bl	8001a5e <_write>
 800dce8:	1c43      	adds	r3, r0, #1
 800dcea:	d102      	bne.n	800dcf2 <_write_r+0x1e>
 800dcec:	682b      	ldr	r3, [r5, #0]
 800dcee:	b103      	cbz	r3, 800dcf2 <_write_r+0x1e>
 800dcf0:	6023      	str	r3, [r4, #0]
 800dcf2:	bd38      	pop	{r3, r4, r5, pc}
 800dcf4:	20003148 	.word	0x20003148

0800dcf8 <__errno>:
 800dcf8:	4b01      	ldr	r3, [pc, #4]	@ (800dd00 <__errno+0x8>)
 800dcfa:	6818      	ldr	r0, [r3, #0]
 800dcfc:	4770      	bx	lr
 800dcfe:	bf00      	nop
 800dd00:	2000005c 	.word	0x2000005c

0800dd04 <__libc_init_array>:
 800dd04:	b570      	push	{r4, r5, r6, lr}
 800dd06:	4d0d      	ldr	r5, [pc, #52]	@ (800dd3c <__libc_init_array+0x38>)
 800dd08:	4c0d      	ldr	r4, [pc, #52]	@ (800dd40 <__libc_init_array+0x3c>)
 800dd0a:	1b64      	subs	r4, r4, r5
 800dd0c:	10a4      	asrs	r4, r4, #2
 800dd0e:	2600      	movs	r6, #0
 800dd10:	42a6      	cmp	r6, r4
 800dd12:	d109      	bne.n	800dd28 <__libc_init_array+0x24>
 800dd14:	4d0b      	ldr	r5, [pc, #44]	@ (800dd44 <__libc_init_array+0x40>)
 800dd16:	4c0c      	ldr	r4, [pc, #48]	@ (800dd48 <__libc_init_array+0x44>)
 800dd18:	f003 faca 	bl	80112b0 <_init>
 800dd1c:	1b64      	subs	r4, r4, r5
 800dd1e:	10a4      	asrs	r4, r4, #2
 800dd20:	2600      	movs	r6, #0
 800dd22:	42a6      	cmp	r6, r4
 800dd24:	d105      	bne.n	800dd32 <__libc_init_array+0x2e>
 800dd26:	bd70      	pop	{r4, r5, r6, pc}
 800dd28:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd2c:	4798      	blx	r3
 800dd2e:	3601      	adds	r6, #1
 800dd30:	e7ee      	b.n	800dd10 <__libc_init_array+0xc>
 800dd32:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd36:	4798      	blx	r3
 800dd38:	3601      	adds	r6, #1
 800dd3a:	e7f2      	b.n	800dd22 <__libc_init_array+0x1e>
 800dd3c:	08011fdc 	.word	0x08011fdc
 800dd40:	08011fdc 	.word	0x08011fdc
 800dd44:	08011fdc 	.word	0x08011fdc
 800dd48:	08011fe0 	.word	0x08011fe0

0800dd4c <__retarget_lock_init_recursive>:
 800dd4c:	4770      	bx	lr

0800dd4e <__retarget_lock_acquire_recursive>:
 800dd4e:	4770      	bx	lr

0800dd50 <__retarget_lock_release_recursive>:
 800dd50:	4770      	bx	lr

0800dd52 <memcpy>:
 800dd52:	440a      	add	r2, r1
 800dd54:	4291      	cmp	r1, r2
 800dd56:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd5a:	d100      	bne.n	800dd5e <memcpy+0xc>
 800dd5c:	4770      	bx	lr
 800dd5e:	b510      	push	{r4, lr}
 800dd60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd68:	4291      	cmp	r1, r2
 800dd6a:	d1f9      	bne.n	800dd60 <memcpy+0xe>
 800dd6c:	bd10      	pop	{r4, pc}
	...

0800dd70 <nanf>:
 800dd70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dd78 <nanf+0x8>
 800dd74:	4770      	bx	lr
 800dd76:	bf00      	nop
 800dd78:	7fc00000 	.word	0x7fc00000

0800dd7c <__assert_func>:
 800dd7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd7e:	4614      	mov	r4, r2
 800dd80:	461a      	mov	r2, r3
 800dd82:	4b09      	ldr	r3, [pc, #36]	@ (800dda8 <__assert_func+0x2c>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4605      	mov	r5, r0
 800dd88:	68d8      	ldr	r0, [r3, #12]
 800dd8a:	b954      	cbnz	r4, 800dda2 <__assert_func+0x26>
 800dd8c:	4b07      	ldr	r3, [pc, #28]	@ (800ddac <__assert_func+0x30>)
 800dd8e:	461c      	mov	r4, r3
 800dd90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd94:	9100      	str	r1, [sp, #0]
 800dd96:	462b      	mov	r3, r5
 800dd98:	4905      	ldr	r1, [pc, #20]	@ (800ddb0 <__assert_func+0x34>)
 800dd9a:	f002 fdd5 	bl	8010948 <fiprintf>
 800dd9e:	f002 fe9b 	bl	8010ad8 <abort>
 800dda2:	4b04      	ldr	r3, [pc, #16]	@ (800ddb4 <__assert_func+0x38>)
 800dda4:	e7f4      	b.n	800dd90 <__assert_func+0x14>
 800dda6:	bf00      	nop
 800dda8:	2000005c 	.word	0x2000005c
 800ddac:	08011c2d 	.word	0x08011c2d
 800ddb0:	08011bff 	.word	0x08011bff
 800ddb4:	08011bf2 	.word	0x08011bf2

0800ddb8 <quorem>:
 800ddb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddbc:	6903      	ldr	r3, [r0, #16]
 800ddbe:	690c      	ldr	r4, [r1, #16]
 800ddc0:	42a3      	cmp	r3, r4
 800ddc2:	4607      	mov	r7, r0
 800ddc4:	db7e      	blt.n	800dec4 <quorem+0x10c>
 800ddc6:	3c01      	subs	r4, #1
 800ddc8:	f101 0814 	add.w	r8, r1, #20
 800ddcc:	00a3      	lsls	r3, r4, #2
 800ddce:	f100 0514 	add.w	r5, r0, #20
 800ddd2:	9300      	str	r3, [sp, #0]
 800ddd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddd8:	9301      	str	r3, [sp, #4]
 800ddda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ddde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dde2:	3301      	adds	r3, #1
 800dde4:	429a      	cmp	r2, r3
 800dde6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ddea:	fbb2 f6f3 	udiv	r6, r2, r3
 800ddee:	d32e      	bcc.n	800de4e <quorem+0x96>
 800ddf0:	f04f 0a00 	mov.w	sl, #0
 800ddf4:	46c4      	mov	ip, r8
 800ddf6:	46ae      	mov	lr, r5
 800ddf8:	46d3      	mov	fp, sl
 800ddfa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ddfe:	b298      	uxth	r0, r3
 800de00:	fb06 a000 	mla	r0, r6, r0, sl
 800de04:	0c02      	lsrs	r2, r0, #16
 800de06:	0c1b      	lsrs	r3, r3, #16
 800de08:	fb06 2303 	mla	r3, r6, r3, r2
 800de0c:	f8de 2000 	ldr.w	r2, [lr]
 800de10:	b280      	uxth	r0, r0
 800de12:	b292      	uxth	r2, r2
 800de14:	1a12      	subs	r2, r2, r0
 800de16:	445a      	add	r2, fp
 800de18:	f8de 0000 	ldr.w	r0, [lr]
 800de1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de20:	b29b      	uxth	r3, r3
 800de22:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800de26:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800de2a:	b292      	uxth	r2, r2
 800de2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800de30:	45e1      	cmp	r9, ip
 800de32:	f84e 2b04 	str.w	r2, [lr], #4
 800de36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800de3a:	d2de      	bcs.n	800ddfa <quorem+0x42>
 800de3c:	9b00      	ldr	r3, [sp, #0]
 800de3e:	58eb      	ldr	r3, [r5, r3]
 800de40:	b92b      	cbnz	r3, 800de4e <quorem+0x96>
 800de42:	9b01      	ldr	r3, [sp, #4]
 800de44:	3b04      	subs	r3, #4
 800de46:	429d      	cmp	r5, r3
 800de48:	461a      	mov	r2, r3
 800de4a:	d32f      	bcc.n	800deac <quorem+0xf4>
 800de4c:	613c      	str	r4, [r7, #16]
 800de4e:	4638      	mov	r0, r7
 800de50:	f001 f9c2 	bl	800f1d8 <__mcmp>
 800de54:	2800      	cmp	r0, #0
 800de56:	db25      	blt.n	800dea4 <quorem+0xec>
 800de58:	4629      	mov	r1, r5
 800de5a:	2000      	movs	r0, #0
 800de5c:	f858 2b04 	ldr.w	r2, [r8], #4
 800de60:	f8d1 c000 	ldr.w	ip, [r1]
 800de64:	fa1f fe82 	uxth.w	lr, r2
 800de68:	fa1f f38c 	uxth.w	r3, ip
 800de6c:	eba3 030e 	sub.w	r3, r3, lr
 800de70:	4403      	add	r3, r0
 800de72:	0c12      	lsrs	r2, r2, #16
 800de74:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800de78:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de82:	45c1      	cmp	r9, r8
 800de84:	f841 3b04 	str.w	r3, [r1], #4
 800de88:	ea4f 4022 	mov.w	r0, r2, asr #16
 800de8c:	d2e6      	bcs.n	800de5c <quorem+0xa4>
 800de8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de96:	b922      	cbnz	r2, 800dea2 <quorem+0xea>
 800de98:	3b04      	subs	r3, #4
 800de9a:	429d      	cmp	r5, r3
 800de9c:	461a      	mov	r2, r3
 800de9e:	d30b      	bcc.n	800deb8 <quorem+0x100>
 800dea0:	613c      	str	r4, [r7, #16]
 800dea2:	3601      	adds	r6, #1
 800dea4:	4630      	mov	r0, r6
 800dea6:	b003      	add	sp, #12
 800dea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deac:	6812      	ldr	r2, [r2, #0]
 800deae:	3b04      	subs	r3, #4
 800deb0:	2a00      	cmp	r2, #0
 800deb2:	d1cb      	bne.n	800de4c <quorem+0x94>
 800deb4:	3c01      	subs	r4, #1
 800deb6:	e7c6      	b.n	800de46 <quorem+0x8e>
 800deb8:	6812      	ldr	r2, [r2, #0]
 800deba:	3b04      	subs	r3, #4
 800debc:	2a00      	cmp	r2, #0
 800debe:	d1ef      	bne.n	800dea0 <quorem+0xe8>
 800dec0:	3c01      	subs	r4, #1
 800dec2:	e7ea      	b.n	800de9a <quorem+0xe2>
 800dec4:	2000      	movs	r0, #0
 800dec6:	e7ee      	b.n	800dea6 <quorem+0xee>

0800dec8 <_dtoa_r>:
 800dec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800decc:	69c7      	ldr	r7, [r0, #28]
 800dece:	b099      	sub	sp, #100	@ 0x64
 800ded0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ded4:	ec55 4b10 	vmov	r4, r5, d0
 800ded8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800deda:	9109      	str	r1, [sp, #36]	@ 0x24
 800dedc:	4683      	mov	fp, r0
 800dede:	920e      	str	r2, [sp, #56]	@ 0x38
 800dee0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dee2:	b97f      	cbnz	r7, 800df04 <_dtoa_r+0x3c>
 800dee4:	2010      	movs	r0, #16
 800dee6:	f000 fdfd 	bl	800eae4 <malloc>
 800deea:	4602      	mov	r2, r0
 800deec:	f8cb 001c 	str.w	r0, [fp, #28]
 800def0:	b920      	cbnz	r0, 800defc <_dtoa_r+0x34>
 800def2:	4ba7      	ldr	r3, [pc, #668]	@ (800e190 <_dtoa_r+0x2c8>)
 800def4:	21ef      	movs	r1, #239	@ 0xef
 800def6:	48a7      	ldr	r0, [pc, #668]	@ (800e194 <_dtoa_r+0x2cc>)
 800def8:	f7ff ff40 	bl	800dd7c <__assert_func>
 800defc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800df00:	6007      	str	r7, [r0, #0]
 800df02:	60c7      	str	r7, [r0, #12]
 800df04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df08:	6819      	ldr	r1, [r3, #0]
 800df0a:	b159      	cbz	r1, 800df24 <_dtoa_r+0x5c>
 800df0c:	685a      	ldr	r2, [r3, #4]
 800df0e:	604a      	str	r2, [r1, #4]
 800df10:	2301      	movs	r3, #1
 800df12:	4093      	lsls	r3, r2
 800df14:	608b      	str	r3, [r1, #8]
 800df16:	4658      	mov	r0, fp
 800df18:	f000 feda 	bl	800ecd0 <_Bfree>
 800df1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df20:	2200      	movs	r2, #0
 800df22:	601a      	str	r2, [r3, #0]
 800df24:	1e2b      	subs	r3, r5, #0
 800df26:	bfb9      	ittee	lt
 800df28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800df2c:	9303      	strlt	r3, [sp, #12]
 800df2e:	2300      	movge	r3, #0
 800df30:	6033      	strge	r3, [r6, #0]
 800df32:	9f03      	ldr	r7, [sp, #12]
 800df34:	4b98      	ldr	r3, [pc, #608]	@ (800e198 <_dtoa_r+0x2d0>)
 800df36:	bfbc      	itt	lt
 800df38:	2201      	movlt	r2, #1
 800df3a:	6032      	strlt	r2, [r6, #0]
 800df3c:	43bb      	bics	r3, r7
 800df3e:	d112      	bne.n	800df66 <_dtoa_r+0x9e>
 800df40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800df42:	f242 730f 	movw	r3, #9999	@ 0x270f
 800df46:	6013      	str	r3, [r2, #0]
 800df48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df4c:	4323      	orrs	r3, r4
 800df4e:	f000 854d 	beq.w	800e9ec <_dtoa_r+0xb24>
 800df52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e1ac <_dtoa_r+0x2e4>
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f000 854f 	beq.w	800e9fc <_dtoa_r+0xb34>
 800df5e:	f10a 0303 	add.w	r3, sl, #3
 800df62:	f000 bd49 	b.w	800e9f8 <_dtoa_r+0xb30>
 800df66:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df6a:	2200      	movs	r2, #0
 800df6c:	ec51 0b17 	vmov	r0, r1, d7
 800df70:	2300      	movs	r3, #0
 800df72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800df76:	f7f2 fda7 	bl	8000ac8 <__aeabi_dcmpeq>
 800df7a:	4680      	mov	r8, r0
 800df7c:	b158      	cbz	r0, 800df96 <_dtoa_r+0xce>
 800df7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800df80:	2301      	movs	r3, #1
 800df82:	6013      	str	r3, [r2, #0]
 800df84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df86:	b113      	cbz	r3, 800df8e <_dtoa_r+0xc6>
 800df88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df8a:	4b84      	ldr	r3, [pc, #528]	@ (800e19c <_dtoa_r+0x2d4>)
 800df8c:	6013      	str	r3, [r2, #0]
 800df8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e1b0 <_dtoa_r+0x2e8>
 800df92:	f000 bd33 	b.w	800e9fc <_dtoa_r+0xb34>
 800df96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800df9a:	aa16      	add	r2, sp, #88	@ 0x58
 800df9c:	a917      	add	r1, sp, #92	@ 0x5c
 800df9e:	4658      	mov	r0, fp
 800dfa0:	f001 fa3a 	bl	800f418 <__d2b>
 800dfa4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dfa8:	4681      	mov	r9, r0
 800dfaa:	2e00      	cmp	r6, #0
 800dfac:	d077      	beq.n	800e09e <_dtoa_r+0x1d6>
 800dfae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dfb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800dfb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dfc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dfc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dfc8:	4619      	mov	r1, r3
 800dfca:	2200      	movs	r2, #0
 800dfcc:	4b74      	ldr	r3, [pc, #464]	@ (800e1a0 <_dtoa_r+0x2d8>)
 800dfce:	f7f2 f95b 	bl	8000288 <__aeabi_dsub>
 800dfd2:	a369      	add	r3, pc, #420	@ (adr r3, 800e178 <_dtoa_r+0x2b0>)
 800dfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd8:	f7f2 fb0e 	bl	80005f8 <__aeabi_dmul>
 800dfdc:	a368      	add	r3, pc, #416	@ (adr r3, 800e180 <_dtoa_r+0x2b8>)
 800dfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe2:	f7f2 f953 	bl	800028c <__adddf3>
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	4630      	mov	r0, r6
 800dfea:	460d      	mov	r5, r1
 800dfec:	f7f2 fa9a 	bl	8000524 <__aeabi_i2d>
 800dff0:	a365      	add	r3, pc, #404	@ (adr r3, 800e188 <_dtoa_r+0x2c0>)
 800dff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff6:	f7f2 faff 	bl	80005f8 <__aeabi_dmul>
 800dffa:	4602      	mov	r2, r0
 800dffc:	460b      	mov	r3, r1
 800dffe:	4620      	mov	r0, r4
 800e000:	4629      	mov	r1, r5
 800e002:	f7f2 f943 	bl	800028c <__adddf3>
 800e006:	4604      	mov	r4, r0
 800e008:	460d      	mov	r5, r1
 800e00a:	f7f2 fda5 	bl	8000b58 <__aeabi_d2iz>
 800e00e:	2200      	movs	r2, #0
 800e010:	4607      	mov	r7, r0
 800e012:	2300      	movs	r3, #0
 800e014:	4620      	mov	r0, r4
 800e016:	4629      	mov	r1, r5
 800e018:	f7f2 fd60 	bl	8000adc <__aeabi_dcmplt>
 800e01c:	b140      	cbz	r0, 800e030 <_dtoa_r+0x168>
 800e01e:	4638      	mov	r0, r7
 800e020:	f7f2 fa80 	bl	8000524 <__aeabi_i2d>
 800e024:	4622      	mov	r2, r4
 800e026:	462b      	mov	r3, r5
 800e028:	f7f2 fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e02c:	b900      	cbnz	r0, 800e030 <_dtoa_r+0x168>
 800e02e:	3f01      	subs	r7, #1
 800e030:	2f16      	cmp	r7, #22
 800e032:	d851      	bhi.n	800e0d8 <_dtoa_r+0x210>
 800e034:	4b5b      	ldr	r3, [pc, #364]	@ (800e1a4 <_dtoa_r+0x2dc>)
 800e036:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e042:	f7f2 fd4b 	bl	8000adc <__aeabi_dcmplt>
 800e046:	2800      	cmp	r0, #0
 800e048:	d048      	beq.n	800e0dc <_dtoa_r+0x214>
 800e04a:	3f01      	subs	r7, #1
 800e04c:	2300      	movs	r3, #0
 800e04e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e050:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e052:	1b9b      	subs	r3, r3, r6
 800e054:	1e5a      	subs	r2, r3, #1
 800e056:	bf44      	itt	mi
 800e058:	f1c3 0801 	rsbmi	r8, r3, #1
 800e05c:	2300      	movmi	r3, #0
 800e05e:	9208      	str	r2, [sp, #32]
 800e060:	bf54      	ite	pl
 800e062:	f04f 0800 	movpl.w	r8, #0
 800e066:	9308      	strmi	r3, [sp, #32]
 800e068:	2f00      	cmp	r7, #0
 800e06a:	db39      	blt.n	800e0e0 <_dtoa_r+0x218>
 800e06c:	9b08      	ldr	r3, [sp, #32]
 800e06e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e070:	443b      	add	r3, r7
 800e072:	9308      	str	r3, [sp, #32]
 800e074:	2300      	movs	r3, #0
 800e076:	930a      	str	r3, [sp, #40]	@ 0x28
 800e078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e07a:	2b09      	cmp	r3, #9
 800e07c:	d864      	bhi.n	800e148 <_dtoa_r+0x280>
 800e07e:	2b05      	cmp	r3, #5
 800e080:	bfc4      	itt	gt
 800e082:	3b04      	subgt	r3, #4
 800e084:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e088:	f1a3 0302 	sub.w	r3, r3, #2
 800e08c:	bfcc      	ite	gt
 800e08e:	2400      	movgt	r4, #0
 800e090:	2401      	movle	r4, #1
 800e092:	2b03      	cmp	r3, #3
 800e094:	d863      	bhi.n	800e15e <_dtoa_r+0x296>
 800e096:	e8df f003 	tbb	[pc, r3]
 800e09a:	372a      	.short	0x372a
 800e09c:	5535      	.short	0x5535
 800e09e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e0a2:	441e      	add	r6, r3
 800e0a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e0a8:	2b20      	cmp	r3, #32
 800e0aa:	bfc1      	itttt	gt
 800e0ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e0b0:	409f      	lslgt	r7, r3
 800e0b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e0b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e0ba:	bfd6      	itet	le
 800e0bc:	f1c3 0320 	rsble	r3, r3, #32
 800e0c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800e0c4:	fa04 f003 	lslle.w	r0, r4, r3
 800e0c8:	f7f2 fa1c 	bl	8000504 <__aeabi_ui2d>
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e0d2:	3e01      	subs	r6, #1
 800e0d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e0d6:	e777      	b.n	800dfc8 <_dtoa_r+0x100>
 800e0d8:	2301      	movs	r3, #1
 800e0da:	e7b8      	b.n	800e04e <_dtoa_r+0x186>
 800e0dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800e0de:	e7b7      	b.n	800e050 <_dtoa_r+0x188>
 800e0e0:	427b      	negs	r3, r7
 800e0e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	eba8 0807 	sub.w	r8, r8, r7
 800e0ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e0ec:	e7c4      	b.n	800e078 <_dtoa_r+0x1b0>
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	dc35      	bgt.n	800e164 <_dtoa_r+0x29c>
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	9300      	str	r3, [sp, #0]
 800e0fc:	9307      	str	r3, [sp, #28]
 800e0fe:	461a      	mov	r2, r3
 800e100:	920e      	str	r2, [sp, #56]	@ 0x38
 800e102:	e00b      	b.n	800e11c <_dtoa_r+0x254>
 800e104:	2301      	movs	r3, #1
 800e106:	e7f3      	b.n	800e0f0 <_dtoa_r+0x228>
 800e108:	2300      	movs	r3, #0
 800e10a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e10c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e10e:	18fb      	adds	r3, r7, r3
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	3301      	adds	r3, #1
 800e114:	2b01      	cmp	r3, #1
 800e116:	9307      	str	r3, [sp, #28]
 800e118:	bfb8      	it	lt
 800e11a:	2301      	movlt	r3, #1
 800e11c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e120:	2100      	movs	r1, #0
 800e122:	2204      	movs	r2, #4
 800e124:	f102 0514 	add.w	r5, r2, #20
 800e128:	429d      	cmp	r5, r3
 800e12a:	d91f      	bls.n	800e16c <_dtoa_r+0x2a4>
 800e12c:	6041      	str	r1, [r0, #4]
 800e12e:	4658      	mov	r0, fp
 800e130:	f000 fd8e 	bl	800ec50 <_Balloc>
 800e134:	4682      	mov	sl, r0
 800e136:	2800      	cmp	r0, #0
 800e138:	d13c      	bne.n	800e1b4 <_dtoa_r+0x2ec>
 800e13a:	4b1b      	ldr	r3, [pc, #108]	@ (800e1a8 <_dtoa_r+0x2e0>)
 800e13c:	4602      	mov	r2, r0
 800e13e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e142:	e6d8      	b.n	800def6 <_dtoa_r+0x2e>
 800e144:	2301      	movs	r3, #1
 800e146:	e7e0      	b.n	800e10a <_dtoa_r+0x242>
 800e148:	2401      	movs	r4, #1
 800e14a:	2300      	movs	r3, #0
 800e14c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e14e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e150:	f04f 33ff 	mov.w	r3, #4294967295
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	9307      	str	r3, [sp, #28]
 800e158:	2200      	movs	r2, #0
 800e15a:	2312      	movs	r3, #18
 800e15c:	e7d0      	b.n	800e100 <_dtoa_r+0x238>
 800e15e:	2301      	movs	r3, #1
 800e160:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e162:	e7f5      	b.n	800e150 <_dtoa_r+0x288>
 800e164:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	9307      	str	r3, [sp, #28]
 800e16a:	e7d7      	b.n	800e11c <_dtoa_r+0x254>
 800e16c:	3101      	adds	r1, #1
 800e16e:	0052      	lsls	r2, r2, #1
 800e170:	e7d8      	b.n	800e124 <_dtoa_r+0x25c>
 800e172:	bf00      	nop
 800e174:	f3af 8000 	nop.w
 800e178:	636f4361 	.word	0x636f4361
 800e17c:	3fd287a7 	.word	0x3fd287a7
 800e180:	8b60c8b3 	.word	0x8b60c8b3
 800e184:	3fc68a28 	.word	0x3fc68a28
 800e188:	509f79fb 	.word	0x509f79fb
 800e18c:	3fd34413 	.word	0x3fd34413
 800e190:	08011b81 	.word	0x08011b81
 800e194:	08011c3b 	.word	0x08011c3b
 800e198:	7ff00000 	.word	0x7ff00000
 800e19c:	08011b59 	.word	0x08011b59
 800e1a0:	3ff80000 	.word	0x3ff80000
 800e1a4:	08011d38 	.word	0x08011d38
 800e1a8:	08011c93 	.word	0x08011c93
 800e1ac:	08011c37 	.word	0x08011c37
 800e1b0:	08011b58 	.word	0x08011b58
 800e1b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e1b8:	6018      	str	r0, [r3, #0]
 800e1ba:	9b07      	ldr	r3, [sp, #28]
 800e1bc:	2b0e      	cmp	r3, #14
 800e1be:	f200 80a4 	bhi.w	800e30a <_dtoa_r+0x442>
 800e1c2:	2c00      	cmp	r4, #0
 800e1c4:	f000 80a1 	beq.w	800e30a <_dtoa_r+0x442>
 800e1c8:	2f00      	cmp	r7, #0
 800e1ca:	dd33      	ble.n	800e234 <_dtoa_r+0x36c>
 800e1cc:	4bad      	ldr	r3, [pc, #692]	@ (800e484 <_dtoa_r+0x5bc>)
 800e1ce:	f007 020f 	and.w	r2, r7, #15
 800e1d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1d6:	ed93 7b00 	vldr	d7, [r3]
 800e1da:	05f8      	lsls	r0, r7, #23
 800e1dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e1e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e1e4:	d516      	bpl.n	800e214 <_dtoa_r+0x34c>
 800e1e6:	4ba8      	ldr	r3, [pc, #672]	@ (800e488 <_dtoa_r+0x5c0>)
 800e1e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e1f0:	f7f2 fb2c 	bl	800084c <__aeabi_ddiv>
 800e1f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1f8:	f004 040f 	and.w	r4, r4, #15
 800e1fc:	2603      	movs	r6, #3
 800e1fe:	4da2      	ldr	r5, [pc, #648]	@ (800e488 <_dtoa_r+0x5c0>)
 800e200:	b954      	cbnz	r4, 800e218 <_dtoa_r+0x350>
 800e202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e20a:	f7f2 fb1f 	bl	800084c <__aeabi_ddiv>
 800e20e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e212:	e028      	b.n	800e266 <_dtoa_r+0x39e>
 800e214:	2602      	movs	r6, #2
 800e216:	e7f2      	b.n	800e1fe <_dtoa_r+0x336>
 800e218:	07e1      	lsls	r1, r4, #31
 800e21a:	d508      	bpl.n	800e22e <_dtoa_r+0x366>
 800e21c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e220:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e224:	f7f2 f9e8 	bl	80005f8 <__aeabi_dmul>
 800e228:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e22c:	3601      	adds	r6, #1
 800e22e:	1064      	asrs	r4, r4, #1
 800e230:	3508      	adds	r5, #8
 800e232:	e7e5      	b.n	800e200 <_dtoa_r+0x338>
 800e234:	f000 80d2 	beq.w	800e3dc <_dtoa_r+0x514>
 800e238:	427c      	negs	r4, r7
 800e23a:	4b92      	ldr	r3, [pc, #584]	@ (800e484 <_dtoa_r+0x5bc>)
 800e23c:	4d92      	ldr	r5, [pc, #584]	@ (800e488 <_dtoa_r+0x5c0>)
 800e23e:	f004 020f 	and.w	r2, r4, #15
 800e242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e24e:	f7f2 f9d3 	bl	80005f8 <__aeabi_dmul>
 800e252:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e256:	1124      	asrs	r4, r4, #4
 800e258:	2300      	movs	r3, #0
 800e25a:	2602      	movs	r6, #2
 800e25c:	2c00      	cmp	r4, #0
 800e25e:	f040 80b2 	bne.w	800e3c6 <_dtoa_r+0x4fe>
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1d3      	bne.n	800e20e <_dtoa_r+0x346>
 800e266:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e268:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f000 80b7 	beq.w	800e3e0 <_dtoa_r+0x518>
 800e272:	4b86      	ldr	r3, [pc, #536]	@ (800e48c <_dtoa_r+0x5c4>)
 800e274:	2200      	movs	r2, #0
 800e276:	4620      	mov	r0, r4
 800e278:	4629      	mov	r1, r5
 800e27a:	f7f2 fc2f 	bl	8000adc <__aeabi_dcmplt>
 800e27e:	2800      	cmp	r0, #0
 800e280:	f000 80ae 	beq.w	800e3e0 <_dtoa_r+0x518>
 800e284:	9b07      	ldr	r3, [sp, #28]
 800e286:	2b00      	cmp	r3, #0
 800e288:	f000 80aa 	beq.w	800e3e0 <_dtoa_r+0x518>
 800e28c:	9b00      	ldr	r3, [sp, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	dd37      	ble.n	800e302 <_dtoa_r+0x43a>
 800e292:	1e7b      	subs	r3, r7, #1
 800e294:	9304      	str	r3, [sp, #16]
 800e296:	4620      	mov	r0, r4
 800e298:	4b7d      	ldr	r3, [pc, #500]	@ (800e490 <_dtoa_r+0x5c8>)
 800e29a:	2200      	movs	r2, #0
 800e29c:	4629      	mov	r1, r5
 800e29e:	f7f2 f9ab 	bl	80005f8 <__aeabi_dmul>
 800e2a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2a6:	9c00      	ldr	r4, [sp, #0]
 800e2a8:	3601      	adds	r6, #1
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	f7f2 f93a 	bl	8000524 <__aeabi_i2d>
 800e2b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2b4:	f7f2 f9a0 	bl	80005f8 <__aeabi_dmul>
 800e2b8:	4b76      	ldr	r3, [pc, #472]	@ (800e494 <_dtoa_r+0x5cc>)
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f7f1 ffe6 	bl	800028c <__adddf3>
 800e2c0:	4605      	mov	r5, r0
 800e2c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e2c6:	2c00      	cmp	r4, #0
 800e2c8:	f040 808d 	bne.w	800e3e6 <_dtoa_r+0x51e>
 800e2cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2d0:	4b71      	ldr	r3, [pc, #452]	@ (800e498 <_dtoa_r+0x5d0>)
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f7f1 ffd8 	bl	8000288 <__aeabi_dsub>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	460b      	mov	r3, r1
 800e2dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2e0:	462a      	mov	r2, r5
 800e2e2:	4633      	mov	r3, r6
 800e2e4:	f7f2 fc18 	bl	8000b18 <__aeabi_dcmpgt>
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	f040 828b 	bne.w	800e804 <_dtoa_r+0x93c>
 800e2ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2f2:	462a      	mov	r2, r5
 800e2f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e2f8:	f7f2 fbf0 	bl	8000adc <__aeabi_dcmplt>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	f040 8128 	bne.w	800e552 <_dtoa_r+0x68a>
 800e302:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e306:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e30a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	f2c0 815a 	blt.w	800e5c6 <_dtoa_r+0x6fe>
 800e312:	2f0e      	cmp	r7, #14
 800e314:	f300 8157 	bgt.w	800e5c6 <_dtoa_r+0x6fe>
 800e318:	4b5a      	ldr	r3, [pc, #360]	@ (800e484 <_dtoa_r+0x5bc>)
 800e31a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e31e:	ed93 7b00 	vldr	d7, [r3]
 800e322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e324:	2b00      	cmp	r3, #0
 800e326:	ed8d 7b00 	vstr	d7, [sp]
 800e32a:	da03      	bge.n	800e334 <_dtoa_r+0x46c>
 800e32c:	9b07      	ldr	r3, [sp, #28]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	f340 8101 	ble.w	800e536 <_dtoa_r+0x66e>
 800e334:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e338:	4656      	mov	r6, sl
 800e33a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e33e:	4620      	mov	r0, r4
 800e340:	4629      	mov	r1, r5
 800e342:	f7f2 fa83 	bl	800084c <__aeabi_ddiv>
 800e346:	f7f2 fc07 	bl	8000b58 <__aeabi_d2iz>
 800e34a:	4680      	mov	r8, r0
 800e34c:	f7f2 f8ea 	bl	8000524 <__aeabi_i2d>
 800e350:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e354:	f7f2 f950 	bl	80005f8 <__aeabi_dmul>
 800e358:	4602      	mov	r2, r0
 800e35a:	460b      	mov	r3, r1
 800e35c:	4620      	mov	r0, r4
 800e35e:	4629      	mov	r1, r5
 800e360:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e364:	f7f1 ff90 	bl	8000288 <__aeabi_dsub>
 800e368:	f806 4b01 	strb.w	r4, [r6], #1
 800e36c:	9d07      	ldr	r5, [sp, #28]
 800e36e:	eba6 040a 	sub.w	r4, r6, sl
 800e372:	42a5      	cmp	r5, r4
 800e374:	4602      	mov	r2, r0
 800e376:	460b      	mov	r3, r1
 800e378:	f040 8117 	bne.w	800e5aa <_dtoa_r+0x6e2>
 800e37c:	f7f1 ff86 	bl	800028c <__adddf3>
 800e380:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e384:	4604      	mov	r4, r0
 800e386:	460d      	mov	r5, r1
 800e388:	f7f2 fbc6 	bl	8000b18 <__aeabi_dcmpgt>
 800e38c:	2800      	cmp	r0, #0
 800e38e:	f040 80f9 	bne.w	800e584 <_dtoa_r+0x6bc>
 800e392:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e396:	4620      	mov	r0, r4
 800e398:	4629      	mov	r1, r5
 800e39a:	f7f2 fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 800e39e:	b118      	cbz	r0, 800e3a8 <_dtoa_r+0x4e0>
 800e3a0:	f018 0f01 	tst.w	r8, #1
 800e3a4:	f040 80ee 	bne.w	800e584 <_dtoa_r+0x6bc>
 800e3a8:	4649      	mov	r1, r9
 800e3aa:	4658      	mov	r0, fp
 800e3ac:	f000 fc90 	bl	800ecd0 <_Bfree>
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	7033      	strb	r3, [r6, #0]
 800e3b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e3b6:	3701      	adds	r7, #1
 800e3b8:	601f      	str	r7, [r3, #0]
 800e3ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f000 831d 	beq.w	800e9fc <_dtoa_r+0xb34>
 800e3c2:	601e      	str	r6, [r3, #0]
 800e3c4:	e31a      	b.n	800e9fc <_dtoa_r+0xb34>
 800e3c6:	07e2      	lsls	r2, r4, #31
 800e3c8:	d505      	bpl.n	800e3d6 <_dtoa_r+0x50e>
 800e3ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e3ce:	f7f2 f913 	bl	80005f8 <__aeabi_dmul>
 800e3d2:	3601      	adds	r6, #1
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	1064      	asrs	r4, r4, #1
 800e3d8:	3508      	adds	r5, #8
 800e3da:	e73f      	b.n	800e25c <_dtoa_r+0x394>
 800e3dc:	2602      	movs	r6, #2
 800e3de:	e742      	b.n	800e266 <_dtoa_r+0x39e>
 800e3e0:	9c07      	ldr	r4, [sp, #28]
 800e3e2:	9704      	str	r7, [sp, #16]
 800e3e4:	e761      	b.n	800e2aa <_dtoa_r+0x3e2>
 800e3e6:	4b27      	ldr	r3, [pc, #156]	@ (800e484 <_dtoa_r+0x5bc>)
 800e3e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e3f2:	4454      	add	r4, sl
 800e3f4:	2900      	cmp	r1, #0
 800e3f6:	d053      	beq.n	800e4a0 <_dtoa_r+0x5d8>
 800e3f8:	4928      	ldr	r1, [pc, #160]	@ (800e49c <_dtoa_r+0x5d4>)
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	f7f2 fa26 	bl	800084c <__aeabi_ddiv>
 800e400:	4633      	mov	r3, r6
 800e402:	462a      	mov	r2, r5
 800e404:	f7f1 ff40 	bl	8000288 <__aeabi_dsub>
 800e408:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e40c:	4656      	mov	r6, sl
 800e40e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e412:	f7f2 fba1 	bl	8000b58 <__aeabi_d2iz>
 800e416:	4605      	mov	r5, r0
 800e418:	f7f2 f884 	bl	8000524 <__aeabi_i2d>
 800e41c:	4602      	mov	r2, r0
 800e41e:	460b      	mov	r3, r1
 800e420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e424:	f7f1 ff30 	bl	8000288 <__aeabi_dsub>
 800e428:	3530      	adds	r5, #48	@ 0x30
 800e42a:	4602      	mov	r2, r0
 800e42c:	460b      	mov	r3, r1
 800e42e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e432:	f806 5b01 	strb.w	r5, [r6], #1
 800e436:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e43a:	f7f2 fb4f 	bl	8000adc <__aeabi_dcmplt>
 800e43e:	2800      	cmp	r0, #0
 800e440:	d171      	bne.n	800e526 <_dtoa_r+0x65e>
 800e442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e446:	4911      	ldr	r1, [pc, #68]	@ (800e48c <_dtoa_r+0x5c4>)
 800e448:	2000      	movs	r0, #0
 800e44a:	f7f1 ff1d 	bl	8000288 <__aeabi_dsub>
 800e44e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e452:	f7f2 fb43 	bl	8000adc <__aeabi_dcmplt>
 800e456:	2800      	cmp	r0, #0
 800e458:	f040 8095 	bne.w	800e586 <_dtoa_r+0x6be>
 800e45c:	42a6      	cmp	r6, r4
 800e45e:	f43f af50 	beq.w	800e302 <_dtoa_r+0x43a>
 800e462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e466:	4b0a      	ldr	r3, [pc, #40]	@ (800e490 <_dtoa_r+0x5c8>)
 800e468:	2200      	movs	r2, #0
 800e46a:	f7f2 f8c5 	bl	80005f8 <__aeabi_dmul>
 800e46e:	4b08      	ldr	r3, [pc, #32]	@ (800e490 <_dtoa_r+0x5c8>)
 800e470:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e474:	2200      	movs	r2, #0
 800e476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e47a:	f7f2 f8bd 	bl	80005f8 <__aeabi_dmul>
 800e47e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e482:	e7c4      	b.n	800e40e <_dtoa_r+0x546>
 800e484:	08011d38 	.word	0x08011d38
 800e488:	08011d10 	.word	0x08011d10
 800e48c:	3ff00000 	.word	0x3ff00000
 800e490:	40240000 	.word	0x40240000
 800e494:	401c0000 	.word	0x401c0000
 800e498:	40140000 	.word	0x40140000
 800e49c:	3fe00000 	.word	0x3fe00000
 800e4a0:	4631      	mov	r1, r6
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	f7f2 f8a8 	bl	80005f8 <__aeabi_dmul>
 800e4a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e4ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800e4ae:	4656      	mov	r6, sl
 800e4b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4b4:	f7f2 fb50 	bl	8000b58 <__aeabi_d2iz>
 800e4b8:	4605      	mov	r5, r0
 800e4ba:	f7f2 f833 	bl	8000524 <__aeabi_i2d>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4c6:	f7f1 fedf 	bl	8000288 <__aeabi_dsub>
 800e4ca:	3530      	adds	r5, #48	@ 0x30
 800e4cc:	f806 5b01 	strb.w	r5, [r6], #1
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	42a6      	cmp	r6, r4
 800e4d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e4da:	f04f 0200 	mov.w	r2, #0
 800e4de:	d124      	bne.n	800e52a <_dtoa_r+0x662>
 800e4e0:	4bac      	ldr	r3, [pc, #688]	@ (800e794 <_dtoa_r+0x8cc>)
 800e4e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e4e6:	f7f1 fed1 	bl	800028c <__adddf3>
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4f2:	f7f2 fb11 	bl	8000b18 <__aeabi_dcmpgt>
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	d145      	bne.n	800e586 <_dtoa_r+0x6be>
 800e4fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4fe:	49a5      	ldr	r1, [pc, #660]	@ (800e794 <_dtoa_r+0x8cc>)
 800e500:	2000      	movs	r0, #0
 800e502:	f7f1 fec1 	bl	8000288 <__aeabi_dsub>
 800e506:	4602      	mov	r2, r0
 800e508:	460b      	mov	r3, r1
 800e50a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e50e:	f7f2 fae5 	bl	8000adc <__aeabi_dcmplt>
 800e512:	2800      	cmp	r0, #0
 800e514:	f43f aef5 	beq.w	800e302 <_dtoa_r+0x43a>
 800e518:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e51a:	1e73      	subs	r3, r6, #1
 800e51c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e51e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e522:	2b30      	cmp	r3, #48	@ 0x30
 800e524:	d0f8      	beq.n	800e518 <_dtoa_r+0x650>
 800e526:	9f04      	ldr	r7, [sp, #16]
 800e528:	e73e      	b.n	800e3a8 <_dtoa_r+0x4e0>
 800e52a:	4b9b      	ldr	r3, [pc, #620]	@ (800e798 <_dtoa_r+0x8d0>)
 800e52c:	f7f2 f864 	bl	80005f8 <__aeabi_dmul>
 800e530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e534:	e7bc      	b.n	800e4b0 <_dtoa_r+0x5e8>
 800e536:	d10c      	bne.n	800e552 <_dtoa_r+0x68a>
 800e538:	4b98      	ldr	r3, [pc, #608]	@ (800e79c <_dtoa_r+0x8d4>)
 800e53a:	2200      	movs	r2, #0
 800e53c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e540:	f7f2 f85a 	bl	80005f8 <__aeabi_dmul>
 800e544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e548:	f7f2 fadc 	bl	8000b04 <__aeabi_dcmpge>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	f000 8157 	beq.w	800e800 <_dtoa_r+0x938>
 800e552:	2400      	movs	r4, #0
 800e554:	4625      	mov	r5, r4
 800e556:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e558:	43db      	mvns	r3, r3
 800e55a:	9304      	str	r3, [sp, #16]
 800e55c:	4656      	mov	r6, sl
 800e55e:	2700      	movs	r7, #0
 800e560:	4621      	mov	r1, r4
 800e562:	4658      	mov	r0, fp
 800e564:	f000 fbb4 	bl	800ecd0 <_Bfree>
 800e568:	2d00      	cmp	r5, #0
 800e56a:	d0dc      	beq.n	800e526 <_dtoa_r+0x65e>
 800e56c:	b12f      	cbz	r7, 800e57a <_dtoa_r+0x6b2>
 800e56e:	42af      	cmp	r7, r5
 800e570:	d003      	beq.n	800e57a <_dtoa_r+0x6b2>
 800e572:	4639      	mov	r1, r7
 800e574:	4658      	mov	r0, fp
 800e576:	f000 fbab 	bl	800ecd0 <_Bfree>
 800e57a:	4629      	mov	r1, r5
 800e57c:	4658      	mov	r0, fp
 800e57e:	f000 fba7 	bl	800ecd0 <_Bfree>
 800e582:	e7d0      	b.n	800e526 <_dtoa_r+0x65e>
 800e584:	9704      	str	r7, [sp, #16]
 800e586:	4633      	mov	r3, r6
 800e588:	461e      	mov	r6, r3
 800e58a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e58e:	2a39      	cmp	r2, #57	@ 0x39
 800e590:	d107      	bne.n	800e5a2 <_dtoa_r+0x6da>
 800e592:	459a      	cmp	sl, r3
 800e594:	d1f8      	bne.n	800e588 <_dtoa_r+0x6c0>
 800e596:	9a04      	ldr	r2, [sp, #16]
 800e598:	3201      	adds	r2, #1
 800e59a:	9204      	str	r2, [sp, #16]
 800e59c:	2230      	movs	r2, #48	@ 0x30
 800e59e:	f88a 2000 	strb.w	r2, [sl]
 800e5a2:	781a      	ldrb	r2, [r3, #0]
 800e5a4:	3201      	adds	r2, #1
 800e5a6:	701a      	strb	r2, [r3, #0]
 800e5a8:	e7bd      	b.n	800e526 <_dtoa_r+0x65e>
 800e5aa:	4b7b      	ldr	r3, [pc, #492]	@ (800e798 <_dtoa_r+0x8d0>)
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	f7f2 f823 	bl	80005f8 <__aeabi_dmul>
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	460d      	mov	r5, r1
 800e5ba:	f7f2 fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	f43f aebb 	beq.w	800e33a <_dtoa_r+0x472>
 800e5c4:	e6f0      	b.n	800e3a8 <_dtoa_r+0x4e0>
 800e5c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e5c8:	2a00      	cmp	r2, #0
 800e5ca:	f000 80db 	beq.w	800e784 <_dtoa_r+0x8bc>
 800e5ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5d0:	2a01      	cmp	r2, #1
 800e5d2:	f300 80bf 	bgt.w	800e754 <_dtoa_r+0x88c>
 800e5d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e5d8:	2a00      	cmp	r2, #0
 800e5da:	f000 80b7 	beq.w	800e74c <_dtoa_r+0x884>
 800e5de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e5e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e5e4:	4646      	mov	r6, r8
 800e5e6:	9a08      	ldr	r2, [sp, #32]
 800e5e8:	2101      	movs	r1, #1
 800e5ea:	441a      	add	r2, r3
 800e5ec:	4658      	mov	r0, fp
 800e5ee:	4498      	add	r8, r3
 800e5f0:	9208      	str	r2, [sp, #32]
 800e5f2:	f000 fc6b 	bl	800eecc <__i2b>
 800e5f6:	4605      	mov	r5, r0
 800e5f8:	b15e      	cbz	r6, 800e612 <_dtoa_r+0x74a>
 800e5fa:	9b08      	ldr	r3, [sp, #32]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	dd08      	ble.n	800e612 <_dtoa_r+0x74a>
 800e600:	42b3      	cmp	r3, r6
 800e602:	9a08      	ldr	r2, [sp, #32]
 800e604:	bfa8      	it	ge
 800e606:	4633      	movge	r3, r6
 800e608:	eba8 0803 	sub.w	r8, r8, r3
 800e60c:	1af6      	subs	r6, r6, r3
 800e60e:	1ad3      	subs	r3, r2, r3
 800e610:	9308      	str	r3, [sp, #32]
 800e612:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e614:	b1f3      	cbz	r3, 800e654 <_dtoa_r+0x78c>
 800e616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e618:	2b00      	cmp	r3, #0
 800e61a:	f000 80b7 	beq.w	800e78c <_dtoa_r+0x8c4>
 800e61e:	b18c      	cbz	r4, 800e644 <_dtoa_r+0x77c>
 800e620:	4629      	mov	r1, r5
 800e622:	4622      	mov	r2, r4
 800e624:	4658      	mov	r0, fp
 800e626:	f000 fd11 	bl	800f04c <__pow5mult>
 800e62a:	464a      	mov	r2, r9
 800e62c:	4601      	mov	r1, r0
 800e62e:	4605      	mov	r5, r0
 800e630:	4658      	mov	r0, fp
 800e632:	f000 fc61 	bl	800eef8 <__multiply>
 800e636:	4649      	mov	r1, r9
 800e638:	9004      	str	r0, [sp, #16]
 800e63a:	4658      	mov	r0, fp
 800e63c:	f000 fb48 	bl	800ecd0 <_Bfree>
 800e640:	9b04      	ldr	r3, [sp, #16]
 800e642:	4699      	mov	r9, r3
 800e644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e646:	1b1a      	subs	r2, r3, r4
 800e648:	d004      	beq.n	800e654 <_dtoa_r+0x78c>
 800e64a:	4649      	mov	r1, r9
 800e64c:	4658      	mov	r0, fp
 800e64e:	f000 fcfd 	bl	800f04c <__pow5mult>
 800e652:	4681      	mov	r9, r0
 800e654:	2101      	movs	r1, #1
 800e656:	4658      	mov	r0, fp
 800e658:	f000 fc38 	bl	800eecc <__i2b>
 800e65c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e65e:	4604      	mov	r4, r0
 800e660:	2b00      	cmp	r3, #0
 800e662:	f000 81cf 	beq.w	800ea04 <_dtoa_r+0xb3c>
 800e666:	461a      	mov	r2, r3
 800e668:	4601      	mov	r1, r0
 800e66a:	4658      	mov	r0, fp
 800e66c:	f000 fcee 	bl	800f04c <__pow5mult>
 800e670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e672:	2b01      	cmp	r3, #1
 800e674:	4604      	mov	r4, r0
 800e676:	f300 8095 	bgt.w	800e7a4 <_dtoa_r+0x8dc>
 800e67a:	9b02      	ldr	r3, [sp, #8]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	f040 8087 	bne.w	800e790 <_dtoa_r+0x8c8>
 800e682:	9b03      	ldr	r3, [sp, #12]
 800e684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e688:	2b00      	cmp	r3, #0
 800e68a:	f040 8089 	bne.w	800e7a0 <_dtoa_r+0x8d8>
 800e68e:	9b03      	ldr	r3, [sp, #12]
 800e690:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e694:	0d1b      	lsrs	r3, r3, #20
 800e696:	051b      	lsls	r3, r3, #20
 800e698:	b12b      	cbz	r3, 800e6a6 <_dtoa_r+0x7de>
 800e69a:	9b08      	ldr	r3, [sp, #32]
 800e69c:	3301      	adds	r3, #1
 800e69e:	9308      	str	r3, [sp, #32]
 800e6a0:	f108 0801 	add.w	r8, r8, #1
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f000 81b0 	beq.w	800ea10 <_dtoa_r+0xb48>
 800e6b0:	6923      	ldr	r3, [r4, #16]
 800e6b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e6b6:	6918      	ldr	r0, [r3, #16]
 800e6b8:	f000 fbbc 	bl	800ee34 <__hi0bits>
 800e6bc:	f1c0 0020 	rsb	r0, r0, #32
 800e6c0:	9b08      	ldr	r3, [sp, #32]
 800e6c2:	4418      	add	r0, r3
 800e6c4:	f010 001f 	ands.w	r0, r0, #31
 800e6c8:	d077      	beq.n	800e7ba <_dtoa_r+0x8f2>
 800e6ca:	f1c0 0320 	rsb	r3, r0, #32
 800e6ce:	2b04      	cmp	r3, #4
 800e6d0:	dd6b      	ble.n	800e7aa <_dtoa_r+0x8e2>
 800e6d2:	9b08      	ldr	r3, [sp, #32]
 800e6d4:	f1c0 001c 	rsb	r0, r0, #28
 800e6d8:	4403      	add	r3, r0
 800e6da:	4480      	add	r8, r0
 800e6dc:	4406      	add	r6, r0
 800e6de:	9308      	str	r3, [sp, #32]
 800e6e0:	f1b8 0f00 	cmp.w	r8, #0
 800e6e4:	dd05      	ble.n	800e6f2 <_dtoa_r+0x82a>
 800e6e6:	4649      	mov	r1, r9
 800e6e8:	4642      	mov	r2, r8
 800e6ea:	4658      	mov	r0, fp
 800e6ec:	f000 fd08 	bl	800f100 <__lshift>
 800e6f0:	4681      	mov	r9, r0
 800e6f2:	9b08      	ldr	r3, [sp, #32]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	dd05      	ble.n	800e704 <_dtoa_r+0x83c>
 800e6f8:	4621      	mov	r1, r4
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	4658      	mov	r0, fp
 800e6fe:	f000 fcff 	bl	800f100 <__lshift>
 800e702:	4604      	mov	r4, r0
 800e704:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e706:	2b00      	cmp	r3, #0
 800e708:	d059      	beq.n	800e7be <_dtoa_r+0x8f6>
 800e70a:	4621      	mov	r1, r4
 800e70c:	4648      	mov	r0, r9
 800e70e:	f000 fd63 	bl	800f1d8 <__mcmp>
 800e712:	2800      	cmp	r0, #0
 800e714:	da53      	bge.n	800e7be <_dtoa_r+0x8f6>
 800e716:	1e7b      	subs	r3, r7, #1
 800e718:	9304      	str	r3, [sp, #16]
 800e71a:	4649      	mov	r1, r9
 800e71c:	2300      	movs	r3, #0
 800e71e:	220a      	movs	r2, #10
 800e720:	4658      	mov	r0, fp
 800e722:	f000 faf7 	bl	800ed14 <__multadd>
 800e726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e728:	4681      	mov	r9, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	f000 8172 	beq.w	800ea14 <_dtoa_r+0xb4c>
 800e730:	2300      	movs	r3, #0
 800e732:	4629      	mov	r1, r5
 800e734:	220a      	movs	r2, #10
 800e736:	4658      	mov	r0, fp
 800e738:	f000 faec 	bl	800ed14 <__multadd>
 800e73c:	9b00      	ldr	r3, [sp, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	4605      	mov	r5, r0
 800e742:	dc67      	bgt.n	800e814 <_dtoa_r+0x94c>
 800e744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e746:	2b02      	cmp	r3, #2
 800e748:	dc41      	bgt.n	800e7ce <_dtoa_r+0x906>
 800e74a:	e063      	b.n	800e814 <_dtoa_r+0x94c>
 800e74c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e74e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e752:	e746      	b.n	800e5e2 <_dtoa_r+0x71a>
 800e754:	9b07      	ldr	r3, [sp, #28]
 800e756:	1e5c      	subs	r4, r3, #1
 800e758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e75a:	42a3      	cmp	r3, r4
 800e75c:	bfbf      	itttt	lt
 800e75e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e760:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e762:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e764:	1ae3      	sublt	r3, r4, r3
 800e766:	bfb4      	ite	lt
 800e768:	18d2      	addlt	r2, r2, r3
 800e76a:	1b1c      	subge	r4, r3, r4
 800e76c:	9b07      	ldr	r3, [sp, #28]
 800e76e:	bfbc      	itt	lt
 800e770:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e772:	2400      	movlt	r4, #0
 800e774:	2b00      	cmp	r3, #0
 800e776:	bfb5      	itete	lt
 800e778:	eba8 0603 	sublt.w	r6, r8, r3
 800e77c:	9b07      	ldrge	r3, [sp, #28]
 800e77e:	2300      	movlt	r3, #0
 800e780:	4646      	movge	r6, r8
 800e782:	e730      	b.n	800e5e6 <_dtoa_r+0x71e>
 800e784:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e786:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e788:	4646      	mov	r6, r8
 800e78a:	e735      	b.n	800e5f8 <_dtoa_r+0x730>
 800e78c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e78e:	e75c      	b.n	800e64a <_dtoa_r+0x782>
 800e790:	2300      	movs	r3, #0
 800e792:	e788      	b.n	800e6a6 <_dtoa_r+0x7de>
 800e794:	3fe00000 	.word	0x3fe00000
 800e798:	40240000 	.word	0x40240000
 800e79c:	40140000 	.word	0x40140000
 800e7a0:	9b02      	ldr	r3, [sp, #8]
 800e7a2:	e780      	b.n	800e6a6 <_dtoa_r+0x7de>
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7a8:	e782      	b.n	800e6b0 <_dtoa_r+0x7e8>
 800e7aa:	d099      	beq.n	800e6e0 <_dtoa_r+0x818>
 800e7ac:	9a08      	ldr	r2, [sp, #32]
 800e7ae:	331c      	adds	r3, #28
 800e7b0:	441a      	add	r2, r3
 800e7b2:	4498      	add	r8, r3
 800e7b4:	441e      	add	r6, r3
 800e7b6:	9208      	str	r2, [sp, #32]
 800e7b8:	e792      	b.n	800e6e0 <_dtoa_r+0x818>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	e7f6      	b.n	800e7ac <_dtoa_r+0x8e4>
 800e7be:	9b07      	ldr	r3, [sp, #28]
 800e7c0:	9704      	str	r7, [sp, #16]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	dc20      	bgt.n	800e808 <_dtoa_r+0x940>
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7ca:	2b02      	cmp	r3, #2
 800e7cc:	dd1e      	ble.n	800e80c <_dtoa_r+0x944>
 800e7ce:	9b00      	ldr	r3, [sp, #0]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	f47f aec0 	bne.w	800e556 <_dtoa_r+0x68e>
 800e7d6:	4621      	mov	r1, r4
 800e7d8:	2205      	movs	r2, #5
 800e7da:	4658      	mov	r0, fp
 800e7dc:	f000 fa9a 	bl	800ed14 <__multadd>
 800e7e0:	4601      	mov	r1, r0
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	4648      	mov	r0, r9
 800e7e6:	f000 fcf7 	bl	800f1d8 <__mcmp>
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	f77f aeb3 	ble.w	800e556 <_dtoa_r+0x68e>
 800e7f0:	4656      	mov	r6, sl
 800e7f2:	2331      	movs	r3, #49	@ 0x31
 800e7f4:	f806 3b01 	strb.w	r3, [r6], #1
 800e7f8:	9b04      	ldr	r3, [sp, #16]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	9304      	str	r3, [sp, #16]
 800e7fe:	e6ae      	b.n	800e55e <_dtoa_r+0x696>
 800e800:	9c07      	ldr	r4, [sp, #28]
 800e802:	9704      	str	r7, [sp, #16]
 800e804:	4625      	mov	r5, r4
 800e806:	e7f3      	b.n	800e7f0 <_dtoa_r+0x928>
 800e808:	9b07      	ldr	r3, [sp, #28]
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f000 8104 	beq.w	800ea1c <_dtoa_r+0xb54>
 800e814:	2e00      	cmp	r6, #0
 800e816:	dd05      	ble.n	800e824 <_dtoa_r+0x95c>
 800e818:	4629      	mov	r1, r5
 800e81a:	4632      	mov	r2, r6
 800e81c:	4658      	mov	r0, fp
 800e81e:	f000 fc6f 	bl	800f100 <__lshift>
 800e822:	4605      	mov	r5, r0
 800e824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e826:	2b00      	cmp	r3, #0
 800e828:	d05a      	beq.n	800e8e0 <_dtoa_r+0xa18>
 800e82a:	6869      	ldr	r1, [r5, #4]
 800e82c:	4658      	mov	r0, fp
 800e82e:	f000 fa0f 	bl	800ec50 <_Balloc>
 800e832:	4606      	mov	r6, r0
 800e834:	b928      	cbnz	r0, 800e842 <_dtoa_r+0x97a>
 800e836:	4b84      	ldr	r3, [pc, #528]	@ (800ea48 <_dtoa_r+0xb80>)
 800e838:	4602      	mov	r2, r0
 800e83a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e83e:	f7ff bb5a 	b.w	800def6 <_dtoa_r+0x2e>
 800e842:	692a      	ldr	r2, [r5, #16]
 800e844:	3202      	adds	r2, #2
 800e846:	0092      	lsls	r2, r2, #2
 800e848:	f105 010c 	add.w	r1, r5, #12
 800e84c:	300c      	adds	r0, #12
 800e84e:	f7ff fa80 	bl	800dd52 <memcpy>
 800e852:	2201      	movs	r2, #1
 800e854:	4631      	mov	r1, r6
 800e856:	4658      	mov	r0, fp
 800e858:	f000 fc52 	bl	800f100 <__lshift>
 800e85c:	f10a 0301 	add.w	r3, sl, #1
 800e860:	9307      	str	r3, [sp, #28]
 800e862:	9b00      	ldr	r3, [sp, #0]
 800e864:	4453      	add	r3, sl
 800e866:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e868:	9b02      	ldr	r3, [sp, #8]
 800e86a:	f003 0301 	and.w	r3, r3, #1
 800e86e:	462f      	mov	r7, r5
 800e870:	930a      	str	r3, [sp, #40]	@ 0x28
 800e872:	4605      	mov	r5, r0
 800e874:	9b07      	ldr	r3, [sp, #28]
 800e876:	4621      	mov	r1, r4
 800e878:	3b01      	subs	r3, #1
 800e87a:	4648      	mov	r0, r9
 800e87c:	9300      	str	r3, [sp, #0]
 800e87e:	f7ff fa9b 	bl	800ddb8 <quorem>
 800e882:	4639      	mov	r1, r7
 800e884:	9002      	str	r0, [sp, #8]
 800e886:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e88a:	4648      	mov	r0, r9
 800e88c:	f000 fca4 	bl	800f1d8 <__mcmp>
 800e890:	462a      	mov	r2, r5
 800e892:	9008      	str	r0, [sp, #32]
 800e894:	4621      	mov	r1, r4
 800e896:	4658      	mov	r0, fp
 800e898:	f000 fcba 	bl	800f210 <__mdiff>
 800e89c:	68c2      	ldr	r2, [r0, #12]
 800e89e:	4606      	mov	r6, r0
 800e8a0:	bb02      	cbnz	r2, 800e8e4 <_dtoa_r+0xa1c>
 800e8a2:	4601      	mov	r1, r0
 800e8a4:	4648      	mov	r0, r9
 800e8a6:	f000 fc97 	bl	800f1d8 <__mcmp>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	4631      	mov	r1, r6
 800e8ae:	4658      	mov	r0, fp
 800e8b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e8b2:	f000 fa0d 	bl	800ecd0 <_Bfree>
 800e8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8ba:	9e07      	ldr	r6, [sp, #28]
 800e8bc:	ea43 0102 	orr.w	r1, r3, r2
 800e8c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8c2:	4319      	orrs	r1, r3
 800e8c4:	d110      	bne.n	800e8e8 <_dtoa_r+0xa20>
 800e8c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e8ca:	d029      	beq.n	800e920 <_dtoa_r+0xa58>
 800e8cc:	9b08      	ldr	r3, [sp, #32]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	dd02      	ble.n	800e8d8 <_dtoa_r+0xa10>
 800e8d2:	9b02      	ldr	r3, [sp, #8]
 800e8d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e8d8:	9b00      	ldr	r3, [sp, #0]
 800e8da:	f883 8000 	strb.w	r8, [r3]
 800e8de:	e63f      	b.n	800e560 <_dtoa_r+0x698>
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	e7bb      	b.n	800e85c <_dtoa_r+0x994>
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	e7e1      	b.n	800e8ac <_dtoa_r+0x9e4>
 800e8e8:	9b08      	ldr	r3, [sp, #32]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	db04      	blt.n	800e8f8 <_dtoa_r+0xa30>
 800e8ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e8f0:	430b      	orrs	r3, r1
 800e8f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e8f4:	430b      	orrs	r3, r1
 800e8f6:	d120      	bne.n	800e93a <_dtoa_r+0xa72>
 800e8f8:	2a00      	cmp	r2, #0
 800e8fa:	dded      	ble.n	800e8d8 <_dtoa_r+0xa10>
 800e8fc:	4649      	mov	r1, r9
 800e8fe:	2201      	movs	r2, #1
 800e900:	4658      	mov	r0, fp
 800e902:	f000 fbfd 	bl	800f100 <__lshift>
 800e906:	4621      	mov	r1, r4
 800e908:	4681      	mov	r9, r0
 800e90a:	f000 fc65 	bl	800f1d8 <__mcmp>
 800e90e:	2800      	cmp	r0, #0
 800e910:	dc03      	bgt.n	800e91a <_dtoa_r+0xa52>
 800e912:	d1e1      	bne.n	800e8d8 <_dtoa_r+0xa10>
 800e914:	f018 0f01 	tst.w	r8, #1
 800e918:	d0de      	beq.n	800e8d8 <_dtoa_r+0xa10>
 800e91a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e91e:	d1d8      	bne.n	800e8d2 <_dtoa_r+0xa0a>
 800e920:	9a00      	ldr	r2, [sp, #0]
 800e922:	2339      	movs	r3, #57	@ 0x39
 800e924:	7013      	strb	r3, [r2, #0]
 800e926:	4633      	mov	r3, r6
 800e928:	461e      	mov	r6, r3
 800e92a:	3b01      	subs	r3, #1
 800e92c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e930:	2a39      	cmp	r2, #57	@ 0x39
 800e932:	d052      	beq.n	800e9da <_dtoa_r+0xb12>
 800e934:	3201      	adds	r2, #1
 800e936:	701a      	strb	r2, [r3, #0]
 800e938:	e612      	b.n	800e560 <_dtoa_r+0x698>
 800e93a:	2a00      	cmp	r2, #0
 800e93c:	dd07      	ble.n	800e94e <_dtoa_r+0xa86>
 800e93e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e942:	d0ed      	beq.n	800e920 <_dtoa_r+0xa58>
 800e944:	9a00      	ldr	r2, [sp, #0]
 800e946:	f108 0301 	add.w	r3, r8, #1
 800e94a:	7013      	strb	r3, [r2, #0]
 800e94c:	e608      	b.n	800e560 <_dtoa_r+0x698>
 800e94e:	9b07      	ldr	r3, [sp, #28]
 800e950:	9a07      	ldr	r2, [sp, #28]
 800e952:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e958:	4293      	cmp	r3, r2
 800e95a:	d028      	beq.n	800e9ae <_dtoa_r+0xae6>
 800e95c:	4649      	mov	r1, r9
 800e95e:	2300      	movs	r3, #0
 800e960:	220a      	movs	r2, #10
 800e962:	4658      	mov	r0, fp
 800e964:	f000 f9d6 	bl	800ed14 <__multadd>
 800e968:	42af      	cmp	r7, r5
 800e96a:	4681      	mov	r9, r0
 800e96c:	f04f 0300 	mov.w	r3, #0
 800e970:	f04f 020a 	mov.w	r2, #10
 800e974:	4639      	mov	r1, r7
 800e976:	4658      	mov	r0, fp
 800e978:	d107      	bne.n	800e98a <_dtoa_r+0xac2>
 800e97a:	f000 f9cb 	bl	800ed14 <__multadd>
 800e97e:	4607      	mov	r7, r0
 800e980:	4605      	mov	r5, r0
 800e982:	9b07      	ldr	r3, [sp, #28]
 800e984:	3301      	adds	r3, #1
 800e986:	9307      	str	r3, [sp, #28]
 800e988:	e774      	b.n	800e874 <_dtoa_r+0x9ac>
 800e98a:	f000 f9c3 	bl	800ed14 <__multadd>
 800e98e:	4629      	mov	r1, r5
 800e990:	4607      	mov	r7, r0
 800e992:	2300      	movs	r3, #0
 800e994:	220a      	movs	r2, #10
 800e996:	4658      	mov	r0, fp
 800e998:	f000 f9bc 	bl	800ed14 <__multadd>
 800e99c:	4605      	mov	r5, r0
 800e99e:	e7f0      	b.n	800e982 <_dtoa_r+0xaba>
 800e9a0:	9b00      	ldr	r3, [sp, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	bfcc      	ite	gt
 800e9a6:	461e      	movgt	r6, r3
 800e9a8:	2601      	movle	r6, #1
 800e9aa:	4456      	add	r6, sl
 800e9ac:	2700      	movs	r7, #0
 800e9ae:	4649      	mov	r1, r9
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	4658      	mov	r0, fp
 800e9b4:	f000 fba4 	bl	800f100 <__lshift>
 800e9b8:	4621      	mov	r1, r4
 800e9ba:	4681      	mov	r9, r0
 800e9bc:	f000 fc0c 	bl	800f1d8 <__mcmp>
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	dcb0      	bgt.n	800e926 <_dtoa_r+0xa5e>
 800e9c4:	d102      	bne.n	800e9cc <_dtoa_r+0xb04>
 800e9c6:	f018 0f01 	tst.w	r8, #1
 800e9ca:	d1ac      	bne.n	800e926 <_dtoa_r+0xa5e>
 800e9cc:	4633      	mov	r3, r6
 800e9ce:	461e      	mov	r6, r3
 800e9d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9d4:	2a30      	cmp	r2, #48	@ 0x30
 800e9d6:	d0fa      	beq.n	800e9ce <_dtoa_r+0xb06>
 800e9d8:	e5c2      	b.n	800e560 <_dtoa_r+0x698>
 800e9da:	459a      	cmp	sl, r3
 800e9dc:	d1a4      	bne.n	800e928 <_dtoa_r+0xa60>
 800e9de:	9b04      	ldr	r3, [sp, #16]
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	9304      	str	r3, [sp, #16]
 800e9e4:	2331      	movs	r3, #49	@ 0x31
 800e9e6:	f88a 3000 	strb.w	r3, [sl]
 800e9ea:	e5b9      	b.n	800e560 <_dtoa_r+0x698>
 800e9ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e9ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ea4c <_dtoa_r+0xb84>
 800e9f2:	b11b      	cbz	r3, 800e9fc <_dtoa_r+0xb34>
 800e9f4:	f10a 0308 	add.w	r3, sl, #8
 800e9f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e9fa:	6013      	str	r3, [r2, #0]
 800e9fc:	4650      	mov	r0, sl
 800e9fe:	b019      	add	sp, #100	@ 0x64
 800ea00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	f77f ae37 	ble.w	800e67a <_dtoa_r+0x7b2>
 800ea0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea10:	2001      	movs	r0, #1
 800ea12:	e655      	b.n	800e6c0 <_dtoa_r+0x7f8>
 800ea14:	9b00      	ldr	r3, [sp, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f77f aed6 	ble.w	800e7c8 <_dtoa_r+0x900>
 800ea1c:	4656      	mov	r6, sl
 800ea1e:	4621      	mov	r1, r4
 800ea20:	4648      	mov	r0, r9
 800ea22:	f7ff f9c9 	bl	800ddb8 <quorem>
 800ea26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ea2a:	f806 8b01 	strb.w	r8, [r6], #1
 800ea2e:	9b00      	ldr	r3, [sp, #0]
 800ea30:	eba6 020a 	sub.w	r2, r6, sl
 800ea34:	4293      	cmp	r3, r2
 800ea36:	ddb3      	ble.n	800e9a0 <_dtoa_r+0xad8>
 800ea38:	4649      	mov	r1, r9
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	220a      	movs	r2, #10
 800ea3e:	4658      	mov	r0, fp
 800ea40:	f000 f968 	bl	800ed14 <__multadd>
 800ea44:	4681      	mov	r9, r0
 800ea46:	e7ea      	b.n	800ea1e <_dtoa_r+0xb56>
 800ea48:	08011c93 	.word	0x08011c93
 800ea4c:	08011c2e 	.word	0x08011c2e

0800ea50 <_free_r>:
 800ea50:	b538      	push	{r3, r4, r5, lr}
 800ea52:	4605      	mov	r5, r0
 800ea54:	2900      	cmp	r1, #0
 800ea56:	d041      	beq.n	800eadc <_free_r+0x8c>
 800ea58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea5c:	1f0c      	subs	r4, r1, #4
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	bfb8      	it	lt
 800ea62:	18e4      	addlt	r4, r4, r3
 800ea64:	f000 f8e8 	bl	800ec38 <__malloc_lock>
 800ea68:	4a1d      	ldr	r2, [pc, #116]	@ (800eae0 <_free_r+0x90>)
 800ea6a:	6813      	ldr	r3, [r2, #0]
 800ea6c:	b933      	cbnz	r3, 800ea7c <_free_r+0x2c>
 800ea6e:	6063      	str	r3, [r4, #4]
 800ea70:	6014      	str	r4, [r2, #0]
 800ea72:	4628      	mov	r0, r5
 800ea74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea78:	f000 b8e4 	b.w	800ec44 <__malloc_unlock>
 800ea7c:	42a3      	cmp	r3, r4
 800ea7e:	d908      	bls.n	800ea92 <_free_r+0x42>
 800ea80:	6820      	ldr	r0, [r4, #0]
 800ea82:	1821      	adds	r1, r4, r0
 800ea84:	428b      	cmp	r3, r1
 800ea86:	bf01      	itttt	eq
 800ea88:	6819      	ldreq	r1, [r3, #0]
 800ea8a:	685b      	ldreq	r3, [r3, #4]
 800ea8c:	1809      	addeq	r1, r1, r0
 800ea8e:	6021      	streq	r1, [r4, #0]
 800ea90:	e7ed      	b.n	800ea6e <_free_r+0x1e>
 800ea92:	461a      	mov	r2, r3
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	b10b      	cbz	r3, 800ea9c <_free_r+0x4c>
 800ea98:	42a3      	cmp	r3, r4
 800ea9a:	d9fa      	bls.n	800ea92 <_free_r+0x42>
 800ea9c:	6811      	ldr	r1, [r2, #0]
 800ea9e:	1850      	adds	r0, r2, r1
 800eaa0:	42a0      	cmp	r0, r4
 800eaa2:	d10b      	bne.n	800eabc <_free_r+0x6c>
 800eaa4:	6820      	ldr	r0, [r4, #0]
 800eaa6:	4401      	add	r1, r0
 800eaa8:	1850      	adds	r0, r2, r1
 800eaaa:	4283      	cmp	r3, r0
 800eaac:	6011      	str	r1, [r2, #0]
 800eaae:	d1e0      	bne.n	800ea72 <_free_r+0x22>
 800eab0:	6818      	ldr	r0, [r3, #0]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	6053      	str	r3, [r2, #4]
 800eab6:	4408      	add	r0, r1
 800eab8:	6010      	str	r0, [r2, #0]
 800eaba:	e7da      	b.n	800ea72 <_free_r+0x22>
 800eabc:	d902      	bls.n	800eac4 <_free_r+0x74>
 800eabe:	230c      	movs	r3, #12
 800eac0:	602b      	str	r3, [r5, #0]
 800eac2:	e7d6      	b.n	800ea72 <_free_r+0x22>
 800eac4:	6820      	ldr	r0, [r4, #0]
 800eac6:	1821      	adds	r1, r4, r0
 800eac8:	428b      	cmp	r3, r1
 800eaca:	bf04      	itt	eq
 800eacc:	6819      	ldreq	r1, [r3, #0]
 800eace:	685b      	ldreq	r3, [r3, #4]
 800ead0:	6063      	str	r3, [r4, #4]
 800ead2:	bf04      	itt	eq
 800ead4:	1809      	addeq	r1, r1, r0
 800ead6:	6021      	streq	r1, [r4, #0]
 800ead8:	6054      	str	r4, [r2, #4]
 800eada:	e7ca      	b.n	800ea72 <_free_r+0x22>
 800eadc:	bd38      	pop	{r3, r4, r5, pc}
 800eade:	bf00      	nop
 800eae0:	20003154 	.word	0x20003154

0800eae4 <malloc>:
 800eae4:	4b02      	ldr	r3, [pc, #8]	@ (800eaf0 <malloc+0xc>)
 800eae6:	4601      	mov	r1, r0
 800eae8:	6818      	ldr	r0, [r3, #0]
 800eaea:	f000 b825 	b.w	800eb38 <_malloc_r>
 800eaee:	bf00      	nop
 800eaf0:	2000005c 	.word	0x2000005c

0800eaf4 <sbrk_aligned>:
 800eaf4:	b570      	push	{r4, r5, r6, lr}
 800eaf6:	4e0f      	ldr	r6, [pc, #60]	@ (800eb34 <sbrk_aligned+0x40>)
 800eaf8:	460c      	mov	r4, r1
 800eafa:	6831      	ldr	r1, [r6, #0]
 800eafc:	4605      	mov	r5, r0
 800eafe:	b911      	cbnz	r1, 800eb06 <sbrk_aligned+0x12>
 800eb00:	f001 ffd2 	bl	8010aa8 <_sbrk_r>
 800eb04:	6030      	str	r0, [r6, #0]
 800eb06:	4621      	mov	r1, r4
 800eb08:	4628      	mov	r0, r5
 800eb0a:	f001 ffcd 	bl	8010aa8 <_sbrk_r>
 800eb0e:	1c43      	adds	r3, r0, #1
 800eb10:	d103      	bne.n	800eb1a <sbrk_aligned+0x26>
 800eb12:	f04f 34ff 	mov.w	r4, #4294967295
 800eb16:	4620      	mov	r0, r4
 800eb18:	bd70      	pop	{r4, r5, r6, pc}
 800eb1a:	1cc4      	adds	r4, r0, #3
 800eb1c:	f024 0403 	bic.w	r4, r4, #3
 800eb20:	42a0      	cmp	r0, r4
 800eb22:	d0f8      	beq.n	800eb16 <sbrk_aligned+0x22>
 800eb24:	1a21      	subs	r1, r4, r0
 800eb26:	4628      	mov	r0, r5
 800eb28:	f001 ffbe 	bl	8010aa8 <_sbrk_r>
 800eb2c:	3001      	adds	r0, #1
 800eb2e:	d1f2      	bne.n	800eb16 <sbrk_aligned+0x22>
 800eb30:	e7ef      	b.n	800eb12 <sbrk_aligned+0x1e>
 800eb32:	bf00      	nop
 800eb34:	20003150 	.word	0x20003150

0800eb38 <_malloc_r>:
 800eb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb3c:	1ccd      	adds	r5, r1, #3
 800eb3e:	f025 0503 	bic.w	r5, r5, #3
 800eb42:	3508      	adds	r5, #8
 800eb44:	2d0c      	cmp	r5, #12
 800eb46:	bf38      	it	cc
 800eb48:	250c      	movcc	r5, #12
 800eb4a:	2d00      	cmp	r5, #0
 800eb4c:	4606      	mov	r6, r0
 800eb4e:	db01      	blt.n	800eb54 <_malloc_r+0x1c>
 800eb50:	42a9      	cmp	r1, r5
 800eb52:	d904      	bls.n	800eb5e <_malloc_r+0x26>
 800eb54:	230c      	movs	r3, #12
 800eb56:	6033      	str	r3, [r6, #0]
 800eb58:	2000      	movs	r0, #0
 800eb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ec34 <_malloc_r+0xfc>
 800eb62:	f000 f869 	bl	800ec38 <__malloc_lock>
 800eb66:	f8d8 3000 	ldr.w	r3, [r8]
 800eb6a:	461c      	mov	r4, r3
 800eb6c:	bb44      	cbnz	r4, 800ebc0 <_malloc_r+0x88>
 800eb6e:	4629      	mov	r1, r5
 800eb70:	4630      	mov	r0, r6
 800eb72:	f7ff ffbf 	bl	800eaf4 <sbrk_aligned>
 800eb76:	1c43      	adds	r3, r0, #1
 800eb78:	4604      	mov	r4, r0
 800eb7a:	d158      	bne.n	800ec2e <_malloc_r+0xf6>
 800eb7c:	f8d8 4000 	ldr.w	r4, [r8]
 800eb80:	4627      	mov	r7, r4
 800eb82:	2f00      	cmp	r7, #0
 800eb84:	d143      	bne.n	800ec0e <_malloc_r+0xd6>
 800eb86:	2c00      	cmp	r4, #0
 800eb88:	d04b      	beq.n	800ec22 <_malloc_r+0xea>
 800eb8a:	6823      	ldr	r3, [r4, #0]
 800eb8c:	4639      	mov	r1, r7
 800eb8e:	4630      	mov	r0, r6
 800eb90:	eb04 0903 	add.w	r9, r4, r3
 800eb94:	f001 ff88 	bl	8010aa8 <_sbrk_r>
 800eb98:	4581      	cmp	r9, r0
 800eb9a:	d142      	bne.n	800ec22 <_malloc_r+0xea>
 800eb9c:	6821      	ldr	r1, [r4, #0]
 800eb9e:	1a6d      	subs	r5, r5, r1
 800eba0:	4629      	mov	r1, r5
 800eba2:	4630      	mov	r0, r6
 800eba4:	f7ff ffa6 	bl	800eaf4 <sbrk_aligned>
 800eba8:	3001      	adds	r0, #1
 800ebaa:	d03a      	beq.n	800ec22 <_malloc_r+0xea>
 800ebac:	6823      	ldr	r3, [r4, #0]
 800ebae:	442b      	add	r3, r5
 800ebb0:	6023      	str	r3, [r4, #0]
 800ebb2:	f8d8 3000 	ldr.w	r3, [r8]
 800ebb6:	685a      	ldr	r2, [r3, #4]
 800ebb8:	bb62      	cbnz	r2, 800ec14 <_malloc_r+0xdc>
 800ebba:	f8c8 7000 	str.w	r7, [r8]
 800ebbe:	e00f      	b.n	800ebe0 <_malloc_r+0xa8>
 800ebc0:	6822      	ldr	r2, [r4, #0]
 800ebc2:	1b52      	subs	r2, r2, r5
 800ebc4:	d420      	bmi.n	800ec08 <_malloc_r+0xd0>
 800ebc6:	2a0b      	cmp	r2, #11
 800ebc8:	d917      	bls.n	800ebfa <_malloc_r+0xc2>
 800ebca:	1961      	adds	r1, r4, r5
 800ebcc:	42a3      	cmp	r3, r4
 800ebce:	6025      	str	r5, [r4, #0]
 800ebd0:	bf18      	it	ne
 800ebd2:	6059      	strne	r1, [r3, #4]
 800ebd4:	6863      	ldr	r3, [r4, #4]
 800ebd6:	bf08      	it	eq
 800ebd8:	f8c8 1000 	streq.w	r1, [r8]
 800ebdc:	5162      	str	r2, [r4, r5]
 800ebde:	604b      	str	r3, [r1, #4]
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	f000 f82f 	bl	800ec44 <__malloc_unlock>
 800ebe6:	f104 000b 	add.w	r0, r4, #11
 800ebea:	1d23      	adds	r3, r4, #4
 800ebec:	f020 0007 	bic.w	r0, r0, #7
 800ebf0:	1ac2      	subs	r2, r0, r3
 800ebf2:	bf1c      	itt	ne
 800ebf4:	1a1b      	subne	r3, r3, r0
 800ebf6:	50a3      	strne	r3, [r4, r2]
 800ebf8:	e7af      	b.n	800eb5a <_malloc_r+0x22>
 800ebfa:	6862      	ldr	r2, [r4, #4]
 800ebfc:	42a3      	cmp	r3, r4
 800ebfe:	bf0c      	ite	eq
 800ec00:	f8c8 2000 	streq.w	r2, [r8]
 800ec04:	605a      	strne	r2, [r3, #4]
 800ec06:	e7eb      	b.n	800ebe0 <_malloc_r+0xa8>
 800ec08:	4623      	mov	r3, r4
 800ec0a:	6864      	ldr	r4, [r4, #4]
 800ec0c:	e7ae      	b.n	800eb6c <_malloc_r+0x34>
 800ec0e:	463c      	mov	r4, r7
 800ec10:	687f      	ldr	r7, [r7, #4]
 800ec12:	e7b6      	b.n	800eb82 <_malloc_r+0x4a>
 800ec14:	461a      	mov	r2, r3
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	42a3      	cmp	r3, r4
 800ec1a:	d1fb      	bne.n	800ec14 <_malloc_r+0xdc>
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	6053      	str	r3, [r2, #4]
 800ec20:	e7de      	b.n	800ebe0 <_malloc_r+0xa8>
 800ec22:	230c      	movs	r3, #12
 800ec24:	6033      	str	r3, [r6, #0]
 800ec26:	4630      	mov	r0, r6
 800ec28:	f000 f80c 	bl	800ec44 <__malloc_unlock>
 800ec2c:	e794      	b.n	800eb58 <_malloc_r+0x20>
 800ec2e:	6005      	str	r5, [r0, #0]
 800ec30:	e7d6      	b.n	800ebe0 <_malloc_r+0xa8>
 800ec32:	bf00      	nop
 800ec34:	20003154 	.word	0x20003154

0800ec38 <__malloc_lock>:
 800ec38:	4801      	ldr	r0, [pc, #4]	@ (800ec40 <__malloc_lock+0x8>)
 800ec3a:	f7ff b888 	b.w	800dd4e <__retarget_lock_acquire_recursive>
 800ec3e:	bf00      	nop
 800ec40:	2000314c 	.word	0x2000314c

0800ec44 <__malloc_unlock>:
 800ec44:	4801      	ldr	r0, [pc, #4]	@ (800ec4c <__malloc_unlock+0x8>)
 800ec46:	f7ff b883 	b.w	800dd50 <__retarget_lock_release_recursive>
 800ec4a:	bf00      	nop
 800ec4c:	2000314c 	.word	0x2000314c

0800ec50 <_Balloc>:
 800ec50:	b570      	push	{r4, r5, r6, lr}
 800ec52:	69c6      	ldr	r6, [r0, #28]
 800ec54:	4604      	mov	r4, r0
 800ec56:	460d      	mov	r5, r1
 800ec58:	b976      	cbnz	r6, 800ec78 <_Balloc+0x28>
 800ec5a:	2010      	movs	r0, #16
 800ec5c:	f7ff ff42 	bl	800eae4 <malloc>
 800ec60:	4602      	mov	r2, r0
 800ec62:	61e0      	str	r0, [r4, #28]
 800ec64:	b920      	cbnz	r0, 800ec70 <_Balloc+0x20>
 800ec66:	4b18      	ldr	r3, [pc, #96]	@ (800ecc8 <_Balloc+0x78>)
 800ec68:	4818      	ldr	r0, [pc, #96]	@ (800eccc <_Balloc+0x7c>)
 800ec6a:	216b      	movs	r1, #107	@ 0x6b
 800ec6c:	f7ff f886 	bl	800dd7c <__assert_func>
 800ec70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec74:	6006      	str	r6, [r0, #0]
 800ec76:	60c6      	str	r6, [r0, #12]
 800ec78:	69e6      	ldr	r6, [r4, #28]
 800ec7a:	68f3      	ldr	r3, [r6, #12]
 800ec7c:	b183      	cbz	r3, 800eca0 <_Balloc+0x50>
 800ec7e:	69e3      	ldr	r3, [r4, #28]
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec86:	b9b8      	cbnz	r0, 800ecb8 <_Balloc+0x68>
 800ec88:	2101      	movs	r1, #1
 800ec8a:	fa01 f605 	lsl.w	r6, r1, r5
 800ec8e:	1d72      	adds	r2, r6, #5
 800ec90:	0092      	lsls	r2, r2, #2
 800ec92:	4620      	mov	r0, r4
 800ec94:	f001 ff27 	bl	8010ae6 <_calloc_r>
 800ec98:	b160      	cbz	r0, 800ecb4 <_Balloc+0x64>
 800ec9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec9e:	e00e      	b.n	800ecbe <_Balloc+0x6e>
 800eca0:	2221      	movs	r2, #33	@ 0x21
 800eca2:	2104      	movs	r1, #4
 800eca4:	4620      	mov	r0, r4
 800eca6:	f001 ff1e 	bl	8010ae6 <_calloc_r>
 800ecaa:	69e3      	ldr	r3, [r4, #28]
 800ecac:	60f0      	str	r0, [r6, #12]
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d1e4      	bne.n	800ec7e <_Balloc+0x2e>
 800ecb4:	2000      	movs	r0, #0
 800ecb6:	bd70      	pop	{r4, r5, r6, pc}
 800ecb8:	6802      	ldr	r2, [r0, #0]
 800ecba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ecc4:	e7f7      	b.n	800ecb6 <_Balloc+0x66>
 800ecc6:	bf00      	nop
 800ecc8:	08011b81 	.word	0x08011b81
 800eccc:	08011ca4 	.word	0x08011ca4

0800ecd0 <_Bfree>:
 800ecd0:	b570      	push	{r4, r5, r6, lr}
 800ecd2:	69c6      	ldr	r6, [r0, #28]
 800ecd4:	4605      	mov	r5, r0
 800ecd6:	460c      	mov	r4, r1
 800ecd8:	b976      	cbnz	r6, 800ecf8 <_Bfree+0x28>
 800ecda:	2010      	movs	r0, #16
 800ecdc:	f7ff ff02 	bl	800eae4 <malloc>
 800ece0:	4602      	mov	r2, r0
 800ece2:	61e8      	str	r0, [r5, #28]
 800ece4:	b920      	cbnz	r0, 800ecf0 <_Bfree+0x20>
 800ece6:	4b09      	ldr	r3, [pc, #36]	@ (800ed0c <_Bfree+0x3c>)
 800ece8:	4809      	ldr	r0, [pc, #36]	@ (800ed10 <_Bfree+0x40>)
 800ecea:	218f      	movs	r1, #143	@ 0x8f
 800ecec:	f7ff f846 	bl	800dd7c <__assert_func>
 800ecf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ecf4:	6006      	str	r6, [r0, #0]
 800ecf6:	60c6      	str	r6, [r0, #12]
 800ecf8:	b13c      	cbz	r4, 800ed0a <_Bfree+0x3a>
 800ecfa:	69eb      	ldr	r3, [r5, #28]
 800ecfc:	6862      	ldr	r2, [r4, #4]
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed04:	6021      	str	r1, [r4, #0]
 800ed06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ed0a:	bd70      	pop	{r4, r5, r6, pc}
 800ed0c:	08011b81 	.word	0x08011b81
 800ed10:	08011ca4 	.word	0x08011ca4

0800ed14 <__multadd>:
 800ed14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed18:	690d      	ldr	r5, [r1, #16]
 800ed1a:	4607      	mov	r7, r0
 800ed1c:	460c      	mov	r4, r1
 800ed1e:	461e      	mov	r6, r3
 800ed20:	f101 0c14 	add.w	ip, r1, #20
 800ed24:	2000      	movs	r0, #0
 800ed26:	f8dc 3000 	ldr.w	r3, [ip]
 800ed2a:	b299      	uxth	r1, r3
 800ed2c:	fb02 6101 	mla	r1, r2, r1, r6
 800ed30:	0c1e      	lsrs	r6, r3, #16
 800ed32:	0c0b      	lsrs	r3, r1, #16
 800ed34:	fb02 3306 	mla	r3, r2, r6, r3
 800ed38:	b289      	uxth	r1, r1
 800ed3a:	3001      	adds	r0, #1
 800ed3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ed40:	4285      	cmp	r5, r0
 800ed42:	f84c 1b04 	str.w	r1, [ip], #4
 800ed46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ed4a:	dcec      	bgt.n	800ed26 <__multadd+0x12>
 800ed4c:	b30e      	cbz	r6, 800ed92 <__multadd+0x7e>
 800ed4e:	68a3      	ldr	r3, [r4, #8]
 800ed50:	42ab      	cmp	r3, r5
 800ed52:	dc19      	bgt.n	800ed88 <__multadd+0x74>
 800ed54:	6861      	ldr	r1, [r4, #4]
 800ed56:	4638      	mov	r0, r7
 800ed58:	3101      	adds	r1, #1
 800ed5a:	f7ff ff79 	bl	800ec50 <_Balloc>
 800ed5e:	4680      	mov	r8, r0
 800ed60:	b928      	cbnz	r0, 800ed6e <__multadd+0x5a>
 800ed62:	4602      	mov	r2, r0
 800ed64:	4b0c      	ldr	r3, [pc, #48]	@ (800ed98 <__multadd+0x84>)
 800ed66:	480d      	ldr	r0, [pc, #52]	@ (800ed9c <__multadd+0x88>)
 800ed68:	21ba      	movs	r1, #186	@ 0xba
 800ed6a:	f7ff f807 	bl	800dd7c <__assert_func>
 800ed6e:	6922      	ldr	r2, [r4, #16]
 800ed70:	3202      	adds	r2, #2
 800ed72:	f104 010c 	add.w	r1, r4, #12
 800ed76:	0092      	lsls	r2, r2, #2
 800ed78:	300c      	adds	r0, #12
 800ed7a:	f7fe ffea 	bl	800dd52 <memcpy>
 800ed7e:	4621      	mov	r1, r4
 800ed80:	4638      	mov	r0, r7
 800ed82:	f7ff ffa5 	bl	800ecd0 <_Bfree>
 800ed86:	4644      	mov	r4, r8
 800ed88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed8c:	3501      	adds	r5, #1
 800ed8e:	615e      	str	r6, [r3, #20]
 800ed90:	6125      	str	r5, [r4, #16]
 800ed92:	4620      	mov	r0, r4
 800ed94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed98:	08011c93 	.word	0x08011c93
 800ed9c:	08011ca4 	.word	0x08011ca4

0800eda0 <__s2b>:
 800eda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eda4:	460c      	mov	r4, r1
 800eda6:	4615      	mov	r5, r2
 800eda8:	461f      	mov	r7, r3
 800edaa:	2209      	movs	r2, #9
 800edac:	3308      	adds	r3, #8
 800edae:	4606      	mov	r6, r0
 800edb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800edb4:	2100      	movs	r1, #0
 800edb6:	2201      	movs	r2, #1
 800edb8:	429a      	cmp	r2, r3
 800edba:	db09      	blt.n	800edd0 <__s2b+0x30>
 800edbc:	4630      	mov	r0, r6
 800edbe:	f7ff ff47 	bl	800ec50 <_Balloc>
 800edc2:	b940      	cbnz	r0, 800edd6 <__s2b+0x36>
 800edc4:	4602      	mov	r2, r0
 800edc6:	4b19      	ldr	r3, [pc, #100]	@ (800ee2c <__s2b+0x8c>)
 800edc8:	4819      	ldr	r0, [pc, #100]	@ (800ee30 <__s2b+0x90>)
 800edca:	21d3      	movs	r1, #211	@ 0xd3
 800edcc:	f7fe ffd6 	bl	800dd7c <__assert_func>
 800edd0:	0052      	lsls	r2, r2, #1
 800edd2:	3101      	adds	r1, #1
 800edd4:	e7f0      	b.n	800edb8 <__s2b+0x18>
 800edd6:	9b08      	ldr	r3, [sp, #32]
 800edd8:	6143      	str	r3, [r0, #20]
 800edda:	2d09      	cmp	r5, #9
 800eddc:	f04f 0301 	mov.w	r3, #1
 800ede0:	6103      	str	r3, [r0, #16]
 800ede2:	dd16      	ble.n	800ee12 <__s2b+0x72>
 800ede4:	f104 0909 	add.w	r9, r4, #9
 800ede8:	46c8      	mov	r8, r9
 800edea:	442c      	add	r4, r5
 800edec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800edf0:	4601      	mov	r1, r0
 800edf2:	3b30      	subs	r3, #48	@ 0x30
 800edf4:	220a      	movs	r2, #10
 800edf6:	4630      	mov	r0, r6
 800edf8:	f7ff ff8c 	bl	800ed14 <__multadd>
 800edfc:	45a0      	cmp	r8, r4
 800edfe:	d1f5      	bne.n	800edec <__s2b+0x4c>
 800ee00:	f1a5 0408 	sub.w	r4, r5, #8
 800ee04:	444c      	add	r4, r9
 800ee06:	1b2d      	subs	r5, r5, r4
 800ee08:	1963      	adds	r3, r4, r5
 800ee0a:	42bb      	cmp	r3, r7
 800ee0c:	db04      	blt.n	800ee18 <__s2b+0x78>
 800ee0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee12:	340a      	adds	r4, #10
 800ee14:	2509      	movs	r5, #9
 800ee16:	e7f6      	b.n	800ee06 <__s2b+0x66>
 800ee18:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ee1c:	4601      	mov	r1, r0
 800ee1e:	3b30      	subs	r3, #48	@ 0x30
 800ee20:	220a      	movs	r2, #10
 800ee22:	4630      	mov	r0, r6
 800ee24:	f7ff ff76 	bl	800ed14 <__multadd>
 800ee28:	e7ee      	b.n	800ee08 <__s2b+0x68>
 800ee2a:	bf00      	nop
 800ee2c:	08011c93 	.word	0x08011c93
 800ee30:	08011ca4 	.word	0x08011ca4

0800ee34 <__hi0bits>:
 800ee34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ee38:	4603      	mov	r3, r0
 800ee3a:	bf36      	itet	cc
 800ee3c:	0403      	lslcc	r3, r0, #16
 800ee3e:	2000      	movcs	r0, #0
 800ee40:	2010      	movcc	r0, #16
 800ee42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ee46:	bf3c      	itt	cc
 800ee48:	021b      	lslcc	r3, r3, #8
 800ee4a:	3008      	addcc	r0, #8
 800ee4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee50:	bf3c      	itt	cc
 800ee52:	011b      	lslcc	r3, r3, #4
 800ee54:	3004      	addcc	r0, #4
 800ee56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee5a:	bf3c      	itt	cc
 800ee5c:	009b      	lslcc	r3, r3, #2
 800ee5e:	3002      	addcc	r0, #2
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	db05      	blt.n	800ee70 <__hi0bits+0x3c>
 800ee64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ee68:	f100 0001 	add.w	r0, r0, #1
 800ee6c:	bf08      	it	eq
 800ee6e:	2020      	moveq	r0, #32
 800ee70:	4770      	bx	lr

0800ee72 <__lo0bits>:
 800ee72:	6803      	ldr	r3, [r0, #0]
 800ee74:	4602      	mov	r2, r0
 800ee76:	f013 0007 	ands.w	r0, r3, #7
 800ee7a:	d00b      	beq.n	800ee94 <__lo0bits+0x22>
 800ee7c:	07d9      	lsls	r1, r3, #31
 800ee7e:	d421      	bmi.n	800eec4 <__lo0bits+0x52>
 800ee80:	0798      	lsls	r0, r3, #30
 800ee82:	bf49      	itett	mi
 800ee84:	085b      	lsrmi	r3, r3, #1
 800ee86:	089b      	lsrpl	r3, r3, #2
 800ee88:	2001      	movmi	r0, #1
 800ee8a:	6013      	strmi	r3, [r2, #0]
 800ee8c:	bf5c      	itt	pl
 800ee8e:	6013      	strpl	r3, [r2, #0]
 800ee90:	2002      	movpl	r0, #2
 800ee92:	4770      	bx	lr
 800ee94:	b299      	uxth	r1, r3
 800ee96:	b909      	cbnz	r1, 800ee9c <__lo0bits+0x2a>
 800ee98:	0c1b      	lsrs	r3, r3, #16
 800ee9a:	2010      	movs	r0, #16
 800ee9c:	b2d9      	uxtb	r1, r3
 800ee9e:	b909      	cbnz	r1, 800eea4 <__lo0bits+0x32>
 800eea0:	3008      	adds	r0, #8
 800eea2:	0a1b      	lsrs	r3, r3, #8
 800eea4:	0719      	lsls	r1, r3, #28
 800eea6:	bf04      	itt	eq
 800eea8:	091b      	lsreq	r3, r3, #4
 800eeaa:	3004      	addeq	r0, #4
 800eeac:	0799      	lsls	r1, r3, #30
 800eeae:	bf04      	itt	eq
 800eeb0:	089b      	lsreq	r3, r3, #2
 800eeb2:	3002      	addeq	r0, #2
 800eeb4:	07d9      	lsls	r1, r3, #31
 800eeb6:	d403      	bmi.n	800eec0 <__lo0bits+0x4e>
 800eeb8:	085b      	lsrs	r3, r3, #1
 800eeba:	f100 0001 	add.w	r0, r0, #1
 800eebe:	d003      	beq.n	800eec8 <__lo0bits+0x56>
 800eec0:	6013      	str	r3, [r2, #0]
 800eec2:	4770      	bx	lr
 800eec4:	2000      	movs	r0, #0
 800eec6:	4770      	bx	lr
 800eec8:	2020      	movs	r0, #32
 800eeca:	4770      	bx	lr

0800eecc <__i2b>:
 800eecc:	b510      	push	{r4, lr}
 800eece:	460c      	mov	r4, r1
 800eed0:	2101      	movs	r1, #1
 800eed2:	f7ff febd 	bl	800ec50 <_Balloc>
 800eed6:	4602      	mov	r2, r0
 800eed8:	b928      	cbnz	r0, 800eee6 <__i2b+0x1a>
 800eeda:	4b05      	ldr	r3, [pc, #20]	@ (800eef0 <__i2b+0x24>)
 800eedc:	4805      	ldr	r0, [pc, #20]	@ (800eef4 <__i2b+0x28>)
 800eede:	f240 1145 	movw	r1, #325	@ 0x145
 800eee2:	f7fe ff4b 	bl	800dd7c <__assert_func>
 800eee6:	2301      	movs	r3, #1
 800eee8:	6144      	str	r4, [r0, #20]
 800eeea:	6103      	str	r3, [r0, #16]
 800eeec:	bd10      	pop	{r4, pc}
 800eeee:	bf00      	nop
 800eef0:	08011c93 	.word	0x08011c93
 800eef4:	08011ca4 	.word	0x08011ca4

0800eef8 <__multiply>:
 800eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eefc:	4614      	mov	r4, r2
 800eefe:	690a      	ldr	r2, [r1, #16]
 800ef00:	6923      	ldr	r3, [r4, #16]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	bfa8      	it	ge
 800ef06:	4623      	movge	r3, r4
 800ef08:	460f      	mov	r7, r1
 800ef0a:	bfa4      	itt	ge
 800ef0c:	460c      	movge	r4, r1
 800ef0e:	461f      	movge	r7, r3
 800ef10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ef14:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ef18:	68a3      	ldr	r3, [r4, #8]
 800ef1a:	6861      	ldr	r1, [r4, #4]
 800ef1c:	eb0a 0609 	add.w	r6, sl, r9
 800ef20:	42b3      	cmp	r3, r6
 800ef22:	b085      	sub	sp, #20
 800ef24:	bfb8      	it	lt
 800ef26:	3101      	addlt	r1, #1
 800ef28:	f7ff fe92 	bl	800ec50 <_Balloc>
 800ef2c:	b930      	cbnz	r0, 800ef3c <__multiply+0x44>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	4b44      	ldr	r3, [pc, #272]	@ (800f044 <__multiply+0x14c>)
 800ef32:	4845      	ldr	r0, [pc, #276]	@ (800f048 <__multiply+0x150>)
 800ef34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ef38:	f7fe ff20 	bl	800dd7c <__assert_func>
 800ef3c:	f100 0514 	add.w	r5, r0, #20
 800ef40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ef44:	462b      	mov	r3, r5
 800ef46:	2200      	movs	r2, #0
 800ef48:	4543      	cmp	r3, r8
 800ef4a:	d321      	bcc.n	800ef90 <__multiply+0x98>
 800ef4c:	f107 0114 	add.w	r1, r7, #20
 800ef50:	f104 0214 	add.w	r2, r4, #20
 800ef54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ef58:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ef5c:	9302      	str	r3, [sp, #8]
 800ef5e:	1b13      	subs	r3, r2, r4
 800ef60:	3b15      	subs	r3, #21
 800ef62:	f023 0303 	bic.w	r3, r3, #3
 800ef66:	3304      	adds	r3, #4
 800ef68:	f104 0715 	add.w	r7, r4, #21
 800ef6c:	42ba      	cmp	r2, r7
 800ef6e:	bf38      	it	cc
 800ef70:	2304      	movcc	r3, #4
 800ef72:	9301      	str	r3, [sp, #4]
 800ef74:	9b02      	ldr	r3, [sp, #8]
 800ef76:	9103      	str	r1, [sp, #12]
 800ef78:	428b      	cmp	r3, r1
 800ef7a:	d80c      	bhi.n	800ef96 <__multiply+0x9e>
 800ef7c:	2e00      	cmp	r6, #0
 800ef7e:	dd03      	ble.n	800ef88 <__multiply+0x90>
 800ef80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d05b      	beq.n	800f040 <__multiply+0x148>
 800ef88:	6106      	str	r6, [r0, #16]
 800ef8a:	b005      	add	sp, #20
 800ef8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef90:	f843 2b04 	str.w	r2, [r3], #4
 800ef94:	e7d8      	b.n	800ef48 <__multiply+0x50>
 800ef96:	f8b1 a000 	ldrh.w	sl, [r1]
 800ef9a:	f1ba 0f00 	cmp.w	sl, #0
 800ef9e:	d024      	beq.n	800efea <__multiply+0xf2>
 800efa0:	f104 0e14 	add.w	lr, r4, #20
 800efa4:	46a9      	mov	r9, r5
 800efa6:	f04f 0c00 	mov.w	ip, #0
 800efaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800efae:	f8d9 3000 	ldr.w	r3, [r9]
 800efb2:	fa1f fb87 	uxth.w	fp, r7
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	fb0a 330b 	mla	r3, sl, fp, r3
 800efbc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800efc0:	f8d9 7000 	ldr.w	r7, [r9]
 800efc4:	4463      	add	r3, ip
 800efc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800efca:	fb0a c70b 	mla	r7, sl, fp, ip
 800efce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800efd8:	4572      	cmp	r2, lr
 800efda:	f849 3b04 	str.w	r3, [r9], #4
 800efde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800efe2:	d8e2      	bhi.n	800efaa <__multiply+0xb2>
 800efe4:	9b01      	ldr	r3, [sp, #4]
 800efe6:	f845 c003 	str.w	ip, [r5, r3]
 800efea:	9b03      	ldr	r3, [sp, #12]
 800efec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eff0:	3104      	adds	r1, #4
 800eff2:	f1b9 0f00 	cmp.w	r9, #0
 800eff6:	d021      	beq.n	800f03c <__multiply+0x144>
 800eff8:	682b      	ldr	r3, [r5, #0]
 800effa:	f104 0c14 	add.w	ip, r4, #20
 800effe:	46ae      	mov	lr, r5
 800f000:	f04f 0a00 	mov.w	sl, #0
 800f004:	f8bc b000 	ldrh.w	fp, [ip]
 800f008:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f00c:	fb09 770b 	mla	r7, r9, fp, r7
 800f010:	4457      	add	r7, sl
 800f012:	b29b      	uxth	r3, r3
 800f014:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f018:	f84e 3b04 	str.w	r3, [lr], #4
 800f01c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f020:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f024:	f8be 3000 	ldrh.w	r3, [lr]
 800f028:	fb09 330a 	mla	r3, r9, sl, r3
 800f02c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f030:	4562      	cmp	r2, ip
 800f032:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f036:	d8e5      	bhi.n	800f004 <__multiply+0x10c>
 800f038:	9f01      	ldr	r7, [sp, #4]
 800f03a:	51eb      	str	r3, [r5, r7]
 800f03c:	3504      	adds	r5, #4
 800f03e:	e799      	b.n	800ef74 <__multiply+0x7c>
 800f040:	3e01      	subs	r6, #1
 800f042:	e79b      	b.n	800ef7c <__multiply+0x84>
 800f044:	08011c93 	.word	0x08011c93
 800f048:	08011ca4 	.word	0x08011ca4

0800f04c <__pow5mult>:
 800f04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f050:	4615      	mov	r5, r2
 800f052:	f012 0203 	ands.w	r2, r2, #3
 800f056:	4607      	mov	r7, r0
 800f058:	460e      	mov	r6, r1
 800f05a:	d007      	beq.n	800f06c <__pow5mult+0x20>
 800f05c:	4c25      	ldr	r4, [pc, #148]	@ (800f0f4 <__pow5mult+0xa8>)
 800f05e:	3a01      	subs	r2, #1
 800f060:	2300      	movs	r3, #0
 800f062:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f066:	f7ff fe55 	bl	800ed14 <__multadd>
 800f06a:	4606      	mov	r6, r0
 800f06c:	10ad      	asrs	r5, r5, #2
 800f06e:	d03d      	beq.n	800f0ec <__pow5mult+0xa0>
 800f070:	69fc      	ldr	r4, [r7, #28]
 800f072:	b97c      	cbnz	r4, 800f094 <__pow5mult+0x48>
 800f074:	2010      	movs	r0, #16
 800f076:	f7ff fd35 	bl	800eae4 <malloc>
 800f07a:	4602      	mov	r2, r0
 800f07c:	61f8      	str	r0, [r7, #28]
 800f07e:	b928      	cbnz	r0, 800f08c <__pow5mult+0x40>
 800f080:	4b1d      	ldr	r3, [pc, #116]	@ (800f0f8 <__pow5mult+0xac>)
 800f082:	481e      	ldr	r0, [pc, #120]	@ (800f0fc <__pow5mult+0xb0>)
 800f084:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f088:	f7fe fe78 	bl	800dd7c <__assert_func>
 800f08c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f090:	6004      	str	r4, [r0, #0]
 800f092:	60c4      	str	r4, [r0, #12]
 800f094:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f098:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f09c:	b94c      	cbnz	r4, 800f0b2 <__pow5mult+0x66>
 800f09e:	f240 2171 	movw	r1, #625	@ 0x271
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	f7ff ff12 	bl	800eecc <__i2b>
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	6003      	str	r3, [r0, #0]
 800f0b2:	f04f 0900 	mov.w	r9, #0
 800f0b6:	07eb      	lsls	r3, r5, #31
 800f0b8:	d50a      	bpl.n	800f0d0 <__pow5mult+0x84>
 800f0ba:	4631      	mov	r1, r6
 800f0bc:	4622      	mov	r2, r4
 800f0be:	4638      	mov	r0, r7
 800f0c0:	f7ff ff1a 	bl	800eef8 <__multiply>
 800f0c4:	4631      	mov	r1, r6
 800f0c6:	4680      	mov	r8, r0
 800f0c8:	4638      	mov	r0, r7
 800f0ca:	f7ff fe01 	bl	800ecd0 <_Bfree>
 800f0ce:	4646      	mov	r6, r8
 800f0d0:	106d      	asrs	r5, r5, #1
 800f0d2:	d00b      	beq.n	800f0ec <__pow5mult+0xa0>
 800f0d4:	6820      	ldr	r0, [r4, #0]
 800f0d6:	b938      	cbnz	r0, 800f0e8 <__pow5mult+0x9c>
 800f0d8:	4622      	mov	r2, r4
 800f0da:	4621      	mov	r1, r4
 800f0dc:	4638      	mov	r0, r7
 800f0de:	f7ff ff0b 	bl	800eef8 <__multiply>
 800f0e2:	6020      	str	r0, [r4, #0]
 800f0e4:	f8c0 9000 	str.w	r9, [r0]
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	e7e4      	b.n	800f0b6 <__pow5mult+0x6a>
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f2:	bf00      	nop
 800f0f4:	08011d00 	.word	0x08011d00
 800f0f8:	08011b81 	.word	0x08011b81
 800f0fc:	08011ca4 	.word	0x08011ca4

0800f100 <__lshift>:
 800f100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f104:	460c      	mov	r4, r1
 800f106:	6849      	ldr	r1, [r1, #4]
 800f108:	6923      	ldr	r3, [r4, #16]
 800f10a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f10e:	68a3      	ldr	r3, [r4, #8]
 800f110:	4607      	mov	r7, r0
 800f112:	4691      	mov	r9, r2
 800f114:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f118:	f108 0601 	add.w	r6, r8, #1
 800f11c:	42b3      	cmp	r3, r6
 800f11e:	db0b      	blt.n	800f138 <__lshift+0x38>
 800f120:	4638      	mov	r0, r7
 800f122:	f7ff fd95 	bl	800ec50 <_Balloc>
 800f126:	4605      	mov	r5, r0
 800f128:	b948      	cbnz	r0, 800f13e <__lshift+0x3e>
 800f12a:	4602      	mov	r2, r0
 800f12c:	4b28      	ldr	r3, [pc, #160]	@ (800f1d0 <__lshift+0xd0>)
 800f12e:	4829      	ldr	r0, [pc, #164]	@ (800f1d4 <__lshift+0xd4>)
 800f130:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f134:	f7fe fe22 	bl	800dd7c <__assert_func>
 800f138:	3101      	adds	r1, #1
 800f13a:	005b      	lsls	r3, r3, #1
 800f13c:	e7ee      	b.n	800f11c <__lshift+0x1c>
 800f13e:	2300      	movs	r3, #0
 800f140:	f100 0114 	add.w	r1, r0, #20
 800f144:	f100 0210 	add.w	r2, r0, #16
 800f148:	4618      	mov	r0, r3
 800f14a:	4553      	cmp	r3, sl
 800f14c:	db33      	blt.n	800f1b6 <__lshift+0xb6>
 800f14e:	6920      	ldr	r0, [r4, #16]
 800f150:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f154:	f104 0314 	add.w	r3, r4, #20
 800f158:	f019 091f 	ands.w	r9, r9, #31
 800f15c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f160:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f164:	d02b      	beq.n	800f1be <__lshift+0xbe>
 800f166:	f1c9 0e20 	rsb	lr, r9, #32
 800f16a:	468a      	mov	sl, r1
 800f16c:	2200      	movs	r2, #0
 800f16e:	6818      	ldr	r0, [r3, #0]
 800f170:	fa00 f009 	lsl.w	r0, r0, r9
 800f174:	4310      	orrs	r0, r2
 800f176:	f84a 0b04 	str.w	r0, [sl], #4
 800f17a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f17e:	459c      	cmp	ip, r3
 800f180:	fa22 f20e 	lsr.w	r2, r2, lr
 800f184:	d8f3      	bhi.n	800f16e <__lshift+0x6e>
 800f186:	ebac 0304 	sub.w	r3, ip, r4
 800f18a:	3b15      	subs	r3, #21
 800f18c:	f023 0303 	bic.w	r3, r3, #3
 800f190:	3304      	adds	r3, #4
 800f192:	f104 0015 	add.w	r0, r4, #21
 800f196:	4584      	cmp	ip, r0
 800f198:	bf38      	it	cc
 800f19a:	2304      	movcc	r3, #4
 800f19c:	50ca      	str	r2, [r1, r3]
 800f19e:	b10a      	cbz	r2, 800f1a4 <__lshift+0xa4>
 800f1a0:	f108 0602 	add.w	r6, r8, #2
 800f1a4:	3e01      	subs	r6, #1
 800f1a6:	4638      	mov	r0, r7
 800f1a8:	612e      	str	r6, [r5, #16]
 800f1aa:	4621      	mov	r1, r4
 800f1ac:	f7ff fd90 	bl	800ecd0 <_Bfree>
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	e7c5      	b.n	800f14a <__lshift+0x4a>
 800f1be:	3904      	subs	r1, #4
 800f1c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f1c8:	459c      	cmp	ip, r3
 800f1ca:	d8f9      	bhi.n	800f1c0 <__lshift+0xc0>
 800f1cc:	e7ea      	b.n	800f1a4 <__lshift+0xa4>
 800f1ce:	bf00      	nop
 800f1d0:	08011c93 	.word	0x08011c93
 800f1d4:	08011ca4 	.word	0x08011ca4

0800f1d8 <__mcmp>:
 800f1d8:	690a      	ldr	r2, [r1, #16]
 800f1da:	4603      	mov	r3, r0
 800f1dc:	6900      	ldr	r0, [r0, #16]
 800f1de:	1a80      	subs	r0, r0, r2
 800f1e0:	b530      	push	{r4, r5, lr}
 800f1e2:	d10e      	bne.n	800f202 <__mcmp+0x2a>
 800f1e4:	3314      	adds	r3, #20
 800f1e6:	3114      	adds	r1, #20
 800f1e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f1ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f1f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f1f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f1f8:	4295      	cmp	r5, r2
 800f1fa:	d003      	beq.n	800f204 <__mcmp+0x2c>
 800f1fc:	d205      	bcs.n	800f20a <__mcmp+0x32>
 800f1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f202:	bd30      	pop	{r4, r5, pc}
 800f204:	42a3      	cmp	r3, r4
 800f206:	d3f3      	bcc.n	800f1f0 <__mcmp+0x18>
 800f208:	e7fb      	b.n	800f202 <__mcmp+0x2a>
 800f20a:	2001      	movs	r0, #1
 800f20c:	e7f9      	b.n	800f202 <__mcmp+0x2a>
	...

0800f210 <__mdiff>:
 800f210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f214:	4689      	mov	r9, r1
 800f216:	4606      	mov	r6, r0
 800f218:	4611      	mov	r1, r2
 800f21a:	4648      	mov	r0, r9
 800f21c:	4614      	mov	r4, r2
 800f21e:	f7ff ffdb 	bl	800f1d8 <__mcmp>
 800f222:	1e05      	subs	r5, r0, #0
 800f224:	d112      	bne.n	800f24c <__mdiff+0x3c>
 800f226:	4629      	mov	r1, r5
 800f228:	4630      	mov	r0, r6
 800f22a:	f7ff fd11 	bl	800ec50 <_Balloc>
 800f22e:	4602      	mov	r2, r0
 800f230:	b928      	cbnz	r0, 800f23e <__mdiff+0x2e>
 800f232:	4b3f      	ldr	r3, [pc, #252]	@ (800f330 <__mdiff+0x120>)
 800f234:	f240 2137 	movw	r1, #567	@ 0x237
 800f238:	483e      	ldr	r0, [pc, #248]	@ (800f334 <__mdiff+0x124>)
 800f23a:	f7fe fd9f 	bl	800dd7c <__assert_func>
 800f23e:	2301      	movs	r3, #1
 800f240:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f244:	4610      	mov	r0, r2
 800f246:	b003      	add	sp, #12
 800f248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f24c:	bfbc      	itt	lt
 800f24e:	464b      	movlt	r3, r9
 800f250:	46a1      	movlt	r9, r4
 800f252:	4630      	mov	r0, r6
 800f254:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f258:	bfba      	itte	lt
 800f25a:	461c      	movlt	r4, r3
 800f25c:	2501      	movlt	r5, #1
 800f25e:	2500      	movge	r5, #0
 800f260:	f7ff fcf6 	bl	800ec50 <_Balloc>
 800f264:	4602      	mov	r2, r0
 800f266:	b918      	cbnz	r0, 800f270 <__mdiff+0x60>
 800f268:	4b31      	ldr	r3, [pc, #196]	@ (800f330 <__mdiff+0x120>)
 800f26a:	f240 2145 	movw	r1, #581	@ 0x245
 800f26e:	e7e3      	b.n	800f238 <__mdiff+0x28>
 800f270:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f274:	6926      	ldr	r6, [r4, #16]
 800f276:	60c5      	str	r5, [r0, #12]
 800f278:	f109 0310 	add.w	r3, r9, #16
 800f27c:	f109 0514 	add.w	r5, r9, #20
 800f280:	f104 0e14 	add.w	lr, r4, #20
 800f284:	f100 0b14 	add.w	fp, r0, #20
 800f288:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f28c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f290:	9301      	str	r3, [sp, #4]
 800f292:	46d9      	mov	r9, fp
 800f294:	f04f 0c00 	mov.w	ip, #0
 800f298:	9b01      	ldr	r3, [sp, #4]
 800f29a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f29e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f2a2:	9301      	str	r3, [sp, #4]
 800f2a4:	fa1f f38a 	uxth.w	r3, sl
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	b283      	uxth	r3, r0
 800f2ac:	1acb      	subs	r3, r1, r3
 800f2ae:	0c00      	lsrs	r0, r0, #16
 800f2b0:	4463      	add	r3, ip
 800f2b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f2b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f2c0:	4576      	cmp	r6, lr
 800f2c2:	f849 3b04 	str.w	r3, [r9], #4
 800f2c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f2ca:	d8e5      	bhi.n	800f298 <__mdiff+0x88>
 800f2cc:	1b33      	subs	r3, r6, r4
 800f2ce:	3b15      	subs	r3, #21
 800f2d0:	f023 0303 	bic.w	r3, r3, #3
 800f2d4:	3415      	adds	r4, #21
 800f2d6:	3304      	adds	r3, #4
 800f2d8:	42a6      	cmp	r6, r4
 800f2da:	bf38      	it	cc
 800f2dc:	2304      	movcc	r3, #4
 800f2de:	441d      	add	r5, r3
 800f2e0:	445b      	add	r3, fp
 800f2e2:	461e      	mov	r6, r3
 800f2e4:	462c      	mov	r4, r5
 800f2e6:	4544      	cmp	r4, r8
 800f2e8:	d30e      	bcc.n	800f308 <__mdiff+0xf8>
 800f2ea:	f108 0103 	add.w	r1, r8, #3
 800f2ee:	1b49      	subs	r1, r1, r5
 800f2f0:	f021 0103 	bic.w	r1, r1, #3
 800f2f4:	3d03      	subs	r5, #3
 800f2f6:	45a8      	cmp	r8, r5
 800f2f8:	bf38      	it	cc
 800f2fa:	2100      	movcc	r1, #0
 800f2fc:	440b      	add	r3, r1
 800f2fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f302:	b191      	cbz	r1, 800f32a <__mdiff+0x11a>
 800f304:	6117      	str	r7, [r2, #16]
 800f306:	e79d      	b.n	800f244 <__mdiff+0x34>
 800f308:	f854 1b04 	ldr.w	r1, [r4], #4
 800f30c:	46e6      	mov	lr, ip
 800f30e:	0c08      	lsrs	r0, r1, #16
 800f310:	fa1c fc81 	uxtah	ip, ip, r1
 800f314:	4471      	add	r1, lr
 800f316:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f31a:	b289      	uxth	r1, r1
 800f31c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f320:	f846 1b04 	str.w	r1, [r6], #4
 800f324:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f328:	e7dd      	b.n	800f2e6 <__mdiff+0xd6>
 800f32a:	3f01      	subs	r7, #1
 800f32c:	e7e7      	b.n	800f2fe <__mdiff+0xee>
 800f32e:	bf00      	nop
 800f330:	08011c93 	.word	0x08011c93
 800f334:	08011ca4 	.word	0x08011ca4

0800f338 <__ulp>:
 800f338:	b082      	sub	sp, #8
 800f33a:	ed8d 0b00 	vstr	d0, [sp]
 800f33e:	9a01      	ldr	r2, [sp, #4]
 800f340:	4b0f      	ldr	r3, [pc, #60]	@ (800f380 <__ulp+0x48>)
 800f342:	4013      	ands	r3, r2
 800f344:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f348:	2b00      	cmp	r3, #0
 800f34a:	dc08      	bgt.n	800f35e <__ulp+0x26>
 800f34c:	425b      	negs	r3, r3
 800f34e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f352:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f356:	da04      	bge.n	800f362 <__ulp+0x2a>
 800f358:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f35c:	4113      	asrs	r3, r2
 800f35e:	2200      	movs	r2, #0
 800f360:	e008      	b.n	800f374 <__ulp+0x3c>
 800f362:	f1a2 0314 	sub.w	r3, r2, #20
 800f366:	2b1e      	cmp	r3, #30
 800f368:	bfda      	itte	le
 800f36a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f36e:	40da      	lsrle	r2, r3
 800f370:	2201      	movgt	r2, #1
 800f372:	2300      	movs	r3, #0
 800f374:	4619      	mov	r1, r3
 800f376:	4610      	mov	r0, r2
 800f378:	ec41 0b10 	vmov	d0, r0, r1
 800f37c:	b002      	add	sp, #8
 800f37e:	4770      	bx	lr
 800f380:	7ff00000 	.word	0x7ff00000

0800f384 <__b2d>:
 800f384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f388:	6906      	ldr	r6, [r0, #16]
 800f38a:	f100 0814 	add.w	r8, r0, #20
 800f38e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f392:	1f37      	subs	r7, r6, #4
 800f394:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f398:	4610      	mov	r0, r2
 800f39a:	f7ff fd4b 	bl	800ee34 <__hi0bits>
 800f39e:	f1c0 0320 	rsb	r3, r0, #32
 800f3a2:	280a      	cmp	r0, #10
 800f3a4:	600b      	str	r3, [r1, #0]
 800f3a6:	491b      	ldr	r1, [pc, #108]	@ (800f414 <__b2d+0x90>)
 800f3a8:	dc15      	bgt.n	800f3d6 <__b2d+0x52>
 800f3aa:	f1c0 0c0b 	rsb	ip, r0, #11
 800f3ae:	fa22 f30c 	lsr.w	r3, r2, ip
 800f3b2:	45b8      	cmp	r8, r7
 800f3b4:	ea43 0501 	orr.w	r5, r3, r1
 800f3b8:	bf34      	ite	cc
 800f3ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f3be:	2300      	movcs	r3, #0
 800f3c0:	3015      	adds	r0, #21
 800f3c2:	fa02 f000 	lsl.w	r0, r2, r0
 800f3c6:	fa23 f30c 	lsr.w	r3, r3, ip
 800f3ca:	4303      	orrs	r3, r0
 800f3cc:	461c      	mov	r4, r3
 800f3ce:	ec45 4b10 	vmov	d0, r4, r5
 800f3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3d6:	45b8      	cmp	r8, r7
 800f3d8:	bf3a      	itte	cc
 800f3da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f3de:	f1a6 0708 	subcc.w	r7, r6, #8
 800f3e2:	2300      	movcs	r3, #0
 800f3e4:	380b      	subs	r0, #11
 800f3e6:	d012      	beq.n	800f40e <__b2d+0x8a>
 800f3e8:	f1c0 0120 	rsb	r1, r0, #32
 800f3ec:	fa23 f401 	lsr.w	r4, r3, r1
 800f3f0:	4082      	lsls	r2, r0
 800f3f2:	4322      	orrs	r2, r4
 800f3f4:	4547      	cmp	r7, r8
 800f3f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f3fa:	bf8c      	ite	hi
 800f3fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f400:	2200      	movls	r2, #0
 800f402:	4083      	lsls	r3, r0
 800f404:	40ca      	lsrs	r2, r1
 800f406:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f40a:	4313      	orrs	r3, r2
 800f40c:	e7de      	b.n	800f3cc <__b2d+0x48>
 800f40e:	ea42 0501 	orr.w	r5, r2, r1
 800f412:	e7db      	b.n	800f3cc <__b2d+0x48>
 800f414:	3ff00000 	.word	0x3ff00000

0800f418 <__d2b>:
 800f418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f41c:	460f      	mov	r7, r1
 800f41e:	2101      	movs	r1, #1
 800f420:	ec59 8b10 	vmov	r8, r9, d0
 800f424:	4616      	mov	r6, r2
 800f426:	f7ff fc13 	bl	800ec50 <_Balloc>
 800f42a:	4604      	mov	r4, r0
 800f42c:	b930      	cbnz	r0, 800f43c <__d2b+0x24>
 800f42e:	4602      	mov	r2, r0
 800f430:	4b23      	ldr	r3, [pc, #140]	@ (800f4c0 <__d2b+0xa8>)
 800f432:	4824      	ldr	r0, [pc, #144]	@ (800f4c4 <__d2b+0xac>)
 800f434:	f240 310f 	movw	r1, #783	@ 0x30f
 800f438:	f7fe fca0 	bl	800dd7c <__assert_func>
 800f43c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f440:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f444:	b10d      	cbz	r5, 800f44a <__d2b+0x32>
 800f446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f44a:	9301      	str	r3, [sp, #4]
 800f44c:	f1b8 0300 	subs.w	r3, r8, #0
 800f450:	d023      	beq.n	800f49a <__d2b+0x82>
 800f452:	4668      	mov	r0, sp
 800f454:	9300      	str	r3, [sp, #0]
 800f456:	f7ff fd0c 	bl	800ee72 <__lo0bits>
 800f45a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f45e:	b1d0      	cbz	r0, 800f496 <__d2b+0x7e>
 800f460:	f1c0 0320 	rsb	r3, r0, #32
 800f464:	fa02 f303 	lsl.w	r3, r2, r3
 800f468:	430b      	orrs	r3, r1
 800f46a:	40c2      	lsrs	r2, r0
 800f46c:	6163      	str	r3, [r4, #20]
 800f46e:	9201      	str	r2, [sp, #4]
 800f470:	9b01      	ldr	r3, [sp, #4]
 800f472:	61a3      	str	r3, [r4, #24]
 800f474:	2b00      	cmp	r3, #0
 800f476:	bf0c      	ite	eq
 800f478:	2201      	moveq	r2, #1
 800f47a:	2202      	movne	r2, #2
 800f47c:	6122      	str	r2, [r4, #16]
 800f47e:	b1a5      	cbz	r5, 800f4aa <__d2b+0x92>
 800f480:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f484:	4405      	add	r5, r0
 800f486:	603d      	str	r5, [r7, #0]
 800f488:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f48c:	6030      	str	r0, [r6, #0]
 800f48e:	4620      	mov	r0, r4
 800f490:	b003      	add	sp, #12
 800f492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f496:	6161      	str	r1, [r4, #20]
 800f498:	e7ea      	b.n	800f470 <__d2b+0x58>
 800f49a:	a801      	add	r0, sp, #4
 800f49c:	f7ff fce9 	bl	800ee72 <__lo0bits>
 800f4a0:	9b01      	ldr	r3, [sp, #4]
 800f4a2:	6163      	str	r3, [r4, #20]
 800f4a4:	3020      	adds	r0, #32
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	e7e8      	b.n	800f47c <__d2b+0x64>
 800f4aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f4ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f4b2:	6038      	str	r0, [r7, #0]
 800f4b4:	6918      	ldr	r0, [r3, #16]
 800f4b6:	f7ff fcbd 	bl	800ee34 <__hi0bits>
 800f4ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f4be:	e7e5      	b.n	800f48c <__d2b+0x74>
 800f4c0:	08011c93 	.word	0x08011c93
 800f4c4:	08011ca4 	.word	0x08011ca4

0800f4c8 <__ratio>:
 800f4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4cc:	b085      	sub	sp, #20
 800f4ce:	e9cd 1000 	strd	r1, r0, [sp]
 800f4d2:	a902      	add	r1, sp, #8
 800f4d4:	f7ff ff56 	bl	800f384 <__b2d>
 800f4d8:	9800      	ldr	r0, [sp, #0]
 800f4da:	a903      	add	r1, sp, #12
 800f4dc:	ec55 4b10 	vmov	r4, r5, d0
 800f4e0:	f7ff ff50 	bl	800f384 <__b2d>
 800f4e4:	9b01      	ldr	r3, [sp, #4]
 800f4e6:	6919      	ldr	r1, [r3, #16]
 800f4e8:	9b00      	ldr	r3, [sp, #0]
 800f4ea:	691b      	ldr	r3, [r3, #16]
 800f4ec:	1ac9      	subs	r1, r1, r3
 800f4ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f4f2:	1a9b      	subs	r3, r3, r2
 800f4f4:	ec5b ab10 	vmov	sl, fp, d0
 800f4f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	bfce      	itee	gt
 800f500:	462a      	movgt	r2, r5
 800f502:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f506:	465a      	movle	r2, fp
 800f508:	462f      	mov	r7, r5
 800f50a:	46d9      	mov	r9, fp
 800f50c:	bfcc      	ite	gt
 800f50e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f512:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f516:	464b      	mov	r3, r9
 800f518:	4652      	mov	r2, sl
 800f51a:	4620      	mov	r0, r4
 800f51c:	4639      	mov	r1, r7
 800f51e:	f7f1 f995 	bl	800084c <__aeabi_ddiv>
 800f522:	ec41 0b10 	vmov	d0, r0, r1
 800f526:	b005      	add	sp, #20
 800f528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f52c <__copybits>:
 800f52c:	3901      	subs	r1, #1
 800f52e:	b570      	push	{r4, r5, r6, lr}
 800f530:	1149      	asrs	r1, r1, #5
 800f532:	6914      	ldr	r4, [r2, #16]
 800f534:	3101      	adds	r1, #1
 800f536:	f102 0314 	add.w	r3, r2, #20
 800f53a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f53e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f542:	1f05      	subs	r5, r0, #4
 800f544:	42a3      	cmp	r3, r4
 800f546:	d30c      	bcc.n	800f562 <__copybits+0x36>
 800f548:	1aa3      	subs	r3, r4, r2
 800f54a:	3b11      	subs	r3, #17
 800f54c:	f023 0303 	bic.w	r3, r3, #3
 800f550:	3211      	adds	r2, #17
 800f552:	42a2      	cmp	r2, r4
 800f554:	bf88      	it	hi
 800f556:	2300      	movhi	r3, #0
 800f558:	4418      	add	r0, r3
 800f55a:	2300      	movs	r3, #0
 800f55c:	4288      	cmp	r0, r1
 800f55e:	d305      	bcc.n	800f56c <__copybits+0x40>
 800f560:	bd70      	pop	{r4, r5, r6, pc}
 800f562:	f853 6b04 	ldr.w	r6, [r3], #4
 800f566:	f845 6f04 	str.w	r6, [r5, #4]!
 800f56a:	e7eb      	b.n	800f544 <__copybits+0x18>
 800f56c:	f840 3b04 	str.w	r3, [r0], #4
 800f570:	e7f4      	b.n	800f55c <__copybits+0x30>

0800f572 <__any_on>:
 800f572:	f100 0214 	add.w	r2, r0, #20
 800f576:	6900      	ldr	r0, [r0, #16]
 800f578:	114b      	asrs	r3, r1, #5
 800f57a:	4298      	cmp	r0, r3
 800f57c:	b510      	push	{r4, lr}
 800f57e:	db11      	blt.n	800f5a4 <__any_on+0x32>
 800f580:	dd0a      	ble.n	800f598 <__any_on+0x26>
 800f582:	f011 011f 	ands.w	r1, r1, #31
 800f586:	d007      	beq.n	800f598 <__any_on+0x26>
 800f588:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f58c:	fa24 f001 	lsr.w	r0, r4, r1
 800f590:	fa00 f101 	lsl.w	r1, r0, r1
 800f594:	428c      	cmp	r4, r1
 800f596:	d10b      	bne.n	800f5b0 <__any_on+0x3e>
 800f598:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d803      	bhi.n	800f5a8 <__any_on+0x36>
 800f5a0:	2000      	movs	r0, #0
 800f5a2:	bd10      	pop	{r4, pc}
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	e7f7      	b.n	800f598 <__any_on+0x26>
 800f5a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f5ac:	2900      	cmp	r1, #0
 800f5ae:	d0f5      	beq.n	800f59c <__any_on+0x2a>
 800f5b0:	2001      	movs	r0, #1
 800f5b2:	e7f6      	b.n	800f5a2 <__any_on+0x30>

0800f5b4 <sulp>:
 800f5b4:	b570      	push	{r4, r5, r6, lr}
 800f5b6:	4604      	mov	r4, r0
 800f5b8:	460d      	mov	r5, r1
 800f5ba:	ec45 4b10 	vmov	d0, r4, r5
 800f5be:	4616      	mov	r6, r2
 800f5c0:	f7ff feba 	bl	800f338 <__ulp>
 800f5c4:	ec51 0b10 	vmov	r0, r1, d0
 800f5c8:	b17e      	cbz	r6, 800f5ea <sulp+0x36>
 800f5ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f5ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	dd09      	ble.n	800f5ea <sulp+0x36>
 800f5d6:	051b      	lsls	r3, r3, #20
 800f5d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f5dc:	2400      	movs	r4, #0
 800f5de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f5e2:	4622      	mov	r2, r4
 800f5e4:	462b      	mov	r3, r5
 800f5e6:	f7f1 f807 	bl	80005f8 <__aeabi_dmul>
 800f5ea:	ec41 0b10 	vmov	d0, r0, r1
 800f5ee:	bd70      	pop	{r4, r5, r6, pc}

0800f5f0 <_strtod_l>:
 800f5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f4:	b09f      	sub	sp, #124	@ 0x7c
 800f5f6:	460c      	mov	r4, r1
 800f5f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800f5fe:	9005      	str	r0, [sp, #20]
 800f600:	f04f 0a00 	mov.w	sl, #0
 800f604:	f04f 0b00 	mov.w	fp, #0
 800f608:	460a      	mov	r2, r1
 800f60a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f60c:	7811      	ldrb	r1, [r2, #0]
 800f60e:	292b      	cmp	r1, #43	@ 0x2b
 800f610:	d04a      	beq.n	800f6a8 <_strtod_l+0xb8>
 800f612:	d838      	bhi.n	800f686 <_strtod_l+0x96>
 800f614:	290d      	cmp	r1, #13
 800f616:	d832      	bhi.n	800f67e <_strtod_l+0x8e>
 800f618:	2908      	cmp	r1, #8
 800f61a:	d832      	bhi.n	800f682 <_strtod_l+0x92>
 800f61c:	2900      	cmp	r1, #0
 800f61e:	d03b      	beq.n	800f698 <_strtod_l+0xa8>
 800f620:	2200      	movs	r2, #0
 800f622:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f624:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f626:	782a      	ldrb	r2, [r5, #0]
 800f628:	2a30      	cmp	r2, #48	@ 0x30
 800f62a:	f040 80b3 	bne.w	800f794 <_strtod_l+0x1a4>
 800f62e:	786a      	ldrb	r2, [r5, #1]
 800f630:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f634:	2a58      	cmp	r2, #88	@ 0x58
 800f636:	d16e      	bne.n	800f716 <_strtod_l+0x126>
 800f638:	9302      	str	r3, [sp, #8]
 800f63a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f63c:	9301      	str	r3, [sp, #4]
 800f63e:	ab1a      	add	r3, sp, #104	@ 0x68
 800f640:	9300      	str	r3, [sp, #0]
 800f642:	4a8e      	ldr	r2, [pc, #568]	@ (800f87c <_strtod_l+0x28c>)
 800f644:	9805      	ldr	r0, [sp, #20]
 800f646:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f648:	a919      	add	r1, sp, #100	@ 0x64
 800f64a:	f001 fac7 	bl	8010bdc <__gethex>
 800f64e:	f010 060f 	ands.w	r6, r0, #15
 800f652:	4604      	mov	r4, r0
 800f654:	d005      	beq.n	800f662 <_strtod_l+0x72>
 800f656:	2e06      	cmp	r6, #6
 800f658:	d128      	bne.n	800f6ac <_strtod_l+0xbc>
 800f65a:	3501      	adds	r5, #1
 800f65c:	2300      	movs	r3, #0
 800f65e:	9519      	str	r5, [sp, #100]	@ 0x64
 800f660:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f662:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f664:	2b00      	cmp	r3, #0
 800f666:	f040 858e 	bne.w	8010186 <_strtod_l+0xb96>
 800f66a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f66c:	b1cb      	cbz	r3, 800f6a2 <_strtod_l+0xb2>
 800f66e:	4652      	mov	r2, sl
 800f670:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f674:	ec43 2b10 	vmov	d0, r2, r3
 800f678:	b01f      	add	sp, #124	@ 0x7c
 800f67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f67e:	2920      	cmp	r1, #32
 800f680:	d1ce      	bne.n	800f620 <_strtod_l+0x30>
 800f682:	3201      	adds	r2, #1
 800f684:	e7c1      	b.n	800f60a <_strtod_l+0x1a>
 800f686:	292d      	cmp	r1, #45	@ 0x2d
 800f688:	d1ca      	bne.n	800f620 <_strtod_l+0x30>
 800f68a:	2101      	movs	r1, #1
 800f68c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f68e:	1c51      	adds	r1, r2, #1
 800f690:	9119      	str	r1, [sp, #100]	@ 0x64
 800f692:	7852      	ldrb	r2, [r2, #1]
 800f694:	2a00      	cmp	r2, #0
 800f696:	d1c5      	bne.n	800f624 <_strtod_l+0x34>
 800f698:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f69a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f040 8570 	bne.w	8010182 <_strtod_l+0xb92>
 800f6a2:	4652      	mov	r2, sl
 800f6a4:	465b      	mov	r3, fp
 800f6a6:	e7e5      	b.n	800f674 <_strtod_l+0x84>
 800f6a8:	2100      	movs	r1, #0
 800f6aa:	e7ef      	b.n	800f68c <_strtod_l+0x9c>
 800f6ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f6ae:	b13a      	cbz	r2, 800f6c0 <_strtod_l+0xd0>
 800f6b0:	2135      	movs	r1, #53	@ 0x35
 800f6b2:	a81c      	add	r0, sp, #112	@ 0x70
 800f6b4:	f7ff ff3a 	bl	800f52c <__copybits>
 800f6b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f6ba:	9805      	ldr	r0, [sp, #20]
 800f6bc:	f7ff fb08 	bl	800ecd0 <_Bfree>
 800f6c0:	3e01      	subs	r6, #1
 800f6c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f6c4:	2e04      	cmp	r6, #4
 800f6c6:	d806      	bhi.n	800f6d6 <_strtod_l+0xe6>
 800f6c8:	e8df f006 	tbb	[pc, r6]
 800f6cc:	201d0314 	.word	0x201d0314
 800f6d0:	14          	.byte	0x14
 800f6d1:	00          	.byte	0x00
 800f6d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f6d6:	05e1      	lsls	r1, r4, #23
 800f6d8:	bf48      	it	mi
 800f6da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f6de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f6e2:	0d1b      	lsrs	r3, r3, #20
 800f6e4:	051b      	lsls	r3, r3, #20
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d1bb      	bne.n	800f662 <_strtod_l+0x72>
 800f6ea:	f7fe fb05 	bl	800dcf8 <__errno>
 800f6ee:	2322      	movs	r3, #34	@ 0x22
 800f6f0:	6003      	str	r3, [r0, #0]
 800f6f2:	e7b6      	b.n	800f662 <_strtod_l+0x72>
 800f6f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f6f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f6fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f700:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f704:	e7e7      	b.n	800f6d6 <_strtod_l+0xe6>
 800f706:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f884 <_strtod_l+0x294>
 800f70a:	e7e4      	b.n	800f6d6 <_strtod_l+0xe6>
 800f70c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f710:	f04f 3aff 	mov.w	sl, #4294967295
 800f714:	e7df      	b.n	800f6d6 <_strtod_l+0xe6>
 800f716:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f718:	1c5a      	adds	r2, r3, #1
 800f71a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f71c:	785b      	ldrb	r3, [r3, #1]
 800f71e:	2b30      	cmp	r3, #48	@ 0x30
 800f720:	d0f9      	beq.n	800f716 <_strtod_l+0x126>
 800f722:	2b00      	cmp	r3, #0
 800f724:	d09d      	beq.n	800f662 <_strtod_l+0x72>
 800f726:	2301      	movs	r3, #1
 800f728:	9309      	str	r3, [sp, #36]	@ 0x24
 800f72a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f72c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f72e:	2300      	movs	r3, #0
 800f730:	9308      	str	r3, [sp, #32]
 800f732:	930a      	str	r3, [sp, #40]	@ 0x28
 800f734:	461f      	mov	r7, r3
 800f736:	220a      	movs	r2, #10
 800f738:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f73a:	7805      	ldrb	r5, [r0, #0]
 800f73c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f740:	b2d9      	uxtb	r1, r3
 800f742:	2909      	cmp	r1, #9
 800f744:	d928      	bls.n	800f798 <_strtod_l+0x1a8>
 800f746:	494e      	ldr	r1, [pc, #312]	@ (800f880 <_strtod_l+0x290>)
 800f748:	2201      	movs	r2, #1
 800f74a:	f7fe f9f3 	bl	800db34 <strncmp>
 800f74e:	2800      	cmp	r0, #0
 800f750:	d032      	beq.n	800f7b8 <_strtod_l+0x1c8>
 800f752:	2000      	movs	r0, #0
 800f754:	462a      	mov	r2, r5
 800f756:	4681      	mov	r9, r0
 800f758:	463d      	mov	r5, r7
 800f75a:	4603      	mov	r3, r0
 800f75c:	2a65      	cmp	r2, #101	@ 0x65
 800f75e:	d001      	beq.n	800f764 <_strtod_l+0x174>
 800f760:	2a45      	cmp	r2, #69	@ 0x45
 800f762:	d114      	bne.n	800f78e <_strtod_l+0x19e>
 800f764:	b91d      	cbnz	r5, 800f76e <_strtod_l+0x17e>
 800f766:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f768:	4302      	orrs	r2, r0
 800f76a:	d095      	beq.n	800f698 <_strtod_l+0xa8>
 800f76c:	2500      	movs	r5, #0
 800f76e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f770:	1c62      	adds	r2, r4, #1
 800f772:	9219      	str	r2, [sp, #100]	@ 0x64
 800f774:	7862      	ldrb	r2, [r4, #1]
 800f776:	2a2b      	cmp	r2, #43	@ 0x2b
 800f778:	d077      	beq.n	800f86a <_strtod_l+0x27a>
 800f77a:	2a2d      	cmp	r2, #45	@ 0x2d
 800f77c:	d07b      	beq.n	800f876 <_strtod_l+0x286>
 800f77e:	f04f 0c00 	mov.w	ip, #0
 800f782:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f786:	2909      	cmp	r1, #9
 800f788:	f240 8082 	bls.w	800f890 <_strtod_l+0x2a0>
 800f78c:	9419      	str	r4, [sp, #100]	@ 0x64
 800f78e:	f04f 0800 	mov.w	r8, #0
 800f792:	e0a2      	b.n	800f8da <_strtod_l+0x2ea>
 800f794:	2300      	movs	r3, #0
 800f796:	e7c7      	b.n	800f728 <_strtod_l+0x138>
 800f798:	2f08      	cmp	r7, #8
 800f79a:	bfd5      	itete	le
 800f79c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f79e:	9908      	ldrgt	r1, [sp, #32]
 800f7a0:	fb02 3301 	mlale	r3, r2, r1, r3
 800f7a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f7a8:	f100 0001 	add.w	r0, r0, #1
 800f7ac:	bfd4      	ite	le
 800f7ae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f7b0:	9308      	strgt	r3, [sp, #32]
 800f7b2:	3701      	adds	r7, #1
 800f7b4:	9019      	str	r0, [sp, #100]	@ 0x64
 800f7b6:	e7bf      	b.n	800f738 <_strtod_l+0x148>
 800f7b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f7ba:	1c5a      	adds	r2, r3, #1
 800f7bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800f7be:	785a      	ldrb	r2, [r3, #1]
 800f7c0:	b37f      	cbz	r7, 800f822 <_strtod_l+0x232>
 800f7c2:	4681      	mov	r9, r0
 800f7c4:	463d      	mov	r5, r7
 800f7c6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f7ca:	2b09      	cmp	r3, #9
 800f7cc:	d912      	bls.n	800f7f4 <_strtod_l+0x204>
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e7c4      	b.n	800f75c <_strtod_l+0x16c>
 800f7d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f7d4:	1c5a      	adds	r2, r3, #1
 800f7d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800f7d8:	785a      	ldrb	r2, [r3, #1]
 800f7da:	3001      	adds	r0, #1
 800f7dc:	2a30      	cmp	r2, #48	@ 0x30
 800f7de:	d0f8      	beq.n	800f7d2 <_strtod_l+0x1e2>
 800f7e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f7e4:	2b08      	cmp	r3, #8
 800f7e6:	f200 84d3 	bhi.w	8010190 <_strtod_l+0xba0>
 800f7ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f7ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800f7ee:	4681      	mov	r9, r0
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	4605      	mov	r5, r0
 800f7f4:	3a30      	subs	r2, #48	@ 0x30
 800f7f6:	f100 0301 	add.w	r3, r0, #1
 800f7fa:	d02a      	beq.n	800f852 <_strtod_l+0x262>
 800f7fc:	4499      	add	r9, r3
 800f7fe:	eb00 0c05 	add.w	ip, r0, r5
 800f802:	462b      	mov	r3, r5
 800f804:	210a      	movs	r1, #10
 800f806:	4563      	cmp	r3, ip
 800f808:	d10d      	bne.n	800f826 <_strtod_l+0x236>
 800f80a:	1c69      	adds	r1, r5, #1
 800f80c:	4401      	add	r1, r0
 800f80e:	4428      	add	r0, r5
 800f810:	2808      	cmp	r0, #8
 800f812:	dc16      	bgt.n	800f842 <_strtod_l+0x252>
 800f814:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f816:	230a      	movs	r3, #10
 800f818:	fb03 2300 	mla	r3, r3, r0, r2
 800f81c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f81e:	2300      	movs	r3, #0
 800f820:	e018      	b.n	800f854 <_strtod_l+0x264>
 800f822:	4638      	mov	r0, r7
 800f824:	e7da      	b.n	800f7dc <_strtod_l+0x1ec>
 800f826:	2b08      	cmp	r3, #8
 800f828:	f103 0301 	add.w	r3, r3, #1
 800f82c:	dc03      	bgt.n	800f836 <_strtod_l+0x246>
 800f82e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f830:	434e      	muls	r6, r1
 800f832:	960a      	str	r6, [sp, #40]	@ 0x28
 800f834:	e7e7      	b.n	800f806 <_strtod_l+0x216>
 800f836:	2b10      	cmp	r3, #16
 800f838:	bfde      	ittt	le
 800f83a:	9e08      	ldrle	r6, [sp, #32]
 800f83c:	434e      	mulle	r6, r1
 800f83e:	9608      	strle	r6, [sp, #32]
 800f840:	e7e1      	b.n	800f806 <_strtod_l+0x216>
 800f842:	280f      	cmp	r0, #15
 800f844:	dceb      	bgt.n	800f81e <_strtod_l+0x22e>
 800f846:	9808      	ldr	r0, [sp, #32]
 800f848:	230a      	movs	r3, #10
 800f84a:	fb03 2300 	mla	r3, r3, r0, r2
 800f84e:	9308      	str	r3, [sp, #32]
 800f850:	e7e5      	b.n	800f81e <_strtod_l+0x22e>
 800f852:	4629      	mov	r1, r5
 800f854:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f856:	1c50      	adds	r0, r2, #1
 800f858:	9019      	str	r0, [sp, #100]	@ 0x64
 800f85a:	7852      	ldrb	r2, [r2, #1]
 800f85c:	4618      	mov	r0, r3
 800f85e:	460d      	mov	r5, r1
 800f860:	e7b1      	b.n	800f7c6 <_strtod_l+0x1d6>
 800f862:	f04f 0900 	mov.w	r9, #0
 800f866:	2301      	movs	r3, #1
 800f868:	e77d      	b.n	800f766 <_strtod_l+0x176>
 800f86a:	f04f 0c00 	mov.w	ip, #0
 800f86e:	1ca2      	adds	r2, r4, #2
 800f870:	9219      	str	r2, [sp, #100]	@ 0x64
 800f872:	78a2      	ldrb	r2, [r4, #2]
 800f874:	e785      	b.n	800f782 <_strtod_l+0x192>
 800f876:	f04f 0c01 	mov.w	ip, #1
 800f87a:	e7f8      	b.n	800f86e <_strtod_l+0x27e>
 800f87c:	08011e18 	.word	0x08011e18
 800f880:	08011e00 	.word	0x08011e00
 800f884:	7ff00000 	.word	0x7ff00000
 800f888:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f88a:	1c51      	adds	r1, r2, #1
 800f88c:	9119      	str	r1, [sp, #100]	@ 0x64
 800f88e:	7852      	ldrb	r2, [r2, #1]
 800f890:	2a30      	cmp	r2, #48	@ 0x30
 800f892:	d0f9      	beq.n	800f888 <_strtod_l+0x298>
 800f894:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f898:	2908      	cmp	r1, #8
 800f89a:	f63f af78 	bhi.w	800f78e <_strtod_l+0x19e>
 800f89e:	3a30      	subs	r2, #48	@ 0x30
 800f8a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f8a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f8a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f8a6:	f04f 080a 	mov.w	r8, #10
 800f8aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f8ac:	1c56      	adds	r6, r2, #1
 800f8ae:	9619      	str	r6, [sp, #100]	@ 0x64
 800f8b0:	7852      	ldrb	r2, [r2, #1]
 800f8b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f8b6:	f1be 0f09 	cmp.w	lr, #9
 800f8ba:	d939      	bls.n	800f930 <_strtod_l+0x340>
 800f8bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f8be:	1a76      	subs	r6, r6, r1
 800f8c0:	2e08      	cmp	r6, #8
 800f8c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f8c6:	dc03      	bgt.n	800f8d0 <_strtod_l+0x2e0>
 800f8c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f8ca:	4588      	cmp	r8, r1
 800f8cc:	bfa8      	it	ge
 800f8ce:	4688      	movge	r8, r1
 800f8d0:	f1bc 0f00 	cmp.w	ip, #0
 800f8d4:	d001      	beq.n	800f8da <_strtod_l+0x2ea>
 800f8d6:	f1c8 0800 	rsb	r8, r8, #0
 800f8da:	2d00      	cmp	r5, #0
 800f8dc:	d14e      	bne.n	800f97c <_strtod_l+0x38c>
 800f8de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f8e0:	4308      	orrs	r0, r1
 800f8e2:	f47f aebe 	bne.w	800f662 <_strtod_l+0x72>
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	f47f aed6 	bne.w	800f698 <_strtod_l+0xa8>
 800f8ec:	2a69      	cmp	r2, #105	@ 0x69
 800f8ee:	d028      	beq.n	800f942 <_strtod_l+0x352>
 800f8f0:	dc25      	bgt.n	800f93e <_strtod_l+0x34e>
 800f8f2:	2a49      	cmp	r2, #73	@ 0x49
 800f8f4:	d025      	beq.n	800f942 <_strtod_l+0x352>
 800f8f6:	2a4e      	cmp	r2, #78	@ 0x4e
 800f8f8:	f47f aece 	bne.w	800f698 <_strtod_l+0xa8>
 800f8fc:	499b      	ldr	r1, [pc, #620]	@ (800fb6c <_strtod_l+0x57c>)
 800f8fe:	a819      	add	r0, sp, #100	@ 0x64
 800f900:	f001 fb8e 	bl	8011020 <__match>
 800f904:	2800      	cmp	r0, #0
 800f906:	f43f aec7 	beq.w	800f698 <_strtod_l+0xa8>
 800f90a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	2b28      	cmp	r3, #40	@ 0x28
 800f910:	d12e      	bne.n	800f970 <_strtod_l+0x380>
 800f912:	4997      	ldr	r1, [pc, #604]	@ (800fb70 <_strtod_l+0x580>)
 800f914:	aa1c      	add	r2, sp, #112	@ 0x70
 800f916:	a819      	add	r0, sp, #100	@ 0x64
 800f918:	f001 fb96 	bl	8011048 <__hexnan>
 800f91c:	2805      	cmp	r0, #5
 800f91e:	d127      	bne.n	800f970 <_strtod_l+0x380>
 800f920:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f922:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f926:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f92a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f92e:	e698      	b.n	800f662 <_strtod_l+0x72>
 800f930:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f932:	fb08 2101 	mla	r1, r8, r1, r2
 800f936:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f93a:	920e      	str	r2, [sp, #56]	@ 0x38
 800f93c:	e7b5      	b.n	800f8aa <_strtod_l+0x2ba>
 800f93e:	2a6e      	cmp	r2, #110	@ 0x6e
 800f940:	e7da      	b.n	800f8f8 <_strtod_l+0x308>
 800f942:	498c      	ldr	r1, [pc, #560]	@ (800fb74 <_strtod_l+0x584>)
 800f944:	a819      	add	r0, sp, #100	@ 0x64
 800f946:	f001 fb6b 	bl	8011020 <__match>
 800f94a:	2800      	cmp	r0, #0
 800f94c:	f43f aea4 	beq.w	800f698 <_strtod_l+0xa8>
 800f950:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f952:	4989      	ldr	r1, [pc, #548]	@ (800fb78 <_strtod_l+0x588>)
 800f954:	3b01      	subs	r3, #1
 800f956:	a819      	add	r0, sp, #100	@ 0x64
 800f958:	9319      	str	r3, [sp, #100]	@ 0x64
 800f95a:	f001 fb61 	bl	8011020 <__match>
 800f95e:	b910      	cbnz	r0, 800f966 <_strtod_l+0x376>
 800f960:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f962:	3301      	adds	r3, #1
 800f964:	9319      	str	r3, [sp, #100]	@ 0x64
 800f966:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800fb88 <_strtod_l+0x598>
 800f96a:	f04f 0a00 	mov.w	sl, #0
 800f96e:	e678      	b.n	800f662 <_strtod_l+0x72>
 800f970:	4882      	ldr	r0, [pc, #520]	@ (800fb7c <_strtod_l+0x58c>)
 800f972:	f001 f8a9 	bl	8010ac8 <nan>
 800f976:	ec5b ab10 	vmov	sl, fp, d0
 800f97a:	e672      	b.n	800f662 <_strtod_l+0x72>
 800f97c:	eba8 0309 	sub.w	r3, r8, r9
 800f980:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f982:	9309      	str	r3, [sp, #36]	@ 0x24
 800f984:	2f00      	cmp	r7, #0
 800f986:	bf08      	it	eq
 800f988:	462f      	moveq	r7, r5
 800f98a:	2d10      	cmp	r5, #16
 800f98c:	462c      	mov	r4, r5
 800f98e:	bfa8      	it	ge
 800f990:	2410      	movge	r4, #16
 800f992:	f7f0 fdb7 	bl	8000504 <__aeabi_ui2d>
 800f996:	2d09      	cmp	r5, #9
 800f998:	4682      	mov	sl, r0
 800f99a:	468b      	mov	fp, r1
 800f99c:	dc13      	bgt.n	800f9c6 <_strtod_l+0x3d6>
 800f99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f43f ae5e 	beq.w	800f662 <_strtod_l+0x72>
 800f9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9a8:	dd78      	ble.n	800fa9c <_strtod_l+0x4ac>
 800f9aa:	2b16      	cmp	r3, #22
 800f9ac:	dc5f      	bgt.n	800fa6e <_strtod_l+0x47e>
 800f9ae:	4974      	ldr	r1, [pc, #464]	@ (800fb80 <_strtod_l+0x590>)
 800f9b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f9b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9b8:	4652      	mov	r2, sl
 800f9ba:	465b      	mov	r3, fp
 800f9bc:	f7f0 fe1c 	bl	80005f8 <__aeabi_dmul>
 800f9c0:	4682      	mov	sl, r0
 800f9c2:	468b      	mov	fp, r1
 800f9c4:	e64d      	b.n	800f662 <_strtod_l+0x72>
 800f9c6:	4b6e      	ldr	r3, [pc, #440]	@ (800fb80 <_strtod_l+0x590>)
 800f9c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f9cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f9d0:	f7f0 fe12 	bl	80005f8 <__aeabi_dmul>
 800f9d4:	4682      	mov	sl, r0
 800f9d6:	9808      	ldr	r0, [sp, #32]
 800f9d8:	468b      	mov	fp, r1
 800f9da:	f7f0 fd93 	bl	8000504 <__aeabi_ui2d>
 800f9de:	4602      	mov	r2, r0
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	4650      	mov	r0, sl
 800f9e4:	4659      	mov	r1, fp
 800f9e6:	f7f0 fc51 	bl	800028c <__adddf3>
 800f9ea:	2d0f      	cmp	r5, #15
 800f9ec:	4682      	mov	sl, r0
 800f9ee:	468b      	mov	fp, r1
 800f9f0:	ddd5      	ble.n	800f99e <_strtod_l+0x3ae>
 800f9f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9f4:	1b2c      	subs	r4, r5, r4
 800f9f6:	441c      	add	r4, r3
 800f9f8:	2c00      	cmp	r4, #0
 800f9fa:	f340 8096 	ble.w	800fb2a <_strtod_l+0x53a>
 800f9fe:	f014 030f 	ands.w	r3, r4, #15
 800fa02:	d00a      	beq.n	800fa1a <_strtod_l+0x42a>
 800fa04:	495e      	ldr	r1, [pc, #376]	@ (800fb80 <_strtod_l+0x590>)
 800fa06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fa0a:	4652      	mov	r2, sl
 800fa0c:	465b      	mov	r3, fp
 800fa0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa12:	f7f0 fdf1 	bl	80005f8 <__aeabi_dmul>
 800fa16:	4682      	mov	sl, r0
 800fa18:	468b      	mov	fp, r1
 800fa1a:	f034 040f 	bics.w	r4, r4, #15
 800fa1e:	d073      	beq.n	800fb08 <_strtod_l+0x518>
 800fa20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800fa24:	dd48      	ble.n	800fab8 <_strtod_l+0x4c8>
 800fa26:	2400      	movs	r4, #0
 800fa28:	46a0      	mov	r8, r4
 800fa2a:	940a      	str	r4, [sp, #40]	@ 0x28
 800fa2c:	46a1      	mov	r9, r4
 800fa2e:	9a05      	ldr	r2, [sp, #20]
 800fa30:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fb88 <_strtod_l+0x598>
 800fa34:	2322      	movs	r3, #34	@ 0x22
 800fa36:	6013      	str	r3, [r2, #0]
 800fa38:	f04f 0a00 	mov.w	sl, #0
 800fa3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f43f ae0f 	beq.w	800f662 <_strtod_l+0x72>
 800fa44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fa46:	9805      	ldr	r0, [sp, #20]
 800fa48:	f7ff f942 	bl	800ecd0 <_Bfree>
 800fa4c:	9805      	ldr	r0, [sp, #20]
 800fa4e:	4649      	mov	r1, r9
 800fa50:	f7ff f93e 	bl	800ecd0 <_Bfree>
 800fa54:	9805      	ldr	r0, [sp, #20]
 800fa56:	4641      	mov	r1, r8
 800fa58:	f7ff f93a 	bl	800ecd0 <_Bfree>
 800fa5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa5e:	9805      	ldr	r0, [sp, #20]
 800fa60:	f7ff f936 	bl	800ecd0 <_Bfree>
 800fa64:	9805      	ldr	r0, [sp, #20]
 800fa66:	4621      	mov	r1, r4
 800fa68:	f7ff f932 	bl	800ecd0 <_Bfree>
 800fa6c:	e5f9      	b.n	800f662 <_strtod_l+0x72>
 800fa6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fa74:	4293      	cmp	r3, r2
 800fa76:	dbbc      	blt.n	800f9f2 <_strtod_l+0x402>
 800fa78:	4c41      	ldr	r4, [pc, #260]	@ (800fb80 <_strtod_l+0x590>)
 800fa7a:	f1c5 050f 	rsb	r5, r5, #15
 800fa7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fa82:	4652      	mov	r2, sl
 800fa84:	465b      	mov	r3, fp
 800fa86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa8a:	f7f0 fdb5 	bl	80005f8 <__aeabi_dmul>
 800fa8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa90:	1b5d      	subs	r5, r3, r5
 800fa92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fa96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fa9a:	e78f      	b.n	800f9bc <_strtod_l+0x3cc>
 800fa9c:	3316      	adds	r3, #22
 800fa9e:	dba8      	blt.n	800f9f2 <_strtod_l+0x402>
 800faa0:	4b37      	ldr	r3, [pc, #220]	@ (800fb80 <_strtod_l+0x590>)
 800faa2:	eba9 0808 	sub.w	r8, r9, r8
 800faa6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800faaa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800faae:	4650      	mov	r0, sl
 800fab0:	4659      	mov	r1, fp
 800fab2:	f7f0 fecb 	bl	800084c <__aeabi_ddiv>
 800fab6:	e783      	b.n	800f9c0 <_strtod_l+0x3d0>
 800fab8:	4b32      	ldr	r3, [pc, #200]	@ (800fb84 <_strtod_l+0x594>)
 800faba:	9308      	str	r3, [sp, #32]
 800fabc:	2300      	movs	r3, #0
 800fabe:	1124      	asrs	r4, r4, #4
 800fac0:	4650      	mov	r0, sl
 800fac2:	4659      	mov	r1, fp
 800fac4:	461e      	mov	r6, r3
 800fac6:	2c01      	cmp	r4, #1
 800fac8:	dc21      	bgt.n	800fb0e <_strtod_l+0x51e>
 800faca:	b10b      	cbz	r3, 800fad0 <_strtod_l+0x4e0>
 800facc:	4682      	mov	sl, r0
 800face:	468b      	mov	fp, r1
 800fad0:	492c      	ldr	r1, [pc, #176]	@ (800fb84 <_strtod_l+0x594>)
 800fad2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fad6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fada:	4652      	mov	r2, sl
 800fadc:	465b      	mov	r3, fp
 800fade:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fae2:	f7f0 fd89 	bl	80005f8 <__aeabi_dmul>
 800fae6:	4b28      	ldr	r3, [pc, #160]	@ (800fb88 <_strtod_l+0x598>)
 800fae8:	460a      	mov	r2, r1
 800faea:	400b      	ands	r3, r1
 800faec:	4927      	ldr	r1, [pc, #156]	@ (800fb8c <_strtod_l+0x59c>)
 800faee:	428b      	cmp	r3, r1
 800faf0:	4682      	mov	sl, r0
 800faf2:	d898      	bhi.n	800fa26 <_strtod_l+0x436>
 800faf4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800faf8:	428b      	cmp	r3, r1
 800fafa:	bf86      	itte	hi
 800fafc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800fb90 <_strtod_l+0x5a0>
 800fb00:	f04f 3aff 	movhi.w	sl, #4294967295
 800fb04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fb08:	2300      	movs	r3, #0
 800fb0a:	9308      	str	r3, [sp, #32]
 800fb0c:	e07a      	b.n	800fc04 <_strtod_l+0x614>
 800fb0e:	07e2      	lsls	r2, r4, #31
 800fb10:	d505      	bpl.n	800fb1e <_strtod_l+0x52e>
 800fb12:	9b08      	ldr	r3, [sp, #32]
 800fb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb18:	f7f0 fd6e 	bl	80005f8 <__aeabi_dmul>
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	9a08      	ldr	r2, [sp, #32]
 800fb20:	3208      	adds	r2, #8
 800fb22:	3601      	adds	r6, #1
 800fb24:	1064      	asrs	r4, r4, #1
 800fb26:	9208      	str	r2, [sp, #32]
 800fb28:	e7cd      	b.n	800fac6 <_strtod_l+0x4d6>
 800fb2a:	d0ed      	beq.n	800fb08 <_strtod_l+0x518>
 800fb2c:	4264      	negs	r4, r4
 800fb2e:	f014 020f 	ands.w	r2, r4, #15
 800fb32:	d00a      	beq.n	800fb4a <_strtod_l+0x55a>
 800fb34:	4b12      	ldr	r3, [pc, #72]	@ (800fb80 <_strtod_l+0x590>)
 800fb36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb3a:	4650      	mov	r0, sl
 800fb3c:	4659      	mov	r1, fp
 800fb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb42:	f7f0 fe83 	bl	800084c <__aeabi_ddiv>
 800fb46:	4682      	mov	sl, r0
 800fb48:	468b      	mov	fp, r1
 800fb4a:	1124      	asrs	r4, r4, #4
 800fb4c:	d0dc      	beq.n	800fb08 <_strtod_l+0x518>
 800fb4e:	2c1f      	cmp	r4, #31
 800fb50:	dd20      	ble.n	800fb94 <_strtod_l+0x5a4>
 800fb52:	2400      	movs	r4, #0
 800fb54:	46a0      	mov	r8, r4
 800fb56:	940a      	str	r4, [sp, #40]	@ 0x28
 800fb58:	46a1      	mov	r9, r4
 800fb5a:	9a05      	ldr	r2, [sp, #20]
 800fb5c:	2322      	movs	r3, #34	@ 0x22
 800fb5e:	f04f 0a00 	mov.w	sl, #0
 800fb62:	f04f 0b00 	mov.w	fp, #0
 800fb66:	6013      	str	r3, [r2, #0]
 800fb68:	e768      	b.n	800fa3c <_strtod_l+0x44c>
 800fb6a:	bf00      	nop
 800fb6c:	08011b55 	.word	0x08011b55
 800fb70:	08011e04 	.word	0x08011e04
 800fb74:	08011b4d 	.word	0x08011b4d
 800fb78:	08011c31 	.word	0x08011c31
 800fb7c:	08011c2d 	.word	0x08011c2d
 800fb80:	08011d38 	.word	0x08011d38
 800fb84:	08011d10 	.word	0x08011d10
 800fb88:	7ff00000 	.word	0x7ff00000
 800fb8c:	7ca00000 	.word	0x7ca00000
 800fb90:	7fefffff 	.word	0x7fefffff
 800fb94:	f014 0310 	ands.w	r3, r4, #16
 800fb98:	bf18      	it	ne
 800fb9a:	236a      	movne	r3, #106	@ 0x6a
 800fb9c:	4ea9      	ldr	r6, [pc, #676]	@ (800fe44 <_strtod_l+0x854>)
 800fb9e:	9308      	str	r3, [sp, #32]
 800fba0:	4650      	mov	r0, sl
 800fba2:	4659      	mov	r1, fp
 800fba4:	2300      	movs	r3, #0
 800fba6:	07e2      	lsls	r2, r4, #31
 800fba8:	d504      	bpl.n	800fbb4 <_strtod_l+0x5c4>
 800fbaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fbae:	f7f0 fd23 	bl	80005f8 <__aeabi_dmul>
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	1064      	asrs	r4, r4, #1
 800fbb6:	f106 0608 	add.w	r6, r6, #8
 800fbba:	d1f4      	bne.n	800fba6 <_strtod_l+0x5b6>
 800fbbc:	b10b      	cbz	r3, 800fbc2 <_strtod_l+0x5d2>
 800fbbe:	4682      	mov	sl, r0
 800fbc0:	468b      	mov	fp, r1
 800fbc2:	9b08      	ldr	r3, [sp, #32]
 800fbc4:	b1b3      	cbz	r3, 800fbf4 <_strtod_l+0x604>
 800fbc6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fbca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	4659      	mov	r1, fp
 800fbd2:	dd0f      	ble.n	800fbf4 <_strtod_l+0x604>
 800fbd4:	2b1f      	cmp	r3, #31
 800fbd6:	dd55      	ble.n	800fc84 <_strtod_l+0x694>
 800fbd8:	2b34      	cmp	r3, #52	@ 0x34
 800fbda:	bfde      	ittt	le
 800fbdc:	f04f 33ff 	movle.w	r3, #4294967295
 800fbe0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fbe4:	4093      	lslle	r3, r2
 800fbe6:	f04f 0a00 	mov.w	sl, #0
 800fbea:	bfcc      	ite	gt
 800fbec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fbf0:	ea03 0b01 	andle.w	fp, r3, r1
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	4650      	mov	r0, sl
 800fbfa:	4659      	mov	r1, fp
 800fbfc:	f7f0 ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc00:	2800      	cmp	r0, #0
 800fc02:	d1a6      	bne.n	800fb52 <_strtod_l+0x562>
 800fc04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc06:	9300      	str	r3, [sp, #0]
 800fc08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fc0a:	9805      	ldr	r0, [sp, #20]
 800fc0c:	462b      	mov	r3, r5
 800fc0e:	463a      	mov	r2, r7
 800fc10:	f7ff f8c6 	bl	800eda0 <__s2b>
 800fc14:	900a      	str	r0, [sp, #40]	@ 0x28
 800fc16:	2800      	cmp	r0, #0
 800fc18:	f43f af05 	beq.w	800fa26 <_strtod_l+0x436>
 800fc1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc1e:	2a00      	cmp	r2, #0
 800fc20:	eba9 0308 	sub.w	r3, r9, r8
 800fc24:	bfa8      	it	ge
 800fc26:	2300      	movge	r3, #0
 800fc28:	9312      	str	r3, [sp, #72]	@ 0x48
 800fc2a:	2400      	movs	r4, #0
 800fc2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fc30:	9316      	str	r3, [sp, #88]	@ 0x58
 800fc32:	46a0      	mov	r8, r4
 800fc34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc36:	9805      	ldr	r0, [sp, #20]
 800fc38:	6859      	ldr	r1, [r3, #4]
 800fc3a:	f7ff f809 	bl	800ec50 <_Balloc>
 800fc3e:	4681      	mov	r9, r0
 800fc40:	2800      	cmp	r0, #0
 800fc42:	f43f aef4 	beq.w	800fa2e <_strtod_l+0x43e>
 800fc46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc48:	691a      	ldr	r2, [r3, #16]
 800fc4a:	3202      	adds	r2, #2
 800fc4c:	f103 010c 	add.w	r1, r3, #12
 800fc50:	0092      	lsls	r2, r2, #2
 800fc52:	300c      	adds	r0, #12
 800fc54:	f7fe f87d 	bl	800dd52 <memcpy>
 800fc58:	ec4b ab10 	vmov	d0, sl, fp
 800fc5c:	9805      	ldr	r0, [sp, #20]
 800fc5e:	aa1c      	add	r2, sp, #112	@ 0x70
 800fc60:	a91b      	add	r1, sp, #108	@ 0x6c
 800fc62:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800fc66:	f7ff fbd7 	bl	800f418 <__d2b>
 800fc6a:	901a      	str	r0, [sp, #104]	@ 0x68
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	f43f aede 	beq.w	800fa2e <_strtod_l+0x43e>
 800fc72:	9805      	ldr	r0, [sp, #20]
 800fc74:	2101      	movs	r1, #1
 800fc76:	f7ff f929 	bl	800eecc <__i2b>
 800fc7a:	4680      	mov	r8, r0
 800fc7c:	b948      	cbnz	r0, 800fc92 <_strtod_l+0x6a2>
 800fc7e:	f04f 0800 	mov.w	r8, #0
 800fc82:	e6d4      	b.n	800fa2e <_strtod_l+0x43e>
 800fc84:	f04f 32ff 	mov.w	r2, #4294967295
 800fc88:	fa02 f303 	lsl.w	r3, r2, r3
 800fc8c:	ea03 0a0a 	and.w	sl, r3, sl
 800fc90:	e7b0      	b.n	800fbf4 <_strtod_l+0x604>
 800fc92:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fc94:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fc96:	2d00      	cmp	r5, #0
 800fc98:	bfab      	itete	ge
 800fc9a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fc9c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fc9e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fca0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fca2:	bfac      	ite	ge
 800fca4:	18ef      	addge	r7, r5, r3
 800fca6:	1b5e      	sublt	r6, r3, r5
 800fca8:	9b08      	ldr	r3, [sp, #32]
 800fcaa:	1aed      	subs	r5, r5, r3
 800fcac:	4415      	add	r5, r2
 800fcae:	4b66      	ldr	r3, [pc, #408]	@ (800fe48 <_strtod_l+0x858>)
 800fcb0:	3d01      	subs	r5, #1
 800fcb2:	429d      	cmp	r5, r3
 800fcb4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fcb8:	da50      	bge.n	800fd5c <_strtod_l+0x76c>
 800fcba:	1b5b      	subs	r3, r3, r5
 800fcbc:	2b1f      	cmp	r3, #31
 800fcbe:	eba2 0203 	sub.w	r2, r2, r3
 800fcc2:	f04f 0101 	mov.w	r1, #1
 800fcc6:	dc3d      	bgt.n	800fd44 <_strtod_l+0x754>
 800fcc8:	fa01 f303 	lsl.w	r3, r1, r3
 800fccc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fcce:	2300      	movs	r3, #0
 800fcd0:	9310      	str	r3, [sp, #64]	@ 0x40
 800fcd2:	18bd      	adds	r5, r7, r2
 800fcd4:	9b08      	ldr	r3, [sp, #32]
 800fcd6:	42af      	cmp	r7, r5
 800fcd8:	4416      	add	r6, r2
 800fcda:	441e      	add	r6, r3
 800fcdc:	463b      	mov	r3, r7
 800fcde:	bfa8      	it	ge
 800fce0:	462b      	movge	r3, r5
 800fce2:	42b3      	cmp	r3, r6
 800fce4:	bfa8      	it	ge
 800fce6:	4633      	movge	r3, r6
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	bfc2      	ittt	gt
 800fcec:	1aed      	subgt	r5, r5, r3
 800fcee:	1af6      	subgt	r6, r6, r3
 800fcf0:	1aff      	subgt	r7, r7, r3
 800fcf2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	dd16      	ble.n	800fd26 <_strtod_l+0x736>
 800fcf8:	4641      	mov	r1, r8
 800fcfa:	9805      	ldr	r0, [sp, #20]
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	f7ff f9a5 	bl	800f04c <__pow5mult>
 800fd02:	4680      	mov	r8, r0
 800fd04:	2800      	cmp	r0, #0
 800fd06:	d0ba      	beq.n	800fc7e <_strtod_l+0x68e>
 800fd08:	4601      	mov	r1, r0
 800fd0a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fd0c:	9805      	ldr	r0, [sp, #20]
 800fd0e:	f7ff f8f3 	bl	800eef8 <__multiply>
 800fd12:	900e      	str	r0, [sp, #56]	@ 0x38
 800fd14:	2800      	cmp	r0, #0
 800fd16:	f43f ae8a 	beq.w	800fa2e <_strtod_l+0x43e>
 800fd1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd1c:	9805      	ldr	r0, [sp, #20]
 800fd1e:	f7fe ffd7 	bl	800ecd0 <_Bfree>
 800fd22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd24:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd26:	2d00      	cmp	r5, #0
 800fd28:	dc1d      	bgt.n	800fd66 <_strtod_l+0x776>
 800fd2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	dd23      	ble.n	800fd78 <_strtod_l+0x788>
 800fd30:	4649      	mov	r1, r9
 800fd32:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fd34:	9805      	ldr	r0, [sp, #20]
 800fd36:	f7ff f989 	bl	800f04c <__pow5mult>
 800fd3a:	4681      	mov	r9, r0
 800fd3c:	b9e0      	cbnz	r0, 800fd78 <_strtod_l+0x788>
 800fd3e:	f04f 0900 	mov.w	r9, #0
 800fd42:	e674      	b.n	800fa2e <_strtod_l+0x43e>
 800fd44:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fd48:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fd4c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fd50:	35e2      	adds	r5, #226	@ 0xe2
 800fd52:	fa01 f305 	lsl.w	r3, r1, r5
 800fd56:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd58:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fd5a:	e7ba      	b.n	800fcd2 <_strtod_l+0x6e2>
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd60:	2301      	movs	r3, #1
 800fd62:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fd64:	e7b5      	b.n	800fcd2 <_strtod_l+0x6e2>
 800fd66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd68:	9805      	ldr	r0, [sp, #20]
 800fd6a:	462a      	mov	r2, r5
 800fd6c:	f7ff f9c8 	bl	800f100 <__lshift>
 800fd70:	901a      	str	r0, [sp, #104]	@ 0x68
 800fd72:	2800      	cmp	r0, #0
 800fd74:	d1d9      	bne.n	800fd2a <_strtod_l+0x73a>
 800fd76:	e65a      	b.n	800fa2e <_strtod_l+0x43e>
 800fd78:	2e00      	cmp	r6, #0
 800fd7a:	dd07      	ble.n	800fd8c <_strtod_l+0x79c>
 800fd7c:	4649      	mov	r1, r9
 800fd7e:	9805      	ldr	r0, [sp, #20]
 800fd80:	4632      	mov	r2, r6
 800fd82:	f7ff f9bd 	bl	800f100 <__lshift>
 800fd86:	4681      	mov	r9, r0
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	d0d8      	beq.n	800fd3e <_strtod_l+0x74e>
 800fd8c:	2f00      	cmp	r7, #0
 800fd8e:	dd08      	ble.n	800fda2 <_strtod_l+0x7b2>
 800fd90:	4641      	mov	r1, r8
 800fd92:	9805      	ldr	r0, [sp, #20]
 800fd94:	463a      	mov	r2, r7
 800fd96:	f7ff f9b3 	bl	800f100 <__lshift>
 800fd9a:	4680      	mov	r8, r0
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	f43f ae46 	beq.w	800fa2e <_strtod_l+0x43e>
 800fda2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fda4:	9805      	ldr	r0, [sp, #20]
 800fda6:	464a      	mov	r2, r9
 800fda8:	f7ff fa32 	bl	800f210 <__mdiff>
 800fdac:	4604      	mov	r4, r0
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	f43f ae3d 	beq.w	800fa2e <_strtod_l+0x43e>
 800fdb4:	68c3      	ldr	r3, [r0, #12]
 800fdb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fdb8:	2300      	movs	r3, #0
 800fdba:	60c3      	str	r3, [r0, #12]
 800fdbc:	4641      	mov	r1, r8
 800fdbe:	f7ff fa0b 	bl	800f1d8 <__mcmp>
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	da46      	bge.n	800fe54 <_strtod_l+0x864>
 800fdc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdc8:	ea53 030a 	orrs.w	r3, r3, sl
 800fdcc:	d16c      	bne.n	800fea8 <_strtod_l+0x8b8>
 800fdce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d168      	bne.n	800fea8 <_strtod_l+0x8b8>
 800fdd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fdda:	0d1b      	lsrs	r3, r3, #20
 800fddc:	051b      	lsls	r3, r3, #20
 800fdde:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fde2:	d961      	bls.n	800fea8 <_strtod_l+0x8b8>
 800fde4:	6963      	ldr	r3, [r4, #20]
 800fde6:	b913      	cbnz	r3, 800fdee <_strtod_l+0x7fe>
 800fde8:	6923      	ldr	r3, [r4, #16]
 800fdea:	2b01      	cmp	r3, #1
 800fdec:	dd5c      	ble.n	800fea8 <_strtod_l+0x8b8>
 800fdee:	4621      	mov	r1, r4
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	9805      	ldr	r0, [sp, #20]
 800fdf4:	f7ff f984 	bl	800f100 <__lshift>
 800fdf8:	4641      	mov	r1, r8
 800fdfa:	4604      	mov	r4, r0
 800fdfc:	f7ff f9ec 	bl	800f1d8 <__mcmp>
 800fe00:	2800      	cmp	r0, #0
 800fe02:	dd51      	ble.n	800fea8 <_strtod_l+0x8b8>
 800fe04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fe08:	9a08      	ldr	r2, [sp, #32]
 800fe0a:	0d1b      	lsrs	r3, r3, #20
 800fe0c:	051b      	lsls	r3, r3, #20
 800fe0e:	2a00      	cmp	r2, #0
 800fe10:	d06b      	beq.n	800feea <_strtod_l+0x8fa>
 800fe12:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fe16:	d868      	bhi.n	800feea <_strtod_l+0x8fa>
 800fe18:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fe1c:	f67f ae9d 	bls.w	800fb5a <_strtod_l+0x56a>
 800fe20:	4b0a      	ldr	r3, [pc, #40]	@ (800fe4c <_strtod_l+0x85c>)
 800fe22:	4650      	mov	r0, sl
 800fe24:	4659      	mov	r1, fp
 800fe26:	2200      	movs	r2, #0
 800fe28:	f7f0 fbe6 	bl	80005f8 <__aeabi_dmul>
 800fe2c:	4b08      	ldr	r3, [pc, #32]	@ (800fe50 <_strtod_l+0x860>)
 800fe2e:	400b      	ands	r3, r1
 800fe30:	4682      	mov	sl, r0
 800fe32:	468b      	mov	fp, r1
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f47f ae05 	bne.w	800fa44 <_strtod_l+0x454>
 800fe3a:	9a05      	ldr	r2, [sp, #20]
 800fe3c:	2322      	movs	r3, #34	@ 0x22
 800fe3e:	6013      	str	r3, [r2, #0]
 800fe40:	e600      	b.n	800fa44 <_strtod_l+0x454>
 800fe42:	bf00      	nop
 800fe44:	08011e30 	.word	0x08011e30
 800fe48:	fffffc02 	.word	0xfffffc02
 800fe4c:	39500000 	.word	0x39500000
 800fe50:	7ff00000 	.word	0x7ff00000
 800fe54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fe58:	d165      	bne.n	800ff26 <_strtod_l+0x936>
 800fe5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fe5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe60:	b35a      	cbz	r2, 800feba <_strtod_l+0x8ca>
 800fe62:	4a9f      	ldr	r2, [pc, #636]	@ (80100e0 <_strtod_l+0xaf0>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d12b      	bne.n	800fec0 <_strtod_l+0x8d0>
 800fe68:	9b08      	ldr	r3, [sp, #32]
 800fe6a:	4651      	mov	r1, sl
 800fe6c:	b303      	cbz	r3, 800feb0 <_strtod_l+0x8c0>
 800fe6e:	4b9d      	ldr	r3, [pc, #628]	@ (80100e4 <_strtod_l+0xaf4>)
 800fe70:	465a      	mov	r2, fp
 800fe72:	4013      	ands	r3, r2
 800fe74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fe78:	f04f 32ff 	mov.w	r2, #4294967295
 800fe7c:	d81b      	bhi.n	800feb6 <_strtod_l+0x8c6>
 800fe7e:	0d1b      	lsrs	r3, r3, #20
 800fe80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fe84:	fa02 f303 	lsl.w	r3, r2, r3
 800fe88:	4299      	cmp	r1, r3
 800fe8a:	d119      	bne.n	800fec0 <_strtod_l+0x8d0>
 800fe8c:	4b96      	ldr	r3, [pc, #600]	@ (80100e8 <_strtod_l+0xaf8>)
 800fe8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d102      	bne.n	800fe9a <_strtod_l+0x8aa>
 800fe94:	3101      	adds	r1, #1
 800fe96:	f43f adca 	beq.w	800fa2e <_strtod_l+0x43e>
 800fe9a:	4b92      	ldr	r3, [pc, #584]	@ (80100e4 <_strtod_l+0xaf4>)
 800fe9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe9e:	401a      	ands	r2, r3
 800fea0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fea4:	f04f 0a00 	mov.w	sl, #0
 800fea8:	9b08      	ldr	r3, [sp, #32]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d1b8      	bne.n	800fe20 <_strtod_l+0x830>
 800feae:	e5c9      	b.n	800fa44 <_strtod_l+0x454>
 800feb0:	f04f 33ff 	mov.w	r3, #4294967295
 800feb4:	e7e8      	b.n	800fe88 <_strtod_l+0x898>
 800feb6:	4613      	mov	r3, r2
 800feb8:	e7e6      	b.n	800fe88 <_strtod_l+0x898>
 800feba:	ea53 030a 	orrs.w	r3, r3, sl
 800febe:	d0a1      	beq.n	800fe04 <_strtod_l+0x814>
 800fec0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fec2:	b1db      	cbz	r3, 800fefc <_strtod_l+0x90c>
 800fec4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fec6:	4213      	tst	r3, r2
 800fec8:	d0ee      	beq.n	800fea8 <_strtod_l+0x8b8>
 800feca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fecc:	9a08      	ldr	r2, [sp, #32]
 800fece:	4650      	mov	r0, sl
 800fed0:	4659      	mov	r1, fp
 800fed2:	b1bb      	cbz	r3, 800ff04 <_strtod_l+0x914>
 800fed4:	f7ff fb6e 	bl	800f5b4 <sulp>
 800fed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fedc:	ec53 2b10 	vmov	r2, r3, d0
 800fee0:	f7f0 f9d4 	bl	800028c <__adddf3>
 800fee4:	4682      	mov	sl, r0
 800fee6:	468b      	mov	fp, r1
 800fee8:	e7de      	b.n	800fea8 <_strtod_l+0x8b8>
 800feea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800feee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fef2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fef6:	f04f 3aff 	mov.w	sl, #4294967295
 800fefa:	e7d5      	b.n	800fea8 <_strtod_l+0x8b8>
 800fefc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fefe:	ea13 0f0a 	tst.w	r3, sl
 800ff02:	e7e1      	b.n	800fec8 <_strtod_l+0x8d8>
 800ff04:	f7ff fb56 	bl	800f5b4 <sulp>
 800ff08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff0c:	ec53 2b10 	vmov	r2, r3, d0
 800ff10:	f7f0 f9ba 	bl	8000288 <__aeabi_dsub>
 800ff14:	2200      	movs	r2, #0
 800ff16:	2300      	movs	r3, #0
 800ff18:	4682      	mov	sl, r0
 800ff1a:	468b      	mov	fp, r1
 800ff1c:	f7f0 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff20:	2800      	cmp	r0, #0
 800ff22:	d0c1      	beq.n	800fea8 <_strtod_l+0x8b8>
 800ff24:	e619      	b.n	800fb5a <_strtod_l+0x56a>
 800ff26:	4641      	mov	r1, r8
 800ff28:	4620      	mov	r0, r4
 800ff2a:	f7ff facd 	bl	800f4c8 <__ratio>
 800ff2e:	ec57 6b10 	vmov	r6, r7, d0
 800ff32:	2200      	movs	r2, #0
 800ff34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ff38:	4630      	mov	r0, r6
 800ff3a:	4639      	mov	r1, r7
 800ff3c:	f7f0 fdd8 	bl	8000af0 <__aeabi_dcmple>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d06f      	beq.n	8010024 <_strtod_l+0xa34>
 800ff44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d17a      	bne.n	8010040 <_strtod_l+0xa50>
 800ff4a:	f1ba 0f00 	cmp.w	sl, #0
 800ff4e:	d158      	bne.n	8010002 <_strtod_l+0xa12>
 800ff50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d15a      	bne.n	8010010 <_strtod_l+0xa20>
 800ff5a:	4b64      	ldr	r3, [pc, #400]	@ (80100ec <_strtod_l+0xafc>)
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	4630      	mov	r0, r6
 800ff60:	4639      	mov	r1, r7
 800ff62:	f7f0 fdbb 	bl	8000adc <__aeabi_dcmplt>
 800ff66:	2800      	cmp	r0, #0
 800ff68:	d159      	bne.n	801001e <_strtod_l+0xa2e>
 800ff6a:	4630      	mov	r0, r6
 800ff6c:	4639      	mov	r1, r7
 800ff6e:	4b60      	ldr	r3, [pc, #384]	@ (80100f0 <_strtod_l+0xb00>)
 800ff70:	2200      	movs	r2, #0
 800ff72:	f7f0 fb41 	bl	80005f8 <__aeabi_dmul>
 800ff76:	4606      	mov	r6, r0
 800ff78:	460f      	mov	r7, r1
 800ff7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ff7e:	9606      	str	r6, [sp, #24]
 800ff80:	9307      	str	r3, [sp, #28]
 800ff82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ff86:	4d57      	ldr	r5, [pc, #348]	@ (80100e4 <_strtod_l+0xaf4>)
 800ff88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ff8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff8e:	401d      	ands	r5, r3
 800ff90:	4b58      	ldr	r3, [pc, #352]	@ (80100f4 <_strtod_l+0xb04>)
 800ff92:	429d      	cmp	r5, r3
 800ff94:	f040 80b2 	bne.w	80100fc <_strtod_l+0xb0c>
 800ff98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ff9e:	ec4b ab10 	vmov	d0, sl, fp
 800ffa2:	f7ff f9c9 	bl	800f338 <__ulp>
 800ffa6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ffaa:	ec51 0b10 	vmov	r0, r1, d0
 800ffae:	f7f0 fb23 	bl	80005f8 <__aeabi_dmul>
 800ffb2:	4652      	mov	r2, sl
 800ffb4:	465b      	mov	r3, fp
 800ffb6:	f7f0 f969 	bl	800028c <__adddf3>
 800ffba:	460b      	mov	r3, r1
 800ffbc:	4949      	ldr	r1, [pc, #292]	@ (80100e4 <_strtod_l+0xaf4>)
 800ffbe:	4a4e      	ldr	r2, [pc, #312]	@ (80100f8 <_strtod_l+0xb08>)
 800ffc0:	4019      	ands	r1, r3
 800ffc2:	4291      	cmp	r1, r2
 800ffc4:	4682      	mov	sl, r0
 800ffc6:	d942      	bls.n	801004e <_strtod_l+0xa5e>
 800ffc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ffca:	4b47      	ldr	r3, [pc, #284]	@ (80100e8 <_strtod_l+0xaf8>)
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d103      	bne.n	800ffd8 <_strtod_l+0x9e8>
 800ffd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	f43f ad2b 	beq.w	800fa2e <_strtod_l+0x43e>
 800ffd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80100e8 <_strtod_l+0xaf8>
 800ffdc:	f04f 3aff 	mov.w	sl, #4294967295
 800ffe0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ffe2:	9805      	ldr	r0, [sp, #20]
 800ffe4:	f7fe fe74 	bl	800ecd0 <_Bfree>
 800ffe8:	9805      	ldr	r0, [sp, #20]
 800ffea:	4649      	mov	r1, r9
 800ffec:	f7fe fe70 	bl	800ecd0 <_Bfree>
 800fff0:	9805      	ldr	r0, [sp, #20]
 800fff2:	4641      	mov	r1, r8
 800fff4:	f7fe fe6c 	bl	800ecd0 <_Bfree>
 800fff8:	9805      	ldr	r0, [sp, #20]
 800fffa:	4621      	mov	r1, r4
 800fffc:	f7fe fe68 	bl	800ecd0 <_Bfree>
 8010000:	e618      	b.n	800fc34 <_strtod_l+0x644>
 8010002:	f1ba 0f01 	cmp.w	sl, #1
 8010006:	d103      	bne.n	8010010 <_strtod_l+0xa20>
 8010008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801000a:	2b00      	cmp	r3, #0
 801000c:	f43f ada5 	beq.w	800fb5a <_strtod_l+0x56a>
 8010010:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80100c0 <_strtod_l+0xad0>
 8010014:	4f35      	ldr	r7, [pc, #212]	@ (80100ec <_strtod_l+0xafc>)
 8010016:	ed8d 7b06 	vstr	d7, [sp, #24]
 801001a:	2600      	movs	r6, #0
 801001c:	e7b1      	b.n	800ff82 <_strtod_l+0x992>
 801001e:	4f34      	ldr	r7, [pc, #208]	@ (80100f0 <_strtod_l+0xb00>)
 8010020:	2600      	movs	r6, #0
 8010022:	e7aa      	b.n	800ff7a <_strtod_l+0x98a>
 8010024:	4b32      	ldr	r3, [pc, #200]	@ (80100f0 <_strtod_l+0xb00>)
 8010026:	4630      	mov	r0, r6
 8010028:	4639      	mov	r1, r7
 801002a:	2200      	movs	r2, #0
 801002c:	f7f0 fae4 	bl	80005f8 <__aeabi_dmul>
 8010030:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010032:	4606      	mov	r6, r0
 8010034:	460f      	mov	r7, r1
 8010036:	2b00      	cmp	r3, #0
 8010038:	d09f      	beq.n	800ff7a <_strtod_l+0x98a>
 801003a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801003e:	e7a0      	b.n	800ff82 <_strtod_l+0x992>
 8010040:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80100c8 <_strtod_l+0xad8>
 8010044:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010048:	ec57 6b17 	vmov	r6, r7, d7
 801004c:	e799      	b.n	800ff82 <_strtod_l+0x992>
 801004e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010052:	9b08      	ldr	r3, [sp, #32]
 8010054:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1c1      	bne.n	800ffe0 <_strtod_l+0x9f0>
 801005c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010060:	0d1b      	lsrs	r3, r3, #20
 8010062:	051b      	lsls	r3, r3, #20
 8010064:	429d      	cmp	r5, r3
 8010066:	d1bb      	bne.n	800ffe0 <_strtod_l+0x9f0>
 8010068:	4630      	mov	r0, r6
 801006a:	4639      	mov	r1, r7
 801006c:	f7f0 fe24 	bl	8000cb8 <__aeabi_d2lz>
 8010070:	f7f0 fa94 	bl	800059c <__aeabi_l2d>
 8010074:	4602      	mov	r2, r0
 8010076:	460b      	mov	r3, r1
 8010078:	4630      	mov	r0, r6
 801007a:	4639      	mov	r1, r7
 801007c:	f7f0 f904 	bl	8000288 <__aeabi_dsub>
 8010080:	460b      	mov	r3, r1
 8010082:	4602      	mov	r2, r0
 8010084:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010088:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801008c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801008e:	ea46 060a 	orr.w	r6, r6, sl
 8010092:	431e      	orrs	r6, r3
 8010094:	d06f      	beq.n	8010176 <_strtod_l+0xb86>
 8010096:	a30e      	add	r3, pc, #56	@ (adr r3, 80100d0 <_strtod_l+0xae0>)
 8010098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009c:	f7f0 fd1e 	bl	8000adc <__aeabi_dcmplt>
 80100a0:	2800      	cmp	r0, #0
 80100a2:	f47f accf 	bne.w	800fa44 <_strtod_l+0x454>
 80100a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80100d8 <_strtod_l+0xae8>)
 80100a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80100b0:	f7f0 fd32 	bl	8000b18 <__aeabi_dcmpgt>
 80100b4:	2800      	cmp	r0, #0
 80100b6:	d093      	beq.n	800ffe0 <_strtod_l+0x9f0>
 80100b8:	e4c4      	b.n	800fa44 <_strtod_l+0x454>
 80100ba:	bf00      	nop
 80100bc:	f3af 8000 	nop.w
 80100c0:	00000000 	.word	0x00000000
 80100c4:	bff00000 	.word	0xbff00000
 80100c8:	00000000 	.word	0x00000000
 80100cc:	3ff00000 	.word	0x3ff00000
 80100d0:	94a03595 	.word	0x94a03595
 80100d4:	3fdfffff 	.word	0x3fdfffff
 80100d8:	35afe535 	.word	0x35afe535
 80100dc:	3fe00000 	.word	0x3fe00000
 80100e0:	000fffff 	.word	0x000fffff
 80100e4:	7ff00000 	.word	0x7ff00000
 80100e8:	7fefffff 	.word	0x7fefffff
 80100ec:	3ff00000 	.word	0x3ff00000
 80100f0:	3fe00000 	.word	0x3fe00000
 80100f4:	7fe00000 	.word	0x7fe00000
 80100f8:	7c9fffff 	.word	0x7c9fffff
 80100fc:	9b08      	ldr	r3, [sp, #32]
 80100fe:	b323      	cbz	r3, 801014a <_strtod_l+0xb5a>
 8010100:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010104:	d821      	bhi.n	801014a <_strtod_l+0xb5a>
 8010106:	a328      	add	r3, pc, #160	@ (adr r3, 80101a8 <_strtod_l+0xbb8>)
 8010108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010c:	4630      	mov	r0, r6
 801010e:	4639      	mov	r1, r7
 8010110:	f7f0 fcee 	bl	8000af0 <__aeabi_dcmple>
 8010114:	b1a0      	cbz	r0, 8010140 <_strtod_l+0xb50>
 8010116:	4639      	mov	r1, r7
 8010118:	4630      	mov	r0, r6
 801011a:	f7f0 fd45 	bl	8000ba8 <__aeabi_d2uiz>
 801011e:	2801      	cmp	r0, #1
 8010120:	bf38      	it	cc
 8010122:	2001      	movcc	r0, #1
 8010124:	f7f0 f9ee 	bl	8000504 <__aeabi_ui2d>
 8010128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801012a:	4606      	mov	r6, r0
 801012c:	460f      	mov	r7, r1
 801012e:	b9fb      	cbnz	r3, 8010170 <_strtod_l+0xb80>
 8010130:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010134:	9014      	str	r0, [sp, #80]	@ 0x50
 8010136:	9315      	str	r3, [sp, #84]	@ 0x54
 8010138:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801013c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010140:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010142:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010146:	1b5b      	subs	r3, r3, r5
 8010148:	9311      	str	r3, [sp, #68]	@ 0x44
 801014a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801014e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010152:	f7ff f8f1 	bl	800f338 <__ulp>
 8010156:	4650      	mov	r0, sl
 8010158:	ec53 2b10 	vmov	r2, r3, d0
 801015c:	4659      	mov	r1, fp
 801015e:	f7f0 fa4b 	bl	80005f8 <__aeabi_dmul>
 8010162:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010166:	f7f0 f891 	bl	800028c <__adddf3>
 801016a:	4682      	mov	sl, r0
 801016c:	468b      	mov	fp, r1
 801016e:	e770      	b.n	8010052 <_strtod_l+0xa62>
 8010170:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010174:	e7e0      	b.n	8010138 <_strtod_l+0xb48>
 8010176:	a30e      	add	r3, pc, #56	@ (adr r3, 80101b0 <_strtod_l+0xbc0>)
 8010178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017c:	f7f0 fcae 	bl	8000adc <__aeabi_dcmplt>
 8010180:	e798      	b.n	80100b4 <_strtod_l+0xac4>
 8010182:	2300      	movs	r3, #0
 8010184:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010186:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010188:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801018a:	6013      	str	r3, [r2, #0]
 801018c:	f7ff ba6d 	b.w	800f66a <_strtod_l+0x7a>
 8010190:	2a65      	cmp	r2, #101	@ 0x65
 8010192:	f43f ab66 	beq.w	800f862 <_strtod_l+0x272>
 8010196:	2a45      	cmp	r2, #69	@ 0x45
 8010198:	f43f ab63 	beq.w	800f862 <_strtod_l+0x272>
 801019c:	2301      	movs	r3, #1
 801019e:	f7ff bb9e 	b.w	800f8de <_strtod_l+0x2ee>
 80101a2:	bf00      	nop
 80101a4:	f3af 8000 	nop.w
 80101a8:	ffc00000 	.word	0xffc00000
 80101ac:	41dfffff 	.word	0x41dfffff
 80101b0:	94a03595 	.word	0x94a03595
 80101b4:	3fcfffff 	.word	0x3fcfffff

080101b8 <_strtod_r>:
 80101b8:	4b01      	ldr	r3, [pc, #4]	@ (80101c0 <_strtod_r+0x8>)
 80101ba:	f7ff ba19 	b.w	800f5f0 <_strtod_l>
 80101be:	bf00      	nop
 80101c0:	200000ac 	.word	0x200000ac

080101c4 <_strtol_l.constprop.0>:
 80101c4:	2b24      	cmp	r3, #36	@ 0x24
 80101c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101ca:	4686      	mov	lr, r0
 80101cc:	4690      	mov	r8, r2
 80101ce:	d801      	bhi.n	80101d4 <_strtol_l.constprop.0+0x10>
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d106      	bne.n	80101e2 <_strtol_l.constprop.0+0x1e>
 80101d4:	f7fd fd90 	bl	800dcf8 <__errno>
 80101d8:	2316      	movs	r3, #22
 80101da:	6003      	str	r3, [r0, #0]
 80101dc:	2000      	movs	r0, #0
 80101de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101e2:	4834      	ldr	r0, [pc, #208]	@ (80102b4 <_strtol_l.constprop.0+0xf0>)
 80101e4:	460d      	mov	r5, r1
 80101e6:	462a      	mov	r2, r5
 80101e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80101ec:	5d06      	ldrb	r6, [r0, r4]
 80101ee:	f016 0608 	ands.w	r6, r6, #8
 80101f2:	d1f8      	bne.n	80101e6 <_strtol_l.constprop.0+0x22>
 80101f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80101f6:	d12d      	bne.n	8010254 <_strtol_l.constprop.0+0x90>
 80101f8:	782c      	ldrb	r4, [r5, #0]
 80101fa:	2601      	movs	r6, #1
 80101fc:	1c95      	adds	r5, r2, #2
 80101fe:	f033 0210 	bics.w	r2, r3, #16
 8010202:	d109      	bne.n	8010218 <_strtol_l.constprop.0+0x54>
 8010204:	2c30      	cmp	r4, #48	@ 0x30
 8010206:	d12a      	bne.n	801025e <_strtol_l.constprop.0+0x9a>
 8010208:	782a      	ldrb	r2, [r5, #0]
 801020a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801020e:	2a58      	cmp	r2, #88	@ 0x58
 8010210:	d125      	bne.n	801025e <_strtol_l.constprop.0+0x9a>
 8010212:	786c      	ldrb	r4, [r5, #1]
 8010214:	2310      	movs	r3, #16
 8010216:	3502      	adds	r5, #2
 8010218:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801021c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010220:	2200      	movs	r2, #0
 8010222:	fbbc f9f3 	udiv	r9, ip, r3
 8010226:	4610      	mov	r0, r2
 8010228:	fb03 ca19 	mls	sl, r3, r9, ip
 801022c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010230:	2f09      	cmp	r7, #9
 8010232:	d81b      	bhi.n	801026c <_strtol_l.constprop.0+0xa8>
 8010234:	463c      	mov	r4, r7
 8010236:	42a3      	cmp	r3, r4
 8010238:	dd27      	ble.n	801028a <_strtol_l.constprop.0+0xc6>
 801023a:	1c57      	adds	r7, r2, #1
 801023c:	d007      	beq.n	801024e <_strtol_l.constprop.0+0x8a>
 801023e:	4581      	cmp	r9, r0
 8010240:	d320      	bcc.n	8010284 <_strtol_l.constprop.0+0xc0>
 8010242:	d101      	bne.n	8010248 <_strtol_l.constprop.0+0x84>
 8010244:	45a2      	cmp	sl, r4
 8010246:	db1d      	blt.n	8010284 <_strtol_l.constprop.0+0xc0>
 8010248:	fb00 4003 	mla	r0, r0, r3, r4
 801024c:	2201      	movs	r2, #1
 801024e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010252:	e7eb      	b.n	801022c <_strtol_l.constprop.0+0x68>
 8010254:	2c2b      	cmp	r4, #43	@ 0x2b
 8010256:	bf04      	itt	eq
 8010258:	782c      	ldrbeq	r4, [r5, #0]
 801025a:	1c95      	addeq	r5, r2, #2
 801025c:	e7cf      	b.n	80101fe <_strtol_l.constprop.0+0x3a>
 801025e:	2b00      	cmp	r3, #0
 8010260:	d1da      	bne.n	8010218 <_strtol_l.constprop.0+0x54>
 8010262:	2c30      	cmp	r4, #48	@ 0x30
 8010264:	bf0c      	ite	eq
 8010266:	2308      	moveq	r3, #8
 8010268:	230a      	movne	r3, #10
 801026a:	e7d5      	b.n	8010218 <_strtol_l.constprop.0+0x54>
 801026c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010270:	2f19      	cmp	r7, #25
 8010272:	d801      	bhi.n	8010278 <_strtol_l.constprop.0+0xb4>
 8010274:	3c37      	subs	r4, #55	@ 0x37
 8010276:	e7de      	b.n	8010236 <_strtol_l.constprop.0+0x72>
 8010278:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801027c:	2f19      	cmp	r7, #25
 801027e:	d804      	bhi.n	801028a <_strtol_l.constprop.0+0xc6>
 8010280:	3c57      	subs	r4, #87	@ 0x57
 8010282:	e7d8      	b.n	8010236 <_strtol_l.constprop.0+0x72>
 8010284:	f04f 32ff 	mov.w	r2, #4294967295
 8010288:	e7e1      	b.n	801024e <_strtol_l.constprop.0+0x8a>
 801028a:	1c53      	adds	r3, r2, #1
 801028c:	d108      	bne.n	80102a0 <_strtol_l.constprop.0+0xdc>
 801028e:	2322      	movs	r3, #34	@ 0x22
 8010290:	f8ce 3000 	str.w	r3, [lr]
 8010294:	4660      	mov	r0, ip
 8010296:	f1b8 0f00 	cmp.w	r8, #0
 801029a:	d0a0      	beq.n	80101de <_strtol_l.constprop.0+0x1a>
 801029c:	1e69      	subs	r1, r5, #1
 801029e:	e006      	b.n	80102ae <_strtol_l.constprop.0+0xea>
 80102a0:	b106      	cbz	r6, 80102a4 <_strtol_l.constprop.0+0xe0>
 80102a2:	4240      	negs	r0, r0
 80102a4:	f1b8 0f00 	cmp.w	r8, #0
 80102a8:	d099      	beq.n	80101de <_strtol_l.constprop.0+0x1a>
 80102aa:	2a00      	cmp	r2, #0
 80102ac:	d1f6      	bne.n	801029c <_strtol_l.constprop.0+0xd8>
 80102ae:	f8c8 1000 	str.w	r1, [r8]
 80102b2:	e794      	b.n	80101de <_strtol_l.constprop.0+0x1a>
 80102b4:	08011e59 	.word	0x08011e59

080102b8 <_strtol_r>:
 80102b8:	f7ff bf84 	b.w	80101c4 <_strtol_l.constprop.0>

080102bc <__ssputs_r>:
 80102bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102c0:	688e      	ldr	r6, [r1, #8]
 80102c2:	461f      	mov	r7, r3
 80102c4:	42be      	cmp	r6, r7
 80102c6:	680b      	ldr	r3, [r1, #0]
 80102c8:	4682      	mov	sl, r0
 80102ca:	460c      	mov	r4, r1
 80102cc:	4690      	mov	r8, r2
 80102ce:	d82d      	bhi.n	801032c <__ssputs_r+0x70>
 80102d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80102d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80102d8:	d026      	beq.n	8010328 <__ssputs_r+0x6c>
 80102da:	6965      	ldr	r5, [r4, #20]
 80102dc:	6909      	ldr	r1, [r1, #16]
 80102de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102e2:	eba3 0901 	sub.w	r9, r3, r1
 80102e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80102ea:	1c7b      	adds	r3, r7, #1
 80102ec:	444b      	add	r3, r9
 80102ee:	106d      	asrs	r5, r5, #1
 80102f0:	429d      	cmp	r5, r3
 80102f2:	bf38      	it	cc
 80102f4:	461d      	movcc	r5, r3
 80102f6:	0553      	lsls	r3, r2, #21
 80102f8:	d527      	bpl.n	801034a <__ssputs_r+0x8e>
 80102fa:	4629      	mov	r1, r5
 80102fc:	f7fe fc1c 	bl	800eb38 <_malloc_r>
 8010300:	4606      	mov	r6, r0
 8010302:	b360      	cbz	r0, 801035e <__ssputs_r+0xa2>
 8010304:	6921      	ldr	r1, [r4, #16]
 8010306:	464a      	mov	r2, r9
 8010308:	f7fd fd23 	bl	800dd52 <memcpy>
 801030c:	89a3      	ldrh	r3, [r4, #12]
 801030e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010316:	81a3      	strh	r3, [r4, #12]
 8010318:	6126      	str	r6, [r4, #16]
 801031a:	6165      	str	r5, [r4, #20]
 801031c:	444e      	add	r6, r9
 801031e:	eba5 0509 	sub.w	r5, r5, r9
 8010322:	6026      	str	r6, [r4, #0]
 8010324:	60a5      	str	r5, [r4, #8]
 8010326:	463e      	mov	r6, r7
 8010328:	42be      	cmp	r6, r7
 801032a:	d900      	bls.n	801032e <__ssputs_r+0x72>
 801032c:	463e      	mov	r6, r7
 801032e:	6820      	ldr	r0, [r4, #0]
 8010330:	4632      	mov	r2, r6
 8010332:	4641      	mov	r1, r8
 8010334:	f000 fb7c 	bl	8010a30 <memmove>
 8010338:	68a3      	ldr	r3, [r4, #8]
 801033a:	1b9b      	subs	r3, r3, r6
 801033c:	60a3      	str	r3, [r4, #8]
 801033e:	6823      	ldr	r3, [r4, #0]
 8010340:	4433      	add	r3, r6
 8010342:	6023      	str	r3, [r4, #0]
 8010344:	2000      	movs	r0, #0
 8010346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801034a:	462a      	mov	r2, r5
 801034c:	f000 ff29 	bl	80111a2 <_realloc_r>
 8010350:	4606      	mov	r6, r0
 8010352:	2800      	cmp	r0, #0
 8010354:	d1e0      	bne.n	8010318 <__ssputs_r+0x5c>
 8010356:	6921      	ldr	r1, [r4, #16]
 8010358:	4650      	mov	r0, sl
 801035a:	f7fe fb79 	bl	800ea50 <_free_r>
 801035e:	230c      	movs	r3, #12
 8010360:	f8ca 3000 	str.w	r3, [sl]
 8010364:	89a3      	ldrh	r3, [r4, #12]
 8010366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801036a:	81a3      	strh	r3, [r4, #12]
 801036c:	f04f 30ff 	mov.w	r0, #4294967295
 8010370:	e7e9      	b.n	8010346 <__ssputs_r+0x8a>
	...

08010374 <_svfiprintf_r>:
 8010374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010378:	4698      	mov	r8, r3
 801037a:	898b      	ldrh	r3, [r1, #12]
 801037c:	061b      	lsls	r3, r3, #24
 801037e:	b09d      	sub	sp, #116	@ 0x74
 8010380:	4607      	mov	r7, r0
 8010382:	460d      	mov	r5, r1
 8010384:	4614      	mov	r4, r2
 8010386:	d510      	bpl.n	80103aa <_svfiprintf_r+0x36>
 8010388:	690b      	ldr	r3, [r1, #16]
 801038a:	b973      	cbnz	r3, 80103aa <_svfiprintf_r+0x36>
 801038c:	2140      	movs	r1, #64	@ 0x40
 801038e:	f7fe fbd3 	bl	800eb38 <_malloc_r>
 8010392:	6028      	str	r0, [r5, #0]
 8010394:	6128      	str	r0, [r5, #16]
 8010396:	b930      	cbnz	r0, 80103a6 <_svfiprintf_r+0x32>
 8010398:	230c      	movs	r3, #12
 801039a:	603b      	str	r3, [r7, #0]
 801039c:	f04f 30ff 	mov.w	r0, #4294967295
 80103a0:	b01d      	add	sp, #116	@ 0x74
 80103a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a6:	2340      	movs	r3, #64	@ 0x40
 80103a8:	616b      	str	r3, [r5, #20]
 80103aa:	2300      	movs	r3, #0
 80103ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80103ae:	2320      	movs	r3, #32
 80103b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80103b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80103b8:	2330      	movs	r3, #48	@ 0x30
 80103ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010558 <_svfiprintf_r+0x1e4>
 80103be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80103c2:	f04f 0901 	mov.w	r9, #1
 80103c6:	4623      	mov	r3, r4
 80103c8:	469a      	mov	sl, r3
 80103ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103ce:	b10a      	cbz	r2, 80103d4 <_svfiprintf_r+0x60>
 80103d0:	2a25      	cmp	r2, #37	@ 0x25
 80103d2:	d1f9      	bne.n	80103c8 <_svfiprintf_r+0x54>
 80103d4:	ebba 0b04 	subs.w	fp, sl, r4
 80103d8:	d00b      	beq.n	80103f2 <_svfiprintf_r+0x7e>
 80103da:	465b      	mov	r3, fp
 80103dc:	4622      	mov	r2, r4
 80103de:	4629      	mov	r1, r5
 80103e0:	4638      	mov	r0, r7
 80103e2:	f7ff ff6b 	bl	80102bc <__ssputs_r>
 80103e6:	3001      	adds	r0, #1
 80103e8:	f000 80a7 	beq.w	801053a <_svfiprintf_r+0x1c6>
 80103ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103ee:	445a      	add	r2, fp
 80103f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80103f2:	f89a 3000 	ldrb.w	r3, [sl]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	f000 809f 	beq.w	801053a <_svfiprintf_r+0x1c6>
 80103fc:	2300      	movs	r3, #0
 80103fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010406:	f10a 0a01 	add.w	sl, sl, #1
 801040a:	9304      	str	r3, [sp, #16]
 801040c:	9307      	str	r3, [sp, #28]
 801040e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010412:	931a      	str	r3, [sp, #104]	@ 0x68
 8010414:	4654      	mov	r4, sl
 8010416:	2205      	movs	r2, #5
 8010418:	f814 1b01 	ldrb.w	r1, [r4], #1
 801041c:	484e      	ldr	r0, [pc, #312]	@ (8010558 <_svfiprintf_r+0x1e4>)
 801041e:	f7ef fed7 	bl	80001d0 <memchr>
 8010422:	9a04      	ldr	r2, [sp, #16]
 8010424:	b9d8      	cbnz	r0, 801045e <_svfiprintf_r+0xea>
 8010426:	06d0      	lsls	r0, r2, #27
 8010428:	bf44      	itt	mi
 801042a:	2320      	movmi	r3, #32
 801042c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010430:	0711      	lsls	r1, r2, #28
 8010432:	bf44      	itt	mi
 8010434:	232b      	movmi	r3, #43	@ 0x2b
 8010436:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801043a:	f89a 3000 	ldrb.w	r3, [sl]
 801043e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010440:	d015      	beq.n	801046e <_svfiprintf_r+0xfa>
 8010442:	9a07      	ldr	r2, [sp, #28]
 8010444:	4654      	mov	r4, sl
 8010446:	2000      	movs	r0, #0
 8010448:	f04f 0c0a 	mov.w	ip, #10
 801044c:	4621      	mov	r1, r4
 801044e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010452:	3b30      	subs	r3, #48	@ 0x30
 8010454:	2b09      	cmp	r3, #9
 8010456:	d94b      	bls.n	80104f0 <_svfiprintf_r+0x17c>
 8010458:	b1b0      	cbz	r0, 8010488 <_svfiprintf_r+0x114>
 801045a:	9207      	str	r2, [sp, #28]
 801045c:	e014      	b.n	8010488 <_svfiprintf_r+0x114>
 801045e:	eba0 0308 	sub.w	r3, r0, r8
 8010462:	fa09 f303 	lsl.w	r3, r9, r3
 8010466:	4313      	orrs	r3, r2
 8010468:	9304      	str	r3, [sp, #16]
 801046a:	46a2      	mov	sl, r4
 801046c:	e7d2      	b.n	8010414 <_svfiprintf_r+0xa0>
 801046e:	9b03      	ldr	r3, [sp, #12]
 8010470:	1d19      	adds	r1, r3, #4
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	9103      	str	r1, [sp, #12]
 8010476:	2b00      	cmp	r3, #0
 8010478:	bfbb      	ittet	lt
 801047a:	425b      	neglt	r3, r3
 801047c:	f042 0202 	orrlt.w	r2, r2, #2
 8010480:	9307      	strge	r3, [sp, #28]
 8010482:	9307      	strlt	r3, [sp, #28]
 8010484:	bfb8      	it	lt
 8010486:	9204      	strlt	r2, [sp, #16]
 8010488:	7823      	ldrb	r3, [r4, #0]
 801048a:	2b2e      	cmp	r3, #46	@ 0x2e
 801048c:	d10a      	bne.n	80104a4 <_svfiprintf_r+0x130>
 801048e:	7863      	ldrb	r3, [r4, #1]
 8010490:	2b2a      	cmp	r3, #42	@ 0x2a
 8010492:	d132      	bne.n	80104fa <_svfiprintf_r+0x186>
 8010494:	9b03      	ldr	r3, [sp, #12]
 8010496:	1d1a      	adds	r2, r3, #4
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	9203      	str	r2, [sp, #12]
 801049c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80104a0:	3402      	adds	r4, #2
 80104a2:	9305      	str	r3, [sp, #20]
 80104a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010568 <_svfiprintf_r+0x1f4>
 80104a8:	7821      	ldrb	r1, [r4, #0]
 80104aa:	2203      	movs	r2, #3
 80104ac:	4650      	mov	r0, sl
 80104ae:	f7ef fe8f 	bl	80001d0 <memchr>
 80104b2:	b138      	cbz	r0, 80104c4 <_svfiprintf_r+0x150>
 80104b4:	9b04      	ldr	r3, [sp, #16]
 80104b6:	eba0 000a 	sub.w	r0, r0, sl
 80104ba:	2240      	movs	r2, #64	@ 0x40
 80104bc:	4082      	lsls	r2, r0
 80104be:	4313      	orrs	r3, r2
 80104c0:	3401      	adds	r4, #1
 80104c2:	9304      	str	r3, [sp, #16]
 80104c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104c8:	4824      	ldr	r0, [pc, #144]	@ (801055c <_svfiprintf_r+0x1e8>)
 80104ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80104ce:	2206      	movs	r2, #6
 80104d0:	f7ef fe7e 	bl	80001d0 <memchr>
 80104d4:	2800      	cmp	r0, #0
 80104d6:	d036      	beq.n	8010546 <_svfiprintf_r+0x1d2>
 80104d8:	4b21      	ldr	r3, [pc, #132]	@ (8010560 <_svfiprintf_r+0x1ec>)
 80104da:	bb1b      	cbnz	r3, 8010524 <_svfiprintf_r+0x1b0>
 80104dc:	9b03      	ldr	r3, [sp, #12]
 80104de:	3307      	adds	r3, #7
 80104e0:	f023 0307 	bic.w	r3, r3, #7
 80104e4:	3308      	adds	r3, #8
 80104e6:	9303      	str	r3, [sp, #12]
 80104e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104ea:	4433      	add	r3, r6
 80104ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80104ee:	e76a      	b.n	80103c6 <_svfiprintf_r+0x52>
 80104f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80104f4:	460c      	mov	r4, r1
 80104f6:	2001      	movs	r0, #1
 80104f8:	e7a8      	b.n	801044c <_svfiprintf_r+0xd8>
 80104fa:	2300      	movs	r3, #0
 80104fc:	3401      	adds	r4, #1
 80104fe:	9305      	str	r3, [sp, #20]
 8010500:	4619      	mov	r1, r3
 8010502:	f04f 0c0a 	mov.w	ip, #10
 8010506:	4620      	mov	r0, r4
 8010508:	f810 2b01 	ldrb.w	r2, [r0], #1
 801050c:	3a30      	subs	r2, #48	@ 0x30
 801050e:	2a09      	cmp	r2, #9
 8010510:	d903      	bls.n	801051a <_svfiprintf_r+0x1a6>
 8010512:	2b00      	cmp	r3, #0
 8010514:	d0c6      	beq.n	80104a4 <_svfiprintf_r+0x130>
 8010516:	9105      	str	r1, [sp, #20]
 8010518:	e7c4      	b.n	80104a4 <_svfiprintf_r+0x130>
 801051a:	fb0c 2101 	mla	r1, ip, r1, r2
 801051e:	4604      	mov	r4, r0
 8010520:	2301      	movs	r3, #1
 8010522:	e7f0      	b.n	8010506 <_svfiprintf_r+0x192>
 8010524:	ab03      	add	r3, sp, #12
 8010526:	9300      	str	r3, [sp, #0]
 8010528:	462a      	mov	r2, r5
 801052a:	4b0e      	ldr	r3, [pc, #56]	@ (8010564 <_svfiprintf_r+0x1f0>)
 801052c:	a904      	add	r1, sp, #16
 801052e:	4638      	mov	r0, r7
 8010530:	f7fc faf2 	bl	800cb18 <_printf_float>
 8010534:	1c42      	adds	r2, r0, #1
 8010536:	4606      	mov	r6, r0
 8010538:	d1d6      	bne.n	80104e8 <_svfiprintf_r+0x174>
 801053a:	89ab      	ldrh	r3, [r5, #12]
 801053c:	065b      	lsls	r3, r3, #25
 801053e:	f53f af2d 	bmi.w	801039c <_svfiprintf_r+0x28>
 8010542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010544:	e72c      	b.n	80103a0 <_svfiprintf_r+0x2c>
 8010546:	ab03      	add	r3, sp, #12
 8010548:	9300      	str	r3, [sp, #0]
 801054a:	462a      	mov	r2, r5
 801054c:	4b05      	ldr	r3, [pc, #20]	@ (8010564 <_svfiprintf_r+0x1f0>)
 801054e:	a904      	add	r1, sp, #16
 8010550:	4638      	mov	r0, r7
 8010552:	f7fc fd79 	bl	800d048 <_printf_i>
 8010556:	e7ed      	b.n	8010534 <_svfiprintf_r+0x1c0>
 8010558:	08011f59 	.word	0x08011f59
 801055c:	08011f63 	.word	0x08011f63
 8010560:	0800cb19 	.word	0x0800cb19
 8010564:	080102bd 	.word	0x080102bd
 8010568:	08011f5f 	.word	0x08011f5f

0801056c <__sfputc_r>:
 801056c:	6893      	ldr	r3, [r2, #8]
 801056e:	3b01      	subs	r3, #1
 8010570:	2b00      	cmp	r3, #0
 8010572:	b410      	push	{r4}
 8010574:	6093      	str	r3, [r2, #8]
 8010576:	da08      	bge.n	801058a <__sfputc_r+0x1e>
 8010578:	6994      	ldr	r4, [r2, #24]
 801057a:	42a3      	cmp	r3, r4
 801057c:	db01      	blt.n	8010582 <__sfputc_r+0x16>
 801057e:	290a      	cmp	r1, #10
 8010580:	d103      	bne.n	801058a <__sfputc_r+0x1e>
 8010582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010586:	f7fd ba28 	b.w	800d9da <__swbuf_r>
 801058a:	6813      	ldr	r3, [r2, #0]
 801058c:	1c58      	adds	r0, r3, #1
 801058e:	6010      	str	r0, [r2, #0]
 8010590:	7019      	strb	r1, [r3, #0]
 8010592:	4608      	mov	r0, r1
 8010594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010598:	4770      	bx	lr

0801059a <__sfputs_r>:
 801059a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801059c:	4606      	mov	r6, r0
 801059e:	460f      	mov	r7, r1
 80105a0:	4614      	mov	r4, r2
 80105a2:	18d5      	adds	r5, r2, r3
 80105a4:	42ac      	cmp	r4, r5
 80105a6:	d101      	bne.n	80105ac <__sfputs_r+0x12>
 80105a8:	2000      	movs	r0, #0
 80105aa:	e007      	b.n	80105bc <__sfputs_r+0x22>
 80105ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105b0:	463a      	mov	r2, r7
 80105b2:	4630      	mov	r0, r6
 80105b4:	f7ff ffda 	bl	801056c <__sfputc_r>
 80105b8:	1c43      	adds	r3, r0, #1
 80105ba:	d1f3      	bne.n	80105a4 <__sfputs_r+0xa>
 80105bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080105c0 <_vfiprintf_r>:
 80105c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c4:	460d      	mov	r5, r1
 80105c6:	b09d      	sub	sp, #116	@ 0x74
 80105c8:	4614      	mov	r4, r2
 80105ca:	4698      	mov	r8, r3
 80105cc:	4606      	mov	r6, r0
 80105ce:	b118      	cbz	r0, 80105d8 <_vfiprintf_r+0x18>
 80105d0:	6a03      	ldr	r3, [r0, #32]
 80105d2:	b90b      	cbnz	r3, 80105d8 <_vfiprintf_r+0x18>
 80105d4:	f7fd f8f8 	bl	800d7c8 <__sinit>
 80105d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105da:	07d9      	lsls	r1, r3, #31
 80105dc:	d405      	bmi.n	80105ea <_vfiprintf_r+0x2a>
 80105de:	89ab      	ldrh	r3, [r5, #12]
 80105e0:	059a      	lsls	r2, r3, #22
 80105e2:	d402      	bmi.n	80105ea <_vfiprintf_r+0x2a>
 80105e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105e6:	f7fd fbb2 	bl	800dd4e <__retarget_lock_acquire_recursive>
 80105ea:	89ab      	ldrh	r3, [r5, #12]
 80105ec:	071b      	lsls	r3, r3, #28
 80105ee:	d501      	bpl.n	80105f4 <_vfiprintf_r+0x34>
 80105f0:	692b      	ldr	r3, [r5, #16]
 80105f2:	b99b      	cbnz	r3, 801061c <_vfiprintf_r+0x5c>
 80105f4:	4629      	mov	r1, r5
 80105f6:	4630      	mov	r0, r6
 80105f8:	f7fd fa2e 	bl	800da58 <__swsetup_r>
 80105fc:	b170      	cbz	r0, 801061c <_vfiprintf_r+0x5c>
 80105fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010600:	07dc      	lsls	r4, r3, #31
 8010602:	d504      	bpl.n	801060e <_vfiprintf_r+0x4e>
 8010604:	f04f 30ff 	mov.w	r0, #4294967295
 8010608:	b01d      	add	sp, #116	@ 0x74
 801060a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060e:	89ab      	ldrh	r3, [r5, #12]
 8010610:	0598      	lsls	r0, r3, #22
 8010612:	d4f7      	bmi.n	8010604 <_vfiprintf_r+0x44>
 8010614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010616:	f7fd fb9b 	bl	800dd50 <__retarget_lock_release_recursive>
 801061a:	e7f3      	b.n	8010604 <_vfiprintf_r+0x44>
 801061c:	2300      	movs	r3, #0
 801061e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010620:	2320      	movs	r3, #32
 8010622:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010626:	f8cd 800c 	str.w	r8, [sp, #12]
 801062a:	2330      	movs	r3, #48	@ 0x30
 801062c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80107dc <_vfiprintf_r+0x21c>
 8010630:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010634:	f04f 0901 	mov.w	r9, #1
 8010638:	4623      	mov	r3, r4
 801063a:	469a      	mov	sl, r3
 801063c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010640:	b10a      	cbz	r2, 8010646 <_vfiprintf_r+0x86>
 8010642:	2a25      	cmp	r2, #37	@ 0x25
 8010644:	d1f9      	bne.n	801063a <_vfiprintf_r+0x7a>
 8010646:	ebba 0b04 	subs.w	fp, sl, r4
 801064a:	d00b      	beq.n	8010664 <_vfiprintf_r+0xa4>
 801064c:	465b      	mov	r3, fp
 801064e:	4622      	mov	r2, r4
 8010650:	4629      	mov	r1, r5
 8010652:	4630      	mov	r0, r6
 8010654:	f7ff ffa1 	bl	801059a <__sfputs_r>
 8010658:	3001      	adds	r0, #1
 801065a:	f000 80a7 	beq.w	80107ac <_vfiprintf_r+0x1ec>
 801065e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010660:	445a      	add	r2, fp
 8010662:	9209      	str	r2, [sp, #36]	@ 0x24
 8010664:	f89a 3000 	ldrb.w	r3, [sl]
 8010668:	2b00      	cmp	r3, #0
 801066a:	f000 809f 	beq.w	80107ac <_vfiprintf_r+0x1ec>
 801066e:	2300      	movs	r3, #0
 8010670:	f04f 32ff 	mov.w	r2, #4294967295
 8010674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010678:	f10a 0a01 	add.w	sl, sl, #1
 801067c:	9304      	str	r3, [sp, #16]
 801067e:	9307      	str	r3, [sp, #28]
 8010680:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010684:	931a      	str	r3, [sp, #104]	@ 0x68
 8010686:	4654      	mov	r4, sl
 8010688:	2205      	movs	r2, #5
 801068a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801068e:	4853      	ldr	r0, [pc, #332]	@ (80107dc <_vfiprintf_r+0x21c>)
 8010690:	f7ef fd9e 	bl	80001d0 <memchr>
 8010694:	9a04      	ldr	r2, [sp, #16]
 8010696:	b9d8      	cbnz	r0, 80106d0 <_vfiprintf_r+0x110>
 8010698:	06d1      	lsls	r1, r2, #27
 801069a:	bf44      	itt	mi
 801069c:	2320      	movmi	r3, #32
 801069e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106a2:	0713      	lsls	r3, r2, #28
 80106a4:	bf44      	itt	mi
 80106a6:	232b      	movmi	r3, #43	@ 0x2b
 80106a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106ac:	f89a 3000 	ldrb.w	r3, [sl]
 80106b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80106b2:	d015      	beq.n	80106e0 <_vfiprintf_r+0x120>
 80106b4:	9a07      	ldr	r2, [sp, #28]
 80106b6:	4654      	mov	r4, sl
 80106b8:	2000      	movs	r0, #0
 80106ba:	f04f 0c0a 	mov.w	ip, #10
 80106be:	4621      	mov	r1, r4
 80106c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106c4:	3b30      	subs	r3, #48	@ 0x30
 80106c6:	2b09      	cmp	r3, #9
 80106c8:	d94b      	bls.n	8010762 <_vfiprintf_r+0x1a2>
 80106ca:	b1b0      	cbz	r0, 80106fa <_vfiprintf_r+0x13a>
 80106cc:	9207      	str	r2, [sp, #28]
 80106ce:	e014      	b.n	80106fa <_vfiprintf_r+0x13a>
 80106d0:	eba0 0308 	sub.w	r3, r0, r8
 80106d4:	fa09 f303 	lsl.w	r3, r9, r3
 80106d8:	4313      	orrs	r3, r2
 80106da:	9304      	str	r3, [sp, #16]
 80106dc:	46a2      	mov	sl, r4
 80106de:	e7d2      	b.n	8010686 <_vfiprintf_r+0xc6>
 80106e0:	9b03      	ldr	r3, [sp, #12]
 80106e2:	1d19      	adds	r1, r3, #4
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	9103      	str	r1, [sp, #12]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	bfbb      	ittet	lt
 80106ec:	425b      	neglt	r3, r3
 80106ee:	f042 0202 	orrlt.w	r2, r2, #2
 80106f2:	9307      	strge	r3, [sp, #28]
 80106f4:	9307      	strlt	r3, [sp, #28]
 80106f6:	bfb8      	it	lt
 80106f8:	9204      	strlt	r2, [sp, #16]
 80106fa:	7823      	ldrb	r3, [r4, #0]
 80106fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80106fe:	d10a      	bne.n	8010716 <_vfiprintf_r+0x156>
 8010700:	7863      	ldrb	r3, [r4, #1]
 8010702:	2b2a      	cmp	r3, #42	@ 0x2a
 8010704:	d132      	bne.n	801076c <_vfiprintf_r+0x1ac>
 8010706:	9b03      	ldr	r3, [sp, #12]
 8010708:	1d1a      	adds	r2, r3, #4
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	9203      	str	r2, [sp, #12]
 801070e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010712:	3402      	adds	r4, #2
 8010714:	9305      	str	r3, [sp, #20]
 8010716:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80107ec <_vfiprintf_r+0x22c>
 801071a:	7821      	ldrb	r1, [r4, #0]
 801071c:	2203      	movs	r2, #3
 801071e:	4650      	mov	r0, sl
 8010720:	f7ef fd56 	bl	80001d0 <memchr>
 8010724:	b138      	cbz	r0, 8010736 <_vfiprintf_r+0x176>
 8010726:	9b04      	ldr	r3, [sp, #16]
 8010728:	eba0 000a 	sub.w	r0, r0, sl
 801072c:	2240      	movs	r2, #64	@ 0x40
 801072e:	4082      	lsls	r2, r0
 8010730:	4313      	orrs	r3, r2
 8010732:	3401      	adds	r4, #1
 8010734:	9304      	str	r3, [sp, #16]
 8010736:	f814 1b01 	ldrb.w	r1, [r4], #1
 801073a:	4829      	ldr	r0, [pc, #164]	@ (80107e0 <_vfiprintf_r+0x220>)
 801073c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010740:	2206      	movs	r2, #6
 8010742:	f7ef fd45 	bl	80001d0 <memchr>
 8010746:	2800      	cmp	r0, #0
 8010748:	d03f      	beq.n	80107ca <_vfiprintf_r+0x20a>
 801074a:	4b26      	ldr	r3, [pc, #152]	@ (80107e4 <_vfiprintf_r+0x224>)
 801074c:	bb1b      	cbnz	r3, 8010796 <_vfiprintf_r+0x1d6>
 801074e:	9b03      	ldr	r3, [sp, #12]
 8010750:	3307      	adds	r3, #7
 8010752:	f023 0307 	bic.w	r3, r3, #7
 8010756:	3308      	adds	r3, #8
 8010758:	9303      	str	r3, [sp, #12]
 801075a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801075c:	443b      	add	r3, r7
 801075e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010760:	e76a      	b.n	8010638 <_vfiprintf_r+0x78>
 8010762:	fb0c 3202 	mla	r2, ip, r2, r3
 8010766:	460c      	mov	r4, r1
 8010768:	2001      	movs	r0, #1
 801076a:	e7a8      	b.n	80106be <_vfiprintf_r+0xfe>
 801076c:	2300      	movs	r3, #0
 801076e:	3401      	adds	r4, #1
 8010770:	9305      	str	r3, [sp, #20]
 8010772:	4619      	mov	r1, r3
 8010774:	f04f 0c0a 	mov.w	ip, #10
 8010778:	4620      	mov	r0, r4
 801077a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801077e:	3a30      	subs	r2, #48	@ 0x30
 8010780:	2a09      	cmp	r2, #9
 8010782:	d903      	bls.n	801078c <_vfiprintf_r+0x1cc>
 8010784:	2b00      	cmp	r3, #0
 8010786:	d0c6      	beq.n	8010716 <_vfiprintf_r+0x156>
 8010788:	9105      	str	r1, [sp, #20]
 801078a:	e7c4      	b.n	8010716 <_vfiprintf_r+0x156>
 801078c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010790:	4604      	mov	r4, r0
 8010792:	2301      	movs	r3, #1
 8010794:	e7f0      	b.n	8010778 <_vfiprintf_r+0x1b8>
 8010796:	ab03      	add	r3, sp, #12
 8010798:	9300      	str	r3, [sp, #0]
 801079a:	462a      	mov	r2, r5
 801079c:	4b12      	ldr	r3, [pc, #72]	@ (80107e8 <_vfiprintf_r+0x228>)
 801079e:	a904      	add	r1, sp, #16
 80107a0:	4630      	mov	r0, r6
 80107a2:	f7fc f9b9 	bl	800cb18 <_printf_float>
 80107a6:	4607      	mov	r7, r0
 80107a8:	1c78      	adds	r0, r7, #1
 80107aa:	d1d6      	bne.n	801075a <_vfiprintf_r+0x19a>
 80107ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107ae:	07d9      	lsls	r1, r3, #31
 80107b0:	d405      	bmi.n	80107be <_vfiprintf_r+0x1fe>
 80107b2:	89ab      	ldrh	r3, [r5, #12]
 80107b4:	059a      	lsls	r2, r3, #22
 80107b6:	d402      	bmi.n	80107be <_vfiprintf_r+0x1fe>
 80107b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107ba:	f7fd fac9 	bl	800dd50 <__retarget_lock_release_recursive>
 80107be:	89ab      	ldrh	r3, [r5, #12]
 80107c0:	065b      	lsls	r3, r3, #25
 80107c2:	f53f af1f 	bmi.w	8010604 <_vfiprintf_r+0x44>
 80107c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107c8:	e71e      	b.n	8010608 <_vfiprintf_r+0x48>
 80107ca:	ab03      	add	r3, sp, #12
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	462a      	mov	r2, r5
 80107d0:	4b05      	ldr	r3, [pc, #20]	@ (80107e8 <_vfiprintf_r+0x228>)
 80107d2:	a904      	add	r1, sp, #16
 80107d4:	4630      	mov	r0, r6
 80107d6:	f7fc fc37 	bl	800d048 <_printf_i>
 80107da:	e7e4      	b.n	80107a6 <_vfiprintf_r+0x1e6>
 80107dc:	08011f59 	.word	0x08011f59
 80107e0:	08011f63 	.word	0x08011f63
 80107e4:	0800cb19 	.word	0x0800cb19
 80107e8:	0801059b 	.word	0x0801059b
 80107ec:	08011f5f 	.word	0x08011f5f

080107f0 <__sflush_r>:
 80107f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80107f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107f8:	0716      	lsls	r6, r2, #28
 80107fa:	4605      	mov	r5, r0
 80107fc:	460c      	mov	r4, r1
 80107fe:	d454      	bmi.n	80108aa <__sflush_r+0xba>
 8010800:	684b      	ldr	r3, [r1, #4]
 8010802:	2b00      	cmp	r3, #0
 8010804:	dc02      	bgt.n	801080c <__sflush_r+0x1c>
 8010806:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010808:	2b00      	cmp	r3, #0
 801080a:	dd48      	ble.n	801089e <__sflush_r+0xae>
 801080c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801080e:	2e00      	cmp	r6, #0
 8010810:	d045      	beq.n	801089e <__sflush_r+0xae>
 8010812:	2300      	movs	r3, #0
 8010814:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010818:	682f      	ldr	r7, [r5, #0]
 801081a:	6a21      	ldr	r1, [r4, #32]
 801081c:	602b      	str	r3, [r5, #0]
 801081e:	d030      	beq.n	8010882 <__sflush_r+0x92>
 8010820:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010822:	89a3      	ldrh	r3, [r4, #12]
 8010824:	0759      	lsls	r1, r3, #29
 8010826:	d505      	bpl.n	8010834 <__sflush_r+0x44>
 8010828:	6863      	ldr	r3, [r4, #4]
 801082a:	1ad2      	subs	r2, r2, r3
 801082c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801082e:	b10b      	cbz	r3, 8010834 <__sflush_r+0x44>
 8010830:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010832:	1ad2      	subs	r2, r2, r3
 8010834:	2300      	movs	r3, #0
 8010836:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010838:	6a21      	ldr	r1, [r4, #32]
 801083a:	4628      	mov	r0, r5
 801083c:	47b0      	blx	r6
 801083e:	1c43      	adds	r3, r0, #1
 8010840:	89a3      	ldrh	r3, [r4, #12]
 8010842:	d106      	bne.n	8010852 <__sflush_r+0x62>
 8010844:	6829      	ldr	r1, [r5, #0]
 8010846:	291d      	cmp	r1, #29
 8010848:	d82b      	bhi.n	80108a2 <__sflush_r+0xb2>
 801084a:	4a2a      	ldr	r2, [pc, #168]	@ (80108f4 <__sflush_r+0x104>)
 801084c:	410a      	asrs	r2, r1
 801084e:	07d6      	lsls	r6, r2, #31
 8010850:	d427      	bmi.n	80108a2 <__sflush_r+0xb2>
 8010852:	2200      	movs	r2, #0
 8010854:	6062      	str	r2, [r4, #4]
 8010856:	04d9      	lsls	r1, r3, #19
 8010858:	6922      	ldr	r2, [r4, #16]
 801085a:	6022      	str	r2, [r4, #0]
 801085c:	d504      	bpl.n	8010868 <__sflush_r+0x78>
 801085e:	1c42      	adds	r2, r0, #1
 8010860:	d101      	bne.n	8010866 <__sflush_r+0x76>
 8010862:	682b      	ldr	r3, [r5, #0]
 8010864:	b903      	cbnz	r3, 8010868 <__sflush_r+0x78>
 8010866:	6560      	str	r0, [r4, #84]	@ 0x54
 8010868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801086a:	602f      	str	r7, [r5, #0]
 801086c:	b1b9      	cbz	r1, 801089e <__sflush_r+0xae>
 801086e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010872:	4299      	cmp	r1, r3
 8010874:	d002      	beq.n	801087c <__sflush_r+0x8c>
 8010876:	4628      	mov	r0, r5
 8010878:	f7fe f8ea 	bl	800ea50 <_free_r>
 801087c:	2300      	movs	r3, #0
 801087e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010880:	e00d      	b.n	801089e <__sflush_r+0xae>
 8010882:	2301      	movs	r3, #1
 8010884:	4628      	mov	r0, r5
 8010886:	47b0      	blx	r6
 8010888:	4602      	mov	r2, r0
 801088a:	1c50      	adds	r0, r2, #1
 801088c:	d1c9      	bne.n	8010822 <__sflush_r+0x32>
 801088e:	682b      	ldr	r3, [r5, #0]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d0c6      	beq.n	8010822 <__sflush_r+0x32>
 8010894:	2b1d      	cmp	r3, #29
 8010896:	d001      	beq.n	801089c <__sflush_r+0xac>
 8010898:	2b16      	cmp	r3, #22
 801089a:	d11e      	bne.n	80108da <__sflush_r+0xea>
 801089c:	602f      	str	r7, [r5, #0]
 801089e:	2000      	movs	r0, #0
 80108a0:	e022      	b.n	80108e8 <__sflush_r+0xf8>
 80108a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108a6:	b21b      	sxth	r3, r3
 80108a8:	e01b      	b.n	80108e2 <__sflush_r+0xf2>
 80108aa:	690f      	ldr	r7, [r1, #16]
 80108ac:	2f00      	cmp	r7, #0
 80108ae:	d0f6      	beq.n	801089e <__sflush_r+0xae>
 80108b0:	0793      	lsls	r3, r2, #30
 80108b2:	680e      	ldr	r6, [r1, #0]
 80108b4:	bf08      	it	eq
 80108b6:	694b      	ldreq	r3, [r1, #20]
 80108b8:	600f      	str	r7, [r1, #0]
 80108ba:	bf18      	it	ne
 80108bc:	2300      	movne	r3, #0
 80108be:	eba6 0807 	sub.w	r8, r6, r7
 80108c2:	608b      	str	r3, [r1, #8]
 80108c4:	f1b8 0f00 	cmp.w	r8, #0
 80108c8:	dde9      	ble.n	801089e <__sflush_r+0xae>
 80108ca:	6a21      	ldr	r1, [r4, #32]
 80108cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80108ce:	4643      	mov	r3, r8
 80108d0:	463a      	mov	r2, r7
 80108d2:	4628      	mov	r0, r5
 80108d4:	47b0      	blx	r6
 80108d6:	2800      	cmp	r0, #0
 80108d8:	dc08      	bgt.n	80108ec <__sflush_r+0xfc>
 80108da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108e2:	81a3      	strh	r3, [r4, #12]
 80108e4:	f04f 30ff 	mov.w	r0, #4294967295
 80108e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108ec:	4407      	add	r7, r0
 80108ee:	eba8 0800 	sub.w	r8, r8, r0
 80108f2:	e7e7      	b.n	80108c4 <__sflush_r+0xd4>
 80108f4:	dfbffffe 	.word	0xdfbffffe

080108f8 <_fflush_r>:
 80108f8:	b538      	push	{r3, r4, r5, lr}
 80108fa:	690b      	ldr	r3, [r1, #16]
 80108fc:	4605      	mov	r5, r0
 80108fe:	460c      	mov	r4, r1
 8010900:	b913      	cbnz	r3, 8010908 <_fflush_r+0x10>
 8010902:	2500      	movs	r5, #0
 8010904:	4628      	mov	r0, r5
 8010906:	bd38      	pop	{r3, r4, r5, pc}
 8010908:	b118      	cbz	r0, 8010912 <_fflush_r+0x1a>
 801090a:	6a03      	ldr	r3, [r0, #32]
 801090c:	b90b      	cbnz	r3, 8010912 <_fflush_r+0x1a>
 801090e:	f7fc ff5b 	bl	800d7c8 <__sinit>
 8010912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d0f3      	beq.n	8010902 <_fflush_r+0xa>
 801091a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801091c:	07d0      	lsls	r0, r2, #31
 801091e:	d404      	bmi.n	801092a <_fflush_r+0x32>
 8010920:	0599      	lsls	r1, r3, #22
 8010922:	d402      	bmi.n	801092a <_fflush_r+0x32>
 8010924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010926:	f7fd fa12 	bl	800dd4e <__retarget_lock_acquire_recursive>
 801092a:	4628      	mov	r0, r5
 801092c:	4621      	mov	r1, r4
 801092e:	f7ff ff5f 	bl	80107f0 <__sflush_r>
 8010932:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010934:	07da      	lsls	r2, r3, #31
 8010936:	4605      	mov	r5, r0
 8010938:	d4e4      	bmi.n	8010904 <_fflush_r+0xc>
 801093a:	89a3      	ldrh	r3, [r4, #12]
 801093c:	059b      	lsls	r3, r3, #22
 801093e:	d4e1      	bmi.n	8010904 <_fflush_r+0xc>
 8010940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010942:	f7fd fa05 	bl	800dd50 <__retarget_lock_release_recursive>
 8010946:	e7dd      	b.n	8010904 <_fflush_r+0xc>

08010948 <fiprintf>:
 8010948:	b40e      	push	{r1, r2, r3}
 801094a:	b503      	push	{r0, r1, lr}
 801094c:	4601      	mov	r1, r0
 801094e:	ab03      	add	r3, sp, #12
 8010950:	4805      	ldr	r0, [pc, #20]	@ (8010968 <fiprintf+0x20>)
 8010952:	f853 2b04 	ldr.w	r2, [r3], #4
 8010956:	6800      	ldr	r0, [r0, #0]
 8010958:	9301      	str	r3, [sp, #4]
 801095a:	f7ff fe31 	bl	80105c0 <_vfiprintf_r>
 801095e:	b002      	add	sp, #8
 8010960:	f85d eb04 	ldr.w	lr, [sp], #4
 8010964:	b003      	add	sp, #12
 8010966:	4770      	bx	lr
 8010968:	2000005c 	.word	0x2000005c

0801096c <__swhatbuf_r>:
 801096c:	b570      	push	{r4, r5, r6, lr}
 801096e:	460c      	mov	r4, r1
 8010970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010974:	2900      	cmp	r1, #0
 8010976:	b096      	sub	sp, #88	@ 0x58
 8010978:	4615      	mov	r5, r2
 801097a:	461e      	mov	r6, r3
 801097c:	da0d      	bge.n	801099a <__swhatbuf_r+0x2e>
 801097e:	89a3      	ldrh	r3, [r4, #12]
 8010980:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010984:	f04f 0100 	mov.w	r1, #0
 8010988:	bf14      	ite	ne
 801098a:	2340      	movne	r3, #64	@ 0x40
 801098c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010990:	2000      	movs	r0, #0
 8010992:	6031      	str	r1, [r6, #0]
 8010994:	602b      	str	r3, [r5, #0]
 8010996:	b016      	add	sp, #88	@ 0x58
 8010998:	bd70      	pop	{r4, r5, r6, pc}
 801099a:	466a      	mov	r2, sp
 801099c:	f000 f862 	bl	8010a64 <_fstat_r>
 80109a0:	2800      	cmp	r0, #0
 80109a2:	dbec      	blt.n	801097e <__swhatbuf_r+0x12>
 80109a4:	9901      	ldr	r1, [sp, #4]
 80109a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80109aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80109ae:	4259      	negs	r1, r3
 80109b0:	4159      	adcs	r1, r3
 80109b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80109b6:	e7eb      	b.n	8010990 <__swhatbuf_r+0x24>

080109b8 <__smakebuf_r>:
 80109b8:	898b      	ldrh	r3, [r1, #12]
 80109ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109bc:	079d      	lsls	r5, r3, #30
 80109be:	4606      	mov	r6, r0
 80109c0:	460c      	mov	r4, r1
 80109c2:	d507      	bpl.n	80109d4 <__smakebuf_r+0x1c>
 80109c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80109c8:	6023      	str	r3, [r4, #0]
 80109ca:	6123      	str	r3, [r4, #16]
 80109cc:	2301      	movs	r3, #1
 80109ce:	6163      	str	r3, [r4, #20]
 80109d0:	b003      	add	sp, #12
 80109d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109d4:	ab01      	add	r3, sp, #4
 80109d6:	466a      	mov	r2, sp
 80109d8:	f7ff ffc8 	bl	801096c <__swhatbuf_r>
 80109dc:	9f00      	ldr	r7, [sp, #0]
 80109de:	4605      	mov	r5, r0
 80109e0:	4639      	mov	r1, r7
 80109e2:	4630      	mov	r0, r6
 80109e4:	f7fe f8a8 	bl	800eb38 <_malloc_r>
 80109e8:	b948      	cbnz	r0, 80109fe <__smakebuf_r+0x46>
 80109ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109ee:	059a      	lsls	r2, r3, #22
 80109f0:	d4ee      	bmi.n	80109d0 <__smakebuf_r+0x18>
 80109f2:	f023 0303 	bic.w	r3, r3, #3
 80109f6:	f043 0302 	orr.w	r3, r3, #2
 80109fa:	81a3      	strh	r3, [r4, #12]
 80109fc:	e7e2      	b.n	80109c4 <__smakebuf_r+0xc>
 80109fe:	89a3      	ldrh	r3, [r4, #12]
 8010a00:	6020      	str	r0, [r4, #0]
 8010a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a06:	81a3      	strh	r3, [r4, #12]
 8010a08:	9b01      	ldr	r3, [sp, #4]
 8010a0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010a0e:	b15b      	cbz	r3, 8010a28 <__smakebuf_r+0x70>
 8010a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a14:	4630      	mov	r0, r6
 8010a16:	f000 f837 	bl	8010a88 <_isatty_r>
 8010a1a:	b128      	cbz	r0, 8010a28 <__smakebuf_r+0x70>
 8010a1c:	89a3      	ldrh	r3, [r4, #12]
 8010a1e:	f023 0303 	bic.w	r3, r3, #3
 8010a22:	f043 0301 	orr.w	r3, r3, #1
 8010a26:	81a3      	strh	r3, [r4, #12]
 8010a28:	89a3      	ldrh	r3, [r4, #12]
 8010a2a:	431d      	orrs	r5, r3
 8010a2c:	81a5      	strh	r5, [r4, #12]
 8010a2e:	e7cf      	b.n	80109d0 <__smakebuf_r+0x18>

08010a30 <memmove>:
 8010a30:	4288      	cmp	r0, r1
 8010a32:	b510      	push	{r4, lr}
 8010a34:	eb01 0402 	add.w	r4, r1, r2
 8010a38:	d902      	bls.n	8010a40 <memmove+0x10>
 8010a3a:	4284      	cmp	r4, r0
 8010a3c:	4623      	mov	r3, r4
 8010a3e:	d807      	bhi.n	8010a50 <memmove+0x20>
 8010a40:	1e43      	subs	r3, r0, #1
 8010a42:	42a1      	cmp	r1, r4
 8010a44:	d008      	beq.n	8010a58 <memmove+0x28>
 8010a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a4e:	e7f8      	b.n	8010a42 <memmove+0x12>
 8010a50:	4402      	add	r2, r0
 8010a52:	4601      	mov	r1, r0
 8010a54:	428a      	cmp	r2, r1
 8010a56:	d100      	bne.n	8010a5a <memmove+0x2a>
 8010a58:	bd10      	pop	{r4, pc}
 8010a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010a62:	e7f7      	b.n	8010a54 <memmove+0x24>

08010a64 <_fstat_r>:
 8010a64:	b538      	push	{r3, r4, r5, lr}
 8010a66:	4d07      	ldr	r5, [pc, #28]	@ (8010a84 <_fstat_r+0x20>)
 8010a68:	2300      	movs	r3, #0
 8010a6a:	4604      	mov	r4, r0
 8010a6c:	4608      	mov	r0, r1
 8010a6e:	4611      	mov	r1, r2
 8010a70:	602b      	str	r3, [r5, #0]
 8010a72:	f7f1 f81c 	bl	8001aae <_fstat>
 8010a76:	1c43      	adds	r3, r0, #1
 8010a78:	d102      	bne.n	8010a80 <_fstat_r+0x1c>
 8010a7a:	682b      	ldr	r3, [r5, #0]
 8010a7c:	b103      	cbz	r3, 8010a80 <_fstat_r+0x1c>
 8010a7e:	6023      	str	r3, [r4, #0]
 8010a80:	bd38      	pop	{r3, r4, r5, pc}
 8010a82:	bf00      	nop
 8010a84:	20003148 	.word	0x20003148

08010a88 <_isatty_r>:
 8010a88:	b538      	push	{r3, r4, r5, lr}
 8010a8a:	4d06      	ldr	r5, [pc, #24]	@ (8010aa4 <_isatty_r+0x1c>)
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	4604      	mov	r4, r0
 8010a90:	4608      	mov	r0, r1
 8010a92:	602b      	str	r3, [r5, #0]
 8010a94:	f7f1 f81b 	bl	8001ace <_isatty>
 8010a98:	1c43      	adds	r3, r0, #1
 8010a9a:	d102      	bne.n	8010aa2 <_isatty_r+0x1a>
 8010a9c:	682b      	ldr	r3, [r5, #0]
 8010a9e:	b103      	cbz	r3, 8010aa2 <_isatty_r+0x1a>
 8010aa0:	6023      	str	r3, [r4, #0]
 8010aa2:	bd38      	pop	{r3, r4, r5, pc}
 8010aa4:	20003148 	.word	0x20003148

08010aa8 <_sbrk_r>:
 8010aa8:	b538      	push	{r3, r4, r5, lr}
 8010aaa:	4d06      	ldr	r5, [pc, #24]	@ (8010ac4 <_sbrk_r+0x1c>)
 8010aac:	2300      	movs	r3, #0
 8010aae:	4604      	mov	r4, r0
 8010ab0:	4608      	mov	r0, r1
 8010ab2:	602b      	str	r3, [r5, #0]
 8010ab4:	f7f1 f824 	bl	8001b00 <_sbrk>
 8010ab8:	1c43      	adds	r3, r0, #1
 8010aba:	d102      	bne.n	8010ac2 <_sbrk_r+0x1a>
 8010abc:	682b      	ldr	r3, [r5, #0]
 8010abe:	b103      	cbz	r3, 8010ac2 <_sbrk_r+0x1a>
 8010ac0:	6023      	str	r3, [r4, #0]
 8010ac2:	bd38      	pop	{r3, r4, r5, pc}
 8010ac4:	20003148 	.word	0x20003148

08010ac8 <nan>:
 8010ac8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010ad0 <nan+0x8>
 8010acc:	4770      	bx	lr
 8010ace:	bf00      	nop
 8010ad0:	00000000 	.word	0x00000000
 8010ad4:	7ff80000 	.word	0x7ff80000

08010ad8 <abort>:
 8010ad8:	b508      	push	{r3, lr}
 8010ada:	2006      	movs	r0, #6
 8010adc:	f000 fbc4 	bl	8011268 <raise>
 8010ae0:	2001      	movs	r0, #1
 8010ae2:	f7f0 ff94 	bl	8001a0e <_exit>

08010ae6 <_calloc_r>:
 8010ae6:	b570      	push	{r4, r5, r6, lr}
 8010ae8:	fba1 5402 	umull	r5, r4, r1, r2
 8010aec:	b93c      	cbnz	r4, 8010afe <_calloc_r+0x18>
 8010aee:	4629      	mov	r1, r5
 8010af0:	f7fe f822 	bl	800eb38 <_malloc_r>
 8010af4:	4606      	mov	r6, r0
 8010af6:	b928      	cbnz	r0, 8010b04 <_calloc_r+0x1e>
 8010af8:	2600      	movs	r6, #0
 8010afa:	4630      	mov	r0, r6
 8010afc:	bd70      	pop	{r4, r5, r6, pc}
 8010afe:	220c      	movs	r2, #12
 8010b00:	6002      	str	r2, [r0, #0]
 8010b02:	e7f9      	b.n	8010af8 <_calloc_r+0x12>
 8010b04:	462a      	mov	r2, r5
 8010b06:	4621      	mov	r1, r4
 8010b08:	f7fd f80c 	bl	800db24 <memset>
 8010b0c:	e7f5      	b.n	8010afa <_calloc_r+0x14>

08010b0e <rshift>:
 8010b0e:	6903      	ldr	r3, [r0, #16]
 8010b10:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b18:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010b1c:	f100 0414 	add.w	r4, r0, #20
 8010b20:	dd45      	ble.n	8010bae <rshift+0xa0>
 8010b22:	f011 011f 	ands.w	r1, r1, #31
 8010b26:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010b2a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010b2e:	d10c      	bne.n	8010b4a <rshift+0x3c>
 8010b30:	f100 0710 	add.w	r7, r0, #16
 8010b34:	4629      	mov	r1, r5
 8010b36:	42b1      	cmp	r1, r6
 8010b38:	d334      	bcc.n	8010ba4 <rshift+0x96>
 8010b3a:	1a9b      	subs	r3, r3, r2
 8010b3c:	009b      	lsls	r3, r3, #2
 8010b3e:	1eea      	subs	r2, r5, #3
 8010b40:	4296      	cmp	r6, r2
 8010b42:	bf38      	it	cc
 8010b44:	2300      	movcc	r3, #0
 8010b46:	4423      	add	r3, r4
 8010b48:	e015      	b.n	8010b76 <rshift+0x68>
 8010b4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010b4e:	f1c1 0820 	rsb	r8, r1, #32
 8010b52:	40cf      	lsrs	r7, r1
 8010b54:	f105 0e04 	add.w	lr, r5, #4
 8010b58:	46a1      	mov	r9, r4
 8010b5a:	4576      	cmp	r6, lr
 8010b5c:	46f4      	mov	ip, lr
 8010b5e:	d815      	bhi.n	8010b8c <rshift+0x7e>
 8010b60:	1a9a      	subs	r2, r3, r2
 8010b62:	0092      	lsls	r2, r2, #2
 8010b64:	3a04      	subs	r2, #4
 8010b66:	3501      	adds	r5, #1
 8010b68:	42ae      	cmp	r6, r5
 8010b6a:	bf38      	it	cc
 8010b6c:	2200      	movcc	r2, #0
 8010b6e:	18a3      	adds	r3, r4, r2
 8010b70:	50a7      	str	r7, [r4, r2]
 8010b72:	b107      	cbz	r7, 8010b76 <rshift+0x68>
 8010b74:	3304      	adds	r3, #4
 8010b76:	1b1a      	subs	r2, r3, r4
 8010b78:	42a3      	cmp	r3, r4
 8010b7a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010b7e:	bf08      	it	eq
 8010b80:	2300      	moveq	r3, #0
 8010b82:	6102      	str	r2, [r0, #16]
 8010b84:	bf08      	it	eq
 8010b86:	6143      	streq	r3, [r0, #20]
 8010b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b8c:	f8dc c000 	ldr.w	ip, [ip]
 8010b90:	fa0c fc08 	lsl.w	ip, ip, r8
 8010b94:	ea4c 0707 	orr.w	r7, ip, r7
 8010b98:	f849 7b04 	str.w	r7, [r9], #4
 8010b9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010ba0:	40cf      	lsrs	r7, r1
 8010ba2:	e7da      	b.n	8010b5a <rshift+0x4c>
 8010ba4:	f851 cb04 	ldr.w	ip, [r1], #4
 8010ba8:	f847 cf04 	str.w	ip, [r7, #4]!
 8010bac:	e7c3      	b.n	8010b36 <rshift+0x28>
 8010bae:	4623      	mov	r3, r4
 8010bb0:	e7e1      	b.n	8010b76 <rshift+0x68>

08010bb2 <__hexdig_fun>:
 8010bb2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010bb6:	2b09      	cmp	r3, #9
 8010bb8:	d802      	bhi.n	8010bc0 <__hexdig_fun+0xe>
 8010bba:	3820      	subs	r0, #32
 8010bbc:	b2c0      	uxtb	r0, r0
 8010bbe:	4770      	bx	lr
 8010bc0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010bc4:	2b05      	cmp	r3, #5
 8010bc6:	d801      	bhi.n	8010bcc <__hexdig_fun+0x1a>
 8010bc8:	3847      	subs	r0, #71	@ 0x47
 8010bca:	e7f7      	b.n	8010bbc <__hexdig_fun+0xa>
 8010bcc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010bd0:	2b05      	cmp	r3, #5
 8010bd2:	d801      	bhi.n	8010bd8 <__hexdig_fun+0x26>
 8010bd4:	3827      	subs	r0, #39	@ 0x27
 8010bd6:	e7f1      	b.n	8010bbc <__hexdig_fun+0xa>
 8010bd8:	2000      	movs	r0, #0
 8010bda:	4770      	bx	lr

08010bdc <__gethex>:
 8010bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010be0:	b085      	sub	sp, #20
 8010be2:	468a      	mov	sl, r1
 8010be4:	9302      	str	r3, [sp, #8]
 8010be6:	680b      	ldr	r3, [r1, #0]
 8010be8:	9001      	str	r0, [sp, #4]
 8010bea:	4690      	mov	r8, r2
 8010bec:	1c9c      	adds	r4, r3, #2
 8010bee:	46a1      	mov	r9, r4
 8010bf0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010bf4:	2830      	cmp	r0, #48	@ 0x30
 8010bf6:	d0fa      	beq.n	8010bee <__gethex+0x12>
 8010bf8:	eba9 0303 	sub.w	r3, r9, r3
 8010bfc:	f1a3 0b02 	sub.w	fp, r3, #2
 8010c00:	f7ff ffd7 	bl	8010bb2 <__hexdig_fun>
 8010c04:	4605      	mov	r5, r0
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d168      	bne.n	8010cdc <__gethex+0x100>
 8010c0a:	49a0      	ldr	r1, [pc, #640]	@ (8010e8c <__gethex+0x2b0>)
 8010c0c:	2201      	movs	r2, #1
 8010c0e:	4648      	mov	r0, r9
 8010c10:	f7fc ff90 	bl	800db34 <strncmp>
 8010c14:	4607      	mov	r7, r0
 8010c16:	2800      	cmp	r0, #0
 8010c18:	d167      	bne.n	8010cea <__gethex+0x10e>
 8010c1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010c1e:	4626      	mov	r6, r4
 8010c20:	f7ff ffc7 	bl	8010bb2 <__hexdig_fun>
 8010c24:	2800      	cmp	r0, #0
 8010c26:	d062      	beq.n	8010cee <__gethex+0x112>
 8010c28:	4623      	mov	r3, r4
 8010c2a:	7818      	ldrb	r0, [r3, #0]
 8010c2c:	2830      	cmp	r0, #48	@ 0x30
 8010c2e:	4699      	mov	r9, r3
 8010c30:	f103 0301 	add.w	r3, r3, #1
 8010c34:	d0f9      	beq.n	8010c2a <__gethex+0x4e>
 8010c36:	f7ff ffbc 	bl	8010bb2 <__hexdig_fun>
 8010c3a:	fab0 f580 	clz	r5, r0
 8010c3e:	096d      	lsrs	r5, r5, #5
 8010c40:	f04f 0b01 	mov.w	fp, #1
 8010c44:	464a      	mov	r2, r9
 8010c46:	4616      	mov	r6, r2
 8010c48:	3201      	adds	r2, #1
 8010c4a:	7830      	ldrb	r0, [r6, #0]
 8010c4c:	f7ff ffb1 	bl	8010bb2 <__hexdig_fun>
 8010c50:	2800      	cmp	r0, #0
 8010c52:	d1f8      	bne.n	8010c46 <__gethex+0x6a>
 8010c54:	498d      	ldr	r1, [pc, #564]	@ (8010e8c <__gethex+0x2b0>)
 8010c56:	2201      	movs	r2, #1
 8010c58:	4630      	mov	r0, r6
 8010c5a:	f7fc ff6b 	bl	800db34 <strncmp>
 8010c5e:	2800      	cmp	r0, #0
 8010c60:	d13f      	bne.n	8010ce2 <__gethex+0x106>
 8010c62:	b944      	cbnz	r4, 8010c76 <__gethex+0x9a>
 8010c64:	1c74      	adds	r4, r6, #1
 8010c66:	4622      	mov	r2, r4
 8010c68:	4616      	mov	r6, r2
 8010c6a:	3201      	adds	r2, #1
 8010c6c:	7830      	ldrb	r0, [r6, #0]
 8010c6e:	f7ff ffa0 	bl	8010bb2 <__hexdig_fun>
 8010c72:	2800      	cmp	r0, #0
 8010c74:	d1f8      	bne.n	8010c68 <__gethex+0x8c>
 8010c76:	1ba4      	subs	r4, r4, r6
 8010c78:	00a7      	lsls	r7, r4, #2
 8010c7a:	7833      	ldrb	r3, [r6, #0]
 8010c7c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010c80:	2b50      	cmp	r3, #80	@ 0x50
 8010c82:	d13e      	bne.n	8010d02 <__gethex+0x126>
 8010c84:	7873      	ldrb	r3, [r6, #1]
 8010c86:	2b2b      	cmp	r3, #43	@ 0x2b
 8010c88:	d033      	beq.n	8010cf2 <__gethex+0x116>
 8010c8a:	2b2d      	cmp	r3, #45	@ 0x2d
 8010c8c:	d034      	beq.n	8010cf8 <__gethex+0x11c>
 8010c8e:	1c71      	adds	r1, r6, #1
 8010c90:	2400      	movs	r4, #0
 8010c92:	7808      	ldrb	r0, [r1, #0]
 8010c94:	f7ff ff8d 	bl	8010bb2 <__hexdig_fun>
 8010c98:	1e43      	subs	r3, r0, #1
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	2b18      	cmp	r3, #24
 8010c9e:	d830      	bhi.n	8010d02 <__gethex+0x126>
 8010ca0:	f1a0 0210 	sub.w	r2, r0, #16
 8010ca4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010ca8:	f7ff ff83 	bl	8010bb2 <__hexdig_fun>
 8010cac:	f100 3cff 	add.w	ip, r0, #4294967295
 8010cb0:	fa5f fc8c 	uxtb.w	ip, ip
 8010cb4:	f1bc 0f18 	cmp.w	ip, #24
 8010cb8:	f04f 030a 	mov.w	r3, #10
 8010cbc:	d91e      	bls.n	8010cfc <__gethex+0x120>
 8010cbe:	b104      	cbz	r4, 8010cc2 <__gethex+0xe6>
 8010cc0:	4252      	negs	r2, r2
 8010cc2:	4417      	add	r7, r2
 8010cc4:	f8ca 1000 	str.w	r1, [sl]
 8010cc8:	b1ed      	cbz	r5, 8010d06 <__gethex+0x12a>
 8010cca:	f1bb 0f00 	cmp.w	fp, #0
 8010cce:	bf0c      	ite	eq
 8010cd0:	2506      	moveq	r5, #6
 8010cd2:	2500      	movne	r5, #0
 8010cd4:	4628      	mov	r0, r5
 8010cd6:	b005      	add	sp, #20
 8010cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cdc:	2500      	movs	r5, #0
 8010cde:	462c      	mov	r4, r5
 8010ce0:	e7b0      	b.n	8010c44 <__gethex+0x68>
 8010ce2:	2c00      	cmp	r4, #0
 8010ce4:	d1c7      	bne.n	8010c76 <__gethex+0x9a>
 8010ce6:	4627      	mov	r7, r4
 8010ce8:	e7c7      	b.n	8010c7a <__gethex+0x9e>
 8010cea:	464e      	mov	r6, r9
 8010cec:	462f      	mov	r7, r5
 8010cee:	2501      	movs	r5, #1
 8010cf0:	e7c3      	b.n	8010c7a <__gethex+0x9e>
 8010cf2:	2400      	movs	r4, #0
 8010cf4:	1cb1      	adds	r1, r6, #2
 8010cf6:	e7cc      	b.n	8010c92 <__gethex+0xb6>
 8010cf8:	2401      	movs	r4, #1
 8010cfa:	e7fb      	b.n	8010cf4 <__gethex+0x118>
 8010cfc:	fb03 0002 	mla	r0, r3, r2, r0
 8010d00:	e7ce      	b.n	8010ca0 <__gethex+0xc4>
 8010d02:	4631      	mov	r1, r6
 8010d04:	e7de      	b.n	8010cc4 <__gethex+0xe8>
 8010d06:	eba6 0309 	sub.w	r3, r6, r9
 8010d0a:	3b01      	subs	r3, #1
 8010d0c:	4629      	mov	r1, r5
 8010d0e:	2b07      	cmp	r3, #7
 8010d10:	dc0a      	bgt.n	8010d28 <__gethex+0x14c>
 8010d12:	9801      	ldr	r0, [sp, #4]
 8010d14:	f7fd ff9c 	bl	800ec50 <_Balloc>
 8010d18:	4604      	mov	r4, r0
 8010d1a:	b940      	cbnz	r0, 8010d2e <__gethex+0x152>
 8010d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8010e90 <__gethex+0x2b4>)
 8010d1e:	4602      	mov	r2, r0
 8010d20:	21e4      	movs	r1, #228	@ 0xe4
 8010d22:	485c      	ldr	r0, [pc, #368]	@ (8010e94 <__gethex+0x2b8>)
 8010d24:	f7fd f82a 	bl	800dd7c <__assert_func>
 8010d28:	3101      	adds	r1, #1
 8010d2a:	105b      	asrs	r3, r3, #1
 8010d2c:	e7ef      	b.n	8010d0e <__gethex+0x132>
 8010d2e:	f100 0a14 	add.w	sl, r0, #20
 8010d32:	2300      	movs	r3, #0
 8010d34:	4655      	mov	r5, sl
 8010d36:	469b      	mov	fp, r3
 8010d38:	45b1      	cmp	r9, r6
 8010d3a:	d337      	bcc.n	8010dac <__gethex+0x1d0>
 8010d3c:	f845 bb04 	str.w	fp, [r5], #4
 8010d40:	eba5 050a 	sub.w	r5, r5, sl
 8010d44:	10ad      	asrs	r5, r5, #2
 8010d46:	6125      	str	r5, [r4, #16]
 8010d48:	4658      	mov	r0, fp
 8010d4a:	f7fe f873 	bl	800ee34 <__hi0bits>
 8010d4e:	016d      	lsls	r5, r5, #5
 8010d50:	f8d8 6000 	ldr.w	r6, [r8]
 8010d54:	1a2d      	subs	r5, r5, r0
 8010d56:	42b5      	cmp	r5, r6
 8010d58:	dd54      	ble.n	8010e04 <__gethex+0x228>
 8010d5a:	1bad      	subs	r5, r5, r6
 8010d5c:	4629      	mov	r1, r5
 8010d5e:	4620      	mov	r0, r4
 8010d60:	f7fe fc07 	bl	800f572 <__any_on>
 8010d64:	4681      	mov	r9, r0
 8010d66:	b178      	cbz	r0, 8010d88 <__gethex+0x1ac>
 8010d68:	1e6b      	subs	r3, r5, #1
 8010d6a:	1159      	asrs	r1, r3, #5
 8010d6c:	f003 021f 	and.w	r2, r3, #31
 8010d70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010d74:	f04f 0901 	mov.w	r9, #1
 8010d78:	fa09 f202 	lsl.w	r2, r9, r2
 8010d7c:	420a      	tst	r2, r1
 8010d7e:	d003      	beq.n	8010d88 <__gethex+0x1ac>
 8010d80:	454b      	cmp	r3, r9
 8010d82:	dc36      	bgt.n	8010df2 <__gethex+0x216>
 8010d84:	f04f 0902 	mov.w	r9, #2
 8010d88:	4629      	mov	r1, r5
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	f7ff febf 	bl	8010b0e <rshift>
 8010d90:	442f      	add	r7, r5
 8010d92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d96:	42bb      	cmp	r3, r7
 8010d98:	da42      	bge.n	8010e20 <__gethex+0x244>
 8010d9a:	9801      	ldr	r0, [sp, #4]
 8010d9c:	4621      	mov	r1, r4
 8010d9e:	f7fd ff97 	bl	800ecd0 <_Bfree>
 8010da2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010da4:	2300      	movs	r3, #0
 8010da6:	6013      	str	r3, [r2, #0]
 8010da8:	25a3      	movs	r5, #163	@ 0xa3
 8010daa:	e793      	b.n	8010cd4 <__gethex+0xf8>
 8010dac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010db0:	2a2e      	cmp	r2, #46	@ 0x2e
 8010db2:	d012      	beq.n	8010dda <__gethex+0x1fe>
 8010db4:	2b20      	cmp	r3, #32
 8010db6:	d104      	bne.n	8010dc2 <__gethex+0x1e6>
 8010db8:	f845 bb04 	str.w	fp, [r5], #4
 8010dbc:	f04f 0b00 	mov.w	fp, #0
 8010dc0:	465b      	mov	r3, fp
 8010dc2:	7830      	ldrb	r0, [r6, #0]
 8010dc4:	9303      	str	r3, [sp, #12]
 8010dc6:	f7ff fef4 	bl	8010bb2 <__hexdig_fun>
 8010dca:	9b03      	ldr	r3, [sp, #12]
 8010dcc:	f000 000f 	and.w	r0, r0, #15
 8010dd0:	4098      	lsls	r0, r3
 8010dd2:	ea4b 0b00 	orr.w	fp, fp, r0
 8010dd6:	3304      	adds	r3, #4
 8010dd8:	e7ae      	b.n	8010d38 <__gethex+0x15c>
 8010dda:	45b1      	cmp	r9, r6
 8010ddc:	d8ea      	bhi.n	8010db4 <__gethex+0x1d8>
 8010dde:	492b      	ldr	r1, [pc, #172]	@ (8010e8c <__gethex+0x2b0>)
 8010de0:	9303      	str	r3, [sp, #12]
 8010de2:	2201      	movs	r2, #1
 8010de4:	4630      	mov	r0, r6
 8010de6:	f7fc fea5 	bl	800db34 <strncmp>
 8010dea:	9b03      	ldr	r3, [sp, #12]
 8010dec:	2800      	cmp	r0, #0
 8010dee:	d1e1      	bne.n	8010db4 <__gethex+0x1d8>
 8010df0:	e7a2      	b.n	8010d38 <__gethex+0x15c>
 8010df2:	1ea9      	subs	r1, r5, #2
 8010df4:	4620      	mov	r0, r4
 8010df6:	f7fe fbbc 	bl	800f572 <__any_on>
 8010dfa:	2800      	cmp	r0, #0
 8010dfc:	d0c2      	beq.n	8010d84 <__gethex+0x1a8>
 8010dfe:	f04f 0903 	mov.w	r9, #3
 8010e02:	e7c1      	b.n	8010d88 <__gethex+0x1ac>
 8010e04:	da09      	bge.n	8010e1a <__gethex+0x23e>
 8010e06:	1b75      	subs	r5, r6, r5
 8010e08:	4621      	mov	r1, r4
 8010e0a:	9801      	ldr	r0, [sp, #4]
 8010e0c:	462a      	mov	r2, r5
 8010e0e:	f7fe f977 	bl	800f100 <__lshift>
 8010e12:	1b7f      	subs	r7, r7, r5
 8010e14:	4604      	mov	r4, r0
 8010e16:	f100 0a14 	add.w	sl, r0, #20
 8010e1a:	f04f 0900 	mov.w	r9, #0
 8010e1e:	e7b8      	b.n	8010d92 <__gethex+0x1b6>
 8010e20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010e24:	42bd      	cmp	r5, r7
 8010e26:	dd6f      	ble.n	8010f08 <__gethex+0x32c>
 8010e28:	1bed      	subs	r5, r5, r7
 8010e2a:	42ae      	cmp	r6, r5
 8010e2c:	dc34      	bgt.n	8010e98 <__gethex+0x2bc>
 8010e2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e32:	2b02      	cmp	r3, #2
 8010e34:	d022      	beq.n	8010e7c <__gethex+0x2a0>
 8010e36:	2b03      	cmp	r3, #3
 8010e38:	d024      	beq.n	8010e84 <__gethex+0x2a8>
 8010e3a:	2b01      	cmp	r3, #1
 8010e3c:	d115      	bne.n	8010e6a <__gethex+0x28e>
 8010e3e:	42ae      	cmp	r6, r5
 8010e40:	d113      	bne.n	8010e6a <__gethex+0x28e>
 8010e42:	2e01      	cmp	r6, #1
 8010e44:	d10b      	bne.n	8010e5e <__gethex+0x282>
 8010e46:	9a02      	ldr	r2, [sp, #8]
 8010e48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010e4c:	6013      	str	r3, [r2, #0]
 8010e4e:	2301      	movs	r3, #1
 8010e50:	6123      	str	r3, [r4, #16]
 8010e52:	f8ca 3000 	str.w	r3, [sl]
 8010e56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e58:	2562      	movs	r5, #98	@ 0x62
 8010e5a:	601c      	str	r4, [r3, #0]
 8010e5c:	e73a      	b.n	8010cd4 <__gethex+0xf8>
 8010e5e:	1e71      	subs	r1, r6, #1
 8010e60:	4620      	mov	r0, r4
 8010e62:	f7fe fb86 	bl	800f572 <__any_on>
 8010e66:	2800      	cmp	r0, #0
 8010e68:	d1ed      	bne.n	8010e46 <__gethex+0x26a>
 8010e6a:	9801      	ldr	r0, [sp, #4]
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	f7fd ff2f 	bl	800ecd0 <_Bfree>
 8010e72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e74:	2300      	movs	r3, #0
 8010e76:	6013      	str	r3, [r2, #0]
 8010e78:	2550      	movs	r5, #80	@ 0x50
 8010e7a:	e72b      	b.n	8010cd4 <__gethex+0xf8>
 8010e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d1f3      	bne.n	8010e6a <__gethex+0x28e>
 8010e82:	e7e0      	b.n	8010e46 <__gethex+0x26a>
 8010e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d1dd      	bne.n	8010e46 <__gethex+0x26a>
 8010e8a:	e7ee      	b.n	8010e6a <__gethex+0x28e>
 8010e8c:	08011e00 	.word	0x08011e00
 8010e90:	08011c93 	.word	0x08011c93
 8010e94:	08011f72 	.word	0x08011f72
 8010e98:	1e6f      	subs	r7, r5, #1
 8010e9a:	f1b9 0f00 	cmp.w	r9, #0
 8010e9e:	d130      	bne.n	8010f02 <__gethex+0x326>
 8010ea0:	b127      	cbz	r7, 8010eac <__gethex+0x2d0>
 8010ea2:	4639      	mov	r1, r7
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	f7fe fb64 	bl	800f572 <__any_on>
 8010eaa:	4681      	mov	r9, r0
 8010eac:	117a      	asrs	r2, r7, #5
 8010eae:	2301      	movs	r3, #1
 8010eb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010eb4:	f007 071f 	and.w	r7, r7, #31
 8010eb8:	40bb      	lsls	r3, r7
 8010eba:	4213      	tst	r3, r2
 8010ebc:	4629      	mov	r1, r5
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	bf18      	it	ne
 8010ec2:	f049 0902 	orrne.w	r9, r9, #2
 8010ec6:	f7ff fe22 	bl	8010b0e <rshift>
 8010eca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010ece:	1b76      	subs	r6, r6, r5
 8010ed0:	2502      	movs	r5, #2
 8010ed2:	f1b9 0f00 	cmp.w	r9, #0
 8010ed6:	d047      	beq.n	8010f68 <__gethex+0x38c>
 8010ed8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010edc:	2b02      	cmp	r3, #2
 8010ede:	d015      	beq.n	8010f0c <__gethex+0x330>
 8010ee0:	2b03      	cmp	r3, #3
 8010ee2:	d017      	beq.n	8010f14 <__gethex+0x338>
 8010ee4:	2b01      	cmp	r3, #1
 8010ee6:	d109      	bne.n	8010efc <__gethex+0x320>
 8010ee8:	f019 0f02 	tst.w	r9, #2
 8010eec:	d006      	beq.n	8010efc <__gethex+0x320>
 8010eee:	f8da 3000 	ldr.w	r3, [sl]
 8010ef2:	ea49 0903 	orr.w	r9, r9, r3
 8010ef6:	f019 0f01 	tst.w	r9, #1
 8010efa:	d10e      	bne.n	8010f1a <__gethex+0x33e>
 8010efc:	f045 0510 	orr.w	r5, r5, #16
 8010f00:	e032      	b.n	8010f68 <__gethex+0x38c>
 8010f02:	f04f 0901 	mov.w	r9, #1
 8010f06:	e7d1      	b.n	8010eac <__gethex+0x2d0>
 8010f08:	2501      	movs	r5, #1
 8010f0a:	e7e2      	b.n	8010ed2 <__gethex+0x2f6>
 8010f0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f0e:	f1c3 0301 	rsb	r3, r3, #1
 8010f12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010f14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d0f0      	beq.n	8010efc <__gethex+0x320>
 8010f1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010f1e:	f104 0314 	add.w	r3, r4, #20
 8010f22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010f26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010f2a:	f04f 0c00 	mov.w	ip, #0
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f34:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010f38:	d01b      	beq.n	8010f72 <__gethex+0x396>
 8010f3a:	3201      	adds	r2, #1
 8010f3c:	6002      	str	r2, [r0, #0]
 8010f3e:	2d02      	cmp	r5, #2
 8010f40:	f104 0314 	add.w	r3, r4, #20
 8010f44:	d13c      	bne.n	8010fc0 <__gethex+0x3e4>
 8010f46:	f8d8 2000 	ldr.w	r2, [r8]
 8010f4a:	3a01      	subs	r2, #1
 8010f4c:	42b2      	cmp	r2, r6
 8010f4e:	d109      	bne.n	8010f64 <__gethex+0x388>
 8010f50:	1171      	asrs	r1, r6, #5
 8010f52:	2201      	movs	r2, #1
 8010f54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f58:	f006 061f 	and.w	r6, r6, #31
 8010f5c:	fa02 f606 	lsl.w	r6, r2, r6
 8010f60:	421e      	tst	r6, r3
 8010f62:	d13a      	bne.n	8010fda <__gethex+0x3fe>
 8010f64:	f045 0520 	orr.w	r5, r5, #32
 8010f68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f6a:	601c      	str	r4, [r3, #0]
 8010f6c:	9b02      	ldr	r3, [sp, #8]
 8010f6e:	601f      	str	r7, [r3, #0]
 8010f70:	e6b0      	b.n	8010cd4 <__gethex+0xf8>
 8010f72:	4299      	cmp	r1, r3
 8010f74:	f843 cc04 	str.w	ip, [r3, #-4]
 8010f78:	d8d9      	bhi.n	8010f2e <__gethex+0x352>
 8010f7a:	68a3      	ldr	r3, [r4, #8]
 8010f7c:	459b      	cmp	fp, r3
 8010f7e:	db17      	blt.n	8010fb0 <__gethex+0x3d4>
 8010f80:	6861      	ldr	r1, [r4, #4]
 8010f82:	9801      	ldr	r0, [sp, #4]
 8010f84:	3101      	adds	r1, #1
 8010f86:	f7fd fe63 	bl	800ec50 <_Balloc>
 8010f8a:	4681      	mov	r9, r0
 8010f8c:	b918      	cbnz	r0, 8010f96 <__gethex+0x3ba>
 8010f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8010ff8 <__gethex+0x41c>)
 8010f90:	4602      	mov	r2, r0
 8010f92:	2184      	movs	r1, #132	@ 0x84
 8010f94:	e6c5      	b.n	8010d22 <__gethex+0x146>
 8010f96:	6922      	ldr	r2, [r4, #16]
 8010f98:	3202      	adds	r2, #2
 8010f9a:	f104 010c 	add.w	r1, r4, #12
 8010f9e:	0092      	lsls	r2, r2, #2
 8010fa0:	300c      	adds	r0, #12
 8010fa2:	f7fc fed6 	bl	800dd52 <memcpy>
 8010fa6:	4621      	mov	r1, r4
 8010fa8:	9801      	ldr	r0, [sp, #4]
 8010faa:	f7fd fe91 	bl	800ecd0 <_Bfree>
 8010fae:	464c      	mov	r4, r9
 8010fb0:	6923      	ldr	r3, [r4, #16]
 8010fb2:	1c5a      	adds	r2, r3, #1
 8010fb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010fb8:	6122      	str	r2, [r4, #16]
 8010fba:	2201      	movs	r2, #1
 8010fbc:	615a      	str	r2, [r3, #20]
 8010fbe:	e7be      	b.n	8010f3e <__gethex+0x362>
 8010fc0:	6922      	ldr	r2, [r4, #16]
 8010fc2:	455a      	cmp	r2, fp
 8010fc4:	dd0b      	ble.n	8010fde <__gethex+0x402>
 8010fc6:	2101      	movs	r1, #1
 8010fc8:	4620      	mov	r0, r4
 8010fca:	f7ff fda0 	bl	8010b0e <rshift>
 8010fce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010fd2:	3701      	adds	r7, #1
 8010fd4:	42bb      	cmp	r3, r7
 8010fd6:	f6ff aee0 	blt.w	8010d9a <__gethex+0x1be>
 8010fda:	2501      	movs	r5, #1
 8010fdc:	e7c2      	b.n	8010f64 <__gethex+0x388>
 8010fde:	f016 061f 	ands.w	r6, r6, #31
 8010fe2:	d0fa      	beq.n	8010fda <__gethex+0x3fe>
 8010fe4:	4453      	add	r3, sl
 8010fe6:	f1c6 0620 	rsb	r6, r6, #32
 8010fea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010fee:	f7fd ff21 	bl	800ee34 <__hi0bits>
 8010ff2:	42b0      	cmp	r0, r6
 8010ff4:	dbe7      	blt.n	8010fc6 <__gethex+0x3ea>
 8010ff6:	e7f0      	b.n	8010fda <__gethex+0x3fe>
 8010ff8:	08011c93 	.word	0x08011c93

08010ffc <L_shift>:
 8010ffc:	f1c2 0208 	rsb	r2, r2, #8
 8011000:	0092      	lsls	r2, r2, #2
 8011002:	b570      	push	{r4, r5, r6, lr}
 8011004:	f1c2 0620 	rsb	r6, r2, #32
 8011008:	6843      	ldr	r3, [r0, #4]
 801100a:	6804      	ldr	r4, [r0, #0]
 801100c:	fa03 f506 	lsl.w	r5, r3, r6
 8011010:	432c      	orrs	r4, r5
 8011012:	40d3      	lsrs	r3, r2
 8011014:	6004      	str	r4, [r0, #0]
 8011016:	f840 3f04 	str.w	r3, [r0, #4]!
 801101a:	4288      	cmp	r0, r1
 801101c:	d3f4      	bcc.n	8011008 <L_shift+0xc>
 801101e:	bd70      	pop	{r4, r5, r6, pc}

08011020 <__match>:
 8011020:	b530      	push	{r4, r5, lr}
 8011022:	6803      	ldr	r3, [r0, #0]
 8011024:	3301      	adds	r3, #1
 8011026:	f811 4b01 	ldrb.w	r4, [r1], #1
 801102a:	b914      	cbnz	r4, 8011032 <__match+0x12>
 801102c:	6003      	str	r3, [r0, #0]
 801102e:	2001      	movs	r0, #1
 8011030:	bd30      	pop	{r4, r5, pc}
 8011032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011036:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801103a:	2d19      	cmp	r5, #25
 801103c:	bf98      	it	ls
 801103e:	3220      	addls	r2, #32
 8011040:	42a2      	cmp	r2, r4
 8011042:	d0f0      	beq.n	8011026 <__match+0x6>
 8011044:	2000      	movs	r0, #0
 8011046:	e7f3      	b.n	8011030 <__match+0x10>

08011048 <__hexnan>:
 8011048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801104c:	680b      	ldr	r3, [r1, #0]
 801104e:	6801      	ldr	r1, [r0, #0]
 8011050:	115e      	asrs	r6, r3, #5
 8011052:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011056:	f013 031f 	ands.w	r3, r3, #31
 801105a:	b087      	sub	sp, #28
 801105c:	bf18      	it	ne
 801105e:	3604      	addne	r6, #4
 8011060:	2500      	movs	r5, #0
 8011062:	1f37      	subs	r7, r6, #4
 8011064:	4682      	mov	sl, r0
 8011066:	4690      	mov	r8, r2
 8011068:	9301      	str	r3, [sp, #4]
 801106a:	f846 5c04 	str.w	r5, [r6, #-4]
 801106e:	46b9      	mov	r9, r7
 8011070:	463c      	mov	r4, r7
 8011072:	9502      	str	r5, [sp, #8]
 8011074:	46ab      	mov	fp, r5
 8011076:	784a      	ldrb	r2, [r1, #1]
 8011078:	1c4b      	adds	r3, r1, #1
 801107a:	9303      	str	r3, [sp, #12]
 801107c:	b342      	cbz	r2, 80110d0 <__hexnan+0x88>
 801107e:	4610      	mov	r0, r2
 8011080:	9105      	str	r1, [sp, #20]
 8011082:	9204      	str	r2, [sp, #16]
 8011084:	f7ff fd95 	bl	8010bb2 <__hexdig_fun>
 8011088:	2800      	cmp	r0, #0
 801108a:	d151      	bne.n	8011130 <__hexnan+0xe8>
 801108c:	9a04      	ldr	r2, [sp, #16]
 801108e:	9905      	ldr	r1, [sp, #20]
 8011090:	2a20      	cmp	r2, #32
 8011092:	d818      	bhi.n	80110c6 <__hexnan+0x7e>
 8011094:	9b02      	ldr	r3, [sp, #8]
 8011096:	459b      	cmp	fp, r3
 8011098:	dd13      	ble.n	80110c2 <__hexnan+0x7a>
 801109a:	454c      	cmp	r4, r9
 801109c:	d206      	bcs.n	80110ac <__hexnan+0x64>
 801109e:	2d07      	cmp	r5, #7
 80110a0:	dc04      	bgt.n	80110ac <__hexnan+0x64>
 80110a2:	462a      	mov	r2, r5
 80110a4:	4649      	mov	r1, r9
 80110a6:	4620      	mov	r0, r4
 80110a8:	f7ff ffa8 	bl	8010ffc <L_shift>
 80110ac:	4544      	cmp	r4, r8
 80110ae:	d952      	bls.n	8011156 <__hexnan+0x10e>
 80110b0:	2300      	movs	r3, #0
 80110b2:	f1a4 0904 	sub.w	r9, r4, #4
 80110b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80110ba:	f8cd b008 	str.w	fp, [sp, #8]
 80110be:	464c      	mov	r4, r9
 80110c0:	461d      	mov	r5, r3
 80110c2:	9903      	ldr	r1, [sp, #12]
 80110c4:	e7d7      	b.n	8011076 <__hexnan+0x2e>
 80110c6:	2a29      	cmp	r2, #41	@ 0x29
 80110c8:	d157      	bne.n	801117a <__hexnan+0x132>
 80110ca:	3102      	adds	r1, #2
 80110cc:	f8ca 1000 	str.w	r1, [sl]
 80110d0:	f1bb 0f00 	cmp.w	fp, #0
 80110d4:	d051      	beq.n	801117a <__hexnan+0x132>
 80110d6:	454c      	cmp	r4, r9
 80110d8:	d206      	bcs.n	80110e8 <__hexnan+0xa0>
 80110da:	2d07      	cmp	r5, #7
 80110dc:	dc04      	bgt.n	80110e8 <__hexnan+0xa0>
 80110de:	462a      	mov	r2, r5
 80110e0:	4649      	mov	r1, r9
 80110e2:	4620      	mov	r0, r4
 80110e4:	f7ff ff8a 	bl	8010ffc <L_shift>
 80110e8:	4544      	cmp	r4, r8
 80110ea:	d936      	bls.n	801115a <__hexnan+0x112>
 80110ec:	f1a8 0204 	sub.w	r2, r8, #4
 80110f0:	4623      	mov	r3, r4
 80110f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80110f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80110fa:	429f      	cmp	r7, r3
 80110fc:	d2f9      	bcs.n	80110f2 <__hexnan+0xaa>
 80110fe:	1b3b      	subs	r3, r7, r4
 8011100:	f023 0303 	bic.w	r3, r3, #3
 8011104:	3304      	adds	r3, #4
 8011106:	3401      	adds	r4, #1
 8011108:	3e03      	subs	r6, #3
 801110a:	42b4      	cmp	r4, r6
 801110c:	bf88      	it	hi
 801110e:	2304      	movhi	r3, #4
 8011110:	4443      	add	r3, r8
 8011112:	2200      	movs	r2, #0
 8011114:	f843 2b04 	str.w	r2, [r3], #4
 8011118:	429f      	cmp	r7, r3
 801111a:	d2fb      	bcs.n	8011114 <__hexnan+0xcc>
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	b91b      	cbnz	r3, 8011128 <__hexnan+0xe0>
 8011120:	4547      	cmp	r7, r8
 8011122:	d128      	bne.n	8011176 <__hexnan+0x12e>
 8011124:	2301      	movs	r3, #1
 8011126:	603b      	str	r3, [r7, #0]
 8011128:	2005      	movs	r0, #5
 801112a:	b007      	add	sp, #28
 801112c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011130:	3501      	adds	r5, #1
 8011132:	2d08      	cmp	r5, #8
 8011134:	f10b 0b01 	add.w	fp, fp, #1
 8011138:	dd06      	ble.n	8011148 <__hexnan+0x100>
 801113a:	4544      	cmp	r4, r8
 801113c:	d9c1      	bls.n	80110c2 <__hexnan+0x7a>
 801113e:	2300      	movs	r3, #0
 8011140:	f844 3c04 	str.w	r3, [r4, #-4]
 8011144:	2501      	movs	r5, #1
 8011146:	3c04      	subs	r4, #4
 8011148:	6822      	ldr	r2, [r4, #0]
 801114a:	f000 000f 	and.w	r0, r0, #15
 801114e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011152:	6020      	str	r0, [r4, #0]
 8011154:	e7b5      	b.n	80110c2 <__hexnan+0x7a>
 8011156:	2508      	movs	r5, #8
 8011158:	e7b3      	b.n	80110c2 <__hexnan+0x7a>
 801115a:	9b01      	ldr	r3, [sp, #4]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d0dd      	beq.n	801111c <__hexnan+0xd4>
 8011160:	f1c3 0320 	rsb	r3, r3, #32
 8011164:	f04f 32ff 	mov.w	r2, #4294967295
 8011168:	40da      	lsrs	r2, r3
 801116a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801116e:	4013      	ands	r3, r2
 8011170:	f846 3c04 	str.w	r3, [r6, #-4]
 8011174:	e7d2      	b.n	801111c <__hexnan+0xd4>
 8011176:	3f04      	subs	r7, #4
 8011178:	e7d0      	b.n	801111c <__hexnan+0xd4>
 801117a:	2004      	movs	r0, #4
 801117c:	e7d5      	b.n	801112a <__hexnan+0xe2>

0801117e <__ascii_mbtowc>:
 801117e:	b082      	sub	sp, #8
 8011180:	b901      	cbnz	r1, 8011184 <__ascii_mbtowc+0x6>
 8011182:	a901      	add	r1, sp, #4
 8011184:	b142      	cbz	r2, 8011198 <__ascii_mbtowc+0x1a>
 8011186:	b14b      	cbz	r3, 801119c <__ascii_mbtowc+0x1e>
 8011188:	7813      	ldrb	r3, [r2, #0]
 801118a:	600b      	str	r3, [r1, #0]
 801118c:	7812      	ldrb	r2, [r2, #0]
 801118e:	1e10      	subs	r0, r2, #0
 8011190:	bf18      	it	ne
 8011192:	2001      	movne	r0, #1
 8011194:	b002      	add	sp, #8
 8011196:	4770      	bx	lr
 8011198:	4610      	mov	r0, r2
 801119a:	e7fb      	b.n	8011194 <__ascii_mbtowc+0x16>
 801119c:	f06f 0001 	mvn.w	r0, #1
 80111a0:	e7f8      	b.n	8011194 <__ascii_mbtowc+0x16>

080111a2 <_realloc_r>:
 80111a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111a6:	4680      	mov	r8, r0
 80111a8:	4615      	mov	r5, r2
 80111aa:	460c      	mov	r4, r1
 80111ac:	b921      	cbnz	r1, 80111b8 <_realloc_r+0x16>
 80111ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111b2:	4611      	mov	r1, r2
 80111b4:	f7fd bcc0 	b.w	800eb38 <_malloc_r>
 80111b8:	b92a      	cbnz	r2, 80111c6 <_realloc_r+0x24>
 80111ba:	f7fd fc49 	bl	800ea50 <_free_r>
 80111be:	2400      	movs	r4, #0
 80111c0:	4620      	mov	r0, r4
 80111c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111c6:	f000 f86b 	bl	80112a0 <_malloc_usable_size_r>
 80111ca:	4285      	cmp	r5, r0
 80111cc:	4606      	mov	r6, r0
 80111ce:	d802      	bhi.n	80111d6 <_realloc_r+0x34>
 80111d0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80111d4:	d8f4      	bhi.n	80111c0 <_realloc_r+0x1e>
 80111d6:	4629      	mov	r1, r5
 80111d8:	4640      	mov	r0, r8
 80111da:	f7fd fcad 	bl	800eb38 <_malloc_r>
 80111de:	4607      	mov	r7, r0
 80111e0:	2800      	cmp	r0, #0
 80111e2:	d0ec      	beq.n	80111be <_realloc_r+0x1c>
 80111e4:	42b5      	cmp	r5, r6
 80111e6:	462a      	mov	r2, r5
 80111e8:	4621      	mov	r1, r4
 80111ea:	bf28      	it	cs
 80111ec:	4632      	movcs	r2, r6
 80111ee:	f7fc fdb0 	bl	800dd52 <memcpy>
 80111f2:	4621      	mov	r1, r4
 80111f4:	4640      	mov	r0, r8
 80111f6:	f7fd fc2b 	bl	800ea50 <_free_r>
 80111fa:	463c      	mov	r4, r7
 80111fc:	e7e0      	b.n	80111c0 <_realloc_r+0x1e>

080111fe <__ascii_wctomb>:
 80111fe:	4603      	mov	r3, r0
 8011200:	4608      	mov	r0, r1
 8011202:	b141      	cbz	r1, 8011216 <__ascii_wctomb+0x18>
 8011204:	2aff      	cmp	r2, #255	@ 0xff
 8011206:	d904      	bls.n	8011212 <__ascii_wctomb+0x14>
 8011208:	228a      	movs	r2, #138	@ 0x8a
 801120a:	601a      	str	r2, [r3, #0]
 801120c:	f04f 30ff 	mov.w	r0, #4294967295
 8011210:	4770      	bx	lr
 8011212:	700a      	strb	r2, [r1, #0]
 8011214:	2001      	movs	r0, #1
 8011216:	4770      	bx	lr

08011218 <_raise_r>:
 8011218:	291f      	cmp	r1, #31
 801121a:	b538      	push	{r3, r4, r5, lr}
 801121c:	4605      	mov	r5, r0
 801121e:	460c      	mov	r4, r1
 8011220:	d904      	bls.n	801122c <_raise_r+0x14>
 8011222:	2316      	movs	r3, #22
 8011224:	6003      	str	r3, [r0, #0]
 8011226:	f04f 30ff 	mov.w	r0, #4294967295
 801122a:	bd38      	pop	{r3, r4, r5, pc}
 801122c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801122e:	b112      	cbz	r2, 8011236 <_raise_r+0x1e>
 8011230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011234:	b94b      	cbnz	r3, 801124a <_raise_r+0x32>
 8011236:	4628      	mov	r0, r5
 8011238:	f000 f830 	bl	801129c <_getpid_r>
 801123c:	4622      	mov	r2, r4
 801123e:	4601      	mov	r1, r0
 8011240:	4628      	mov	r0, r5
 8011242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011246:	f000 b817 	b.w	8011278 <_kill_r>
 801124a:	2b01      	cmp	r3, #1
 801124c:	d00a      	beq.n	8011264 <_raise_r+0x4c>
 801124e:	1c59      	adds	r1, r3, #1
 8011250:	d103      	bne.n	801125a <_raise_r+0x42>
 8011252:	2316      	movs	r3, #22
 8011254:	6003      	str	r3, [r0, #0]
 8011256:	2001      	movs	r0, #1
 8011258:	e7e7      	b.n	801122a <_raise_r+0x12>
 801125a:	2100      	movs	r1, #0
 801125c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011260:	4620      	mov	r0, r4
 8011262:	4798      	blx	r3
 8011264:	2000      	movs	r0, #0
 8011266:	e7e0      	b.n	801122a <_raise_r+0x12>

08011268 <raise>:
 8011268:	4b02      	ldr	r3, [pc, #8]	@ (8011274 <raise+0xc>)
 801126a:	4601      	mov	r1, r0
 801126c:	6818      	ldr	r0, [r3, #0]
 801126e:	f7ff bfd3 	b.w	8011218 <_raise_r>
 8011272:	bf00      	nop
 8011274:	2000005c 	.word	0x2000005c

08011278 <_kill_r>:
 8011278:	b538      	push	{r3, r4, r5, lr}
 801127a:	4d07      	ldr	r5, [pc, #28]	@ (8011298 <_kill_r+0x20>)
 801127c:	2300      	movs	r3, #0
 801127e:	4604      	mov	r4, r0
 8011280:	4608      	mov	r0, r1
 8011282:	4611      	mov	r1, r2
 8011284:	602b      	str	r3, [r5, #0]
 8011286:	f7f0 fbb2 	bl	80019ee <_kill>
 801128a:	1c43      	adds	r3, r0, #1
 801128c:	d102      	bne.n	8011294 <_kill_r+0x1c>
 801128e:	682b      	ldr	r3, [r5, #0]
 8011290:	b103      	cbz	r3, 8011294 <_kill_r+0x1c>
 8011292:	6023      	str	r3, [r4, #0]
 8011294:	bd38      	pop	{r3, r4, r5, pc}
 8011296:	bf00      	nop
 8011298:	20003148 	.word	0x20003148

0801129c <_getpid_r>:
 801129c:	f7f0 bb9f 	b.w	80019de <_getpid>

080112a0 <_malloc_usable_size_r>:
 80112a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112a4:	1f18      	subs	r0, r3, #4
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	bfbc      	itt	lt
 80112aa:	580b      	ldrlt	r3, [r1, r0]
 80112ac:	18c0      	addlt	r0, r0, r3
 80112ae:	4770      	bx	lr

080112b0 <_init>:
 80112b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112b2:	bf00      	nop
 80112b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112b6:	bc08      	pop	{r3}
 80112b8:	469e      	mov	lr, r3
 80112ba:	4770      	bx	lr

080112bc <_fini>:
 80112bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112be:	bf00      	nop
 80112c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112c2:	bc08      	pop	{r3}
 80112c4:	469e      	mov	lr, r3
 80112c6:	4770      	bx	lr
